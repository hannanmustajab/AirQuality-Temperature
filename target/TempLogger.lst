
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/TempLogger/target/TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00018eb8  2**0
                  CONTENTS
  3 .data         000000bc  2003e130  000d8dd0  0000e130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000604  2003e1ec  2003e1ec  0001e1ec  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d8e8c  000d8e8c  00018e8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8eb4  000d8eb4  00018eb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00136c30  00000000  00000000  00018eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001a500  00000000  00000000  0014fae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001e612  00000000  00000000  00169fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002b10  00000000  00000000  001885fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004848  00000000  00000000  0018b10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00040f83  00000000  00000000  0018f952  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0004148b  00000000  00000000  001d08d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000f7e72  00000000  00000000  00211d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000dbc8  00000000  00000000  00309bd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	c4 86 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ff29 	bl	d7e84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ff2e 	bl	d7e9a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e130 	.word	0x2003e130
   d4048:	000d8dd0 	.word	0x000d8dd0
   d404c:	2003e1ec 	.word	0x2003e1ec
   d4050:	2003e1ec 	.word	0x2003e1ec
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fff9 	bl	d7050 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8dd0 	.word	0x000d8dd0
   d4080:	000d8d70 	.word	0x000d8d70

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9d8 	b.w	d4438 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f945 	bl	d4318 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bfab 	b.w	d6fec <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b8f1 	b.w	d527c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 b8ef 	b.w	d527c <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b8f5 	b.w	d528c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b8f3 	b.w	d528c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d002      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40be:	e004      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c0:	6001      	str	r1, [r0, #0]
	      break;
   d40c2:	e002      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	b100      	cbz	r0, d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ca:	2000      	movs	r0, #0
   d40cc:	4770      	bx	lr

000d40ce <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40d0:	6804      	ldr	r4, [r0, #0]
   d40d2:	4668      	mov	r0, sp
   d40d4:	f001 fee1 	bl	d5e9a <_ZN6StringC1EOS_>
   d40d8:	4668      	mov	r0, sp
   d40da:	47a0      	blx	r4
   d40dc:	4604      	mov	r4, r0
   d40de:	4668      	mov	r0, sp
   d40e0:	f001 feeb 	bl	d5eba <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e4:	4620      	mov	r0, r4
   d40e6:	b004      	add	sp, #16
   d40e8:	bd10      	pop	{r4, pc}

000d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.37>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ec:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40f0:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f2:	f88d 3000 	strb.w	r3, [sp]
   d40f6:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f8:	4605      	mov	r5, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40fa:	f001 fa7b 	bl	d55f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
   d40fe:	4628      	mov	r0, r5
   d4100:	b003      	add	sp, #12
   d4102:	bd30      	pop	{r4, r5, pc}

000d4104 <_Z20PublishDelayFunctionv>:
  }
}

// Function to create a delay in the publish time
bool PublishDelayFunction()
{
   d4104:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0; 
  if (millis() - tstamp <= updateRate)
   d4106:	4c08      	ldr	r4, [pc, #32]	; (d4128 <_Z20PublishDelayFunctionv+0x24>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4108:	f000 fe54 	bl	d4db4 <HAL_Timer_Get_Milli_Seconds>
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	1ac0      	subs	r0, r0, r3
   d4110:	4b06      	ldr	r3, [pc, #24]	; (d412c <_Z20PublishDelayFunctionv+0x28>)
   d4112:	681b      	ldr	r3, [r3, #0]
   d4114:	4298      	cmp	r0, r3
   d4116:	d904      	bls.n	d4122 <_Z20PublishDelayFunctionv+0x1e>
   d4118:	f000 fe4c 	bl	d4db4 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else
  {
    tstamp = millis();
   d411c:	6020      	str	r0, [r4, #0]
   d411e:	2001      	movs	r0, #1
   d4120:	bd10      	pop	{r4, pc}
// Function to create a delay in the publish time
bool PublishDelayFunction()
{
  static unsigned long tstamp = 0; 
  if (millis() - tstamp <= updateRate)
    return 0;
   d4122:	2000      	movs	r0, #0
  else
  {
    tstamp = millis();
    return 1;
  }
}
   d4124:	bd10      	pop	{r4, pc}
   d4126:	bf00      	nop
   d4128:	2003e210 	.word	0x2003e210
   d412c:	2003e130 	.word	0x2003e130

000d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4130:	b508      	push	{r3, lr}
    Particle.publish("Mode","Verbose Mode Started.", PRIVATE);
    return 1;
  }
  else if (command == "0"){
    verboseMode = false;
    waitUntil(PublishDelayFunction);
   d4132:	f7ff ffe7 	bl	d4104 <_Z20PublishDelayFunctionv>
        while (_while() && !_condition()) {
   d4136:	b118      	cbz	r0, d4140 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22+0x10>
            spark_process();
        }
        return _condition();
    }
   d4138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d413c:	f7ff bfe2 	b.w	d4104 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4140:	f001 f824 	bl	d518c <spark_process>
   d4144:	e7f5      	b.n	d4132 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22+0x2>
	...

000d4148 <_Z17getSignalStrengthv>:
}

// Functions for mobile app reporting. 

void getSignalStrength()
{
   d4148:	b500      	push	{lr}
   d414a:	b08d      	sub	sp, #52	; 0x34
  WiFiSignal sig = WiFi.RSSI();
   d414c:	490a      	ldr	r1, [pc, #40]	; (d4178 <_Z17getSignalStrengthv+0x30>)
   d414e:	a803      	add	r0, sp, #12
   d4150:	f002 fef2 	bl	d6f38 <_ZN5spark9WiFiClass4RSSIEv>

  float rssi = sig.getStrength();
   d4154:	a803      	add	r0, sp, #12
   d4156:	f002 feb5 	bl	d6ec4 <_ZNK10WiFiSignal11getStrengthEv>

  snprintf(signalString, sizeof(signalString), "%.0f%%", rssi);
   d415a:	ee10 0a10 	vmov	r0, s0
   d415e:	f003 fad5 	bl	d770c <__aeabi_f2d>
   d4162:	4a06      	ldr	r2, [pc, #24]	; (d417c <_Z17getSignalStrengthv+0x34>)
   d4164:	e9cd 0100 	strd	r0, r1, [sp]
   d4168:	2110      	movs	r1, #16
   d416a:	4805      	ldr	r0, [pc, #20]	; (d4180 <_Z17getSignalStrengthv+0x38>)
   d416c:	f001 f8a6 	bl	d52bc <snprintf>
}
   d4170:	b00d      	add	sp, #52	; 0x34
   d4172:	f85d fb04 	ldr.w	pc, [sp], #4
   d4176:	bf00      	nop
   d4178:	2003e6e0 	.word	0x2003e6e0
   d417c:	000d86d8 	.word	0x000d86d8
   d4180:	2003e1f0 	.word	0x2003e1f0
   d4184:	00000000 	.word	0x00000000

000d4188 <_Z16getBatteryChargev>:

void getBatteryCharge()
{
   d4188:	b507      	push	{r0, r1, r2, lr}
  float voltage = analogRead(BATT) * 0.0011224;
   d418a:	2021      	movs	r0, #33	; 0x21
   d418c:	f002 ffaf 	bl	d70ee <analogRead>

  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d4190:	f003 faaa 	bl	d76e8 <__aeabi_i2d>
   d4194:	a30c      	add	r3, pc, #48	; (adr r3, d41c8 <_Z16getBatteryChargev+0x40>)
   d4196:	e9d3 2300 	ldrd	r2, r3, [r3]
   d419a:	f003 fb0b 	bl	d77b4 <__aeabi_dmul>
   d419e:	f003 fd1b 	bl	d7bd8 <__aeabi_d2f>
   d41a2:	f003 fab3 	bl	d770c <__aeabi_f2d>
   d41a6:	4a06      	ldr	r2, [pc, #24]	; (d41c0 <_Z16getBatteryChargev+0x38>)
   d41a8:	e9cd 0100 	strd	r0, r1, [sp]
   d41ac:	2110      	movs	r1, #16
   d41ae:	4805      	ldr	r0, [pc, #20]	; (d41c4 <_Z16getBatteryChargev+0x3c>)
   d41b0:	f001 f884 	bl	d52bc <snprintf>
}
   d41b4:	b003      	add	sp, #12
   d41b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ba:	bf00      	nop
   d41bc:	f3af 8000 	nop.w
   d41c0:	000d86df 	.word	0x000d86df
   d41c4:	2003e252 	.word	0x2003e252
   d41c8:	d2c10294 	.word	0xd2c10294
   d41cc:	3f5263af 	.word	0x3f5263af

000d41d0 <_Z14getTemperaturev>:

// Function to get temperature value from DS18B20. 
void getTemperature()
{
   d41d0:	b507      	push	{r0, r1, r2, lr}
  if (sensor.read())
   d41d2:	480a      	ldr	r0, [pc, #40]	; (d41fc <_Z14getTemperaturev+0x2c>)
   d41d4:	f000 fac2 	bl	d475c <_ZN4DS184readEv>
   d41d8:	b168      	cbz	r0, d41f6 <_Z14getTemperaturev+0x26>
  {
    snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", sensor.celsius()); 
   d41da:	4808      	ldr	r0, [pc, #32]	; (d41fc <_Z14getTemperaturev+0x2c>)
   d41dc:	f000 fae2 	bl	d47a4 <_ZN4DS187celsiusEv>
   d41e0:	ee10 0a10 	vmov	r0, s0
   d41e4:	f003 fa92 	bl	d770c <__aeabi_f2d>
   d41e8:	4a05      	ldr	r2, [pc, #20]	; (d4200 <_Z14getTemperaturev+0x30>)
   d41ea:	e9cd 0100 	strd	r0, r1, [sp]
   d41ee:	2110      	movs	r1, #16
   d41f0:	4804      	ldr	r0, [pc, #16]	; (d4204 <_Z14getTemperaturev+0x34>)
   d41f2:	f001 f863 	bl	d52bc <snprintf>
  }
  
}
   d41f6:	b003      	add	sp, #12
   d41f8:	f85d fb04 	ldr.w	pc, [sp], #4
   d41fc:	2003e220 	.word	0x2003e220
   d4200:	000d86e7 	.word	0x000d86e7
   d4204:	2003e200 	.word	0x2003e200

000d4208 <_Z15getMeasurementsv>:

void getMeasurements()
{
   d4208:	b508      	push	{r3, lr}

  getSignalStrength(); // Get Signal Strength
   d420a:	f7ff ff9d 	bl	d4148 <_Z17getSignalStrengthv>

  getBatteryCharge(); // Get Battery Charge Percentage
   d420e:	f7ff ffbb 	bl	d4188 <_Z16getBatteryChargev>

  getTemperature(); // Read Temperature from Sensor.
  
  
}
   d4212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  getSignalStrength(); // Get Signal Strength

  getBatteryCharge(); // Get Battery Charge Percentage

  getTemperature(); // Read Temperature from Sensor.
   d4216:	f7ff bfdb 	b.w	d41d0 <_Z14getTemperaturev>

000d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d421a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d421c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d421e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4220:	b17c      	cbz	r4, d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4222:	6863      	ldr	r3, [r4, #4]
   d4224:	3b01      	subs	r3, #1
   d4226:	6063      	str	r3, [r4, #4]
   d4228:	b95b      	cbnz	r3, d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d422a:	6823      	ldr	r3, [r4, #0]
   d422c:	4620      	mov	r0, r4
   d422e:	689b      	ldr	r3, [r3, #8]
   d4230:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4232:	68a3      	ldr	r3, [r4, #8]
   d4234:	3b01      	subs	r3, #1
   d4236:	60a3      	str	r3, [r4, #8]
   d4238:	b91b      	cbnz	r3, d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d423a:	6823      	ldr	r3, [r4, #0]
   d423c:	4620      	mov	r0, r4
   d423e:	68db      	ldr	r3, [r3, #12]
   d4240:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4242:	4628      	mov	r0, r5
   d4244:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4248 <_Z14SetVerboseMode6String>:
}

// Function to Toggle VerboseMode. 

bool SetVerboseMode(String command)
{
   d4248:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d424a:	4915      	ldr	r1, [pc, #84]	; (d42a0 <_Z14SetVerboseMode6String+0x58>)
   d424c:	b085      	sub	sp, #20
   d424e:	4605      	mov	r5, r0
   d4250:	f001 fe8d 	bl	d5f6e <_ZNK6String6equalsEPKc>

  if(command == "1")
   d4254:	4604      	mov	r4, r0
   d4256:	b158      	cbz	r0, d4270 <_Z14SetVerboseMode6String+0x28>
  {
    verboseMode = true;
   d4258:	4b12      	ldr	r3, [pc, #72]	; (d42a4 <_Z14SetVerboseMode6String+0x5c>)
   d425a:	2401      	movs	r4, #1
   d425c:	701c      	strb	r4, [r3, #0]
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
   d425e:	f7ff ff67 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4262:	4b11      	ldr	r3, [pc, #68]	; (d42a8 <_Z14SetVerboseMode6String+0x60>)
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode","Verbose Mode Started.", PRIVATE);
   d4264:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4266:	781b      	ldrb	r3, [r3, #0]
   d4268:	f88d 2000 	strb.w	r2, [sp]
   d426c:	4a0f      	ldr	r2, [pc, #60]	; (d42ac <_Z14SetVerboseMode6String+0x64>)
   d426e:	e00d      	b.n	d428c <_Z14SetVerboseMode6String+0x44>
   d4270:	490f      	ldr	r1, [pc, #60]	; (d42b0 <_Z14SetVerboseMode6String+0x68>)
   d4272:	4628      	mov	r0, r5
   d4274:	f001 fe7b 	bl	d5f6e <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0"){
   d4278:	b180      	cbz	r0, d429c <_Z14SetVerboseMode6String+0x54>
    verboseMode = false;
   d427a:	4b0a      	ldr	r3, [pc, #40]	; (d42a4 <_Z14SetVerboseMode6String+0x5c>)
   d427c:	701c      	strb	r4, [r3, #0]
   d427e:	f7ff ff57 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4282:	4b09      	ldr	r3, [pc, #36]	; (d42a8 <_Z14SetVerboseMode6String+0x60>)
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode","Verbose Mode Stopped.", PRIVATE);
   d4284:	4a0b      	ldr	r2, [pc, #44]	; (d42b4 <_Z14SetVerboseMode6String+0x6c>)
   d4286:	781b      	ldrb	r3, [r3, #0]
   d4288:	f88d 4000 	strb.w	r4, [sp]
   d428c:	490a      	ldr	r1, [pc, #40]	; (d42b8 <_Z14SetVerboseMode6String+0x70>)
   d428e:	a802      	add	r0, sp, #8
   d4290:	f7ff ff2b 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.37>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4294:	a803      	add	r0, sp, #12
   d4296:	f7ff ffc0 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d429a:	2001      	movs	r0, #1
    return 1;
    }
    else {
      return 0;
    }
}
   d429c:	b005      	add	sp, #20
   d429e:	bd30      	pop	{r4, r5, pc}
   d42a0:	000d889c 	.word	0x000d889c
   d42a4:	2003e251 	.word	0x2003e251
   d42a8:	2003e250 	.word	0x2003e250
   d42ac:	000d86f7 	.word	0x000d86f7
   d42b0:	000d870d 	.word	0x000d870d
   d42b4:	000d870f 	.word	0x000d870f
   d42b8:	000d87ae 	.word	0x000d87ae

000d42bc <_Z14UBIDotsHandlerv>:

bool UBIDotsHandler(){
   d42bc:	b500      	push	{lr}
 
  
    char data[256];
    float temperatureHook = sensor.celsius();
   d42be:	4811      	ldr	r0, [pc, #68]	; (d4304 <_Z14UBIDotsHandlerv+0x48>)
    else {
      return 0;
    }
}

bool UBIDotsHandler(){
   d42c0:	b0c7      	sub	sp, #284	; 0x11c
 
  
    char data[256];
    float temperatureHook = sensor.celsius();
   d42c2:	f000 fa6f 	bl	d47a4 <_ZN4DS187celsiusEv>
    float lastPublishValue = 1;
    snprintf(data,sizeof(data),"{\"Temperature\":%3.1f, \"Battery\":%3.1f}",temperatureHook, batteryString);
   d42c6:	4b10      	ldr	r3, [pc, #64]	; (d4308 <_Z14UBIDotsHandlerv+0x4c>)
   d42c8:	9302      	str	r3, [sp, #8]
   d42ca:	ee10 0a10 	vmov	r0, s0
   d42ce:	f003 fa1d 	bl	d770c <__aeabi_f2d>
   d42d2:	4a0e      	ldr	r2, [pc, #56]	; (d430c <_Z14UBIDotsHandlerv+0x50>)
   d42d4:	e9cd 0100 	strd	r0, r1, [sp]
   d42d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d42dc:	a806      	add	r0, sp, #24
   d42de:	f000 ffed 	bl	d52bc <snprintf>
   d42e2:	4b0b      	ldr	r3, [pc, #44]	; (d4310 <_Z14UBIDotsHandlerv+0x54>)
    Particle.publish("Air-Quality-Hook",data,PRIVATE);
   d42e4:	490b      	ldr	r1, [pc, #44]	; (d4314 <_Z14UBIDotsHandlerv+0x58>)
   d42e6:	781b      	ldrb	r3, [r3, #0]
   d42e8:	2200      	movs	r2, #0
   d42ea:	f88d 2000 	strb.w	r2, [sp]
   d42ee:	a804      	add	r0, sp, #16
   d42f0:	aa06      	add	r2, sp, #24
   d42f2:	f7ff fefa 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.37>
   d42f6:	a805      	add	r0, sp, #20
   d42f8:	f7ff ff8f 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    lastPublishValue = temperatureHook;
    return 1;
   d42fc:	2001      	movs	r0, #1
   d42fe:	b047      	add	sp, #284	; 0x11c
   d4300:	f85d fb04 	ldr.w	pc, [sp], #4
   d4304:	2003e220 	.word	0x2003e220
   d4308:	2003e252 	.word	0x2003e252
   d430c:	000d8725 	.word	0x000d8725
   d4310:	2003e250 	.word	0x2003e250
   d4314:	000d874c 	.word	0x000d874c

000d4318 <loop>:
  
  
}

void loop()
{
   d4318:	b530      	push	{r4, r5, lr}
  
 
  switch (state)
   d431a:	4c39      	ldr	r4, [pc, #228]	; (d4400 <loop+0xe8>)
   d431c:	7823      	ldrb	r3, [r4, #0]
   d431e:	2b02      	cmp	r3, #2
  
  
}

void loop()
{
   d4320:	b085      	sub	sp, #20
   d4322:	4625      	mov	r5, r4
  
 
  switch (state)
   d4324:	d01b      	beq.n	d435e <loop+0x46>
   d4326:	2b03      	cmp	r3, #3
   d4328:	d031      	beq.n	d438e <loop+0x76>
   d432a:	2b01      	cmp	r3, #1
   d432c:	d166      	bne.n	d43fc <loop+0xe4>
  {
  case IDLE_STATE: // IDLE State.
    
    static unsigned long TimePassed = 0;        
    if (Time.minute() - TimePassed >= refreshRate ) 
   d432e:	4d35      	ldr	r5, [pc, #212]	; (d4404 <loop+0xec>)
   d4330:	f002 f96c 	bl	d660c <_ZN9TimeClass6minuteEv>
   d4334:	682b      	ldr	r3, [r5, #0]
   d4336:	4298      	cmp	r0, r3
   d4338:	d060      	beq.n	d43fc <loop+0xe4>
    {
    state = MEASURING_STATE;
   d433a:	2302      	movs	r3, #2
   d433c:	7023      	strb	r3, [r4, #0]
    TimePassed = Time.minute();     
   d433e:	f002 f965 	bl	d660c <_ZN9TimeClass6minuteEv>
    if(verboseMode){
   d4342:	4b31      	ldr	r3, [pc, #196]	; (d4408 <loop+0xf0>)
    
    static unsigned long TimePassed = 0;        
    if (Time.minute() - TimePassed >= refreshRate ) 
    {
    state = MEASURING_STATE;
    TimePassed = Time.minute();     
   d4344:	6028      	str	r0, [r5, #0]
    if(verboseMode){
   d4346:	781b      	ldrb	r3, [r3, #0]
   d4348:	2b00      	cmp	r3, #0
   d434a:	d057      	beq.n	d43fc <loop+0xe4>
   d434c:	f7ff fef0 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4350:	4b2e      	ldr	r3, [pc, #184]	; (d440c <loop+0xf4>)
      waitUntil(PublishDelayFunction);
      Particle.publish("State","MEASURING",PRIVATE);
   d4352:	2200      	movs	r2, #0
   d4354:	781b      	ldrb	r3, [r3, #0]
   d4356:	f88d 2000 	strb.w	r2, [sp]
   d435a:	4a2d      	ldr	r2, [pc, #180]	; (d4410 <loop+0xf8>)
   d435c:	e00f      	b.n	d437e <loop+0x66>
    }
  break;

  case MEASURING_STATE: // Measuring State. 
  
    getMeasurements(); // Get Measurements and Move to Reporting State. 
   d435e:	f7ff ff53 	bl	d4208 <_Z15getMeasurementsv>
  // if (abs(temperatureHook - lastPublishValue) > 1) state = REPORTING_STATE;

    state = REPORTING_STATE;
   d4362:	2303      	movs	r3, #3
   d4364:	7023      	strb	r3, [r4, #0]
     if(verboseMode){
   d4366:	4b28      	ldr	r3, [pc, #160]	; (d4408 <loop+0xf0>)
   d4368:	781b      	ldrb	r3, [r3, #0]
   d436a:	2b00      	cmp	r3, #0
   d436c:	d046      	beq.n	d43fc <loop+0xe4>
   d436e:	f7ff fedf 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4372:	4b26      	ldr	r3, [pc, #152]	; (d440c <loop+0xf4>)
      waitUntil(PublishDelayFunction);
      Particle.publish("State","REPORTING",PRIVATE);
   d4374:	2200      	movs	r2, #0
   d4376:	781b      	ldrb	r3, [r3, #0]
   d4378:	f88d 2000 	strb.w	r2, [sp]
   d437c:	4a25      	ldr	r2, [pc, #148]	; (d4414 <loop+0xfc>)
   d437e:	4926      	ldr	r1, [pc, #152]	; (d4418 <loop+0x100>)
   d4380:	a802      	add	r0, sp, #8
   d4382:	f7ff feb2 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.37>
   d4386:	a803      	add	r0, sp, #12
   d4388:	f7ff ff47 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d438c:	e036      	b.n	d43fc <loop+0xe4>
      
    } 
    break;

  case REPORTING_STATE: //
    if (verboseMode) Particle.publish("Temperature", temperatureString, PRIVATE); 
   d438e:	4b1e      	ldr	r3, [pc, #120]	; (d4408 <loop+0xf0>)
   d4390:	781a      	ldrb	r2, [r3, #0]
   d4392:	461c      	mov	r4, r3
   d4394:	b162      	cbz	r2, d43b0 <loop+0x98>
   d4396:	4b1d      	ldr	r3, [pc, #116]	; (d440c <loop+0xf4>)
   d4398:	4920      	ldr	r1, [pc, #128]	; (d441c <loop+0x104>)
   d439a:	781b      	ldrb	r3, [r3, #0]
   d439c:	2200      	movs	r2, #0
   d439e:	f88d 2000 	strb.w	r2, [sp]
   d43a2:	a802      	add	r0, sp, #8
   d43a4:	4a1e      	ldr	r2, [pc, #120]	; (d4420 <loop+0x108>)
   d43a6:	f7ff fea0 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.37>
   d43aa:	a803      	add	r0, sp, #12
   d43ac:	f7ff ff35 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (abs(temperatureHook - lastPublishValue) > 1) UBIDotsHandler();
   d43b0:	4b1c      	ldr	r3, [pc, #112]	; (d4424 <loop+0x10c>)
   d43b2:	edd3 7a00 	vldr	s15, [r3]
   d43b6:	4b1c      	ldr	r3, [pc, #112]	; (d4428 <loop+0x110>)
   d43b8:	ed93 7a00 	vldr	s14, [r3]
   d43bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d43c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d43c4:	ee17 3a90 	vmov	r3, s15
   d43c8:	2b00      	cmp	r3, #0
   d43ca:	bfb8      	it	lt
   d43cc:	425b      	neglt	r3, r3
   d43ce:	2b01      	cmp	r3, #1
   d43d0:	dd01      	ble.n	d43d6 <loop+0xbe>
   d43d2:	f7ff ff73 	bl	d42bc <_Z14UBIDotsHandlerv>
    
  
   if(verboseMode){
   d43d6:	7823      	ldrb	r3, [r4, #0]
   d43d8:	b173      	cbz	r3, d43f8 <loop+0xe0>
   d43da:	f7ff fea9 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d43de:	4b0b      	ldr	r3, [pc, #44]	; (d440c <loop+0xf4>)
      waitUntil(PublishDelayFunction);
      Particle.publish("State","IDLE",PRIVATE);
   d43e0:	490d      	ldr	r1, [pc, #52]	; (d4418 <loop+0x100>)
   d43e2:	781b      	ldrb	r3, [r3, #0]
   d43e4:	2200      	movs	r2, #0
   d43e6:	f88d 2000 	strb.w	r2, [sp]
   d43ea:	a802      	add	r0, sp, #8
   d43ec:	4a0f      	ldr	r2, [pc, #60]	; (d442c <loop+0x114>)
   d43ee:	f7ff fe7c 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.37>
   d43f2:	a803      	add	r0, sp, #12
   d43f4:	f7ff ff11 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    } 
    state = IDLE_STATE;
   d43f8:	2301      	movs	r3, #1
   d43fa:	702b      	strb	r3, [r5, #0]
    
    break;
  }
}
   d43fc:	b005      	add	sp, #20
   d43fe:	bd30      	pop	{r4, r5, pc}
   d4400:	2003e214 	.word	0x2003e214
   d4404:	2003e21c 	.word	0x2003e21c
   d4408:	2003e251 	.word	0x2003e251
   d440c:	2003e250 	.word	0x2003e250
   d4410:	000d875d 	.word	0x000d875d
   d4414:	000d876d 	.word	0x000d876d
   d4418:	000d8767 	.word	0x000d8767
   d441c:	000d8777 	.word	0x000d8777
   d4420:	2003e200 	.word	0x2003e200
   d4424:	2003e24c 	.word	0x2003e24c
   d4428:	2003e218 	.word	0x2003e218
   d442c:	000d8783 	.word	0x000d8783

000d4430 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4430:	2300      	movs	r3, #0
   d4432:	2204      	movs	r2, #4
   d4434:	f000 be9a 	b.w	d516c <spark_variable>

000d4438 <setup>:


// Setup Particle Variables and Functions here. 

void setup()
{
   d4438:	b510      	push	{r4, lr}
   d443a:	b086      	sub	sp, #24
  getTemperature();
   d443c:	f7ff fec8 	bl	d41d0 <_Z14getTemperaturev>
 
  Particle.variable("celsius", temperatureString); // Setup Particle Variable
   d4440:	4922      	ldr	r1, [pc, #136]	; (d44cc <setup+0x94>)
   d4442:	4823      	ldr	r0, [pc, #140]	; (d44d0 <setup+0x98>)
   d4444:	f7ff fff4 	bl	d4430 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);
   d4448:	4922      	ldr	r1, [pc, #136]	; (d44d4 <setup+0x9c>)
   d444a:	4823      	ldr	r0, [pc, #140]	; (d44d8 <setup+0xa0>)
   d444c:	f7ff fff0 	bl	d4430 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString); // Particle variables that enable monitoring using the mobile app
   d4450:	4922      	ldr	r1, [pc, #136]	; (d44dc <setup+0xa4>)
   d4452:	4823      	ldr	r0, [pc, #140]	; (d44e0 <setup+0xa8>)
   d4454:	f7ff ffec 	bl	d4430 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);
   d4458:	4922      	ldr	r1, [pc, #136]	; (d44e4 <setup+0xac>)
   d445a:	4823      	ldr	r0, [pc, #140]	; (d44e8 <setup+0xb0>)
   d445c:	f7ff ffe8 	bl	d4430 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4460:	4b22      	ldr	r3, [pc, #136]	; (d44ec <setup+0xb4>)
   d4462:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4464:	4b22      	ldr	r3, [pc, #136]	; (d44f0 <setup+0xb8>)
   d4466:	9305      	str	r3, [sp, #20]
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4468:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   d446a:	4b22      	ldr	r3, [pc, #136]	; (d44f4 <setup+0xbc>)
   d446c:	9304      	str	r3, [sp, #16]
   d446e:	f7ff fe12 	bl	d4096 <_Znwj>
   d4472:	4604      	mov	r4, r0
   d4474:	b178      	cbz	r0, d4496 <setup+0x5e>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4476:	2300      	movs	r3, #0
   d4478:	6083      	str	r3, [r0, #8]
   d447a:	9b04      	ldr	r3, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d447c:	b133      	cbz	r3, d448c <setup+0x54>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d447e:	2202      	movs	r2, #2
   d4480:	a902      	add	r1, sp, #8
   d4482:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4484:	9b05      	ldr	r3, [sp, #20]
   d4486:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4488:	9b04      	ldr	r3, [sp, #16]
   d448a:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d448c:	4a1a      	ldr	r2, [pc, #104]	; (d44f8 <setup+0xc0>)
   d448e:	481b      	ldr	r0, [pc, #108]	; (d44fc <setup+0xc4>)
   d4490:	4621      	mov	r1, r4
   d4492:	f000 ff8f 	bl	d53b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4496:	9b04      	ldr	r3, [sp, #16]
   d4498:	b11b      	cbz	r3, d44a2 <setup+0x6a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d449a:	a902      	add	r1, sp, #8
   d449c:	2203      	movs	r2, #3
   d449e:	4608      	mov	r0, r1
   d44a0:	4798      	blx	r3
  Particle.function("verboseMode", SetVerboseMode);  // Added Particle Function For VerboseMode. 
  
  if (verboseMode) Particle.publish("State","IDLE", PRIVATE);
   d44a2:	4b17      	ldr	r3, [pc, #92]	; (d4500 <setup+0xc8>)
   d44a4:	781b      	ldrb	r3, [r3, #0]
   d44a6:	b163      	cbz	r3, d44c2 <setup+0x8a>
   d44a8:	4b16      	ldr	r3, [pc, #88]	; (d4504 <setup+0xcc>)
   d44aa:	4917      	ldr	r1, [pc, #92]	; (d4508 <setup+0xd0>)
   d44ac:	781b      	ldrb	r3, [r3, #0]
   d44ae:	2200      	movs	r2, #0
   d44b0:	f88d 2000 	strb.w	r2, [sp]
   d44b4:	a802      	add	r0, sp, #8
   d44b6:	4a15      	ldr	r2, [pc, #84]	; (d450c <setup+0xd4>)
   d44b8:	f7ff fe17 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.37>
   d44bc:	a803      	add	r0, sp, #12
   d44be:	f7ff feac 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = IDLE_STATE;
   d44c2:	4b13      	ldr	r3, [pc, #76]	; (d4510 <setup+0xd8>)
   d44c4:	2201      	movs	r2, #1
   d44c6:	701a      	strb	r2, [r3, #0]
  
  
}
   d44c8:	b006      	add	sp, #24
   d44ca:	bd10      	pop	{r4, pc}
   d44cc:	2003e200 	.word	0x2003e200
   d44d0:	000d8788 	.word	0x000d8788
   d44d4:	000d87b3 	.word	0x000d87b3
   d44d8:	000d8790 	.word	0x000d8790
   d44dc:	2003e1f0 	.word	0x2003e1f0
   d44e0:	000d8798 	.word	0x000d8798
   d44e4:	2003e252 	.word	0x2003e252
   d44e8:	000d879f 	.word	0x000d879f
   d44ec:	000d4249 	.word	0x000d4249
   d44f0:	000d40cf 	.word	0x000d40cf
   d44f4:	000d40b7 	.word	0x000d40b7
   d44f8:	000d87a7 	.word	0x000d87a7
   d44fc:	000d538d 	.word	0x000d538d
   d4500:	2003e251 	.word	0x2003e251
   d4504:	2003e250 	.word	0x2003e250
   d4508:	000d8767 	.word	0x000d8767
   d450c:	000d8783 	.word	0x000d8783
   d4510:	2003e214 	.word	0x2003e214

000d4514 <_GLOBAL__sub_I_sensor>:
    float lastPublishValue = 1;
    snprintf(data,sizeof(data),"{\"Temperature\":%3.1f, \"Battery\":%3.1f}",temperatureHook, batteryString);
    Particle.publish("Air-Quality-Hook",data,PRIVATE);
    lastPublishValue = temperatureHook;
    return 1;
   d4514:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4516:	4b06      	ldr	r3, [pc, #24]	; (d4530 <_GLOBAL__sub_I_sensor+0x1c>)
   d4518:	2201      	movs	r2, #1
   d451a:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d451c:	f000 fc62 	bl	d4de4 <HAL_Pin_Map>



// Initialize modules here

DS18 sensor(D3); // Initialize sensor object
   d4520:	2200      	movs	r2, #0
   d4522:	2103      	movs	r1, #3
   d4524:	4803      	ldr	r0, [pc, #12]	; (d4534 <_GLOBAL__sub_I_sensor+0x20>)
    float lastPublishValue = 1;
    snprintf(data,sizeof(data),"{\"Temperature\":%3.1f, \"Battery\":%3.1f}",temperatureHook, batteryString);
    Particle.publish("Air-Quality-Hook",data,PRIVATE);
    lastPublishValue = temperatureHook;
    return 1;
   d4526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}



// Initialize modules here

DS18 sensor(D3); // Initialize sensor object
   d452a:	f000 b816 	b.w	d455a <_ZN4DS18C1Etb>
   d452e:	bf00      	nop
   d4530:	2003e250 	.word	0x2003e250
   d4534:	2003e220 	.word	0x2003e220

000d4538 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4538:	2300      	movs	r3, #0
  _celsius = 0;
   d453a:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d453c:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d453e:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d4540:	6183      	str	r3, [r0, #24]
   d4542:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d4544:	6203      	str	r3, [r0, #32]
   d4546:	6243      	str	r3, [r0, #36]	; 0x24
   d4548:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d454c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d4550:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d4554:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d4558:	4770      	bx	lr

000d455a <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d455a:	b538      	push	{r3, r4, r5, lr}
   d455c:	4604      	mov	r4, r0
   d455e:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4560:	f000 f994 	bl	d488c <_ZN7OneWireC1Et>
   d4564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d4568:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d456a:	73a5      	strb	r5, [r4, #14]
   d456c:	8223      	strh	r3, [r4, #16]
{
  init();
   d456e:	f7ff ffe3 	bl	d4538 <_ZN4DS184initEv>
}
   d4572:	4620      	mov	r0, r4
   d4574:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4578 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d457a:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d457e:	680b      	ldr	r3, [r1, #0]
   d4580:	6183      	str	r3, [r0, #24]
   d4582:	f100 0518 	add.w	r5, r0, #24
   d4586:	684b      	ldr	r3, [r1, #4]
   d4588:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d458a:	780b      	ldrb	r3, [r1, #0]
   d458c:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d458e:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4590:	d00a      	beq.n	d45a8 <_ZN4DS184readEPh+0x30>
   d4592:	d803      	bhi.n	d459c <_ZN4DS184readEPh+0x24>
   d4594:	2b10      	cmp	r3, #16
   d4596:	d142      	bne.n	d461e <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d4598:	2301      	movs	r3, #1
   d459a:	e008      	b.n	d45ae <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d459c:	2b26      	cmp	r3, #38	; 0x26
   d459e:	d005      	beq.n	d45ac <_ZN4DS184readEPh+0x34>
   d45a0:	2b28      	cmp	r3, #40	; 0x28
   d45a2:	d13c      	bne.n	d461e <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d45a4:	2302      	movs	r3, #2
   d45a6:	e002      	b.n	d45ae <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d45a8:	2303      	movs	r3, #3
   d45aa:	e000      	b.n	d45ae <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d45ac:	2304      	movs	r3, #4
   d45ae:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d45b2:	4620      	mov	r0, r4
   d45b4:	f000 f974 	bl	d48a0 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d45b8:	4629      	mov	r1, r5
   d45ba:	4620      	mov	r0, r4
   d45bc:	f000 fa30 	bl	d4a20 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d45c0:	7ba2      	ldrb	r2, [r4, #14]
   d45c2:	2144      	movs	r1, #68	; 0x44
   d45c4:	4620      	mov	r0, r4
   d45c6:	f000 f9f8 	bl	d49ba <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d45ca:	8a20      	ldrh	r0, [r4, #16]
   d45cc:	f000 fe96 	bl	d52fc <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d45d0:	4620      	mov	r0, r4
   d45d2:	f000 f965 	bl	d48a0 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d45d6:	4629      	mov	r1, r5
   d45d8:	4620      	mov	r0, r4
   d45da:	f000 fa21 	bl	d4a20 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d45de:	2200      	movs	r2, #0
   d45e0:	21b8      	movs	r1, #184	; 0xb8
   d45e2:	4620      	mov	r0, r4
   d45e4:	f000 f9e9 	bl	d49ba <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d45e8:	2200      	movs	r2, #0
   d45ea:	4611      	mov	r1, r2
   d45ec:	4620      	mov	r0, r4
   d45ee:	f000 f9e4 	bl	d49ba <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d45f2:	4620      	mov	r0, r4
   d45f4:	f000 f954 	bl	d48a0 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d45f8:	4629      	mov	r1, r5
   d45fa:	4620      	mov	r0, r4
   d45fc:	f000 fa10 	bl	d4a20 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d4600:	2200      	movs	r2, #0
   d4602:	21be      	movs	r1, #190	; 0xbe
   d4604:	4620      	mov	r0, r4
   d4606:	f000 f9d8 	bl	d49ba <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d460a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d460e:	2b04      	cmp	r3, #4
   d4610:	d109      	bne.n	d4626 <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d4612:	2200      	movs	r2, #0
   d4614:	4611      	mov	r1, r2
   d4616:	4620      	mov	r0, r4
   d4618:	f000 f9cf 	bl	d49ba <_ZN7OneWire5writeEhh>
   d461c:	e003      	b.n	d4626 <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d461e:	2000      	movs	r0, #0
   d4620:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d4624:	e094      	b.n	d4750 <_ZN4DS184readEPh+0x1d8>
   d4626:	f104 051f 	add.w	r5, r4, #31
   d462a:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d462e:	4620      	mov	r0, r4
   d4630:	f000 f9e6 	bl	d4a00 <_ZN7OneWire4readEv>
   d4634:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d4638:	42ae      	cmp	r6, r5
   d463a:	d1f8      	bne.n	d462e <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d463c:	2108      	movs	r1, #8
   d463e:	f104 0020 	add.w	r0, r4, #32
   d4642:	f000 fa86 	bl	d4b52 <_ZN7OneWire4crc8EPhh>
   d4646:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d464a:	4283      	cmp	r3, r0
   d464c:	d004      	beq.n	d4658 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d464e:	2301      	movs	r3, #1
   d4650:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4654:	2000      	movs	r0, #0
   d4656:	e07b      	b.n	d4750 <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4658:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d465c:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d4660:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d4668:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d466a:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d466c:	d127      	bne.n	d46be <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d466e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4672:	ee07 3a90 	vmov	s15, r3
   d4676:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d467a:	08d2      	lsrs	r2, r2, #3
   d467c:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d4680:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d4684:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d4688:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d468a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d468e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d4692:	d045      	beq.n	d4720 <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d4694:	ee18 0a90 	vmov	r0, s17
   d4698:	f003 f838 	bl	d770c <__aeabi_f2d>
   d469c:	4606      	mov	r6, r0
   d469e:	ee18 0a10 	vmov	r0, s16
   d46a2:	460f      	mov	r7, r1
   d46a4:	f003 f832 	bl	d770c <__aeabi_f2d>
   d46a8:	2200      	movs	r2, #0
   d46aa:	4b2b      	ldr	r3, [pc, #172]	; (d4758 <_ZN4DS184readEPh+0x1e0>)
   d46ac:	f003 f882 	bl	d77b4 <__aeabi_dmul>
   d46b0:	4602      	mov	r2, r0
   d46b2:	460b      	mov	r3, r1
   d46b4:	4630      	mov	r0, r6
   d46b6:	4639      	mov	r1, r7
   d46b8:	f002 fec8 	bl	d744c <__aeabi_dsub>
   d46bc:	e044      	b.n	d4748 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d46be:	2901      	cmp	r1, #1
   d46c0:	d003      	beq.n	d46ca <_ZN4DS184readEPh+0x152>
   d46c2:	d344      	bcc.n	d474e <_ZN4DS184readEPh+0x1d6>
   d46c4:	2903      	cmp	r1, #3
   d46c6:	d910      	bls.n	d46ea <_ZN4DS184readEPh+0x172>
   d46c8:	e041      	b.n	d474e <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d46ca:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d46ce:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d46d2:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d46d4:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d46d6:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d46d8:	d119      	bne.n	d470e <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d46da:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d46de:	f023 030f 	bic.w	r3, r3, #15
   d46e2:	f1c2 020c 	rsb	r2, r2, #12
   d46e6:	4413      	add	r3, r2
   d46e8:	e010      	b.n	d470c <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d46ea:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d46ee:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d46f2:	d102      	bne.n	d46fa <_ZN4DS184readEPh+0x182>
   d46f4:	f023 0307 	bic.w	r3, r3, #7
   d46f8:	e008      	b.n	d470c <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d46fa:	2a20      	cmp	r2, #32
   d46fc:	d102      	bne.n	d4704 <_ZN4DS184readEPh+0x18c>
   d46fe:	f023 0303 	bic.w	r3, r3, #3
   d4702:	e003      	b.n	d470c <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4704:	2a40      	cmp	r2, #64	; 0x40
   d4706:	d102      	bne.n	d470e <_ZN4DS184readEPh+0x196>
   d4708:	f023 0301 	bic.w	r3, r3, #1
   d470c:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d470e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d4712:	ee07 3a90 	vmov	s15, r3
   d4716:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d471a:	edc4 7a05 	vstr	s15, [r4, #20]
   d471e:	e016      	b.n	d474e <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4720:	ee18 0a10 	vmov	r0, s16
   d4724:	f002 fff2 	bl	d770c <__aeabi_f2d>
   d4728:	2200      	movs	r2, #0
   d472a:	4b0b      	ldr	r3, [pc, #44]	; (d4758 <_ZN4DS184readEPh+0x1e0>)
   d472c:	f003 f842 	bl	d77b4 <__aeabi_dmul>
   d4730:	4606      	mov	r6, r0
   d4732:	ee18 0a90 	vmov	r0, s17
   d4736:	460f      	mov	r7, r1
   d4738:	f002 ffe8 	bl	d770c <__aeabi_f2d>
   d473c:	4602      	mov	r2, r0
   d473e:	460b      	mov	r3, r1
   d4740:	4630      	mov	r0, r6
   d4742:	4639      	mov	r1, r7
   d4744:	f002 fe84 	bl	d7450 <__adddf3>
   d4748:	f003 fa46 	bl	d7bd8 <__aeabi_d2f>
   d474c:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d474e:	2001      	movs	r0, #1
}
   d4750:	ecbd 8b02 	vpop	{d8}
   d4754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4756:	bf00      	nop
   d4758:	3fa00000 	.word	0x3fa00000

000d475c <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d475c:	b538      	push	{r3, r4, r5, lr}
   d475e:	4604      	mov	r4, r0
  init();
   d4760:	f7ff feea 	bl	d4538 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d4764:	f100 0518 	add.w	r5, r0, #24
   d4768:	4629      	mov	r1, r5
   d476a:	f000 f977 	bl	d4a5c <_ZN7OneWire6searchEPh>
   d476e:	b930      	cbnz	r0, d477e <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d4770:	2301      	movs	r3, #1
   d4772:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d4776:	4620      	mov	r0, r4
   d4778:	f000 f964 	bl	d4a44 <_ZN7OneWire12reset_searchEv>
    return false;
   d477c:	e010      	b.n	d47a0 <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d477e:	2107      	movs	r1, #7
   d4780:	4628      	mov	r0, r5
   d4782:	f000 f9e6 	bl	d4b52 <_ZN7OneWire4crc8EPhh>
   d4786:	7fe3      	ldrb	r3, [r4, #31]
   d4788:	4283      	cmp	r3, r0
   d478a:	d003      	beq.n	d4794 <_ZN4DS184readEv+0x38>
    _crcError = true;
   d478c:	2301      	movs	r3, #1
   d478e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4792:	e005      	b.n	d47a0 <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d4794:	4629      	mov	r1, r5
   d4796:	4620      	mov	r0, r4
}
   d4798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d479c:	f7ff beec 	b.w	d4578 <_ZN4DS184readEPh>
}
   d47a0:	2000      	movs	r0, #0
   d47a2:	bd38      	pop	{r3, r4, r5, pc}

000d47a4 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d47a4:	ed90 0a05 	vldr	s0, [r0, #20]
   d47a8:	4770      	bx	lr

000d47aa <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d47aa:	f000 bb1b 	b.w	d4de4 <HAL_Pin_Map>
	...

000d47b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d47b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d47b2:	6803      	ldr	r3, [r0, #0]
   d47b4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d47b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d47b8:	d904      	bls.n	d47c4 <nrf_gpio_pin_port_decode+0x14>
   d47ba:	4a07      	ldr	r2, [pc, #28]	; (d47d8 <nrf_gpio_pin_port_decode+0x28>)
   d47bc:	2100      	movs	r1, #0
   d47be:	200a      	movs	r0, #10
   d47c0:	f000 fc80 	bl	d50c4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d47c4:	6823      	ldr	r3, [r4, #0]
   d47c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d47c8:	bf83      	ittte	hi
   d47ca:	f003 031f 	andhi.w	r3, r3, #31
   d47ce:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d47d0:	4802      	ldrhi	r0, [pc, #8]	; (d47dc <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d47d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d47d6:	bd10      	pop	{r4, pc}
   d47d8:	000d4da5 	.word	0x000d4da5
   d47dc:	50000300 	.word	0x50000300

000d47e0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d47e0:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47e2:	4b0b      	ldr	r3, [pc, #44]	; (d4810 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	0100      	lsls	r0, r0, #4
   d47e8:	1819      	adds	r1, r3, r0
   d47ea:	5c1a      	ldrb	r2, [r3, r0]
   d47ec:	784b      	ldrb	r3, [r1, #1]
   d47ee:	a802      	add	r0, sp, #8
   d47f0:	f003 031f 	and.w	r3, r3, #31
   d47f4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d47f8:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47fc:	f7ff ffd8 	bl	d47b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4800:	9a01      	ldr	r2, [sp, #4]
   d4802:	2301      	movs	r3, #1
   d4804:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4806:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d480a:	b003      	add	sp, #12
   d480c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4810:	2003e264 	.word	0x2003e264

000d4814 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4814:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4816:	4b0b      	ldr	r3, [pc, #44]	; (d4844 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	0100      	lsls	r0, r0, #4
   d481c:	1819      	adds	r1, r3, r0
   d481e:	5c1a      	ldrb	r2, [r3, r0]
   d4820:	784b      	ldrb	r3, [r1, #1]
   d4822:	a802      	add	r0, sp, #8
   d4824:	f003 031f 	and.w	r3, r3, #31
   d4828:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d482c:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4830:	f7ff ffbe 	bl	d47b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4834:	9a01      	ldr	r2, [sp, #4]
   d4836:	2301      	movs	r3, #1
   d4838:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d483a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d483e:	b003      	add	sp, #12
   d4840:	f85d fb04 	ldr.w	pc, [sp], #4
   d4844:	2003e264 	.word	0x2003e264

000d4848 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4848:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d484a:	4b0f      	ldr	r3, [pc, #60]	; (d4888 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	0100      	lsls	r0, r0, #4
   d4850:	181a      	adds	r2, r3, r0
   d4852:	5c1c      	ldrb	r4, [r3, r0]
   d4854:	7853      	ldrb	r3, [r2, #1]
   d4856:	a802      	add	r0, sp, #8
   d4858:	f003 031f 	and.w	r3, r3, #31
   d485c:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4860:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4864:	f7ff ffa4 	bl	d47b0 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4868:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d486c:	a802      	add	r0, sp, #8
   d486e:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4872:	f7ff ff9d 	bl	d47b0 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4876:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d487a:	9800      	ldr	r0, [sp, #0]
   d487c:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4880:	f000 0001 	and.w	r0, r0, #1
   d4884:	b002      	add	sp, #8
   d4886:	bd10      	pop	{r4, pc}
   d4888:	2003e264 	.word	0x2003e264

000d488c <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d488c:	b538      	push	{r3, r4, r5, lr}
   d488e:	4604      	mov	r4, r0
   d4890:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d4892:	4628      	mov	r0, r5
   d4894:	2100      	movs	r1, #0
   d4896:	f002 fc19 	bl	d70cc <pinMode>
    _pin = pin;
   d489a:	8025      	strh	r5, [r4, #0]
}
   d489c:	4620      	mov	r0, r4
   d489e:	bd38      	pop	{r3, r4, r5, pc}

000d48a0 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d48a0:	b538      	push	{r3, r4, r5, lr}
   d48a2:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d48a4:	f001 f88c 	bl	d59c0 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d48a8:	2100      	movs	r1, #0
   d48aa:	8828      	ldrh	r0, [r5, #0]
   d48ac:	f000 faaa 	bl	d4e04 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d48b0:	f001 f888 	bl	d59c4 <_Z10interruptsv>
   d48b4:	247d      	movs	r4, #125	; 0x7d
   d48b6:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d48b8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d48bc:	d02b      	beq.n	d4916 <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d48be:	2002      	movs	r0, #2
   d48c0:	f000 fa70 	bl	d4da4 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d48c4:	8828      	ldrh	r0, [r5, #0]
   d48c6:	f7ff ffbf 	bl	d4848 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d48ca:	2800      	cmp	r0, #0
   d48cc:	d0f3      	beq.n	d48b6 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d48ce:	f001 f877 	bl	d59c0 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d48d2:	8828      	ldrh	r0, [r5, #0]
   d48d4:	f7ff ff84 	bl	d47e0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d48d8:	2101      	movs	r1, #1
   d48da:	8828      	ldrh	r0, [r5, #0]
   d48dc:	f000 fa92 	bl	d4e04 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d48e0:	f001 f870 	bl	d59c4 <_Z10interruptsv>
   d48e4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d48e8:	f000 fa5c 	bl	d4da4 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d48ec:	f001 f868 	bl	d59c0 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d48f0:	2100      	movs	r1, #0
   d48f2:	8828      	ldrh	r0, [r5, #0]
   d48f4:	f000 fa86 	bl	d4e04 <HAL_Pin_Mode>
   d48f8:	2046      	movs	r0, #70	; 0x46
   d48fa:	f000 fa53 	bl	d4da4 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d48fe:	8828      	ldrh	r0, [r5, #0]
   d4900:	f7ff ffa2 	bl	d4848 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4904:	fab0 f480 	clz	r4, r0

    interrupts();
   d4908:	f001 f85c 	bl	d59c4 <_Z10interruptsv>
   d490c:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4910:	0964      	lsrs	r4, r4, #5
   d4912:	f000 fa47 	bl	d4da4 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d4916:	4620      	mov	r0, r4
   d4918:	bd38      	pop	{r3, r4, r5, pc}

000d491a <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d491a:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d491c:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d4920:	4604      	mov	r4, r0
    if (v & 1) {
   d4922:	d013      	beq.n	d494c <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4924:	f001 f84c 	bl	d59c0 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4928:	8820      	ldrh	r0, [r4, #0]
   d492a:	f7ff ff59 	bl	d47e0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d492e:	2101      	movs	r1, #1
   d4930:	8820      	ldrh	r0, [r4, #0]
   d4932:	f000 fa67 	bl	d4e04 <HAL_Pin_Mode>
   d4936:	200a      	movs	r0, #10
   d4938:	f000 fa34 	bl	d4da4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d493c:	8820      	ldrh	r0, [r4, #0]
   d493e:	2100      	movs	r1, #0
   d4940:	f000 fa60 	bl	d4e04 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4944:	f001 f83e 	bl	d59c4 <_Z10interruptsv>
   d4948:	2037      	movs	r0, #55	; 0x37
   d494a:	e012      	b.n	d4972 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d494c:	f001 f838 	bl	d59c0 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4950:	8820      	ldrh	r0, [r4, #0]
   d4952:	f7ff ff45 	bl	d47e0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4956:	2101      	movs	r1, #1
   d4958:	8820      	ldrh	r0, [r4, #0]
   d495a:	f000 fa53 	bl	d4e04 <HAL_Pin_Mode>
   d495e:	2041      	movs	r0, #65	; 0x41
   d4960:	f000 fa20 	bl	d4da4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4964:	8820      	ldrh	r0, [r4, #0]
   d4966:	4629      	mov	r1, r5
   d4968:	f000 fa4c 	bl	d4e04 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d496c:	f001 f82a 	bl	d59c4 <_Z10interruptsv>
   d4970:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d4972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4976:	f000 ba15 	b.w	d4da4 <HAL_Delay_Microseconds>

000d497a <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d497a:	b510      	push	{r4, lr}
   d497c:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d497e:	f001 f81f 	bl	d59c0 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4982:	8820      	ldrh	r0, [r4, #0]
   d4984:	f7ff ff2c 	bl	d47e0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4988:	2101      	movs	r1, #1
   d498a:	8820      	ldrh	r0, [r4, #0]
   d498c:	f000 fa3a 	bl	d4e04 <HAL_Pin_Mode>
   d4990:	2003      	movs	r0, #3
   d4992:	f000 fa07 	bl	d4da4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4996:	2100      	movs	r1, #0
   d4998:	8820      	ldrh	r0, [r4, #0]
   d499a:	f000 fa33 	bl	d4e04 <HAL_Pin_Mode>
   d499e:	200a      	movs	r0, #10
   d49a0:	f000 fa00 	bl	d4da4 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d49a4:	8820      	ldrh	r0, [r4, #0]
   d49a6:	f7ff ff4f 	bl	d4848 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d49aa:	4604      	mov	r4, r0

    interrupts();
   d49ac:	f001 f80a 	bl	d59c4 <_Z10interruptsv>
   d49b0:	2035      	movs	r0, #53	; 0x35
   d49b2:	f000 f9f7 	bl	d4da4 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d49b6:	4620      	mov	r0, r4
   d49b8:	bd10      	pop	{r4, pc}

000d49ba <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d49ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d49be:	4605      	mov	r5, r0
   d49c0:	4688      	mov	r8, r1
   d49c2:	4617      	mov	r7, r2
   d49c4:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d49c6:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d49c8:	ea18 0f04 	tst.w	r8, r4
   d49cc:	bf14      	ite	ne
   d49ce:	2101      	movne	r1, #1
   d49d0:	2100      	moveq	r1, #0
   d49d2:	4628      	mov	r0, r5
   d49d4:	f7ff ffa1 	bl	d491a <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d49d8:	0064      	lsls	r4, r4, #1
   d49da:	3e01      	subs	r6, #1
   d49dc:	b2e4      	uxtb	r4, r4
   d49de:	d1f3      	bne.n	d49c8 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d49e0:	b167      	cbz	r7, d49fc <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d49e2:	f000 ffed 	bl	d59c0 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d49e6:	8828      	ldrh	r0, [r5, #0]
   d49e8:	f7ff ff14 	bl	d4814 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d49ec:	8828      	ldrh	r0, [r5, #0]
   d49ee:	2101      	movs	r1, #1
   d49f0:	f000 fa08 	bl	d4e04 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d49f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d49f8:	f000 bfe4 	b.w	d59c4 <_Z10interruptsv>
   d49fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a00 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d4a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a02:	4607      	mov	r7, r0
   d4a04:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4a06:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4a08:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4a0a:	4638      	mov	r0, r7
   d4a0c:	f7ff ffb5 	bl	d497a <_ZN7OneWire8read_bitEv>
   d4a10:	b100      	cbz	r0, d4a14 <_ZN7OneWire4readEv+0x14>
   d4a12:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4a14:	0064      	lsls	r4, r4, #1
   d4a16:	3e01      	subs	r6, #1
   d4a18:	b2e4      	uxtb	r4, r4
   d4a1a:	d1f6      	bne.n	d4a0a <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4a1c:	4628      	mov	r0, r5
   d4a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a20 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4a20:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d4a22:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4a24:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d4a26:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4a28:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4a2a:	f7ff ffc6 	bl	d49ba <_ZN7OneWire5writeEhh>
   d4a2e:	1e65      	subs	r5, r4, #1
   d4a30:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d4a32:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4a36:	2200      	movs	r2, #0
   d4a38:	4630      	mov	r0, r6
   d4a3a:	f7ff ffbe 	bl	d49ba <_ZN7OneWire5writeEhh>
   d4a3e:	42a5      	cmp	r5, r4
   d4a40:	d1f7      	bne.n	d4a32 <_ZN7OneWire6selectEPKh+0x12>
}
   d4a42:	bd70      	pop	{r4, r5, r6, pc}

000d4a44 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4a44:	2300      	movs	r3, #0
   d4a46:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4a48:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4a4a:	72c3      	strb	r3, [r0, #11]
   d4a4c:	f100 020a 	add.w	r2, r0, #10
   d4a50:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4a52:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d4a56:	4282      	cmp	r2, r0
   d4a58:	d1fb      	bne.n	d4a52 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d4a5a:	4770      	bx	lr

000d4a5c <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4a60:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4a62:	4604      	mov	r4, r0
   d4a64:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4a66:	2d00      	cmp	r5, #0
   d4a68:	d15e      	bne.n	d4b28 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d4a6a:	f7ff ff19 	bl	d48a0 <_ZN7OneWire5resetEv>
   d4a6e:	b920      	cbnz	r0, d4a7a <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4a70:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4a72:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4a74:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4a7a:	462a      	mov	r2, r5
   d4a7c:	21f0      	movs	r1, #240	; 0xf0
   d4a7e:	4620      	mov	r0, r4
   d4a80:	f7ff ff9b 	bl	d49ba <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4a84:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4a86:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4a88:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f7ff ff75 	bl	d497a <_ZN7OneWire8read_bitEv>
   d4a90:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d4a92:	4620      	mov	r0, r4
   d4a94:	f7ff ff71 	bl	d497a <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4a98:	f1b9 0f01 	cmp.w	r9, #1
   d4a9c:	d102      	bne.n	d4aa4 <_ZN7OneWire6searchEPh+0x48>
   d4a9e:	2801      	cmp	r0, #1
   d4aa0:	d11b      	bne.n	d4ada <_ZN7OneWire6searchEPh+0x7e>
   d4aa2:	e037      	b.n	d4b14 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d4aa4:	4581      	cmp	r9, r0
   d4aa6:	eb04 0305 	add.w	r3, r4, r5
   d4aaa:	d11e      	bne.n	d4aea <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4aac:	7aa2      	ldrb	r2, [r4, #10]
   d4aae:	4297      	cmp	r7, r2
   d4ab0:	d207      	bcs.n	d4ac2 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d4ab2:	789a      	ldrb	r2, [r3, #2]
   d4ab4:	4216      	tst	r6, r2
   d4ab6:	bf14      	ite	ne
   d4ab8:	f04f 0901 	movne.w	r9, #1
   d4abc:	f04f 0900 	moveq.w	r9, #0
   d4ac0:	e004      	b.n	d4acc <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4ac2:	bf0c      	ite	eq
   d4ac4:	f04f 0901 	moveq.w	r9, #1
   d4ac8:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4acc:	f1b9 0f00 	cmp.w	r9, #0
   d4ad0:	d103      	bne.n	d4ada <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d4ad2:	2f08      	cmp	r7, #8
   d4ad4:	d808      	bhi.n	d4ae8 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d4ad6:	72e7      	strb	r7, [r4, #11]
   d4ad8:	e006      	b.n	d4ae8 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d4ada:	1962      	adds	r2, r4, r5
   d4adc:	f04f 0901 	mov.w	r9, #1
   d4ae0:	7893      	ldrb	r3, [r2, #2]
   d4ae2:	4333      	orrs	r3, r6
   d4ae4:	7093      	strb	r3, [r2, #2]
   d4ae6:	e004      	b.n	d4af2 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4ae8:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4aea:	789a      	ldrb	r2, [r3, #2]
   d4aec:	ea22 0206 	bic.w	r2, r2, r6
   d4af0:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4af2:	4649      	mov	r1, r9
   d4af4:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d4af6:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d4af8:	f7ff ff0f 	bl	d491a <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4afc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4b00:	bf04      	itt	eq
   d4b02:	3501      	addeq	r5, #1
   d4b04:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4b06:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4b0a:	bf08      	it	eq
   d4b0c:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4b0e:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4b10:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4b12:	d9ba      	bls.n	d4a8a <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4b14:	2f40      	cmp	r7, #64	; 0x40
   d4b16:	d907      	bls.n	d4b28 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4b18:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4b1c:	f1ba 0f00 	cmp.w	sl, #0
   d4b20:	d112      	bne.n	d4b48 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4b22:	2301      	movs	r3, #1
   d4b24:	7323      	strb	r3, [r4, #12]
   d4b26:	e00f      	b.n	d4b48 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d4b28:	2000      	movs	r0, #0
   d4b2a:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4b2c:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4b2e:	72e0      	strb	r0, [r4, #11]
   d4b30:	1c63      	adds	r3, r4, #1
   d4b32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d4b36:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d4b38:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4b3c:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4b40:	42a3      	cmp	r3, r4
   d4b42:	d1f9      	bne.n	d4b38 <_ZN7OneWire6searchEPh+0xdc>
   d4b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d4b48:	78a3      	ldrb	r3, [r4, #2]
   d4b4a:	2b00      	cmp	r3, #0
   d4b4c:	d0ec      	beq.n	d4b28 <_ZN7OneWire6searchEPh+0xcc>
   d4b4e:	2001      	movs	r0, #1
   d4b50:	e7ee      	b.n	d4b30 <_ZN7OneWire6searchEPh+0xd4>

000d4b52 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4b52:	b530      	push	{r4, r5, lr}
   d4b54:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d4b56:	2000      	movs	r0, #0

    while (len--) {
   d4b58:	3901      	subs	r1, #1
   d4b5a:	b2c9      	uxtb	r1, r1
   d4b5c:	29ff      	cmp	r1, #255	; 0xff
   d4b5e:	d013      	beq.n	d4b88 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4b60:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4b64:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4b66:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d4b6a:	f013 0f01 	tst.w	r3, #1
   d4b6e:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d4b72:	bf1c      	itt	ne
   d4b74:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4b78:	b2d8      	uxtbne	r0, r3
   d4b7a:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4b7c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d4b80:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4b84:	d1ef      	bne.n	d4b66 <_ZN7OneWire4crc8EPhh+0x14>
   d4b86:	e7e7      	b.n	d4b58 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d4b88:	bd30      	pop	{r4, r5, pc}
	...

000d4b8c <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4b8c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4b8e:	f000 f929 	bl	d4de4 <HAL_Pin_Map>
   d4b92:	4b01      	ldr	r3, [pc, #4]	; (d4b98 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4b94:	6018      	str	r0, [r3, #0]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	2003e264 	.word	0x2003e264

000d4b9c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d4b9c:	b510      	push	{r4, lr}
   d4b9e:	4b06      	ldr	r3, [pc, #24]	; (d4bb8 <_ZN3UDPD1Ev+0x1c>)
   d4ba0:	6003      	str	r3, [r0, #0]
   d4ba2:	3364      	adds	r3, #100	; 0x64
   d4ba4:	4604      	mov	r4, r0
   d4ba6:	6103      	str	r3, [r0, #16]
   d4ba8:	f001 fddb 	bl	d6762 <_ZN3UDP4stopEv>
   d4bac:	4620      	mov	r0, r4
   d4bae:	f001 ff9d 	bl	d6aec <_ZN3UDP13releaseBufferEv>
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	bd10      	pop	{r4, pc}
   d4bb6:	bf00      	nop
   d4bb8:	000d8a50 	.word	0x000d8a50

000d4bbc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4bbc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4bbe:	6984      	ldr	r4, [r0, #24]
   d4bc0:	4b0a      	ldr	r3, [pc, #40]	; (d4bec <_ZN9TCPClientD1Ev+0x30>)
   d4bc2:	6003      	str	r3, [r0, #0]
   d4bc4:	4605      	mov	r5, r0
   d4bc6:	b17c      	cbz	r4, d4be8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4bc8:	6863      	ldr	r3, [r4, #4]
   d4bca:	3b01      	subs	r3, #1
   d4bcc:	6063      	str	r3, [r4, #4]
   d4bce:	b95b      	cbnz	r3, d4be8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4bd0:	6823      	ldr	r3, [r4, #0]
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	689b      	ldr	r3, [r3, #8]
   d4bd6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4bd8:	68a3      	ldr	r3, [r4, #8]
   d4bda:	3b01      	subs	r3, #1
   d4bdc:	60a3      	str	r3, [r4, #8]
   d4bde:	b91b      	cbnz	r3, d4be8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4be0:	6823      	ldr	r3, [r4, #0]
   d4be2:	4620      	mov	r0, r4
   d4be4:	68db      	ldr	r3, [r3, #12]
   d4be6:	4798      	blx	r3
   d4be8:	4628      	mov	r0, r5
   d4bea:	bd38      	pop	{r3, r4, r5, pc}
   d4bec:	000d89c4 	.word	0x000d89c4

000d4bf0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bf0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4bf2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bf4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4bf6:	b113      	cbz	r3, d4bfe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4bf8:	2203      	movs	r2, #3
   d4bfa:	4601      	mov	r1, r0
   d4bfc:	4798      	blx	r3
    }
   d4bfe:	4620      	mov	r0, r4
   d4c00:	bd10      	pop	{r4, pc}

000d4c02 <_ZN3UDPD0Ev>:
   d4c02:	b510      	push	{r4, lr}
   d4c04:	4604      	mov	r4, r0
   d4c06:	f7ff ffc9 	bl	d4b9c <_ZN3UDPD1Ev>
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	214c      	movs	r1, #76	; 0x4c
   d4c0e:	f002 facc 	bl	d71aa <_ZdlPvj>
   d4c12:	4620      	mov	r0, r4
   d4c14:	bd10      	pop	{r4, pc}

000d4c16 <_ZN9TCPClientD0Ev>:
   d4c16:	b510      	push	{r4, lr}
   d4c18:	4604      	mov	r4, r0
   d4c1a:	f7ff ffcf 	bl	d4bbc <_ZN9TCPClientD1Ev>
   d4c1e:	4620      	mov	r0, r4
   d4c20:	211c      	movs	r1, #28
   d4c22:	f002 fac2 	bl	d71aa <_ZdlPvj>
   d4c26:	4620      	mov	r0, r4
   d4c28:	bd10      	pop	{r4, pc}
	...

000d4c2c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d4c2c:	b570      	push	{r4, r5, r6, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d4c2e:	4d10      	ldr	r5, [pc, #64]	; (d4c70 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d4c30:	4c10      	ldr	r4, [pc, #64]	; (d4c74 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d4c32:	4e11      	ldr	r6, [pc, #68]	; (d4c78 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d4c34:	f000 f8d6 	bl	d4de4 <HAL_Pin_Map>
   d4c38:	4628      	mov	r0, r5
   d4c3a:	f001 fc61 	bl	d6500 <_ZN9TCPClientC1Ev>
   d4c3e:	4628      	mov	r0, r5
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d4c40:	4d0e      	ldr	r5, [pc, #56]	; (d4c7c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d4c42:	4622      	mov	r2, r4
   d4c44:	4631      	mov	r1, r6
   d4c46:	f002 faab 	bl	d71a0 <__aeabi_atexit>
   d4c4a:	4628      	mov	r0, r5
   d4c4c:	f001 fc58 	bl	d6500 <_ZN9TCPClientC1Ev>
   d4c50:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d4c52:	4d0b      	ldr	r5, [pc, #44]	; (d4c80 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d4c54:	4622      	mov	r2, r4
   d4c56:	4631      	mov	r1, r6
   d4c58:	f002 faa2 	bl	d71a0 <__aeabi_atexit>
   d4c5c:	4628      	mov	r0, r5
   d4c5e:	f001 ff27 	bl	d6ab0 <_ZN3UDPC1Ev>
   d4c62:	4622      	mov	r2, r4
   d4c64:	4628      	mov	r0, r5
   d4c66:	4907      	ldr	r1, [pc, #28]	; (d4c84 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d4c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4c6c:	f002 ba98 	b.w	d71a0 <__aeabi_atexit>
   d4c70:	2003e284 	.word	0x2003e284
   d4c74:	2003e1ec 	.word	0x2003e1ec
   d4c78:	000d4bbd 	.word	0x000d4bbd
   d4c7c:	2003e268 	.word	0x2003e268
   d4c80:	2003e2a0 	.word	0x2003e2a0
   d4c84:	000d4b9d 	.word	0x000d4b9d

000d4c88 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d4c88:	b510      	push	{r4, lr}
   d4c8a:	4c06      	ldr	r4, [pc, #24]	; (d4ca4 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d4c8c:	f000 f8aa 	bl	d4de4 <HAL_Pin_Map>
   d4c90:	4620      	mov	r0, r4
   d4c92:	f001 fc35 	bl	d6500 <_ZN9TCPClientC1Ev>
   d4c96:	4620      	mov	r0, r4
   d4c98:	4a03      	ldr	r2, [pc, #12]	; (d4ca8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d4c9a:	4904      	ldr	r1, [pc, #16]	; (d4cac <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d4c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4ca0:	f002 ba7e 	b.w	d71a0 <__aeabi_atexit>
   d4ca4:	2003e2ec 	.word	0x2003e2ec
   d4ca8:	2003e1ec 	.word	0x2003e1ec
   d4cac:	000d4bbd 	.word	0x000d4bbd

000d4cb0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	4611      	mov	r1, r2
   d4cb4:	6840      	ldr	r0, [r0, #4]
   d4cb6:	f000 baa9 	b.w	d520c <network_ready>
	...

000d4cbc <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	f000 f891 	bl	d4de4 <HAL_Pin_Map>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4cc2:	f000 f877 	bl	d4db4 <HAL_Timer_Get_Milli_Seconds>
typedef std::map<uint8_t, char*> meshMap;
static IotProtocol iotProtocolMesh = UBI_UDP;
static char* _tokenMesh;
static bool _debugMesh = false;
static int _throttlingTime = 20000;
static unsigned long time_now = millis();
   d4cc6:	4b01      	ldr	r3, [pc, #4]	; (d4ccc <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv+0x10>)
   d4cc8:	6018      	str	r0, [r3, #0]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	2003e308 	.word	0x2003e308

000d4cd0 <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d4cd0:	f000 b888 	b.w	d4de4 <HAL_Pin_Map>

000d4cd4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d4cd4:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d4cd6:	2200      	movs	r2, #0
   d4cd8:	701a      	strb	r2, [r3, #0]
   d4cda:	f000 b883 	b.w	d4de4 <HAL_Pin_Map>
   d4cde:	bf00      	nop
   d4ce0:	2003e30c 	.word	0x2003e30c

000d4ce4 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d4ce4:	b510      	push	{r4, lr}
   d4ce6:	4c06      	ldr	r4, [pc, #24]	; (d4d00 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d4ce8:	f000 f87c 	bl	d4de4 <HAL_Pin_Map>
   d4cec:	4620      	mov	r0, r4
   d4cee:	f001 fc07 	bl	d6500 <_ZN9TCPClientC1Ev>
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	4a03      	ldr	r2, [pc, #12]	; (d4d04 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d4cf6:	4904      	ldr	r1, [pc, #16]	; (d4d08 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d4cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4cfc:	f002 ba50 	b.w	d71a0 <__aeabi_atexit>
   d4d00:	2003e310 	.word	0x2003e310
   d4d04:	2003e1ec 	.word	0x2003e1ec
   d4d08:	000d4bbd 	.word	0x000d4bbd

000d4d0c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
          : IPAddress(ip);
  return serverIpAddress;
#endif

  return serverIpAddress;
}
   d4d0c:	b510      	push	{r4, lr}
   d4d0e:	4c06      	ldr	r4, [pc, #24]	; (d4d28 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d4d10:	f000 f868 	bl	d4de4 <HAL_Pin_Map>
   d4d14:	4620      	mov	r0, r4
   d4d16:	f001 fecb 	bl	d6ab0 <_ZN3UDPC1Ev>
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	4a03      	ldr	r2, [pc, #12]	; (d4d2c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d4d1e:	4904      	ldr	r1, [pc, #16]	; (d4d30 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d4d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d24:	f002 ba3c 	b.w	d71a0 <__aeabi_atexit>
   d4d28:	2003e32c 	.word	0x2003e32c
   d4d2c:	2003e1ec 	.word	0x2003e1ec
   d4d30:	000d4b9d 	.word	0x000d4b9d

000d4d34 <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d4d34:	b508      	push	{r3, lr}
   d4d36:	f000 f855 	bl	d4de4 <HAL_Pin_Map>
   d4d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4d3e:	f000 b839 	b.w	d4db4 <HAL_Timer_Get_Milli_Seconds>
	...

000d4d44 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <os_thread_is_current+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	689b      	ldr	r3, [r3, #8]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030248 	.word	0x00030248

000d4d54 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <os_thread_join+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	691b      	ldr	r3, [r3, #16]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030248 	.word	0x00030248

000d4d64 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <os_thread_cleanup+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	695b      	ldr	r3, [r3, #20]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030248 	.word	0x00030248

000d4d74 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <os_mutex_create+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030248 	.word	0x00030248

000d4d84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <os_mutex_recursive_create+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030248 	.word	0x00030248

000d4d94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_RNG_GetRandomNumber+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	685b      	ldr	r3, [r3, #4]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030218 	.word	0x00030218

000d4da4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_Delay_Microseconds+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	68db      	ldr	r3, [r3, #12]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030218 	.word	0x00030218

000d4db4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	695b      	ldr	r3, [r3, #20]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030218 	.word	0x00030218

000d4dc4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_RTC_Get_UnixTime+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	69db      	ldr	r3, [r3, #28]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030218 	.word	0x00030218

000d4dd4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_RTC_Time_Is_Valid+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030218 	.word	0x00030218

000d4de4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_Pin_Map+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	681b      	ldr	r3, [r3, #0]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003022c 	.word	0x0003022c

000d4df4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_Validate_Pin_Function+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	685b      	ldr	r3, [r3, #4]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	0003022c 	.word	0x0003022c

000d4e04 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_Pin_Mode+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	689b      	ldr	r3, [r3, #8]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	0003022c 	.word	0x0003022c

000d4e14 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_Interrupts_Enable_All+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6a1b      	ldr	r3, [r3, #32]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	0003022c 	.word	0x0003022c

000d4e24 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_Interrupts_Disable_All+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003022c 	.word	0x0003022c

000d4e34 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_ADC_Read+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003022c 	.word	0x0003022c

000d4e44 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_I2C_Write_Data+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6a1b      	ldr	r3, [r3, #32]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030228 	.word	0x00030228

000d4e54 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_I2C_Available_Data+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030228 	.word	0x00030228

000d4e64 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_I2C_Read_Data+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030228 	.word	0x00030228

000d4e74 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_I2C_Peek_Data+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030228 	.word	0x00030228

000d4e84 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_I2C_Flush_Data+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030228 	.word	0x00030228

000d4e94 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_I2C_Is_Enabled+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030228 	.word	0x00030228

000d4ea4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_I2C_Init+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030228 	.word	0x00030228

000d4eb4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <if_index_to_name+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	695b      	ldr	r3, [r3, #20]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003026c 	.word	0x0003026c

000d4ec4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <inet_inet_ntop+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	695b      	ldr	r3, [r3, #20]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030264 	.word	0x00030264

000d4ed4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <inet_htonl+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6a1b      	ldr	r3, [r3, #32]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030264 	.word	0x00030264

000d4ee4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <inet_ntohs+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030264 	.word	0x00030264

000d4ef4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <inet_htons+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030264 	.word	0x00030264

000d4f04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <netdb_freeaddrinfo+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	689b      	ldr	r3, [r3, #8]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030268 	.word	0x00030268

000d4f14 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <netdb_getaddrinfo+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	68db      	ldr	r3, [r3, #12]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030268 	.word	0x00030268

000d4f24 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <sock_bind+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	685b      	ldr	r3, [r3, #4]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030238 	.word	0x00030238

000d4f34 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <sock_setsockopt+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	699b      	ldr	r3, [r3, #24]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030238 	.word	0x00030238

000d4f44 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <sock_close+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	69db      	ldr	r3, [r3, #28]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030238 	.word	0x00030238

000d4f54 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <sock_connect+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	6a1b      	ldr	r3, [r3, #32]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030238 	.word	0x00030238

000d4f64 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <sock_recv+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030238 	.word	0x00030238

000d4f74 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <sock_recvfrom+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030238 	.word	0x00030238

000d4f84 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <sock_send+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030238 	.word	0x00030238

000d4f94 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <sock_sendto+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030238 	.word	0x00030238

000d4fa4 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <sock_socket+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030238 	.word	0x00030238

000d4fb4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_SPI_Init+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	69db      	ldr	r3, [r3, #28]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030230 	.word	0x00030230

000d4fc4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_SPI_Is_Enabled+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	6a1b      	ldr	r3, [r3, #32]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030230 	.word	0x00030230

000d4fd4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_USART_Init+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	681b      	ldr	r3, [r3, #0]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003023c 	.word	0x0003023c

000d4fe4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_USART_Write_Data+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	68db      	ldr	r3, [r3, #12]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003023c 	.word	0x0003023c

000d4ff4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_USART_Available_Data+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	691b      	ldr	r3, [r3, #16]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003023c 	.word	0x0003023c

000d5004 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_USART_Read_Data+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	695b      	ldr	r3, [r3, #20]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	0003023c 	.word	0x0003023c

000d5014 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_USART_Peek_Data+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	699b      	ldr	r3, [r3, #24]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	0003023c 	.word	0x0003023c

000d5024 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_USART_Flush_Data+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	69db      	ldr	r3, [r3, #28]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	0003023c 	.word	0x0003023c

000d5034 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_USART_Is_Enabled+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a1b      	ldr	r3, [r3, #32]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	0003023c 	.word	0x0003023c

000d5044 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_USART_Available_Data_For_Write+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	0003023c 	.word	0x0003023c

000d5054 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_USB_USART_Init+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	681b      	ldr	r3, [r3, #0]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	0003024c 	.word	0x0003024c

000d5064 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_USB_USART_Available_Data+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	691b      	ldr	r3, [r3, #16]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003024c 	.word	0x0003024c

000d5074 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	695b      	ldr	r3, [r3, #20]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	0003024c 	.word	0x0003024c

000d5084 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_USB_USART_Receive_Data+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	699b      	ldr	r3, [r3, #24]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	0003024c 	.word	0x0003024c

000d5094 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_USB_USART_Send_Data+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	69db      	ldr	r3, [r3, #28]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003024c 	.word	0x0003024c

000d50a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_USB_USART_Flush_Data+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	6a1b      	ldr	r3, [r3, #32]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003024c 	.word	0x0003024c

000d50b4 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <wlan_connected_info+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030274 	.word	0x00030274

000d50c4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <panic_+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030260 	.word	0x00030260

000d50d4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <log_message+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030260 	.word	0x00030260

000d50e4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <system_mode+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	681b      	ldr	r3, [r3, #0]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030220 	.word	0x00030220

000d50f4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <set_system_mode+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	685b      	ldr	r3, [r3, #4]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030220 	.word	0x00030220

000d5104 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <system_delay_ms+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	695b      	ldr	r3, [r3, #20]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030220 	.word	0x00030220

000d5114 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <application_thread_current+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030220 	.word	0x00030220

000d5124 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <application_thread_invoke+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	00030220 	.word	0x00030220

000d5134 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <system_thread_get_state+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	00030220 	.word	0x00030220

000d5144 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b03      	ldr	r3, [pc, #12]	; (d5154 <system_ctrl_set_app_request_handler+0x10>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d514e:	9301      	str	r3, [sp, #4]
   d5150:	bd08      	pop	{r3, pc}
   d5152:	0000      	.short	0x0000
   d5154:	00030220 	.word	0x00030220

000d5158 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b03      	ldr	r3, [pc, #12]	; (d5168 <system_ctrl_set_result+0x10>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5162:	9301      	str	r3, [sp, #4]
   d5164:	bd08      	pop	{r3, pc}
   d5166:	0000      	.short	0x0000
   d5168:	00030220 	.word	0x00030220

000d516c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <spark_variable+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	681b      	ldr	r3, [r3, #0]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030244 	.word	0x00030244

000d517c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <spark_function+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	685b      	ldr	r3, [r3, #4]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030244 	.word	0x00030244

000d518c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <spark_process+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	689b      	ldr	r3, [r3, #8]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030244 	.word	0x00030244

000d519c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <spark_cloud_flag_connected+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	695b      	ldr	r3, [r3, #20]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030244 	.word	0x00030244

000d51ac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <spark_send_event+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	6a1b      	ldr	r3, [r3, #32]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030244 	.word	0x00030244

000d51bc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <spark_sync_time_pending+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030244 	.word	0x00030244

000d51cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030244 	.word	0x00030244

000d51dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <network_connect+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	685b      	ldr	r3, [r3, #4]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030240 	.word	0x00030240

000d51ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <network_connecting+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	689b      	ldr	r3, [r3, #8]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030240 	.word	0x00030240

000d51fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <network_disconnect+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	68db      	ldr	r3, [r3, #12]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030240 	.word	0x00030240

000d520c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <network_ready+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	691b      	ldr	r3, [r3, #16]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030240 	.word	0x00030240

000d521c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <network_on+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	695b      	ldr	r3, [r3, #20]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030240 	.word	0x00030240

000d522c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <network_off+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	699b      	ldr	r3, [r3, #24]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030240 	.word	0x00030240

000d523c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <network_listen+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	69db      	ldr	r3, [r3, #28]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030240 	.word	0x00030240

000d524c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <network_listening+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	6a1b      	ldr	r3, [r3, #32]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030240 	.word	0x00030240

000d525c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <network_set_listen_timeout+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030240 	.word	0x00030240

000d526c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <network_get_listen_timeout+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030240 	.word	0x00030240

000d527c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <malloc+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	681b      	ldr	r3, [r3, #0]
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	0003021c 	.word	0x0003021c

000d528c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <free+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	685b      	ldr	r3, [r3, #4]
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	0003021c 	.word	0x0003021c

000d529c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <realloc+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	689b      	ldr	r3, [r3, #8]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	0003021c 	.word	0x0003021c

000d52ac <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <siscanf+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	699b      	ldr	r3, [r3, #24]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	0003021c 	.word	0x0003021c

000d52bc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <snprintf+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	69db      	ldr	r3, [r3, #28]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	0003021c 	.word	0x0003021c

000d52cc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <abort+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	0003021c 	.word	0x0003021c

000d52dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <_malloc_r+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	0003021c 	.word	0x0003021c

000d52ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <__errno+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	0003021c 	.word	0x0003021c

000d52fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d52fc:	2100      	movs	r1, #0
   d52fe:	f7ff bf01 	b.w	d5104 <system_delay_ms>

000d5302 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5302:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5304:	6883      	ldr	r3, [r0, #8]
   d5306:	4604      	mov	r4, r0
   d5308:	b90b      	cbnz	r3, d530e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d530a:	f001 ff50 	bl	d71ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d530e:	68c3      	ldr	r3, [r0, #12]
   d5310:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5312:	68a3      	ldr	r3, [r4, #8]
   d5314:	b11b      	cbz	r3, d531e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5316:	2203      	movs	r2, #3
   d5318:	4621      	mov	r1, r4
   d531a:	4620      	mov	r0, r4
   d531c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d531e:	4620      	mov	r0, r4
   d5320:	2110      	movs	r1, #16
}
   d5322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5326:	f001 bf40 	b.w	d71aa <_ZdlPvj>

000d532a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d532a:	4770      	bx	lr

000d532c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d532c:	2000      	movs	r0, #0
   d532e:	4770      	bx	lr

000d5330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5330:	b510      	push	{r4, lr}
   d5332:	2110      	movs	r1, #16
   d5334:	4604      	mov	r4, r0
   d5336:	f001 ff38 	bl	d71aa <_ZdlPvj>
   d533a:	4620      	mov	r0, r4
   d533c:	bd10      	pop	{r4, pc}

000d533e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d533e:	b508      	push	{r3, lr}
      { delete this; }
   d5340:	b108      	cbz	r0, d5346 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5342:	f7ff fff5 	bl	d5330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5346:	bd08      	pop	{r3, pc}

000d5348 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5348:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d534a:	68c4      	ldr	r4, [r0, #12]
   d534c:	b1ec      	cbz	r4, d538a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d534e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5350:	2b02      	cmp	r3, #2
   d5352:	d102      	bne.n	d535a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5354:	68e0      	ldr	r0, [r4, #12]
   d5356:	f7ff ff99 	bl	d528c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d535a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d535c:	b135      	cbz	r5, d536c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d535e:	4628      	mov	r0, r5
   d5360:	f7ff fc46 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>
   d5364:	2110      	movs	r1, #16
   d5366:	4628      	mov	r0, r5
   d5368:	f001 ff1f 	bl	d71aa <_ZdlPvj>
   d536c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d536e:	b135      	cbz	r5, d537e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d5370:	4628      	mov	r0, r5
   d5372:	f7ff fc3d 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>
   d5376:	2110      	movs	r1, #16
   d5378:	4628      	mov	r0, r5
   d537a:	f001 ff16 	bl	d71aa <_ZdlPvj>
   d537e:	4620      	mov	r0, r4
   d5380:	2114      	movs	r1, #20
   d5382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5386:	f001 bf10 	b.w	d71aa <_ZdlPvj>
   d538a:	bd38      	pop	{r3, r4, r5, pc}

000d538c <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d538c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d538e:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d5390:	4668      	mov	r0, sp
   d5392:	f000 fdd9 	bl	d5f48 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5396:	68a3      	ldr	r3, [r4, #8]
   d5398:	b90b      	cbnz	r3, d539e <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d539a:	f001 ff08 	bl	d71ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d539e:	68e3      	ldr	r3, [r4, #12]
   d53a0:	4669      	mov	r1, sp
   d53a2:	4620      	mov	r0, r4
   d53a4:	4798      	blx	r3
   d53a6:	4604      	mov	r4, r0
   d53a8:	4668      	mov	r0, sp
   d53aa:	f000 fd86 	bl	d5eba <_ZN6StringD1Ev>
}
   d53ae:	4620      	mov	r0, r4
   d53b0:	b004      	add	sp, #16
   d53b2:	bd10      	pop	{r4, pc}

000d53b4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d53b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d53b6:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d53b8:	b085      	sub	sp, #20
   d53ba:	4607      	mov	r7, r0
   d53bc:	460e      	mov	r6, r1
   d53be:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d53c0:	2100      	movs	r1, #0
   d53c2:	4622      	mov	r2, r4
   d53c4:	4668      	mov	r0, sp
   d53c6:	f002 fd68 	bl	d7e9a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d53ca:	2200      	movs	r2, #0
   d53cc:	4669      	mov	r1, sp
   d53ce:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d53d0:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d53d4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d53d6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d53d8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d53da:	f7ff fecf 	bl	d517c <spark_function>
}
   d53de:	b005      	add	sp, #20
   d53e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d53e2:	b513      	push	{r0, r1, r4, lr}
   d53e4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d53e6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d53ea:	2300      	movs	r3, #0
   d53ec:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d53ee:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d53f0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d53f2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53f4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d53f6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d53f8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53fa:	f7fe ff0e 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53fe:	4620      	mov	r0, r4
   d5400:	b002      	add	sp, #8
   d5402:	bd10      	pop	{r4, pc}

000d5404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5404:	680b      	ldr	r3, [r1, #0]
   d5406:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5408:	b113      	cbz	r3, d5410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d540a:	685a      	ldr	r2, [r3, #4]
   d540c:	3201      	adds	r2, #1
   d540e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5410:	4770      	bx	lr

000d5412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5414:	460c      	mov	r4, r1
   d5416:	ad02      	add	r5, sp, #8
   d5418:	f854 3b04 	ldr.w	r3, [r4], #4
   d541c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5420:	4606      	mov	r6, r0
   d5422:	460f      	mov	r7, r1
   d5424:	a801      	add	r0, sp, #4
   d5426:	4621      	mov	r1, r4
   d5428:	f7ff ffec 	bl	d5404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d542c:	4629      	mov	r1, r5
   d542e:	4630      	mov	r0, r6
   d5430:	f7ff ffd7 	bl	d53e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5434:	a801      	add	r0, sp, #4
   d5436:	f7fe fef0 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d543a:	4620      	mov	r0, r4
   d543c:	f7fe feed 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5440:	4638      	mov	r0, r7
   d5442:	2108      	movs	r1, #8
   d5444:	f001 feb1 	bl	d71aa <_ZdlPvj>
        return p;
    }
   d5448:	4630      	mov	r0, r6
   d544a:	b003      	add	sp, #12
   d544c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d544e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d544e:	b513      	push	{r0, r1, r4, lr}
   d5450:	460b      	mov	r3, r1
   d5452:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5454:	c803      	ldmia	r0, {r0, r1}
   d5456:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d545a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d545e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5462:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5466:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d546a:	b002      	add	sp, #8
   d546c:	bd10      	pop	{r4, pc}

000d546e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d546e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5470:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5472:	b90a      	cbnz	r2, d5478 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5474:	f001 fe9b 	bl	d71ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5478:	68c3      	ldr	r3, [r0, #12]
    }
   d547a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d547e:	4718      	bx	r3

000d5480 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5480:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5482:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5484:	f100 0110 	add.w	r1, r0, #16
   d5488:	f7ff fff1 	bl	d546e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d548c:	bd08      	pop	{r3, pc}

000d548e <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d548e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5490:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5492:	b90a      	cbnz	r2, d5498 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5494:	f001 fe8b 	bl	d71ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5498:	68c3      	ldr	r3, [r0, #12]
    }
   d549a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d549e:	4718      	bx	r3

000d54a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54a0:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54a2:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54a4:	f100 0110 	add.w	r1, r0, #16
   d54a8:	f7ff fff1 	bl	d548e <_ZNKSt8functionIFvRKbEEclES1_>
   d54ac:	bd08      	pop	{r3, pc}

000d54ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54ae:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54b0:	2300      	movs	r3, #0
   d54b2:	6083      	str	r3, [r0, #8]
   d54b4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54b6:	4604      	mov	r4, r0
   d54b8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54ba:	b12b      	cbz	r3, d54c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54bc:	2202      	movs	r2, #2
   d54be:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54c0:	68eb      	ldr	r3, [r5, #12]
   d54c2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d54c4:	68ab      	ldr	r3, [r5, #8]
   d54c6:	60a3      	str	r3, [r4, #8]
	}
    }
   d54c8:	4620      	mov	r0, r4
   d54ca:	bd38      	pop	{r3, r4, r5, pc}

000d54cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d54cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d54d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d54d4:	b086      	sub	sp, #24
   d54d6:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54d8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d54dc:	808b      	strh	r3, [r1, #4]
   d54de:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54e0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d54e2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d54e6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d54e8:	f04f 0002 	mov.w	r0, #2
   d54ec:	e8d4 1f4f 	ldrexb	r1, [r4]
   d54f0:	4299      	cmp	r1, r3
   d54f2:	d103      	bne.n	d54fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d54f4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d54f8:	2d00      	cmp	r5, #0
   d54fa:	d1f7      	bne.n	d54ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d54fc:	d002      	beq.n	d5504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d54fe:	f88d 1000 	strb.w	r1, [sp]
   d5502:	e06b      	b.n	d55dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5504:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5508:	bf1e      	ittt	ne
   d550a:	60e7      	strne	r7, [r4, #12]
   d550c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d550e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5510:	2301      	movs	r3, #1
   d5512:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5516:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5518:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d551a:	f104 0308 	add.w	r3, r4, #8
   d551e:	f3bf 8f5f 	dmb	sy
   d5522:	e853 6f00 	ldrex	r6, [r3]
   d5526:	e843 0200 	strex	r2, r0, [r3]
   d552a:	2a00      	cmp	r2, #0
   d552c:	d1f9      	bne.n	d5522 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d552e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5532:	2e00      	cmp	r6, #0
   d5534:	d052      	beq.n	d55dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5536:	f7ff fded 	bl	d5114 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d553a:	b120      	cbz	r0, d5546 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d553c:	4629      	mov	r1, r5
   d553e:	4630      	mov	r0, r6
   d5540:	f7ff ff95 	bl	d546e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5544:	e043      	b.n	d55ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5546:	4631      	mov	r1, r6
   d5548:	4668      	mov	r0, sp
   d554a:	f7ff ffb0 	bl	d54ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d554e:	68e0      	ldr	r0, [r4, #12]
   d5550:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5554:	b108      	cbz	r0, d555a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5556:	f002 fce3 	bl	d7f20 <strdup>
   d555a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d555c:	2010      	movs	r0, #16
   d555e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5562:	f7fe fd98 	bl	d4096 <_Znwj>
   d5566:	4605      	mov	r5, r0
   d5568:	b330      	cbz	r0, d55b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d556a:	f04f 0800 	mov.w	r8, #0
   d556e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5572:	2018      	movs	r0, #24
   d5574:	f7fe fd8f 	bl	d4096 <_Znwj>
   d5578:	4604      	mov	r4, r0
   d557a:	b1c0      	cbz	r0, d55ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d557c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5580:	4601      	mov	r1, r0
   d5582:	4668      	mov	r0, sp
   d5584:	f7ff ff63 	bl	d544e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5588:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d558a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d558c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d558e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5590:	9202      	str	r2, [sp, #8]
   d5592:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5594:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5596:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d559a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d559c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d55a0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d55a4:	9b04      	ldr	r3, [sp, #16]
   d55a6:	9203      	str	r2, [sp, #12]
   d55a8:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d55aa:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55ae:	4b0e      	ldr	r3, [pc, #56]	; (d55e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d55b0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55b2:	4b0e      	ldr	r3, [pc, #56]	; (d55ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55b4:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55b6:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d55b8:	9804      	ldr	r0, [sp, #16]
   d55ba:	f7ff fe67 	bl	d528c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55be:	4668      	mov	r0, sp
   d55c0:	f7ff fb16 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55c4:	2200      	movs	r2, #0
   d55c6:	4629      	mov	r1, r5
   d55c8:	4809      	ldr	r0, [pc, #36]	; (d55f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d55ca:	f7ff fdab 	bl	d5124 <application_thread_invoke>
   d55ce:	4630      	mov	r0, r6
   d55d0:	f7ff fb0e 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d55d4:	2110      	movs	r1, #16
   d55d6:	4630      	mov	r0, r6
   d55d8:	f001 fde7 	bl	d71aa <_ZdlPvj>
   d55dc:	4638      	mov	r0, r7
   d55de:	f7ff fe55 	bl	d528c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d55e2:	b006      	add	sp, #24
   d55e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d55e8:	000d5481 	.word	0x000d5481
   d55ec:	000d56dd 	.word	0x000d56dd
   d55f0:	000d5303 	.word	0x000d5303

000d55f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d55f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55f8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d55fa:	ad07      	add	r5, sp, #28
   d55fc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5600:	4606      	mov	r6, r0
   d5602:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5604:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5606:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5608:	460f      	mov	r7, r1
   d560a:	4690      	mov	r8, r2
   d560c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5610:	f8c5 b004 	str.w	fp, [r5, #4]
   d5614:	f8c5 b008 	str.w	fp, [r5, #8]
   d5618:	9307      	str	r3, [sp, #28]
   d561a:	f7fe fd3c 	bl	d4096 <_Znwj>
   d561e:	4604      	mov	r4, r0
   d5620:	b138      	cbz	r0, d5632 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5622:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5626:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d562a:	f8c0 b004 	str.w	fp, [r0, #4]
   d562e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5632:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5634:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5636:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5638:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d563a:	f7fe fd2c 	bl	d4096 <_Znwj>
   d563e:	b128      	cbz	r0, d564c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5640:	2301      	movs	r3, #1
   d5642:	6043      	str	r3, [r0, #4]
   d5644:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5646:	4b23      	ldr	r3, [pc, #140]	; (d56d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5648:	6003      	str	r3, [r0, #0]
   d564a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d564c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d564e:	4b22      	ldr	r3, [pc, #136]	; (d56d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5650:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5652:	2008      	movs	r0, #8
   d5654:	f7fe fd1f 	bl	d4096 <_Znwj>
   d5658:	4604      	mov	r4, r0
   d565a:	b128      	cbz	r0, d5668 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d565c:	9b03      	ldr	r3, [sp, #12]
   d565e:	f840 3b04 	str.w	r3, [r0], #4
   d5662:	a904      	add	r1, sp, #16
   d5664:	f7ff fece 	bl	d5404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5668:	9500      	str	r5, [sp, #0]
   d566a:	fa5f f38a 	uxtb.w	r3, sl
   d566e:	464a      	mov	r2, r9
   d5670:	4641      	mov	r1, r8
   d5672:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5674:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5676:	f7ff fd99 	bl	d51ac <spark_send_event>
   d567a:	b9b8      	cbnz	r0, d56ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d567c:	9b03      	ldr	r3, [sp, #12]
   d567e:	785b      	ldrb	r3, [r3, #1]
   d5680:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5684:	b993      	cbnz	r3, d56ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5686:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d568a:	a905      	add	r1, sp, #20
   d568c:	a803      	add	r0, sp, #12
   d568e:	9205      	str	r2, [sp, #20]
   d5690:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5694:	f7ff ff1a 	bl	d54cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5698:	9805      	ldr	r0, [sp, #20]
   d569a:	f7ff fdf7 	bl	d528c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d569e:	a805      	add	r0, sp, #20
   d56a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d56a2:	f7ff feb6 	bl	d5412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56a6:	a806      	add	r0, sp, #24
   d56a8:	f7fe fdb7 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56ac:	9b03      	ldr	r3, [sp, #12]
   d56ae:	9305      	str	r3, [sp, #20]
   d56b0:	a904      	add	r1, sp, #16
   d56b2:	a806      	add	r0, sp, #24
   d56b4:	f7ff fea6 	bl	d5404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d56b8:	a905      	add	r1, sp, #20
   d56ba:	4630      	mov	r0, r6
   d56bc:	f7ff fe91 	bl	d53e2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56c0:	a806      	add	r0, sp, #24
   d56c2:	f7fe fdaa 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56c6:	a804      	add	r0, sp, #16
   d56c8:	f7fe fda7 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d56cc:	4630      	mov	r0, r6
   d56ce:	b00b      	add	sp, #44	; 0x2c
   d56d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d56d4:	000d87c4 	.word	0x000d87c4
   d56d8:	000d5849 	.word	0x000d5849

000d56dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d56dc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d56de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56e0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d56e2:	d006      	beq.n	d56f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d56e4:	2a03      	cmp	r2, #3
   d56e6:	d017      	beq.n	d5718 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d56e8:	2a01      	cmp	r2, #1
   d56ea:	d121      	bne.n	d5730 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d56ec:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d56ee:	6003      	str	r3, [r0, #0]
	      break;
   d56f0:	e01e      	b.n	d5730 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d56f2:	2018      	movs	r0, #24
   d56f4:	680e      	ldr	r6, [r1, #0]
   d56f6:	f7fe fcce 	bl	d4096 <_Znwj>
   d56fa:	4605      	mov	r5, r0
   d56fc:	b150      	cbz	r0, d5714 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d56fe:	4631      	mov	r1, r6
   d5700:	f7ff fed5 	bl	d54ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5704:	6930      	ldr	r0, [r6, #16]
   d5706:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d570a:	b108      	cbz	r0, d5710 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d570c:	f002 fc08 	bl	d7f20 <strdup>
   d5710:	6128      	str	r0, [r5, #16]
   d5712:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5714:	6025      	str	r5, [r4, #0]
   d5716:	e00b      	b.n	d5730 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5718:	6804      	ldr	r4, [r0, #0]
   d571a:	b14c      	cbz	r4, d5730 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d571c:	6920      	ldr	r0, [r4, #16]
   d571e:	f7ff fdb5 	bl	d528c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5722:	4620      	mov	r0, r4
   d5724:	f7ff fa64 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5728:	2118      	movs	r1, #24
   d572a:	4620      	mov	r0, r4
   d572c:	f001 fd3d 	bl	d71aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5730:	2000      	movs	r0, #0
   d5732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5734 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5734:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5736:	2300      	movs	r3, #0
   d5738:	6083      	str	r3, [r0, #8]
   d573a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d573c:	4604      	mov	r4, r0
   d573e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5740:	b12b      	cbz	r3, d574e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5742:	2202      	movs	r2, #2
   d5744:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5746:	68eb      	ldr	r3, [r5, #12]
   d5748:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d574a:	68ab      	ldr	r3, [r5, #8]
   d574c:	60a3      	str	r3, [r4, #8]
	}
    }
   d574e:	4620      	mov	r0, r4
   d5750:	bd38      	pop	{r3, r4, r5, pc}

000d5752 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5752:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5754:	b570      	push	{r4, r5, r6, lr}
   d5756:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5758:	d006      	beq.n	d5768 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d575a:	2a03      	cmp	r2, #3
   d575c:	d011      	beq.n	d5782 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d575e:	2a01      	cmp	r2, #1
   d5760:	d118      	bne.n	d5794 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5762:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5764:	6003      	str	r3, [r0, #0]
	      break;
   d5766:	e015      	b.n	d5794 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5768:	2014      	movs	r0, #20
   d576a:	680e      	ldr	r6, [r1, #0]
   d576c:	f7fe fc93 	bl	d4096 <_Znwj>
   d5770:	4605      	mov	r5, r0
   d5772:	b120      	cbz	r0, d577e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5774:	4631      	mov	r1, r6
   d5776:	f7ff ffdd 	bl	d5734 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d577a:	7c33      	ldrb	r3, [r6, #16]
   d577c:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d577e:	6025      	str	r5, [r4, #0]
   d5780:	e008      	b.n	d5794 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5782:	6804      	ldr	r4, [r0, #0]
   d5784:	b134      	cbz	r4, d5794 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5786:	4620      	mov	r0, r4
   d5788:	f7ff fa32 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d578c:	2114      	movs	r1, #20
   d578e:	4620      	mov	r0, r4
   d5790:	f001 fd0b 	bl	d71aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5794:	2000      	movs	r0, #0
   d5796:	bd70      	pop	{r4, r5, r6, pc}

000d5798 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5798:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d579a:	2300      	movs	r3, #0
   d579c:	b087      	sub	sp, #28
   d579e:	460c      	mov	r4, r1
   d57a0:	f3bf 8f5f 	dmb	sy
   d57a4:	e850 6f00 	ldrex	r6, [r0]
   d57a8:	e840 3200 	strex	r2, r3, [r0]
   d57ac:	2a00      	cmp	r2, #0
   d57ae:	d1f9      	bne.n	d57a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d57b0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d57b4:	2e00      	cmp	r6, #0
   d57b6:	d03f      	beq.n	d5838 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d57b8:	4618      	mov	r0, r3
   d57ba:	f7ff fcab 	bl	d5114 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d57be:	4607      	mov	r7, r0
   d57c0:	b120      	cbz	r0, d57cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d57c2:	4621      	mov	r1, r4
   d57c4:	4630      	mov	r0, r6
   d57c6:	f7ff fe62 	bl	d548e <_ZNKSt8functionIFvRKbEEclES1_>
   d57ca:	e02e      	b.n	d582a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d57cc:	4631      	mov	r1, r6
   d57ce:	a801      	add	r0, sp, #4
   d57d0:	f7ff ffb0 	bl	d5734 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57d4:	7823      	ldrb	r3, [r4, #0]
   d57d6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d57da:	2010      	movs	r0, #16
   d57dc:	f7fe fc5b 	bl	d4096 <_Znwj>
   d57e0:	4605      	mov	r5, r0
   d57e2:	b1d0      	cbz	r0, d581a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57e4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d57e6:	2014      	movs	r0, #20
   d57e8:	f7fe fc55 	bl	d4096 <_Znwj>
   d57ec:	4604      	mov	r4, r0
   d57ee:	b178      	cbz	r0, d5810 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57f0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d57f2:	4601      	mov	r1, r0
   d57f4:	a801      	add	r0, sp, #4
   d57f6:	f7ff fe2a 	bl	d544e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d57fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5800:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5802:	9203      	str	r2, [sp, #12]
   d5804:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5806:	60e3      	str	r3, [r4, #12]
   d5808:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d580c:	9204      	str	r2, [sp, #16]
   d580e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5810:	4b0a      	ldr	r3, [pc, #40]	; (d583c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5812:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5814:	4b0a      	ldr	r3, [pc, #40]	; (d5840 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5816:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5818:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d581a:	a801      	add	r0, sp, #4
   d581c:	f7ff f9e8 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5820:	2200      	movs	r2, #0
   d5822:	4629      	mov	r1, r5
   d5824:	4807      	ldr	r0, [pc, #28]	; (d5844 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5826:	f7ff fc7d 	bl	d5124 <application_thread_invoke>
   d582a:	4630      	mov	r0, r6
   d582c:	f7ff f9e0 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5830:	2110      	movs	r1, #16
   d5832:	4630      	mov	r0, r6
   d5834:	f001 fcb9 	bl	d71aa <_ZdlPvj>
        }
    }
   d5838:	b007      	add	sp, #28
   d583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d583c:	000d54a1 	.word	0x000d54a1
   d5840:	000d5753 	.word	0x000d5753
   d5844:	000d5303 	.word	0x000d5303

000d5848 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5848:	b530      	push	{r4, r5, lr}
   d584a:	b085      	sub	sp, #20
   d584c:	4604      	mov	r4, r0
   d584e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5850:	4668      	mov	r0, sp
   d5852:	4611      	mov	r1, r2
   d5854:	f7ff fddd 	bl	d5412 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5858:	b17c      	cbz	r4, d587a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d585a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d585c:	4628      	mov	r0, r5
   d585e:	b10d      	cbz	r5, d5864 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5860:	f002 fb5e 	bl	d7f20 <strdup>
   d5864:	9002      	str	r0, [sp, #8]
   d5866:	a902      	add	r1, sp, #8
   d5868:	4668      	mov	r0, sp
   d586a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d586e:	f7ff fe2d 	bl	d54cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5872:	9802      	ldr	r0, [sp, #8]
   d5874:	f7ff fd0a 	bl	d528c <free>
   d5878:	e01d      	b.n	d58b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d587a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d587c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5880:	f04f 0201 	mov.w	r2, #1
   d5884:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5888:	42a3      	cmp	r3, r4
   d588a:	d103      	bne.n	d5894 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d588c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5890:	2900      	cmp	r1, #0
   d5892:	d1f7      	bne.n	d5884 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5894:	d002      	beq.n	d589c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5896:	f88d 3008 	strb.w	r3, [sp, #8]
   d589a:	e00c      	b.n	d58b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d589c:	f110 010c 	adds.w	r1, r0, #12
   d58a0:	f04f 0301 	mov.w	r3, #1
   d58a4:	bf18      	it	ne
   d58a6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d58a8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d58ac:	3004      	adds	r0, #4
   d58ae:	f800 3c03 	strb.w	r3, [r0, #-3]
   d58b2:	f7ff ff71 	bl	d5798 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d58b6:	a801      	add	r0, sp, #4
   d58b8:	f7fe fcaf 	bl	d421a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d58bc:	b005      	add	sp, #20
   d58be:	bd30      	pop	{r4, r5, pc}

000d58c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58c0:	2200      	movs	r2, #0
   d58c2:	4611      	mov	r1, r2
   d58c4:	6840      	ldr	r0, [r0, #4]
   d58c6:	f7ff bcc1 	b.w	d524c <network_listening>

000d58ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d58ca:	2200      	movs	r2, #0
   d58cc:	4611      	mov	r1, r2
   d58ce:	6840      	ldr	r0, [r0, #4]
   d58d0:	f7ff bccc 	b.w	d526c <network_get_listen_timeout>

000d58d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d58d4:	2200      	movs	r2, #0
   d58d6:	6840      	ldr	r0, [r0, #4]
   d58d8:	f7ff bcc0 	b.w	d525c <network_set_listen_timeout>

000d58dc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58dc:	2200      	movs	r2, #0
   d58de:	f081 0101 	eor.w	r1, r1, #1
   d58e2:	6840      	ldr	r0, [r0, #4]
   d58e4:	f7ff bcaa 	b.w	d523c <network_listen>

000d58e8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d58e8:	2300      	movs	r3, #0
   d58ea:	461a      	mov	r2, r3
   d58ec:	4619      	mov	r1, r3
   d58ee:	6840      	ldr	r0, [r0, #4]
   d58f0:	f7ff bc9c 	b.w	d522c <network_off>

000d58f4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d58f4:	2300      	movs	r3, #0
   d58f6:	461a      	mov	r2, r3
   d58f8:	4619      	mov	r1, r3
   d58fa:	6840      	ldr	r0, [r0, #4]
   d58fc:	f7ff bc8e 	b.w	d521c <network_on>

000d5900 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5900:	2200      	movs	r2, #0
   d5902:	4611      	mov	r1, r2
   d5904:	6840      	ldr	r0, [r0, #4]
   d5906:	f7ff bc81 	b.w	d520c <network_ready>

000d590a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d590a:	2200      	movs	r2, #0
   d590c:	4611      	mov	r1, r2
   d590e:	6840      	ldr	r0, [r0, #4]
   d5910:	f7ff bc6c 	b.w	d51ec <network_connecting>

000d5914 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5914:	2200      	movs	r2, #0
   d5916:	2102      	movs	r1, #2
   d5918:	6840      	ldr	r0, [r0, #4]
   d591a:	f7ff bc6f 	b.w	d51fc <network_disconnect>

000d591e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d591e:	2300      	movs	r3, #0
   d5920:	461a      	mov	r2, r3
   d5922:	6840      	ldr	r0, [r0, #4]
   d5924:	f7ff bc5a 	b.w	d51dc <network_connect>

000d5928 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5928:	4b02      	ldr	r3, [pc, #8]	; (d5934 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d592a:	2203      	movs	r2, #3
   d592c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d592e:	4a02      	ldr	r2, [pc, #8]	; (d5938 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5930:	601a      	str	r2, [r3, #0]
   d5932:	4770      	bx	lr
   d5934:	2003e378 	.word	0x2003e378
   d5938:	000d87e0 	.word	0x000d87e0

000d593c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d593c:	4770      	bx	lr

000d593e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5940:	4606      	mov	r6, r0
   d5942:	4615      	mov	r5, r2
   d5944:	460c      	mov	r4, r1
   d5946:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5948:	42bc      	cmp	r4, r7
   d594a:	d006      	beq.n	d595a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d594c:	6833      	ldr	r3, [r6, #0]
   d594e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5952:	689b      	ldr	r3, [r3, #8]
   d5954:	4630      	mov	r0, r6
   d5956:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5958:	e7f6      	b.n	d5948 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d595a:	4628      	mov	r0, r5
   d595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d595e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d595e:	2200      	movs	r2, #0
   d5960:	7c00      	ldrb	r0, [r0, #16]
   d5962:	f7ff ba6f 	b.w	d4e44 <HAL_I2C_Write_Data>

000d5966 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5966:	2100      	movs	r1, #0
   d5968:	7c00      	ldrb	r0, [r0, #16]
   d596a:	f7ff ba73 	b.w	d4e54 <HAL_I2C_Available_Data>

000d596e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d596e:	2100      	movs	r1, #0
   d5970:	7c00      	ldrb	r0, [r0, #16]
   d5972:	f7ff ba77 	b.w	d4e64 <HAL_I2C_Read_Data>

000d5976 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5976:	2100      	movs	r1, #0
   d5978:	7c00      	ldrb	r0, [r0, #16]
   d597a:	f7ff ba7b 	b.w	d4e74 <HAL_I2C_Peek_Data>

000d597e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d597e:	2100      	movs	r1, #0
   d5980:	7c00      	ldrb	r0, [r0, #16]
   d5982:	f7ff ba7f 	b.w	d4e84 <HAL_I2C_Flush_Data>

000d5986 <_ZN7TwoWireD0Ev>:
   d5986:	b510      	push	{r4, lr}
   d5988:	2114      	movs	r1, #20
   d598a:	4604      	mov	r4, r0
   d598c:	f001 fc0d 	bl	d71aa <_ZdlPvj>
   d5990:	4620      	mov	r0, r4
   d5992:	bd10      	pop	{r4, pc}

000d5994 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5994:	b510      	push	{r4, lr}
   d5996:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d599c:	4608      	mov	r0, r1
   d599e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d59a0:	2100      	movs	r1, #0
   d59a2:	4b04      	ldr	r3, [pc, #16]	; (d59b4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d59a4:	7420      	strb	r0, [r4, #16]
   d59a6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d59a8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d59aa:	f7ff fa7b 	bl	d4ea4 <HAL_I2C_Init>

}
   d59ae:	4620      	mov	r0, r4
   d59b0:	bd10      	pop	{r4, pc}
   d59b2:	bf00      	nop
   d59b4:	000d8814 	.word	0x000d8814

000d59b8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d59b8:	2100      	movs	r1, #0
   d59ba:	7c00      	ldrb	r0, [r0, #16]
   d59bc:	f7ff ba6a 	b.w	d4e94 <HAL_I2C_Is_Enabled>

000d59c0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d59c0:	f7ff ba30 	b.w	d4e24 <HAL_Interrupts_Disable_All>

000d59c4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d59c4:	f7ff ba26 	b.w	d4e14 <HAL_Interrupts_Enable_All>

000d59c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d59c8:	4770      	bx	lr

000d59ca <_ZN9IPAddressD0Ev>:
   d59ca:	b510      	push	{r4, lr}
   d59cc:	2118      	movs	r1, #24
   d59ce:	4604      	mov	r4, r0
   d59d0:	f001 fbeb 	bl	d71aa <_ZdlPvj>
   d59d4:	4620      	mov	r0, r4
   d59d6:	bd10      	pop	{r4, pc}

000d59d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59da:	7d03      	ldrb	r3, [r0, #20]
   d59dc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59de:	b08d      	sub	sp, #52	; 0x34
   d59e0:	460e      	mov	r6, r1
   d59e2:	f100 0704 	add.w	r7, r0, #4
   d59e6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59ea:	d002      	beq.n	d59f2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d59ec:	f100 0508 	add.w	r5, r0, #8
   d59f0:	e018      	b.n	d5a24 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59f2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59f4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d59f6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d59fa:	232f      	movs	r3, #47	; 0x2f
   d59fc:	462a      	mov	r2, r5
   d59fe:	200a      	movs	r0, #10
   d5a00:	f7ff fa60 	bl	d4ec4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a04:	4628      	mov	r0, r5
   d5a06:	f002 faa6 	bl	d7f56 <strlen>
   d5a0a:	6833      	ldr	r3, [r6, #0]
   d5a0c:	4602      	mov	r2, r0
   d5a0e:	68db      	ldr	r3, [r3, #12]
   d5a10:	4629      	mov	r1, r5
   d5a12:	4630      	mov	r0, r6
   d5a14:	4798      	blx	r3
   d5a16:	e00f      	b.n	d5a38 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5a18:	b124      	cbz	r4, d5a24 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5a1a:	212e      	movs	r1, #46	; 0x2e
   d5a1c:	4630      	mov	r0, r6
   d5a1e:	f000 f9d7 	bl	d5dd0 <_ZN5Print5printEc>
   d5a22:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5a24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5a28:	220a      	movs	r2, #10
   d5a2a:	4630      	mov	r0, r6
   d5a2c:	f000 fa00 	bl	d5e30 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a30:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a32:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a34:	d1f0      	bne.n	d5a18 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a36:	4620      	mov	r0, r4
    }
    return n;
}
   d5a38:	b00d      	add	sp, #52	; 0x34
   d5a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a3c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5a3c:	b510      	push	{r4, lr}
   d5a3e:	4b05      	ldr	r3, [pc, #20]	; (d5a54 <_ZN9IPAddressC1Ev+0x18>)
   d5a40:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5a42:	2211      	movs	r2, #17
   d5a44:	f840 3b04 	str.w	r3, [r0], #4
   d5a48:	2100      	movs	r1, #0
   d5a4a:	f002 fa26 	bl	d7e9a <memset>
{
    clear();
}
   d5a4e:	4620      	mov	r0, r4
   d5a50:	bd10      	pop	{r4, pc}
   d5a52:	bf00      	nop
   d5a54:	000d883c 	.word	0x000d883c

000d5a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a58:	4603      	mov	r3, r0
   d5a5a:	4a07      	ldr	r2, [pc, #28]	; (d5a78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a5c:	b510      	push	{r4, lr}
   d5a5e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5a62:	f101 0210 	add.w	r2, r1, #16
   d5a66:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a6a:	f843 4b04 	str.w	r4, [r3], #4
   d5a6e:	4291      	cmp	r1, r2
   d5a70:	d1f9      	bne.n	d5a66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a72:	780a      	ldrb	r2, [r1, #0]
   d5a74:	701a      	strb	r2, [r3, #0]
}
   d5a76:	bd10      	pop	{r4, pc}
   d5a78:	000d883c 	.word	0x000d883c

000d5a7c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5a7c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5a7e:	2b04      	cmp	r3, #4
   d5a80:	d101      	bne.n	d5a86 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5a82:	6840      	ldr	r0, [r0, #4]
   d5a84:	e008      	b.n	d5a98 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5a86:	2b06      	cmp	r3, #6
   d5a88:	d10a      	bne.n	d5aa0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5a8a:	6843      	ldr	r3, [r0, #4]
   d5a8c:	b153      	cbz	r3, d5aa4 <_ZNK9IPAddresscvbEv+0x28>
   d5a8e:	6883      	ldr	r3, [r0, #8]
   d5a90:	b143      	cbz	r3, d5aa4 <_ZNK9IPAddresscvbEv+0x28>
   d5a92:	68c3      	ldr	r3, [r0, #12]
   d5a94:	b133      	cbz	r3, d5aa4 <_ZNK9IPAddresscvbEv+0x28>
   d5a96:	6900      	ldr	r0, [r0, #16]
   d5a98:	3000      	adds	r0, #0
   d5a9a:	bf18      	it	ne
   d5a9c:	2001      	movne	r0, #1
   d5a9e:	4770      	bx	lr
   d5aa0:	2000      	movs	r0, #0
   d5aa2:	4770      	bx	lr
   d5aa4:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5aa6:	4770      	bx	lr

000d5aa8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5aa8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5aaa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5aae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5ab2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5ab6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5aba:	2304      	movs	r3, #4
   d5abc:	6041      	str	r1, [r0, #4]
   d5abe:	7503      	strb	r3, [r0, #20]
   d5ac0:	bd10      	pop	{r4, pc}

000d5ac2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5ac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5ac4:	780d      	ldrb	r5, [r1, #0]
   d5ac6:	788b      	ldrb	r3, [r1, #2]
   d5ac8:	784a      	ldrb	r2, [r1, #1]
   d5aca:	78c9      	ldrb	r1, [r1, #3]
   d5acc:	9100      	str	r1, [sp, #0]
   d5ace:	4629      	mov	r1, r5
   d5ad0:	f7ff ffea 	bl	d5aa8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5ad4:	b003      	add	sp, #12
   d5ad6:	bd30      	pop	{r4, r5, pc}

000d5ad8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5ad8:	4b01      	ldr	r3, [pc, #4]	; (d5ae0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5ada:	4a02      	ldr	r2, [pc, #8]	; (d5ae4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5adc:	601a      	str	r2, [r3, #0]
   d5ade:	4770      	bx	lr
   d5ae0:	2003e380 	.word	0x2003e380
   d5ae4:	000d88fd 	.word	0x000d88fd

000d5ae8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ae8:	2200      	movs	r2, #0
   d5aea:	4611      	mov	r1, r2
   d5aec:	6840      	ldr	r0, [r0, #4]
   d5aee:	f7ff bbad 	b.w	d524c <network_listening>

000d5af2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5af2:	2200      	movs	r2, #0
   d5af4:	4611      	mov	r1, r2
   d5af6:	6840      	ldr	r0, [r0, #4]
   d5af8:	f7ff bbb8 	b.w	d526c <network_get_listen_timeout>

000d5afc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5afc:	2200      	movs	r2, #0
   d5afe:	6840      	ldr	r0, [r0, #4]
   d5b00:	f7ff bbac 	b.w	d525c <network_set_listen_timeout>

000d5b04 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b04:	2200      	movs	r2, #0
   d5b06:	f081 0101 	eor.w	r1, r1, #1
   d5b0a:	6840      	ldr	r0, [r0, #4]
   d5b0c:	f7ff bb96 	b.w	d523c <network_listen>

000d5b10 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b10:	2300      	movs	r3, #0
   d5b12:	461a      	mov	r2, r3
   d5b14:	4619      	mov	r1, r3
   d5b16:	6840      	ldr	r0, [r0, #4]
   d5b18:	f7ff bb88 	b.w	d522c <network_off>

000d5b1c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b1c:	2300      	movs	r3, #0
   d5b1e:	461a      	mov	r2, r3
   d5b20:	4619      	mov	r1, r3
   d5b22:	6840      	ldr	r0, [r0, #4]
   d5b24:	f7ff bb7a 	b.w	d521c <network_on>

000d5b28 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b28:	2200      	movs	r2, #0
   d5b2a:	4611      	mov	r1, r2
   d5b2c:	6840      	ldr	r0, [r0, #4]
   d5b2e:	f7ff bb5d 	b.w	d51ec <network_connecting>

000d5b32 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b32:	2200      	movs	r2, #0
   d5b34:	2102      	movs	r1, #2
   d5b36:	6840      	ldr	r0, [r0, #4]
   d5b38:	f7ff bb60 	b.w	d51fc <network_disconnect>

000d5b3c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b3c:	2300      	movs	r3, #0
   d5b3e:	461a      	mov	r2, r3
   d5b40:	6840      	ldr	r0, [r0, #4]
   d5b42:	f7ff bb4b 	b.w	d51dc <network_connect>

000d5b46 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5b46:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b48:	4605      	mov	r5, r0
   d5b4a:	b188      	cbz	r0, d5b70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b4c:	6804      	ldr	r4, [r0, #0]
   d5b4e:	b14c      	cbz	r4, d5b64 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5b50:	68a3      	ldr	r3, [r4, #8]
   d5b52:	b11b      	cbz	r3, d5b5c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b54:	2203      	movs	r2, #3
   d5b56:	4621      	mov	r1, r4
   d5b58:	4620      	mov	r0, r4
   d5b5a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b5c:	2110      	movs	r1, #16
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f001 fb23 	bl	d71aa <_ZdlPvj>
   d5b64:	4628      	mov	r0, r5
   d5b66:	2114      	movs	r1, #20
      }
   d5b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b6c:	f001 bb1d 	b.w	d71aa <_ZdlPvj>
   d5b70:	bd38      	pop	{r3, r4, r5, pc}

000d5b72 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5b72:	b110      	cbz	r0, d5b7a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5b74:	6803      	ldr	r3, [r0, #0]
   d5b76:	685b      	ldr	r3, [r3, #4]
   d5b78:	4718      	bx	r3
   d5b7a:	4770      	bx	lr

000d5b7c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5b7c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b7e:	6803      	ldr	r3, [r0, #0]
   d5b80:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5b82:	b1bb      	cbz	r3, d5bb4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5b84:	6858      	ldr	r0, [r3, #4]
   d5b86:	f7ff f8dd 	bl	d4d44 <os_thread_is_current>
   d5b8a:	b978      	cbnz	r0, d5bac <_ZN6ThreadD1Ev+0x30>
   d5b8c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5b8e:	7c5a      	ldrb	r2, [r3, #17]
   d5b90:	b912      	cbnz	r2, d5b98 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5b92:	6858      	ldr	r0, [r3, #4]
   d5b94:	f7ff f8de 	bl	d4d54 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5b98:	6823      	ldr	r3, [r4, #0]
   d5b9a:	6858      	ldr	r0, [r3, #4]
   d5b9c:	f7ff f8e2 	bl	d4d64 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ba0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ba2:	2300      	movs	r3, #0
   d5ba4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5ba6:	b128      	cbz	r0, d5bb4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5ba8:	f7ff ffcd 	bl	d5b46 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bac:	6820      	ldr	r0, [r4, #0]
   d5bae:	b108      	cbz	r0, d5bb4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5bb0:	f7ff ffc9 	bl	d5b46 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5bb8:	b538      	push	{r3, r4, r5, lr}
   d5bba:	4b0c      	ldr	r3, [pc, #48]	; (d5bec <_ZN5spark9MeshClassD1Ev+0x34>)
   d5bbc:	6003      	str	r3, [r0, #0]
   d5bbe:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bc0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5bc4:	b108      	cbz	r0, d5bca <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5bc6:	f7fe fa6c 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bca:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5bce:	b135      	cbz	r5, d5bde <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bd0:	4628      	mov	r0, r5
   d5bd2:	f7ff ffd3 	bl	d5b7c <_ZN6ThreadD1Ev>
   d5bd6:	2104      	movs	r1, #4
   d5bd8:	4628      	mov	r0, r5
   d5bda:	f001 fae6 	bl	d71aa <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bde:	68a0      	ldr	r0, [r4, #8]
   d5be0:	b108      	cbz	r0, d5be6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5be2:	f7ff ffc6 	bl	d5b72 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5be6:	4620      	mov	r0, r4
   d5be8:	bd38      	pop	{r3, r4, r5, pc}
   d5bea:	bf00      	nop
   d5bec:	000d8930 	.word	0x000d8930

000d5bf0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5bf0:	b538      	push	{r3, r4, r5, lr}
   d5bf2:	4c0d      	ldr	r4, [pc, #52]	; (d5c28 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5bf4:	4b0d      	ldr	r3, [pc, #52]	; (d5c2c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5bf6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5bf8:	2500      	movs	r5, #0
   d5bfa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5bfc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5c00:	6063      	str	r3, [r4, #4]
   d5c02:	60a5      	str	r5, [r4, #8]
   d5c04:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c08:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5c0c:	f7ff f8ba 	bl	d4d84 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5c10:	4b07      	ldr	r3, [pc, #28]	; (d5c30 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5c12:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5c16:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5c18:	4620      	mov	r0, r4
   d5c1a:	4a06      	ldr	r2, [pc, #24]	; (d5c34 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5c1c:	4906      	ldr	r1, [pc, #24]	; (d5c38 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5c22:	f001 babd 	b.w	d71a0 <__aeabi_atexit>
   d5c26:	bf00      	nop
   d5c28:	2003e384 	.word	0x2003e384
   d5c2c:	000d8964 	.word	0x000d8964
   d5c30:	000d8930 	.word	0x000d8930
   d5c34:	2003e1ec 	.word	0x2003e1ec
   d5c38:	000d5bb9 	.word	0x000d5bb9

000d5c3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c3c:	2300      	movs	r3, #0
   d5c3e:	461a      	mov	r2, r3
   d5c40:	6840      	ldr	r0, [r0, #4]
   d5c42:	f7ff bacb 	b.w	d51dc <network_connect>

000d5c46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c46:	2200      	movs	r2, #0
   d5c48:	2102      	movs	r1, #2
   d5c4a:	6840      	ldr	r0, [r0, #4]
   d5c4c:	f7ff bad6 	b.w	d51fc <network_disconnect>

000d5c50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c50:	2200      	movs	r2, #0
   d5c52:	4611      	mov	r1, r2
   d5c54:	6840      	ldr	r0, [r0, #4]
   d5c56:	f7ff bac9 	b.w	d51ec <network_connecting>

000d5c5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c5a:	2200      	movs	r2, #0
   d5c5c:	4611      	mov	r1, r2
   d5c5e:	6840      	ldr	r0, [r0, #4]
   d5c60:	f7ff bad4 	b.w	d520c <network_ready>

000d5c64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c64:	2300      	movs	r3, #0
   d5c66:	461a      	mov	r2, r3
   d5c68:	4619      	mov	r1, r3
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	f7ff bad6 	b.w	d521c <network_on>

000d5c70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c70:	2300      	movs	r3, #0
   d5c72:	461a      	mov	r2, r3
   d5c74:	4619      	mov	r1, r3
   d5c76:	6840      	ldr	r0, [r0, #4]
   d5c78:	f7ff bad8 	b.w	d522c <network_off>

000d5c7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c7c:	2200      	movs	r2, #0
   d5c7e:	f081 0101 	eor.w	r1, r1, #1
   d5c82:	6840      	ldr	r0, [r0, #4]
   d5c84:	f7ff bada 	b.w	d523c <network_listen>

000d5c88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c88:	2200      	movs	r2, #0
   d5c8a:	6840      	ldr	r0, [r0, #4]
   d5c8c:	f7ff bae6 	b.w	d525c <network_set_listen_timeout>

000d5c90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c90:	2200      	movs	r2, #0
   d5c92:	4611      	mov	r1, r2
   d5c94:	6840      	ldr	r0, [r0, #4]
   d5c96:	f7ff bae9 	b.w	d526c <network_get_listen_timeout>

000d5c9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c9a:	2200      	movs	r2, #0
   d5c9c:	4611      	mov	r1, r2
   d5c9e:	6840      	ldr	r0, [r0, #4]
   d5ca0:	f7ff bad4 	b.w	d524c <network_listening>

000d5ca4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ca8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5caa:	b095      	sub	sp, #84	; 0x54
   d5cac:	4616      	mov	r6, r2
   d5cae:	460d      	mov	r5, r1
   d5cb0:	4607      	mov	r7, r0
    IPAddress addr;
   d5cb2:	f7ff fec3 	bl	d5a3c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5cb6:	4621      	mov	r1, r4
   d5cb8:	2220      	movs	r2, #32
   d5cba:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5cbc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5cbe:	f002 f8ec 	bl	d7e9a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5cc2:	2340      	movs	r3, #64	; 0x40
   d5cc4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5cc6:	4621      	mov	r1, r4
   d5cc8:	466b      	mov	r3, sp
   d5cca:	aa0c      	add	r2, sp, #48	; 0x30
   d5ccc:	4630      	mov	r0, r6
   d5cce:	f7ff f921 	bl	d4f14 <netdb_getaddrinfo>
    if (!r) {
   d5cd2:	4604      	mov	r4, r0
   d5cd4:	2800      	cmp	r0, #0
   d5cd6:	d144      	bne.n	d5d62 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cd8:	4602      	mov	r2, r0
   d5cda:	2101      	movs	r1, #1
   d5cdc:	6868      	ldr	r0, [r5, #4]
   d5cde:	f7ff fa95 	bl	d520c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ce2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ce4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ce6:	4622      	mov	r2, r4
   d5ce8:	6868      	ldr	r0, [r5, #4]
   d5cea:	f7ff fa8f 	bl	d520c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cee:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cf0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5cf2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cf4:	2e00      	cmp	r6, #0
   d5cf6:	d034      	beq.n	d5d62 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5cf8:	2900      	cmp	r1, #0
   d5cfa:	d132      	bne.n	d5d62 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5cfc:	6873      	ldr	r3, [r6, #4]
   d5cfe:	2b02      	cmp	r3, #2
   d5d00:	d002      	beq.n	d5d08 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5d02:	2b0a      	cmp	r3, #10
   d5d04:	d009      	beq.n	d5d1a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5d06:	e02a      	b.n	d5d5e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5d08:	f1b8 0f00 	cmp.w	r8, #0
   d5d0c:	d027      	beq.n	d5d5e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d0e:	6971      	ldr	r1, [r6, #20]
   d5d10:	4638      	mov	r0, r7
   d5d12:	3104      	adds	r1, #4
   d5d14:	f7ff fed5 	bl	d5ac2 <_ZN9IPAddressaSEPKh>
   d5d18:	e020      	b.n	d5d5c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d1a:	f1b9 0f00 	cmp.w	r9, #0
   d5d1e:	d01e      	beq.n	d5d5e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d20:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d22:	2211      	movs	r2, #17
   d5d24:	a801      	add	r0, sp, #4
   d5d26:	f002 f8b8 	bl	d7e9a <memset>
                    a.v = 6;
   d5d2a:	2306      	movs	r3, #6
   d5d2c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d30:	ad01      	add	r5, sp, #4
   d5d32:	f104 0308 	add.w	r3, r4, #8
   d5d36:	3418      	adds	r4, #24
   d5d38:	6818      	ldr	r0, [r3, #0]
   d5d3a:	6859      	ldr	r1, [r3, #4]
   d5d3c:	462a      	mov	r2, r5
   d5d3e:	c203      	stmia	r2!, {r0, r1}
   d5d40:	3308      	adds	r3, #8
   d5d42:	42a3      	cmp	r3, r4
   d5d44:	4615      	mov	r5, r2
   d5d46:	d1f7      	bne.n	d5d38 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5d48:	a901      	add	r1, sp, #4
   d5d4a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5d4c:	ad07      	add	r5, sp, #28
   d5d4e:	f7ff fe83 	bl	d5a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d54:	1d3c      	adds	r4, r7, #4
   d5d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d58:	682b      	ldr	r3, [r5, #0]
   d5d5a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5d5c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d5e:	69f6      	ldr	r6, [r6, #28]
   d5d60:	e7c8      	b.n	d5cf4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d62:	9800      	ldr	r0, [sp, #0]
   d5d64:	f7ff f8ce 	bl	d4f04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d68:	4638      	mov	r0, r7
   d5d6a:	b015      	add	sp, #84	; 0x54
   d5d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d70:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d72:	4a03      	ldr	r2, [pc, #12]	; (d5d80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d74:	601a      	str	r2, [r3, #0]
   d5d76:	2200      	movs	r2, #0
   d5d78:	605a      	str	r2, [r3, #4]
   d5d7a:	4770      	bx	lr
   d5d7c:	2003e554 	.word	0x2003e554
   d5d80:	000d8964 	.word	0x000d8964

000d5d84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d86:	4606      	mov	r6, r0
   d5d88:	460d      	mov	r5, r1
   d5d8a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5d8c:	2400      	movs	r4, #0
  while (size--) {
   d5d8e:	42bd      	cmp	r5, r7
   d5d90:	d00c      	beq.n	d5dac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d92:	6833      	ldr	r3, [r6, #0]
   d5d94:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d98:	689b      	ldr	r3, [r3, #8]
   d5d9a:	4630      	mov	r0, r6
   d5d9c:	4798      	blx	r3
     if (chunk>=0)
   d5d9e:	2800      	cmp	r0, #0
   d5da0:	db01      	blt.n	d5da6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5da2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5da4:	e7f3      	b.n	d5d8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5da6:	2c00      	cmp	r4, #0
   d5da8:	bf08      	it	eq
   d5daa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5dac:	4620      	mov	r0, r4
   d5dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5db0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5db0:	b570      	push	{r4, r5, r6, lr}
   d5db2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5db4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5db6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5db8:	b149      	cbz	r1, d5dce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5dba:	f002 f8cc 	bl	d7f56 <strlen>
   d5dbe:	682b      	ldr	r3, [r5, #0]
   d5dc0:	4602      	mov	r2, r0
   d5dc2:	4621      	mov	r1, r4
   d5dc4:	4628      	mov	r0, r5
   d5dc6:	68db      	ldr	r3, [r3, #12]
    }
   d5dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5dcc:	4718      	bx	r3
    }
   d5dce:	bd70      	pop	{r4, r5, r6, pc}

000d5dd0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5dd0:	6803      	ldr	r3, [r0, #0]
   d5dd2:	689b      	ldr	r3, [r3, #8]
   d5dd4:	4718      	bx	r3

000d5dd6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5dd6:	b530      	push	{r4, r5, lr}
   d5dd8:	b08b      	sub	sp, #44	; 0x2c
   d5dda:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5ddc:	2100      	movs	r1, #0
   d5dde:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5de2:	2a01      	cmp	r2, #1
   d5de4:	bf98      	it	ls
   d5de6:	220a      	movls	r2, #10
   d5de8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5dec:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5df0:	fb05 3312 	mls	r3, r5, r2, r3
   d5df4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5df8:	2b09      	cmp	r3, #9
   d5dfa:	bf94      	ite	ls
   d5dfc:	3330      	addls	r3, #48	; 0x30
   d5dfe:	3337      	addhi	r3, #55	; 0x37
   d5e00:	b2db      	uxtb	r3, r3
   d5e02:	4621      	mov	r1, r4
   d5e04:	f804 3901 	strb.w	r3, [r4], #-1
   d5e08:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5e0a:	2d00      	cmp	r5, #0
   d5e0c:	d1ee      	bne.n	d5dec <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5e0e:	f7ff ffcf 	bl	d5db0 <_ZN5Print5writeEPKc>
}
   d5e12:	b00b      	add	sp, #44	; 0x2c
   d5e14:	bd30      	pop	{r4, r5, pc}

000d5e16 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5e16:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5e18:	b92a      	cbnz	r2, d5e26 <_ZN5Print5printEmi+0x10>
   d5e1a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5e20:	689b      	ldr	r3, [r3, #8]
   d5e22:	b2c9      	uxtb	r1, r1
   d5e24:	4718      	bx	r3
  else return printNumber(n, base);
   d5e26:	b2d2      	uxtb	r2, r2
}
   d5e28:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5e2c:	f7ff bfd3 	b.w	d5dd6 <_ZN5Print11printNumberEmh>

000d5e30 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5e30:	f7ff bff1 	b.w	d5e16 <_ZN5Print5printEmi>

000d5e34 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e34:	b510      	push	{r4, lr}
   d5e36:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e38:	f7fe feda 	bl	d4bf0 <_ZNSt14_Function_baseD1Ev>
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	bd10      	pop	{r4, pc}

000d5e40 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e40:	4803      	ldr	r0, [pc, #12]	; (d5e50 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e42:	4a04      	ldr	r2, [pc, #16]	; (d5e54 <_GLOBAL__sub_I_RGB+0x14>)
   d5e44:	4904      	ldr	r1, [pc, #16]	; (d5e58 <_GLOBAL__sub_I_RGB+0x18>)
   d5e46:	2300      	movs	r3, #0
   d5e48:	6083      	str	r3, [r0, #8]
   d5e4a:	f001 b9a9 	b.w	d71a0 <__aeabi_atexit>
   d5e4e:	bf00      	nop
   d5e50:	2003e55c 	.word	0x2003e55c
   d5e54:	2003e1ec 	.word	0x2003e1ec
   d5e58:	000d5e35 	.word	0x000d5e35

000d5e5c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5e5c:	4770      	bx	lr

000d5e5e <_ZN8SPIClassD0Ev>:
   d5e5e:	b510      	push	{r4, lr}
   d5e60:	2110      	movs	r1, #16
   d5e62:	4604      	mov	r4, r0
   d5e64:	f001 f9a1 	bl	d71aa <_ZdlPvj>
   d5e68:	4620      	mov	r0, r4
   d5e6a:	bd10      	pop	{r4, pc}

000d5e6c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5e6c:	b570      	push	{r4, r5, r6, lr}
   d5e6e:	4b08      	ldr	r3, [pc, #32]	; (d5e90 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5e70:	6003      	str	r3, [r0, #0]
   d5e72:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5e74:	2500      	movs	r5, #0
   d5e76:	460e      	mov	r6, r1
   d5e78:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5e7c:	f7fe ff7a 	bl	d4d74 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5e80:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5e82:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5e84:	f7ff f896 	bl	d4fb4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5e88:	60a5      	str	r5, [r4, #8]
}
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	bd70      	pop	{r4, r5, r6, pc}
   d5e8e:	bf00      	nop
   d5e90:	000d8998 	.word	0x000d8998

000d5e94 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5e94:	7900      	ldrb	r0, [r0, #4]
   d5e96:	f7ff b895 	b.w	d4fc4 <HAL_SPI_Is_Enabled>

000d5e9a <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e9a:	2300      	movs	r3, #0
   d5e9c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e9e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ea0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ea2:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d5ea4:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d5ea6:	680c      	ldr	r4, [r1, #0]
   d5ea8:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d5eaa:	684c      	ldr	r4, [r1, #4]
   d5eac:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d5eae:	688c      	ldr	r4, [r1, #8]
   d5eb0:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d5eb2:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d5eb4:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5eb6:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d5eb8:	bd10      	pop	{r4, pc}

000d5eba <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5eba:	b510      	push	{r4, lr}
   d5ebc:	4604      	mov	r4, r0
{
	free(buffer);
   d5ebe:	6800      	ldr	r0, [r0, #0]
   d5ec0:	f7ff f9e4 	bl	d528c <free>
}
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	bd10      	pop	{r4, pc}

000d5ec8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5ec8:	b510      	push	{r4, lr}
   d5eca:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ecc:	6800      	ldr	r0, [r0, #0]
   d5ece:	b108      	cbz	r0, d5ed4 <_ZN6String10invalidateEv+0xc>
   d5ed0:	f7ff f9dc 	bl	d528c <free>
	buffer = NULL;
   d5ed4:	2300      	movs	r3, #0
   d5ed6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5ed8:	60a3      	str	r3, [r4, #8]
   d5eda:	6063      	str	r3, [r4, #4]
   d5edc:	bd10      	pop	{r4, pc}

000d5ede <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5ede:	b538      	push	{r3, r4, r5, lr}
   d5ee0:	4604      	mov	r4, r0
   d5ee2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5ee4:	6800      	ldr	r0, [r0, #0]
   d5ee6:	3101      	adds	r1, #1
   d5ee8:	f7ff f9d8 	bl	d529c <realloc>
	if (newbuffer) {
   d5eec:	b110      	cbz	r0, d5ef4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5eee:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5ef2:	2001      	movs	r0, #1
	}
	return 0;
}
   d5ef4:	bd38      	pop	{r3, r4, r5, pc}

000d5ef6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5ef6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5ef8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5efa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5efc:	b113      	cbz	r3, d5f04 <_ZN6String7reserveEj+0xe>
   d5efe:	6843      	ldr	r3, [r0, #4]
   d5f00:	428b      	cmp	r3, r1
   d5f02:	d207      	bcs.n	d5f14 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5f04:	4620      	mov	r0, r4
   d5f06:	f7ff ffea 	bl	d5ede <_ZN6String12changeBufferEj>
   d5f0a:	b120      	cbz	r0, d5f16 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5f0c:	68a3      	ldr	r3, [r4, #8]
   d5f0e:	b90b      	cbnz	r3, d5f14 <_ZN6String7reserveEj+0x1e>
   d5f10:	6822      	ldr	r2, [r4, #0]
   d5f12:	7013      	strb	r3, [r2, #0]
   d5f14:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5f16:	bd10      	pop	{r4, pc}

000d5f18 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f18:	b570      	push	{r4, r5, r6, lr}
   d5f1a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5f1c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f1e:	4604      	mov	r4, r0
   d5f20:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5f22:	f7ff ffe8 	bl	d5ef6 <_ZN6String7reserveEj>
   d5f26:	b918      	cbnz	r0, d5f30 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5f28:	4620      	mov	r0, r4
   d5f2a:	f7ff ffcd 	bl	d5ec8 <_ZN6String10invalidateEv>
		return *this;
   d5f2e:	e009      	b.n	d5f44 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5f30:	462a      	mov	r2, r5
   d5f32:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5f34:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f36:	6820      	ldr	r0, [r4, #0]
   d5f38:	f001 ffa4 	bl	d7e84 <memcpy>
	buffer[len] = 0;
   d5f3c:	6822      	ldr	r2, [r4, #0]
   d5f3e:	68a3      	ldr	r3, [r4, #8]
   d5f40:	2100      	movs	r1, #0
   d5f42:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5f44:	4620      	mov	r0, r4
   d5f46:	bd70      	pop	{r4, r5, r6, pc}

000d5f48 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5f48:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f4a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5f4c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f4e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5f50:	6043      	str	r3, [r0, #4]
	len = 0;
   d5f52:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f54:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5f56:	460d      	mov	r5, r1
   d5f58:	b139      	cbz	r1, d5f6a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5f5a:	4608      	mov	r0, r1
   d5f5c:	f001 fffb 	bl	d7f56 <strlen>
   d5f60:	4629      	mov	r1, r5
   d5f62:	4602      	mov	r2, r0
   d5f64:	4620      	mov	r0, r4
   d5f66:	f7ff ffd7 	bl	d5f18 <_ZN6String4copyEPKcj>
}
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	bd38      	pop	{r3, r4, r5, pc}

000d5f6e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5f6e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5f70:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5f72:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5f74:	b912      	cbnz	r2, d5f7c <_ZNK6String6equalsEPKc+0xe>
   d5f76:	b919      	cbnz	r1, d5f80 <_ZNK6String6equalsEPKc+0x12>
   d5f78:	2001      	movs	r0, #1
   d5f7a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5f7c:	b911      	cbnz	r1, d5f84 <_ZNK6String6equalsEPKc+0x16>
   d5f7e:	6803      	ldr	r3, [r0, #0]
   d5f80:	7818      	ldrb	r0, [r3, #0]
   d5f82:	e002      	b.n	d5f8a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5f84:	6800      	ldr	r0, [r0, #0]
   d5f86:	f001 ffb9 	bl	d7efc <strcmp>
   d5f8a:	fab0 f080 	clz	r0, r0
   d5f8e:	0940      	lsrs	r0, r0, #5
}
   d5f90:	bd08      	pop	{r3, pc}
	...

000d5f94 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5f94:	4b04      	ldr	r3, [pc, #16]	; (d5fa8 <_GLOBAL__sub_I_System+0x14>)
   d5f96:	2000      	movs	r0, #0
   d5f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f9c:	7018      	strb	r0, [r3, #0]
   d5f9e:	8058      	strh	r0, [r3, #2]
   d5fa0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5fa2:	f7ff b8a7 	b.w	d50f4 <set_system_mode>
   d5fa6:	bf00      	nop
   d5fa8:	2003e56c 	.word	0x2003e56c

000d5fac <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fae:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fb0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5fb2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fb6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5fb8:	2201      	movs	r2, #1
   d5fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5fbe:	4621      	mov	r1, r4
   d5fc0:	47a8      	blx	r5
}
   d5fc2:	b003      	add	sp, #12
   d5fc4:	bd30      	pop	{r4, r5, pc}

000d5fc6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5fc6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5fc8:	6803      	ldr	r3, [r0, #0]
   d5fca:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5fd0:	46a4      	mov	ip, r4
}
   d5fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5fd6:	4760      	bx	ip

000d5fd8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fda:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5fdc:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5fde:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5fe2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5fe4:	4621      	mov	r1, r4
   d5fe6:	4613      	mov	r3, r2
   d5fe8:	2201      	movs	r2, #1
   d5fea:	47a8      	blx	r5
}
   d5fec:	b003      	add	sp, #12
   d5fee:	bd30      	pop	{r4, r5, pc}

000d5ff0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5ff0:	4770      	bx	lr

000d5ff2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5ff2:	b538      	push	{r3, r4, r5, lr}
   d5ff4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5ff6:	681a      	ldr	r2, [r3, #0]
   d5ff8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5ffa:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5ffc:	da05      	bge.n	d600a <_ZN9TCPClient9connectedEv+0x18>
   d5ffe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6002:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6006:	429a      	cmp	r2, r3
   d6008:	d001      	beq.n	d600e <_ZN9TCPClient9connectedEv+0x1c>
   d600a:	2501      	movs	r5, #1
   d600c:	e00b      	b.n	d6026 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d600e:	6803      	ldr	r3, [r0, #0]
   d6010:	691b      	ldr	r3, [r3, #16]
   d6012:	4798      	blx	r3
   d6014:	2800      	cmp	r0, #0
   d6016:	bf14      	ite	ne
   d6018:	2501      	movne	r5, #1
   d601a:	2500      	moveq	r5, #0
        if (!rv) {
   d601c:	d103      	bne.n	d6026 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d601e:	6823      	ldr	r3, [r4, #0]
   d6020:	4620      	mov	r0, r4
   d6022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6024:	4798      	blx	r3
        }
    }
    return rv;
}
   d6026:	4628      	mov	r0, r5
   d6028:	bd38      	pop	{r3, r4, r5, pc}

000d602a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d602a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d602c:	6818      	ldr	r0, [r3, #0]
}
   d602e:	43c0      	mvns	r0, r0
   d6030:	0fc0      	lsrs	r0, r0, #31
   d6032:	4770      	bx	lr

000d6034 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6034:	4770      	bx	lr

000d6036 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6036:	2000      	movs	r0, #0
   d6038:	4770      	bx	lr

000d603a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d603a:	b510      	push	{r4, lr}
   d603c:	2114      	movs	r1, #20
   d603e:	4604      	mov	r4, r0
   d6040:	f001 f8b3 	bl	d71aa <_ZdlPvj>
   d6044:	4620      	mov	r0, r4
   d6046:	bd10      	pop	{r4, pc}

000d6048 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6048:	f7fe b829 	b.w	d409e <_ZdlPv>

000d604c <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d604c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6050:	4698      	mov	r8, r3
    stop();
   d6052:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6054:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6058:	460c      	mov	r4, r1
   d605a:	4606      	mov	r6, r0
   d605c:	4617      	mov	r7, r2
    stop();
   d605e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6060:	ab12      	add	r3, sp, #72	; 0x48
   d6062:	2500      	movs	r5, #0
   d6064:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6068:	462a      	mov	r2, r5
   d606a:	4629      	mov	r1, r5
   d606c:	4620      	mov	r0, r4
   d606e:	f7fe ff51 	bl	d4f14 <netdb_getaddrinfo>
   d6072:	2800      	cmp	r0, #0
   d6074:	db3a      	blt.n	d60ec <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6076:	9b00      	ldr	r3, [sp, #0]
   d6078:	2b00      	cmp	r3, #0
   d607a:	d039      	beq.n	d60f0 <_ZN9TCPClient7connectEPKctm+0xa4>
   d607c:	695b      	ldr	r3, [r3, #20]
   d607e:	2b00      	cmp	r3, #0
   d6080:	d036      	beq.n	d60f0 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d6082:	a806      	add	r0, sp, #24
   d6084:	f7ff fcda 	bl	d5a3c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6088:	9b00      	ldr	r3, [sp, #0]
   d608a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d608c:	7863      	ldrb	r3, [r4, #1]
   d608e:	2b02      	cmp	r3, #2
   d6090:	d101      	bne.n	d6096 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6092:	1d21      	adds	r1, r4, #4
   d6094:	e013      	b.n	d60be <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6096:	2b0a      	cmp	r3, #10
   d6098:	d114      	bne.n	d60c4 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d609a:	2211      	movs	r2, #17
   d609c:	4629      	mov	r1, r5
   d609e:	a801      	add	r0, sp, #4
   d60a0:	f001 fefb 	bl	d7e9a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d60a4:	68a3      	ldr	r3, [r4, #8]
   d60a6:	bb33      	cbnz	r3, d60f6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d60a8:	68e3      	ldr	r3, [r4, #12]
   d60aa:	bb23      	cbnz	r3, d60f6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d60ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d60b0:	6925      	ldr	r5, [r4, #16]
   d60b2:	f7fe ff0f 	bl	d4ed4 <inet_htonl>
   d60b6:	4285      	cmp	r5, r0
   d60b8:	d11d      	bne.n	d60f6 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d60ba:	f104 0114 	add.w	r1, r4, #20
   d60be:	a806      	add	r0, sp, #24
   d60c0:	f7ff fcff 	bl	d5ac2 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d60c4:	a806      	add	r0, sp, #24
   d60c6:	f7ff fcd9 	bl	d5a7c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d60ca:	b188      	cbz	r0, d60f0 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d60cc:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d60ce:	ad07      	add	r5, sp, #28
   d60d0:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d60d4:	4b18      	ldr	r3, [pc, #96]	; (d6138 <_ZN9TCPClient7connectEPKctm+0xec>)
   d60d6:	930c      	str	r3, [sp, #48]	; 0x30
   d60d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60da:	ac0d      	add	r4, sp, #52	; 0x34
   d60dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60de:	682b      	ldr	r3, [r5, #0]
   d60e0:	7023      	strb	r3, [r4, #0]
   d60e2:	463a      	mov	r2, r7
   d60e4:	4643      	mov	r3, r8
   d60e6:	a90c      	add	r1, sp, #48	; 0x30
   d60e8:	4630      	mov	r0, r6
   d60ea:	47c8      	blx	r9
   d60ec:	4604      	mov	r4, r0
   d60ee:	e01c      	b.n	d612a <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d60f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d60f4:	e019      	b.n	d612a <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60f6:	f104 0308 	add.w	r3, r4, #8
   d60fa:	ad01      	add	r5, sp, #4
   d60fc:	3418      	adds	r4, #24
   d60fe:	6818      	ldr	r0, [r3, #0]
   d6100:	6859      	ldr	r1, [r3, #4]
   d6102:	462a      	mov	r2, r5
   d6104:	c203      	stmia	r2!, {r0, r1}
   d6106:	3308      	adds	r3, #8
   d6108:	42a3      	cmp	r3, r4
   d610a:	4615      	mov	r5, r2
   d610c:	d1f7      	bne.n	d60fe <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d610e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6110:	a901      	add	r1, sp, #4
   d6112:	a80c      	add	r0, sp, #48	; 0x30
   d6114:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6116:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d611a:	f7ff fc9d 	bl	d5a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d611e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6120:	ac07      	add	r4, sp, #28
   d6122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6124:	682b      	ldr	r3, [r5, #0]
   d6126:	7023      	strb	r3, [r4, #0]
   d6128:	e7cc      	b.n	d60c4 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d612a:	9800      	ldr	r0, [sp, #0]
   d612c:	f7fe feea 	bl	d4f04 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d6130:	4620      	mov	r0, r4
   d6132:	b013      	add	sp, #76	; 0x4c
   d6134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6138:	000d883c 	.word	0x000d883c

000d613c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d613c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d613e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6140:	2200      	movs	r2, #0
   d6142:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6144:	9202      	str	r2, [sp, #8]
   d6146:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6148:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d614a:	4604      	mov	r4, r0
   d614c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d614e:	d008      	beq.n	d6162 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6154:	fbb3 f1f2 	udiv	r1, r3, r2
   d6158:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d615a:	fb02 3111 	mls	r1, r2, r1, r3
   d615e:	434a      	muls	r2, r1
   d6160:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6162:	6960      	ldr	r0, [r4, #20]
   d6164:	2308      	movs	r3, #8
   d6166:	9300      	str	r3, [sp, #0]
   d6168:	f241 0205 	movw	r2, #4101	; 0x1005
   d616c:	446b      	add	r3, sp
   d616e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6172:	6800      	ldr	r0, [r0, #0]
   d6174:	f7fe fede 	bl	d4f34 <sock_setsockopt>
    if (ret < 0) {
   d6178:	2800      	cmp	r0, #0
   d617a:	db08      	blt.n	d618e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d617c:	6960      	ldr	r0, [r4, #20]
   d617e:	2300      	movs	r3, #0
   d6180:	4632      	mov	r2, r6
   d6182:	4629      	mov	r1, r5
   d6184:	6800      	ldr	r0, [r0, #0]
   d6186:	f7fe fefd 	bl	d4f84 <sock_send>
    if (ret < 0) {
   d618a:	2800      	cmp	r0, #0
   d618c:	da04      	bge.n	d6198 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d618e:	f7ff f8ad 	bl	d52ec <__errno>
   d6192:	6803      	ldr	r3, [r0, #0]
   d6194:	6063      	str	r3, [r4, #4]
   d6196:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6198:	b004      	add	sp, #16
   d619a:	bd70      	pop	{r4, r5, r6, pc}

000d619c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d619c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d619e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d61a0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d61a2:	689b      	ldr	r3, [r3, #8]
   d61a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d61a6:	68a3      	ldr	r3, [r4, #8]
   d61a8:	3b01      	subs	r3, #1
   d61aa:	60a3      	str	r3, [r4, #8]
   d61ac:	b92b      	cbnz	r3, d61ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d61ae:	6823      	ldr	r3, [r4, #0]
   d61b0:	4620      	mov	r0, r4
   d61b2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d61b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d61b8:	4718      	bx	r3
   d61ba:	bd10      	pop	{r4, pc}

000d61bc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d61bc:	b570      	push	{r4, r5, r6, lr}
   d61be:	4604      	mov	r4, r0
   d61c0:	694d      	ldr	r5, [r1, #20]
   d61c2:	4b05      	ldr	r3, [pc, #20]	; (d61d8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d61c4:	f844 3b04 	str.w	r3, [r4], #4
   d61c8:	358c      	adds	r5, #140	; 0x8c
   d61ca:	4606      	mov	r6, r0
   d61cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61d0:	682b      	ldr	r3, [r5, #0]
   d61d2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d61d4:	4630      	mov	r0, r6
   d61d6:	bd70      	pop	{r4, r5, r6, pc}
   d61d8:	000d883c 	.word	0x000d883c

000d61dc <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d61dc:	b510      	push	{r4, lr}
   d61de:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d61e0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d61e4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d61e8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d61ea:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d61ec:	d005      	beq.n	d61fa <_ZN9TCPClient4peekEv+0x1e>
   d61ee:	6962      	ldr	r2, [r4, #20]
   d61f0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d61f4:	4413      	add	r3, r2
   d61f6:	7918      	ldrb	r0, [r3, #4]
   d61f8:	bd10      	pop	{r4, pc}
   d61fa:	6803      	ldr	r3, [r0, #0]
   d61fc:	691b      	ldr	r3, [r3, #16]
   d61fe:	4798      	blx	r3
   d6200:	2800      	cmp	r0, #0
   d6202:	d1f4      	bne.n	d61ee <_ZN9TCPClient4peekEv+0x12>
   d6204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6208:	bd10      	pop	{r4, pc}

000d620a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d620a:	b510      	push	{r4, lr}
   d620c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d620e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6212:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6216:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6218:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d621a:	d008      	beq.n	d622e <_ZN9TCPClient4readEv+0x24>
   d621c:	6962      	ldr	r2, [r4, #20]
   d621e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6222:	1c59      	adds	r1, r3, #1
   d6224:	4413      	add	r3, r2
   d6226:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d622a:	7918      	ldrb	r0, [r3, #4]
   d622c:	bd10      	pop	{r4, pc}
   d622e:	6803      	ldr	r3, [r0, #0]
   d6230:	691b      	ldr	r3, [r3, #16]
   d6232:	4798      	blx	r3
   d6234:	2800      	cmp	r0, #0
   d6236:	d1f1      	bne.n	d621c <_ZN9TCPClient4readEv+0x12>
   d6238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d623c:	bd10      	pop	{r4, pc}

000d623e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d623e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6240:	6943      	ldr	r3, [r0, #20]
   d6242:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6244:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6248:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d624c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d624e:	4605      	mov	r5, r0
   d6250:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6252:	d106      	bne.n	d6262 <_ZN9TCPClient4readEPhj+0x24>
   d6254:	6803      	ldr	r3, [r0, #0]
   d6256:	691b      	ldr	r3, [r3, #16]
   d6258:	4798      	blx	r3
   d625a:	b910      	cbnz	r0, d6262 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d625c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d6260:	e014      	b.n	d628c <_ZN9TCPClient4readEPhj+0x4e>
   d6262:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6264:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6268:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d626c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d626e:	42bc      	cmp	r4, r7
   d6270:	bf28      	it	cs
   d6272:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6274:	4419      	add	r1, r3
   d6276:	4622      	mov	r2, r4
   d6278:	3104      	adds	r1, #4
   d627a:	4630      	mov	r0, r6
   d627c:	f001 fe02 	bl	d7e84 <memcpy>
   d6280:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6282:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6286:	4423      	add	r3, r4
   d6288:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d628c:	4620      	mov	r0, r4
   d628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6290 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6290:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6292:	2300      	movs	r3, #0
   d6294:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6298:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d629a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d629e:	4770      	bx	lr

000d62a0 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62a4:	4698      	mov	r8, r3
    stop();
   d62a6:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62a8:	460d      	mov	r5, r1
   d62aa:	b08a      	sub	sp, #40	; 0x28
    stop();
   d62ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62ae:	4606      	mov	r6, r0
   d62b0:	4617      	mov	r7, r2
    stop();
   d62b2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d62b4:	7d2b      	ldrb	r3, [r5, #20]
   d62b6:	6974      	ldr	r4, [r6, #20]
   d62b8:	2b04      	cmp	r3, #4
   d62ba:	bf0c      	ite	eq
   d62bc:	2002      	moveq	r0, #2
   d62be:	200a      	movne	r0, #10
   d62c0:	2206      	movs	r2, #6
   d62c2:	2101      	movs	r1, #1
   d62c4:	f7fe fe6e 	bl	d4fa4 <sock_socket>
   d62c8:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d62ca:	6973      	ldr	r3, [r6, #20]
   d62cc:	681c      	ldr	r4, [r3, #0]
   d62ce:	2c00      	cmp	r4, #0
   d62d0:	db5b      	blt.n	d638a <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d62d2:	4630      	mov	r0, r6
   d62d4:	f7ff ffdc 	bl	d6290 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d62d8:	f1b8 0f00 	cmp.w	r8, #0
   d62dc:	d017      	beq.n	d630e <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d62de:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d62e0:	a903      	add	r1, sp, #12
   d62e2:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d62e6:	9303      	str	r3, [sp, #12]
   d62e8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d62ec:	f7fe fde2 	bl	d4eb4 <if_index_to_name>
   d62f0:	2800      	cmp	r0, #0
   d62f2:	db49      	blt.n	d6388 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d62f4:	6970      	ldr	r0, [r6, #20]
   d62f6:	2306      	movs	r3, #6
   d62f8:	9300      	str	r3, [sp, #0]
   d62fa:	f241 020b 	movw	r2, #4107	; 0x100b
   d62fe:	ab03      	add	r3, sp, #12
   d6300:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6304:	6800      	ldr	r0, [r0, #0]
   d6306:	f7fe fe15 	bl	d4f34 <sock_setsockopt>
   d630a:	2800      	cmp	r0, #0
   d630c:	db3c      	blt.n	d6388 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d630e:	241c      	movs	r4, #28
   d6310:	4622      	mov	r2, r4
   d6312:	2100      	movs	r1, #0
   d6314:	a803      	add	r0, sp, #12
   d6316:	f001 fdc0 	bl	d7e9a <memset>
    if (ip.version() == 4) {
   d631a:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d631c:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6320:	2b04      	cmp	r3, #4
   d6322:	d10c      	bne.n	d633e <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6324:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6326:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6328:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d632c:	f7fe fde2 	bl	d4ef4 <inet_htons>
   d6330:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6334:	6868      	ldr	r0, [r5, #4]
   d6336:	f7fe fdcd 	bl	d4ed4 <inet_htonl>
   d633a:	9004      	str	r0, [sp, #16]
   d633c:	e013      	b.n	d6366 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d633e:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6340:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6342:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6346:	f7fe fdd5 	bl	d4ef4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d634a:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d634c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6350:	1d2b      	adds	r3, r5, #4
   d6352:	f105 0714 	add.w	r7, r5, #20
   d6356:	6818      	ldr	r0, [r3, #0]
   d6358:	6859      	ldr	r1, [r3, #4]
   d635a:	4622      	mov	r2, r4
   d635c:	c203      	stmia	r2!, {r0, r1}
   d635e:	3308      	adds	r3, #8
   d6360:	42bb      	cmp	r3, r7
   d6362:	4614      	mov	r4, r2
   d6364:	d1f7      	bne.n	d6356 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d6366:	6973      	ldr	r3, [r6, #20]
   d6368:	221c      	movs	r2, #28
   d636a:	a903      	add	r1, sp, #12
   d636c:	6818      	ldr	r0, [r3, #0]
   d636e:	f7fe fdf1 	bl	d4f54 <sock_connect>
   d6372:	2800      	cmp	r0, #0
   d6374:	db08      	blt.n	d6388 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d6376:	1d2c      	adds	r4, r5, #4
   d6378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d637a:	6976      	ldr	r6, [r6, #20]
   d637c:	368c      	adds	r6, #140	; 0x8c
   d637e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6380:	6823      	ldr	r3, [r4, #0]
   d6382:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d6384:	2401      	movs	r4, #1
   d6386:	e004      	b.n	d6392 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d6388:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d638a:	6833      	ldr	r3, [r6, #0]
   d638c:	4630      	mov	r0, r6
   d638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6390:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d6392:	4620      	mov	r0, r4
   d6394:	b00a      	add	sp, #40	; 0x28
   d6396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d639a <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d639a:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d639c:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d639e:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d63a0:	6818      	ldr	r0, [r3, #0]
   d63a2:	2800      	cmp	r0, #0
   d63a4:	db01      	blt.n	d63aa <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d63a6:	f7fe fdcd 	bl	d4f44 <sock_close>
   d63aa:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d63ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d63b0:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d63b2:	6960      	ldr	r0, [r4, #20]
   d63b4:	2211      	movs	r2, #17
   d63b6:	2100      	movs	r1, #0
   d63b8:	308c      	adds	r0, #140	; 0x8c
   d63ba:	f001 fd6e 	bl	d7e9a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d63be:	4620      	mov	r0, r4
}
   d63c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d63c4:	f7ff bf64 	b.w	d6290 <_ZN9TCPClient12flush_bufferEv>

000d63c8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d63c8:	b530      	push	{r4, r5, lr}
   d63ca:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d63cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d63d0:	b08b      	sub	sp, #44	; 0x2c
   d63d2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d63d4:	b11b      	cbz	r3, d63de <_ZN9TCPClient9availableEv+0x16>
   d63d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d63da:	429a      	cmp	r2, r3
   d63dc:	d040      	beq.n	d6460 <_ZN9TCPClient9availableEv+0x98>
   d63de:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d63e0:	6818      	ldr	r0, [r3, #0]
   d63e2:	2800      	cmp	r0, #0
   d63e4:	db3f      	blt.n	d6466 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d63e6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d63ea:	2d7f      	cmp	r5, #127	; 0x7f
   d63ec:	d83b      	bhi.n	d6466 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d63ee:	1d19      	adds	r1, r3, #4
   d63f0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d63f4:	2308      	movs	r3, #8
   d63f6:	4429      	add	r1, r5
   d63f8:	f7fe fdb4 	bl	d4f64 <sock_recv>
            if (ret > 0) {
   d63fc:	2800      	cmp	r0, #0
   d63fe:	dd0c      	ble.n	d641a <_ZN9TCPClient9availableEv+0x52>
   d6400:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6402:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6406:	b90a      	cbnz	r2, d640c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6408:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d640c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d640e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6412:	4418      	add	r0, r3
   d6414:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6418:	e025      	b.n	d6466 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d641a:	f7fe ff67 	bl	d52ec <__errno>
   d641e:	6803      	ldr	r3, [r0, #0]
   d6420:	2b0b      	cmp	r3, #11
   d6422:	d020      	beq.n	d6466 <_ZN9TCPClient9availableEv+0x9e>
   d6424:	f7fe ff62 	bl	d52ec <__errno>
   d6428:	6803      	ldr	r3, [r0, #0]
   d642a:	2b0b      	cmp	r3, #11
   d642c:	d01b      	beq.n	d6466 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d642e:	2320      	movs	r3, #32
   d6430:	2500      	movs	r5, #0
   d6432:	9302      	str	r3, [sp, #8]
   d6434:	9503      	str	r5, [sp, #12]
   d6436:	f7fe ff59 	bl	d52ec <__errno>
   d643a:	6803      	ldr	r3, [r0, #0]
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	4b0e      	ldr	r3, [pc, #56]	; (d6478 <_ZN9TCPClient9availableEv+0xb0>)
   d6440:	9300      	str	r3, [sp, #0]
   d6442:	aa02      	add	r2, sp, #8
   d6444:	462b      	mov	r3, r5
   d6446:	490d      	ldr	r1, [pc, #52]	; (d647c <_ZN9TCPClient9availableEv+0xb4>)
   d6448:	2032      	movs	r0, #50	; 0x32
   d644a:	f7fe fe43 	bl	d50d4 <log_message>
                    sock_close(d_->sock);
   d644e:	6963      	ldr	r3, [r4, #20]
   d6450:	6818      	ldr	r0, [r3, #0]
   d6452:	f7fe fd77 	bl	d4f44 <sock_close>
   d6456:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d645c:	601a      	str	r2, [r3, #0]
   d645e:	e002      	b.n	d6466 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6460:	f7ff ff16 	bl	d6290 <_ZN9TCPClient12flush_bufferEv>
   d6464:	e7bb      	b.n	d63de <_ZN9TCPClient9availableEv+0x16>
   d6466:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6468:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d646c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6470:	1a18      	subs	r0, r3, r0
}
   d6472:	b00b      	add	sp, #44	; 0x2c
   d6474:	bd30      	pop	{r4, r5, pc}
   d6476:	bf00      	nop
   d6478:	000d8a0f 	.word	0x000d8a0f
   d647c:	000d8a08 	.word	0x000d8a08

000d6480 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6480:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6482:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6484:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6486:	6001      	str	r1, [r0, #0]
   d6488:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d648c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6490:	3088      	adds	r0, #136	; 0x88
   d6492:	f7ff fad3 	bl	d5a3c <_ZN9IPAddressC1Ev>
}
   d6496:	4620      	mov	r0, r4
   d6498:	bd10      	pop	{r4, pc}
	...

000d649c <_ZN9TCPClientC1Ei>:
   d649c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d64a0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d64a2:	2300      	movs	r3, #0
   d64a4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d64a6:	4a14      	ldr	r2, [pc, #80]	; (d64f8 <_ZN9TCPClientC1Ei+0x5c>)
   d64a8:	6043      	str	r3, [r0, #4]
   d64aa:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d64ac:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d64ae:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d64b0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64b2:	20a0      	movs	r0, #160	; 0xa0
   d64b4:	460e      	mov	r6, r1
   d64b6:	f7fd fdee 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d64ba:	4605      	mov	r5, r0
   d64bc:	b110      	cbz	r0, d64c4 <_ZN9TCPClientC1Ei+0x28>
   d64be:	4631      	mov	r1, r6
   d64c0:	f7ff ffde 	bl	d6480 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64c4:	2014      	movs	r0, #20
   d64c6:	f7fd fde6 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d64ca:	4603      	mov	r3, r0
   d64cc:	b128      	cbz	r0, d64da <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d64ce:	2201      	movs	r2, #1
   d64d0:	6042      	str	r2, [r0, #4]
   d64d2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d64d4:	4a09      	ldr	r2, [pc, #36]	; (d64fc <_ZN9TCPClientC1Ei+0x60>)
   d64d6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d64d8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d64da:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d64dc:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64de:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d64e0:	b128      	cbz	r0, d64ee <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d64e2:	6843      	ldr	r3, [r0, #4]
   d64e4:	3b01      	subs	r3, #1
   d64e6:	6043      	str	r3, [r0, #4]
   d64e8:	b90b      	cbnz	r3, d64ee <_ZN9TCPClientC1Ei+0x52>
   d64ea:	f7ff fe57 	bl	d619c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d64ee:	4620      	mov	r0, r4
   d64f0:	f7ff fece 	bl	d6290 <_ZN9TCPClient12flush_bufferEv>
}
   d64f4:	4620      	mov	r0, r4
   d64f6:	bd70      	pop	{r4, r5, r6, pc}
   d64f8:	000d89c4 	.word	0x000d89c4
   d64fc:	000d89a8 	.word	0x000d89a8

000d6500 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6500:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6502:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6506:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6508:	f7ff ffc8 	bl	d649c <_ZN9TCPClientC1Ei>
}
   d650c:	4620      	mov	r0, r4
   d650e:	bd10      	pop	{r4, pc}

000d6510 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6510:	b510      	push	{r4, lr}
   d6512:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6514:	6800      	ldr	r0, [r0, #0]
   d6516:	2800      	cmp	r0, #0
   d6518:	db01      	blt.n	d651e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d651a:	f7fe fd13 	bl	d4f44 <sock_close>
    }
}
   d651e:	4620      	mov	r0, r4
   d6520:	bd10      	pop	{r4, pc}

000d6522 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6522:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6524:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6526:	4620      	mov	r0, r4
   d6528:	f7ff fff2 	bl	d6510 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d652c:	b124      	cbz	r4, d6538 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d652e:	4620      	mov	r0, r4
   d6530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6534:	f7fd bdb3 	b.w	d409e <_ZdlPv>
   d6538:	bd10      	pop	{r4, pc}
	...

000d653c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d653c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d653e:	4b14      	ldr	r3, [pc, #80]	; (d6590 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6540:	4f14      	ldr	r7, [pc, #80]	; (d6594 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6542:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6544:	4b14      	ldr	r3, [pc, #80]	; (d6598 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6546:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d6548:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d654a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d654c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d654e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6550:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6552:	d01b      	beq.n	d658c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6554:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d6556:	ad01      	add	r5, sp, #4
   d6558:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d655c:	f001 fb9a 	bl	d7c94 <localtime>
	calendar_time->tm_year += 1900;
   d6560:	6943      	ldr	r3, [r0, #20]
   d6562:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6566:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d6568:	4604      	mov	r4, r0
   d656a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d656c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d656e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6572:	f8d4 e000 	ldr.w	lr, [r4]
   d6576:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d657a:	ad01      	add	r5, sp, #4
   d657c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d657e:	4c07      	ldr	r4, [pc, #28]	; (d659c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d6580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6586:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6588:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d658c:	b00b      	add	sp, #44	; 0x2c
   d658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6590:	2003e5a4 	.word	0x2003e5a4
   d6594:	2003e5a0 	.word	0x2003e5a0
   d6598:	2003e59c 	.word	0x2003e59c
   d659c:	2003e574 	.word	0x2003e574

000d65a0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d65a0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d65a2:	2000      	movs	r0, #0
   d65a4:	f7fe fe0a 	bl	d51bc <spark_sync_time_pending>
   d65a8:	b128      	cbz	r0, d65b6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d65aa:	f7fe fdf7 	bl	d519c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d65ae:	f080 0001 	eor.w	r0, r0, #1
   d65b2:	b2c0      	uxtb	r0, r0
   d65b4:	bd08      	pop	{r3, pc}
   d65b6:	2001      	movs	r0, #1
    }
   d65b8:	bd08      	pop	{r3, pc}

000d65ba <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d65ba:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d65bc:	2000      	movs	r0, #0
   d65be:	f7fe fc09 	bl	d4dd4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d65c2:	4604      	mov	r4, r0
   d65c4:	b968      	cbnz	r0, d65e2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d65c6:	f7fe fd8d 	bl	d50e4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d65ca:	2801      	cmp	r0, #1
   d65cc:	d10b      	bne.n	d65e6 <_ZN9TimeClass7isValidEv+0x2c>
   d65ce:	4620      	mov	r0, r4
   d65d0:	f7fe fdb0 	bl	d5134 <system_thread_get_state>
   d65d4:	b938      	cbnz	r0, d65e6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d65d6:	f7ff ffe3 	bl	d65a0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d65da:	b930      	cbnz	r0, d65ea <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d65dc:	f7fe fdd6 	bl	d518c <spark_process>
   d65e0:	e7f9      	b.n	d65d6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d65e2:	2001      	movs	r0, #1
   d65e4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d65e6:	2000      	movs	r0, #0
   d65e8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d65ea:	f7ff ffd9 	bl	d65a0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d65ee:	2000      	movs	r0, #0
   d65f0:	f7fe fbf0 	bl	d4dd4 <HAL_RTC_Time_Is_Valid>
   d65f4:	3000      	adds	r0, #0
   d65f6:	bf18      	it	ne
   d65f8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d65fa:	bd10      	pop	{r4, pc}

000d65fc <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d65fc:	b508      	push	{r3, lr}
    (void)isValid();
   d65fe:	f7ff ffdc 	bl	d65ba <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6606:	f7fe bbdd 	b.w	d4dc4 <HAL_RTC_Get_UnixTime>
	...

000d660c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d660c:	b508      	push	{r3, lr}
	return minute(now());
   d660e:	f7ff fff5 	bl	d65fc <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6612:	f7ff ff93 	bl	d653c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d6616:	4b01      	ldr	r3, [pc, #4]	; (d661c <_ZN9TimeClass6minuteEv+0x10>)
   d6618:	6858      	ldr	r0, [r3, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	2003e574 	.word	0x2003e574

000d6620 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6620:	4b02      	ldr	r3, [pc, #8]	; (d662c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6622:	681a      	ldr	r2, [r3, #0]
   d6624:	4b02      	ldr	r3, [pc, #8]	; (d6630 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6626:	601a      	str	r2, [r3, #0]
   d6628:	4770      	bx	lr
   d662a:	bf00      	nop
   d662c:	2003e134 	.word	0x2003e134
   d6630:	2003e598 	.word	0x2003e598

000d6634 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6634:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6636:	6804      	ldr	r4, [r0, #0]
   d6638:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d663a:	46a4      	mov	ip, r4
    }
   d663c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6640:	4760      	bx	ip

000d6642 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6642:	6803      	ldr	r3, [r0, #0]
   d6644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6646:	4718      	bx	r3

000d6648 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6648:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d664a:	4770      	bx	lr

000d664c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d664c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d664e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6650:	1a10      	subs	r0, r2, r0
   d6652:	4770      	bx	lr

000d6654 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6654:	b513      	push	{r0, r1, r4, lr}
   d6656:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6658:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d665a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d665e:	68d4      	ldr	r4, [r2, #12]
   d6660:	4619      	mov	r1, r3
   d6662:	2201      	movs	r2, #1
   d6664:	47a0      	blx	r4
}
   d6666:	b002      	add	sp, #8
   d6668:	bd10      	pop	{r4, pc}

000d666a <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d666a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d666c:	6803      	ldr	r3, [r0, #0]
   d666e:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6670:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6672:	4798      	blx	r3
   d6674:	b128      	cbz	r0, d6682 <_ZN3UDP4readEv+0x18>
   d6676:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6678:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d667a:	1c59      	adds	r1, r3, #1
   d667c:	86e1      	strh	r1, [r4, #54]	; 0x36
   d667e:	5cd0      	ldrb	r0, [r2, r3]
   d6680:	bd10      	pop	{r4, pc}
   d6682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6686:	bd10      	pop	{r4, pc}

000d6688 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6688:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d668a:	6803      	ldr	r3, [r0, #0]
   d668c:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d668e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6690:	4798      	blx	r3
   d6692:	b118      	cbz	r0, d669c <_ZN3UDP4peekEv+0x14>
   d6694:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6696:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6698:	5cd0      	ldrb	r0, [r2, r3]
   d669a:	bd10      	pop	{r4, pc}
   d669c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d66a0:	bd10      	pop	{r4, pc}

000d66a2 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d66a2:	4770      	bx	lr

000d66a4 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d66a4:	b410      	push	{r4}
   d66a6:	4603      	mov	r3, r0
   d66a8:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d66aa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d66ac:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d66ae:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d66b0:	6803      	ldr	r3, [r0, #0]
   d66b2:	1a52      	subs	r2, r2, r1
   d66b4:	68db      	ldr	r3, [r3, #12]
   d66b6:	4421      	add	r1, r4
}
   d66b8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d66bc:	4718      	bx	r3

000d66be <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d66be:	f1a0 0010 	sub.w	r0, r0, #16
   d66c2:	f7ff bfef 	b.w	d66a4 <_ZNK3UDP7printToER5Print>

000d66c6 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d66c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d66c8:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d66ca:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d66cc:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d66ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d66d0:	4604      	mov	r4, r0
   d66d2:	460f      	mov	r7, r1
   d66d4:	4615      	mov	r5, r2
    stop();
   d66d6:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d66d8:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d66da:	4632      	mov	r2, r6
   d66dc:	2100      	movs	r1, #0
   d66de:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d66e0:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d66e2:	f001 fbda 	bl	d7e9a <memset>
    saddr.sin6_len = sizeof(saddr);
   d66e6:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d66ea:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d66ec:	260a      	movs	r6, #10
   d66ee:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d66f2:	f7fe fbff 	bl	d4ef4 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d66f6:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d66f8:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d66fc:	2102      	movs	r1, #2
   d66fe:	4630      	mov	r0, r6
   d6700:	f7fe fc50 	bl	d4fa4 <sock_socket>

    if (_sock < 0) {
   d6704:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6706:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6708:	db24      	blt.n	d6754 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d670a:	2204      	movs	r2, #4
   d670c:	9200      	str	r2, [sp, #0]
   d670e:	ab02      	add	r3, sp, #8
   d6710:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6714:	f7fe fc0e 	bl	d4f34 <sock_setsockopt>
   d6718:	b9e0      	cbnz	r0, d6754 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d671a:	b195      	cbz	r5, d6742 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d671c:	9003      	str	r0, [sp, #12]
   d671e:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6722:	a903      	add	r1, sp, #12
   d6724:	b2e8      	uxtb	r0, r5
   d6726:	f7fe fbc5 	bl	d4eb4 <if_index_to_name>
   d672a:	b998      	cbnz	r0, d6754 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d672c:	2306      	movs	r3, #6
   d672e:	9300      	str	r3, [sp, #0]
   d6730:	f241 020b 	movw	r2, #4107	; 0x100b
   d6734:	ab03      	add	r3, sp, #12
   d6736:	f640 71ff 	movw	r1, #4095	; 0xfff
   d673a:	6960      	ldr	r0, [r4, #20]
   d673c:	f7fe fbfa 	bl	d4f34 <sock_setsockopt>
   d6740:	b940      	cbnz	r0, d6754 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6742:	221c      	movs	r2, #28
   d6744:	a905      	add	r1, sp, #20
   d6746:	6960      	ldr	r0, [r4, #20]
   d6748:	f7fe fbec 	bl	d4f24 <sock_bind>
   d674c:	b910      	cbnz	r0, d6754 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d674e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6750:	2001      	movs	r0, #1
   d6752:	e004      	b.n	d675e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6754:	6823      	ldr	r3, [r4, #0]
   d6756:	4620      	mov	r0, r4
   d6758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d675a:	4798      	blx	r3
   d675c:	2000      	movs	r0, #0
    }
    return bound;
}
   d675e:	b00d      	add	sp, #52	; 0x34
   d6760:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6762 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d6762:	b510      	push	{r4, lr}
   d6764:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6766:	6940      	ldr	r0, [r0, #20]
   d6768:	2800      	cmp	r0, #0
   d676a:	db01      	blt.n	d6770 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d676c:	f7fe fbea 	bl	d4f44 <sock_close>
    }

    _sock = -1;
   d6770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6774:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6776:	2300      	movs	r3, #0
   d6778:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d677a:	8723      	strh	r3, [r4, #56]	; 0x38
   d677c:	bd10      	pop	{r4, pc}

000d677e <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d677e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6780:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6782:	4605      	mov	r5, r0
   d6784:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6786:	b113      	cbz	r3, d678e <_ZN3UDP5writeEPKhj+0x10>
   d6788:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d678a:	1a24      	subs	r4, r4, r0
   d678c:	e000      	b.n	d6790 <_ZN3UDP5writeEPKhj+0x12>
   d678e:	461c      	mov	r4, r3
   d6790:	4294      	cmp	r4, r2
   d6792:	bf28      	it	cs
   d6794:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d6796:	4622      	mov	r2, r4
   d6798:	4418      	add	r0, r3
   d679a:	f001 fb73 	bl	d7e84 <memcpy>
    _offset += size;
   d679e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d67a0:	4423      	add	r3, r4
   d67a2:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d67a4:	4620      	mov	r0, r4
   d67a6:	bd38      	pop	{r3, r4, r5, pc}

000d67a8 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d67a8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d67aa:	6803      	ldr	r3, [r0, #0]
   d67ac:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d67ae:	4604      	mov	r4, r0
   d67b0:	460e      	mov	r6, r1
   d67b2:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d67b4:	4798      	blx	r3
   d67b6:	b188      	cbz	r0, d67dc <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d67b8:	6823      	ldr	r3, [r4, #0]
   d67ba:	4620      	mov	r0, r4
   d67bc:	691b      	ldr	r3, [r3, #16]
   d67be:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d67c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d67c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d67c4:	4285      	cmp	r5, r0
   d67c6:	bfa8      	it	ge
   d67c8:	4605      	movge	r5, r0
   d67ca:	4419      	add	r1, r3
   d67cc:	462a      	mov	r2, r5
   d67ce:	4630      	mov	r0, r6
   d67d0:	f001 fb58 	bl	d7e84 <memcpy>
        _offset += read;
   d67d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d67d6:	442b      	add	r3, r5
   d67d8:	86e3      	strh	r3, [r4, #54]	; 0x36
   d67da:	e001      	b.n	d67e0 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d67dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d67e0:	4628      	mov	r0, r5
   d67e2:	bd70      	pop	{r4, r5, r6, pc}

000d67e4 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d67e4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d67e6:	4604      	mov	r4, r0
   d67e8:	4b05      	ldr	r3, [pc, #20]	; (d6800 <_ZN3UDP8remoteIPEv+0x1c>)
   d67ea:	f844 3b04 	str.w	r3, [r4], #4
   d67ee:	f101 0520 	add.w	r5, r1, #32
   d67f2:	4606      	mov	r6, r0
   d67f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67f8:	682b      	ldr	r3, [r5, #0]
   d67fa:	7023      	strb	r3, [r4, #0]
   d67fc:	4630      	mov	r0, r6
   d67fe:	bd70      	pop	{r4, r5, r6, pc}
   d6800:	000d883c 	.word	0x000d883c

000d6804 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6804:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6806:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6808:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d680a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d680c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d680e:	4a0a      	ldr	r2, [pc, #40]	; (d6838 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6810:	9202      	str	r2, [sp, #8]
   d6812:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6814:	468e      	mov	lr, r1
   d6816:	4606      	mov	r6, r0
   d6818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d681a:	ac03      	add	r4, sp, #12
   d681c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d681e:	682b      	ldr	r3, [r5, #0]
   d6820:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6822:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6826:	9300      	str	r3, [sp, #0]
   d6828:	4662      	mov	r2, ip
   d682a:	ab02      	add	r3, sp, #8
   d682c:	4671      	mov	r1, lr
   d682e:	4630      	mov	r0, r6
   d6830:	47b8      	blx	r7
    }
   d6832:	b009      	add	sp, #36	; 0x24
   d6834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6836:	bf00      	nop
   d6838:	000d883c 	.word	0x000d883c

000d683c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d683c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d683e:	6803      	ldr	r3, [r0, #0]
   d6840:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6844:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6846:	4b0d      	ldr	r3, [pc, #52]	; (d687c <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6848:	b089      	sub	sp, #36	; 0x24
   d684a:	f100 0620 	add.w	r6, r0, #32
   d684e:	4604      	mov	r4, r0
   d6850:	9302      	str	r3, [sp, #8]
   d6852:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6854:	ad03      	add	r5, sp, #12
   d6856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6858:	6833      	ldr	r3, [r6, #0]
   d685a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d685c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d685e:	9300      	str	r3, [sp, #0]
   d6860:	4672      	mov	r2, lr
   d6862:	ab02      	add	r3, sp, #8
   d6864:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6866:	4620      	mov	r0, r4
   d6868:	47b8      	blx	r7
    flush(); // wait for send to complete
   d686a:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d686c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d686e:	69db      	ldr	r3, [r3, #28]
   d6870:	4620      	mov	r0, r4
   d6872:	4798      	blx	r3
    return result;
}
   d6874:	4628      	mov	r0, r5
   d6876:	b009      	add	sp, #36	; 0x24
   d6878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d687a:	bf00      	nop
   d687c:	000d883c 	.word	0x000d883c

000d6880 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6880:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6882:	7843      	ldrb	r3, [r0, #1]
   d6884:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6886:	b08d      	sub	sp, #52	; 0x34
   d6888:	4605      	mov	r5, r0
   d688a:	460c      	mov	r4, r1
   d688c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d688e:	d101      	bne.n	d6894 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6890:	1d01      	adds	r1, r0, #4
   d6892:	e033      	b.n	d68fc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6894:	2b0a      	cmp	r3, #10
   d6896:	d135      	bne.n	d6904 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6898:	2211      	movs	r2, #17
   d689a:	2100      	movs	r1, #0
   d689c:	a801      	add	r0, sp, #4
   d689e:	f001 fafc 	bl	d7e9a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d68a2:	68ab      	ldr	r3, [r5, #8]
   d68a4:	b943      	cbnz	r3, d68b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d68a6:	68eb      	ldr	r3, [r5, #12]
   d68a8:	b933      	cbnz	r3, d68b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d68aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d68ae:	692e      	ldr	r6, [r5, #16]
   d68b0:	f7fe fb10 	bl	d4ed4 <inet_htonl>
   d68b4:	4286      	cmp	r6, r0
   d68b6:	d01f      	beq.n	d68f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d68b8:	f105 0308 	add.w	r3, r5, #8
   d68bc:	ae01      	add	r6, sp, #4
   d68be:	f105 0e18 	add.w	lr, r5, #24
   d68c2:	6818      	ldr	r0, [r3, #0]
   d68c4:	6859      	ldr	r1, [r3, #4]
   d68c6:	4632      	mov	r2, r6
   d68c8:	c203      	stmia	r2!, {r0, r1}
   d68ca:	3308      	adds	r3, #8
   d68cc:	4573      	cmp	r3, lr
   d68ce:	4616      	mov	r6, r2
   d68d0:	d1f7      	bne.n	d68c2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d68d2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d68d4:	a901      	add	r1, sp, #4
   d68d6:	a806      	add	r0, sp, #24
   d68d8:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d68da:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d68de:	f7ff f8bb 	bl	d5a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d68e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d68e4:	3404      	adds	r4, #4
   d68e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68e8:	6833      	ldr	r3, [r6, #0]
   d68ea:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d68ec:	b157      	cbz	r7, d6904 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d68ee:	8868      	ldrh	r0, [r5, #2]
   d68f0:	f7fe faf8 	bl	d4ee4 <inet_ntohs>
   d68f4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d68f6:	e005      	b.n	d6904 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d68f8:	f105 0114 	add.w	r1, r5, #20
   d68fc:	4620      	mov	r0, r4
   d68fe:	f7ff f8e0 	bl	d5ac2 <_ZN9IPAddressaSEPKh>
   d6902:	e7f3      	b.n	d68ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6904:	b00d      	add	sp, #52	; 0x34
   d6906:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6908 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d690c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d690e:	ab0e      	add	r3, sp, #56	; 0x38
   d6910:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6912:	4606      	mov	r6, r0
   d6914:	4617      	mov	r7, r2
   d6916:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6918:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d691c:	462a      	mov	r2, r5
   d691e:	4629      	mov	r1, r5
   d6920:	f7fe faf8 	bl	d4f14 <netdb_getaddrinfo>
   d6924:	2800      	cmp	r0, #0
   d6926:	db1f      	blt.n	d6968 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6928:	9b01      	ldr	r3, [sp, #4]
   d692a:	b1fb      	cbz	r3, d696c <_ZN3UDP11beginPacketEPKct+0x64>
   d692c:	695b      	ldr	r3, [r3, #20]
   d692e:	b1eb      	cbz	r3, d696c <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6930:	a802      	add	r0, sp, #8
   d6932:	f7ff f883 	bl	d5a3c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6936:	9b01      	ldr	r3, [sp, #4]
   d6938:	462a      	mov	r2, r5
   d693a:	6958      	ldr	r0, [r3, #20]
   d693c:	a902      	add	r1, sp, #8
   d693e:	f7ff ff9f 	bl	d6880 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6942:	a802      	add	r0, sp, #8
   d6944:	f7ff f89a 	bl	d5a7c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6948:	b180      	cbz	r0, d696c <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d694a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d694c:	ad03      	add	r5, sp, #12
   d694e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6952:	4b0b      	ldr	r3, [pc, #44]	; (d6980 <_ZN3UDP11beginPacketEPKct+0x78>)
   d6954:	9308      	str	r3, [sp, #32]
   d6956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6958:	ac09      	add	r4, sp, #36	; 0x24
   d695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d695c:	682b      	ldr	r3, [r5, #0]
   d695e:	7023      	strb	r3, [r4, #0]
   d6960:	463a      	mov	r2, r7
   d6962:	a908      	add	r1, sp, #32
   d6964:	4630      	mov	r0, r6
   d6966:	47c0      	blx	r8
   d6968:	4604      	mov	r4, r0
   d696a:	e001      	b.n	d6970 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d696c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6970:	9801      	ldr	r0, [sp, #4]
   d6972:	f7fe fac7 	bl	d4f04 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6976:	4620      	mov	r0, r4
   d6978:	b00e      	add	sp, #56	; 0x38
   d697a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d697e:	bf00      	nop
   d6980:	000d883c 	.word	0x000d883c

000d6984 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6988:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d698c:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6990:	b08c      	sub	sp, #48	; 0x30
   d6992:	4605      	mov	r5, r0
   d6994:	460c      	mov	r4, r1
   d6996:	4617      	mov	r7, r2
   d6998:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d699a:	db00      	blt.n	d699e <_ZN3UDP13receivePacketEPhjm+0x1a>
   d699c:	b911      	cbnz	r1, d69a4 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d699e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d69a2:	e035      	b.n	d6a10 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d69a4:	f04f 0a1c 	mov.w	sl, #28
   d69a8:	ae05      	add	r6, sp, #20
   d69aa:	4652      	mov	r2, sl
   d69ac:	2100      	movs	r1, #0
   d69ae:	4630      	mov	r0, r6
   d69b0:	f001 fa73 	bl	d7e9a <memset>
        socklen_t slen = sizeof(saddr);
   d69b4:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d69b8:	f1b9 0f00 	cmp.w	r9, #0
   d69bc:	d014      	beq.n	d69e8 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d69be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69c2:	fbb9 f1f2 	udiv	r1, r9, r2
   d69c6:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d69c8:	fb02 9111 	mls	r1, r2, r1, r9
   d69cc:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d69ce:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d69d0:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d69d2:	9300      	str	r3, [sp, #0]
   d69d4:	f241 0206 	movw	r2, #4102	; 0x1006
   d69d8:	ab03      	add	r3, sp, #12
   d69da:	f640 71ff 	movw	r1, #4095	; 0xfff
   d69de:	4640      	mov	r0, r8
   d69e0:	f7fe faa8 	bl	d4f34 <sock_setsockopt>
            if (ret) {
   d69e4:	b108      	cbz	r0, d69ea <_ZN3UDP13receivePacketEPhjm+0x66>
   d69e6:	e013      	b.n	d6a10 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d69e8:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d69ea:	ab02      	add	r3, sp, #8
   d69ec:	9301      	str	r3, [sp, #4]
   d69ee:	4621      	mov	r1, r4
   d69f0:	4603      	mov	r3, r0
   d69f2:	9600      	str	r6, [sp, #0]
   d69f4:	463a      	mov	r2, r7
   d69f6:	6968      	ldr	r0, [r5, #20]
   d69f8:	f7fe fabc 	bl	d4f74 <sock_recvfrom>
        if (ret >= 0) {
   d69fc:	1e04      	subs	r4, r0, #0
   d69fe:	db06      	blt.n	d6a0e <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6a00:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6a04:	f105 011c 	add.w	r1, r5, #28
   d6a08:	4630      	mov	r0, r6
   d6a0a:	f7ff ff39 	bl	d6880 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6a0e:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6a10:	b00c      	add	sp, #48	; 0x30
   d6a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6a16 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6a16:	b538      	push	{r3, r4, r5, lr}
   d6a18:	4605      	mov	r5, r0
   d6a1a:	4614      	mov	r4, r2
   d6a1c:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6a1e:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6a20:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6a22:	d111      	bne.n	d6a48 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6a24:	231c      	movs	r3, #28
   d6a26:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6a28:	230a      	movs	r3, #10
   d6a2a:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d6a2c:	f7fe fa62 	bl	d4ef4 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6a30:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6a32:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6a36:	1d2b      	adds	r3, r5, #4
   d6a38:	3514      	adds	r5, #20
   d6a3a:	f853 2b04 	ldr.w	r2, [r3], #4
   d6a3e:	f844 2b04 	str.w	r2, [r4], #4
   d6a42:	42ab      	cmp	r3, r5
   d6a44:	d1f9      	bne.n	d6a3a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6a46:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6a48:	2b04      	cmp	r3, #4
   d6a4a:	d10a      	bne.n	d6a62 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d6a4c:	2310      	movs	r3, #16
   d6a4e:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6a50:	2302      	movs	r3, #2
   d6a52:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d6a54:	f7fe fa4e 	bl	d4ef4 <inet_htons>
   d6a58:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6a5a:	6868      	ldr	r0, [r5, #4]
   d6a5c:	f7fe fa3a 	bl	d4ed4 <inet_htonl>
   d6a60:	6060      	str	r0, [r4, #4]
   d6a62:	bd38      	pop	{r3, r4, r5, pc}

000d6a64 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6a68:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6a6a:	ac03      	add	r4, sp, #12
   d6a6c:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6a6e:	4699      	mov	r9, r3
   d6a70:	4606      	mov	r6, r0
   d6a72:	460f      	mov	r7, r1
   d6a74:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6a76:	2100      	movs	r1, #0
   d6a78:	462a      	mov	r2, r5
   d6a7a:	4620      	mov	r0, r4
   d6a7c:	f001 fa0d 	bl	d7e9a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6a80:	4622      	mov	r2, r4
   d6a82:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d6a86:	4648      	mov	r0, r9
   d6a88:	f7ff ffc5 	bl	d6a16 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d6a8c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6a90:	b143      	cbz	r3, d6aa4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d6a92:	e88d 0030 	stmia.w	sp, {r4, r5}
   d6a96:	2300      	movs	r3, #0
   d6a98:	4642      	mov	r2, r8
   d6a9a:	4639      	mov	r1, r7
   d6a9c:	6970      	ldr	r0, [r6, #20]
   d6a9e:	f7fe fa79 	bl	d4f94 <sock_sendto>
   d6aa2:	e001      	b.n	d6aa8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d6aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d6aa8:	b00b      	add	sp, #44	; 0x2c
   d6aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6ab0 <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   d6ab0:	b538      	push	{r3, r4, r5, lr}
   d6ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ab6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6ab8:	4b0b      	ldr	r3, [pc, #44]	; (d6ae8 <_ZN3UDPC1Ev+0x38>)
   d6aba:	f103 0208 	add.w	r2, r3, #8
   d6abe:	336c      	adds	r3, #108	; 0x6c
   d6ac0:	2500      	movs	r5, #0
   d6ac2:	6103      	str	r3, [r0, #16]
   d6ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d6ac8:	4604      	mov	r4, r0
   d6aca:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6acc:	6002      	str	r2, [r0, #0]
   d6ace:	6143      	str	r3, [r0, #20]
   d6ad0:	301c      	adds	r0, #28
   d6ad2:	f7fe ffb3 	bl	d5a3c <_ZN9IPAddressC1Ev>
   d6ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
   d6ada:	86e5      	strh	r5, [r4, #54]	; 0x36
   d6adc:	8725      	strh	r5, [r4, #56]	; 0x38
   d6ade:	63e5      	str	r5, [r4, #60]	; 0x3c
   d6ae0:	6423      	str	r3, [r4, #64]	; 0x40
   d6ae2:	6465      	str	r5, [r4, #68]	; 0x44
}
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	bd38      	pop	{r3, r4, r5, pc}
   d6ae8:	000d8a48 	.word	0x000d8a48

000d6aec <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6aec:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d6aee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6af2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d6af4:	b123      	cbz	r3, d6b00 <_ZN3UDP13releaseBufferEv+0x14>
   d6af6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6af8:	b110      	cbz	r0, d6b00 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d6afa:	2101      	movs	r1, #1
   d6afc:	f000 fb55 	bl	d71aa <_ZdlPvj>
    }
    _buffer = NULL;
   d6b00:	2300      	movs	r3, #0
   d6b02:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d6b04:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d6b08:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6b0a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6b0c:	8723      	strh	r3, [r4, #56]	; 0x38
   d6b0e:	bd10      	pop	{r4, pc}

000d6b10 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d6b10:	b570      	push	{r4, r5, r6, lr}
   d6b12:	4604      	mov	r4, r0
   d6b14:	4616      	mov	r6, r2
   d6b16:	460d      	mov	r5, r1
    releaseBuffer();
   d6b18:	f7ff ffe8 	bl	d6aec <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d6b1c:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d6b1e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d6b20:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d6b22:	b93e      	cbnz	r6, d6b34 <_ZN3UDP9setBufferEjPh+0x24>
   d6b24:	b135      	cbz	r5, d6b34 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d6b26:	4628      	mov	r0, r5
   d6b28:	f7fd fab7 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d6b2c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6b2e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d6b30:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d6b34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6b36:	b103      	cbz	r3, d6b3a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6b38:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6b3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6b3c:	3000      	adds	r0, #0
   d6b3e:	bf18      	it	ne
   d6b40:	2001      	movne	r0, #1
   d6b42:	bd70      	pop	{r4, r5, r6, pc}

000d6b44 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b46:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6b48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6b4a:	4605      	mov	r5, r0
   d6b4c:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6b4e:	b91a      	cbnz	r2, d6b58 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d6b50:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6b52:	b109      	cbz	r1, d6b58 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d6b54:	f7ff ffdc 	bl	d6b10 <_ZN3UDP9setBufferEjPh>
   d6b58:	3404      	adds	r4, #4
   d6b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6b5c:	f105 0620 	add.w	r6, r5, #32
   d6b60:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6b62:	6823      	ldr	r3, [r4, #0]
   d6b64:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6b66:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6b68:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6b6a:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6b6c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6b6e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d6b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b72 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6b72:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d6b74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6b76:	4604      	mov	r4, r0
   d6b78:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d6b7a:	b91a      	cbnz	r2, d6b84 <_ZN3UDP11parsePacketEm+0x12>
   d6b7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6b7e:	b109      	cbz	r1, d6b84 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d6b80:	f7ff ffc6 	bl	d6b10 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6b84:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6b86:	2200      	movs	r2, #0
   d6b88:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d6b8a:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6b8c:	b149      	cbz	r1, d6ba2 <_ZN3UDP11parsePacketEm+0x30>
   d6b8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d6b90:	b13a      	cbz	r2, d6ba2 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d6b92:	6823      	ldr	r3, [r4, #0]
   d6b94:	4620      	mov	r0, r4
   d6b96:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d6b98:	4633      	mov	r3, r6
   d6b9a:	47a8      	blx	r5
        if (result > 0) {
   d6b9c:	2800      	cmp	r0, #0
            _total = result;
   d6b9e:	bfc8      	it	gt
   d6ba0:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d6ba2:	6823      	ldr	r3, [r4, #0]
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	691b      	ldr	r3, [r3, #16]
}
   d6ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d6bac:	4718      	bx	r3

000d6bae <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6bae:	4770      	bx	lr

000d6bb0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bb0:	7441      	strb	r1, [r0, #17]
   d6bb2:	4770      	bx	lr

000d6bb4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6bb4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6bb6:	7c00      	ldrb	r0, [r0, #16]
   d6bb8:	f7fe fa44 	bl	d5044 <HAL_USART_Available_Data_For_Write>
}
   d6bbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bc0:	bd08      	pop	{r3, pc}

000d6bc2 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6bc2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6bc4:	7c00      	ldrb	r0, [r0, #16]
   d6bc6:	f7fe fa15 	bl	d4ff4 <HAL_USART_Available_Data>
}
   d6bca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bce:	bd08      	pop	{r3, pc}

000d6bd0 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6bd0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6bd2:	7c00      	ldrb	r0, [r0, #16]
   d6bd4:	f7fe fa1e 	bl	d5014 <HAL_USART_Peek_Data>
}
   d6bd8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bdc:	bf28      	it	cs
   d6bde:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6be2:	bd08      	pop	{r3, pc}

000d6be4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6be4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6be6:	7c00      	ldrb	r0, [r0, #16]
   d6be8:	f7fe fa0c 	bl	d5004 <HAL_USART_Read_Data>
}
   d6bec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bf0:	bf28      	it	cs
   d6bf2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6bf6:	bd08      	pop	{r3, pc}

000d6bf8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6bf8:	7c00      	ldrb	r0, [r0, #16]
   d6bfa:	f7fe ba13 	b.w	d5024 <HAL_USART_Flush_Data>

000d6bfe <_ZN11USARTSerialD0Ev>:
   d6bfe:	b510      	push	{r4, lr}
   d6c00:	2114      	movs	r1, #20
   d6c02:	4604      	mov	r4, r0
   d6c04:	f000 fad1 	bl	d71aa <_ZdlPvj>
   d6c08:	4620      	mov	r0, r4
   d6c0a:	bd10      	pop	{r4, pc}

000d6c0c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c0c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c0e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c10:	4604      	mov	r4, r0
   d6c12:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c14:	b925      	cbnz	r5, d6c20 <_ZN11USARTSerial5writeEh+0x14>
   d6c16:	7c00      	ldrb	r0, [r0, #16]
   d6c18:	f7fe fa14 	bl	d5044 <HAL_USART_Available_Data_For_Write>
   d6c1c:	2800      	cmp	r0, #0
   d6c1e:	dd05      	ble.n	d6c2c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c20:	4631      	mov	r1, r6
   d6c22:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c28:	f7fe b9dc 	b.w	d4fe4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c2c:	4628      	mov	r0, r5
   d6c2e:	bd70      	pop	{r4, r5, r6, pc}

000d6c30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6c30:	b510      	push	{r4, lr}
   d6c32:	4604      	mov	r4, r0
   d6c34:	4608      	mov	r0, r1
   d6c36:	4611      	mov	r1, r2
   d6c38:	2200      	movs	r2, #0
   d6c3a:	6062      	str	r2, [r4, #4]
   d6c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c40:	60a2      	str	r2, [r4, #8]
   d6c42:	4a05      	ldr	r2, [pc, #20]	; (d6c58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6c44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6c46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6c48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6c4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6c4c:	461a      	mov	r2, r3
   d6c4e:	f7fe f9c1 	bl	d4fd4 <HAL_USART_Init>
}
   d6c52:	4620      	mov	r0, r4
   d6c54:	bd10      	pop	{r4, pc}
   d6c56:	bf00      	nop
   d6c58:	000d8ac0 	.word	0x000d8ac0

000d6c5c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6c5c:	7c00      	ldrb	r0, [r0, #16]
   d6c5e:	f7fe b9e9 	b.w	d5034 <HAL_USART_Is_Enabled>
	...

000d6c64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c64:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6c66:	4d0c      	ldr	r5, [pc, #48]	; (d6c98 <_Z22__fetch_global_Serial1v+0x34>)
   d6c68:	6829      	ldr	r1, [r5, #0]
   d6c6a:	f011 0401 	ands.w	r4, r1, #1
   d6c6e:	d111      	bne.n	d6c94 <_Z22__fetch_global_Serial1v+0x30>
   d6c70:	4628      	mov	r0, r5
   d6c72:	f7fd fa18 	bl	d40a6 <__cxa_guard_acquire>
   d6c76:	b168      	cbz	r0, d6c94 <_Z22__fetch_global_Serial1v+0x30>
   d6c78:	4a08      	ldr	r2, [pc, #32]	; (d6c9c <_Z22__fetch_global_Serial1v+0x38>)
   d6c7a:	4b09      	ldr	r3, [pc, #36]	; (d6ca0 <_Z22__fetch_global_Serial1v+0x3c>)
   d6c7c:	4809      	ldr	r0, [pc, #36]	; (d6ca4 <_Z22__fetch_global_Serial1v+0x40>)
   d6c7e:	4621      	mov	r1, r4
   d6c80:	f7ff ffd6 	bl	d6c30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6c84:	4628      	mov	r0, r5
   d6c86:	f7fd fa13 	bl	d40b0 <__cxa_guard_release>
   d6c8a:	4a07      	ldr	r2, [pc, #28]	; (d6ca8 <_Z22__fetch_global_Serial1v+0x44>)
   d6c8c:	4907      	ldr	r1, [pc, #28]	; (d6cac <_Z22__fetch_global_Serial1v+0x48>)
   d6c8e:	4805      	ldr	r0, [pc, #20]	; (d6ca4 <_Z22__fetch_global_Serial1v+0x40>)
   d6c90:	f000 fa86 	bl	d71a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6c94:	4803      	ldr	r0, [pc, #12]	; (d6ca4 <_Z22__fetch_global_Serial1v+0x40>)
   d6c96:	bd38      	pop	{r3, r4, r5, pc}
   d6c98:	2003e640 	.word	0x2003e640
   d6c9c:	2003e644 	.word	0x2003e644
   d6ca0:	2003e5bc 	.word	0x2003e5bc
   d6ca4:	2003e5a8 	.word	0x2003e5a8
   d6ca8:	2003e1ec 	.word	0x2003e1ec
   d6cac:	000d6baf 	.word	0x000d6baf

000d6cb0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6cb0:	7441      	strb	r1, [r0, #17]
   d6cb2:	4770      	bx	lr

000d6cb4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6cb4:	4770      	bx	lr

000d6cb6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6cb6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6cb8:	2100      	movs	r1, #0
   d6cba:	7c00      	ldrb	r0, [r0, #16]
   d6cbc:	f7fe f9e2 	bl	d5084 <HAL_USB_USART_Receive_Data>
}
   d6cc0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6cc4:	bf28      	it	cs
   d6cc6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6cca:	bd08      	pop	{r3, pc}

000d6ccc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6ccc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6cce:	2101      	movs	r1, #1
   d6cd0:	7c00      	ldrb	r0, [r0, #16]
   d6cd2:	f7fe f9d7 	bl	d5084 <HAL_USB_USART_Receive_Data>
}
   d6cd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6cda:	bf28      	it	cs
   d6cdc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ce0:	bd08      	pop	{r3, pc}

000d6ce2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6ce2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6ce4:	7c00      	ldrb	r0, [r0, #16]
   d6ce6:	f7fe f9c5 	bl	d5074 <HAL_USB_USART_Available_Data_For_Write>
}
   d6cea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cee:	bd08      	pop	{r3, pc}

000d6cf0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6cf0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6cf2:	7c00      	ldrb	r0, [r0, #16]
   d6cf4:	f7fe f9b6 	bl	d5064 <HAL_USB_USART_Available_Data>
}
   d6cf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cfc:	bd08      	pop	{r3, pc}

000d6cfe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6cfe:	7c00      	ldrb	r0, [r0, #16]
   d6d00:	f7fe b9d0 	b.w	d50a4 <HAL_USB_USART_Flush_Data>

000d6d04 <_ZN9USBSerialD0Ev>:
   d6d04:	b510      	push	{r4, lr}
   d6d06:	2114      	movs	r1, #20
   d6d08:	4604      	mov	r4, r0
   d6d0a:	f000 fa4e 	bl	d71aa <_ZdlPvj>
   d6d0e:	4620      	mov	r0, r4
   d6d10:	bd10      	pop	{r4, pc}

000d6d12 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6d12:	b538      	push	{r3, r4, r5, lr}
   d6d14:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d16:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6d18:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d1a:	f7fe f9ab 	bl	d5074 <HAL_USB_USART_Available_Data_For_Write>
   d6d1e:	2800      	cmp	r0, #0
   d6d20:	dc01      	bgt.n	d6d26 <_ZN9USBSerial5writeEh+0x14>
   d6d22:	7c60      	ldrb	r0, [r4, #17]
   d6d24:	b128      	cbz	r0, d6d32 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6d26:	4629      	mov	r1, r5
   d6d28:	7c20      	ldrb	r0, [r4, #16]
   d6d2a:	f7fe f9b3 	bl	d5094 <HAL_USB_USART_Send_Data>
   d6d2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6d32:	bd38      	pop	{r3, r4, r5, pc}

000d6d34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d34:	b510      	push	{r4, lr}
   d6d36:	4604      	mov	r4, r0
   d6d38:	2300      	movs	r3, #0
   d6d3a:	6063      	str	r3, [r4, #4]
   d6d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d40:	60a3      	str	r3, [r4, #8]
   d6d42:	4b05      	ldr	r3, [pc, #20]	; (d6d58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6d44:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6d46:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d48:	4608      	mov	r0, r1
{
  _serial = serial;
   d6d4a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6d4c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6d4e:	4611      	mov	r1, r2
   d6d50:	f7fe f980 	bl	d5054 <HAL_USB_USART_Init>
}
   d6d54:	4620      	mov	r0, r4
   d6d56:	bd10      	pop	{r4, pc}
   d6d58:	000d8af0 	.word	0x000d8af0

000d6d5c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d5c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6d5e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d60:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d62:	2100      	movs	r1, #0
   d6d64:	f001 f899 	bl	d7e9a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6d68:	4620      	mov	r0, r4
   d6d6a:	bd10      	pop	{r4, pc}

000d6d6c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6d6c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d6e:	4d0e      	ldr	r5, [pc, #56]	; (d6da8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6d70:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6d72:	a801      	add	r0, sp, #4
   d6d74:	f7ff fff2 	bl	d6d5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d78:	6829      	ldr	r1, [r5, #0]
   d6d7a:	f011 0401 	ands.w	r4, r1, #1
   d6d7e:	d110      	bne.n	d6da2 <_Z16_fetch_usbserialv+0x36>
   d6d80:	4628      	mov	r0, r5
   d6d82:	f7fd f990 	bl	d40a6 <__cxa_guard_acquire>
   d6d86:	b160      	cbz	r0, d6da2 <_Z16_fetch_usbserialv+0x36>
   d6d88:	aa01      	add	r2, sp, #4
   d6d8a:	4621      	mov	r1, r4
   d6d8c:	4807      	ldr	r0, [pc, #28]	; (d6dac <_Z16_fetch_usbserialv+0x40>)
   d6d8e:	f7ff ffd1 	bl	d6d34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6d92:	4628      	mov	r0, r5
   d6d94:	f7fd f98c 	bl	d40b0 <__cxa_guard_release>
   d6d98:	4a05      	ldr	r2, [pc, #20]	; (d6db0 <_Z16_fetch_usbserialv+0x44>)
   d6d9a:	4906      	ldr	r1, [pc, #24]	; (d6db4 <_Z16_fetch_usbserialv+0x48>)
   d6d9c:	4803      	ldr	r0, [pc, #12]	; (d6dac <_Z16_fetch_usbserialv+0x40>)
   d6d9e:	f000 f9ff 	bl	d71a0 <__aeabi_atexit>
	return _usbserial;
}
   d6da2:	4802      	ldr	r0, [pc, #8]	; (d6dac <_Z16_fetch_usbserialv+0x40>)
   d6da4:	b007      	add	sp, #28
   d6da6:	bd30      	pop	{r4, r5, pc}
   d6da8:	2003e6c8 	.word	0x2003e6c8
   d6dac:	2003e6cc 	.word	0x2003e6cc
   d6db0:	2003e1ec 	.word	0x2003e1ec
   d6db4:	000d6cb5 	.word	0x000d6cb5

000d6db8 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6db8:	4770      	bx	lr

000d6dba <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d6dba:	2001      	movs	r0, #1
   d6dbc:	4770      	bx	lr
	...

000d6dc0 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d6dc0:	8983      	ldrh	r3, [r0, #12]
   d6dc2:	b11b      	cbz	r3, d6dcc <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d6dc4:	6903      	ldr	r3, [r0, #16]
   d6dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6dca:	d102      	bne.n	d6dd2 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d6dcc:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6de4 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d6dd0:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d6dd2:	ee07 3a90 	vmov	s15, r3
   d6dd6:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6de8 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d6dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6dde:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6de2:	4770      	bx	lr
   d6de4:	00000000 	.word	0x00000000
   d6de8:	42c80000 	.word	0x42c80000

000d6dec <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d6dec:	8983      	ldrh	r3, [r0, #12]
   d6dee:	b11b      	cbz	r3, d6df8 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d6df0:	6983      	ldr	r3, [r0, #24]
   d6df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6df6:	d102      	bne.n	d6dfe <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d6df8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6e10 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d6dfc:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d6dfe:	ee07 3a90 	vmov	s15, r3
   d6e02:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6e14 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d6e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6e0a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6e0e:	4770      	bx	lr
   d6e10:	00000000 	.word	0x00000000
   d6e14:	42c80000 	.word	0x42c80000

000d6e18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6e18:	2200      	movs	r2, #0
   d6e1a:	4611      	mov	r1, r2
   d6e1c:	6840      	ldr	r0, [r0, #4]
   d6e1e:	f7fe b9f5 	b.w	d520c <network_ready>

000d6e22 <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6e22:	b510      	push	{r4, lr}
   d6e24:	2124      	movs	r1, #36	; 0x24
   d6e26:	4604      	mov	r4, r0
   d6e28:	f000 f9bf 	bl	d71aa <_ZdlPvj>
   d6e2c:	4620      	mov	r0, r4
   d6e2e:	bd10      	pop	{r4, pc}

000d6e30 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e30:	2200      	movs	r2, #0
   d6e32:	4611      	mov	r1, r2
   d6e34:	6840      	ldr	r0, [r0, #4]
   d6e36:	f7fe ba09 	b.w	d524c <network_listening>

000d6e3a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e3a:	2200      	movs	r2, #0
   d6e3c:	4611      	mov	r1, r2
   d6e3e:	6840      	ldr	r0, [r0, #4]
   d6e40:	f7fe ba14 	b.w	d526c <network_get_listen_timeout>

000d6e44 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e44:	2200      	movs	r2, #0
   d6e46:	6840      	ldr	r0, [r0, #4]
   d6e48:	f7fe ba08 	b.w	d525c <network_set_listen_timeout>

000d6e4c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e4c:	2200      	movs	r2, #0
   d6e4e:	f081 0101 	eor.w	r1, r1, #1
   d6e52:	6840      	ldr	r0, [r0, #4]
   d6e54:	f7fe b9f2 	b.w	d523c <network_listen>

000d6e58 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6e58:	2300      	movs	r3, #0
   d6e5a:	461a      	mov	r2, r3
   d6e5c:	4619      	mov	r1, r3
   d6e5e:	6840      	ldr	r0, [r0, #4]
   d6e60:	f7fe b9e4 	b.w	d522c <network_off>

000d6e64 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6e64:	2300      	movs	r3, #0
   d6e66:	461a      	mov	r2, r3
   d6e68:	4619      	mov	r1, r3
   d6e6a:	6840      	ldr	r0, [r0, #4]
   d6e6c:	f7fe b9d6 	b.w	d521c <network_on>

000d6e70 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e70:	2200      	movs	r2, #0
   d6e72:	4611      	mov	r1, r2
   d6e74:	6840      	ldr	r0, [r0, #4]
   d6e76:	f7fe b9b9 	b.w	d51ec <network_connecting>

000d6e7a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e7a:	2200      	movs	r2, #0
   d6e7c:	2102      	movs	r1, #2
   d6e7e:	6840      	ldr	r0, [r0, #4]
   d6e80:	f7fe b9bc 	b.w	d51fc <network_disconnect>

000d6e84 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e84:	2300      	movs	r3, #0
   d6e86:	461a      	mov	r2, r3
   d6e88:	6840      	ldr	r0, [r0, #4]
   d6e8a:	f7fe b9a7 	b.w	d51dc <network_connect>
	...

000d6e90 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d6e90:	8983      	ldrh	r3, [r0, #12]
   d6e92:	b17b      	cbz	r3, d6eb4 <_ZNK10WiFiSignal10getQualityEv+0x24>
   d6e94:	6a03      	ldr	r3, [r0, #32]
   d6e96:	2b00      	cmp	r3, #0
   d6e98:	db0c      	blt.n	d6eb4 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d6e9a:	ee07 3a90 	vmov	s15, r3
   d6e9e:	eddf 6a07 	vldr	s13, [pc, #28]	; d6ebc <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d6ea2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6ec0 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d6ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6eae:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6eb2:	4770      	bx	lr
    }
    return -1.0f;
   d6eb4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6eb8:	4770      	bx	lr
   d6eba:	bf00      	nop
   d6ebc:	477fff00 	.word	0x477fff00
   d6ec0:	42c80000 	.word	0x42c80000

000d6ec4 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d6ec4:	8983      	ldrh	r3, [r0, #12]
   d6ec6:	b17b      	cbz	r3, d6ee8 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d6ec8:	6943      	ldr	r3, [r0, #20]
   d6eca:	2b00      	cmp	r3, #0
   d6ecc:	db0c      	blt.n	d6ee8 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d6ece:	ee07 3a90 	vmov	s15, r3
   d6ed2:	eddf 6a07 	vldr	s13, [pc, #28]	; d6ef0 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d6ed6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6ef4 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d6eda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6ee2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6ee6:	4770      	bx	lr
    }
    return -1.0f;
   d6ee8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6eec:	4770      	bx	lr
   d6eee:	bf00      	nop
   d6ef0:	477fff00 	.word	0x477fff00
   d6ef4:	42c80000 	.word	0x42c80000

000d6ef8 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6ef8:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d6efa:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6efc:	4606      	mov	r6, r0
    inf_ = inf;
   d6efe:	f100 040c 	add.w	r4, r0, #12
   d6f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f06:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6f0a:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d6f0e:	6933      	ldr	r3, [r6, #16]
   d6f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6f14:	bf0e      	itee	eq
   d6f16:	2302      	moveq	r3, #2
   d6f18:	2264      	movne	r2, #100	; 0x64
   d6f1a:	fb93 f3f2 	sdivne	r3, r3, r2
   d6f1e:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d6f20:	69b3      	ldr	r3, [r6, #24]
   d6f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6f26:	bf0e      	itee	eq
   d6f28:	2300      	moveq	r3, #0
   d6f2a:	2264      	movne	r2, #100	; 0x64
   d6f2c:	fb93 f3f2 	sdivne	r3, r3, r2
   d6f30:	60b3      	str	r3, [r6, #8]
    return true;
}
   d6f32:	2001      	movs	r0, #1
   d6f34:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6f38 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d6f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d6f3c:	4b16      	ldr	r3, [pc, #88]	; (d6f98 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d6f3e:	6003      	str	r3, [r0, #0]
   d6f40:	2500      	movs	r5, #0
   d6f42:	4688      	mov	r8, r1
   d6f44:	2702      	movs	r7, #2
   d6f46:	2618      	movs	r6, #24
   d6f48:	b086      	sub	sp, #24
   d6f4a:	6047      	str	r7, [r0, #4]
   d6f4c:	6085      	str	r5, [r0, #8]
   d6f4e:	4632      	mov	r2, r6
   d6f50:	4629      	mov	r1, r5
   d6f52:	4604      	mov	r4, r0
   d6f54:	300c      	adds	r0, #12
   d6f56:	f000 ffa0 	bl	d7e9a <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6f5a:	462a      	mov	r2, r5
   d6f5c:	4629      	mov	r1, r5
   d6f5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d6f62:	f7fe f953 	bl	d520c <network_ready>
   d6f66:	b190      	cbz	r0, d6f8e <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d6f68:	4632      	mov	r2, r6
   d6f6a:	4629      	mov	r1, r5
   d6f6c:	4668      	mov	r0, sp
   d6f6e:	f000 ff94 	bl	d7e9a <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d6f72:	462a      	mov	r2, r5
   d6f74:	4669      	mov	r1, sp
   d6f76:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d6f78:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d6f7c:	f7fe f89a 	bl	d50b4 <wlan_connected_info>
        if (r == 0) {
   d6f80:	b920      	cbnz	r0, d6f8c <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d6f82:	4669      	mov	r1, sp
   d6f84:	4620      	mov	r0, r4
   d6f86:	f7ff ffb7 	bl	d6ef8 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d6f8a:	e000      	b.n	d6f8e <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d6f8c:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d6f8e:	4620      	mov	r0, r4
   d6f90:	b006      	add	sp, #24
   d6f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f96:	bf00      	nop
   d6f98:	000d8b54 	.word	0x000d8b54

000d6f9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6f9c:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6f9e:	2204      	movs	r2, #4
   d6fa0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6fa2:	4a02      	ldr	r2, [pc, #8]	; (d6fac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6fa4:	601a      	str	r2, [r3, #0]
   d6fa6:	4770      	bx	lr
   d6fa8:	2003e6e0 	.word	0x2003e6e0
   d6fac:	000d8b20 	.word	0x000d8b20

000d6fb0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6fb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6fb2:	4b0c      	ldr	r3, [pc, #48]	; (d6fe4 <serialEventRun+0x34>)
   d6fb4:	b133      	cbz	r3, d6fc4 <serialEventRun+0x14>
   d6fb6:	f7ff fed9 	bl	d6d6c <_Z16_fetch_usbserialv>
   d6fba:	6803      	ldr	r3, [r0, #0]
   d6fbc:	691b      	ldr	r3, [r3, #16]
   d6fbe:	4798      	blx	r3
   d6fc0:	2800      	cmp	r0, #0
   d6fc2:	dc09      	bgt.n	d6fd8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6fc4:	4b08      	ldr	r3, [pc, #32]	; (d6fe8 <serialEventRun+0x38>)
   d6fc6:	b163      	cbz	r3, d6fe2 <serialEventRun+0x32>
   d6fc8:	f7ff fe4c 	bl	d6c64 <_Z22__fetch_global_Serial1v>
   d6fcc:	6803      	ldr	r3, [r0, #0]
   d6fce:	691b      	ldr	r3, [r3, #16]
   d6fd0:	4798      	blx	r3
   d6fd2:	2800      	cmp	r0, #0
   d6fd4:	dc03      	bgt.n	d6fde <serialEventRun+0x2e>
   d6fd6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6fd8:	f3af 8000 	nop.w
   d6fdc:	e7f2      	b.n	d6fc4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6fde:	f3af 8000 	nop.w
   d6fe2:	bd08      	pop	{r3, pc}
	...

000d6fec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6fec:	b508      	push	{r3, lr}
	serialEventRun();
   d6fee:	f7ff ffdf 	bl	d6fb0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6ff2:	f7fd fedf 	bl	d4db4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6ff6:	4b01      	ldr	r3, [pc, #4]	; (d6ffc <_post_loop+0x10>)
   d6ff8:	6018      	str	r0, [r3, #0]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	2003e6ec 	.word	0x2003e6ec

000d7000 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7000:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7002:	2300      	movs	r3, #0
   d7004:	9300      	str	r3, [sp, #0]
   d7006:	461a      	mov	r2, r3
   d7008:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d700c:	f7fe f8a4 	bl	d5158 <system_ctrl_set_result>
}
   d7010:	b003      	add	sp, #12
   d7012:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7018 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7018:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d701a:	8843      	ldrh	r3, [r0, #2]
   d701c:	2b0a      	cmp	r3, #10
   d701e:	d008      	beq.n	d7032 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7020:	2b50      	cmp	r3, #80	; 0x50
   d7022:	d109      	bne.n	d7038 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7024:	4b09      	ldr	r3, [pc, #36]	; (d704c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7026:	681b      	ldr	r3, [r3, #0]
   d7028:	b13b      	cbz	r3, d703a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d702a:	b003      	add	sp, #12
   d702c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7030:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7032:	f7ff ffe5 	bl	d7000 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7036:	e006      	b.n	d7046 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7038:	2300      	movs	r3, #0
   d703a:	9300      	str	r3, [sp, #0]
   d703c:	461a      	mov	r2, r3
   d703e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7042:	f7fe f889 	bl	d5158 <system_ctrl_set_result>
        break;
    }
}
   d7046:	b003      	add	sp, #12
   d7048:	f85d fb04 	ldr.w	pc, [sp], #4
   d704c:	2003e6e8 	.word	0x2003e6e8

000d7050 <module_user_init_hook>:

void module_user_init_hook()
{
   d7050:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7052:	f7fd fe9f 	bl	d4d94 <HAL_RNG_GetRandomNumber>
   d7056:	4604      	mov	r4, r0
    srand(seed);
   d7058:	f000 ff28 	bl	d7eac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d705c:	4b07      	ldr	r3, [pc, #28]	; (d707c <module_user_init_hook+0x2c>)
   d705e:	b113      	cbz	r3, d7066 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7060:	4620      	mov	r0, r4
   d7062:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7066:	2100      	movs	r1, #0
   d7068:	4804      	ldr	r0, [pc, #16]	; (d707c <module_user_init_hook+0x2c>)
   d706a:	f7fe f8af 	bl	d51cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d706e:	2100      	movs	r1, #0
   d7070:	4803      	ldr	r0, [pc, #12]	; (d7080 <module_user_init_hook+0x30>)
}
   d7072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7076:	f7fe b865 	b.w	d5144 <system_ctrl_set_app_request_handler>
   d707a:	bf00      	nop
   d707c:	00000000 	.word	0x00000000
   d7080:	000d7019 	.word	0x000d7019

000d7084 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7084:	b510      	push	{r4, lr}
   d7086:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7088:	480f      	ldr	r0, [pc, #60]	; (d70c8 <pinAvailable+0x44>)
   d708a:	f7fe ff03 	bl	d5e94 <_ZN8SPIClass9isEnabledEv>
   d708e:	b128      	cbz	r0, d709c <pinAvailable+0x18>
   d7090:	f1a4 030b 	sub.w	r3, r4, #11
   d7094:	2b02      	cmp	r3, #2
   d7096:	d801      	bhi.n	d709c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7098:	2000      	movs	r0, #0
   d709a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d709c:	f000 f83e 	bl	d711c <_Z19__fetch_global_Wirev>
   d70a0:	f7fe fc8a 	bl	d59b8 <_ZN7TwoWire9isEnabledEv>
   d70a4:	b108      	cbz	r0, d70aa <pinAvailable+0x26>
   d70a6:	2c01      	cmp	r4, #1
   d70a8:	d9f6      	bls.n	d7098 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d70aa:	f7ff fddb 	bl	d6c64 <_Z22__fetch_global_Serial1v>
   d70ae:	f7ff fdd5 	bl	d6c5c <_ZN11USARTSerial9isEnabledEv>
   d70b2:	b118      	cbz	r0, d70bc <pinAvailable+0x38>
   d70b4:	f1a4 0309 	sub.w	r3, r4, #9
   d70b8:	2b01      	cmp	r3, #1
   d70ba:	d9ed      	bls.n	d7098 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d70bc:	2c23      	cmp	r4, #35	; 0x23
   d70be:	bf8c      	ite	hi
   d70c0:	2000      	movhi	r0, #0
   d70c2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d70c4:	bd10      	pop	{r4, pc}
   d70c6:	bf00      	nop
   d70c8:	2003e708 	.word	0x2003e708

000d70cc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70cc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d70ce:	b538      	push	{r3, r4, r5, lr}
   d70d0:	4604      	mov	r4, r0
   d70d2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70d4:	d80a      	bhi.n	d70ec <pinMode+0x20>
   d70d6:	29ff      	cmp	r1, #255	; 0xff
   d70d8:	d008      	beq.n	d70ec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d70da:	f7ff ffd3 	bl	d7084 <pinAvailable>
   d70de:	b128      	cbz	r0, d70ec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d70e0:	4629      	mov	r1, r5
   d70e2:	4620      	mov	r0, r4
}
   d70e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d70e8:	f7fd be8c 	b.w	d4e04 <HAL_Pin_Mode>
   d70ec:	bd38      	pop	{r3, r4, r5, pc}

000d70ee <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d70ee:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d70f0:	b510      	push	{r4, lr}
   d70f2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d70f4:	bf9c      	itt	ls
   d70f6:	340e      	addls	r4, #14
   d70f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d70fa:	4620      	mov	r0, r4
   d70fc:	f7ff ffc2 	bl	d7084 <pinAvailable>
   d7100:	b150      	cbz	r0, d7118 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7102:	2103      	movs	r1, #3
   d7104:	4620      	mov	r0, r4
   d7106:	f7fd fe75 	bl	d4df4 <HAL_Validate_Pin_Function>
   d710a:	2803      	cmp	r0, #3
   d710c:	d104      	bne.n	d7118 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d710e:	4620      	mov	r0, r4
}
   d7110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7114:	f7fd be8e 	b.w	d4e34 <HAL_ADC_Read>
}
   d7118:	2000      	movs	r0, #0
   d711a:	bd10      	pop	{r4, pc}

000d711c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d711c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d711e:	4d0b      	ldr	r5, [pc, #44]	; (d714c <_Z19__fetch_global_Wirev+0x30>)
   d7120:	6829      	ldr	r1, [r5, #0]
   d7122:	f011 0401 	ands.w	r4, r1, #1
   d7126:	d10f      	bne.n	d7148 <_Z19__fetch_global_Wirev+0x2c>
   d7128:	4628      	mov	r0, r5
   d712a:	f7fc ffbc 	bl	d40a6 <__cxa_guard_acquire>
   d712e:	b158      	cbz	r0, d7148 <_Z19__fetch_global_Wirev+0x2c>
   d7130:	4621      	mov	r1, r4
   d7132:	4807      	ldr	r0, [pc, #28]	; (d7150 <_Z19__fetch_global_Wirev+0x34>)
   d7134:	f7fe fc2e 	bl	d5994 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7138:	4628      	mov	r0, r5
   d713a:	f7fc ffb9 	bl	d40b0 <__cxa_guard_release>
   d713e:	4a05      	ldr	r2, [pc, #20]	; (d7154 <_Z19__fetch_global_Wirev+0x38>)
   d7140:	4905      	ldr	r1, [pc, #20]	; (d7158 <_Z19__fetch_global_Wirev+0x3c>)
   d7142:	4803      	ldr	r0, [pc, #12]	; (d7150 <_Z19__fetch_global_Wirev+0x34>)
   d7144:	f000 f82c 	bl	d71a0 <__aeabi_atexit>
	return wire;
}
   d7148:	4801      	ldr	r0, [pc, #4]	; (d7150 <_Z19__fetch_global_Wirev+0x34>)
   d714a:	bd38      	pop	{r3, r4, r5, pc}
   d714c:	2003e6f0 	.word	0x2003e6f0
   d7150:	2003e6f4 	.word	0x2003e6f4
   d7154:	2003e1ec 	.word	0x2003e1ec
   d7158:	000d593d 	.word	0x000d593d

000d715c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d715c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d715e:	4c0c      	ldr	r4, [pc, #48]	; (d7190 <_GLOBAL__sub_I_SPI+0x34>)
   d7160:	4e0c      	ldr	r6, [pc, #48]	; (d7194 <_GLOBAL__sub_I_SPI+0x38>)
   d7162:	4d0d      	ldr	r5, [pc, #52]	; (d7198 <_GLOBAL__sub_I_SPI+0x3c>)
   d7164:	2100      	movs	r1, #0
   d7166:	4620      	mov	r0, r4
   d7168:	f7fe fe80 	bl	d5e6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d716c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d716e:	4c0b      	ldr	r4, [pc, #44]	; (d719c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7170:	4632      	mov	r2, r6
   d7172:	4629      	mov	r1, r5
   d7174:	f000 f814 	bl	d71a0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7178:	2101      	movs	r1, #1
   d717a:	4620      	mov	r0, r4
   d717c:	f7fe fe76 	bl	d5e6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7180:	4632      	mov	r2, r6
   d7182:	4629      	mov	r1, r5
   d7184:	4620      	mov	r0, r4
   d7186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d718a:	f000 b809 	b.w	d71a0 <__aeabi_atexit>
   d718e:	bf00      	nop
   d7190:	2003e708 	.word	0x2003e708
   d7194:	2003e1ec 	.word	0x2003e1ec
   d7198:	000d5e5d 	.word	0x000d5e5d
   d719c:	2003e718 	.word	0x2003e718

000d71a0 <__aeabi_atexit>:
   d71a0:	460b      	mov	r3, r1
   d71a2:	4601      	mov	r1, r0
   d71a4:	4618      	mov	r0, r3
   d71a6:	f000 bd67 	b.w	d7c78 <__cxa_atexit>

000d71aa <_ZdlPvj>:
   d71aa:	f7fc bf78 	b.w	d409e <_ZdlPv>

000d71ae <_ZSt25__throw_bad_function_callv>:
   d71ae:	b508      	push	{r3, lr}
   d71b0:	f7fe f88c 	bl	d52cc <abort>

000d71b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d71b4:	4b24      	ldr	r3, [pc, #144]	; (d7248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d71b6:	681a      	ldr	r2, [r3, #0]
   d71b8:	07d0      	lsls	r0, r2, #31
   d71ba:	bf5c      	itt	pl
   d71bc:	2201      	movpl	r2, #1
   d71be:	601a      	strpl	r2, [r3, #0]
   d71c0:	4b22      	ldr	r3, [pc, #136]	; (d724c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d71c2:	681a      	ldr	r2, [r3, #0]
   d71c4:	07d1      	lsls	r1, r2, #31
   d71c6:	bf5c      	itt	pl
   d71c8:	2201      	movpl	r2, #1
   d71ca:	601a      	strpl	r2, [r3, #0]
   d71cc:	4b20      	ldr	r3, [pc, #128]	; (d7250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d71ce:	681a      	ldr	r2, [r3, #0]
   d71d0:	07d2      	lsls	r2, r2, #31
   d71d2:	bf5c      	itt	pl
   d71d4:	2201      	movpl	r2, #1
   d71d6:	601a      	strpl	r2, [r3, #0]
   d71d8:	4b1e      	ldr	r3, [pc, #120]	; (d7254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d71da:	681a      	ldr	r2, [r3, #0]
   d71dc:	07d0      	lsls	r0, r2, #31
   d71de:	bf5c      	itt	pl
   d71e0:	2201      	movpl	r2, #1
   d71e2:	601a      	strpl	r2, [r3, #0]
   d71e4:	4b1c      	ldr	r3, [pc, #112]	; (d7258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d71e6:	681a      	ldr	r2, [r3, #0]
   d71e8:	07d1      	lsls	r1, r2, #31
   d71ea:	bf5c      	itt	pl
   d71ec:	2201      	movpl	r2, #1
   d71ee:	601a      	strpl	r2, [r3, #0]
   d71f0:	4b1a      	ldr	r3, [pc, #104]	; (d725c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d71f2:	681a      	ldr	r2, [r3, #0]
   d71f4:	07d2      	lsls	r2, r2, #31
   d71f6:	bf5c      	itt	pl
   d71f8:	2201      	movpl	r2, #1
   d71fa:	601a      	strpl	r2, [r3, #0]
   d71fc:	4b18      	ldr	r3, [pc, #96]	; (d7260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d71fe:	681a      	ldr	r2, [r3, #0]
   d7200:	07d0      	lsls	r0, r2, #31
   d7202:	bf5c      	itt	pl
   d7204:	2201      	movpl	r2, #1
   d7206:	601a      	strpl	r2, [r3, #0]
   d7208:	4b16      	ldr	r3, [pc, #88]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d720a:	681a      	ldr	r2, [r3, #0]
   d720c:	07d1      	lsls	r1, r2, #31
   d720e:	bf5c      	itt	pl
   d7210:	2201      	movpl	r2, #1
   d7212:	601a      	strpl	r2, [r3, #0]
   d7214:	4b14      	ldr	r3, [pc, #80]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7216:	681a      	ldr	r2, [r3, #0]
   d7218:	07d2      	lsls	r2, r2, #31
   d721a:	bf5c      	itt	pl
   d721c:	2201      	movpl	r2, #1
   d721e:	601a      	strpl	r2, [r3, #0]
   d7220:	4b12      	ldr	r3, [pc, #72]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7222:	681a      	ldr	r2, [r3, #0]
   d7224:	07d0      	lsls	r0, r2, #31
   d7226:	bf5c      	itt	pl
   d7228:	2201      	movpl	r2, #1
   d722a:	601a      	strpl	r2, [r3, #0]
   d722c:	4b10      	ldr	r3, [pc, #64]	; (d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d722e:	681a      	ldr	r2, [r3, #0]
   d7230:	07d1      	lsls	r1, r2, #31
   d7232:	bf5c      	itt	pl
   d7234:	2201      	movpl	r2, #1
   d7236:	601a      	strpl	r2, [r3, #0]
   d7238:	4b0e      	ldr	r3, [pc, #56]	; (d7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d723a:	681a      	ldr	r2, [r3, #0]
   d723c:	07d2      	lsls	r2, r2, #31
   d723e:	bf5c      	itt	pl
   d7240:	2201      	movpl	r2, #1
   d7242:	601a      	strpl	r2, [r3, #0]
   d7244:	4770      	bx	lr
   d7246:	bf00      	nop
   d7248:	2003e754 	.word	0x2003e754
   d724c:	2003e750 	.word	0x2003e750
   d7250:	2003e74c 	.word	0x2003e74c
   d7254:	2003e748 	.word	0x2003e748
   d7258:	2003e744 	.word	0x2003e744
   d725c:	2003e740 	.word	0x2003e740
   d7260:	2003e73c 	.word	0x2003e73c
   d7264:	2003e738 	.word	0x2003e738
   d7268:	2003e734 	.word	0x2003e734
   d726c:	2003e730 	.word	0x2003e730
   d7270:	2003e72c 	.word	0x2003e72c
   d7274:	2003e728 	.word	0x2003e728

000d7278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7278:	4b18      	ldr	r3, [pc, #96]	; (d72dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d727a:	681a      	ldr	r2, [r3, #0]
   d727c:	07d1      	lsls	r1, r2, #31
   d727e:	bf5c      	itt	pl
   d7280:	2201      	movpl	r2, #1
   d7282:	601a      	strpl	r2, [r3, #0]
   d7284:	4b16      	ldr	r3, [pc, #88]	; (d72e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7286:	681a      	ldr	r2, [r3, #0]
   d7288:	07d2      	lsls	r2, r2, #31
   d728a:	bf5c      	itt	pl
   d728c:	2201      	movpl	r2, #1
   d728e:	601a      	strpl	r2, [r3, #0]
   d7290:	4b14      	ldr	r3, [pc, #80]	; (d72e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7292:	681a      	ldr	r2, [r3, #0]
   d7294:	07d0      	lsls	r0, r2, #31
   d7296:	bf5c      	itt	pl
   d7298:	2201      	movpl	r2, #1
   d729a:	601a      	strpl	r2, [r3, #0]
   d729c:	4b12      	ldr	r3, [pc, #72]	; (d72e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d729e:	681a      	ldr	r2, [r3, #0]
   d72a0:	07d1      	lsls	r1, r2, #31
   d72a2:	bf5c      	itt	pl
   d72a4:	2201      	movpl	r2, #1
   d72a6:	601a      	strpl	r2, [r3, #0]
   d72a8:	4b10      	ldr	r3, [pc, #64]	; (d72ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d72aa:	681a      	ldr	r2, [r3, #0]
   d72ac:	07d2      	lsls	r2, r2, #31
   d72ae:	bf5c      	itt	pl
   d72b0:	2201      	movpl	r2, #1
   d72b2:	601a      	strpl	r2, [r3, #0]
   d72b4:	4b0e      	ldr	r3, [pc, #56]	; (d72f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d72b6:	681a      	ldr	r2, [r3, #0]
   d72b8:	07d0      	lsls	r0, r2, #31
   d72ba:	bf5c      	itt	pl
   d72bc:	2201      	movpl	r2, #1
   d72be:	601a      	strpl	r2, [r3, #0]
   d72c0:	4b0c      	ldr	r3, [pc, #48]	; (d72f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d72c2:	681a      	ldr	r2, [r3, #0]
   d72c4:	07d1      	lsls	r1, r2, #31
   d72c6:	bf5c      	itt	pl
   d72c8:	2201      	movpl	r2, #1
   d72ca:	601a      	strpl	r2, [r3, #0]
   d72cc:	4b0a      	ldr	r3, [pc, #40]	; (d72f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d72ce:	681a      	ldr	r2, [r3, #0]
   d72d0:	07d2      	lsls	r2, r2, #31
   d72d2:	bf5c      	itt	pl
   d72d4:	2201      	movpl	r2, #1
   d72d6:	601a      	strpl	r2, [r3, #0]
   d72d8:	4770      	bx	lr
   d72da:	bf00      	nop
   d72dc:	2003e774 	.word	0x2003e774
   d72e0:	2003e770 	.word	0x2003e770
   d72e4:	2003e76c 	.word	0x2003e76c
   d72e8:	2003e768 	.word	0x2003e768
   d72ec:	2003e764 	.word	0x2003e764
   d72f0:	2003e760 	.word	0x2003e760
   d72f4:	2003e75c 	.word	0x2003e75c
   d72f8:	2003e758 	.word	0x2003e758

000d72fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d72fc:	4b18      	ldr	r3, [pc, #96]	; (d7360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d72fe:	681a      	ldr	r2, [r3, #0]
   d7300:	07d1      	lsls	r1, r2, #31
   d7302:	bf5c      	itt	pl
   d7304:	2201      	movpl	r2, #1
   d7306:	601a      	strpl	r2, [r3, #0]
   d7308:	4b16      	ldr	r3, [pc, #88]	; (d7364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d730a:	681a      	ldr	r2, [r3, #0]
   d730c:	07d2      	lsls	r2, r2, #31
   d730e:	bf5c      	itt	pl
   d7310:	2201      	movpl	r2, #1
   d7312:	601a      	strpl	r2, [r3, #0]
   d7314:	4b14      	ldr	r3, [pc, #80]	; (d7368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7316:	681a      	ldr	r2, [r3, #0]
   d7318:	07d0      	lsls	r0, r2, #31
   d731a:	bf5c      	itt	pl
   d731c:	2201      	movpl	r2, #1
   d731e:	601a      	strpl	r2, [r3, #0]
   d7320:	4b12      	ldr	r3, [pc, #72]	; (d736c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7322:	681a      	ldr	r2, [r3, #0]
   d7324:	07d1      	lsls	r1, r2, #31
   d7326:	bf5c      	itt	pl
   d7328:	2201      	movpl	r2, #1
   d732a:	601a      	strpl	r2, [r3, #0]
   d732c:	4b10      	ldr	r3, [pc, #64]	; (d7370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d732e:	681a      	ldr	r2, [r3, #0]
   d7330:	07d2      	lsls	r2, r2, #31
   d7332:	bf5c      	itt	pl
   d7334:	2201      	movpl	r2, #1
   d7336:	601a      	strpl	r2, [r3, #0]
   d7338:	4b0e      	ldr	r3, [pc, #56]	; (d7374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d733a:	681a      	ldr	r2, [r3, #0]
   d733c:	07d0      	lsls	r0, r2, #31
   d733e:	bf5c      	itt	pl
   d7340:	2201      	movpl	r2, #1
   d7342:	601a      	strpl	r2, [r3, #0]
   d7344:	4b0c      	ldr	r3, [pc, #48]	; (d7378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7346:	681a      	ldr	r2, [r3, #0]
   d7348:	07d1      	lsls	r1, r2, #31
   d734a:	bf5c      	itt	pl
   d734c:	2201      	movpl	r2, #1
   d734e:	601a      	strpl	r2, [r3, #0]
   d7350:	4b0a      	ldr	r3, [pc, #40]	; (d737c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7352:	681a      	ldr	r2, [r3, #0]
   d7354:	07d2      	lsls	r2, r2, #31
   d7356:	bf5c      	itt	pl
   d7358:	2201      	movpl	r2, #1
   d735a:	601a      	strpl	r2, [r3, #0]
   d735c:	4770      	bx	lr
   d735e:	bf00      	nop
   d7360:	2003e794 	.word	0x2003e794
   d7364:	2003e790 	.word	0x2003e790
   d7368:	2003e78c 	.word	0x2003e78c
   d736c:	2003e788 	.word	0x2003e788
   d7370:	2003e784 	.word	0x2003e784
   d7374:	2003e780 	.word	0x2003e780
   d7378:	2003e77c 	.word	0x2003e77c
   d737c:	2003e778 	.word	0x2003e778

000d7380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7380:	4b24      	ldr	r3, [pc, #144]	; (d7414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7382:	681a      	ldr	r2, [r3, #0]
   d7384:	07d0      	lsls	r0, r2, #31
   d7386:	bf5c      	itt	pl
   d7388:	2201      	movpl	r2, #1
   d738a:	601a      	strpl	r2, [r3, #0]
   d738c:	4b22      	ldr	r3, [pc, #136]	; (d7418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d738e:	681a      	ldr	r2, [r3, #0]
   d7390:	07d1      	lsls	r1, r2, #31
   d7392:	bf5c      	itt	pl
   d7394:	2201      	movpl	r2, #1
   d7396:	601a      	strpl	r2, [r3, #0]
   d7398:	4b20      	ldr	r3, [pc, #128]	; (d741c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d739a:	681a      	ldr	r2, [r3, #0]
   d739c:	07d2      	lsls	r2, r2, #31
   d739e:	bf5c      	itt	pl
   d73a0:	2201      	movpl	r2, #1
   d73a2:	601a      	strpl	r2, [r3, #0]
   d73a4:	4b1e      	ldr	r3, [pc, #120]	; (d7420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d73a6:	681a      	ldr	r2, [r3, #0]
   d73a8:	07d0      	lsls	r0, r2, #31
   d73aa:	bf5c      	itt	pl
   d73ac:	2201      	movpl	r2, #1
   d73ae:	601a      	strpl	r2, [r3, #0]
   d73b0:	4b1c      	ldr	r3, [pc, #112]	; (d7424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d73b2:	681a      	ldr	r2, [r3, #0]
   d73b4:	07d1      	lsls	r1, r2, #31
   d73b6:	bf5c      	itt	pl
   d73b8:	2201      	movpl	r2, #1
   d73ba:	601a      	strpl	r2, [r3, #0]
   d73bc:	4b1a      	ldr	r3, [pc, #104]	; (d7428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d73be:	681a      	ldr	r2, [r3, #0]
   d73c0:	07d2      	lsls	r2, r2, #31
   d73c2:	bf5c      	itt	pl
   d73c4:	2201      	movpl	r2, #1
   d73c6:	601a      	strpl	r2, [r3, #0]
   d73c8:	4b18      	ldr	r3, [pc, #96]	; (d742c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d73ca:	681a      	ldr	r2, [r3, #0]
   d73cc:	07d0      	lsls	r0, r2, #31
   d73ce:	bf5c      	itt	pl
   d73d0:	2201      	movpl	r2, #1
   d73d2:	601a      	strpl	r2, [r3, #0]
   d73d4:	4b16      	ldr	r3, [pc, #88]	; (d7430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d73d6:	681a      	ldr	r2, [r3, #0]
   d73d8:	07d1      	lsls	r1, r2, #31
   d73da:	bf5c      	itt	pl
   d73dc:	2201      	movpl	r2, #1
   d73de:	601a      	strpl	r2, [r3, #0]
   d73e0:	4b14      	ldr	r3, [pc, #80]	; (d7434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d73e2:	681a      	ldr	r2, [r3, #0]
   d73e4:	07d2      	lsls	r2, r2, #31
   d73e6:	bf5c      	itt	pl
   d73e8:	2201      	movpl	r2, #1
   d73ea:	601a      	strpl	r2, [r3, #0]
   d73ec:	4b12      	ldr	r3, [pc, #72]	; (d7438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d73ee:	681a      	ldr	r2, [r3, #0]
   d73f0:	07d0      	lsls	r0, r2, #31
   d73f2:	bf5c      	itt	pl
   d73f4:	2201      	movpl	r2, #1
   d73f6:	601a      	strpl	r2, [r3, #0]
   d73f8:	4b10      	ldr	r3, [pc, #64]	; (d743c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d73fa:	681a      	ldr	r2, [r3, #0]
   d73fc:	07d1      	lsls	r1, r2, #31
   d73fe:	bf5c      	itt	pl
   d7400:	2201      	movpl	r2, #1
   d7402:	601a      	strpl	r2, [r3, #0]
   d7404:	4b0e      	ldr	r3, [pc, #56]	; (d7440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7406:	681a      	ldr	r2, [r3, #0]
   d7408:	07d2      	lsls	r2, r2, #31
   d740a:	bf5c      	itt	pl
   d740c:	2201      	movpl	r2, #1
   d740e:	601a      	strpl	r2, [r3, #0]
   d7410:	4770      	bx	lr
   d7412:	bf00      	nop
   d7414:	2003e7c4 	.word	0x2003e7c4
   d7418:	2003e7c0 	.word	0x2003e7c0
   d741c:	2003e7bc 	.word	0x2003e7bc
   d7420:	2003e7b8 	.word	0x2003e7b8
   d7424:	2003e7b4 	.word	0x2003e7b4
   d7428:	2003e7b0 	.word	0x2003e7b0
   d742c:	2003e7ac 	.word	0x2003e7ac
   d7430:	2003e7a8 	.word	0x2003e7a8
   d7434:	2003e7a4 	.word	0x2003e7a4
   d7438:	2003e7a0 	.word	0x2003e7a0
   d743c:	2003e79c 	.word	0x2003e79c
   d7440:	2003e798 	.word	0x2003e798

000d7444 <__aeabi_drsub>:
   d7444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7448:	e002      	b.n	d7450 <__adddf3>
   d744a:	bf00      	nop

000d744c <__aeabi_dsub>:
   d744c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7450 <__adddf3>:
   d7450:	b530      	push	{r4, r5, lr}
   d7452:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7456:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d745a:	ea94 0f05 	teq	r4, r5
   d745e:	bf08      	it	eq
   d7460:	ea90 0f02 	teqeq	r0, r2
   d7464:	bf1f      	itttt	ne
   d7466:	ea54 0c00 	orrsne.w	ip, r4, r0
   d746a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d746e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7476:	f000 80e2 	beq.w	d763e <__adddf3+0x1ee>
   d747a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d747e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7482:	bfb8      	it	lt
   d7484:	426d      	neglt	r5, r5
   d7486:	dd0c      	ble.n	d74a2 <__adddf3+0x52>
   d7488:	442c      	add	r4, r5
   d748a:	ea80 0202 	eor.w	r2, r0, r2
   d748e:	ea81 0303 	eor.w	r3, r1, r3
   d7492:	ea82 0000 	eor.w	r0, r2, r0
   d7496:	ea83 0101 	eor.w	r1, r3, r1
   d749a:	ea80 0202 	eor.w	r2, r0, r2
   d749e:	ea81 0303 	eor.w	r3, r1, r3
   d74a2:	2d36      	cmp	r5, #54	; 0x36
   d74a4:	bf88      	it	hi
   d74a6:	bd30      	pophi	{r4, r5, pc}
   d74a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d74ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d74b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d74b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d74b8:	d002      	beq.n	d74c0 <__adddf3+0x70>
   d74ba:	4240      	negs	r0, r0
   d74bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d74c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d74c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d74c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d74cc:	d002      	beq.n	d74d4 <__adddf3+0x84>
   d74ce:	4252      	negs	r2, r2
   d74d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d74d4:	ea94 0f05 	teq	r4, r5
   d74d8:	f000 80a7 	beq.w	d762a <__adddf3+0x1da>
   d74dc:	f1a4 0401 	sub.w	r4, r4, #1
   d74e0:	f1d5 0e20 	rsbs	lr, r5, #32
   d74e4:	db0d      	blt.n	d7502 <__adddf3+0xb2>
   d74e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d74ea:	fa22 f205 	lsr.w	r2, r2, r5
   d74ee:	1880      	adds	r0, r0, r2
   d74f0:	f141 0100 	adc.w	r1, r1, #0
   d74f4:	fa03 f20e 	lsl.w	r2, r3, lr
   d74f8:	1880      	adds	r0, r0, r2
   d74fa:	fa43 f305 	asr.w	r3, r3, r5
   d74fe:	4159      	adcs	r1, r3
   d7500:	e00e      	b.n	d7520 <__adddf3+0xd0>
   d7502:	f1a5 0520 	sub.w	r5, r5, #32
   d7506:	f10e 0e20 	add.w	lr, lr, #32
   d750a:	2a01      	cmp	r2, #1
   d750c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7510:	bf28      	it	cs
   d7512:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7516:	fa43 f305 	asr.w	r3, r3, r5
   d751a:	18c0      	adds	r0, r0, r3
   d751c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7524:	d507      	bpl.n	d7536 <__adddf3+0xe6>
   d7526:	f04f 0e00 	mov.w	lr, #0
   d752a:	f1dc 0c00 	rsbs	ip, ip, #0
   d752e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7532:	eb6e 0101 	sbc.w	r1, lr, r1
   d7536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d753a:	d31b      	bcc.n	d7574 <__adddf3+0x124>
   d753c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7540:	d30c      	bcc.n	d755c <__adddf3+0x10c>
   d7542:	0849      	lsrs	r1, r1, #1
   d7544:	ea5f 0030 	movs.w	r0, r0, rrx
   d7548:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d754c:	f104 0401 	add.w	r4, r4, #1
   d7550:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7558:	f080 809a 	bcs.w	d7690 <__adddf3+0x240>
   d755c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7560:	bf08      	it	eq
   d7562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7566:	f150 0000 	adcs.w	r0, r0, #0
   d756a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d756e:	ea41 0105 	orr.w	r1, r1, r5
   d7572:	bd30      	pop	{r4, r5, pc}
   d7574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7578:	4140      	adcs	r0, r0
   d757a:	eb41 0101 	adc.w	r1, r1, r1
   d757e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7582:	f1a4 0401 	sub.w	r4, r4, #1
   d7586:	d1e9      	bne.n	d755c <__adddf3+0x10c>
   d7588:	f091 0f00 	teq	r1, #0
   d758c:	bf04      	itt	eq
   d758e:	4601      	moveq	r1, r0
   d7590:	2000      	moveq	r0, #0
   d7592:	fab1 f381 	clz	r3, r1
   d7596:	bf08      	it	eq
   d7598:	3320      	addeq	r3, #32
   d759a:	f1a3 030b 	sub.w	r3, r3, #11
   d759e:	f1b3 0220 	subs.w	r2, r3, #32
   d75a2:	da0c      	bge.n	d75be <__adddf3+0x16e>
   d75a4:	320c      	adds	r2, #12
   d75a6:	dd08      	ble.n	d75ba <__adddf3+0x16a>
   d75a8:	f102 0c14 	add.w	ip, r2, #20
   d75ac:	f1c2 020c 	rsb	r2, r2, #12
   d75b0:	fa01 f00c 	lsl.w	r0, r1, ip
   d75b4:	fa21 f102 	lsr.w	r1, r1, r2
   d75b8:	e00c      	b.n	d75d4 <__adddf3+0x184>
   d75ba:	f102 0214 	add.w	r2, r2, #20
   d75be:	bfd8      	it	le
   d75c0:	f1c2 0c20 	rsble	ip, r2, #32
   d75c4:	fa01 f102 	lsl.w	r1, r1, r2
   d75c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d75cc:	bfdc      	itt	le
   d75ce:	ea41 010c 	orrle.w	r1, r1, ip
   d75d2:	4090      	lslle	r0, r2
   d75d4:	1ae4      	subs	r4, r4, r3
   d75d6:	bfa2      	ittt	ge
   d75d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d75dc:	4329      	orrge	r1, r5
   d75de:	bd30      	popge	{r4, r5, pc}
   d75e0:	ea6f 0404 	mvn.w	r4, r4
   d75e4:	3c1f      	subs	r4, #31
   d75e6:	da1c      	bge.n	d7622 <__adddf3+0x1d2>
   d75e8:	340c      	adds	r4, #12
   d75ea:	dc0e      	bgt.n	d760a <__adddf3+0x1ba>
   d75ec:	f104 0414 	add.w	r4, r4, #20
   d75f0:	f1c4 0220 	rsb	r2, r4, #32
   d75f4:	fa20 f004 	lsr.w	r0, r0, r4
   d75f8:	fa01 f302 	lsl.w	r3, r1, r2
   d75fc:	ea40 0003 	orr.w	r0, r0, r3
   d7600:	fa21 f304 	lsr.w	r3, r1, r4
   d7604:	ea45 0103 	orr.w	r1, r5, r3
   d7608:	bd30      	pop	{r4, r5, pc}
   d760a:	f1c4 040c 	rsb	r4, r4, #12
   d760e:	f1c4 0220 	rsb	r2, r4, #32
   d7612:	fa20 f002 	lsr.w	r0, r0, r2
   d7616:	fa01 f304 	lsl.w	r3, r1, r4
   d761a:	ea40 0003 	orr.w	r0, r0, r3
   d761e:	4629      	mov	r1, r5
   d7620:	bd30      	pop	{r4, r5, pc}
   d7622:	fa21 f004 	lsr.w	r0, r1, r4
   d7626:	4629      	mov	r1, r5
   d7628:	bd30      	pop	{r4, r5, pc}
   d762a:	f094 0f00 	teq	r4, #0
   d762e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7632:	bf06      	itte	eq
   d7634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7638:	3401      	addeq	r4, #1
   d763a:	3d01      	subne	r5, #1
   d763c:	e74e      	b.n	d74dc <__adddf3+0x8c>
   d763e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7642:	bf18      	it	ne
   d7644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7648:	d029      	beq.n	d769e <__adddf3+0x24e>
   d764a:	ea94 0f05 	teq	r4, r5
   d764e:	bf08      	it	eq
   d7650:	ea90 0f02 	teqeq	r0, r2
   d7654:	d005      	beq.n	d7662 <__adddf3+0x212>
   d7656:	ea54 0c00 	orrs.w	ip, r4, r0
   d765a:	bf04      	itt	eq
   d765c:	4619      	moveq	r1, r3
   d765e:	4610      	moveq	r0, r2
   d7660:	bd30      	pop	{r4, r5, pc}
   d7662:	ea91 0f03 	teq	r1, r3
   d7666:	bf1e      	ittt	ne
   d7668:	2100      	movne	r1, #0
   d766a:	2000      	movne	r0, #0
   d766c:	bd30      	popne	{r4, r5, pc}
   d766e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7672:	d105      	bne.n	d7680 <__adddf3+0x230>
   d7674:	0040      	lsls	r0, r0, #1
   d7676:	4149      	adcs	r1, r1
   d7678:	bf28      	it	cs
   d767a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d767e:	bd30      	pop	{r4, r5, pc}
   d7680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7684:	bf3c      	itt	cc
   d7686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d768a:	bd30      	popcc	{r4, r5, pc}
   d768c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7698:	f04f 0000 	mov.w	r0, #0
   d769c:	bd30      	pop	{r4, r5, pc}
   d769e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d76a2:	bf1a      	itte	ne
   d76a4:	4619      	movne	r1, r3
   d76a6:	4610      	movne	r0, r2
   d76a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d76ac:	bf1c      	itt	ne
   d76ae:	460b      	movne	r3, r1
   d76b0:	4602      	movne	r2, r0
   d76b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d76b6:	bf06      	itte	eq
   d76b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d76bc:	ea91 0f03 	teqeq	r1, r3
   d76c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d76c4:	bd30      	pop	{r4, r5, pc}
   d76c6:	bf00      	nop

000d76c8 <__aeabi_ui2d>:
   d76c8:	f090 0f00 	teq	r0, #0
   d76cc:	bf04      	itt	eq
   d76ce:	2100      	moveq	r1, #0
   d76d0:	4770      	bxeq	lr
   d76d2:	b530      	push	{r4, r5, lr}
   d76d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d76d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d76dc:	f04f 0500 	mov.w	r5, #0
   d76e0:	f04f 0100 	mov.w	r1, #0
   d76e4:	e750      	b.n	d7588 <__adddf3+0x138>
   d76e6:	bf00      	nop

000d76e8 <__aeabi_i2d>:
   d76e8:	f090 0f00 	teq	r0, #0
   d76ec:	bf04      	itt	eq
   d76ee:	2100      	moveq	r1, #0
   d76f0:	4770      	bxeq	lr
   d76f2:	b530      	push	{r4, r5, lr}
   d76f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d76f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d76fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7700:	bf48      	it	mi
   d7702:	4240      	negmi	r0, r0
   d7704:	f04f 0100 	mov.w	r1, #0
   d7708:	e73e      	b.n	d7588 <__adddf3+0x138>
   d770a:	bf00      	nop

000d770c <__aeabi_f2d>:
   d770c:	0042      	lsls	r2, r0, #1
   d770e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7712:	ea4f 0131 	mov.w	r1, r1, rrx
   d7716:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d771a:	bf1f      	itttt	ne
   d771c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7728:	4770      	bxne	lr
   d772a:	f092 0f00 	teq	r2, #0
   d772e:	bf14      	ite	ne
   d7730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7734:	4770      	bxeq	lr
   d7736:	b530      	push	{r4, r5, lr}
   d7738:	f44f 7460 	mov.w	r4, #896	; 0x380
   d773c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7744:	e720      	b.n	d7588 <__adddf3+0x138>
   d7746:	bf00      	nop

000d7748 <__aeabi_ul2d>:
   d7748:	ea50 0201 	orrs.w	r2, r0, r1
   d774c:	bf08      	it	eq
   d774e:	4770      	bxeq	lr
   d7750:	b530      	push	{r4, r5, lr}
   d7752:	f04f 0500 	mov.w	r5, #0
   d7756:	e00a      	b.n	d776e <__aeabi_l2d+0x16>

000d7758 <__aeabi_l2d>:
   d7758:	ea50 0201 	orrs.w	r2, r0, r1
   d775c:	bf08      	it	eq
   d775e:	4770      	bxeq	lr
   d7760:	b530      	push	{r4, r5, lr}
   d7762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7766:	d502      	bpl.n	d776e <__aeabi_l2d+0x16>
   d7768:	4240      	negs	r0, r0
   d776a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d776e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7772:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d777a:	f43f aedc 	beq.w	d7536 <__adddf3+0xe6>
   d777e:	f04f 0203 	mov.w	r2, #3
   d7782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7786:	bf18      	it	ne
   d7788:	3203      	addne	r2, #3
   d778a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d778e:	bf18      	it	ne
   d7790:	3203      	addne	r2, #3
   d7792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7796:	f1c2 0320 	rsb	r3, r2, #32
   d779a:	fa00 fc03 	lsl.w	ip, r0, r3
   d779e:	fa20 f002 	lsr.w	r0, r0, r2
   d77a2:	fa01 fe03 	lsl.w	lr, r1, r3
   d77a6:	ea40 000e 	orr.w	r0, r0, lr
   d77aa:	fa21 f102 	lsr.w	r1, r1, r2
   d77ae:	4414      	add	r4, r2
   d77b0:	e6c1      	b.n	d7536 <__adddf3+0xe6>
   d77b2:	bf00      	nop

000d77b4 <__aeabi_dmul>:
   d77b4:	b570      	push	{r4, r5, r6, lr}
   d77b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d77ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d77be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d77c2:	bf1d      	ittte	ne
   d77c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d77c8:	ea94 0f0c 	teqne	r4, ip
   d77cc:	ea95 0f0c 	teqne	r5, ip
   d77d0:	f000 f8de 	bleq	d7990 <__aeabi_dmul+0x1dc>
   d77d4:	442c      	add	r4, r5
   d77d6:	ea81 0603 	eor.w	r6, r1, r3
   d77da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d77de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d77e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d77e6:	bf18      	it	ne
   d77e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d77ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d77f4:	d038      	beq.n	d7868 <__aeabi_dmul+0xb4>
   d77f6:	fba0 ce02 	umull	ip, lr, r0, r2
   d77fa:	f04f 0500 	mov.w	r5, #0
   d77fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7802:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7806:	fbe0 e503 	umlal	lr, r5, r0, r3
   d780a:	f04f 0600 	mov.w	r6, #0
   d780e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7812:	f09c 0f00 	teq	ip, #0
   d7816:	bf18      	it	ne
   d7818:	f04e 0e01 	orrne.w	lr, lr, #1
   d781c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7820:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7824:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7828:	d204      	bcs.n	d7834 <__aeabi_dmul+0x80>
   d782a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d782e:	416d      	adcs	r5, r5
   d7830:	eb46 0606 	adc.w	r6, r6, r6
   d7834:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7838:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d783c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7840:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7844:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7848:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d784c:	bf88      	it	hi
   d784e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7852:	d81e      	bhi.n	d7892 <__aeabi_dmul+0xde>
   d7854:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7858:	bf08      	it	eq
   d785a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d785e:	f150 0000 	adcs.w	r0, r0, #0
   d7862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7866:	bd70      	pop	{r4, r5, r6, pc}
   d7868:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d786c:	ea46 0101 	orr.w	r1, r6, r1
   d7870:	ea40 0002 	orr.w	r0, r0, r2
   d7874:	ea81 0103 	eor.w	r1, r1, r3
   d7878:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d787c:	bfc2      	ittt	gt
   d787e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7886:	bd70      	popgt	{r4, r5, r6, pc}
   d7888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d788c:	f04f 0e00 	mov.w	lr, #0
   d7890:	3c01      	subs	r4, #1
   d7892:	f300 80ab 	bgt.w	d79ec <__aeabi_dmul+0x238>
   d7896:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d789a:	bfde      	ittt	le
   d789c:	2000      	movle	r0, #0
   d789e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d78a2:	bd70      	pople	{r4, r5, r6, pc}
   d78a4:	f1c4 0400 	rsb	r4, r4, #0
   d78a8:	3c20      	subs	r4, #32
   d78aa:	da35      	bge.n	d7918 <__aeabi_dmul+0x164>
   d78ac:	340c      	adds	r4, #12
   d78ae:	dc1b      	bgt.n	d78e8 <__aeabi_dmul+0x134>
   d78b0:	f104 0414 	add.w	r4, r4, #20
   d78b4:	f1c4 0520 	rsb	r5, r4, #32
   d78b8:	fa00 f305 	lsl.w	r3, r0, r5
   d78bc:	fa20 f004 	lsr.w	r0, r0, r4
   d78c0:	fa01 f205 	lsl.w	r2, r1, r5
   d78c4:	ea40 0002 	orr.w	r0, r0, r2
   d78c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d78cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d78d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d78d4:	fa21 f604 	lsr.w	r6, r1, r4
   d78d8:	eb42 0106 	adc.w	r1, r2, r6
   d78dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d78e0:	bf08      	it	eq
   d78e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d78e6:	bd70      	pop	{r4, r5, r6, pc}
   d78e8:	f1c4 040c 	rsb	r4, r4, #12
   d78ec:	f1c4 0520 	rsb	r5, r4, #32
   d78f0:	fa00 f304 	lsl.w	r3, r0, r4
   d78f4:	fa20 f005 	lsr.w	r0, r0, r5
   d78f8:	fa01 f204 	lsl.w	r2, r1, r4
   d78fc:	ea40 0002 	orr.w	r0, r0, r2
   d7900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7908:	f141 0100 	adc.w	r1, r1, #0
   d790c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7910:	bf08      	it	eq
   d7912:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7916:	bd70      	pop	{r4, r5, r6, pc}
   d7918:	f1c4 0520 	rsb	r5, r4, #32
   d791c:	fa00 f205 	lsl.w	r2, r0, r5
   d7920:	ea4e 0e02 	orr.w	lr, lr, r2
   d7924:	fa20 f304 	lsr.w	r3, r0, r4
   d7928:	fa01 f205 	lsl.w	r2, r1, r5
   d792c:	ea43 0302 	orr.w	r3, r3, r2
   d7930:	fa21 f004 	lsr.w	r0, r1, r4
   d7934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7938:	fa21 f204 	lsr.w	r2, r1, r4
   d793c:	ea20 0002 	bic.w	r0, r0, r2
   d7940:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7948:	bf08      	it	eq
   d794a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d794e:	bd70      	pop	{r4, r5, r6, pc}
   d7950:	f094 0f00 	teq	r4, #0
   d7954:	d10f      	bne.n	d7976 <__aeabi_dmul+0x1c2>
   d7956:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d795a:	0040      	lsls	r0, r0, #1
   d795c:	eb41 0101 	adc.w	r1, r1, r1
   d7960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7964:	bf08      	it	eq
   d7966:	3c01      	subeq	r4, #1
   d7968:	d0f7      	beq.n	d795a <__aeabi_dmul+0x1a6>
   d796a:	ea41 0106 	orr.w	r1, r1, r6
   d796e:	f095 0f00 	teq	r5, #0
   d7972:	bf18      	it	ne
   d7974:	4770      	bxne	lr
   d7976:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d797a:	0052      	lsls	r2, r2, #1
   d797c:	eb43 0303 	adc.w	r3, r3, r3
   d7980:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7984:	bf08      	it	eq
   d7986:	3d01      	subeq	r5, #1
   d7988:	d0f7      	beq.n	d797a <__aeabi_dmul+0x1c6>
   d798a:	ea43 0306 	orr.w	r3, r3, r6
   d798e:	4770      	bx	lr
   d7990:	ea94 0f0c 	teq	r4, ip
   d7994:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7998:	bf18      	it	ne
   d799a:	ea95 0f0c 	teqne	r5, ip
   d799e:	d00c      	beq.n	d79ba <__aeabi_dmul+0x206>
   d79a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d79a4:	bf18      	it	ne
   d79a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d79aa:	d1d1      	bne.n	d7950 <__aeabi_dmul+0x19c>
   d79ac:	ea81 0103 	eor.w	r1, r1, r3
   d79b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d79b4:	f04f 0000 	mov.w	r0, #0
   d79b8:	bd70      	pop	{r4, r5, r6, pc}
   d79ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d79be:	bf06      	itte	eq
   d79c0:	4610      	moveq	r0, r2
   d79c2:	4619      	moveq	r1, r3
   d79c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d79c8:	d019      	beq.n	d79fe <__aeabi_dmul+0x24a>
   d79ca:	ea94 0f0c 	teq	r4, ip
   d79ce:	d102      	bne.n	d79d6 <__aeabi_dmul+0x222>
   d79d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d79d4:	d113      	bne.n	d79fe <__aeabi_dmul+0x24a>
   d79d6:	ea95 0f0c 	teq	r5, ip
   d79da:	d105      	bne.n	d79e8 <__aeabi_dmul+0x234>
   d79dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d79e0:	bf1c      	itt	ne
   d79e2:	4610      	movne	r0, r2
   d79e4:	4619      	movne	r1, r3
   d79e6:	d10a      	bne.n	d79fe <__aeabi_dmul+0x24a>
   d79e8:	ea81 0103 	eor.w	r1, r1, r3
   d79ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d79f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d79f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d79f8:	f04f 0000 	mov.w	r0, #0
   d79fc:	bd70      	pop	{r4, r5, r6, pc}
   d79fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7a02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7a06:	bd70      	pop	{r4, r5, r6, pc}

000d7a08 <__aeabi_ddiv>:
   d7a08:	b570      	push	{r4, r5, r6, lr}
   d7a0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7a0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7a12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7a16:	bf1d      	ittte	ne
   d7a18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7a1c:	ea94 0f0c 	teqne	r4, ip
   d7a20:	ea95 0f0c 	teqne	r5, ip
   d7a24:	f000 f8a7 	bleq	d7b76 <__aeabi_ddiv+0x16e>
   d7a28:	eba4 0405 	sub.w	r4, r4, r5
   d7a2c:	ea81 0e03 	eor.w	lr, r1, r3
   d7a30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7a34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7a38:	f000 8088 	beq.w	d7b4c <__aeabi_ddiv+0x144>
   d7a3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7a44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7a48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7a4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7a50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7a54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7a58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7a5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7a60:	429d      	cmp	r5, r3
   d7a62:	bf08      	it	eq
   d7a64:	4296      	cmpeq	r6, r2
   d7a66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7a6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7a6e:	d202      	bcs.n	d7a76 <__aeabi_ddiv+0x6e>
   d7a70:	085b      	lsrs	r3, r3, #1
   d7a72:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a76:	1ab6      	subs	r6, r6, r2
   d7a78:	eb65 0503 	sbc.w	r5, r5, r3
   d7a7c:	085b      	lsrs	r3, r3, #1
   d7a7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7a86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7a8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7a8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7a92:	bf22      	ittt	cs
   d7a94:	1ab6      	subcs	r6, r6, r2
   d7a96:	4675      	movcs	r5, lr
   d7a98:	ea40 000c 	orrcs.w	r0, r0, ip
   d7a9c:	085b      	lsrs	r3, r3, #1
   d7a9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7aa2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7aaa:	bf22      	ittt	cs
   d7aac:	1ab6      	subcs	r6, r6, r2
   d7aae:	4675      	movcs	r5, lr
   d7ab0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7ab4:	085b      	lsrs	r3, r3, #1
   d7ab6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7aba:	ebb6 0e02 	subs.w	lr, r6, r2
   d7abe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ac2:	bf22      	ittt	cs
   d7ac4:	1ab6      	subcs	r6, r6, r2
   d7ac6:	4675      	movcs	r5, lr
   d7ac8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7acc:	085b      	lsrs	r3, r3, #1
   d7ace:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ad2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ad6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ada:	bf22      	ittt	cs
   d7adc:	1ab6      	subcs	r6, r6, r2
   d7ade:	4675      	movcs	r5, lr
   d7ae0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7ae4:	ea55 0e06 	orrs.w	lr, r5, r6
   d7ae8:	d018      	beq.n	d7b1c <__aeabi_ddiv+0x114>
   d7aea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7aee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7af2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7af6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7afa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7afe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7b02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7b06:	d1c0      	bne.n	d7a8a <__aeabi_ddiv+0x82>
   d7b08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b0c:	d10b      	bne.n	d7b26 <__aeabi_ddiv+0x11e>
   d7b0e:	ea41 0100 	orr.w	r1, r1, r0
   d7b12:	f04f 0000 	mov.w	r0, #0
   d7b16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7b1a:	e7b6      	b.n	d7a8a <__aeabi_ddiv+0x82>
   d7b1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b20:	bf04      	itt	eq
   d7b22:	4301      	orreq	r1, r0
   d7b24:	2000      	moveq	r0, #0
   d7b26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7b2a:	bf88      	it	hi
   d7b2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7b30:	f63f aeaf 	bhi.w	d7892 <__aeabi_dmul+0xde>
   d7b34:	ebb5 0c03 	subs.w	ip, r5, r3
   d7b38:	bf04      	itt	eq
   d7b3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7b3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7b42:	f150 0000 	adcs.w	r0, r0, #0
   d7b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b4a:	bd70      	pop	{r4, r5, r6, pc}
   d7b4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7b50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7b54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7b58:	bfc2      	ittt	gt
   d7b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7b62:	bd70      	popgt	{r4, r5, r6, pc}
   d7b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b68:	f04f 0e00 	mov.w	lr, #0
   d7b6c:	3c01      	subs	r4, #1
   d7b6e:	e690      	b.n	d7892 <__aeabi_dmul+0xde>
   d7b70:	ea45 0e06 	orr.w	lr, r5, r6
   d7b74:	e68d      	b.n	d7892 <__aeabi_dmul+0xde>
   d7b76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7b7a:	ea94 0f0c 	teq	r4, ip
   d7b7e:	bf08      	it	eq
   d7b80:	ea95 0f0c 	teqeq	r5, ip
   d7b84:	f43f af3b 	beq.w	d79fe <__aeabi_dmul+0x24a>
   d7b88:	ea94 0f0c 	teq	r4, ip
   d7b8c:	d10a      	bne.n	d7ba4 <__aeabi_ddiv+0x19c>
   d7b8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7b92:	f47f af34 	bne.w	d79fe <__aeabi_dmul+0x24a>
   d7b96:	ea95 0f0c 	teq	r5, ip
   d7b9a:	f47f af25 	bne.w	d79e8 <__aeabi_dmul+0x234>
   d7b9e:	4610      	mov	r0, r2
   d7ba0:	4619      	mov	r1, r3
   d7ba2:	e72c      	b.n	d79fe <__aeabi_dmul+0x24a>
   d7ba4:	ea95 0f0c 	teq	r5, ip
   d7ba8:	d106      	bne.n	d7bb8 <__aeabi_ddiv+0x1b0>
   d7baa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7bae:	f43f aefd 	beq.w	d79ac <__aeabi_dmul+0x1f8>
   d7bb2:	4610      	mov	r0, r2
   d7bb4:	4619      	mov	r1, r3
   d7bb6:	e722      	b.n	d79fe <__aeabi_dmul+0x24a>
   d7bb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7bbc:	bf18      	it	ne
   d7bbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7bc2:	f47f aec5 	bne.w	d7950 <__aeabi_dmul+0x19c>
   d7bc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7bca:	f47f af0d 	bne.w	d79e8 <__aeabi_dmul+0x234>
   d7bce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7bd2:	f47f aeeb 	bne.w	d79ac <__aeabi_dmul+0x1f8>
   d7bd6:	e712      	b.n	d79fe <__aeabi_dmul+0x24a>

000d7bd8 <__aeabi_d2f>:
   d7bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7be0:	bf24      	itt	cs
   d7be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7bea:	d90d      	bls.n	d7c08 <__aeabi_d2f+0x30>
   d7bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7c00:	bf08      	it	eq
   d7c02:	f020 0001 	biceq.w	r0, r0, #1
   d7c06:	4770      	bx	lr
   d7c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7c0c:	d121      	bne.n	d7c52 <__aeabi_d2f+0x7a>
   d7c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7c12:	bfbc      	itt	lt
   d7c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7c18:	4770      	bxlt	lr
   d7c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7c22:	f1c2 0218 	rsb	r2, r2, #24
   d7c26:	f1c2 0c20 	rsb	ip, r2, #32
   d7c2a:	fa10 f30c 	lsls.w	r3, r0, ip
   d7c2e:	fa20 f002 	lsr.w	r0, r0, r2
   d7c32:	bf18      	it	ne
   d7c34:	f040 0001 	orrne.w	r0, r0, #1
   d7c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7c40:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7c44:	ea40 000c 	orr.w	r0, r0, ip
   d7c48:	fa23 f302 	lsr.w	r3, r3, r2
   d7c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7c50:	e7cc      	b.n	d7bec <__aeabi_d2f+0x14>
   d7c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7c56:	d107      	bne.n	d7c68 <__aeabi_d2f+0x90>
   d7c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7c5c:	bf1e      	ittt	ne
   d7c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7c66:	4770      	bxne	lr
   d7c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7c74:	4770      	bx	lr
   d7c76:	bf00      	nop

000d7c78 <__cxa_atexit>:
   d7c78:	b510      	push	{r4, lr}
   d7c7a:	4c05      	ldr	r4, [pc, #20]	; (d7c90 <__cxa_atexit+0x18>)
   d7c7c:	4613      	mov	r3, r2
   d7c7e:	b12c      	cbz	r4, d7c8c <__cxa_atexit+0x14>
   d7c80:	460a      	mov	r2, r1
   d7c82:	4601      	mov	r1, r0
   d7c84:	2002      	movs	r0, #2
   d7c86:	f3af 8000 	nop.w
   d7c8a:	bd10      	pop	{r4, pc}
   d7c8c:	4620      	mov	r0, r4
   d7c8e:	bd10      	pop	{r4, pc}
   d7c90:	00000000 	.word	0x00000000

000d7c94 <localtime>:
   d7c94:	b538      	push	{r3, r4, r5, lr}
   d7c96:	4b07      	ldr	r3, [pc, #28]	; (d7cb4 <localtime+0x20>)
   d7c98:	681c      	ldr	r4, [r3, #0]
   d7c9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7c9c:	4605      	mov	r5, r0
   d7c9e:	b91b      	cbnz	r3, d7ca8 <localtime+0x14>
   d7ca0:	2024      	movs	r0, #36	; 0x24
   d7ca2:	f7fd faeb 	bl	d527c <malloc>
   d7ca6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7ca8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7caa:	4628      	mov	r0, r5
   d7cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7cb0:	f000 b802 	b.w	d7cb8 <localtime_r>
   d7cb4:	2003e19c 	.word	0x2003e19c

000d7cb8 <localtime_r>:
   d7cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7cbc:	460c      	mov	r4, r1
   d7cbe:	4680      	mov	r8, r0
   d7cc0:	f000 fc62 	bl	d8588 <__gettzinfo>
   d7cc4:	4621      	mov	r1, r4
   d7cc6:	4607      	mov	r7, r0
   d7cc8:	4640      	mov	r0, r8
   d7cca:	f000 fc61 	bl	d8590 <gmtime_r>
   d7cce:	6946      	ldr	r6, [r0, #20]
   d7cd0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7cd4:	07b3      	lsls	r3, r6, #30
   d7cd6:	4604      	mov	r4, r0
   d7cd8:	d105      	bne.n	d7ce6 <localtime_r+0x2e>
   d7cda:	2264      	movs	r2, #100	; 0x64
   d7cdc:	fb96 f3f2 	sdiv	r3, r6, r2
   d7ce0:	fb02 6313 	mls	r3, r2, r3, r6
   d7ce4:	b94b      	cbnz	r3, d7cfa <localtime_r+0x42>
   d7ce6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d7cea:	fb96 f3f5 	sdiv	r3, r6, r5
   d7cee:	fb05 6513 	mls	r5, r5, r3, r6
   d7cf2:	fab5 f385 	clz	r3, r5
   d7cf6:	095b      	lsrs	r3, r3, #5
   d7cf8:	e000      	b.n	d7cfc <localtime_r+0x44>
   d7cfa:	2301      	movs	r3, #1
   d7cfc:	4a5f      	ldr	r2, [pc, #380]	; (d7e7c <localtime_r+0x1c4>)
   d7cfe:	2530      	movs	r5, #48	; 0x30
   d7d00:	fb05 2503 	mla	r5, r5, r3, r2
   d7d04:	f000 fa74 	bl	d81f0 <__tz_lock>
   d7d08:	f000 fa74 	bl	d81f4 <_tzset_unlocked>
   d7d0c:	4b5c      	ldr	r3, [pc, #368]	; (d7e80 <localtime_r+0x1c8>)
   d7d0e:	681b      	ldr	r3, [r3, #0]
   d7d10:	b1f3      	cbz	r3, d7d50 <localtime_r+0x98>
   d7d12:	687b      	ldr	r3, [r7, #4]
   d7d14:	429e      	cmp	r6, r3
   d7d16:	d105      	bne.n	d7d24 <localtime_r+0x6c>
   d7d18:	6839      	ldr	r1, [r7, #0]
   d7d1a:	f8d8 3000 	ldr.w	r3, [r8]
   d7d1e:	69fa      	ldr	r2, [r7, #28]
   d7d20:	b941      	cbnz	r1, d7d34 <localtime_r+0x7c>
   d7d22:	e00a      	b.n	d7d3a <localtime_r+0x82>
   d7d24:	4630      	mov	r0, r6
   d7d26:	f000 f9bb 	bl	d80a0 <__tzcalc_limits>
   d7d2a:	2800      	cmp	r0, #0
   d7d2c:	d1f4      	bne.n	d7d18 <localtime_r+0x60>
   d7d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7d32:	e00d      	b.n	d7d50 <localtime_r+0x98>
   d7d34:	4293      	cmp	r3, r2
   d7d36:	db08      	blt.n	d7d4a <localtime_r+0x92>
   d7d38:	e001      	b.n	d7d3e <localtime_r+0x86>
   d7d3a:	4293      	cmp	r3, r2
   d7d3c:	da07      	bge.n	d7d4e <localtime_r+0x96>
   d7d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7d40:	4293      	cmp	r3, r2
   d7d42:	bfac      	ite	ge
   d7d44:	2300      	movge	r3, #0
   d7d46:	2301      	movlt	r3, #1
   d7d48:	e002      	b.n	d7d50 <localtime_r+0x98>
   d7d4a:	2300      	movs	r3, #0
   d7d4c:	e000      	b.n	d7d50 <localtime_r+0x98>
   d7d4e:	2301      	movs	r3, #1
   d7d50:	6223      	str	r3, [r4, #32]
   d7d52:	6a23      	ldr	r3, [r4, #32]
   d7d54:	2b01      	cmp	r3, #1
   d7d56:	bf0c      	ite	eq
   d7d58:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d7d5a:	6a39      	ldrne	r1, [r7, #32]
   d7d5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7d60:	203c      	movs	r0, #60	; 0x3c
   d7d62:	fb91 f6f3 	sdiv	r6, r1, r3
   d7d66:	fb03 1316 	mls	r3, r3, r6, r1
   d7d6a:	6861      	ldr	r1, [r4, #4]
   d7d6c:	fb93 f2f0 	sdiv	r2, r3, r0
   d7d70:	fb00 3012 	mls	r0, r0, r2, r3
   d7d74:	6823      	ldr	r3, [r4, #0]
   d7d76:	1a89      	subs	r1, r1, r2
   d7d78:	68a2      	ldr	r2, [r4, #8]
   d7d7a:	6061      	str	r1, [r4, #4]
   d7d7c:	1a1b      	subs	r3, r3, r0
   d7d7e:	1b92      	subs	r2, r2, r6
   d7d80:	2b3b      	cmp	r3, #59	; 0x3b
   d7d82:	6023      	str	r3, [r4, #0]
   d7d84:	60a2      	str	r2, [r4, #8]
   d7d86:	dd03      	ble.n	d7d90 <localtime_r+0xd8>
   d7d88:	3101      	adds	r1, #1
   d7d8a:	6061      	str	r1, [r4, #4]
   d7d8c:	3b3c      	subs	r3, #60	; 0x3c
   d7d8e:	e004      	b.n	d7d9a <localtime_r+0xe2>
   d7d90:	2b00      	cmp	r3, #0
   d7d92:	da03      	bge.n	d7d9c <localtime_r+0xe4>
   d7d94:	3901      	subs	r1, #1
   d7d96:	6061      	str	r1, [r4, #4]
   d7d98:	333c      	adds	r3, #60	; 0x3c
   d7d9a:	6023      	str	r3, [r4, #0]
   d7d9c:	6863      	ldr	r3, [r4, #4]
   d7d9e:	2b3b      	cmp	r3, #59	; 0x3b
   d7da0:	dd03      	ble.n	d7daa <localtime_r+0xf2>
   d7da2:	3201      	adds	r2, #1
   d7da4:	60a2      	str	r2, [r4, #8]
   d7da6:	3b3c      	subs	r3, #60	; 0x3c
   d7da8:	e004      	b.n	d7db4 <localtime_r+0xfc>
   d7daa:	2b00      	cmp	r3, #0
   d7dac:	da03      	bge.n	d7db6 <localtime_r+0xfe>
   d7dae:	3a01      	subs	r2, #1
   d7db0:	60a2      	str	r2, [r4, #8]
   d7db2:	333c      	adds	r3, #60	; 0x3c
   d7db4:	6063      	str	r3, [r4, #4]
   d7db6:	68a3      	ldr	r3, [r4, #8]
   d7db8:	2b17      	cmp	r3, #23
   d7dba:	dd22      	ble.n	d7e02 <localtime_r+0x14a>
   d7dbc:	69e2      	ldr	r2, [r4, #28]
   d7dbe:	3201      	adds	r2, #1
   d7dc0:	61e2      	str	r2, [r4, #28]
   d7dc2:	69a2      	ldr	r2, [r4, #24]
   d7dc4:	3201      	adds	r2, #1
   d7dc6:	2a06      	cmp	r2, #6
   d7dc8:	bfc8      	it	gt
   d7dca:	2200      	movgt	r2, #0
   d7dcc:	61a2      	str	r2, [r4, #24]
   d7dce:	68e2      	ldr	r2, [r4, #12]
   d7dd0:	3b18      	subs	r3, #24
   d7dd2:	3201      	adds	r2, #1
   d7dd4:	60a3      	str	r3, [r4, #8]
   d7dd6:	6923      	ldr	r3, [r4, #16]
   d7dd8:	60e2      	str	r2, [r4, #12]
   d7dda:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7dde:	428a      	cmp	r2, r1
   d7de0:	dd46      	ble.n	d7e70 <localtime_r+0x1b8>
   d7de2:	3301      	adds	r3, #1
   d7de4:	2b0c      	cmp	r3, #12
   d7de6:	bf0c      	ite	eq
   d7de8:	6963      	ldreq	r3, [r4, #20]
   d7dea:	6123      	strne	r3, [r4, #16]
   d7dec:	eba2 0201 	sub.w	r2, r2, r1
   d7df0:	60e2      	str	r2, [r4, #12]
   d7df2:	bf01      	itttt	eq
   d7df4:	3301      	addeq	r3, #1
   d7df6:	2200      	moveq	r2, #0
   d7df8:	6122      	streq	r2, [r4, #16]
   d7dfa:	6163      	streq	r3, [r4, #20]
   d7dfc:	bf08      	it	eq
   d7dfe:	61e2      	streq	r2, [r4, #28]
   d7e00:	e036      	b.n	d7e70 <localtime_r+0x1b8>
   d7e02:	2b00      	cmp	r3, #0
   d7e04:	da34      	bge.n	d7e70 <localtime_r+0x1b8>
   d7e06:	69e2      	ldr	r2, [r4, #28]
   d7e08:	3a01      	subs	r2, #1
   d7e0a:	61e2      	str	r2, [r4, #28]
   d7e0c:	69a2      	ldr	r2, [r4, #24]
   d7e0e:	3a01      	subs	r2, #1
   d7e10:	bf48      	it	mi
   d7e12:	2206      	movmi	r2, #6
   d7e14:	61a2      	str	r2, [r4, #24]
   d7e16:	68e2      	ldr	r2, [r4, #12]
   d7e18:	3318      	adds	r3, #24
   d7e1a:	3a01      	subs	r2, #1
   d7e1c:	60e2      	str	r2, [r4, #12]
   d7e1e:	60a3      	str	r3, [r4, #8]
   d7e20:	bb32      	cbnz	r2, d7e70 <localtime_r+0x1b8>
   d7e22:	6923      	ldr	r3, [r4, #16]
   d7e24:	3b01      	subs	r3, #1
   d7e26:	d401      	bmi.n	d7e2c <localtime_r+0x174>
   d7e28:	6123      	str	r3, [r4, #16]
   d7e2a:	e01d      	b.n	d7e68 <localtime_r+0x1b0>
   d7e2c:	230b      	movs	r3, #11
   d7e2e:	6123      	str	r3, [r4, #16]
   d7e30:	6963      	ldr	r3, [r4, #20]
   d7e32:	1e5a      	subs	r2, r3, #1
   d7e34:	f012 0f03 	tst.w	r2, #3
   d7e38:	6162      	str	r2, [r4, #20]
   d7e3a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7e3e:	d105      	bne.n	d7e4c <localtime_r+0x194>
   d7e40:	2164      	movs	r1, #100	; 0x64
   d7e42:	fb93 f2f1 	sdiv	r2, r3, r1
   d7e46:	fb01 3212 	mls	r2, r1, r2, r3
   d7e4a:	b94a      	cbnz	r2, d7e60 <localtime_r+0x1a8>
   d7e4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7e50:	fb93 f2f1 	sdiv	r2, r3, r1
   d7e54:	fb01 3312 	mls	r3, r1, r2, r3
   d7e58:	fab3 f383 	clz	r3, r3
   d7e5c:	095b      	lsrs	r3, r3, #5
   d7e5e:	e000      	b.n	d7e62 <localtime_r+0x1aa>
   d7e60:	2301      	movs	r3, #1
   d7e62:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d7e66:	61e3      	str	r3, [r4, #28]
   d7e68:	6923      	ldr	r3, [r4, #16]
   d7e6a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7e6e:	60e3      	str	r3, [r4, #12]
   d7e70:	f000 f9bf 	bl	d81f2 <__tz_unlock>
   d7e74:	4620      	mov	r0, r4
   d7e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7e7a:	bf00      	nop
   d7e7c:	000d8cd4 	.word	0x000d8cd4
   d7e80:	2003e7e4 	.word	0x2003e7e4

000d7e84 <memcpy>:
   d7e84:	b510      	push	{r4, lr}
   d7e86:	1e43      	subs	r3, r0, #1
   d7e88:	440a      	add	r2, r1
   d7e8a:	4291      	cmp	r1, r2
   d7e8c:	d004      	beq.n	d7e98 <memcpy+0x14>
   d7e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e92:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7e96:	e7f8      	b.n	d7e8a <memcpy+0x6>
   d7e98:	bd10      	pop	{r4, pc}

000d7e9a <memset>:
   d7e9a:	4402      	add	r2, r0
   d7e9c:	4603      	mov	r3, r0
   d7e9e:	4293      	cmp	r3, r2
   d7ea0:	d002      	beq.n	d7ea8 <memset+0xe>
   d7ea2:	f803 1b01 	strb.w	r1, [r3], #1
   d7ea6:	e7fa      	b.n	d7e9e <memset+0x4>
   d7ea8:	4770      	bx	lr
	...

000d7eac <srand>:
   d7eac:	b538      	push	{r3, r4, r5, lr}
   d7eae:	4b12      	ldr	r3, [pc, #72]	; (d7ef8 <srand+0x4c>)
   d7eb0:	681c      	ldr	r4, [r3, #0]
   d7eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7eb4:	4605      	mov	r5, r0
   d7eb6:	b9d3      	cbnz	r3, d7eee <srand+0x42>
   d7eb8:	2018      	movs	r0, #24
   d7eba:	f7fd f9df 	bl	d527c <malloc>
   d7ebe:	f243 330e 	movw	r3, #13070	; 0x330e
   d7ec2:	63a0      	str	r0, [r4, #56]	; 0x38
   d7ec4:	8003      	strh	r3, [r0, #0]
   d7ec6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7eca:	8043      	strh	r3, [r0, #2]
   d7ecc:	f241 2334 	movw	r3, #4660	; 0x1234
   d7ed0:	8083      	strh	r3, [r0, #4]
   d7ed2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7ed6:	80c3      	strh	r3, [r0, #6]
   d7ed8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7edc:	8103      	strh	r3, [r0, #8]
   d7ede:	2305      	movs	r3, #5
   d7ee0:	8143      	strh	r3, [r0, #10]
   d7ee2:	230b      	movs	r3, #11
   d7ee4:	8183      	strh	r3, [r0, #12]
   d7ee6:	2201      	movs	r2, #1
   d7ee8:	2300      	movs	r3, #0
   d7eea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ef0:	2200      	movs	r2, #0
   d7ef2:	611d      	str	r5, [r3, #16]
   d7ef4:	615a      	str	r2, [r3, #20]
   d7ef6:	bd38      	pop	{r3, r4, r5, pc}
   d7ef8:	2003e19c 	.word	0x2003e19c

000d7efc <strcmp>:
   d7efc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f00:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7f04:	2a01      	cmp	r2, #1
   d7f06:	bf28      	it	cs
   d7f08:	429a      	cmpcs	r2, r3
   d7f0a:	d0f7      	beq.n	d7efc <strcmp>
   d7f0c:	1ad0      	subs	r0, r2, r3
   d7f0e:	4770      	bx	lr

000d7f10 <strcpy>:
   d7f10:	4603      	mov	r3, r0
   d7f12:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7f16:	f803 2b01 	strb.w	r2, [r3], #1
   d7f1a:	2a00      	cmp	r2, #0
   d7f1c:	d1f9      	bne.n	d7f12 <strcpy+0x2>
   d7f1e:	4770      	bx	lr

000d7f20 <strdup>:
   d7f20:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <strdup+0xc>)
   d7f22:	4601      	mov	r1, r0
   d7f24:	6818      	ldr	r0, [r3, #0]
   d7f26:	f000 b803 	b.w	d7f30 <_strdup_r>
   d7f2a:	bf00      	nop
   d7f2c:	2003e19c 	.word	0x2003e19c

000d7f30 <_strdup_r>:
   d7f30:	b570      	push	{r4, r5, r6, lr}
   d7f32:	4606      	mov	r6, r0
   d7f34:	4608      	mov	r0, r1
   d7f36:	460c      	mov	r4, r1
   d7f38:	f000 f80d 	bl	d7f56 <strlen>
   d7f3c:	1c45      	adds	r5, r0, #1
   d7f3e:	4629      	mov	r1, r5
   d7f40:	4630      	mov	r0, r6
   d7f42:	f7fd f9cb 	bl	d52dc <_malloc_r>
   d7f46:	4606      	mov	r6, r0
   d7f48:	b118      	cbz	r0, d7f52 <_strdup_r+0x22>
   d7f4a:	462a      	mov	r2, r5
   d7f4c:	4621      	mov	r1, r4
   d7f4e:	f7ff ff99 	bl	d7e84 <memcpy>
   d7f52:	4630      	mov	r0, r6
   d7f54:	bd70      	pop	{r4, r5, r6, pc}

000d7f56 <strlen>:
   d7f56:	4603      	mov	r3, r0
   d7f58:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f5c:	2a00      	cmp	r2, #0
   d7f5e:	d1fb      	bne.n	d7f58 <strlen+0x2>
   d7f60:	1a18      	subs	r0, r3, r0
   d7f62:	3801      	subs	r0, #1
   d7f64:	4770      	bx	lr

000d7f66 <strncmp>:
   d7f66:	b530      	push	{r4, r5, lr}
   d7f68:	b182      	cbz	r2, d7f8c <strncmp+0x26>
   d7f6a:	1e45      	subs	r5, r0, #1
   d7f6c:	3901      	subs	r1, #1
   d7f6e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7f72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7f76:	42a3      	cmp	r3, r4
   d7f78:	d106      	bne.n	d7f88 <strncmp+0x22>
   d7f7a:	43ec      	mvns	r4, r5
   d7f7c:	4414      	add	r4, r2
   d7f7e:	42e0      	cmn	r0, r4
   d7f80:	d001      	beq.n	d7f86 <strncmp+0x20>
   d7f82:	2b00      	cmp	r3, #0
   d7f84:	d1f3      	bne.n	d7f6e <strncmp+0x8>
   d7f86:	461c      	mov	r4, r3
   d7f88:	1b18      	subs	r0, r3, r4
   d7f8a:	bd30      	pop	{r4, r5, pc}
   d7f8c:	4610      	mov	r0, r2
   d7f8e:	bd30      	pop	{r4, r5, pc}

000d7f90 <_strtoul_r>:
   d7f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7f94:	4680      	mov	r8, r0
   d7f96:	483c      	ldr	r0, [pc, #240]	; (d8088 <_strtoul_r+0xf8>)
   d7f98:	f8d0 9000 	ldr.w	r9, [r0]
   d7f9c:	460e      	mov	r6, r1
   d7f9e:	4635      	mov	r5, r6
   d7fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7fa4:	eb09 0004 	add.w	r0, r9, r4
   d7fa8:	7840      	ldrb	r0, [r0, #1]
   d7faa:	f000 0008 	and.w	r0, r0, #8
   d7fae:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7fb2:	b108      	cbz	r0, d7fb8 <_strtoul_r+0x28>
   d7fb4:	462e      	mov	r6, r5
   d7fb6:	e7f2      	b.n	d7f9e <_strtoul_r+0xe>
   d7fb8:	2c2d      	cmp	r4, #45	; 0x2d
   d7fba:	d103      	bne.n	d7fc4 <_strtoul_r+0x34>
   d7fbc:	1cb5      	adds	r5, r6, #2
   d7fbe:	7874      	ldrb	r4, [r6, #1]
   d7fc0:	2701      	movs	r7, #1
   d7fc2:	e003      	b.n	d7fcc <_strtoul_r+0x3c>
   d7fc4:	2c2b      	cmp	r4, #43	; 0x2b
   d7fc6:	bf04      	itt	eq
   d7fc8:	7874      	ldrbeq	r4, [r6, #1]
   d7fca:	1cb5      	addeq	r5, r6, #2
   d7fcc:	b113      	cbz	r3, d7fd4 <_strtoul_r+0x44>
   d7fce:	2b10      	cmp	r3, #16
   d7fd0:	d10a      	bne.n	d7fe8 <_strtoul_r+0x58>
   d7fd2:	e053      	b.n	d807c <_strtoul_r+0xec>
   d7fd4:	2c30      	cmp	r4, #48	; 0x30
   d7fd6:	d14f      	bne.n	d8078 <_strtoul_r+0xe8>
   d7fd8:	7828      	ldrb	r0, [r5, #0]
   d7fda:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7fde:	2858      	cmp	r0, #88	; 0x58
   d7fe0:	d145      	bne.n	d806e <_strtoul_r+0xde>
   d7fe2:	786c      	ldrb	r4, [r5, #1]
   d7fe4:	2310      	movs	r3, #16
   d7fe6:	3502      	adds	r5, #2
   d7fe8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7fec:	2600      	movs	r6, #0
   d7fee:	fbbc fcf3 	udiv	ip, ip, r3
   d7ff2:	fb03 fa0c 	mul.w	sl, r3, ip
   d7ff6:	ea6f 0a0a 	mvn.w	sl, sl
   d7ffa:	4630      	mov	r0, r6
   d7ffc:	eb09 0e04 	add.w	lr, r9, r4
   d8000:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8004:	f01e 0f04 	tst.w	lr, #4
   d8008:	d001      	beq.n	d800e <_strtoul_r+0x7e>
   d800a:	3c30      	subs	r4, #48	; 0x30
   d800c:	e00b      	b.n	d8026 <_strtoul_r+0x96>
   d800e:	f01e 0e03 	ands.w	lr, lr, #3
   d8012:	d01a      	beq.n	d804a <_strtoul_r+0xba>
   d8014:	f1be 0f01 	cmp.w	lr, #1
   d8018:	bf0c      	ite	eq
   d801a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d801e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8022:	ebce 0404 	rsb	r4, lr, r4
   d8026:	42a3      	cmp	r3, r4
   d8028:	dd0f      	ble.n	d804a <_strtoul_r+0xba>
   d802a:	2e00      	cmp	r6, #0
   d802c:	db08      	blt.n	d8040 <_strtoul_r+0xb0>
   d802e:	4560      	cmp	r0, ip
   d8030:	d806      	bhi.n	d8040 <_strtoul_r+0xb0>
   d8032:	d101      	bne.n	d8038 <_strtoul_r+0xa8>
   d8034:	4554      	cmp	r4, sl
   d8036:	dc03      	bgt.n	d8040 <_strtoul_r+0xb0>
   d8038:	fb03 4000 	mla	r0, r3, r0, r4
   d803c:	2601      	movs	r6, #1
   d803e:	e001      	b.n	d8044 <_strtoul_r+0xb4>
   d8040:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8044:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8048:	e7d8      	b.n	d7ffc <_strtoul_r+0x6c>
   d804a:	2e00      	cmp	r6, #0
   d804c:	da07      	bge.n	d805e <_strtoul_r+0xce>
   d804e:	2322      	movs	r3, #34	; 0x22
   d8050:	f8c8 3000 	str.w	r3, [r8]
   d8054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8058:	b92a      	cbnz	r2, d8066 <_strtoul_r+0xd6>
   d805a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d805e:	b107      	cbz	r7, d8062 <_strtoul_r+0xd2>
   d8060:	4240      	negs	r0, r0
   d8062:	b172      	cbz	r2, d8082 <_strtoul_r+0xf2>
   d8064:	b106      	cbz	r6, d8068 <_strtoul_r+0xd8>
   d8066:	1e69      	subs	r1, r5, #1
   d8068:	6011      	str	r1, [r2, #0]
   d806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d806e:	2430      	movs	r4, #48	; 0x30
   d8070:	2b00      	cmp	r3, #0
   d8072:	d1b9      	bne.n	d7fe8 <_strtoul_r+0x58>
   d8074:	2308      	movs	r3, #8
   d8076:	e7b7      	b.n	d7fe8 <_strtoul_r+0x58>
   d8078:	230a      	movs	r3, #10
   d807a:	e7b5      	b.n	d7fe8 <_strtoul_r+0x58>
   d807c:	2c30      	cmp	r4, #48	; 0x30
   d807e:	d0ab      	beq.n	d7fd8 <_strtoul_r+0x48>
   d8080:	e7b2      	b.n	d7fe8 <_strtoul_r+0x58>
   d8082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8086:	bf00      	nop
   d8088:	2003e138 	.word	0x2003e138

000d808c <strtoul>:
   d808c:	4613      	mov	r3, r2
   d808e:	460a      	mov	r2, r1
   d8090:	4601      	mov	r1, r0
   d8092:	4802      	ldr	r0, [pc, #8]	; (d809c <strtoul+0x10>)
   d8094:	6800      	ldr	r0, [r0, #0]
   d8096:	f7ff bf7b 	b.w	d7f90 <_strtoul_r>
   d809a:	bf00      	nop
   d809c:	2003e19c 	.word	0x2003e19c

000d80a0 <__tzcalc_limits>:
   d80a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80a4:	4604      	mov	r4, r0
   d80a6:	f000 fa6f 	bl	d8588 <__gettzinfo>
   d80aa:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d80ae:	429c      	cmp	r4, r3
   d80b0:	f340 8096 	ble.w	d81e0 <__tzcalc_limits+0x140>
   d80b4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d80b8:	18e3      	adds	r3, r4, r3
   d80ba:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d80be:	109b      	asrs	r3, r3, #2
   d80c0:	f240 156d 	movw	r5, #365	; 0x16d
   d80c4:	fb05 3502 	mla	r5, r5, r2, r3
   d80c8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d80cc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d80d0:	fb92 f3f3 	sdiv	r3, r2, r3
   d80d4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d80d8:	442b      	add	r3, r5
   d80da:	18a5      	adds	r5, r4, r2
   d80dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d80e0:	fb95 f5f2 	sdiv	r5, r5, r2
   d80e4:	441d      	add	r5, r3
   d80e6:	2364      	movs	r3, #100	; 0x64
   d80e8:	fb94 f7f2 	sdiv	r7, r4, r2
   d80ec:	fb94 f6f3 	sdiv	r6, r4, r3
   d80f0:	fb02 4717 	mls	r7, r2, r7, r4
   d80f4:	fb03 4616 	mls	r6, r3, r6, r4
   d80f8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d80fc:	fab7 fe87 	clz	lr, r7
   d8100:	9301      	str	r3, [sp, #4]
   d8102:	f004 0303 	and.w	r3, r4, #3
   d8106:	6044      	str	r4, [r0, #4]
   d8108:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d810c:	4601      	mov	r1, r0
   d810e:	9300      	str	r3, [sp, #0]
   d8110:	f04f 0c07 	mov.w	ip, #7
   d8114:	7a0b      	ldrb	r3, [r1, #8]
   d8116:	2b4a      	cmp	r3, #74	; 0x4a
   d8118:	d10e      	bne.n	d8138 <__tzcalc_limits+0x98>
   d811a:	694b      	ldr	r3, [r1, #20]
   d811c:	9a00      	ldr	r2, [sp, #0]
   d811e:	18ec      	adds	r4, r5, r3
   d8120:	b902      	cbnz	r2, d8124 <__tzcalc_limits+0x84>
   d8122:	b906      	cbnz	r6, d8126 <__tzcalc_limits+0x86>
   d8124:	b927      	cbnz	r7, d8130 <__tzcalc_limits+0x90>
   d8126:	2b3b      	cmp	r3, #59	; 0x3b
   d8128:	bfd4      	ite	le
   d812a:	2300      	movle	r3, #0
   d812c:	2301      	movgt	r3, #1
   d812e:	e000      	b.n	d8132 <__tzcalc_limits+0x92>
   d8130:	2300      	movs	r3, #0
   d8132:	4423      	add	r3, r4
   d8134:	3b01      	subs	r3, #1
   d8136:	e03f      	b.n	d81b8 <__tzcalc_limits+0x118>
   d8138:	2b44      	cmp	r3, #68	; 0x44
   d813a:	d102      	bne.n	d8142 <__tzcalc_limits+0xa2>
   d813c:	694b      	ldr	r3, [r1, #20]
   d813e:	442b      	add	r3, r5
   d8140:	e03a      	b.n	d81b8 <__tzcalc_limits+0x118>
   d8142:	9b00      	ldr	r3, [sp, #0]
   d8144:	b92b      	cbnz	r3, d8152 <__tzcalc_limits+0xb2>
   d8146:	2e00      	cmp	r6, #0
   d8148:	bf0c      	ite	eq
   d814a:	46f0      	moveq	r8, lr
   d814c:	f04f 0801 	movne.w	r8, #1
   d8150:	e000      	b.n	d8154 <__tzcalc_limits+0xb4>
   d8152:	46f0      	mov	r8, lr
   d8154:	4b24      	ldr	r3, [pc, #144]	; (d81e8 <__tzcalc_limits+0x148>)
   d8156:	68cc      	ldr	r4, [r1, #12]
   d8158:	2230      	movs	r2, #48	; 0x30
   d815a:	fb02 3808 	mla	r8, r2, r8, r3
   d815e:	f1a8 0a04 	sub.w	sl, r8, #4
   d8162:	46a9      	mov	r9, r5
   d8164:	2301      	movs	r3, #1
   d8166:	42a3      	cmp	r3, r4
   d8168:	da04      	bge.n	d8174 <__tzcalc_limits+0xd4>
   d816a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d816e:	3301      	adds	r3, #1
   d8170:	44d9      	add	r9, fp
   d8172:	e7f8      	b.n	d8166 <__tzcalc_limits+0xc6>
   d8174:	f109 0304 	add.w	r3, r9, #4
   d8178:	fb93 fbfc 	sdiv	fp, r3, ip
   d817c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d8180:	2c01      	cmp	r4, #1
   d8182:	ebca 0a03 	rsb	sl, sl, r3
   d8186:	694b      	ldr	r3, [r1, #20]
   d8188:	bfb8      	it	lt
   d818a:	2401      	movlt	r4, #1
   d818c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d8190:	ebb3 0a0a 	subs.w	sl, r3, sl
   d8194:	690b      	ldr	r3, [r1, #16]
   d8196:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d819a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d819e:	bf48      	it	mi
   d81a0:	f10a 0a07 	addmi.w	sl, sl, #7
   d81a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d81a8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d81ac:	4453      	add	r3, sl
   d81ae:	42a3      	cmp	r3, r4
   d81b0:	db01      	blt.n	d81b6 <__tzcalc_limits+0x116>
   d81b2:	3b07      	subs	r3, #7
   d81b4:	e7fb      	b.n	d81ae <__tzcalc_limits+0x10e>
   d81b6:	444b      	add	r3, r9
   d81b8:	698c      	ldr	r4, [r1, #24]
   d81ba:	4a0c      	ldr	r2, [pc, #48]	; (d81ec <__tzcalc_limits+0x14c>)
   d81bc:	fb02 4303 	mla	r3, r2, r3, r4
   d81c0:	6a0c      	ldr	r4, [r1, #32]
   d81c2:	4423      	add	r3, r4
   d81c4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d81c8:	9b01      	ldr	r3, [sp, #4]
   d81ca:	4299      	cmp	r1, r3
   d81cc:	d1a2      	bne.n	d8114 <__tzcalc_limits+0x74>
   d81ce:	69c3      	ldr	r3, [r0, #28]
   d81d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d81d2:	4293      	cmp	r3, r2
   d81d4:	bfac      	ite	ge
   d81d6:	2300      	movge	r3, #0
   d81d8:	2301      	movlt	r3, #1
   d81da:	6003      	str	r3, [r0, #0]
   d81dc:	2001      	movs	r0, #1
   d81de:	e000      	b.n	d81e2 <__tzcalc_limits+0x142>
   d81e0:	2000      	movs	r0, #0
   d81e2:	b003      	add	sp, #12
   d81e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81e8:	000d8cd4 	.word	0x000d8cd4
   d81ec:	00015180 	.word	0x00015180

000d81f0 <__tz_lock>:
   d81f0:	4770      	bx	lr

000d81f2 <__tz_unlock>:
   d81f2:	4770      	bx	lr

000d81f4 <_tzset_unlocked>:
   d81f4:	4b01      	ldr	r3, [pc, #4]	; (d81fc <_tzset_unlocked+0x8>)
   d81f6:	6818      	ldr	r0, [r3, #0]
   d81f8:	f000 b802 	b.w	d8200 <_tzset_unlocked_r>
   d81fc:	2003e19c 	.word	0x2003e19c

000d8200 <_tzset_unlocked_r>:
   d8200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8204:	b08d      	sub	sp, #52	; 0x34
   d8206:	4607      	mov	r7, r0
   d8208:	f000 f9be 	bl	d8588 <__gettzinfo>
   d820c:	49b0      	ldr	r1, [pc, #704]	; (d84d0 <_tzset_unlocked_r+0x2d0>)
   d820e:	4eb1      	ldr	r6, [pc, #708]	; (d84d4 <_tzset_unlocked_r+0x2d4>)
   d8210:	4604      	mov	r4, r0
   d8212:	4638      	mov	r0, r7
   d8214:	f000 f9b0 	bl	d8578 <_getenv_r>
   d8218:	4605      	mov	r5, r0
   d821a:	b960      	cbnz	r0, d8236 <_tzset_unlocked_r+0x36>
   d821c:	4bae      	ldr	r3, [pc, #696]	; (d84d8 <_tzset_unlocked_r+0x2d8>)
   d821e:	4aaf      	ldr	r2, [pc, #700]	; (d84dc <_tzset_unlocked_r+0x2dc>)
   d8220:	6018      	str	r0, [r3, #0]
   d8222:	4baf      	ldr	r3, [pc, #700]	; (d84e0 <_tzset_unlocked_r+0x2e0>)
   d8224:	6018      	str	r0, [r3, #0]
   d8226:	4baf      	ldr	r3, [pc, #700]	; (d84e4 <_tzset_unlocked_r+0x2e4>)
   d8228:	6830      	ldr	r0, [r6, #0]
   d822a:	601a      	str	r2, [r3, #0]
   d822c:	605a      	str	r2, [r3, #4]
   d822e:	f7fd f82d 	bl	d528c <free>
   d8232:	6035      	str	r5, [r6, #0]
   d8234:	e148      	b.n	d84c8 <_tzset_unlocked_r+0x2c8>
   d8236:	6831      	ldr	r1, [r6, #0]
   d8238:	b979      	cbnz	r1, d825a <_tzset_unlocked_r+0x5a>
   d823a:	6830      	ldr	r0, [r6, #0]
   d823c:	f7fd f826 	bl	d528c <free>
   d8240:	4628      	mov	r0, r5
   d8242:	f7ff fe88 	bl	d7f56 <strlen>
   d8246:	1c41      	adds	r1, r0, #1
   d8248:	4638      	mov	r0, r7
   d824a:	f7fd f847 	bl	d52dc <_malloc_r>
   d824e:	6030      	str	r0, [r6, #0]
   d8250:	b148      	cbz	r0, d8266 <_tzset_unlocked_r+0x66>
   d8252:	4629      	mov	r1, r5
   d8254:	f7ff fe5c 	bl	d7f10 <strcpy>
   d8258:	e005      	b.n	d8266 <_tzset_unlocked_r+0x66>
   d825a:	f7ff fe4f 	bl	d7efc <strcmp>
   d825e:	2800      	cmp	r0, #0
   d8260:	f000 8132 	beq.w	d84c8 <_tzset_unlocked_r+0x2c8>
   d8264:	e7e9      	b.n	d823a <_tzset_unlocked_r+0x3a>
   d8266:	782b      	ldrb	r3, [r5, #0]
   d8268:	4a9f      	ldr	r2, [pc, #636]	; (d84e8 <_tzset_unlocked_r+0x2e8>)
   d826a:	49a0      	ldr	r1, [pc, #640]	; (d84ec <_tzset_unlocked_r+0x2ec>)
   d826c:	2b3a      	cmp	r3, #58	; 0x3a
   d826e:	bf08      	it	eq
   d8270:	3501      	addeq	r5, #1
   d8272:	ae0a      	add	r6, sp, #40	; 0x28
   d8274:	4633      	mov	r3, r6
   d8276:	4628      	mov	r0, r5
   d8278:	f7fd f818 	bl	d52ac <siscanf>
   d827c:	2800      	cmp	r0, #0
   d827e:	f340 8123 	ble.w	d84c8 <_tzset_unlocked_r+0x2c8>
   d8282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8284:	18ef      	adds	r7, r5, r3
   d8286:	5ceb      	ldrb	r3, [r5, r3]
   d8288:	2b2d      	cmp	r3, #45	; 0x2d
   d828a:	d103      	bne.n	d8294 <_tzset_unlocked_r+0x94>
   d828c:	3701      	adds	r7, #1
   d828e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8292:	e003      	b.n	d829c <_tzset_unlocked_r+0x9c>
   d8294:	2b2b      	cmp	r3, #43	; 0x2b
   d8296:	bf08      	it	eq
   d8298:	3701      	addeq	r7, #1
   d829a:	2501      	movs	r5, #1
   d829c:	f10d 0a20 	add.w	sl, sp, #32
   d82a0:	f10d 0b1e 	add.w	fp, sp, #30
   d82a4:	f04f 0800 	mov.w	r8, #0
   d82a8:	9603      	str	r6, [sp, #12]
   d82aa:	f8cd a008 	str.w	sl, [sp, #8]
   d82ae:	9601      	str	r6, [sp, #4]
   d82b0:	f8cd b000 	str.w	fp, [sp]
   d82b4:	4633      	mov	r3, r6
   d82b6:	aa07      	add	r2, sp, #28
   d82b8:	498d      	ldr	r1, [pc, #564]	; (d84f0 <_tzset_unlocked_r+0x2f0>)
   d82ba:	f8ad 801e 	strh.w	r8, [sp, #30]
   d82be:	4638      	mov	r0, r7
   d82c0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d82c4:	f7fc fff2 	bl	d52ac <siscanf>
   d82c8:	4540      	cmp	r0, r8
   d82ca:	f340 80fd 	ble.w	d84c8 <_tzset_unlocked_r+0x2c8>
   d82ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d82d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d82d6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d84fc <_tzset_unlocked_r+0x2fc>
   d82da:	213c      	movs	r1, #60	; 0x3c
   d82dc:	fb01 3302 	mla	r3, r1, r2, r3
   d82e0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d82e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d82e8:	fb01 3302 	mla	r3, r1, r2, r3
   d82ec:	435d      	muls	r5, r3
   d82ee:	6225      	str	r5, [r4, #32]
   d82f0:	4d7c      	ldr	r5, [pc, #496]	; (d84e4 <_tzset_unlocked_r+0x2e4>)
   d82f2:	4b7d      	ldr	r3, [pc, #500]	; (d84e8 <_tzset_unlocked_r+0x2e8>)
   d82f4:	602b      	str	r3, [r5, #0]
   d82f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d82f8:	497c      	ldr	r1, [pc, #496]	; (d84ec <_tzset_unlocked_r+0x2ec>)
   d82fa:	441f      	add	r7, r3
   d82fc:	464a      	mov	r2, r9
   d82fe:	4633      	mov	r3, r6
   d8300:	4638      	mov	r0, r7
   d8302:	f7fc ffd3 	bl	d52ac <siscanf>
   d8306:	4540      	cmp	r0, r8
   d8308:	dc08      	bgt.n	d831c <_tzset_unlocked_r+0x11c>
   d830a:	682b      	ldr	r3, [r5, #0]
   d830c:	606b      	str	r3, [r5, #4]
   d830e:	4b72      	ldr	r3, [pc, #456]	; (d84d8 <_tzset_unlocked_r+0x2d8>)
   d8310:	6a22      	ldr	r2, [r4, #32]
   d8312:	601a      	str	r2, [r3, #0]
   d8314:	4b72      	ldr	r3, [pc, #456]	; (d84e0 <_tzset_unlocked_r+0x2e0>)
   d8316:	f8c3 8000 	str.w	r8, [r3]
   d831a:	e0d5      	b.n	d84c8 <_tzset_unlocked_r+0x2c8>
   d831c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d831e:	f8c5 9004 	str.w	r9, [r5, #4]
   d8322:	18fd      	adds	r5, r7, r3
   d8324:	5cfb      	ldrb	r3, [r7, r3]
   d8326:	2b2d      	cmp	r3, #45	; 0x2d
   d8328:	d103      	bne.n	d8332 <_tzset_unlocked_r+0x132>
   d832a:	3501      	adds	r5, #1
   d832c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8330:	e003      	b.n	d833a <_tzset_unlocked_r+0x13a>
   d8332:	2b2b      	cmp	r3, #43	; 0x2b
   d8334:	bf08      	it	eq
   d8336:	3501      	addeq	r5, #1
   d8338:	2701      	movs	r7, #1
   d833a:	2300      	movs	r3, #0
   d833c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8340:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8344:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8348:	930a      	str	r3, [sp, #40]	; 0x28
   d834a:	9603      	str	r6, [sp, #12]
   d834c:	f8cd a008 	str.w	sl, [sp, #8]
   d8350:	9601      	str	r6, [sp, #4]
   d8352:	f8cd b000 	str.w	fp, [sp]
   d8356:	4633      	mov	r3, r6
   d8358:	aa07      	add	r2, sp, #28
   d835a:	4965      	ldr	r1, [pc, #404]	; (d84f0 <_tzset_unlocked_r+0x2f0>)
   d835c:	4628      	mov	r0, r5
   d835e:	f7fc ffa5 	bl	d52ac <siscanf>
   d8362:	2800      	cmp	r0, #0
   d8364:	dc04      	bgt.n	d8370 <_tzset_unlocked_r+0x170>
   d8366:	6a23      	ldr	r3, [r4, #32]
   d8368:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d836c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d836e:	e00e      	b.n	d838e <_tzset_unlocked_r+0x18e>
   d8370:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8374:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8378:	213c      	movs	r1, #60	; 0x3c
   d837a:	fb01 3302 	mla	r3, r1, r2, r3
   d837e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8382:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8386:	fb01 3302 	mla	r3, r1, r2, r3
   d838a:	435f      	muls	r7, r3
   d838c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d838e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8390:	4627      	mov	r7, r4
   d8392:	441d      	add	r5, r3
   d8394:	f04f 0900 	mov.w	r9, #0
   d8398:	782b      	ldrb	r3, [r5, #0]
   d839a:	2b2c      	cmp	r3, #44	; 0x2c
   d839c:	bf08      	it	eq
   d839e:	3501      	addeq	r5, #1
   d83a0:	f895 8000 	ldrb.w	r8, [r5]
   d83a4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d83a8:	d126      	bne.n	d83f8 <_tzset_unlocked_r+0x1f8>
   d83aa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d83ae:	9302      	str	r3, [sp, #8]
   d83b0:	ab09      	add	r3, sp, #36	; 0x24
   d83b2:	9300      	str	r3, [sp, #0]
   d83b4:	9603      	str	r6, [sp, #12]
   d83b6:	9601      	str	r6, [sp, #4]
   d83b8:	4633      	mov	r3, r6
   d83ba:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d83be:	494d      	ldr	r1, [pc, #308]	; (d84f4 <_tzset_unlocked_r+0x2f4>)
   d83c0:	4628      	mov	r0, r5
   d83c2:	f7fc ff73 	bl	d52ac <siscanf>
   d83c6:	2803      	cmp	r0, #3
   d83c8:	d17e      	bne.n	d84c8 <_tzset_unlocked_r+0x2c8>
   d83ca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d83ce:	1e4b      	subs	r3, r1, #1
   d83d0:	2b0b      	cmp	r3, #11
   d83d2:	d879      	bhi.n	d84c8 <_tzset_unlocked_r+0x2c8>
   d83d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d83d8:	1e53      	subs	r3, r2, #1
   d83da:	2b04      	cmp	r3, #4
   d83dc:	d874      	bhi.n	d84c8 <_tzset_unlocked_r+0x2c8>
   d83de:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d83e2:	2b06      	cmp	r3, #6
   d83e4:	d870      	bhi.n	d84c8 <_tzset_unlocked_r+0x2c8>
   d83e6:	f887 8008 	strb.w	r8, [r7, #8]
   d83ea:	60f9      	str	r1, [r7, #12]
   d83ec:	613a      	str	r2, [r7, #16]
   d83ee:	617b      	str	r3, [r7, #20]
   d83f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d83f2:	eb05 0803 	add.w	r8, r5, r3
   d83f6:	e02a      	b.n	d844e <_tzset_unlocked_r+0x24e>
   d83f8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d83fc:	bf06      	itte	eq
   d83fe:	3501      	addeq	r5, #1
   d8400:	4643      	moveq	r3, r8
   d8402:	2344      	movne	r3, #68	; 0x44
   d8404:	220a      	movs	r2, #10
   d8406:	a90b      	add	r1, sp, #44	; 0x2c
   d8408:	4628      	mov	r0, r5
   d840a:	9305      	str	r3, [sp, #20]
   d840c:	f7ff fe3e 	bl	d808c <strtoul>
   d8410:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8414:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8418:	4545      	cmp	r5, r8
   d841a:	9b05      	ldr	r3, [sp, #20]
   d841c:	d114      	bne.n	d8448 <_tzset_unlocked_r+0x248>
   d841e:	234d      	movs	r3, #77	; 0x4d
   d8420:	f1b9 0f00 	cmp.w	r9, #0
   d8424:	d107      	bne.n	d8436 <_tzset_unlocked_r+0x236>
   d8426:	7223      	strb	r3, [r4, #8]
   d8428:	2303      	movs	r3, #3
   d842a:	60e3      	str	r3, [r4, #12]
   d842c:	2302      	movs	r3, #2
   d842e:	6123      	str	r3, [r4, #16]
   d8430:	f8c4 9014 	str.w	r9, [r4, #20]
   d8434:	e00b      	b.n	d844e <_tzset_unlocked_r+0x24e>
   d8436:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d843a:	230b      	movs	r3, #11
   d843c:	62a3      	str	r3, [r4, #40]	; 0x28
   d843e:	2301      	movs	r3, #1
   d8440:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8442:	2300      	movs	r3, #0
   d8444:	6323      	str	r3, [r4, #48]	; 0x30
   d8446:	e002      	b.n	d844e <_tzset_unlocked_r+0x24e>
   d8448:	b280      	uxth	r0, r0
   d844a:	723b      	strb	r3, [r7, #8]
   d844c:	6178      	str	r0, [r7, #20]
   d844e:	2302      	movs	r3, #2
   d8450:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8454:	2300      	movs	r3, #0
   d8456:	f8ad 301e 	strh.w	r3, [sp, #30]
   d845a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d845e:	930a      	str	r3, [sp, #40]	; 0x28
   d8460:	f898 3000 	ldrb.w	r3, [r8]
   d8464:	2b2f      	cmp	r3, #47	; 0x2f
   d8466:	d10b      	bne.n	d8480 <_tzset_unlocked_r+0x280>
   d8468:	9603      	str	r6, [sp, #12]
   d846a:	f8cd a008 	str.w	sl, [sp, #8]
   d846e:	9601      	str	r6, [sp, #4]
   d8470:	f8cd b000 	str.w	fp, [sp]
   d8474:	4633      	mov	r3, r6
   d8476:	aa07      	add	r2, sp, #28
   d8478:	491f      	ldr	r1, [pc, #124]	; (d84f8 <_tzset_unlocked_r+0x2f8>)
   d847a:	4640      	mov	r0, r8
   d847c:	f7fc ff16 	bl	d52ac <siscanf>
   d8480:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8484:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8488:	213c      	movs	r1, #60	; 0x3c
   d848a:	fb01 3302 	mla	r3, r1, r2, r3
   d848e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8492:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8496:	fb01 3302 	mla	r3, r1, r2, r3
   d849a:	61bb      	str	r3, [r7, #24]
   d849c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d849e:	f109 0901 	add.w	r9, r9, #1
   d84a2:	f1b9 0f02 	cmp.w	r9, #2
   d84a6:	4445      	add	r5, r8
   d84a8:	f107 071c 	add.w	r7, r7, #28
   d84ac:	f47f af74 	bne.w	d8398 <_tzset_unlocked_r+0x198>
   d84b0:	6860      	ldr	r0, [r4, #4]
   d84b2:	f7ff fdf5 	bl	d80a0 <__tzcalc_limits>
   d84b6:	4b08      	ldr	r3, [pc, #32]	; (d84d8 <_tzset_unlocked_r+0x2d8>)
   d84b8:	6a22      	ldr	r2, [r4, #32]
   d84ba:	601a      	str	r2, [r3, #0]
   d84bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d84be:	1a9b      	subs	r3, r3, r2
   d84c0:	4a07      	ldr	r2, [pc, #28]	; (d84e0 <_tzset_unlocked_r+0x2e0>)
   d84c2:	bf18      	it	ne
   d84c4:	2301      	movne	r3, #1
   d84c6:	6013      	str	r3, [r2, #0]
   d84c8:	b00d      	add	sp, #52	; 0x34
   d84ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84ce:	bf00      	nop
   d84d0:	000d8d34 	.word	0x000d8d34
   d84d4:	2003e7e0 	.word	0x2003e7e0
   d84d8:	2003e7e8 	.word	0x2003e7e8
   d84dc:	000d8d37 	.word	0x000d8d37
   d84e0:	2003e7e4 	.word	0x2003e7e4
   d84e4:	2003e1a0 	.word	0x2003e1a0
   d84e8:	2003e7d3 	.word	0x2003e7d3
   d84ec:	000d8d3b 	.word	0x000d8d3b
   d84f0:	000d8d5e 	.word	0x000d8d5e
   d84f4:	000d8d4a 	.word	0x000d8d4a
   d84f8:	000d8d5d 	.word	0x000d8d5d
   d84fc:	2003e7c8 	.word	0x2003e7c8

000d8500 <_findenv_r>:
   d8500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8504:	4607      	mov	r7, r0
   d8506:	468b      	mov	fp, r1
   d8508:	4690      	mov	r8, r2
   d850a:	f000 f8d9 	bl	d86c0 <__env_lock>
   d850e:	4b19      	ldr	r3, [pc, #100]	; (d8574 <_findenv_r+0x74>)
   d8510:	681d      	ldr	r5, [r3, #0]
   d8512:	469a      	mov	sl, r3
   d8514:	b13d      	cbz	r5, d8526 <_findenv_r+0x26>
   d8516:	465c      	mov	r4, fp
   d8518:	4623      	mov	r3, r4
   d851a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d851e:	b142      	cbz	r2, d8532 <_findenv_r+0x32>
   d8520:	2a3d      	cmp	r2, #61	; 0x3d
   d8522:	461c      	mov	r4, r3
   d8524:	d1f8      	bne.n	d8518 <_findenv_r+0x18>
   d8526:	4638      	mov	r0, r7
   d8528:	f000 f8cb 	bl	d86c2 <__env_unlock>
   d852c:	2000      	movs	r0, #0
   d852e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8532:	ebcb 0404 	rsb	r4, fp, r4
   d8536:	46a9      	mov	r9, r5
   d8538:	f859 0b04 	ldr.w	r0, [r9], #4
   d853c:	2800      	cmp	r0, #0
   d853e:	d0f2      	beq.n	d8526 <_findenv_r+0x26>
   d8540:	4622      	mov	r2, r4
   d8542:	4659      	mov	r1, fp
   d8544:	f7ff fd0f 	bl	d7f66 <strncmp>
   d8548:	b988      	cbnz	r0, d856e <_findenv_r+0x6e>
   d854a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d854e:	191e      	adds	r6, r3, r4
   d8550:	5d1b      	ldrb	r3, [r3, r4]
   d8552:	2b3d      	cmp	r3, #61	; 0x3d
   d8554:	d10b      	bne.n	d856e <_findenv_r+0x6e>
   d8556:	f8da 3000 	ldr.w	r3, [sl]
   d855a:	1aed      	subs	r5, r5, r3
   d855c:	10ad      	asrs	r5, r5, #2
   d855e:	4638      	mov	r0, r7
   d8560:	f8c8 5000 	str.w	r5, [r8]
   d8564:	f000 f8ad 	bl	d86c2 <__env_unlock>
   d8568:	1c70      	adds	r0, r6, #1
   d856a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d856e:	464d      	mov	r5, r9
   d8570:	e7e1      	b.n	d8536 <_findenv_r+0x36>
   d8572:	bf00      	nop
   d8574:	2003e1e8 	.word	0x2003e1e8

000d8578 <_getenv_r>:
   d8578:	b507      	push	{r0, r1, r2, lr}
   d857a:	aa01      	add	r2, sp, #4
   d857c:	f7ff ffc0 	bl	d8500 <_findenv_r>
   d8580:	b003      	add	sp, #12
   d8582:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8588 <__gettzinfo>:
   d8588:	4800      	ldr	r0, [pc, #0]	; (d858c <__gettzinfo+0x4>)
   d858a:	4770      	bx	lr
   d858c:	2003e1a8 	.word	0x2003e1a8

000d8590 <gmtime_r>:
   d8590:	6802      	ldr	r2, [r0, #0]
   d8592:	4b47      	ldr	r3, [pc, #284]	; (d86b0 <gmtime_r+0x120>)
   d8594:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8596:	fb92 f4f3 	sdiv	r4, r2, r3
   d859a:	fb03 2214 	mls	r2, r3, r4, r2
   d859e:	2a00      	cmp	r2, #0
   d85a0:	bfbc      	itt	lt
   d85a2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d85a6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d85aa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d85ae:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d85b2:	fb92 f3f0 	sdiv	r3, r2, r0
   d85b6:	fb00 2213 	mls	r2, r0, r3, r2
   d85ba:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d85be:	bfac      	ite	ge
   d85c0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d85c4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d85c8:	608b      	str	r3, [r1, #8]
   d85ca:	fb92 f3f0 	sdiv	r3, r2, r0
   d85ce:	fb00 2213 	mls	r2, r0, r3, r2
   d85d2:	604b      	str	r3, [r1, #4]
   d85d4:	600a      	str	r2, [r1, #0]
   d85d6:	2307      	movs	r3, #7
   d85d8:	1ce2      	adds	r2, r4, #3
   d85da:	fb92 f3f3 	sdiv	r3, r2, r3
   d85de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d85e2:	1ad3      	subs	r3, r2, r3
   d85e4:	618b      	str	r3, [r1, #24]
   d85e6:	4b33      	ldr	r3, [pc, #204]	; (d86b4 <gmtime_r+0x124>)
   d85e8:	4d33      	ldr	r5, [pc, #204]	; (d86b8 <gmtime_r+0x128>)
   d85ea:	fb94 f5f5 	sdiv	r5, r4, r5
   d85ee:	fb03 4405 	mla	r4, r3, r5, r4
   d85f2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d85f6:	fbb4 f2f2 	udiv	r2, r4, r2
   d85fa:	4422      	add	r2, r4
   d85fc:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8600:	fbb4 f3f7 	udiv	r3, r4, r7
   d8604:	1ad2      	subs	r2, r2, r3
   d8606:	482d      	ldr	r0, [pc, #180]	; (d86bc <gmtime_r+0x12c>)
   d8608:	fbb4 f0f0 	udiv	r0, r4, r0
   d860c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8610:	1a13      	subs	r3, r2, r0
   d8612:	fbb3 f6f6 	udiv	r6, r3, r6
   d8616:	4434      	add	r4, r6
   d8618:	f240 126d 	movw	r2, #365	; 0x16d
   d861c:	fbb3 f0f2 	udiv	r0, r3, r2
   d8620:	fbb3 f3f7 	udiv	r3, r3, r7
   d8624:	1ae3      	subs	r3, r4, r3
   d8626:	fb02 3310 	mls	r3, r2, r0, r3
   d862a:	2499      	movs	r4, #153	; 0x99
   d862c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8630:	3202      	adds	r2, #2
   d8632:	fbb2 f2f4 	udiv	r2, r2, r4
   d8636:	2a0a      	cmp	r2, #10
   d8638:	fb04 f402 	mul.w	r4, r4, r2
   d863c:	f104 0602 	add.w	r6, r4, #2
   d8640:	f04f 0405 	mov.w	r4, #5
   d8644:	fbb6 f4f4 	udiv	r4, r6, r4
   d8648:	bf34      	ite	cc
   d864a:	2602      	movcc	r6, #2
   d864c:	f06f 0609 	mvncs.w	r6, #9
   d8650:	4416      	add	r6, r2
   d8652:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8656:	fb02 0505 	mla	r5, r2, r5, r0
   d865a:	1c5f      	adds	r7, r3, #1
   d865c:	2e01      	cmp	r6, #1
   d865e:	bf98      	it	ls
   d8660:	3501      	addls	r5, #1
   d8662:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8666:	eba7 0704 	sub.w	r7, r7, r4
   d866a:	d302      	bcc.n	d8672 <gmtime_r+0xe2>
   d866c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8670:	e014      	b.n	d869c <gmtime_r+0x10c>
   d8672:	0782      	lsls	r2, r0, #30
   d8674:	d105      	bne.n	d8682 <gmtime_r+0xf2>
   d8676:	2464      	movs	r4, #100	; 0x64
   d8678:	fbb0 f2f4 	udiv	r2, r0, r4
   d867c:	fb04 0212 	mls	r2, r4, r2, r0
   d8680:	b94a      	cbnz	r2, d8696 <gmtime_r+0x106>
   d8682:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8686:	fbb0 f4f2 	udiv	r4, r0, r2
   d868a:	fb02 0014 	mls	r0, r2, r4, r0
   d868e:	fab0 f280 	clz	r2, r0
   d8692:	0952      	lsrs	r2, r2, #5
   d8694:	e000      	b.n	d8698 <gmtime_r+0x108>
   d8696:	2201      	movs	r2, #1
   d8698:	333b      	adds	r3, #59	; 0x3b
   d869a:	441a      	add	r2, r3
   d869c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d86a0:	2300      	movs	r3, #0
   d86a2:	61ca      	str	r2, [r1, #28]
   d86a4:	614d      	str	r5, [r1, #20]
   d86a6:	610e      	str	r6, [r1, #16]
   d86a8:	60cf      	str	r7, [r1, #12]
   d86aa:	620b      	str	r3, [r1, #32]
   d86ac:	4608      	mov	r0, r1
   d86ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d86b0:	00015180 	.word	0x00015180
   d86b4:	fffdc54f 	.word	0xfffdc54f
   d86b8:	00023ab1 	.word	0x00023ab1
   d86bc:	00023ab0 	.word	0x00023ab0

000d86c0 <__env_lock>:
   d86c0:	4770      	bx	lr

000d86c2 <__env_unlock>:
   d86c2:	4770      	bx	lr

000d86c4 <dynalib_user>:
   d86c4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d86d4:	0000 0000 2e25 6630 2525 2500 2e33 6631     ....%.0f%%.%3.1f
   d86e4:	5620 2500 2e33 6631 4420 6765 6572 7365      V.%3.1f Degrees
   d86f4:	4320 5600 7265 6f62 6573 4d20 646f 2065      C.Verbose Mode 
   d8704:	7453 7261 6574 2e64 3000 5600 7265 6f62     Started..0.Verbo
   d8714:	6573 4d20 646f 2065 7453 706f 6570 2e64     se Mode Stopped.
   d8724:	7b00 5422 6d65 6570 6172 7574 6572 3a22     .{"Temperature":
   d8734:	3325 312e 2c66 2220 6142 7474 7265 2279     %3.1f, "Battery"
   d8744:	253a 2e33 6631 007d 6941 2d72 7551 6c61     :%3.1f}.Air-Qual
   d8754:	7469 2d79 6f48 6b6f 4d00 4145 5553 4952     ity-Hook.MEASURI
   d8764:	474e 5300 6174 6574 5200 5045 524f 4954     NG.State.REPORTI
   d8774:	474e 5400 6d65 6570 6172 7574 6572 4900     NG.Temperature.I
   d8784:	4c44 0045 6563 736c 7569 0073 6552 656c     DLE.celsius.Rele
   d8794:	7361 0065 6953 6e67 6c61 4200 7461 6574     ase.Signal.Batte
   d87a4:	7972 7600 7265 6f62 6573 6f4d 6564 3100          ry.verboseMode.

000d87b3 <_ZL13releaseNumber>:
   d87b3:	2e31 3830 0000 0000 0000                         1.08.....

000d87bc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d87c4:	532b 000d 5331 000d 5349 000d 533f 000d     +S..1S..IS..?S..
   d87d4:	532d 000d                                   -S..

000d87d8 <_ZTVN5spark13EthernetClassE>:
	...
   d87e0:	591f 000d 5915 000d 590b 000d 5901 000d     .Y...Y...Y...Y..
   d87f0:	58f5 000d 58e9 000d 58dd 000d 58d5 000d     .X...X...X...X..
   d8800:	58cb 000d 58c1 000d 5ca5 000d               .X...X...\..

000d880c <_ZTV7TwoWire>:
	...
   d8814:	593d 000d 5987 000d 595f 000d 593f 000d     =Y...Y.._Y..?Y..
   d8824:	5967 000d 596f 000d 5977 000d 597f 000d     gY..oY..wY...Y..

000d8834 <_ZTV9IPAddress>:
	...
   d883c:	59d9 000d 59c9 000d 59cb 000d 0066 6e6c     .Y...Y...Y..f.ln
   d884c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d885c:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d886c:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d887c:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d888c:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d889c:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d88ac:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d88bc:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d88cc:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d88dc:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d88ec:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d88fc:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d890c:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d891c:	6170 696e 0063 6c61 006c 0000               panic.all...

000d8928 <_ZTVN5spark9MeshClassE>:
	...
   d8930:	5b3d 000d 5b33 000d 5b29 000d 4cb1 000d     =[..3[..)[...L..
   d8940:	5b1d 000d 5b11 000d 5b05 000d 5afd 000d     .[...[...[...Z..
   d8950:	5af3 000d 5ae9 000d 5ca5 000d               .Z...Z...\..

000d895c <_ZTVN5spark12NetworkClassE>:
	...
   d8964:	5c3d 000d 5c47 000d 5c51 000d 5c5b 000d     =\..G\..Q\..[\..
   d8974:	5c65 000d 5c71 000d 5c7d 000d 5c89 000d     e\..q\..}\...\..
   d8984:	5c91 000d 5c9b 000d 5ca5 000d               .\...\...\..

000d8990 <_ZTV8SPIClass>:
	...
   d8998:	5e5d 000d 5e5f 000d                         ]^.._^..

000d89a0 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d89a8:	6035 000d 603b 000d 6523 000d 6049 000d     5`..;`..#e..I`..
   d89b8:	6037 000d                                   7`..

000d89bc <_ZTV9TCPClient>:
	...
   d89c4:	4bbd 000d 4c17 000d 5fad 000d 5fc7 000d     .K...L..._..._..
   d89d4:	63c9 000d 620b 000d 61dd 000d 5ff1 000d     .c...b...a..._..
   d89e4:	62a1 000d 604d 000d 623f 000d 639b 000d     .b..M`..?b...c..
   d89f4:	5ff3 000d 602b 000d 5fd9 000d 613d 000d     ._..+`..._..=a..
   d8a04:	61bd 000d 6977 6972 676e 7200 6365 2076     .a..wiring.recv 
   d8a14:	7265 6f72 2072 203d 6425 2500 302b 6433     error = %d.%+03d
   d8a24:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d8a34:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d8a44:	0065 0000                                   e...

000d8a48 <_ZTV3UDP>:
	...
   d8a50:	4b9d 000d 4c03 000d 6655 000d 677f 000d     .K...L..Uf...g..
   d8a60:	664d 000d 666b 000d 6689 000d 66a3 000d     Mf..kf...f...f..
   d8a70:	66c7 000d 6763 000d 6a65 000d 6805 000d     .f..cg..ej...h..
   d8a80:	6985 000d 6635 000d 6b45 000d 6909 000d     .i..5f..Ek...i..
   d8a90:	683d 000d 6b73 000d 67a9 000d 6643 000d     =h..sk...g..Cf..
   d8aa0:	67e5 000d 6649 000d 66a5 000d fff0 ffff     .g..If...f......
   d8ab0:	0000 0000 66bf 000d                         .....f..

000d8ab8 <_ZTV11USARTSerial>:
	...
   d8ac0:	6baf 000d 6bff 000d 6c0d 000d 5d85 000d     .k...k...l...]..
   d8ad0:	6bc3 000d 6be5 000d 6bd1 000d 6bf9 000d     .k...k...k...k..
   d8ae0:	6bb1 000d 6bb5 000d                         .k...k..

000d8ae8 <_ZTV9USBSerial>:
	...
   d8af0:	6cb5 000d 6d05 000d 6d13 000d 5d85 000d     .l...m...m...]..
   d8b00:	6cf1 000d 6cb7 000d 6ccd 000d 6cff 000d     .l...l...l...l..
   d8b10:	6ce3 000d 6cb1 000d                         .l...l..

000d8b18 <_ZTVN5spark9WiFiClassE>:
	...
   d8b20:	6e85 000d 6e7b 000d 6e71 000d 6e19 000d     .n..{n..qn...n..
   d8b30:	6e65 000d 6e59 000d 6e4d 000d 6e45 000d     en..Yn..Mn..En..
   d8b40:	6e3b 000d 6e31 000d 5ca5 000d               ;n..1n...\..

000d8b4c <_ZTV10WiFiSignal>:
	...
   d8b54:	6db9 000d 6e23 000d 6dbb 000d 6ec5 000d     .m..#n...m...n..
   d8b64:	6dc1 000d 6e91 000d 6ded 000d               .m...n...m..

000d8b70 <_ctype_>:
   d8b70:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8b80:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8b90:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8ba0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8bb0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8bc0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8bd0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8be0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8bf0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8c74 <__sf_fake_stdin>:
	...

000d8c94 <__sf_fake_stdout>:
	...

000d8cb4 <__sf_fake_stderr>:
	...

000d8cd4 <__month_lengths>:
   d8cd4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d8ce4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8cf4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8d04:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8d14:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8d24:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8d34:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8d44:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8d54:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d8d64:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d8d70 <link_const_variable_data_end>:
   d8d70:	000d4515 	.word	0x000d4515
   d8d74:	000d47ab 	.word	0x000d47ab
   d8d78:	000d4b8d 	.word	0x000d4b8d
   d8d7c:	000d4c2d 	.word	0x000d4c2d
   d8d80:	000d4c89 	.word	0x000d4c89
   d8d84:	000d4cbd 	.word	0x000d4cbd
   d8d88:	000d4cd1 	.word	0x000d4cd1
   d8d8c:	000d4cd5 	.word	0x000d4cd5
   d8d90:	000d4ce5 	.word	0x000d4ce5
   d8d94:	000d4d0d 	.word	0x000d4d0d
   d8d98:	000d4d35 	.word	0x000d4d35
   d8d9c:	000d5929 	.word	0x000d5929
   d8da0:	000d5ad9 	.word	0x000d5ad9
   d8da4:	000d5bf1 	.word	0x000d5bf1
   d8da8:	000d5d71 	.word	0x000d5d71
   d8dac:	000d5e41 	.word	0x000d5e41
   d8db0:	000d5f95 	.word	0x000d5f95
   d8db4:	000d6621 	.word	0x000d6621
   d8db8:	000d6f9d 	.word	0x000d6f9d
   d8dbc:	000d715d 	.word	0x000d715d
   d8dc0:	000d71b5 	.word	0x000d71b5
   d8dc4:	000d7279 	.word	0x000d7279
   d8dc8:	000d72fd 	.word	0x000d72fd
   d8dcc:	000d7381 	.word	0x000d7381
