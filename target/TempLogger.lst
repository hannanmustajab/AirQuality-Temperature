
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/TempLogger/target/TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002438  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000164e4  2**0
                  CONTENTS
  3 .data         00000068  2003e320  000d6450  0000e320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000468  2003e388  2003e388  0001e388  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d64b8  000d64b8  000164b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d64e0  000d64e0  000164e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000cf6dd  00000000  00000000  000164e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012a0a  00000000  00000000  000e5bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000161cb  00000000  00000000  000f85cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002050  00000000  00000000  0010e796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000032e0  00000000  00000000  001107e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000375d5  00000000  00000000  00113ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002f7a3  00000000  00000000  0014b09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d9a49  00000000  00000000  0017a83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b9f4  00000000  00000000  00254288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	d8 60 0d 00                                         .`..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f80f 	bl	d6050 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f814 	bl	d6066 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e320 	.word	0x2003e320
   d4048:	000d6450 	.word	0x000d6450
   d404c:	2003e388 	.word	0x2003e388
   d4050:	2003e388 	.word	0x2003e388
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f9f1 	bl	d5440 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6450 	.word	0x000d6450
   d4080:	000d6404 	.word	0x000d6404

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f825 	bl	d40d8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b9a3 	b.w	d53dc <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bd5b 	b.w	d4b50 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bd59 	b.w	d4b50 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:





void setup() {
   d40b0:	b508      	push	{r3, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d40b2:	4907      	ldr	r1, [pc, #28]	; (d40d0 <setup+0x20>)
   d40b4:	4807      	ldr	r0, [pc, #28]	; (d40d4 <setup+0x24>)
   d40b6:	2300      	movs	r3, #0
   d40b8:	2204      	movs	r2, #4
   d40ba:	f000 fce1 	bl	d4a80 <spark_variable>

  //pinMode(D3,OUTPUT);   // Why are you defining this pin - don't see it being used

  Particle.variable("celsius",temperatureString);// Setup Particle Variable
  Serial.begin(); 
   d40be:	f001 f90b 	bl	d52d8 <_Z16_fetch_usbserialv>
   d40c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580

}
   d40c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {

  //pinMode(D3,OUTPUT);   // Why are you defining this pin - don't see it being used

  Particle.variable("celsius",temperatureString);// Setup Particle Variable
  Serial.begin(); 
   d40ca:	f001 b8f9 	b.w	d52c0 <_ZN9USBSerial5beginEl>
   d40ce:	bf00      	nop
   d40d0:	2003e38c 	.word	0x2003e38c
   d40d4:	000d60ec 	.word	0x000d60ec

000d40d8 <loop>:
}




void loop() {
   d40d8:	b507      	push	{r0, r1, r2, lr}
// Reading data from the sensor.    
   if (sensor.read()) {
   d40da:	480e      	ldr	r0, [pc, #56]	; (d4114 <loop+0x3c>)
   d40dc:	f000 f948 	bl	d4370 <_ZN4DS184readEv>
   d40e0:	b1a8      	cbz	r0, d410e <loop+0x36>

      //snprintf(temperatureString , 16, "%0.2lf Degrees C",sensor.celsius());
      snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", sensor.celsius());  // Ensures you get the size right and prevent memory overflow
   d40e2:	480c      	ldr	r0, [pc, #48]	; (d4114 <loop+0x3c>)
   d40e4:	f000 f968 	bl	d43b8 <_ZN4DS187celsiusEv>
   d40e8:	ee10 0a10 	vmov	r0, s0
   d40ec:	f001 fcec 	bl	d5ac8 <__aeabi_f2d>
   d40f0:	4a09      	ldr	r2, [pc, #36]	; (d4118 <loop+0x40>)
   d40f2:	e9cd 0100 	strd	r0, r1, [sp]
   d40f6:	2110      	movs	r1, #16
   d40f8:	4808      	ldr	r0, [pc, #32]	; (d411c <loop+0x44>)
   d40fa:	f000 fd31 	bl	d4b60 <snprintf>
      Serial.print("sensor.celsius()");
   d40fe:	f001 f8eb 	bl	d52d8 <_Z16_fetch_usbserialv>
   d4102:	4907      	ldr	r1, [pc, #28]	; (d4120 <loop+0x48>)
    the program flow through the main loop.  This gets more important as the code size grows.
     */
    //waitFor(sensor.read,5000);  // This will not rate limit as sensor.read will test true much faster than 1/sec. In fact, you are here in the code because it is true
   // waitUntil(PublishDelayFunction);
    //Particle.publish("farenhiet",String(sensor.fahrenheit()),PRIVATE);  
  }
   d4104:	b003      	add	sp, #12
   d4106:	f85d eb04 	ldr.w	lr, [sp], #4
// Reading data from the sensor.    
   if (sensor.read()) {

      //snprintf(temperatureString , 16, "%0.2lf Degrees C",sensor.celsius());
      snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", sensor.celsius());  // Ensures you get the size right and prevent memory overflow
      Serial.print("sensor.celsius()");
   d410a:	f000 bfb1 	b.w	d5070 <_ZN5Print5printEPKc>
    the program flow through the main loop.  This gets more important as the code size grows.
     */
    //waitFor(sensor.read,5000);  // This will not rate limit as sensor.read will test true much faster than 1/sec. In fact, you are here in the code because it is true
   // waitUntil(PublishDelayFunction);
    //Particle.publish("farenhiet",String(sensor.fahrenheit()),PRIVATE);  
  }
   d410e:	b003      	add	sp, #12
   d4110:	f85d fb04 	ldr.w	pc, [sp], #4
   d4114:	2003e39c 	.word	0x2003e39c
   d4118:	000d60f4 	.word	0x000d60f4
   d411c:	2003e38c 	.word	0x2003e38c
   d4120:	000d6104 	.word	0x000d6104

000d4124 <_GLOBAL__sub_I_sensor>:
   d4124:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4126:	f000 fb87 	bl	d4838 <HAL_Pin_Map>


#include "DS18.h"

// Initialize sensor object
DS18 sensor(D8);
   d412a:	2200      	movs	r2, #0
   d412c:	2108      	movs	r1, #8
   d412e:	4804      	ldr	r0, [pc, #16]	; (d4140 <_GLOBAL__sub_I_sensor+0x1c>)
   d4130:	f000 f81d 	bl	d416e <_ZN4DS18C1Etb>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4134:	f000 fb78 	bl	d4828 <HAL_Timer_Get_Milli_Seconds>

// You could define a smaller array here for your Temperature variable
char temperatureString[16];

int updateRate = 5000; // Define Update Rate
unsigned long tstamp = millis();  // Initialize timestamp
   d4138:	4b02      	ldr	r3, [pc, #8]	; (d4144 <_GLOBAL__sub_I_sensor+0x20>)
   d413a:	6018      	str	r0, [r3, #0]
   d413c:	bd08      	pop	{r3, pc}
   d413e:	bf00      	nop
   d4140:	2003e39c 	.word	0x2003e39c
   d4144:	2003e3c8 	.word	0x2003e3c8

000d4148 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d4148:	f000 bb76 	b.w	d4838 <HAL_Pin_Map>

000d414c <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d414c:	2300      	movs	r3, #0
  _celsius = 0;
   d414e:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4150:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d4152:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d4154:	6183      	str	r3, [r0, #24]
   d4156:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d4158:	6203      	str	r3, [r0, #32]
   d415a:	6243      	str	r3, [r0, #36]	; 0x24
   d415c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d4160:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d4164:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d4168:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d416c:	4770      	bx	lr

000d416e <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d416e:	b538      	push	{r3, r4, r5, lr}
   d4170:	4604      	mov	r4, r0
   d4172:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4174:	f000 f994 	bl	d44a0 <_ZN7OneWireC1Et>
   d4178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d417c:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d417e:	73a5      	strb	r5, [r4, #14]
   d4180:	8223      	strh	r3, [r4, #16]
{
  init();
   d4182:	f7ff ffe3 	bl	d414c <_ZN4DS184initEv>
}
   d4186:	4620      	mov	r0, r4
   d4188:	bd38      	pop	{r3, r4, r5, pc}
	...

000d418c <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d418e:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d4192:	680b      	ldr	r3, [r1, #0]
   d4194:	6183      	str	r3, [r0, #24]
   d4196:	f100 0518 	add.w	r5, r0, #24
   d419a:	684b      	ldr	r3, [r1, #4]
   d419c:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d419e:	780b      	ldrb	r3, [r1, #0]
   d41a0:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d41a2:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d41a4:	d00a      	beq.n	d41bc <_ZN4DS184readEPh+0x30>
   d41a6:	d803      	bhi.n	d41b0 <_ZN4DS184readEPh+0x24>
   d41a8:	2b10      	cmp	r3, #16
   d41aa:	d142      	bne.n	d4232 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d41ac:	2301      	movs	r3, #1
   d41ae:	e008      	b.n	d41c2 <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d41b0:	2b26      	cmp	r3, #38	; 0x26
   d41b2:	d005      	beq.n	d41c0 <_ZN4DS184readEPh+0x34>
   d41b4:	2b28      	cmp	r3, #40	; 0x28
   d41b6:	d13c      	bne.n	d4232 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d41b8:	2302      	movs	r3, #2
   d41ba:	e002      	b.n	d41c2 <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d41bc:	2303      	movs	r3, #3
   d41be:	e000      	b.n	d41c2 <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d41c0:	2304      	movs	r3, #4
   d41c2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d41c6:	4620      	mov	r0, r4
   d41c8:	f000 f974 	bl	d44b4 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d41cc:	4629      	mov	r1, r5
   d41ce:	4620      	mov	r0, r4
   d41d0:	f000 fa30 	bl	d4634 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d41d4:	7ba2      	ldrb	r2, [r4, #14]
   d41d6:	2144      	movs	r1, #68	; 0x44
   d41d8:	4620      	mov	r0, r4
   d41da:	f000 f9f8 	bl	d45ce <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d41de:	8a20      	ldrh	r0, [r4, #16]
   d41e0:	f000 fcc6 	bl	d4b70 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d41e4:	4620      	mov	r0, r4
   d41e6:	f000 f965 	bl	d44b4 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d41ea:	4629      	mov	r1, r5
   d41ec:	4620      	mov	r0, r4
   d41ee:	f000 fa21 	bl	d4634 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d41f2:	2200      	movs	r2, #0
   d41f4:	21b8      	movs	r1, #184	; 0xb8
   d41f6:	4620      	mov	r0, r4
   d41f8:	f000 f9e9 	bl	d45ce <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d41fc:	2200      	movs	r2, #0
   d41fe:	4611      	mov	r1, r2
   d4200:	4620      	mov	r0, r4
   d4202:	f000 f9e4 	bl	d45ce <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d4206:	4620      	mov	r0, r4
   d4208:	f000 f954 	bl	d44b4 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d420c:	4629      	mov	r1, r5
   d420e:	4620      	mov	r0, r4
   d4210:	f000 fa10 	bl	d4634 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d4214:	2200      	movs	r2, #0
   d4216:	21be      	movs	r1, #190	; 0xbe
   d4218:	4620      	mov	r0, r4
   d421a:	f000 f9d8 	bl	d45ce <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d421e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d4222:	2b04      	cmp	r3, #4
   d4224:	d109      	bne.n	d423a <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d4226:	2200      	movs	r2, #0
   d4228:	4611      	mov	r1, r2
   d422a:	4620      	mov	r0, r4
   d422c:	f000 f9cf 	bl	d45ce <_ZN7OneWire5writeEhh>
   d4230:	e003      	b.n	d423a <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d4232:	2000      	movs	r0, #0
   d4234:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d4238:	e094      	b.n	d4364 <_ZN4DS184readEPh+0x1d8>
   d423a:	f104 051f 	add.w	r5, r4, #31
   d423e:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d4242:	4620      	mov	r0, r4
   d4244:	f000 f9e6 	bl	d4614 <_ZN7OneWire4readEv>
   d4248:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d424c:	42ae      	cmp	r6, r5
   d424e:	d1f8      	bne.n	d4242 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d4250:	2108      	movs	r1, #8
   d4252:	f104 0020 	add.w	r0, r4, #32
   d4256:	f000 fa86 	bl	d4766 <_ZN7OneWire4crc8EPhh>
   d425a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d425e:	4283      	cmp	r3, r0
   d4260:	d004      	beq.n	d426c <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d4262:	2301      	movs	r3, #1
   d4264:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4268:	2000      	movs	r0, #0
   d426a:	e07b      	b.n	d4364 <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d426c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d4270:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d4274:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4278:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d427c:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d427e:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d4280:	d127      	bne.n	d42d2 <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d4282:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4286:	ee07 3a90 	vmov	s15, r3
   d428a:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d428e:	08d2      	lsrs	r2, r2, #3
   d4290:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d4294:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d4298:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d429c:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d429e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d42a2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d42a6:	d045      	beq.n	d4334 <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d42a8:	ee18 0a90 	vmov	r0, s17
   d42ac:	f001 fc0c 	bl	d5ac8 <__aeabi_f2d>
   d42b0:	4606      	mov	r6, r0
   d42b2:	ee18 0a10 	vmov	r0, s16
   d42b6:	460f      	mov	r7, r1
   d42b8:	f001 fc06 	bl	d5ac8 <__aeabi_f2d>
   d42bc:	2200      	movs	r2, #0
   d42be:	4b2b      	ldr	r3, [pc, #172]	; (d436c <_ZN4DS184readEPh+0x1e0>)
   d42c0:	f001 fc56 	bl	d5b70 <__aeabi_dmul>
   d42c4:	4602      	mov	r2, r0
   d42c6:	460b      	mov	r3, r1
   d42c8:	4630      	mov	r0, r6
   d42ca:	4639      	mov	r1, r7
   d42cc:	f001 fa9c 	bl	d5808 <__aeabi_dsub>
   d42d0:	e044      	b.n	d435c <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d42d2:	2901      	cmp	r1, #1
   d42d4:	d003      	beq.n	d42de <_ZN4DS184readEPh+0x152>
   d42d6:	d344      	bcc.n	d4362 <_ZN4DS184readEPh+0x1d6>
   d42d8:	2903      	cmp	r1, #3
   d42da:	d910      	bls.n	d42fe <_ZN4DS184readEPh+0x172>
   d42dc:	e041      	b.n	d4362 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d42de:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d42e2:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d42e6:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d42e8:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d42ea:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d42ec:	d119      	bne.n	d4322 <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d42ee:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d42f2:	f023 030f 	bic.w	r3, r3, #15
   d42f6:	f1c2 020c 	rsb	r2, r2, #12
   d42fa:	4413      	add	r3, r2
   d42fc:	e010      	b.n	d4320 <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d42fe:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d4302:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d4306:	d102      	bne.n	d430e <_ZN4DS184readEPh+0x182>
   d4308:	f023 0307 	bic.w	r3, r3, #7
   d430c:	e008      	b.n	d4320 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d430e:	2a20      	cmp	r2, #32
   d4310:	d102      	bne.n	d4318 <_ZN4DS184readEPh+0x18c>
   d4312:	f023 0303 	bic.w	r3, r3, #3
   d4316:	e003      	b.n	d4320 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4318:	2a40      	cmp	r2, #64	; 0x40
   d431a:	d102      	bne.n	d4322 <_ZN4DS184readEPh+0x196>
   d431c:	f023 0301 	bic.w	r3, r3, #1
   d4320:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d4322:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d4326:	ee07 3a90 	vmov	s15, r3
   d432a:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d432e:	edc4 7a05 	vstr	s15, [r4, #20]
   d4332:	e016      	b.n	d4362 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4334:	ee18 0a10 	vmov	r0, s16
   d4338:	f001 fbc6 	bl	d5ac8 <__aeabi_f2d>
   d433c:	2200      	movs	r2, #0
   d433e:	4b0b      	ldr	r3, [pc, #44]	; (d436c <_ZN4DS184readEPh+0x1e0>)
   d4340:	f001 fc16 	bl	d5b70 <__aeabi_dmul>
   d4344:	4606      	mov	r6, r0
   d4346:	ee18 0a90 	vmov	r0, s17
   d434a:	460f      	mov	r7, r1
   d434c:	f001 fbbc 	bl	d5ac8 <__aeabi_f2d>
   d4350:	4602      	mov	r2, r0
   d4352:	460b      	mov	r3, r1
   d4354:	4630      	mov	r0, r6
   d4356:	4639      	mov	r1, r7
   d4358:	f001 fa58 	bl	d580c <__adddf3>
   d435c:	f001 fe1a 	bl	d5f94 <__aeabi_d2f>
   d4360:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d4362:	2001      	movs	r0, #1
}
   d4364:	ecbd 8b02 	vpop	{d8}
   d4368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d436a:	bf00      	nop
   d436c:	3fa00000 	.word	0x3fa00000

000d4370 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d4370:	b538      	push	{r3, r4, r5, lr}
   d4372:	4604      	mov	r4, r0
  init();
   d4374:	f7ff feea 	bl	d414c <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d4378:	f100 0518 	add.w	r5, r0, #24
   d437c:	4629      	mov	r1, r5
   d437e:	f000 f977 	bl	d4670 <_ZN7OneWire6searchEPh>
   d4382:	b930      	cbnz	r0, d4392 <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d4384:	2301      	movs	r3, #1
   d4386:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d438a:	4620      	mov	r0, r4
   d438c:	f000 f964 	bl	d4658 <_ZN7OneWire12reset_searchEv>
    return false;
   d4390:	e010      	b.n	d43b4 <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d4392:	2107      	movs	r1, #7
   d4394:	4628      	mov	r0, r5
   d4396:	f000 f9e6 	bl	d4766 <_ZN7OneWire4crc8EPhh>
   d439a:	7fe3      	ldrb	r3, [r4, #31]
   d439c:	4283      	cmp	r3, r0
   d439e:	d003      	beq.n	d43a8 <_ZN4DS184readEv+0x38>
    _crcError = true;
   d43a0:	2301      	movs	r3, #1
   d43a2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d43a6:	e005      	b.n	d43b4 <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d43a8:	4629      	mov	r1, r5
   d43aa:	4620      	mov	r0, r4
}
   d43ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d43b0:	f7ff beec 	b.w	d418c <_ZN4DS184readEPh>
}
   d43b4:	2000      	movs	r0, #0
   d43b6:	bd38      	pop	{r3, r4, r5, pc}

000d43b8 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d43b8:	ed90 0a05 	vldr	s0, [r0, #20]
   d43bc:	4770      	bx	lr

000d43be <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d43be:	f000 ba3b 	b.w	d4838 <HAL_Pin_Map>
	...

000d43c4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d43c4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d43c6:	6803      	ldr	r3, [r0, #0]
   d43c8:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d43ca:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d43cc:	d904      	bls.n	d43d8 <nrf_gpio_pin_port_decode+0x14>
   d43ce:	4a07      	ldr	r2, [pc, #28]	; (d43ec <nrf_gpio_pin_port_decode+0x28>)
   d43d0:	2100      	movs	r1, #0
   d43d2:	200a      	movs	r0, #10
   d43d4:	f000 fb28 	bl	d4a28 <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d43d8:	6823      	ldr	r3, [r4, #0]
   d43da:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d43dc:	bf83      	ittte	hi
   d43de:	f003 031f 	andhi.w	r3, r3, #31
   d43e2:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d43e4:	4802      	ldrhi	r0, [pc, #8]	; (d43f0 <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d43e6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d43ea:	bd10      	pop	{r4, pc}
   d43ec:	000d4819 	.word	0x000d4819
   d43f0:	50000300 	.word	0x50000300

000d43f4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d43f4:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43f6:	4b0b      	ldr	r3, [pc, #44]	; (d4424 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	0100      	lsls	r0, r0, #4
   d43fc:	1819      	adds	r1, r3, r0
   d43fe:	5c1a      	ldrb	r2, [r3, r0]
   d4400:	784b      	ldrb	r3, [r1, #1]
   d4402:	a802      	add	r0, sp, #8
   d4404:	f003 031f 	and.w	r3, r3, #31
   d4408:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d440c:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4410:	f7ff ffd8 	bl	d43c4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4414:	9a01      	ldr	r2, [sp, #4]
   d4416:	2301      	movs	r3, #1
   d4418:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d441a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d441e:	b003      	add	sp, #12
   d4420:	f85d fb04 	ldr.w	pc, [sp], #4
   d4424:	2003e3cc 	.word	0x2003e3cc

000d4428 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4428:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d442a:	4b0b      	ldr	r3, [pc, #44]	; (d4458 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	0100      	lsls	r0, r0, #4
   d4430:	1819      	adds	r1, r3, r0
   d4432:	5c1a      	ldrb	r2, [r3, r0]
   d4434:	784b      	ldrb	r3, [r1, #1]
   d4436:	a802      	add	r0, sp, #8
   d4438:	f003 031f 	and.w	r3, r3, #31
   d443c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4440:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4444:	f7ff ffbe 	bl	d43c4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4448:	9a01      	ldr	r2, [sp, #4]
   d444a:	2301      	movs	r3, #1
   d444c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d444e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d4452:	b003      	add	sp, #12
   d4454:	f85d fb04 	ldr.w	pc, [sp], #4
   d4458:	2003e3cc 	.word	0x2003e3cc

000d445c <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d445c:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d445e:	4b0f      	ldr	r3, [pc, #60]	; (d449c <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	0100      	lsls	r0, r0, #4
   d4464:	181a      	adds	r2, r3, r0
   d4466:	5c1c      	ldrb	r4, [r3, r0]
   d4468:	7853      	ldrb	r3, [r2, #1]
   d446a:	a802      	add	r0, sp, #8
   d446c:	f003 031f 	and.w	r3, r3, #31
   d4470:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4474:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4478:	f7ff ffa4 	bl	d43c4 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d447c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4480:	a802      	add	r0, sp, #8
   d4482:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4486:	f7ff ff9d 	bl	d43c4 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d448a:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d448e:	9800      	ldr	r0, [sp, #0]
   d4490:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4494:	f000 0001 	and.w	r0, r0, #1
   d4498:	b002      	add	sp, #8
   d449a:	bd10      	pop	{r4, pc}
   d449c:	2003e3cc 	.word	0x2003e3cc

000d44a0 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d44a0:	b538      	push	{r3, r4, r5, lr}
   d44a2:	4604      	mov	r4, r0
   d44a4:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d44a6:	4628      	mov	r0, r5
   d44a8:	2100      	movs	r1, #0
   d44aa:	f001 f807 	bl	d54bc <pinMode>
    _pin = pin;
   d44ae:	8025      	strh	r5, [r4, #0]
}
   d44b0:	4620      	mov	r0, r4
   d44b2:	bd38      	pop	{r3, r4, r5, pc}

000d44b4 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d44b4:	b538      	push	{r3, r4, r5, lr}
   d44b6:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d44b8:	f000 fbe6 	bl	d4c88 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d44bc:	2100      	movs	r1, #0
   d44be:	8828      	ldrh	r0, [r5, #0]
   d44c0:	f000 f9c2 	bl	d4848 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d44c4:	f000 fbe2 	bl	d4c8c <_Z10interruptsv>
   d44c8:	247d      	movs	r4, #125	; 0x7d
   d44ca:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d44cc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d44d0:	d02b      	beq.n	d452a <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d44d2:	2002      	movs	r0, #2
   d44d4:	f000 f9a0 	bl	d4818 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d44d8:	8828      	ldrh	r0, [r5, #0]
   d44da:	f7ff ffbf 	bl	d445c <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d44de:	2800      	cmp	r0, #0
   d44e0:	d0f3      	beq.n	d44ca <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d44e2:	f000 fbd1 	bl	d4c88 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d44e6:	8828      	ldrh	r0, [r5, #0]
   d44e8:	f7ff ff84 	bl	d43f4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d44ec:	2101      	movs	r1, #1
   d44ee:	8828      	ldrh	r0, [r5, #0]
   d44f0:	f000 f9aa 	bl	d4848 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d44f4:	f000 fbca 	bl	d4c8c <_Z10interruptsv>
   d44f8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d44fc:	f000 f98c 	bl	d4818 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4500:	f000 fbc2 	bl	d4c88 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4504:	2100      	movs	r1, #0
   d4506:	8828      	ldrh	r0, [r5, #0]
   d4508:	f000 f99e 	bl	d4848 <HAL_Pin_Mode>
   d450c:	2046      	movs	r0, #70	; 0x46
   d450e:	f000 f983 	bl	d4818 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4512:	8828      	ldrh	r0, [r5, #0]
   d4514:	f7ff ffa2 	bl	d445c <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4518:	fab0 f480 	clz	r4, r0

    interrupts();
   d451c:	f000 fbb6 	bl	d4c8c <_Z10interruptsv>
   d4520:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4524:	0964      	lsrs	r4, r4, #5
   d4526:	f000 f977 	bl	d4818 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d452a:	4620      	mov	r0, r4
   d452c:	bd38      	pop	{r3, r4, r5, pc}

000d452e <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d452e:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4530:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d4534:	4604      	mov	r4, r0
    if (v & 1) {
   d4536:	d013      	beq.n	d4560 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4538:	f000 fba6 	bl	d4c88 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d453c:	8820      	ldrh	r0, [r4, #0]
   d453e:	f7ff ff59 	bl	d43f4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4542:	2101      	movs	r1, #1
   d4544:	8820      	ldrh	r0, [r4, #0]
   d4546:	f000 f97f 	bl	d4848 <HAL_Pin_Mode>
   d454a:	200a      	movs	r0, #10
   d454c:	f000 f964 	bl	d4818 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4550:	8820      	ldrh	r0, [r4, #0]
   d4552:	2100      	movs	r1, #0
   d4554:	f000 f978 	bl	d4848 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4558:	f000 fb98 	bl	d4c8c <_Z10interruptsv>
   d455c:	2037      	movs	r0, #55	; 0x37
   d455e:	e012      	b.n	d4586 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4560:	f000 fb92 	bl	d4c88 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4564:	8820      	ldrh	r0, [r4, #0]
   d4566:	f7ff ff45 	bl	d43f4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d456a:	2101      	movs	r1, #1
   d456c:	8820      	ldrh	r0, [r4, #0]
   d456e:	f000 f96b 	bl	d4848 <HAL_Pin_Mode>
   d4572:	2041      	movs	r0, #65	; 0x41
   d4574:	f000 f950 	bl	d4818 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4578:	8820      	ldrh	r0, [r4, #0]
   d457a:	4629      	mov	r1, r5
   d457c:	f000 f964 	bl	d4848 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d4580:	f000 fb84 	bl	d4c8c <_Z10interruptsv>
   d4584:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d4586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d458a:	f000 b945 	b.w	d4818 <HAL_Delay_Microseconds>

000d458e <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d458e:	b510      	push	{r4, lr}
   d4590:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d4592:	f000 fb79 	bl	d4c88 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4596:	8820      	ldrh	r0, [r4, #0]
   d4598:	f7ff ff2c 	bl	d43f4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d459c:	2101      	movs	r1, #1
   d459e:	8820      	ldrh	r0, [r4, #0]
   d45a0:	f000 f952 	bl	d4848 <HAL_Pin_Mode>
   d45a4:	2003      	movs	r0, #3
   d45a6:	f000 f937 	bl	d4818 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d45aa:	2100      	movs	r1, #0
   d45ac:	8820      	ldrh	r0, [r4, #0]
   d45ae:	f000 f94b 	bl	d4848 <HAL_Pin_Mode>
   d45b2:	200a      	movs	r0, #10
   d45b4:	f000 f930 	bl	d4818 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d45b8:	8820      	ldrh	r0, [r4, #0]
   d45ba:	f7ff ff4f 	bl	d445c <_ZN7OneWire15digitalReadFastEv.isra.4>
   d45be:	4604      	mov	r4, r0

    interrupts();
   d45c0:	f000 fb64 	bl	d4c8c <_Z10interruptsv>
   d45c4:	2035      	movs	r0, #53	; 0x35
   d45c6:	f000 f927 	bl	d4818 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d45ca:	4620      	mov	r0, r4
   d45cc:	bd10      	pop	{r4, pc}

000d45ce <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d45ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45d2:	4605      	mov	r5, r0
   d45d4:	4688      	mov	r8, r1
   d45d6:	4617      	mov	r7, r2
   d45d8:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d45da:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d45dc:	ea18 0f04 	tst.w	r8, r4
   d45e0:	bf14      	ite	ne
   d45e2:	2101      	movne	r1, #1
   d45e4:	2100      	moveq	r1, #0
   d45e6:	4628      	mov	r0, r5
   d45e8:	f7ff ffa1 	bl	d452e <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d45ec:	0064      	lsls	r4, r4, #1
   d45ee:	3e01      	subs	r6, #1
   d45f0:	b2e4      	uxtb	r4, r4
   d45f2:	d1f3      	bne.n	d45dc <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d45f4:	b167      	cbz	r7, d4610 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d45f6:	f000 fb47 	bl	d4c88 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d45fa:	8828      	ldrh	r0, [r5, #0]
   d45fc:	f7ff ff14 	bl	d4428 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4600:	8828      	ldrh	r0, [r5, #0]
   d4602:	2101      	movs	r1, #1
   d4604:	f000 f920 	bl	d4848 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d460c:	f000 bb3e 	b.w	d4c8c <_Z10interruptsv>
   d4610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4614 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d4614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4616:	4607      	mov	r7, r0
   d4618:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d461a:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d461c:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d461e:	4638      	mov	r0, r7
   d4620:	f7ff ffb5 	bl	d458e <_ZN7OneWire8read_bitEv>
   d4624:	b100      	cbz	r0, d4628 <_ZN7OneWire4readEv+0x14>
   d4626:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4628:	0064      	lsls	r4, r4, #1
   d462a:	3e01      	subs	r6, #1
   d462c:	b2e4      	uxtb	r4, r4
   d462e:	d1f6      	bne.n	d461e <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4630:	4628      	mov	r0, r5
   d4632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4634 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4634:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d4636:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4638:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d463a:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d463c:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d463e:	f7ff ffc6 	bl	d45ce <_ZN7OneWire5writeEhh>
   d4642:	1e65      	subs	r5, r4, #1
   d4644:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d4646:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d464a:	2200      	movs	r2, #0
   d464c:	4630      	mov	r0, r6
   d464e:	f7ff ffbe 	bl	d45ce <_ZN7OneWire5writeEhh>
   d4652:	42a5      	cmp	r5, r4
   d4654:	d1f7      	bne.n	d4646 <_ZN7OneWire6selectEPKh+0x12>
}
   d4656:	bd70      	pop	{r4, r5, r6, pc}

000d4658 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4658:	2300      	movs	r3, #0
   d465a:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d465c:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d465e:	72c3      	strb	r3, [r0, #11]
   d4660:	f100 020a 	add.w	r2, r0, #10
   d4664:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4666:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d466a:	4282      	cmp	r2, r0
   d466c:	d1fb      	bne.n	d4666 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d466e:	4770      	bx	lr

000d4670 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4674:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4676:	4604      	mov	r4, r0
   d4678:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d467a:	2d00      	cmp	r5, #0
   d467c:	d15e      	bne.n	d473c <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d467e:	f7ff ff19 	bl	d44b4 <_ZN7OneWire5resetEv>
   d4682:	b920      	cbnz	r0, d468e <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4684:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4686:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4688:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d468e:	462a      	mov	r2, r5
   d4690:	21f0      	movs	r1, #240	; 0xf0
   d4692:	4620      	mov	r0, r4
   d4694:	f7ff ff9b 	bl	d45ce <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4698:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d469a:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d469c:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d469e:	4620      	mov	r0, r4
   d46a0:	f7ff ff75 	bl	d458e <_ZN7OneWire8read_bitEv>
   d46a4:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d46a6:	4620      	mov	r0, r4
   d46a8:	f7ff ff71 	bl	d458e <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d46ac:	f1b9 0f01 	cmp.w	r9, #1
   d46b0:	d102      	bne.n	d46b8 <_ZN7OneWire6searchEPh+0x48>
   d46b2:	2801      	cmp	r0, #1
   d46b4:	d11b      	bne.n	d46ee <_ZN7OneWire6searchEPh+0x7e>
   d46b6:	e037      	b.n	d4728 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d46b8:	4581      	cmp	r9, r0
   d46ba:	eb04 0305 	add.w	r3, r4, r5
   d46be:	d11e      	bne.n	d46fe <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d46c0:	7aa2      	ldrb	r2, [r4, #10]
   d46c2:	4297      	cmp	r7, r2
   d46c4:	d207      	bcs.n	d46d6 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d46c6:	789a      	ldrb	r2, [r3, #2]
   d46c8:	4216      	tst	r6, r2
   d46ca:	bf14      	ite	ne
   d46cc:	f04f 0901 	movne.w	r9, #1
   d46d0:	f04f 0900 	moveq.w	r9, #0
   d46d4:	e004      	b.n	d46e0 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d46d6:	bf0c      	ite	eq
   d46d8:	f04f 0901 	moveq.w	r9, #1
   d46dc:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d46e0:	f1b9 0f00 	cmp.w	r9, #0
   d46e4:	d103      	bne.n	d46ee <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d46e6:	2f08      	cmp	r7, #8
   d46e8:	d808      	bhi.n	d46fc <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d46ea:	72e7      	strb	r7, [r4, #11]
   d46ec:	e006      	b.n	d46fc <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d46ee:	1962      	adds	r2, r4, r5
   d46f0:	f04f 0901 	mov.w	r9, #1
   d46f4:	7893      	ldrb	r3, [r2, #2]
   d46f6:	4333      	orrs	r3, r6
   d46f8:	7093      	strb	r3, [r2, #2]
   d46fa:	e004      	b.n	d4706 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d46fc:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d46fe:	789a      	ldrb	r2, [r3, #2]
   d4700:	ea22 0206 	bic.w	r2, r2, r6
   d4704:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4706:	4649      	mov	r1, r9
   d4708:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d470a:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d470c:	f7ff ff0f 	bl	d452e <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4710:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4714:	bf04      	itt	eq
   d4716:	3501      	addeq	r5, #1
   d4718:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d471a:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d471e:	bf08      	it	eq
   d4720:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4722:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4724:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4726:	d9ba      	bls.n	d469e <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4728:	2f40      	cmp	r7, #64	; 0x40
   d472a:	d907      	bls.n	d473c <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d472c:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4730:	f1ba 0f00 	cmp.w	sl, #0
   d4734:	d112      	bne.n	d475c <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4736:	2301      	movs	r3, #1
   d4738:	7323      	strb	r3, [r4, #12]
   d473a:	e00f      	b.n	d475c <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d473c:	2000      	movs	r0, #0
   d473e:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4740:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4742:	72e0      	strb	r0, [r4, #11]
   d4744:	1c63      	adds	r3, r4, #1
   d4746:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d474a:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d474c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4750:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4754:	42a3      	cmp	r3, r4
   d4756:	d1f9      	bne.n	d474c <_ZN7OneWire6searchEPh+0xdc>
   d4758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d475c:	78a3      	ldrb	r3, [r4, #2]
   d475e:	2b00      	cmp	r3, #0
   d4760:	d0ec      	beq.n	d473c <_ZN7OneWire6searchEPh+0xcc>
   d4762:	2001      	movs	r0, #1
   d4764:	e7ee      	b.n	d4744 <_ZN7OneWire6searchEPh+0xd4>

000d4766 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4766:	b530      	push	{r4, r5, lr}
   d4768:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d476a:	2000      	movs	r0, #0

    while (len--) {
   d476c:	3901      	subs	r1, #1
   d476e:	b2c9      	uxtb	r1, r1
   d4770:	29ff      	cmp	r1, #255	; 0xff
   d4772:	d013      	beq.n	d479c <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4774:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4778:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d477a:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d477e:	f013 0f01 	tst.w	r3, #1
   d4782:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d4786:	bf1c      	itt	ne
   d4788:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d478c:	b2d8      	uxtbne	r0, r3
   d478e:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4790:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d4794:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4798:	d1ef      	bne.n	d477a <_ZN7OneWire4crc8EPhh+0x14>
   d479a:	e7e7      	b.n	d476c <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d479c:	bd30      	pop	{r4, r5, pc}
	...

000d47a0 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d47a0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d47a2:	f000 f849 	bl	d4838 <HAL_Pin_Map>
   d47a6:	4b01      	ldr	r3, [pc, #4]	; (d47ac <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d47a8:	6018      	str	r0, [r3, #0]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	2003e3cc 	.word	0x2003e3cc

000d47b0 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d47b0:	f000 b842 	b.w	d4838 <HAL_Pin_Map>

000d47b4 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d47b4:	f000 b840 	b.w	d4838 <HAL_Pin_Map>

000d47b8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <os_thread_is_current+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	689b      	ldr	r3, [r3, #8]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030248 	.word	0x00030248

000d47c8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <os_thread_join+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	691b      	ldr	r3, [r3, #16]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030248 	.word	0x00030248

000d47d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <os_thread_cleanup+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	695b      	ldr	r3, [r3, #20]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030248 	.word	0x00030248

000d47e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <os_mutex_create+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030248 	.word	0x00030248

000d47f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <os_mutex_recursive_create+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030248 	.word	0x00030248

000d4808 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_RNG_GetRandomNumber+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	685b      	ldr	r3, [r3, #4]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030218 	.word	0x00030218

000d4818 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_Delay_Microseconds+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	68db      	ldr	r3, [r3, #12]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030218 	.word	0x00030218

000d4828 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	695b      	ldr	r3, [r3, #20]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030218 	.word	0x00030218

000d4838 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_Pin_Map+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	681b      	ldr	r3, [r3, #0]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003022c 	.word	0x0003022c

000d4848 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_Pin_Mode+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	689b      	ldr	r3, [r3, #8]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003022c 	.word	0x0003022c

000d4858 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_Interrupts_Enable_All+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6a1b      	ldr	r3, [r3, #32]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003022c 	.word	0x0003022c

000d4868 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_Interrupts_Disable_All+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003022c 	.word	0x0003022c

000d4878 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_I2C_Write_Data+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6a1b      	ldr	r3, [r3, #32]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030228 	.word	0x00030228

000d4888 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_I2C_Available_Data+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030228 	.word	0x00030228

000d4898 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_I2C_Read_Data+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030228 	.word	0x00030228

000d48a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_I2C_Peek_Data+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030228 	.word	0x00030228

000d48b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_I2C_Flush_Data+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030228 	.word	0x00030228

000d48c8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_I2C_Is_Enabled+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030228 	.word	0x00030228

000d48d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_I2C_Init+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030228 	.word	0x00030228

000d48e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <inet_inet_ntop+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	695b      	ldr	r3, [r3, #20]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030264 	.word	0x00030264

000d48f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <netdb_freeaddrinfo+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	689b      	ldr	r3, [r3, #8]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030268 	.word	0x00030268

000d4908 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <netdb_getaddrinfo+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	68db      	ldr	r3, [r3, #12]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030268 	.word	0x00030268

000d4918 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_SPI_Init+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	69db      	ldr	r3, [r3, #28]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030230 	.word	0x00030230

000d4928 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_SPI_Is_Enabled+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6a1b      	ldr	r3, [r3, #32]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030230 	.word	0x00030230

000d4938 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_USART_Init+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	681b      	ldr	r3, [r3, #0]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	0003023c 	.word	0x0003023c

000d4948 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_USART_Write_Data+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	68db      	ldr	r3, [r3, #12]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003023c 	.word	0x0003023c

000d4958 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_USART_Available_Data+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	691b      	ldr	r3, [r3, #16]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	0003023c 	.word	0x0003023c

000d4968 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_USART_Read_Data+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	695b      	ldr	r3, [r3, #20]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003023c 	.word	0x0003023c

000d4978 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_USART_Peek_Data+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	699b      	ldr	r3, [r3, #24]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003023c 	.word	0x0003023c

000d4988 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_USART_Flush_Data+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	69db      	ldr	r3, [r3, #28]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003023c 	.word	0x0003023c

000d4998 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_USART_Is_Enabled+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6a1b      	ldr	r3, [r3, #32]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003023c 	.word	0x0003023c

000d49a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_USART_Available_Data_For_Write+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003023c 	.word	0x0003023c

000d49b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_USB_USART_Init+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	681b      	ldr	r3, [r3, #0]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003024c 	.word	0x0003024c

000d49c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_USB_USART_Begin+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	685b      	ldr	r3, [r3, #4]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003024c 	.word	0x0003024c

000d49d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_USB_USART_Available_Data+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	691b      	ldr	r3, [r3, #16]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003024c 	.word	0x0003024c

000d49e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	695b      	ldr	r3, [r3, #20]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003024c 	.word	0x0003024c

000d49f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <HAL_USB_USART_Receive_Data+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	699b      	ldr	r3, [r3, #24]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003024c 	.word	0x0003024c

000d4a08 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <HAL_USB_USART_Send_Data+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	69db      	ldr	r3, [r3, #28]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003024c 	.word	0x0003024c

000d4a18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <HAL_USB_USART_Flush_Data+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6a1b      	ldr	r3, [r3, #32]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003024c 	.word	0x0003024c

000d4a28 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <panic_+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030260 	.word	0x00030260

000d4a38 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <set_system_mode+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	685b      	ldr	r3, [r3, #4]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030220 	.word	0x00030220

000d4a48 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <system_delay_ms+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	695b      	ldr	r3, [r3, #20]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030220 	.word	0x00030220

000d4a58 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b03      	ldr	r3, [pc, #12]	; (d4a68 <system_ctrl_set_app_request_handler+0x10>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a62:	9301      	str	r3, [sp, #4]
   d4a64:	bd08      	pop	{r3, pc}
   d4a66:	0000      	.short	0x0000
   d4a68:	00030220 	.word	0x00030220

000d4a6c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b03      	ldr	r3, [pc, #12]	; (d4a7c <system_ctrl_set_result+0x10>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a76:	9301      	str	r3, [sp, #4]
   d4a78:	bd08      	pop	{r3, pc}
   d4a7a:	0000      	.short	0x0000
   d4a7c:	00030220 	.word	0x00030220

000d4a80 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <spark_variable+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	681b      	ldr	r3, [r3, #0]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030244 	.word	0x00030244

000d4a90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030244 	.word	0x00030244

000d4aa0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <network_connect+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	685b      	ldr	r3, [r3, #4]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030240 	.word	0x00030240

000d4ab0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <network_connecting+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	689b      	ldr	r3, [r3, #8]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030240 	.word	0x00030240

000d4ac0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <network_disconnect+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	68db      	ldr	r3, [r3, #12]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030240 	.word	0x00030240

000d4ad0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <network_ready+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	691b      	ldr	r3, [r3, #16]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	00030240 	.word	0x00030240

000d4ae0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <network_on+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	695b      	ldr	r3, [r3, #20]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030240 	.word	0x00030240

000d4af0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <network_off+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	699b      	ldr	r3, [r3, #24]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030240 	.word	0x00030240

000d4b00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <network_listen+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	69db      	ldr	r3, [r3, #28]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030240 	.word	0x00030240

000d4b10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <network_listening+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6a1b      	ldr	r3, [r3, #32]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030240 	.word	0x00030240

000d4b20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <network_set_listen_timeout+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030240 	.word	0x00030240

000d4b30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <network_get_listen_timeout+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030240 	.word	0x00030240

000d4b40 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <malloc+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	681b      	ldr	r3, [r3, #0]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003021c 	.word	0x0003021c

000d4b50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <free+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	685b      	ldr	r3, [r3, #4]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003021c 	.word	0x0003021c

000d4b60 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <snprintf+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	69db      	ldr	r3, [r3, #28]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003021c 	.word	0x0003021c

000d4b70 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b70:	2100      	movs	r1, #0
   d4b72:	f7ff bf69 	b.w	d4a48 <system_delay_ms>

000d4b76 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b76:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b78:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b7a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b7c:	b113      	cbz	r3, d4b84 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b7e:	2203      	movs	r2, #3
   d4b80:	4601      	mov	r1, r0
   d4b82:	4798      	blx	r3
    }
   d4b84:	4620      	mov	r0, r4
   d4b86:	bd10      	pop	{r4, pc}

000d4b88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b88:	2200      	movs	r2, #0
   d4b8a:	4611      	mov	r1, r2
   d4b8c:	6840      	ldr	r0, [r0, #4]
   d4b8e:	f7ff bfbf 	b.w	d4b10 <network_listening>

000d4b92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b92:	2200      	movs	r2, #0
   d4b94:	4611      	mov	r1, r2
   d4b96:	6840      	ldr	r0, [r0, #4]
   d4b98:	f7ff bfca 	b.w	d4b30 <network_get_listen_timeout>

000d4b9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b9c:	2200      	movs	r2, #0
   d4b9e:	6840      	ldr	r0, [r0, #4]
   d4ba0:	f7ff bfbe 	b.w	d4b20 <network_set_listen_timeout>

000d4ba4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ba4:	2200      	movs	r2, #0
   d4ba6:	f081 0101 	eor.w	r1, r1, #1
   d4baa:	6840      	ldr	r0, [r0, #4]
   d4bac:	f7ff bfa8 	b.w	d4b00 <network_listen>

000d4bb0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4bb0:	2300      	movs	r3, #0
   d4bb2:	461a      	mov	r2, r3
   d4bb4:	4619      	mov	r1, r3
   d4bb6:	6840      	ldr	r0, [r0, #4]
   d4bb8:	f7ff bf9a 	b.w	d4af0 <network_off>

000d4bbc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4bbc:	2300      	movs	r3, #0
   d4bbe:	461a      	mov	r2, r3
   d4bc0:	4619      	mov	r1, r3
   d4bc2:	6840      	ldr	r0, [r0, #4]
   d4bc4:	f7ff bf8c 	b.w	d4ae0 <network_on>

000d4bc8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4bc8:	2200      	movs	r2, #0
   d4bca:	4611      	mov	r1, r2
   d4bcc:	6840      	ldr	r0, [r0, #4]
   d4bce:	f7ff bf7f 	b.w	d4ad0 <network_ready>

000d4bd2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4bd2:	2200      	movs	r2, #0
   d4bd4:	4611      	mov	r1, r2
   d4bd6:	6840      	ldr	r0, [r0, #4]
   d4bd8:	f7ff bf6a 	b.w	d4ab0 <network_connecting>

000d4bdc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4bdc:	2200      	movs	r2, #0
   d4bde:	2102      	movs	r1, #2
   d4be0:	6840      	ldr	r0, [r0, #4]
   d4be2:	f7ff bf6d 	b.w	d4ac0 <network_disconnect>

000d4be6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4be6:	2300      	movs	r3, #0
   d4be8:	461a      	mov	r2, r3
   d4bea:	6840      	ldr	r0, [r0, #4]
   d4bec:	f7ff bf58 	b.w	d4aa0 <network_connect>

000d4bf0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4bf0:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4bf2:	2203      	movs	r2, #3
   d4bf4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4bf6:	4a02      	ldr	r2, [pc, #8]	; (d4c00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4bf8:	601a      	str	r2, [r3, #0]
   d4bfa:	4770      	bx	lr
   d4bfc:	2003e3d0 	.word	0x2003e3d0
   d4c00:	000d6120 	.word	0x000d6120

000d4c04 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4c04:	4770      	bx	lr

000d4c06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c08:	4606      	mov	r6, r0
   d4c0a:	4615      	mov	r5, r2
   d4c0c:	460c      	mov	r4, r1
   d4c0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c10:	42bc      	cmp	r4, r7
   d4c12:	d006      	beq.n	d4c22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4c14:	6833      	ldr	r3, [r6, #0]
   d4c16:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4c1a:	689b      	ldr	r3, [r3, #8]
   d4c1c:	4630      	mov	r0, r6
   d4c1e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c20:	e7f6      	b.n	d4c10 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4c22:	4628      	mov	r0, r5
   d4c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c26 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4c26:	2200      	movs	r2, #0
   d4c28:	7c00      	ldrb	r0, [r0, #16]
   d4c2a:	f7ff be25 	b.w	d4878 <HAL_I2C_Write_Data>

000d4c2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4c2e:	2100      	movs	r1, #0
   d4c30:	7c00      	ldrb	r0, [r0, #16]
   d4c32:	f7ff be29 	b.w	d4888 <HAL_I2C_Available_Data>

000d4c36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4c36:	2100      	movs	r1, #0
   d4c38:	7c00      	ldrb	r0, [r0, #16]
   d4c3a:	f7ff be2d 	b.w	d4898 <HAL_I2C_Read_Data>

000d4c3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4c3e:	2100      	movs	r1, #0
   d4c40:	7c00      	ldrb	r0, [r0, #16]
   d4c42:	f7ff be31 	b.w	d48a8 <HAL_I2C_Peek_Data>

000d4c46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4c46:	2100      	movs	r1, #0
   d4c48:	7c00      	ldrb	r0, [r0, #16]
   d4c4a:	f7ff be35 	b.w	d48b8 <HAL_I2C_Flush_Data>

000d4c4e <_ZN7TwoWireD0Ev>:
   d4c4e:	b510      	push	{r4, lr}
   d4c50:	4604      	mov	r4, r0
   d4c52:	f7ff fa20 	bl	d4096 <_ZdlPv>
   d4c56:	4620      	mov	r0, r4
   d4c58:	bd10      	pop	{r4, pc}
	...

000d4c5c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4c5c:	b510      	push	{r4, lr}
   d4c5e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c64:	4608      	mov	r0, r1
   d4c66:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c68:	2100      	movs	r1, #0
   d4c6a:	4b04      	ldr	r3, [pc, #16]	; (d4c7c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4c6c:	7420      	strb	r0, [r4, #16]
   d4c6e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4c70:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4c72:	f7ff fe31 	bl	d48d8 <HAL_I2C_Init>

}
   d4c76:	4620      	mov	r0, r4
   d4c78:	bd10      	pop	{r4, pc}
   d4c7a:	bf00      	nop
   d4c7c:	000d6154 	.word	0x000d6154

000d4c80 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4c80:	2100      	movs	r1, #0
   d4c82:	7c00      	ldrb	r0, [r0, #16]
   d4c84:	f7ff be20 	b.w	d48c8 <HAL_I2C_Is_Enabled>

000d4c88 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d4c88:	f7ff bdee 	b.w	d4868 <HAL_Interrupts_Disable_All>

000d4c8c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d4c8c:	f7ff bde4 	b.w	d4858 <HAL_Interrupts_Enable_All>

000d4c90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c90:	4770      	bx	lr

000d4c92 <_ZN9IPAddressD0Ev>:
   d4c92:	b510      	push	{r4, lr}
   d4c94:	4604      	mov	r4, r0
   d4c96:	f7ff f9fe 	bl	d4096 <_ZdlPv>
   d4c9a:	4620      	mov	r0, r4
   d4c9c:	bd10      	pop	{r4, pc}

000d4c9e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4ca0:	7d03      	ldrb	r3, [r0, #20]
   d4ca2:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ca4:	b08d      	sub	sp, #52	; 0x34
   d4ca6:	460e      	mov	r6, r1
   d4ca8:	f100 0704 	add.w	r7, r0, #4
   d4cac:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4cb0:	d002      	beq.n	d4cb8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4cb2:	f100 0508 	add.w	r5, r0, #8
   d4cb6:	e018      	b.n	d4cea <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4cb8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4cba:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4cbc:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4cc0:	232f      	movs	r3, #47	; 0x2f
   d4cc2:	462a      	mov	r2, r5
   d4cc4:	200a      	movs	r0, #10
   d4cc6:	f7ff fe0f 	bl	d48e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cca:	4628      	mov	r0, r5
   d4ccc:	f001 f9fc 	bl	d60c8 <strlen>
   d4cd0:	6833      	ldr	r3, [r6, #0]
   d4cd2:	4602      	mov	r2, r0
   d4cd4:	68db      	ldr	r3, [r3, #12]
   d4cd6:	4629      	mov	r1, r5
   d4cd8:	4630      	mov	r0, r6
   d4cda:	4798      	blx	r3
   d4cdc:	e00f      	b.n	d4cfe <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4cde:	b124      	cbz	r4, d4cea <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4ce0:	212e      	movs	r1, #46	; 0x2e
   d4ce2:	4630      	mov	r0, r6
   d4ce4:	f000 f9c8 	bl	d5078 <_ZN5Print5printEc>
   d4ce8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4cea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4cee:	220a      	movs	r2, #10
   d4cf0:	4630      	mov	r0, r6
   d4cf2:	f000 f9f1 	bl	d50d8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4cf6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4cf8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4cfa:	d1f0      	bne.n	d4cde <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4cfc:	4620      	mov	r0, r4
    }
    return n;
}
   d4cfe:	b00d      	add	sp, #52	; 0x34
   d4d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4d04 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4d04:	b510      	push	{r4, lr}
   d4d06:	4b05      	ldr	r3, [pc, #20]	; (d4d1c <_ZN9IPAddressC1Ev+0x18>)
   d4d08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4d0a:	2211      	movs	r2, #17
   d4d0c:	f840 3b04 	str.w	r3, [r0], #4
   d4d10:	2100      	movs	r1, #0
   d4d12:	f001 f9a8 	bl	d6066 <memset>
{
    clear();
}
   d4d16:	4620      	mov	r0, r4
   d4d18:	bd10      	pop	{r4, pc}
   d4d1a:	bf00      	nop
   d4d1c:	000d617c 	.word	0x000d617c

000d4d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4d20:	4603      	mov	r3, r0
   d4d22:	4a07      	ldr	r2, [pc, #28]	; (d4d40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4d24:	b510      	push	{r4, lr}
   d4d26:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4d2a:	f101 0210 	add.w	r2, r1, #16
   d4d2e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d32:	f843 4b04 	str.w	r4, [r3], #4
   d4d36:	4291      	cmp	r1, r2
   d4d38:	d1f9      	bne.n	d4d2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4d3a:	780a      	ldrb	r2, [r1, #0]
   d4d3c:	701a      	strb	r2, [r3, #0]
}
   d4d3e:	bd10      	pop	{r4, pc}
   d4d40:	000d617c 	.word	0x000d617c

000d4d44 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4d44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4d46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4d4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4d4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4d52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4d56:	2304      	movs	r3, #4
   d4d58:	6041      	str	r1, [r0, #4]
   d4d5a:	7503      	strb	r3, [r0, #20]
   d4d5c:	bd10      	pop	{r4, pc}

000d4d5e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d60:	780d      	ldrb	r5, [r1, #0]
   d4d62:	788b      	ldrb	r3, [r1, #2]
   d4d64:	784a      	ldrb	r2, [r1, #1]
   d4d66:	78c9      	ldrb	r1, [r1, #3]
   d4d68:	9100      	str	r1, [sp, #0]
   d4d6a:	4629      	mov	r1, r5
   d4d6c:	f7ff ffea 	bl	d4d44 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4d70:	b003      	add	sp, #12
   d4d72:	bd30      	pop	{r4, r5, pc}

000d4d74 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d74:	4b01      	ldr	r3, [pc, #4]	; (d4d7c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d76:	4a02      	ldr	r2, [pc, #8]	; (d4d80 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d78:	601a      	str	r2, [r3, #0]
   d4d7a:	4770      	bx	lr
   d4d7c:	2003e3d8 	.word	0x2003e3d8
   d4d80:	000d6240 	.word	0x000d6240

000d4d84 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d84:	2200      	movs	r2, #0
   d4d86:	4611      	mov	r1, r2
   d4d88:	6840      	ldr	r0, [r0, #4]
   d4d8a:	f7ff bec1 	b.w	d4b10 <network_listening>

000d4d8e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d8e:	2200      	movs	r2, #0
   d4d90:	4611      	mov	r1, r2
   d4d92:	6840      	ldr	r0, [r0, #4]
   d4d94:	f7ff becc 	b.w	d4b30 <network_get_listen_timeout>

000d4d98 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d98:	2200      	movs	r2, #0
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	f7ff bec0 	b.w	d4b20 <network_set_listen_timeout>

000d4da0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4da0:	2200      	movs	r2, #0
   d4da2:	f081 0101 	eor.w	r1, r1, #1
   d4da6:	6840      	ldr	r0, [r0, #4]
   d4da8:	f7ff beaa 	b.w	d4b00 <network_listen>

000d4dac <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4dac:	2300      	movs	r3, #0
   d4dae:	461a      	mov	r2, r3
   d4db0:	4619      	mov	r1, r3
   d4db2:	6840      	ldr	r0, [r0, #4]
   d4db4:	f7ff be9c 	b.w	d4af0 <network_off>

000d4db8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4db8:	2300      	movs	r3, #0
   d4dba:	461a      	mov	r2, r3
   d4dbc:	4619      	mov	r1, r3
   d4dbe:	6840      	ldr	r0, [r0, #4]
   d4dc0:	f7ff be8e 	b.w	d4ae0 <network_on>

000d4dc4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4dc4:	2200      	movs	r2, #0
   d4dc6:	4611      	mov	r1, r2
   d4dc8:	6840      	ldr	r0, [r0, #4]
   d4dca:	f7ff be81 	b.w	d4ad0 <network_ready>

000d4dce <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4dce:	2200      	movs	r2, #0
   d4dd0:	4611      	mov	r1, r2
   d4dd2:	6840      	ldr	r0, [r0, #4]
   d4dd4:	f7ff be6c 	b.w	d4ab0 <network_connecting>

000d4dd8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4dd8:	2200      	movs	r2, #0
   d4dda:	2102      	movs	r1, #2
   d4ddc:	6840      	ldr	r0, [r0, #4]
   d4dde:	f7ff be6f 	b.w	d4ac0 <network_disconnect>

000d4de2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4de2:	2300      	movs	r3, #0
   d4de4:	461a      	mov	r2, r3
   d4de6:	6840      	ldr	r0, [r0, #4]
   d4de8:	f7ff be5a 	b.w	d4aa0 <network_connect>

000d4dec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4dec:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4dee:	4605      	mov	r5, r0
   d4df0:	b178      	cbz	r0, d4e12 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4df2:	6804      	ldr	r4, [r0, #0]
   d4df4:	b144      	cbz	r4, d4e08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4df6:	68a3      	ldr	r3, [r4, #8]
   d4df8:	b11b      	cbz	r3, d4e02 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dfa:	2203      	movs	r2, #3
   d4dfc:	4621      	mov	r1, r4
   d4dfe:	4620      	mov	r0, r4
   d4e00:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e02:	4620      	mov	r0, r4
   d4e04:	f7ff f947 	bl	d4096 <_ZdlPv>
   d4e08:	4628      	mov	r0, r5
      }
   d4e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e0e:	f7ff b942 	b.w	d4096 <_ZdlPv>
   d4e12:	bd38      	pop	{r3, r4, r5, pc}

000d4e14 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d4e14:	b110      	cbz	r0, d4e1c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4e16:	6803      	ldr	r3, [r0, #0]
   d4e18:	685b      	ldr	r3, [r3, #4]
   d4e1a:	4718      	bx	r3
   d4e1c:	4770      	bx	lr

000d4e1e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4e1e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4e20:	6803      	ldr	r3, [r0, #0]
   d4e22:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4e24:	b1bb      	cbz	r3, d4e56 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4e26:	6858      	ldr	r0, [r3, #4]
   d4e28:	f7ff fcc6 	bl	d47b8 <os_thread_is_current>
   d4e2c:	b978      	cbnz	r0, d4e4e <_ZN6ThreadD1Ev+0x30>
   d4e2e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4e30:	7c5a      	ldrb	r2, [r3, #17]
   d4e32:	b912      	cbnz	r2, d4e3a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4e34:	6858      	ldr	r0, [r3, #4]
   d4e36:	f7ff fcc7 	bl	d47c8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4e3a:	6823      	ldr	r3, [r4, #0]
   d4e3c:	6858      	ldr	r0, [r3, #4]
   d4e3e:	f7ff fccb 	bl	d47d8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e42:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4e44:	2300      	movs	r3, #0
   d4e46:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4e48:	b128      	cbz	r0, d4e56 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4e4a:	f7ff ffcf 	bl	d4dec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e4e:	6820      	ldr	r0, [r4, #0]
   d4e50:	b108      	cbz	r0, d4e56 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4e52:	f7ff ffcb 	bl	d4dec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d4e56:	4620      	mov	r0, r4
   d4e58:	bd10      	pop	{r4, pc}
	...

000d4e5c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4e5c:	b538      	push	{r3, r4, r5, lr}
   d4e5e:	4b0b      	ldr	r3, [pc, #44]	; (d4e8c <_ZN5spark9MeshClassD1Ev+0x30>)
   d4e60:	6003      	str	r3, [r0, #0]
   d4e62:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e64:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4e68:	b108      	cbz	r0, d4e6e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4e6a:	f7ff f916 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e6e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4e72:	b12d      	cbz	r5, d4e80 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e74:	4628      	mov	r0, r5
   d4e76:	f7ff ffd2 	bl	d4e1e <_ZN6ThreadD1Ev>
   d4e7a:	4628      	mov	r0, r5
   d4e7c:	f7ff f90b 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e80:	68a0      	ldr	r0, [r4, #8]
   d4e82:	b108      	cbz	r0, d4e88 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4e84:	f7ff ffc6 	bl	d4e14 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4e88:	4620      	mov	r0, r4
   d4e8a:	bd38      	pop	{r3, r4, r5, pc}
   d4e8c:	000d6274 	.word	0x000d6274

000d4e90 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4e90:	b538      	push	{r3, r4, r5, lr}
   d4e92:	4c0d      	ldr	r4, [pc, #52]	; (d4ec8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4e94:	4b0d      	ldr	r3, [pc, #52]	; (d4ecc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4e96:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4e98:	2500      	movs	r5, #0
   d4e9a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4e9c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4ea0:	6063      	str	r3, [r4, #4]
   d4ea2:	60a5      	str	r5, [r4, #8]
   d4ea4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4ea8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4eac:	f7ff fca4 	bl	d47f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4eb0:	4b07      	ldr	r3, [pc, #28]	; (d4ed0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4eb2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4eb6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4eb8:	4620      	mov	r0, r4
   d4eba:	4a06      	ldr	r2, [pc, #24]	; (d4ed4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4ebc:	4906      	ldr	r1, [pc, #24]	; (d4ed8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4ec2:	f000 bb4f 	b.w	d5564 <__aeabi_atexit>
   d4ec6:	bf00      	nop
   d4ec8:	2003e3dc 	.word	0x2003e3dc
   d4ecc:	000d62a8 	.word	0x000d62a8
   d4ed0:	000d6274 	.word	0x000d6274
   d4ed4:	2003e388 	.word	0x2003e388
   d4ed8:	000d4e5d 	.word	0x000d4e5d

000d4edc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4edc:	2300      	movs	r3, #0
   d4ede:	461a      	mov	r2, r3
   d4ee0:	6840      	ldr	r0, [r0, #4]
   d4ee2:	f7ff bddd 	b.w	d4aa0 <network_connect>

000d4ee6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4ee6:	2200      	movs	r2, #0
   d4ee8:	2102      	movs	r1, #2
   d4eea:	6840      	ldr	r0, [r0, #4]
   d4eec:	f7ff bde8 	b.w	d4ac0 <network_disconnect>

000d4ef0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ef0:	2200      	movs	r2, #0
   d4ef2:	4611      	mov	r1, r2
   d4ef4:	6840      	ldr	r0, [r0, #4]
   d4ef6:	f7ff bddb 	b.w	d4ab0 <network_connecting>

000d4efa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4efa:	2200      	movs	r2, #0
   d4efc:	4611      	mov	r1, r2
   d4efe:	6840      	ldr	r0, [r0, #4]
   d4f00:	f7ff bde6 	b.w	d4ad0 <network_ready>

000d4f04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4f04:	2300      	movs	r3, #0
   d4f06:	461a      	mov	r2, r3
   d4f08:	4619      	mov	r1, r3
   d4f0a:	6840      	ldr	r0, [r0, #4]
   d4f0c:	f7ff bde8 	b.w	d4ae0 <network_on>

000d4f10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f10:	2300      	movs	r3, #0
   d4f12:	461a      	mov	r2, r3
   d4f14:	4619      	mov	r1, r3
   d4f16:	6840      	ldr	r0, [r0, #4]
   d4f18:	f7ff bdea 	b.w	d4af0 <network_off>

000d4f1c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4f1c:	2200      	movs	r2, #0
   d4f1e:	f081 0101 	eor.w	r1, r1, #1
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	f7ff bdec 	b.w	d4b00 <network_listen>

000d4f28 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4f28:	2200      	movs	r2, #0
   d4f2a:	6840      	ldr	r0, [r0, #4]
   d4f2c:	f7ff bdf8 	b.w	d4b20 <network_set_listen_timeout>

000d4f30 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4f30:	2200      	movs	r2, #0
   d4f32:	4611      	mov	r1, r2
   d4f34:	6840      	ldr	r0, [r0, #4]
   d4f36:	f7ff bdfb 	b.w	d4b30 <network_get_listen_timeout>

000d4f3a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4f3a:	2200      	movs	r2, #0
   d4f3c:	4611      	mov	r1, r2
   d4f3e:	6840      	ldr	r0, [r0, #4]
   d4f40:	f7ff bde6 	b.w	d4b10 <network_listening>

000d4f44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4f48:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4f4a:	b095      	sub	sp, #84	; 0x54
   d4f4c:	4616      	mov	r6, r2
   d4f4e:	460d      	mov	r5, r1
   d4f50:	4607      	mov	r7, r0
    IPAddress addr;
   d4f52:	f7ff fed7 	bl	d4d04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4f56:	4621      	mov	r1, r4
   d4f58:	2220      	movs	r2, #32
   d4f5a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4f5c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4f5e:	f001 f882 	bl	d6066 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4f62:	2340      	movs	r3, #64	; 0x40
   d4f64:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4f66:	4621      	mov	r1, r4
   d4f68:	466b      	mov	r3, sp
   d4f6a:	aa0c      	add	r2, sp, #48	; 0x30
   d4f6c:	4630      	mov	r0, r6
   d4f6e:	f7ff fccb 	bl	d4908 <netdb_getaddrinfo>
    if (!r) {
   d4f72:	4604      	mov	r4, r0
   d4f74:	2800      	cmp	r0, #0
   d4f76:	d144      	bne.n	d5002 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4f78:	4602      	mov	r2, r0
   d4f7a:	2101      	movs	r1, #1
   d4f7c:	6868      	ldr	r0, [r5, #4]
   d4f7e:	f7ff fda7 	bl	d4ad0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f82:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4f84:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f86:	4622      	mov	r2, r4
   d4f88:	6868      	ldr	r0, [r5, #4]
   d4f8a:	f7ff fda1 	bl	d4ad0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f8e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f90:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4f92:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f94:	2e00      	cmp	r6, #0
   d4f96:	d034      	beq.n	d5002 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4f98:	2900      	cmp	r1, #0
   d4f9a:	d132      	bne.n	d5002 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4f9c:	6873      	ldr	r3, [r6, #4]
   d4f9e:	2b02      	cmp	r3, #2
   d4fa0:	d002      	beq.n	d4fa8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4fa2:	2b0a      	cmp	r3, #10
   d4fa4:	d009      	beq.n	d4fba <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4fa6:	e02a      	b.n	d4ffe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4fa8:	f1b8 0f00 	cmp.w	r8, #0
   d4fac:	d027      	beq.n	d4ffe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4fae:	6971      	ldr	r1, [r6, #20]
   d4fb0:	4638      	mov	r0, r7
   d4fb2:	3104      	adds	r1, #4
   d4fb4:	f7ff fed3 	bl	d4d5e <_ZN9IPAddressaSEPKh>
   d4fb8:	e020      	b.n	d4ffc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4fba:	f1b9 0f00 	cmp.w	r9, #0
   d4fbe:	d01e      	beq.n	d4ffe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4fc0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4fc2:	2211      	movs	r2, #17
   d4fc4:	a801      	add	r0, sp, #4
   d4fc6:	f001 f84e 	bl	d6066 <memset>
                    a.v = 6;
   d4fca:	2306      	movs	r3, #6
   d4fcc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4fd0:	ad01      	add	r5, sp, #4
   d4fd2:	f104 0308 	add.w	r3, r4, #8
   d4fd6:	3418      	adds	r4, #24
   d4fd8:	6818      	ldr	r0, [r3, #0]
   d4fda:	6859      	ldr	r1, [r3, #4]
   d4fdc:	462a      	mov	r2, r5
   d4fde:	c203      	stmia	r2!, {r0, r1}
   d4fe0:	3308      	adds	r3, #8
   d4fe2:	42a3      	cmp	r3, r4
   d4fe4:	4615      	mov	r5, r2
   d4fe6:	d1f7      	bne.n	d4fd8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4fe8:	a901      	add	r1, sp, #4
   d4fea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4fec:	ad07      	add	r5, sp, #28
   d4fee:	f7ff fe97 	bl	d4d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ff4:	1d3c      	adds	r4, r7, #4
   d4ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ff8:	682b      	ldr	r3, [r5, #0]
   d4ffa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4ffc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ffe:	69f6      	ldr	r6, [r6, #28]
   d5000:	e7c8      	b.n	d4f94 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5002:	9800      	ldr	r0, [sp, #0]
   d5004:	f7ff fc78 	bl	d48f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5008:	4638      	mov	r0, r7
   d500a:	b015      	add	sp, #84	; 0x54
   d500c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5010 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5010:	4b02      	ldr	r3, [pc, #8]	; (d501c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5012:	4a03      	ldr	r2, [pc, #12]	; (d5020 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5014:	601a      	str	r2, [r3, #0]
   d5016:	2200      	movs	r2, #0
   d5018:	605a      	str	r2, [r3, #4]
   d501a:	4770      	bx	lr
   d501c:	2003e5ac 	.word	0x2003e5ac
   d5020:	000d62a8 	.word	0x000d62a8

000d5024 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5026:	4606      	mov	r6, r0
   d5028:	460d      	mov	r5, r1
   d502a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d502c:	2400      	movs	r4, #0
  while (size--) {
   d502e:	42bd      	cmp	r5, r7
   d5030:	d00c      	beq.n	d504c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5032:	6833      	ldr	r3, [r6, #0]
   d5034:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5038:	689b      	ldr	r3, [r3, #8]
   d503a:	4630      	mov	r0, r6
   d503c:	4798      	blx	r3
     if (chunk>=0)
   d503e:	2800      	cmp	r0, #0
   d5040:	db01      	blt.n	d5046 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5042:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5044:	e7f3      	b.n	d502e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5046:	2c00      	cmp	r4, #0
   d5048:	bf08      	it	eq
   d504a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d504c:	4620      	mov	r0, r4
   d504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5050 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5050:	b570      	push	{r4, r5, r6, lr}
   d5052:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5054:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5056:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5058:	b149      	cbz	r1, d506e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d505a:	f001 f835 	bl	d60c8 <strlen>
   d505e:	682b      	ldr	r3, [r5, #0]
   d5060:	4602      	mov	r2, r0
   d5062:	4621      	mov	r1, r4
   d5064:	4628      	mov	r0, r5
   d5066:	68db      	ldr	r3, [r3, #12]
    }
   d5068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d506c:	4718      	bx	r3
    }
   d506e:	bd70      	pop	{r4, r5, r6, pc}

000d5070 <_ZN5Print5printEPKc>:
   d5070:	b508      	push	{r3, lr}
   d5072:	f7ff ffed 	bl	d5050 <_ZN5Print5writeEPKc>
   d5076:	bd08      	pop	{r3, pc}

000d5078 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5078:	6803      	ldr	r3, [r0, #0]
   d507a:	689b      	ldr	r3, [r3, #8]
   d507c:	4718      	bx	r3

000d507e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d507e:	b530      	push	{r4, r5, lr}
   d5080:	b08b      	sub	sp, #44	; 0x2c
   d5082:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5084:	2100      	movs	r1, #0
   d5086:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d508a:	2a01      	cmp	r2, #1
   d508c:	bf98      	it	ls
   d508e:	220a      	movls	r2, #10
   d5090:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5094:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5098:	fb05 3312 	mls	r3, r5, r2, r3
   d509c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50a0:	2b09      	cmp	r3, #9
   d50a2:	bf94      	ite	ls
   d50a4:	3330      	addls	r3, #48	; 0x30
   d50a6:	3337      	addhi	r3, #55	; 0x37
   d50a8:	b2db      	uxtb	r3, r3
   d50aa:	4621      	mov	r1, r4
   d50ac:	f804 3901 	strb.w	r3, [r4], #-1
   d50b0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d50b2:	2d00      	cmp	r5, #0
   d50b4:	d1ee      	bne.n	d5094 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d50b6:	f7ff ffcb 	bl	d5050 <_ZN5Print5writeEPKc>
}
   d50ba:	b00b      	add	sp, #44	; 0x2c
   d50bc:	bd30      	pop	{r4, r5, pc}

000d50be <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d50be:	b410      	push	{r4}
  if (base == 0) return write(n);
   d50c0:	b92a      	cbnz	r2, d50ce <_ZN5Print5printEmi+0x10>
   d50c2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d50c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d50c8:	689b      	ldr	r3, [r3, #8]
   d50ca:	b2c9      	uxtb	r1, r1
   d50cc:	4718      	bx	r3
  else return printNumber(n, base);
   d50ce:	b2d2      	uxtb	r2, r2
}
   d50d0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d50d4:	f7ff bfd3 	b.w	d507e <_ZN5Print11printNumberEmh>

000d50d8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d50d8:	f7ff bff1 	b.w	d50be <_ZN5Print5printEmi>

000d50dc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d50dc:	b510      	push	{r4, lr}
   d50de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50e0:	f7ff fd49 	bl	d4b76 <_ZNSt14_Function_baseD1Ev>
   d50e4:	4620      	mov	r0, r4
   d50e6:	bd10      	pop	{r4, pc}

000d50e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50e8:	4803      	ldr	r0, [pc, #12]	; (d50f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d50ea:	4a04      	ldr	r2, [pc, #16]	; (d50fc <_GLOBAL__sub_I_RGB+0x14>)
   d50ec:	4904      	ldr	r1, [pc, #16]	; (d5100 <_GLOBAL__sub_I_RGB+0x18>)
   d50ee:	2300      	movs	r3, #0
   d50f0:	6083      	str	r3, [r0, #8]
   d50f2:	f000 ba37 	b.w	d5564 <__aeabi_atexit>
   d50f6:	bf00      	nop
   d50f8:	2003e5b4 	.word	0x2003e5b4
   d50fc:	2003e388 	.word	0x2003e388
   d5100:	000d50dd 	.word	0x000d50dd

000d5104 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5104:	4770      	bx	lr

000d5106 <_ZN8SPIClassD0Ev>:
   d5106:	b510      	push	{r4, lr}
   d5108:	4604      	mov	r4, r0
   d510a:	f7fe ffc4 	bl	d4096 <_ZdlPv>
   d510e:	4620      	mov	r0, r4
   d5110:	bd10      	pop	{r4, pc}
	...

000d5114 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5114:	b570      	push	{r4, r5, r6, lr}
   d5116:	4b08      	ldr	r3, [pc, #32]	; (d5138 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5118:	6003      	str	r3, [r0, #0]
   d511a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d511c:	2500      	movs	r5, #0
   d511e:	460e      	mov	r6, r1
   d5120:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5124:	f7ff fb60 	bl	d47e8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5128:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d512a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d512c:	f7ff fbf4 	bl	d4918 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5130:	60a5      	str	r5, [r4, #8]
}
   d5132:	4620      	mov	r0, r4
   d5134:	bd70      	pop	{r4, r5, r6, pc}
   d5136:	bf00      	nop
   d5138:	000d62dc 	.word	0x000d62dc

000d513c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d513c:	7900      	ldrb	r0, [r0, #4]
   d513e:	f7ff bbf3 	b.w	d4928 <HAL_SPI_Is_Enabled>
	...

000d5144 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5144:	4b04      	ldr	r3, [pc, #16]	; (d5158 <_GLOBAL__sub_I_System+0x14>)
   d5146:	2000      	movs	r0, #0
   d5148:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d514c:	7018      	strb	r0, [r3, #0]
   d514e:	8058      	strh	r0, [r3, #2]
   d5150:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5152:	f7ff bc71 	b.w	d4a38 <set_system_mode>
   d5156:	bf00      	nop
   d5158:	2003e5c4 	.word	0x2003e5c4

000d515c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d515c:	4b02      	ldr	r3, [pc, #8]	; (d5168 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d515e:	681a      	ldr	r2, [r3, #0]
   d5160:	4b02      	ldr	r3, [pc, #8]	; (d516c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5162:	601a      	str	r2, [r3, #0]
   d5164:	4770      	bx	lr
   d5166:	bf00      	nop
   d5168:	2003e320 	.word	0x2003e320
   d516c:	2003e5cc 	.word	0x2003e5cc

000d5170 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5170:	4770      	bx	lr

000d5172 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5172:	7441      	strb	r1, [r0, #17]
   d5174:	4770      	bx	lr

000d5176 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5176:	7c00      	ldrb	r0, [r0, #16]
   d5178:	f7ff bc16 	b.w	d49a8 <HAL_USART_Available_Data_For_Write>

000d517c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d517c:	7c00      	ldrb	r0, [r0, #16]
   d517e:	f7ff bbeb 	b.w	d4958 <HAL_USART_Available_Data>

000d5182 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5182:	7c00      	ldrb	r0, [r0, #16]
   d5184:	f7ff bbf8 	b.w	d4978 <HAL_USART_Peek_Data>

000d5188 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5188:	7c00      	ldrb	r0, [r0, #16]
   d518a:	f7ff bbed 	b.w	d4968 <HAL_USART_Read_Data>

000d518e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d518e:	7c00      	ldrb	r0, [r0, #16]
   d5190:	f7ff bbfa 	b.w	d4988 <HAL_USART_Flush_Data>

000d5194 <_ZN11USARTSerialD0Ev>:
   d5194:	b510      	push	{r4, lr}
   d5196:	4604      	mov	r4, r0
   d5198:	f7fe ff7d 	bl	d4096 <_ZdlPv>
   d519c:	4620      	mov	r0, r4
   d519e:	bd10      	pop	{r4, pc}

000d51a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d51a0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51a2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d51a4:	4604      	mov	r4, r0
   d51a6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51a8:	b925      	cbnz	r5, d51b4 <_ZN11USARTSerial5writeEh+0x14>
   d51aa:	7c00      	ldrb	r0, [r0, #16]
   d51ac:	f7ff fbfc 	bl	d49a8 <HAL_USART_Available_Data_For_Write>
   d51b0:	2800      	cmp	r0, #0
   d51b2:	dd05      	ble.n	d51c0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51b4:	4631      	mov	r1, r6
   d51b6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51bc:	f7ff bbc4 	b.w	d4948 <HAL_USART_Write_Data>
  }
  return 0;
}
   d51c0:	4628      	mov	r0, r5
   d51c2:	bd70      	pop	{r4, r5, r6, pc}

000d51c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d51c4:	b510      	push	{r4, lr}
   d51c6:	4604      	mov	r4, r0
   d51c8:	4608      	mov	r0, r1
   d51ca:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d51cc:	2200      	movs	r2, #0
   d51ce:	6062      	str	r2, [r4, #4]
   d51d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d51d4:	60a2      	str	r2, [r4, #8]
   d51d6:	4a05      	ldr	r2, [pc, #20]	; (d51ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d51d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d51da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d51dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d51de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d51e0:	461a      	mov	r2, r3
   d51e2:	f7ff fba9 	bl	d4938 <HAL_USART_Init>
}
   d51e6:	4620      	mov	r0, r4
   d51e8:	bd10      	pop	{r4, pc}
   d51ea:	bf00      	nop
   d51ec:	000d6318 	.word	0x000d6318

000d51f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d51f0:	7c00      	ldrb	r0, [r0, #16]
   d51f2:	f7ff bbd1 	b.w	d4998 <HAL_USART_Is_Enabled>
	...

000d51f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d51f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51fa:	4d0c      	ldr	r5, [pc, #48]	; (d522c <_Z22__fetch_global_Serial1v+0x34>)
   d51fc:	6829      	ldr	r1, [r5, #0]
   d51fe:	f011 0401 	ands.w	r4, r1, #1
   d5202:	d111      	bne.n	d5228 <_Z22__fetch_global_Serial1v+0x30>
   d5204:	4628      	mov	r0, r5
   d5206:	f7fe ff4a 	bl	d409e <__cxa_guard_acquire>
   d520a:	b168      	cbz	r0, d5228 <_Z22__fetch_global_Serial1v+0x30>
   d520c:	4a08      	ldr	r2, [pc, #32]	; (d5230 <_Z22__fetch_global_Serial1v+0x38>)
   d520e:	4b09      	ldr	r3, [pc, #36]	; (d5234 <_Z22__fetch_global_Serial1v+0x3c>)
   d5210:	4809      	ldr	r0, [pc, #36]	; (d5238 <_Z22__fetch_global_Serial1v+0x40>)
   d5212:	4621      	mov	r1, r4
   d5214:	f7ff ffd6 	bl	d51c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5218:	4628      	mov	r0, r5
   d521a:	f7fe ff45 	bl	d40a8 <__cxa_guard_release>
   d521e:	4a07      	ldr	r2, [pc, #28]	; (d523c <_Z22__fetch_global_Serial1v+0x44>)
   d5220:	4907      	ldr	r1, [pc, #28]	; (d5240 <_Z22__fetch_global_Serial1v+0x48>)
   d5222:	4805      	ldr	r0, [pc, #20]	; (d5238 <_Z22__fetch_global_Serial1v+0x40>)
   d5224:	f000 f99e 	bl	d5564 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5228:	4803      	ldr	r0, [pc, #12]	; (d5238 <_Z22__fetch_global_Serial1v+0x40>)
   d522a:	bd38      	pop	{r3, r4, r5, pc}
   d522c:	2003e668 	.word	0x2003e668
   d5230:	2003e66c 	.word	0x2003e66c
   d5234:	2003e5e4 	.word	0x2003e5e4
   d5238:	2003e5d0 	.word	0x2003e5d0
   d523c:	2003e388 	.word	0x2003e388
   d5240:	000d5171 	.word	0x000d5171

000d5244 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5244:	7441      	strb	r1, [r0, #17]
   d5246:	4770      	bx	lr

000d5248 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5248:	4770      	bx	lr

000d524a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d524a:	2100      	movs	r1, #0
   d524c:	7c00      	ldrb	r0, [r0, #16]
   d524e:	f7ff bbd3 	b.w	d49f8 <HAL_USB_USART_Receive_Data>

000d5252 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5252:	2101      	movs	r1, #1
   d5254:	7c00      	ldrb	r0, [r0, #16]
   d5256:	f7ff bbcf 	b.w	d49f8 <HAL_USB_USART_Receive_Data>

000d525a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d525a:	7c00      	ldrb	r0, [r0, #16]
   d525c:	f7ff bbc4 	b.w	d49e8 <HAL_USB_USART_Available_Data_For_Write>

000d5260 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5260:	7c00      	ldrb	r0, [r0, #16]
   d5262:	f7ff bbb9 	b.w	d49d8 <HAL_USB_USART_Available_Data>

000d5266 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5266:	b538      	push	{r3, r4, r5, lr}
   d5268:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d526a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d526c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d526e:	f7ff fbbb 	bl	d49e8 <HAL_USB_USART_Available_Data_For_Write>
   d5272:	2800      	cmp	r0, #0
   d5274:	dc01      	bgt.n	d527a <_ZN9USBSerial5writeEh+0x14>
   d5276:	7c60      	ldrb	r0, [r4, #17]
   d5278:	b120      	cbz	r0, d5284 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d527a:	4629      	mov	r1, r5
   d527c:	7c20      	ldrb	r0, [r4, #16]
   d527e:	f7ff fbc3 	bl	d4a08 <HAL_USB_USART_Send_Data>
    return 1;
   d5282:	2001      	movs	r0, #1
  }
  return 0;
}
   d5284:	bd38      	pop	{r3, r4, r5, pc}

000d5286 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5286:	7c00      	ldrb	r0, [r0, #16]
   d5288:	f7ff bbc6 	b.w	d4a18 <HAL_USB_USART_Flush_Data>

000d528c <_ZN9USBSerialD0Ev>:
   d528c:	b510      	push	{r4, lr}
   d528e:	4604      	mov	r4, r0
   d5290:	f7fe ff01 	bl	d4096 <_ZdlPv>
   d5294:	4620      	mov	r0, r4
   d5296:	bd10      	pop	{r4, pc}

000d5298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5298:	b510      	push	{r4, lr}
   d529a:	4604      	mov	r4, r0
   d529c:	2300      	movs	r3, #0
   d529e:	6063      	str	r3, [r4, #4]
   d52a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52a4:	60a3      	str	r3, [r4, #8]
   d52a6:	4b05      	ldr	r3, [pc, #20]	; (d52bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d52a8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d52aa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52ac:	4608      	mov	r0, r1
{
  _serial = serial;
   d52ae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d52b0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d52b2:	4611      	mov	r1, r2
   d52b4:	f7ff fb80 	bl	d49b8 <HAL_USB_USART_Init>
}
   d52b8:	4620      	mov	r0, r4
   d52ba:	bd10      	pop	{r4, pc}
   d52bc:	000d6348 	.word	0x000d6348

000d52c0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d52c0:	2200      	movs	r2, #0
   d52c2:	7c00      	ldrb	r0, [r0, #16]
   d52c4:	f7ff bb80 	b.w	d49c8 <HAL_USB_USART_Begin>

000d52c8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d52ca:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d52ce:	2100      	movs	r1, #0
   d52d0:	f000 fec9 	bl	d6066 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d52d4:	4620      	mov	r0, r4
   d52d6:	bd10      	pop	{r4, pc}

000d52d8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d52d8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52da:	4d0e      	ldr	r5, [pc, #56]	; (d5314 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d52dc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d52de:	a801      	add	r0, sp, #4
   d52e0:	f7ff fff2 	bl	d52c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52e4:	6829      	ldr	r1, [r5, #0]
   d52e6:	f011 0401 	ands.w	r4, r1, #1
   d52ea:	d110      	bne.n	d530e <_Z16_fetch_usbserialv+0x36>
   d52ec:	4628      	mov	r0, r5
   d52ee:	f7fe fed6 	bl	d409e <__cxa_guard_acquire>
   d52f2:	b160      	cbz	r0, d530e <_Z16_fetch_usbserialv+0x36>
   d52f4:	aa01      	add	r2, sp, #4
   d52f6:	4621      	mov	r1, r4
   d52f8:	4807      	ldr	r0, [pc, #28]	; (d5318 <_Z16_fetch_usbserialv+0x40>)
   d52fa:	f7ff ffcd 	bl	d5298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d52fe:	4628      	mov	r0, r5
   d5300:	f7fe fed2 	bl	d40a8 <__cxa_guard_release>
   d5304:	4a05      	ldr	r2, [pc, #20]	; (d531c <_Z16_fetch_usbserialv+0x44>)
   d5306:	4906      	ldr	r1, [pc, #24]	; (d5320 <_Z16_fetch_usbserialv+0x48>)
   d5308:	4803      	ldr	r0, [pc, #12]	; (d5318 <_Z16_fetch_usbserialv+0x40>)
   d530a:	f000 f92b 	bl	d5564 <__aeabi_atexit>
	return _usbserial;
}
   d530e:	4802      	ldr	r0, [pc, #8]	; (d5318 <_Z16_fetch_usbserialv+0x40>)
   d5310:	b007      	add	sp, #28
   d5312:	bd30      	pop	{r4, r5, pc}
   d5314:	2003e6f0 	.word	0x2003e6f0
   d5318:	2003e6f4 	.word	0x2003e6f4
   d531c:	2003e388 	.word	0x2003e388
   d5320:	000d5249 	.word	0x000d5249

000d5324 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5324:	2200      	movs	r2, #0
   d5326:	4611      	mov	r1, r2
   d5328:	6840      	ldr	r0, [r0, #4]
   d532a:	f7ff bbd1 	b.w	d4ad0 <network_ready>

000d532e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d532e:	2200      	movs	r2, #0
   d5330:	4611      	mov	r1, r2
   d5332:	6840      	ldr	r0, [r0, #4]
   d5334:	f7ff bbec 	b.w	d4b10 <network_listening>

000d5338 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5338:	2200      	movs	r2, #0
   d533a:	4611      	mov	r1, r2
   d533c:	6840      	ldr	r0, [r0, #4]
   d533e:	f7ff bbf7 	b.w	d4b30 <network_get_listen_timeout>

000d5342 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5342:	2200      	movs	r2, #0
   d5344:	6840      	ldr	r0, [r0, #4]
   d5346:	f7ff bbeb 	b.w	d4b20 <network_set_listen_timeout>

000d534a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d534a:	2200      	movs	r2, #0
   d534c:	f081 0101 	eor.w	r1, r1, #1
   d5350:	6840      	ldr	r0, [r0, #4]
   d5352:	f7ff bbd5 	b.w	d4b00 <network_listen>

000d5356 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5356:	2300      	movs	r3, #0
   d5358:	461a      	mov	r2, r3
   d535a:	4619      	mov	r1, r3
   d535c:	6840      	ldr	r0, [r0, #4]
   d535e:	f7ff bbc7 	b.w	d4af0 <network_off>

000d5362 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5362:	2300      	movs	r3, #0
   d5364:	461a      	mov	r2, r3
   d5366:	4619      	mov	r1, r3
   d5368:	6840      	ldr	r0, [r0, #4]
   d536a:	f7ff bbb9 	b.w	d4ae0 <network_on>

000d536e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d536e:	2200      	movs	r2, #0
   d5370:	4611      	mov	r1, r2
   d5372:	6840      	ldr	r0, [r0, #4]
   d5374:	f7ff bb9c 	b.w	d4ab0 <network_connecting>

000d5378 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5378:	2200      	movs	r2, #0
   d537a:	2102      	movs	r1, #2
   d537c:	6840      	ldr	r0, [r0, #4]
   d537e:	f7ff bb9f 	b.w	d4ac0 <network_disconnect>

000d5382 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5382:	2300      	movs	r3, #0
   d5384:	461a      	mov	r2, r3
   d5386:	6840      	ldr	r0, [r0, #4]
   d5388:	f7ff bb8a 	b.w	d4aa0 <network_connect>

000d538c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d538c:	4b02      	ldr	r3, [pc, #8]	; (d5398 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d538e:	2204      	movs	r2, #4
   d5390:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5392:	4a02      	ldr	r2, [pc, #8]	; (d539c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5394:	601a      	str	r2, [r3, #0]
   d5396:	4770      	bx	lr
   d5398:	2003e708 	.word	0x2003e708
   d539c:	000d6378 	.word	0x000d6378

000d53a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d53a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d53a2:	4b0c      	ldr	r3, [pc, #48]	; (d53d4 <serialEventRun+0x34>)
   d53a4:	b133      	cbz	r3, d53b4 <serialEventRun+0x14>
   d53a6:	f7ff ff97 	bl	d52d8 <_Z16_fetch_usbserialv>
   d53aa:	6803      	ldr	r3, [r0, #0]
   d53ac:	691b      	ldr	r3, [r3, #16]
   d53ae:	4798      	blx	r3
   d53b0:	2800      	cmp	r0, #0
   d53b2:	dc09      	bgt.n	d53c8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d53b4:	4b08      	ldr	r3, [pc, #32]	; (d53d8 <serialEventRun+0x38>)
   d53b6:	b163      	cbz	r3, d53d2 <serialEventRun+0x32>
   d53b8:	f7ff ff1e 	bl	d51f8 <_Z22__fetch_global_Serial1v>
   d53bc:	6803      	ldr	r3, [r0, #0]
   d53be:	691b      	ldr	r3, [r3, #16]
   d53c0:	4798      	blx	r3
   d53c2:	2800      	cmp	r0, #0
   d53c4:	dc03      	bgt.n	d53ce <serialEventRun+0x2e>
   d53c6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d53c8:	f3af 8000 	nop.w
   d53cc:	e7f2      	b.n	d53b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d53ce:	f3af 8000 	nop.w
   d53d2:	bd08      	pop	{r3, pc}
	...

000d53dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d53dc:	b508      	push	{r3, lr}
	serialEventRun();
   d53de:	f7ff ffdf 	bl	d53a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53e2:	f7ff fa21 	bl	d4828 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53e6:	4b01      	ldr	r3, [pc, #4]	; (d53ec <_post_loop+0x10>)
   d53e8:	6018      	str	r0, [r3, #0]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	2003e714 	.word	0x2003e714

000d53f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d53f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d53f2:	2300      	movs	r3, #0
   d53f4:	9300      	str	r3, [sp, #0]
   d53f6:	461a      	mov	r2, r3
   d53f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53fc:	f7ff fb36 	bl	d4a6c <system_ctrl_set_result>
}
   d5400:	b003      	add	sp, #12
   d5402:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5408 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5408:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d540a:	8843      	ldrh	r3, [r0, #2]
   d540c:	2b0a      	cmp	r3, #10
   d540e:	d008      	beq.n	d5422 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5410:	2b50      	cmp	r3, #80	; 0x50
   d5412:	d109      	bne.n	d5428 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5414:	4b09      	ldr	r3, [pc, #36]	; (d543c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5416:	681b      	ldr	r3, [r3, #0]
   d5418:	b13b      	cbz	r3, d542a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d541a:	b003      	add	sp, #12
   d541c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5420:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5422:	f7ff ffe5 	bl	d53f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5426:	e006      	b.n	d5436 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5428:	2300      	movs	r3, #0
   d542a:	9300      	str	r3, [sp, #0]
   d542c:	461a      	mov	r2, r3
   d542e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5432:	f7ff fb1b 	bl	d4a6c <system_ctrl_set_result>
        break;
    }
}
   d5436:	b003      	add	sp, #12
   d5438:	f85d fb04 	ldr.w	pc, [sp], #4
   d543c:	2003e710 	.word	0x2003e710

000d5440 <module_user_init_hook>:

void module_user_init_hook()
{
   d5440:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5442:	f7ff f9e1 	bl	d4808 <HAL_RNG_GetRandomNumber>
   d5446:	4604      	mov	r4, r0
    srand(seed);
   d5448:	f000 fe16 	bl	d6078 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d544c:	4b07      	ldr	r3, [pc, #28]	; (d546c <module_user_init_hook+0x2c>)
   d544e:	b113      	cbz	r3, d5456 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5450:	4620      	mov	r0, r4
   d5452:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5456:	2100      	movs	r1, #0
   d5458:	4804      	ldr	r0, [pc, #16]	; (d546c <module_user_init_hook+0x2c>)
   d545a:	f7ff fb19 	bl	d4a90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d545e:	2100      	movs	r1, #0
   d5460:	4803      	ldr	r0, [pc, #12]	; (d5470 <module_user_init_hook+0x30>)
}
   d5462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5466:	f7ff baf7 	b.w	d4a58 <system_ctrl_set_app_request_handler>
   d546a:	bf00      	nop
   d546c:	00000000 	.word	0x00000000
   d5470:	000d5409 	.word	0x000d5409

000d5474 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5474:	b510      	push	{r4, lr}
   d5476:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5478:	480f      	ldr	r0, [pc, #60]	; (d54b8 <pinAvailable+0x44>)
   d547a:	f7ff fe5f 	bl	d513c <_ZN8SPIClass9isEnabledEv>
   d547e:	b128      	cbz	r0, d548c <pinAvailable+0x18>
   d5480:	f1a4 030b 	sub.w	r3, r4, #11
   d5484:	2b02      	cmp	r3, #2
   d5486:	d801      	bhi.n	d548c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5488:	2000      	movs	r0, #0
   d548a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d548c:	f000 f828 	bl	d54e0 <_Z19__fetch_global_Wirev>
   d5490:	f7ff fbf6 	bl	d4c80 <_ZN7TwoWire9isEnabledEv>
   d5494:	b108      	cbz	r0, d549a <pinAvailable+0x26>
   d5496:	2c01      	cmp	r4, #1
   d5498:	d9f6      	bls.n	d5488 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d549a:	f7ff fead 	bl	d51f8 <_Z22__fetch_global_Serial1v>
   d549e:	f7ff fea7 	bl	d51f0 <_ZN11USARTSerial9isEnabledEv>
   d54a2:	b118      	cbz	r0, d54ac <pinAvailable+0x38>
   d54a4:	f1a4 0309 	sub.w	r3, r4, #9
   d54a8:	2b01      	cmp	r3, #1
   d54aa:	d9ed      	bls.n	d5488 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d54ac:	2c23      	cmp	r4, #35	; 0x23
   d54ae:	bf8c      	ite	hi
   d54b0:	2000      	movhi	r0, #0
   d54b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d54b4:	bd10      	pop	{r4, pc}
   d54b6:	bf00      	nop
   d54b8:	2003e730 	.word	0x2003e730

000d54bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d54bc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d54be:	b538      	push	{r3, r4, r5, lr}
   d54c0:	4604      	mov	r4, r0
   d54c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d54c4:	d80a      	bhi.n	d54dc <pinMode+0x20>
   d54c6:	29ff      	cmp	r1, #255	; 0xff
   d54c8:	d008      	beq.n	d54dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d54ca:	f7ff ffd3 	bl	d5474 <pinAvailable>
   d54ce:	b128      	cbz	r0, d54dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d54d0:	4629      	mov	r1, r5
   d54d2:	4620      	mov	r0, r4
}
   d54d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d54d8:	f7ff b9b6 	b.w	d4848 <HAL_Pin_Mode>
   d54dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54e0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d54e0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d54e2:	4d0b      	ldr	r5, [pc, #44]	; (d5510 <_Z19__fetch_global_Wirev+0x30>)
   d54e4:	6829      	ldr	r1, [r5, #0]
   d54e6:	f011 0401 	ands.w	r4, r1, #1
   d54ea:	d10f      	bne.n	d550c <_Z19__fetch_global_Wirev+0x2c>
   d54ec:	4628      	mov	r0, r5
   d54ee:	f7fe fdd6 	bl	d409e <__cxa_guard_acquire>
   d54f2:	b158      	cbz	r0, d550c <_Z19__fetch_global_Wirev+0x2c>
   d54f4:	4621      	mov	r1, r4
   d54f6:	4807      	ldr	r0, [pc, #28]	; (d5514 <_Z19__fetch_global_Wirev+0x34>)
   d54f8:	f7ff fbb0 	bl	d4c5c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d54fc:	4628      	mov	r0, r5
   d54fe:	f7fe fdd3 	bl	d40a8 <__cxa_guard_release>
   d5502:	4a05      	ldr	r2, [pc, #20]	; (d5518 <_Z19__fetch_global_Wirev+0x38>)
   d5504:	4905      	ldr	r1, [pc, #20]	; (d551c <_Z19__fetch_global_Wirev+0x3c>)
   d5506:	4803      	ldr	r0, [pc, #12]	; (d5514 <_Z19__fetch_global_Wirev+0x34>)
   d5508:	f000 f82c 	bl	d5564 <__aeabi_atexit>
	return wire;
}
   d550c:	4801      	ldr	r0, [pc, #4]	; (d5514 <_Z19__fetch_global_Wirev+0x34>)
   d550e:	bd38      	pop	{r3, r4, r5, pc}
   d5510:	2003e718 	.word	0x2003e718
   d5514:	2003e71c 	.word	0x2003e71c
   d5518:	2003e388 	.word	0x2003e388
   d551c:	000d4c05 	.word	0x000d4c05

000d5520 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5520:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5522:	4c0c      	ldr	r4, [pc, #48]	; (d5554 <_GLOBAL__sub_I_SPI+0x34>)
   d5524:	4e0c      	ldr	r6, [pc, #48]	; (d5558 <_GLOBAL__sub_I_SPI+0x38>)
   d5526:	4d0d      	ldr	r5, [pc, #52]	; (d555c <_GLOBAL__sub_I_SPI+0x3c>)
   d5528:	2100      	movs	r1, #0
   d552a:	4620      	mov	r0, r4
   d552c:	f7ff fdf2 	bl	d5114 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5530:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5532:	4c0b      	ldr	r4, [pc, #44]	; (d5560 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5534:	4632      	mov	r2, r6
   d5536:	4629      	mov	r1, r5
   d5538:	f000 f814 	bl	d5564 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d553c:	2101      	movs	r1, #1
   d553e:	4620      	mov	r0, r4
   d5540:	f7ff fde8 	bl	d5114 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5544:	4632      	mov	r2, r6
   d5546:	4629      	mov	r1, r5
   d5548:	4620      	mov	r0, r4
   d554a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d554e:	f000 b809 	b.w	d5564 <__aeabi_atexit>
   d5552:	bf00      	nop
   d5554:	2003e730 	.word	0x2003e730
   d5558:	2003e388 	.word	0x2003e388
   d555c:	000d5105 	.word	0x000d5105
   d5560:	2003e740 	.word	0x2003e740

000d5564 <__aeabi_atexit>:
   d5564:	460b      	mov	r3, r1
   d5566:	4601      	mov	r1, r0
   d5568:	4618      	mov	r0, r3
   d556a:	f000 bd63 	b.w	d6034 <__cxa_atexit>
	...

000d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5570:	4b24      	ldr	r3, [pc, #144]	; (d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5572:	681a      	ldr	r2, [r3, #0]
   d5574:	07d0      	lsls	r0, r2, #31
   d5576:	bf5c      	itt	pl
   d5578:	2201      	movpl	r2, #1
   d557a:	601a      	strpl	r2, [r3, #0]
   d557c:	4b22      	ldr	r3, [pc, #136]	; (d5608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d557e:	681a      	ldr	r2, [r3, #0]
   d5580:	07d1      	lsls	r1, r2, #31
   d5582:	bf5c      	itt	pl
   d5584:	2201      	movpl	r2, #1
   d5586:	601a      	strpl	r2, [r3, #0]
   d5588:	4b20      	ldr	r3, [pc, #128]	; (d560c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d558a:	681a      	ldr	r2, [r3, #0]
   d558c:	07d2      	lsls	r2, r2, #31
   d558e:	bf5c      	itt	pl
   d5590:	2201      	movpl	r2, #1
   d5592:	601a      	strpl	r2, [r3, #0]
   d5594:	4b1e      	ldr	r3, [pc, #120]	; (d5610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5596:	681a      	ldr	r2, [r3, #0]
   d5598:	07d0      	lsls	r0, r2, #31
   d559a:	bf5c      	itt	pl
   d559c:	2201      	movpl	r2, #1
   d559e:	601a      	strpl	r2, [r3, #0]
   d55a0:	4b1c      	ldr	r3, [pc, #112]	; (d5614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d55a2:	681a      	ldr	r2, [r3, #0]
   d55a4:	07d1      	lsls	r1, r2, #31
   d55a6:	bf5c      	itt	pl
   d55a8:	2201      	movpl	r2, #1
   d55aa:	601a      	strpl	r2, [r3, #0]
   d55ac:	4b1a      	ldr	r3, [pc, #104]	; (d5618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d55ae:	681a      	ldr	r2, [r3, #0]
   d55b0:	07d2      	lsls	r2, r2, #31
   d55b2:	bf5c      	itt	pl
   d55b4:	2201      	movpl	r2, #1
   d55b6:	601a      	strpl	r2, [r3, #0]
   d55b8:	4b18      	ldr	r3, [pc, #96]	; (d561c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d55ba:	681a      	ldr	r2, [r3, #0]
   d55bc:	07d0      	lsls	r0, r2, #31
   d55be:	bf5c      	itt	pl
   d55c0:	2201      	movpl	r2, #1
   d55c2:	601a      	strpl	r2, [r3, #0]
   d55c4:	4b16      	ldr	r3, [pc, #88]	; (d5620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d55c6:	681a      	ldr	r2, [r3, #0]
   d55c8:	07d1      	lsls	r1, r2, #31
   d55ca:	bf5c      	itt	pl
   d55cc:	2201      	movpl	r2, #1
   d55ce:	601a      	strpl	r2, [r3, #0]
   d55d0:	4b14      	ldr	r3, [pc, #80]	; (d5624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d55d2:	681a      	ldr	r2, [r3, #0]
   d55d4:	07d2      	lsls	r2, r2, #31
   d55d6:	bf5c      	itt	pl
   d55d8:	2201      	movpl	r2, #1
   d55da:	601a      	strpl	r2, [r3, #0]
   d55dc:	4b12      	ldr	r3, [pc, #72]	; (d5628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d55de:	681a      	ldr	r2, [r3, #0]
   d55e0:	07d0      	lsls	r0, r2, #31
   d55e2:	bf5c      	itt	pl
   d55e4:	2201      	movpl	r2, #1
   d55e6:	601a      	strpl	r2, [r3, #0]
   d55e8:	4b10      	ldr	r3, [pc, #64]	; (d562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d55ea:	681a      	ldr	r2, [r3, #0]
   d55ec:	07d1      	lsls	r1, r2, #31
   d55ee:	bf5c      	itt	pl
   d55f0:	2201      	movpl	r2, #1
   d55f2:	601a      	strpl	r2, [r3, #0]
   d55f4:	4b0e      	ldr	r3, [pc, #56]	; (d5630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d55f6:	681a      	ldr	r2, [r3, #0]
   d55f8:	07d2      	lsls	r2, r2, #31
   d55fa:	bf5c      	itt	pl
   d55fc:	2201      	movpl	r2, #1
   d55fe:	601a      	strpl	r2, [r3, #0]
   d5600:	4770      	bx	lr
   d5602:	bf00      	nop
   d5604:	2003e77c 	.word	0x2003e77c
   d5608:	2003e778 	.word	0x2003e778
   d560c:	2003e774 	.word	0x2003e774
   d5610:	2003e770 	.word	0x2003e770
   d5614:	2003e76c 	.word	0x2003e76c
   d5618:	2003e768 	.word	0x2003e768
   d561c:	2003e764 	.word	0x2003e764
   d5620:	2003e760 	.word	0x2003e760
   d5624:	2003e75c 	.word	0x2003e75c
   d5628:	2003e758 	.word	0x2003e758
   d562c:	2003e754 	.word	0x2003e754
   d5630:	2003e750 	.word	0x2003e750

000d5634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5634:	4b18      	ldr	r3, [pc, #96]	; (d5698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5636:	681a      	ldr	r2, [r3, #0]
   d5638:	07d1      	lsls	r1, r2, #31
   d563a:	bf5c      	itt	pl
   d563c:	2201      	movpl	r2, #1
   d563e:	601a      	strpl	r2, [r3, #0]
   d5640:	4b16      	ldr	r3, [pc, #88]	; (d569c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5642:	681a      	ldr	r2, [r3, #0]
   d5644:	07d2      	lsls	r2, r2, #31
   d5646:	bf5c      	itt	pl
   d5648:	2201      	movpl	r2, #1
   d564a:	601a      	strpl	r2, [r3, #0]
   d564c:	4b14      	ldr	r3, [pc, #80]	; (d56a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d564e:	681a      	ldr	r2, [r3, #0]
   d5650:	07d0      	lsls	r0, r2, #31
   d5652:	bf5c      	itt	pl
   d5654:	2201      	movpl	r2, #1
   d5656:	601a      	strpl	r2, [r3, #0]
   d5658:	4b12      	ldr	r3, [pc, #72]	; (d56a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	07d1      	lsls	r1, r2, #31
   d565e:	bf5c      	itt	pl
   d5660:	2201      	movpl	r2, #1
   d5662:	601a      	strpl	r2, [r3, #0]
   d5664:	4b10      	ldr	r3, [pc, #64]	; (d56a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5666:	681a      	ldr	r2, [r3, #0]
   d5668:	07d2      	lsls	r2, r2, #31
   d566a:	bf5c      	itt	pl
   d566c:	2201      	movpl	r2, #1
   d566e:	601a      	strpl	r2, [r3, #0]
   d5670:	4b0e      	ldr	r3, [pc, #56]	; (d56ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5672:	681a      	ldr	r2, [r3, #0]
   d5674:	07d0      	lsls	r0, r2, #31
   d5676:	bf5c      	itt	pl
   d5678:	2201      	movpl	r2, #1
   d567a:	601a      	strpl	r2, [r3, #0]
   d567c:	4b0c      	ldr	r3, [pc, #48]	; (d56b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d567e:	681a      	ldr	r2, [r3, #0]
   d5680:	07d1      	lsls	r1, r2, #31
   d5682:	bf5c      	itt	pl
   d5684:	2201      	movpl	r2, #1
   d5686:	601a      	strpl	r2, [r3, #0]
   d5688:	4b0a      	ldr	r3, [pc, #40]	; (d56b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d568a:	681a      	ldr	r2, [r3, #0]
   d568c:	07d2      	lsls	r2, r2, #31
   d568e:	bf5c      	itt	pl
   d5690:	2201      	movpl	r2, #1
   d5692:	601a      	strpl	r2, [r3, #0]
   d5694:	4770      	bx	lr
   d5696:	bf00      	nop
   d5698:	2003e79c 	.word	0x2003e79c
   d569c:	2003e798 	.word	0x2003e798
   d56a0:	2003e794 	.word	0x2003e794
   d56a4:	2003e790 	.word	0x2003e790
   d56a8:	2003e78c 	.word	0x2003e78c
   d56ac:	2003e788 	.word	0x2003e788
   d56b0:	2003e784 	.word	0x2003e784
   d56b4:	2003e780 	.word	0x2003e780

000d56b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d56b8:	4b18      	ldr	r3, [pc, #96]	; (d571c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d56ba:	681a      	ldr	r2, [r3, #0]
   d56bc:	07d1      	lsls	r1, r2, #31
   d56be:	bf5c      	itt	pl
   d56c0:	2201      	movpl	r2, #1
   d56c2:	601a      	strpl	r2, [r3, #0]
   d56c4:	4b16      	ldr	r3, [pc, #88]	; (d5720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d56c6:	681a      	ldr	r2, [r3, #0]
   d56c8:	07d2      	lsls	r2, r2, #31
   d56ca:	bf5c      	itt	pl
   d56cc:	2201      	movpl	r2, #1
   d56ce:	601a      	strpl	r2, [r3, #0]
   d56d0:	4b14      	ldr	r3, [pc, #80]	; (d5724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d56d2:	681a      	ldr	r2, [r3, #0]
   d56d4:	07d0      	lsls	r0, r2, #31
   d56d6:	bf5c      	itt	pl
   d56d8:	2201      	movpl	r2, #1
   d56da:	601a      	strpl	r2, [r3, #0]
   d56dc:	4b12      	ldr	r3, [pc, #72]	; (d5728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d56de:	681a      	ldr	r2, [r3, #0]
   d56e0:	07d1      	lsls	r1, r2, #31
   d56e2:	bf5c      	itt	pl
   d56e4:	2201      	movpl	r2, #1
   d56e6:	601a      	strpl	r2, [r3, #0]
   d56e8:	4b10      	ldr	r3, [pc, #64]	; (d572c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d56ea:	681a      	ldr	r2, [r3, #0]
   d56ec:	07d2      	lsls	r2, r2, #31
   d56ee:	bf5c      	itt	pl
   d56f0:	2201      	movpl	r2, #1
   d56f2:	601a      	strpl	r2, [r3, #0]
   d56f4:	4b0e      	ldr	r3, [pc, #56]	; (d5730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d56f6:	681a      	ldr	r2, [r3, #0]
   d56f8:	07d0      	lsls	r0, r2, #31
   d56fa:	bf5c      	itt	pl
   d56fc:	2201      	movpl	r2, #1
   d56fe:	601a      	strpl	r2, [r3, #0]
   d5700:	4b0c      	ldr	r3, [pc, #48]	; (d5734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5702:	681a      	ldr	r2, [r3, #0]
   d5704:	07d1      	lsls	r1, r2, #31
   d5706:	bf5c      	itt	pl
   d5708:	2201      	movpl	r2, #1
   d570a:	601a      	strpl	r2, [r3, #0]
   d570c:	4b0a      	ldr	r3, [pc, #40]	; (d5738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d570e:	681a      	ldr	r2, [r3, #0]
   d5710:	07d2      	lsls	r2, r2, #31
   d5712:	bf5c      	itt	pl
   d5714:	2201      	movpl	r2, #1
   d5716:	601a      	strpl	r2, [r3, #0]
   d5718:	4770      	bx	lr
   d571a:	bf00      	nop
   d571c:	2003e7bc 	.word	0x2003e7bc
   d5720:	2003e7b8 	.word	0x2003e7b8
   d5724:	2003e7b4 	.word	0x2003e7b4
   d5728:	2003e7b0 	.word	0x2003e7b0
   d572c:	2003e7ac 	.word	0x2003e7ac
   d5730:	2003e7a8 	.word	0x2003e7a8
   d5734:	2003e7a4 	.word	0x2003e7a4
   d5738:	2003e7a0 	.word	0x2003e7a0

000d573c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d573c:	4b24      	ldr	r3, [pc, #144]	; (d57d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d573e:	681a      	ldr	r2, [r3, #0]
   d5740:	07d0      	lsls	r0, r2, #31
   d5742:	bf5c      	itt	pl
   d5744:	2201      	movpl	r2, #1
   d5746:	601a      	strpl	r2, [r3, #0]
   d5748:	4b22      	ldr	r3, [pc, #136]	; (d57d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d574a:	681a      	ldr	r2, [r3, #0]
   d574c:	07d1      	lsls	r1, r2, #31
   d574e:	bf5c      	itt	pl
   d5750:	2201      	movpl	r2, #1
   d5752:	601a      	strpl	r2, [r3, #0]
   d5754:	4b20      	ldr	r3, [pc, #128]	; (d57d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5756:	681a      	ldr	r2, [r3, #0]
   d5758:	07d2      	lsls	r2, r2, #31
   d575a:	bf5c      	itt	pl
   d575c:	2201      	movpl	r2, #1
   d575e:	601a      	strpl	r2, [r3, #0]
   d5760:	4b1e      	ldr	r3, [pc, #120]	; (d57dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5762:	681a      	ldr	r2, [r3, #0]
   d5764:	07d0      	lsls	r0, r2, #31
   d5766:	bf5c      	itt	pl
   d5768:	2201      	movpl	r2, #1
   d576a:	601a      	strpl	r2, [r3, #0]
   d576c:	4b1c      	ldr	r3, [pc, #112]	; (d57e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d576e:	681a      	ldr	r2, [r3, #0]
   d5770:	07d1      	lsls	r1, r2, #31
   d5772:	bf5c      	itt	pl
   d5774:	2201      	movpl	r2, #1
   d5776:	601a      	strpl	r2, [r3, #0]
   d5778:	4b1a      	ldr	r3, [pc, #104]	; (d57e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d577a:	681a      	ldr	r2, [r3, #0]
   d577c:	07d2      	lsls	r2, r2, #31
   d577e:	bf5c      	itt	pl
   d5780:	2201      	movpl	r2, #1
   d5782:	601a      	strpl	r2, [r3, #0]
   d5784:	4b18      	ldr	r3, [pc, #96]	; (d57e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5786:	681a      	ldr	r2, [r3, #0]
   d5788:	07d0      	lsls	r0, r2, #31
   d578a:	bf5c      	itt	pl
   d578c:	2201      	movpl	r2, #1
   d578e:	601a      	strpl	r2, [r3, #0]
   d5790:	4b16      	ldr	r3, [pc, #88]	; (d57ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5792:	681a      	ldr	r2, [r3, #0]
   d5794:	07d1      	lsls	r1, r2, #31
   d5796:	bf5c      	itt	pl
   d5798:	2201      	movpl	r2, #1
   d579a:	601a      	strpl	r2, [r3, #0]
   d579c:	4b14      	ldr	r3, [pc, #80]	; (d57f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d579e:	681a      	ldr	r2, [r3, #0]
   d57a0:	07d2      	lsls	r2, r2, #31
   d57a2:	bf5c      	itt	pl
   d57a4:	2201      	movpl	r2, #1
   d57a6:	601a      	strpl	r2, [r3, #0]
   d57a8:	4b12      	ldr	r3, [pc, #72]	; (d57f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d57aa:	681a      	ldr	r2, [r3, #0]
   d57ac:	07d0      	lsls	r0, r2, #31
   d57ae:	bf5c      	itt	pl
   d57b0:	2201      	movpl	r2, #1
   d57b2:	601a      	strpl	r2, [r3, #0]
   d57b4:	4b10      	ldr	r3, [pc, #64]	; (d57f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d57b6:	681a      	ldr	r2, [r3, #0]
   d57b8:	07d1      	lsls	r1, r2, #31
   d57ba:	bf5c      	itt	pl
   d57bc:	2201      	movpl	r2, #1
   d57be:	601a      	strpl	r2, [r3, #0]
   d57c0:	4b0e      	ldr	r3, [pc, #56]	; (d57fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d57c2:	681a      	ldr	r2, [r3, #0]
   d57c4:	07d2      	lsls	r2, r2, #31
   d57c6:	bf5c      	itt	pl
   d57c8:	2201      	movpl	r2, #1
   d57ca:	601a      	strpl	r2, [r3, #0]
   d57cc:	4770      	bx	lr
   d57ce:	bf00      	nop
   d57d0:	2003e7ec 	.word	0x2003e7ec
   d57d4:	2003e7e8 	.word	0x2003e7e8
   d57d8:	2003e7e4 	.word	0x2003e7e4
   d57dc:	2003e7e0 	.word	0x2003e7e0
   d57e0:	2003e7dc 	.word	0x2003e7dc
   d57e4:	2003e7d8 	.word	0x2003e7d8
   d57e8:	2003e7d4 	.word	0x2003e7d4
   d57ec:	2003e7d0 	.word	0x2003e7d0
   d57f0:	2003e7cc 	.word	0x2003e7cc
   d57f4:	2003e7c8 	.word	0x2003e7c8
   d57f8:	2003e7c4 	.word	0x2003e7c4
   d57fc:	2003e7c0 	.word	0x2003e7c0

000d5800 <__aeabi_drsub>:
   d5800:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5804:	e002      	b.n	d580c <__adddf3>
   d5806:	bf00      	nop

000d5808 <__aeabi_dsub>:
   d5808:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d580c <__adddf3>:
   d580c:	b530      	push	{r4, r5, lr}
   d580e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5812:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5816:	ea94 0f05 	teq	r4, r5
   d581a:	bf08      	it	eq
   d581c:	ea90 0f02 	teqeq	r0, r2
   d5820:	bf1f      	itttt	ne
   d5822:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5826:	ea55 0c02 	orrsne.w	ip, r5, r2
   d582a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d582e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5832:	f000 80e2 	beq.w	d59fa <__adddf3+0x1ee>
   d5836:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d583a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d583e:	bfb8      	it	lt
   d5840:	426d      	neglt	r5, r5
   d5842:	dd0c      	ble.n	d585e <__adddf3+0x52>
   d5844:	442c      	add	r4, r5
   d5846:	ea80 0202 	eor.w	r2, r0, r2
   d584a:	ea81 0303 	eor.w	r3, r1, r3
   d584e:	ea82 0000 	eor.w	r0, r2, r0
   d5852:	ea83 0101 	eor.w	r1, r3, r1
   d5856:	ea80 0202 	eor.w	r2, r0, r2
   d585a:	ea81 0303 	eor.w	r3, r1, r3
   d585e:	2d36      	cmp	r5, #54	; 0x36
   d5860:	bf88      	it	hi
   d5862:	bd30      	pophi	{r4, r5, pc}
   d5864:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5868:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d586c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5870:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5874:	d002      	beq.n	d587c <__adddf3+0x70>
   d5876:	4240      	negs	r0, r0
   d5878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d587c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5880:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5884:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5888:	d002      	beq.n	d5890 <__adddf3+0x84>
   d588a:	4252      	negs	r2, r2
   d588c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5890:	ea94 0f05 	teq	r4, r5
   d5894:	f000 80a7 	beq.w	d59e6 <__adddf3+0x1da>
   d5898:	f1a4 0401 	sub.w	r4, r4, #1
   d589c:	f1d5 0e20 	rsbs	lr, r5, #32
   d58a0:	db0d      	blt.n	d58be <__adddf3+0xb2>
   d58a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d58a6:	fa22 f205 	lsr.w	r2, r2, r5
   d58aa:	1880      	adds	r0, r0, r2
   d58ac:	f141 0100 	adc.w	r1, r1, #0
   d58b0:	fa03 f20e 	lsl.w	r2, r3, lr
   d58b4:	1880      	adds	r0, r0, r2
   d58b6:	fa43 f305 	asr.w	r3, r3, r5
   d58ba:	4159      	adcs	r1, r3
   d58bc:	e00e      	b.n	d58dc <__adddf3+0xd0>
   d58be:	f1a5 0520 	sub.w	r5, r5, #32
   d58c2:	f10e 0e20 	add.w	lr, lr, #32
   d58c6:	2a01      	cmp	r2, #1
   d58c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d58cc:	bf28      	it	cs
   d58ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   d58d2:	fa43 f305 	asr.w	r3, r3, r5
   d58d6:	18c0      	adds	r0, r0, r3
   d58d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d58dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58e0:	d507      	bpl.n	d58f2 <__adddf3+0xe6>
   d58e2:	f04f 0e00 	mov.w	lr, #0
   d58e6:	f1dc 0c00 	rsbs	ip, ip, #0
   d58ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   d58ee:	eb6e 0101 	sbc.w	r1, lr, r1
   d58f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d58f6:	d31b      	bcc.n	d5930 <__adddf3+0x124>
   d58f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d58fc:	d30c      	bcc.n	d5918 <__adddf3+0x10c>
   d58fe:	0849      	lsrs	r1, r1, #1
   d5900:	ea5f 0030 	movs.w	r0, r0, rrx
   d5904:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5908:	f104 0401 	add.w	r4, r4, #1
   d590c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5910:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5914:	f080 809a 	bcs.w	d5a4c <__adddf3+0x240>
   d5918:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d591c:	bf08      	it	eq
   d591e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5922:	f150 0000 	adcs.w	r0, r0, #0
   d5926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d592a:	ea41 0105 	orr.w	r1, r1, r5
   d592e:	bd30      	pop	{r4, r5, pc}
   d5930:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5934:	4140      	adcs	r0, r0
   d5936:	eb41 0101 	adc.w	r1, r1, r1
   d593a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d593e:	f1a4 0401 	sub.w	r4, r4, #1
   d5942:	d1e9      	bne.n	d5918 <__adddf3+0x10c>
   d5944:	f091 0f00 	teq	r1, #0
   d5948:	bf04      	itt	eq
   d594a:	4601      	moveq	r1, r0
   d594c:	2000      	moveq	r0, #0
   d594e:	fab1 f381 	clz	r3, r1
   d5952:	bf08      	it	eq
   d5954:	3320      	addeq	r3, #32
   d5956:	f1a3 030b 	sub.w	r3, r3, #11
   d595a:	f1b3 0220 	subs.w	r2, r3, #32
   d595e:	da0c      	bge.n	d597a <__adddf3+0x16e>
   d5960:	320c      	adds	r2, #12
   d5962:	dd08      	ble.n	d5976 <__adddf3+0x16a>
   d5964:	f102 0c14 	add.w	ip, r2, #20
   d5968:	f1c2 020c 	rsb	r2, r2, #12
   d596c:	fa01 f00c 	lsl.w	r0, r1, ip
   d5970:	fa21 f102 	lsr.w	r1, r1, r2
   d5974:	e00c      	b.n	d5990 <__adddf3+0x184>
   d5976:	f102 0214 	add.w	r2, r2, #20
   d597a:	bfd8      	it	le
   d597c:	f1c2 0c20 	rsble	ip, r2, #32
   d5980:	fa01 f102 	lsl.w	r1, r1, r2
   d5984:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5988:	bfdc      	itt	le
   d598a:	ea41 010c 	orrle.w	r1, r1, ip
   d598e:	4090      	lslle	r0, r2
   d5990:	1ae4      	subs	r4, r4, r3
   d5992:	bfa2      	ittt	ge
   d5994:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5998:	4329      	orrge	r1, r5
   d599a:	bd30      	popge	{r4, r5, pc}
   d599c:	ea6f 0404 	mvn.w	r4, r4
   d59a0:	3c1f      	subs	r4, #31
   d59a2:	da1c      	bge.n	d59de <__adddf3+0x1d2>
   d59a4:	340c      	adds	r4, #12
   d59a6:	dc0e      	bgt.n	d59c6 <__adddf3+0x1ba>
   d59a8:	f104 0414 	add.w	r4, r4, #20
   d59ac:	f1c4 0220 	rsb	r2, r4, #32
   d59b0:	fa20 f004 	lsr.w	r0, r0, r4
   d59b4:	fa01 f302 	lsl.w	r3, r1, r2
   d59b8:	ea40 0003 	orr.w	r0, r0, r3
   d59bc:	fa21 f304 	lsr.w	r3, r1, r4
   d59c0:	ea45 0103 	orr.w	r1, r5, r3
   d59c4:	bd30      	pop	{r4, r5, pc}
   d59c6:	f1c4 040c 	rsb	r4, r4, #12
   d59ca:	f1c4 0220 	rsb	r2, r4, #32
   d59ce:	fa20 f002 	lsr.w	r0, r0, r2
   d59d2:	fa01 f304 	lsl.w	r3, r1, r4
   d59d6:	ea40 0003 	orr.w	r0, r0, r3
   d59da:	4629      	mov	r1, r5
   d59dc:	bd30      	pop	{r4, r5, pc}
   d59de:	fa21 f004 	lsr.w	r0, r1, r4
   d59e2:	4629      	mov	r1, r5
   d59e4:	bd30      	pop	{r4, r5, pc}
   d59e6:	f094 0f00 	teq	r4, #0
   d59ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d59ee:	bf06      	itte	eq
   d59f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d59f4:	3401      	addeq	r4, #1
   d59f6:	3d01      	subne	r5, #1
   d59f8:	e74e      	b.n	d5898 <__adddf3+0x8c>
   d59fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59fe:	bf18      	it	ne
   d5a00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5a04:	d029      	beq.n	d5a5a <__adddf3+0x24e>
   d5a06:	ea94 0f05 	teq	r4, r5
   d5a0a:	bf08      	it	eq
   d5a0c:	ea90 0f02 	teqeq	r0, r2
   d5a10:	d005      	beq.n	d5a1e <__adddf3+0x212>
   d5a12:	ea54 0c00 	orrs.w	ip, r4, r0
   d5a16:	bf04      	itt	eq
   d5a18:	4619      	moveq	r1, r3
   d5a1a:	4610      	moveq	r0, r2
   d5a1c:	bd30      	pop	{r4, r5, pc}
   d5a1e:	ea91 0f03 	teq	r1, r3
   d5a22:	bf1e      	ittt	ne
   d5a24:	2100      	movne	r1, #0
   d5a26:	2000      	movne	r0, #0
   d5a28:	bd30      	popne	{r4, r5, pc}
   d5a2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5a2e:	d105      	bne.n	d5a3c <__adddf3+0x230>
   d5a30:	0040      	lsls	r0, r0, #1
   d5a32:	4149      	adcs	r1, r1
   d5a34:	bf28      	it	cs
   d5a36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a3a:	bd30      	pop	{r4, r5, pc}
   d5a3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a40:	bf3c      	itt	cc
   d5a42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a46:	bd30      	popcc	{r4, r5, pc}
   d5a48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a54:	f04f 0000 	mov.w	r0, #0
   d5a58:	bd30      	pop	{r4, r5, pc}
   d5a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a5e:	bf1a      	itte	ne
   d5a60:	4619      	movne	r1, r3
   d5a62:	4610      	movne	r0, r2
   d5a64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a68:	bf1c      	itt	ne
   d5a6a:	460b      	movne	r3, r1
   d5a6c:	4602      	movne	r2, r0
   d5a6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a72:	bf06      	itte	eq
   d5a74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a78:	ea91 0f03 	teqeq	r1, r3
   d5a7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a80:	bd30      	pop	{r4, r5, pc}
   d5a82:	bf00      	nop

000d5a84 <__aeabi_ui2d>:
   d5a84:	f090 0f00 	teq	r0, #0
   d5a88:	bf04      	itt	eq
   d5a8a:	2100      	moveq	r1, #0
   d5a8c:	4770      	bxeq	lr
   d5a8e:	b530      	push	{r4, r5, lr}
   d5a90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a98:	f04f 0500 	mov.w	r5, #0
   d5a9c:	f04f 0100 	mov.w	r1, #0
   d5aa0:	e750      	b.n	d5944 <__adddf3+0x138>
   d5aa2:	bf00      	nop

000d5aa4 <__aeabi_i2d>:
   d5aa4:	f090 0f00 	teq	r0, #0
   d5aa8:	bf04      	itt	eq
   d5aaa:	2100      	moveq	r1, #0
   d5aac:	4770      	bxeq	lr
   d5aae:	b530      	push	{r4, r5, lr}
   d5ab0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ab4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ab8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5abc:	bf48      	it	mi
   d5abe:	4240      	negmi	r0, r0
   d5ac0:	f04f 0100 	mov.w	r1, #0
   d5ac4:	e73e      	b.n	d5944 <__adddf3+0x138>
   d5ac6:	bf00      	nop

000d5ac8 <__aeabi_f2d>:
   d5ac8:	0042      	lsls	r2, r0, #1
   d5aca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ace:	ea4f 0131 	mov.w	r1, r1, rrx
   d5ad2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5ad6:	bf1f      	itttt	ne
   d5ad8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5adc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ae0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5ae4:	4770      	bxne	lr
   d5ae6:	f092 0f00 	teq	r2, #0
   d5aea:	bf14      	ite	ne
   d5aec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5af0:	4770      	bxeq	lr
   d5af2:	b530      	push	{r4, r5, lr}
   d5af4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b00:	e720      	b.n	d5944 <__adddf3+0x138>
   d5b02:	bf00      	nop

000d5b04 <__aeabi_ul2d>:
   d5b04:	ea50 0201 	orrs.w	r2, r0, r1
   d5b08:	bf08      	it	eq
   d5b0a:	4770      	bxeq	lr
   d5b0c:	b530      	push	{r4, r5, lr}
   d5b0e:	f04f 0500 	mov.w	r5, #0
   d5b12:	e00a      	b.n	d5b2a <__aeabi_l2d+0x16>

000d5b14 <__aeabi_l2d>:
   d5b14:	ea50 0201 	orrs.w	r2, r0, r1
   d5b18:	bf08      	it	eq
   d5b1a:	4770      	bxeq	lr
   d5b1c:	b530      	push	{r4, r5, lr}
   d5b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5b22:	d502      	bpl.n	d5b2a <__aeabi_l2d+0x16>
   d5b24:	4240      	negs	r0, r0
   d5b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b36:	f43f aedc 	beq.w	d58f2 <__adddf3+0xe6>
   d5b3a:	f04f 0203 	mov.w	r2, #3
   d5b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b42:	bf18      	it	ne
   d5b44:	3203      	addne	r2, #3
   d5b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b4a:	bf18      	it	ne
   d5b4c:	3203      	addne	r2, #3
   d5b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b52:	f1c2 0320 	rsb	r3, r2, #32
   d5b56:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b5a:	fa20 f002 	lsr.w	r0, r0, r2
   d5b5e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b62:	ea40 000e 	orr.w	r0, r0, lr
   d5b66:	fa21 f102 	lsr.w	r1, r1, r2
   d5b6a:	4414      	add	r4, r2
   d5b6c:	e6c1      	b.n	d58f2 <__adddf3+0xe6>
   d5b6e:	bf00      	nop

000d5b70 <__aeabi_dmul>:
   d5b70:	b570      	push	{r4, r5, r6, lr}
   d5b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5b7e:	bf1d      	ittte	ne
   d5b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5b84:	ea94 0f0c 	teqne	r4, ip
   d5b88:	ea95 0f0c 	teqne	r5, ip
   d5b8c:	f000 f8de 	bleq	d5d4c <__aeabi_dmul+0x1dc>
   d5b90:	442c      	add	r4, r5
   d5b92:	ea81 0603 	eor.w	r6, r1, r3
   d5b96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5b9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5b9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5ba2:	bf18      	it	ne
   d5ba4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5bb0:	d038      	beq.n	d5c24 <__aeabi_dmul+0xb4>
   d5bb2:	fba0 ce02 	umull	ip, lr, r0, r2
   d5bb6:	f04f 0500 	mov.w	r5, #0
   d5bba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5bbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5bc2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5bc6:	f04f 0600 	mov.w	r6, #0
   d5bca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5bce:	f09c 0f00 	teq	ip, #0
   d5bd2:	bf18      	it	ne
   d5bd4:	f04e 0e01 	orrne.w	lr, lr, #1
   d5bd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5bdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5be0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5be4:	d204      	bcs.n	d5bf0 <__aeabi_dmul+0x80>
   d5be6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5bea:	416d      	adcs	r5, r5
   d5bec:	eb46 0606 	adc.w	r6, r6, r6
   d5bf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5bf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5bf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5bfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5c00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5c04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5c08:	bf88      	it	hi
   d5c0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5c0e:	d81e      	bhi.n	d5c4e <__aeabi_dmul+0xde>
   d5c10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5c14:	bf08      	it	eq
   d5c16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5c1a:	f150 0000 	adcs.w	r0, r0, #0
   d5c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c22:	bd70      	pop	{r4, r5, r6, pc}
   d5c24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5c28:	ea46 0101 	orr.w	r1, r6, r1
   d5c2c:	ea40 0002 	orr.w	r0, r0, r2
   d5c30:	ea81 0103 	eor.w	r1, r1, r3
   d5c34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5c38:	bfc2      	ittt	gt
   d5c3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c42:	bd70      	popgt	{r4, r5, r6, pc}
   d5c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c48:	f04f 0e00 	mov.w	lr, #0
   d5c4c:	3c01      	subs	r4, #1
   d5c4e:	f300 80ab 	bgt.w	d5da8 <__aeabi_dmul+0x238>
   d5c52:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5c56:	bfde      	ittt	le
   d5c58:	2000      	movle	r0, #0
   d5c5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c5e:	bd70      	pople	{r4, r5, r6, pc}
   d5c60:	f1c4 0400 	rsb	r4, r4, #0
   d5c64:	3c20      	subs	r4, #32
   d5c66:	da35      	bge.n	d5cd4 <__aeabi_dmul+0x164>
   d5c68:	340c      	adds	r4, #12
   d5c6a:	dc1b      	bgt.n	d5ca4 <__aeabi_dmul+0x134>
   d5c6c:	f104 0414 	add.w	r4, r4, #20
   d5c70:	f1c4 0520 	rsb	r5, r4, #32
   d5c74:	fa00 f305 	lsl.w	r3, r0, r5
   d5c78:	fa20 f004 	lsr.w	r0, r0, r4
   d5c7c:	fa01 f205 	lsl.w	r2, r1, r5
   d5c80:	ea40 0002 	orr.w	r0, r0, r2
   d5c84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c90:	fa21 f604 	lsr.w	r6, r1, r4
   d5c94:	eb42 0106 	adc.w	r1, r2, r6
   d5c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c9c:	bf08      	it	eq
   d5c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5ca2:	bd70      	pop	{r4, r5, r6, pc}
   d5ca4:	f1c4 040c 	rsb	r4, r4, #12
   d5ca8:	f1c4 0520 	rsb	r5, r4, #32
   d5cac:	fa00 f304 	lsl.w	r3, r0, r4
   d5cb0:	fa20 f005 	lsr.w	r0, r0, r5
   d5cb4:	fa01 f204 	lsl.w	r2, r1, r4
   d5cb8:	ea40 0002 	orr.w	r0, r0, r2
   d5cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5cc4:	f141 0100 	adc.w	r1, r1, #0
   d5cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ccc:	bf08      	it	eq
   d5cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cd2:	bd70      	pop	{r4, r5, r6, pc}
   d5cd4:	f1c4 0520 	rsb	r5, r4, #32
   d5cd8:	fa00 f205 	lsl.w	r2, r0, r5
   d5cdc:	ea4e 0e02 	orr.w	lr, lr, r2
   d5ce0:	fa20 f304 	lsr.w	r3, r0, r4
   d5ce4:	fa01 f205 	lsl.w	r2, r1, r5
   d5ce8:	ea43 0302 	orr.w	r3, r3, r2
   d5cec:	fa21 f004 	lsr.w	r0, r1, r4
   d5cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cf4:	fa21 f204 	lsr.w	r2, r1, r4
   d5cf8:	ea20 0002 	bic.w	r0, r0, r2
   d5cfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d04:	bf08      	it	eq
   d5d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d0a:	bd70      	pop	{r4, r5, r6, pc}
   d5d0c:	f094 0f00 	teq	r4, #0
   d5d10:	d10f      	bne.n	d5d32 <__aeabi_dmul+0x1c2>
   d5d12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5d16:	0040      	lsls	r0, r0, #1
   d5d18:	eb41 0101 	adc.w	r1, r1, r1
   d5d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d20:	bf08      	it	eq
   d5d22:	3c01      	subeq	r4, #1
   d5d24:	d0f7      	beq.n	d5d16 <__aeabi_dmul+0x1a6>
   d5d26:	ea41 0106 	orr.w	r1, r1, r6
   d5d2a:	f095 0f00 	teq	r5, #0
   d5d2e:	bf18      	it	ne
   d5d30:	4770      	bxne	lr
   d5d32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5d36:	0052      	lsls	r2, r2, #1
   d5d38:	eb43 0303 	adc.w	r3, r3, r3
   d5d3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5d40:	bf08      	it	eq
   d5d42:	3d01      	subeq	r5, #1
   d5d44:	d0f7      	beq.n	d5d36 <__aeabi_dmul+0x1c6>
   d5d46:	ea43 0306 	orr.w	r3, r3, r6
   d5d4a:	4770      	bx	lr
   d5d4c:	ea94 0f0c 	teq	r4, ip
   d5d50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d54:	bf18      	it	ne
   d5d56:	ea95 0f0c 	teqne	r5, ip
   d5d5a:	d00c      	beq.n	d5d76 <__aeabi_dmul+0x206>
   d5d5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d60:	bf18      	it	ne
   d5d62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d66:	d1d1      	bne.n	d5d0c <__aeabi_dmul+0x19c>
   d5d68:	ea81 0103 	eor.w	r1, r1, r3
   d5d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d70:	f04f 0000 	mov.w	r0, #0
   d5d74:	bd70      	pop	{r4, r5, r6, pc}
   d5d76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d7a:	bf06      	itte	eq
   d5d7c:	4610      	moveq	r0, r2
   d5d7e:	4619      	moveq	r1, r3
   d5d80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d84:	d019      	beq.n	d5dba <__aeabi_dmul+0x24a>
   d5d86:	ea94 0f0c 	teq	r4, ip
   d5d8a:	d102      	bne.n	d5d92 <__aeabi_dmul+0x222>
   d5d8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5d90:	d113      	bne.n	d5dba <__aeabi_dmul+0x24a>
   d5d92:	ea95 0f0c 	teq	r5, ip
   d5d96:	d105      	bne.n	d5da4 <__aeabi_dmul+0x234>
   d5d98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5d9c:	bf1c      	itt	ne
   d5d9e:	4610      	movne	r0, r2
   d5da0:	4619      	movne	r1, r3
   d5da2:	d10a      	bne.n	d5dba <__aeabi_dmul+0x24a>
   d5da4:	ea81 0103 	eor.w	r1, r1, r3
   d5da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5db4:	f04f 0000 	mov.w	r0, #0
   d5db8:	bd70      	pop	{r4, r5, r6, pc}
   d5dba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5dbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5dc2:	bd70      	pop	{r4, r5, r6, pc}

000d5dc4 <__aeabi_ddiv>:
   d5dc4:	b570      	push	{r4, r5, r6, lr}
   d5dc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5dca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5dce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5dd2:	bf1d      	ittte	ne
   d5dd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5dd8:	ea94 0f0c 	teqne	r4, ip
   d5ddc:	ea95 0f0c 	teqne	r5, ip
   d5de0:	f000 f8a7 	bleq	d5f32 <__aeabi_ddiv+0x16e>
   d5de4:	eba4 0405 	sub.w	r4, r4, r5
   d5de8:	ea81 0e03 	eor.w	lr, r1, r3
   d5dec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5df4:	f000 8088 	beq.w	d5f08 <__aeabi_ddiv+0x144>
   d5df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5dfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5e00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5e04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5e08:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5e0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5e10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5e14:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5e18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5e1c:	429d      	cmp	r5, r3
   d5e1e:	bf08      	it	eq
   d5e20:	4296      	cmpeq	r6, r2
   d5e22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5e26:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5e2a:	d202      	bcs.n	d5e32 <__aeabi_ddiv+0x6e>
   d5e2c:	085b      	lsrs	r3, r3, #1
   d5e2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e32:	1ab6      	subs	r6, r6, r2
   d5e34:	eb65 0503 	sbc.w	r5, r5, r3
   d5e38:	085b      	lsrs	r3, r3, #1
   d5e3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5e42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5e46:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e4e:	bf22      	ittt	cs
   d5e50:	1ab6      	subcs	r6, r6, r2
   d5e52:	4675      	movcs	r5, lr
   d5e54:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e58:	085b      	lsrs	r3, r3, #1
   d5e5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e66:	bf22      	ittt	cs
   d5e68:	1ab6      	subcs	r6, r6, r2
   d5e6a:	4675      	movcs	r5, lr
   d5e6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e70:	085b      	lsrs	r3, r3, #1
   d5e72:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e76:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e7e:	bf22      	ittt	cs
   d5e80:	1ab6      	subcs	r6, r6, r2
   d5e82:	4675      	movcs	r5, lr
   d5e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5e88:	085b      	lsrs	r3, r3, #1
   d5e8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e96:	bf22      	ittt	cs
   d5e98:	1ab6      	subcs	r6, r6, r2
   d5e9a:	4675      	movcs	r5, lr
   d5e9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ea0:	ea55 0e06 	orrs.w	lr, r5, r6
   d5ea4:	d018      	beq.n	d5ed8 <__aeabi_ddiv+0x114>
   d5ea6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5eaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5eae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5eb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5eb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5eba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5ebe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5ec2:	d1c0      	bne.n	d5e46 <__aeabi_ddiv+0x82>
   d5ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ec8:	d10b      	bne.n	d5ee2 <__aeabi_ddiv+0x11e>
   d5eca:	ea41 0100 	orr.w	r1, r1, r0
   d5ece:	f04f 0000 	mov.w	r0, #0
   d5ed2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5ed6:	e7b6      	b.n	d5e46 <__aeabi_ddiv+0x82>
   d5ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5edc:	bf04      	itt	eq
   d5ede:	4301      	orreq	r1, r0
   d5ee0:	2000      	moveq	r0, #0
   d5ee2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ee6:	bf88      	it	hi
   d5ee8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5eec:	f63f aeaf 	bhi.w	d5c4e <__aeabi_dmul+0xde>
   d5ef0:	ebb5 0c03 	subs.w	ip, r5, r3
   d5ef4:	bf04      	itt	eq
   d5ef6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5efe:	f150 0000 	adcs.w	r0, r0, #0
   d5f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f06:	bd70      	pop	{r4, r5, r6, pc}
   d5f08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5f0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5f10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5f14:	bfc2      	ittt	gt
   d5f16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f1e:	bd70      	popgt	{r4, r5, r6, pc}
   d5f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f24:	f04f 0e00 	mov.w	lr, #0
   d5f28:	3c01      	subs	r4, #1
   d5f2a:	e690      	b.n	d5c4e <__aeabi_dmul+0xde>
   d5f2c:	ea45 0e06 	orr.w	lr, r5, r6
   d5f30:	e68d      	b.n	d5c4e <__aeabi_dmul+0xde>
   d5f32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5f36:	ea94 0f0c 	teq	r4, ip
   d5f3a:	bf08      	it	eq
   d5f3c:	ea95 0f0c 	teqeq	r5, ip
   d5f40:	f43f af3b 	beq.w	d5dba <__aeabi_dmul+0x24a>
   d5f44:	ea94 0f0c 	teq	r4, ip
   d5f48:	d10a      	bne.n	d5f60 <__aeabi_ddiv+0x19c>
   d5f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f4e:	f47f af34 	bne.w	d5dba <__aeabi_dmul+0x24a>
   d5f52:	ea95 0f0c 	teq	r5, ip
   d5f56:	f47f af25 	bne.w	d5da4 <__aeabi_dmul+0x234>
   d5f5a:	4610      	mov	r0, r2
   d5f5c:	4619      	mov	r1, r3
   d5f5e:	e72c      	b.n	d5dba <__aeabi_dmul+0x24a>
   d5f60:	ea95 0f0c 	teq	r5, ip
   d5f64:	d106      	bne.n	d5f74 <__aeabi_ddiv+0x1b0>
   d5f66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f6a:	f43f aefd 	beq.w	d5d68 <__aeabi_dmul+0x1f8>
   d5f6e:	4610      	mov	r0, r2
   d5f70:	4619      	mov	r1, r3
   d5f72:	e722      	b.n	d5dba <__aeabi_dmul+0x24a>
   d5f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f78:	bf18      	it	ne
   d5f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f7e:	f47f aec5 	bne.w	d5d0c <__aeabi_dmul+0x19c>
   d5f82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5f86:	f47f af0d 	bne.w	d5da4 <__aeabi_dmul+0x234>
   d5f8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5f8e:	f47f aeeb 	bne.w	d5d68 <__aeabi_dmul+0x1f8>
   d5f92:	e712      	b.n	d5dba <__aeabi_dmul+0x24a>

000d5f94 <__aeabi_d2f>:
   d5f94:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5f98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5f9c:	bf24      	itt	cs
   d5f9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5fa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5fa6:	d90d      	bls.n	d5fc4 <__aeabi_d2f+0x30>
   d5fa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d5fac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d5fb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d5fb4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d5fb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d5fbc:	bf08      	it	eq
   d5fbe:	f020 0001 	biceq.w	r0, r0, #1
   d5fc2:	4770      	bx	lr
   d5fc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d5fc8:	d121      	bne.n	d600e <__aeabi_d2f+0x7a>
   d5fca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d5fce:	bfbc      	itt	lt
   d5fd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d5fd4:	4770      	bxlt	lr
   d5fd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fda:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d5fde:	f1c2 0218 	rsb	r2, r2, #24
   d5fe2:	f1c2 0c20 	rsb	ip, r2, #32
   d5fe6:	fa10 f30c 	lsls.w	r3, r0, ip
   d5fea:	fa20 f002 	lsr.w	r0, r0, r2
   d5fee:	bf18      	it	ne
   d5ff0:	f040 0001 	orrne.w	r0, r0, #1
   d5ff4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5ff8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d5ffc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6000:	ea40 000c 	orr.w	r0, r0, ip
   d6004:	fa23 f302 	lsr.w	r3, r3, r2
   d6008:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d600c:	e7cc      	b.n	d5fa8 <__aeabi_d2f+0x14>
   d600e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6012:	d107      	bne.n	d6024 <__aeabi_d2f+0x90>
   d6014:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6018:	bf1e      	ittt	ne
   d601a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d601e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6022:	4770      	bxne	lr
   d6024:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6028:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d602c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6030:	4770      	bx	lr
   d6032:	bf00      	nop

000d6034 <__cxa_atexit>:
   d6034:	b510      	push	{r4, lr}
   d6036:	4c05      	ldr	r4, [pc, #20]	; (d604c <__cxa_atexit+0x18>)
   d6038:	4613      	mov	r3, r2
   d603a:	b12c      	cbz	r4, d6048 <__cxa_atexit+0x14>
   d603c:	460a      	mov	r2, r1
   d603e:	4601      	mov	r1, r0
   d6040:	2002      	movs	r0, #2
   d6042:	f3af 8000 	nop.w
   d6046:	bd10      	pop	{r4, pc}
   d6048:	4620      	mov	r0, r4
   d604a:	bd10      	pop	{r4, pc}
   d604c:	00000000 	.word	0x00000000

000d6050 <memcpy>:
   d6050:	b510      	push	{r4, lr}
   d6052:	1e43      	subs	r3, r0, #1
   d6054:	440a      	add	r2, r1
   d6056:	4291      	cmp	r1, r2
   d6058:	d004      	beq.n	d6064 <memcpy+0x14>
   d605a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d605e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6062:	e7f8      	b.n	d6056 <memcpy+0x6>
   d6064:	bd10      	pop	{r4, pc}

000d6066 <memset>:
   d6066:	4402      	add	r2, r0
   d6068:	4603      	mov	r3, r0
   d606a:	4293      	cmp	r3, r2
   d606c:	d002      	beq.n	d6074 <memset+0xe>
   d606e:	f803 1b01 	strb.w	r1, [r3], #1
   d6072:	e7fa      	b.n	d606a <memset+0x4>
   d6074:	4770      	bx	lr
	...

000d6078 <srand>:
   d6078:	b538      	push	{r3, r4, r5, lr}
   d607a:	4b12      	ldr	r3, [pc, #72]	; (d60c4 <srand+0x4c>)
   d607c:	681c      	ldr	r4, [r3, #0]
   d607e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6080:	4605      	mov	r5, r0
   d6082:	b9d3      	cbnz	r3, d60ba <srand+0x42>
   d6084:	2018      	movs	r0, #24
   d6086:	f7fe fd5b 	bl	d4b40 <malloc>
   d608a:	f243 330e 	movw	r3, #13070	; 0x330e
   d608e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6090:	8003      	strh	r3, [r0, #0]
   d6092:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6096:	8043      	strh	r3, [r0, #2]
   d6098:	f241 2334 	movw	r3, #4660	; 0x1234
   d609c:	8083      	strh	r3, [r0, #4]
   d609e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d60a2:	80c3      	strh	r3, [r0, #6]
   d60a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d60a8:	8103      	strh	r3, [r0, #8]
   d60aa:	2305      	movs	r3, #5
   d60ac:	8143      	strh	r3, [r0, #10]
   d60ae:	230b      	movs	r3, #11
   d60b0:	8183      	strh	r3, [r0, #12]
   d60b2:	2201      	movs	r2, #1
   d60b4:	2300      	movs	r3, #0
   d60b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d60ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60bc:	2200      	movs	r2, #0
   d60be:	611d      	str	r5, [r3, #16]
   d60c0:	615a      	str	r2, [r3, #20]
   d60c2:	bd38      	pop	{r3, r4, r5, pc}
   d60c4:	2003e384 	.word	0x2003e384

000d60c8 <strlen>:
   d60c8:	4603      	mov	r3, r0
   d60ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d60ce:	2a00      	cmp	r2, #0
   d60d0:	d1fb      	bne.n	d60ca <strlen+0x2>
   d60d2:	1a18      	subs	r0, r3, r0
   d60d4:	3801      	subs	r0, #1
   d60d6:	4770      	bx	lr

000d60d8 <dynalib_user>:
   d60d8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d60e8:	0000 0000 6563 736c 7569 0073 3325 312e     ....celsius.%3.1
   d60f8:	2066 6544 7267 6565 2073 0043 6573 736e     f Degrees C.sens
   d6108:	726f 632e 6c65 6973 7375 2928 0000 0000     or.celsius()....

000d6118 <_ZTVN5spark13EthernetClassE>:
	...
   d6120:	4be7 000d 4bdd 000d 4bd3 000d 4bc9 000d     .K...K...K...K..
   d6130:	4bbd 000d 4bb1 000d 4ba5 000d 4b9d 000d     .K...K...K...K..
   d6140:	4b93 000d 4b89 000d 4f45 000d               .K...K..EO..

000d614c <_ZTV7TwoWire>:
	...
   d6154:	4c05 000d 4c4f 000d 4c27 000d 4c07 000d     .L..OL..'L...L..
   d6164:	4c2f 000d 4c37 000d 4c3f 000d 4c47 000d     /L..7L..?L..GL..

000d6174 <_ZTV9IPAddress>:
	...
   d617c:	4c9f 000d 4c91 000d 4c93 000d 0066 6e6c     .L...L...L..f.ln
   d618c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d619c:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d61ac:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d61bc:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d61cc:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d61dc:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d61ec:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d61fc:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d620c:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d621c:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d622c:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d623c:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d624c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d625c:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d626c <_ZTVN5spark9MeshClassE>:
	...
   d6274:	4de3 000d 4dd9 000d 4dcf 000d 4dc5 000d     .M...M...M...M..
   d6284:	4db9 000d 4dad 000d 4da1 000d 4d99 000d     .M...M...M...M..
   d6294:	4d8f 000d 4d85 000d 4f45 000d               .M...M..EO..

000d62a0 <_ZTVN5spark12NetworkClassE>:
	...
   d62a8:	4edd 000d 4ee7 000d 4ef1 000d 4efb 000d     .N...N...N...N..
   d62b8:	4f05 000d 4f11 000d 4f1d 000d 4f29 000d     .O...O...O..)O..
   d62c8:	4f31 000d 4f3b 000d 4f45 000d               1O..;O..EO..

000d62d4 <_ZTV8SPIClass>:
	...
   d62dc:	5105 000d 5107 000d 005a 2b25 3330 3a64     .Q...Q..Z.%+03d:
   d62ec:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d62fc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d630c:	0000 0000                                   ....

000d6310 <_ZTV11USARTSerial>:
	...
   d6318:	5171 000d 5195 000d 51a1 000d 5025 000d     qQ...Q...Q..%P..
   d6328:	517d 000d 5189 000d 5183 000d 518f 000d     }Q...Q...Q...Q..
   d6338:	5173 000d 5177 000d                         sQ..wQ..

000d6340 <_ZTV9USBSerial>:
	...
   d6348:	5249 000d 528d 000d 5267 000d 5025 000d     IR...R..gR..%P..
   d6358:	5261 000d 524b 000d 5253 000d 5287 000d     aR..KR..SR...R..
   d6368:	525b 000d 5245 000d                         [R..ER..

000d6370 <_ZTVN5spark9WiFiClassE>:
	...
   d6378:	5383 000d 5379 000d 536f 000d 5325 000d     .S..yS..oS..%S..
   d6388:	5363 000d 5357 000d 534b 000d 5343 000d     cS..WS..KS..CS..
   d6398:	5339 000d 532f 000d 4f45 000d               9S../S..EO..

000d63a4 <__sf_fake_stdin>:
	...

000d63c4 <__sf_fake_stdout>:
	...

000d63e4 <__sf_fake_stderr>:
	...

000d6404 <link_const_variable_data_end>:
   d6404:	000d4125 	.word	0x000d4125
   d6408:	000d4149 	.word	0x000d4149
   d640c:	000d43bf 	.word	0x000d43bf
   d6410:	000d47a1 	.word	0x000d47a1
   d6414:	000d47b1 	.word	0x000d47b1
   d6418:	000d47b5 	.word	0x000d47b5
   d641c:	000d4bf1 	.word	0x000d4bf1
   d6420:	000d4d75 	.word	0x000d4d75
   d6424:	000d4e91 	.word	0x000d4e91
   d6428:	000d5011 	.word	0x000d5011
   d642c:	000d50e9 	.word	0x000d50e9
   d6430:	000d5145 	.word	0x000d5145
   d6434:	000d515d 	.word	0x000d515d
   d6438:	000d538d 	.word	0x000d538d
   d643c:	000d5521 	.word	0x000d5521
   d6440:	000d5571 	.word	0x000d5571
   d6444:	000d5635 	.word	0x000d5635
   d6448:	000d56b9 	.word	0x000d56b9
   d644c:	000d573d 	.word	0x000d573d
