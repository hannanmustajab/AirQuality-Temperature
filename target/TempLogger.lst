
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/TempLogger/target/TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004658  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000188bc  2**0
                  CONTENTS
  3 .data         00000220  2003e0bc  000d8670  0000e0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000514  2003e2dc  2003e2dc  0001e2dc  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d8890  000d8890  00018890  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d88b8  000d88b8  000188b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000cffb1  00000000  00000000  000188bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001233b  00000000  00000000  000e886d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001683a  00000000  00000000  000faba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002290  00000000  00000000  001113e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003840  00000000  00000000  00113672  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00035c81  00000000  00000000  00116eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002bac9  00000000  00000000  0014cb33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e1c96  00000000  00000000  001785fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c50c  00000000  00000000  0025a294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	04 7f 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 faa5 	bl	d757c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 faaa 	bl	d7592 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e0bc 	.word	0x2003e0bc
   d4048:	000d8670 	.word	0x000d8670
   d404c:	2003e2dc 	.word	0x2003e2dc
   d4050:	2003e2dc 	.word	0x2003e2dc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fb71 	bl	d6740 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8670 	.word	0x000d8670
   d4080:	000d8630 	.word	0x000d8630

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbea 	b.w	d485c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa4f 	bl	d452c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bb23 	b.w	d66dc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b9d9 	b.w	d544c <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b9df 	b.w	d545c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b9dd 	b.w	d545c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d002      	beq.n	d40bc <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40ba:	e004      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40bc:	6001      	str	r1, [r0, #0]
	      break;
   d40be:	e002      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c0:	680b      	ldr	r3, [r1, #0]
   d40c2:	b100      	cbz	r0, d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c6:	2000      	movs	r0, #0
   d40c8:	4770      	bx	lr

000d40ca <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40cc:	6804      	ldr	r4, [r0, #0]
   d40ce:	4668      	mov	r0, sp
   d40d0:	f001 ffbd 	bl	d604e <_ZN6StringC1EOS_>
   d40d4:	4668      	mov	r0, sp
   d40d6:	47a0      	blx	r4
   d40d8:	4604      	mov	r4, r0
   d40da:	4668      	mov	r0, sp
   d40dc:	f001 ffc7 	bl	d606e <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e0:	4620      	mov	r0, r4
   d40e2:	b004      	add	sp, #16
   d40e4:	bd10      	pop	{r4, pc}

000d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40ec:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ee:	f88d 3000 	strb.w	r3, [sp]
   d40f2:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f4:	4605      	mov	r5, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f6:	f001 fb67 	bl	d57c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
   d40fa:	4628      	mov	r0, r5
   d40fc:	b003      	add	sp, #12
   d40fe:	bd30      	pop	{r4, r5, pc}

000d4100 <_Z20PublishDelayFunctionv>:
}

// Function to create a delay in the publish time
bool PublishDelayFunction()

{
   d4100:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= updateRate)
   d4102:	4c08      	ldr	r4, [pc, #32]	; (d4124 <_Z20PublishDelayFunctionv+0x24>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4104:	f000 ff96 	bl	d5034 <HAL_Timer_Get_Milli_Seconds>
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	1ac0      	subs	r0, r0, r3
   d410c:	4b06      	ldr	r3, [pc, #24]	; (d4128 <_Z20PublishDelayFunctionv+0x28>)
   d410e:	681b      	ldr	r3, [r3, #0]
   d4110:	4298      	cmp	r0, r3
   d4112:	d904      	bls.n	d411e <_Z20PublishDelayFunctionv+0x1e>
   d4114:	f000 ff8e 	bl	d5034 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else
  {
    tstamp = millis();
   d4118:	6020      	str	r0, [r4, #0]
   d411a:	2001      	movs	r0, #1
   d411c:	bd10      	pop	{r4, pc}
bool PublishDelayFunction()

{
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= updateRate)
    return 0;
   d411e:	2000      	movs	r0, #0
  else
  {
    tstamp = millis();
    return 1;
  }
}
   d4120:	bd10      	pop	{r4, pc}
   d4122:	bf00      	nop
   d4124:	2003e2fc 	.word	0x2003e2fc
   d4128:	2003e220 	.word	0x2003e220

000d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d412c:	b508      	push	{r3, lr}
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d412e:	f7ff ffe7 	bl	d4100 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4132:	b118      	cbz	r0, d413c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4138:	f7ff bfe2 	b.w	d4100 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d413c:	f001 f8f6 	bl	d532c <spark_process>
   d4140:	e7f5      	b.n	d412e <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39+0x2>
	...

000d4144 <_Z17getSignalStrengthv>:
  }
}

// Functions for mobile app reporting.
void getSignalStrength()
{
   d4144:	b500      	push	{lr}
   d4146:	b08d      	sub	sp, #52	; 0x34
  WiFiSignal sig = WiFi.RSSI();
   d4148:	490a      	ldr	r1, [pc, #40]	; (d4174 <_Z17getSignalStrengthv+0x30>)
   d414a:	a803      	add	r0, sp, #12
   d414c:	f002 fa6c 	bl	d6628 <_ZN5spark9WiFiClass4RSSIEv>
  float rssi = sig.getStrength();
   d4150:	a803      	add	r0, sp, #12
   d4152:	f002 fa2f 	bl	d65b4 <_ZNK10WiFiSignal11getStrengthEv>
  snprintf(signalString, sizeof(signalString), "%.0f%%", rssi);
   d4156:	ee10 0a10 	vmov	r0, s0
   d415a:	f002 fe4f 	bl	d6dfc <__aeabi_f2d>
   d415e:	4a06      	ldr	r2, [pc, #24]	; (d4178 <_Z17getSignalStrengthv+0x34>)
   d4160:	e9cd 0100 	strd	r0, r1, [sp]
   d4164:	2110      	movs	r1, #16
   d4166:	4805      	ldr	r0, [pc, #20]	; (d417c <_Z17getSignalStrengthv+0x38>)
   d4168:	f001 f990 	bl	d548c <snprintf>
}
   d416c:	b00d      	add	sp, #52	; 0x34
   d416e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4172:	bf00      	nop
   d4174:	2003e6e0 	.word	0x2003e6e0
   d4178:	000d7f1e 	.word	0x000d7f1e
   d417c:	2003e340 	.word	0x2003e340

000d4180 <_Z16getBatteryChargev>:

void getBatteryCharge()
{
   d4180:	b507      	push	{r0, r1, r2, lr}
  voltage = analogRead(BATT) * 0.0011224;
   d4182:	2021      	movs	r0, #33	; 0x21
   d4184:	f002 fb2b 	bl	d67de <analogRead>
   d4188:	f002 fe26 	bl	d6dd8 <__aeabi_i2d>
   d418c:	a30d      	add	r3, pc, #52	; (adr r3, d41c4 <_Z16getBatteryChargev+0x44>)
   d418e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4192:	f002 fe87 	bl	d6ea4 <__aeabi_dmul>
   d4196:	f003 f897 	bl	d72c8 <__aeabi_d2f>
   d419a:	4b07      	ldr	r3, [pc, #28]	; (d41b8 <_Z16getBatteryChargev+0x38>)
   d419c:	6018      	str	r0, [r3, #0]
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d419e:	f002 fe2d 	bl	d6dfc <__aeabi_f2d>
   d41a2:	4a06      	ldr	r2, [pc, #24]	; (d41bc <_Z16getBatteryChargev+0x3c>)
   d41a4:	e9cd 0100 	strd	r0, r1, [sp]
   d41a8:	2110      	movs	r1, #16
   d41aa:	4805      	ldr	r0, [pc, #20]	; (d41c0 <_Z16getBatteryChargev+0x40>)
   d41ac:	f001 f96e 	bl	d548c <snprintf>
}
   d41b0:	b003      	add	sp, #12
   d41b2:	f85d fb04 	ldr.w	pc, [sp], #4
   d41b6:	bf00      	nop
   d41b8:	2003e35c 	.word	0x2003e35c
   d41bc:	000d7f25 	.word	0x000d7f25
   d41c0:	2003e360 	.word	0x2003e360
   d41c4:	d2c10294 	.word	0xd2c10294
   d41c8:	3f5263af 	.word	0x3f5263af

000d41cc <_Z14getTemperaturev>:
    return 0; // Less than 1 degree difference detected
}

// Function to get temperature value from DS18B20.
bool getTemperature()
{
   d41cc:	b513      	push	{r0, r1, r4, lr}
  static float lastTemperatureInC = 0;
  if (sensor.read())
   d41ce:	4813      	ldr	r0, [pc, #76]	; (d421c <_Z14getTemperaturev+0x50>)
   d41d0:	4c13      	ldr	r4, [pc, #76]	; (d4220 <_Z14getTemperaturev+0x54>)
   d41d2:	f000 fcd7 	bl	d4b84 <_ZN4DS184readEv>
   d41d6:	b178      	cbz	r0, d41f8 <_Z14getTemperaturev+0x2c>
  {
    temperatureInC = sensor.celsius();
   d41d8:	4810      	ldr	r0, [pc, #64]	; (d421c <_Z14getTemperaturev+0x50>)
   d41da:	f000 fcf7 	bl	d4bcc <_ZN4DS187celsiusEv>
   d41de:	ee10 0a10 	vmov	r0, s0
   d41e2:	ed84 0a00 	vstr	s0, [r4]
    snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", temperatureInC);
   d41e6:	f002 fe09 	bl	d6dfc <__aeabi_f2d>
   d41ea:	4a0e      	ldr	r2, [pc, #56]	; (d4224 <_Z14getTemperaturev+0x58>)
   d41ec:	e9cd 0100 	strd	r0, r1, [sp]
   d41f0:	2110      	movs	r1, #16
   d41f2:	480d      	ldr	r0, [pc, #52]	; (d4228 <_Z14getTemperaturev+0x5c>)
   d41f4:	f001 f94a 	bl	d548c <snprintf>
  }
  if (abs(temperatureInC - lastTemperatureInC) >= 1)
   d41f8:	4b0c      	ldr	r3, [pc, #48]	; (d422c <_Z14getTemperaturev+0x60>)
   d41fa:	ed94 7a00 	vldr	s14, [r4]
   d41fe:	edd3 7a00 	vldr	s15, [r3]
   d4202:	ee77 7a67 	vsub.f32	s15, s14, s15
   d4206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d420a:	ee17 0a90 	vmov	r0, s15
   d420e:	b110      	cbz	r0, d4216 <_Z14getTemperaturev+0x4a>
  {
    lastTemperatureInC = temperatureInC;
   d4210:	ed83 7a00 	vstr	s14, [r3]
    return 1;
   d4214:	2001      	movs	r0, #1
  }
  else
    return 0;
}
   d4216:	b002      	add	sp, #8
   d4218:	bd10      	pop	{r4, pc}
   d421a:	bf00      	nop
   d421c:	2003e314 	.word	0x2003e314
   d4220:	2003e2f8 	.word	0x2003e2f8
   d4224:	000d7f2d 	.word	0x000d7f2d
   d4228:	2003e2e0 	.word	0x2003e2e0
   d422c:	2003e2f4 	.word	0x2003e2f4

000d4230 <_Z15getMeasurementsv>:
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}

bool getMeasurements()
{
   d4230:	b508      	push	{r3, lr}
  getSignalStrength(); // Get Signal Strength
   d4232:	f7ff ff87 	bl	d4144 <_Z17getSignalStrengthv>
  getBatteryCharge();  // Get Battery Charge Percentage
   d4236:	f7ff ffa3 	bl	d4180 <_Z16getBatteryChargev>
  if (getTemperature())
    return 1; // Read Temperature from Sensor
  else
    return 0; // Less than 1 degree difference detected
}
   d423a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

bool getMeasurements()
{
  getSignalStrength(); // Get Signal Strength
  getBatteryCharge();  // Get Battery Charge Percentage
  if (getTemperature())
   d423e:	f7ff bfc5 	b.w	d41cc <_Z14getTemperaturev>
	...

000d4244 <_Z12adaptiveModev>:
}

// Adaptive Mode Function

bool adaptiveMode()
{
   d4244:	b510      	push	{r4, lr}
  if ((Time.hour() == 5) || (Time.hour() == 6) || (Time.hour() == 0) || (Time.hour() == 1))
   d4246:	f002 f80b 	bl	d6260 <_ZN9TimeClass4hourEv>
   d424a:	2805      	cmp	r0, #5
   d424c:	4c08      	ldr	r4, [pc, #32]	; (d4270 <_Z12adaptiveModev+0x2c>)
   d424e:	d00a      	beq.n	d4266 <_Z12adaptiveModev+0x22>
   d4250:	f002 f806 	bl	d6260 <_ZN9TimeClass4hourEv>
   d4254:	2806      	cmp	r0, #6
   d4256:	d006      	beq.n	d4266 <_Z12adaptiveModev+0x22>
   d4258:	f002 f802 	bl	d6260 <_ZN9TimeClass4hourEv>
   d425c:	b118      	cbz	r0, d4266 <_Z12adaptiveModev+0x22>
   d425e:	f001 ffff 	bl	d6260 <_ZN9TimeClass4hourEv>
   d4262:	2801      	cmp	r0, #1
   d4264:	d101      	bne.n	d426a <_Z12adaptiveModev+0x26>
  {
    adaptiveModeOn = true;
   d4266:	2001      	movs	r0, #1
   d4268:	e000      	b.n	d426c <_Z12adaptiveModev+0x28>
    return 1;
  }

  else
  {
    adaptiveModeOn = false;
   d426a:	2000      	movs	r0, #0
   d426c:	7020      	strb	r0, [r4, #0]
    return 0;
  }
   d426e:	bd10      	pop	{r4, pc}
   d4270:	2003e371 	.word	0x2003e371

000d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4274:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4276:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4278:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d427a:	b17c      	cbz	r4, d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d427c:	6863      	ldr	r3, [r4, #4]
   d427e:	3b01      	subs	r3, #1
   d4280:	6063      	str	r3, [r4, #4]
   d4282:	b95b      	cbnz	r3, d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4284:	6823      	ldr	r3, [r4, #0]
   d4286:	4620      	mov	r0, r4
   d4288:	689b      	ldr	r3, [r3, #8]
   d428a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d428c:	68a3      	ldr	r3, [r4, #8]
   d428e:	3b01      	subs	r3, #1
   d4290:	60a3      	str	r3, [r4, #8]
   d4292:	b91b      	cbnz	r3, d429c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4294:	6823      	ldr	r3, [r4, #0]
   d4296:	4620      	mov	r0, r4
   d4298:	68db      	ldr	r3, [r3, #12]
   d429a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d429c:	4628      	mov	r0, r5
   d429e:	bd38      	pop	{r3, r4, r5, pc}

000d42a0 <_Z13forcedReading6String>:

/* The forced Reading function takes in two arguments,
 If it is "1" then it turns the 
 forcedMode to true and sets a rate of 5 mins.  */
bool forcedReading(String Command)
{
   d42a0:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d42a2:	4914      	ldr	r1, [pc, #80]	; (d42f4 <_Z13forcedReading6String+0x54>)
   d42a4:	b085      	sub	sp, #20
   d42a6:	4605      	mov	r5, r0
   d42a8:	f001 ff3b 	bl	d6122 <_ZNK6String6equalsEPKc>

  if (Command == "1")
   d42ac:	4604      	mov	r4, r0
   d42ae:	b1b0      	cbz	r0, d42de <_Z13forcedReading6String+0x3e>
  {
    state = REPORTING_STATE;
   d42b0:	4b11      	ldr	r3, [pc, #68]	; (d42f8 <_Z13forcedReading6String+0x58>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d42b2:	4912      	ldr	r1, [pc, #72]	; (d42fc <_Z13forcedReading6String+0x5c>)
   d42b4:	2203      	movs	r2, #3
   d42b6:	701a      	strb	r2, [r3, #0]
    forcedReadingRate = 5;
   d42b8:	4b11      	ldr	r3, [pc, #68]	; (d4300 <_Z13forcedReading6String+0x60>)
   d42ba:	2205      	movs	r2, #5
   d42bc:	601a      	str	r2, [r3, #0]
    forcedMode = true;
   d42be:	4b11      	ldr	r3, [pc, #68]	; (d4304 <_Z13forcedReading6String+0x64>)
   d42c0:	2401      	movs	r4, #1
   d42c2:	701c      	strb	r4, [r3, #0]
   d42c4:	4b10      	ldr	r3, [pc, #64]	; (d4308 <_Z13forcedReading6String+0x68>)
   d42c6:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d42c8:	781b      	ldrb	r3, [r3, #0]
   d42ca:	f88d 2000 	strb.w	r2, [sp]
   d42ce:	a802      	add	r0, sp, #8
   d42d0:	4a0e      	ldr	r2, [pc, #56]	; (d430c <_Z13forcedReading6String+0x6c>)
   d42d2:	f7ff ff08 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42d6:	a803      	add	r0, sp, #12
   d42d8:	f7ff ffcc 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42dc:	e006      	b.n	d42ec <_Z13forcedReading6String+0x4c>
   d42de:	490c      	ldr	r1, [pc, #48]	; (d4310 <_Z13forcedReading6String+0x70>)
   d42e0:	4628      	mov	r0, r5
   d42e2:	f001 ff1e 	bl	d6122 <_ZNK6String6equalsEPKc>
    Particle.publish("STATE", "Getting Value, Next Reading in 15 Mins.");
    return 1;
  }

  else if (Command == "0")
   d42e6:	b110      	cbz	r0, d42ee <_Z13forcedReading6String+0x4e>
  {
    forcedMode = false;
   d42e8:	4b06      	ldr	r3, [pc, #24]	; (d4304 <_Z13forcedReading6String+0x64>)
   d42ea:	701c      	strb	r4, [r3, #0]
    return 0;
   d42ec:	4620      	mov	r0, r4
  }
  return 0;
}
   d42ee:	b005      	add	sp, #20
   d42f0:	bd30      	pop	{r4, r5, pc}
   d42f2:	bf00      	nop
   d42f4:	000d824b 	.word	0x000d824b
   d42f8:	2003e304 	.word	0x2003e304
   d42fc:	000d7f65 	.word	0x000d7f65
   d4300:	2003e0bc 	.word	0x2003e0bc
   d4304:	2003e358 	.word	0x2003e358
   d4308:	2003e2f0 	.word	0x2003e2f0
   d430c:	000d7f3d 	.word	0x000d7f3d
   d4310:	000d7f6b 	.word	0x000d7f6b

000d4314 <_Z14SetVerboseMode6String>:
    return 0;
}

// Function to Toggle VerboseMode.
bool SetVerboseMode(String command)
{
   d4314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4316:	4929      	ldr	r1, [pc, #164]	; (d43bc <_Z14SetVerboseMode6String+0xa8>)
   d4318:	4605      	mov	r5, r0
   d431a:	f001 ff02 	bl	d6122 <_ZNK6String6equalsEPKc>

  if (command == "1" && verboseMode == false)
   d431e:	b110      	cbz	r0, d4326 <_Z14SetVerboseMode6String+0x12>
   d4320:	4b27      	ldr	r3, [pc, #156]	; (d43c0 <_Z14SetVerboseMode6String+0xac>)
   d4322:	781e      	ldrb	r6, [r3, #0]
   d4324:	b186      	cbz	r6, d4348 <_Z14SetVerboseMode6String+0x34>
   d4326:	4925      	ldr	r1, [pc, #148]	; (d43bc <_Z14SetVerboseMode6String+0xa8>)
   d4328:	4628      	mov	r0, r5
   d432a:	f001 fefa 	bl	d6122 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
    return 1;
  }

  if (command == "1" && verboseMode == true)
   d432e:	b1a8      	cbz	r0, d435c <_Z14SetVerboseMode6String+0x48>
   d4330:	4b23      	ldr	r3, [pc, #140]	; (d43c0 <_Z14SetVerboseMode6String+0xac>)
   d4332:	781b      	ldrb	r3, [r3, #0]
   d4334:	b193      	cbz	r3, d435c <_Z14SetVerboseMode6String+0x48>
  {
    waitUntil(PublishDelayFunction);
   d4336:	f7ff fef9 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d433a:	4b22      	ldr	r3, [pc, #136]	; (d43c4 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
   d433c:	4a22      	ldr	r2, [pc, #136]	; (d43c8 <_Z14SetVerboseMode6String+0xb4>)
   d433e:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4340:	2400      	movs	r4, #0
   d4342:	f88d 4000 	strb.w	r4, [sp]
   d4346:	e02e      	b.n	d43a6 <_Z14SetVerboseMode6String+0x92>
bool SetVerboseMode(String command)
{

  if (command == "1" && verboseMode == false)
  {
    verboseMode = true;
   d4348:	2401      	movs	r4, #1
   d434a:	701c      	strb	r4, [r3, #0]
    waitUntil(PublishDelayFunction);
   d434c:	f7ff feee 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d4350:	4b1c      	ldr	r3, [pc, #112]	; (d43c4 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
   d4352:	4a1e      	ldr	r2, [pc, #120]	; (d43cc <_Z14SetVerboseMode6String+0xb8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4354:	781b      	ldrb	r3, [r3, #0]
   d4356:	f88d 6000 	strb.w	r6, [sp]
   d435a:	e024      	b.n	d43a6 <_Z14SetVerboseMode6String+0x92>
   d435c:	491c      	ldr	r1, [pc, #112]	; (d43d0 <_Z14SetVerboseMode6String+0xbc>)
   d435e:	4628      	mov	r0, r5
   d4360:	f001 fedf 	bl	d6122 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
    return 0;
  }

  if (command == "0" && verboseMode == true)
   d4364:	b160      	cbz	r0, d4380 <_Z14SetVerboseMode6String+0x6c>
   d4366:	4b16      	ldr	r3, [pc, #88]	; (d43c0 <_Z14SetVerboseMode6String+0xac>)
   d4368:	781c      	ldrb	r4, [r3, #0]
   d436a:	b14c      	cbz	r4, d4380 <_Z14SetVerboseMode6String+0x6c>
  {
    verboseMode = false;
   d436c:	2500      	movs	r5, #0
   d436e:	701d      	strb	r5, [r3, #0]
    waitUntil(PublishDelayFunction);
   d4370:	f7ff fedc 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d4374:	4b13      	ldr	r3, [pc, #76]	; (d43c4 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Stopped.", PRIVATE);
   d4376:	4a17      	ldr	r2, [pc, #92]	; (d43d4 <_Z14SetVerboseMode6String+0xc0>)
   d4378:	781b      	ldrb	r3, [r3, #0]
   d437a:	f88d 5000 	strb.w	r5, [sp]
   d437e:	e012      	b.n	d43a6 <_Z14SetVerboseMode6String+0x92>
   d4380:	4913      	ldr	r1, [pc, #76]	; (d43d0 <_Z14SetVerboseMode6String+0xbc>)
   d4382:	4628      	mov	r0, r5
   d4384:	f001 fecd 	bl	d6122 <_ZNK6String6equalsEPKc>
    return 1;
  }

  if (command == "0" && verboseMode == false)
   d4388:	b120      	cbz	r0, d4394 <_Z14SetVerboseMode6String+0x80>
   d438a:	4b0d      	ldr	r3, [pc, #52]	; (d43c0 <_Z14SetVerboseMode6String+0xac>)
   d438c:	781c      	ldrb	r4, [r3, #0]
   d438e:	b11c      	cbz	r4, d4398 <_Z14SetVerboseMode6String+0x84>
    return 0;
  }

  else
  {
    return 0;
   d4390:	2400      	movs	r4, #0
   d4392:	e00f      	b.n	d43b4 <_Z14SetVerboseMode6String+0xa0>
   d4394:	4604      	mov	r4, r0
   d4396:	e00d      	b.n	d43b4 <_Z14SetVerboseMode6String+0xa0>
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d4398:	f7ff fec8 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d439c:	4b09      	ldr	r3, [pc, #36]	; (d43c4 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
   d439e:	4a0e      	ldr	r2, [pc, #56]	; (d43d8 <_Z14SetVerboseMode6String+0xc4>)
   d43a0:	781b      	ldrb	r3, [r3, #0]
   d43a2:	f88d 4000 	strb.w	r4, [sp]
   d43a6:	a802      	add	r0, sp, #8
   d43a8:	490c      	ldr	r1, [pc, #48]	; (d43dc <_Z14SetVerboseMode6String+0xc8>)
   d43aa:	f7ff fe9c 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d43ae:	a803      	add	r0, sp, #12
   d43b0:	f7ff ff60 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  else
  {
    return 0;
  }
}
   d43b4:	4620      	mov	r0, r4
   d43b6:	b004      	add	sp, #16
   d43b8:	bd70      	pop	{r4, r5, r6, pc}
   d43ba:	bf00      	nop
   d43bc:	000d824b 	.word	0x000d824b
   d43c0:	2003e351 	.word	0x2003e351
   d43c4:	2003e370 	.word	0x2003e370
   d43c8:	000d7f83 	.word	0x000d7f83
   d43cc:	000d7f6d 	.word	0x000d7f6d
   d43d0:	000d7f6b 	.word	0x000d7f6b
   d43d4:	000d7f9c 	.word	0x000d7f9c
   d43d8:	000d7fb2 	.word	0x000d7fb2
   d43dc:	000d8155 	.word	0x000d8155

000d43e0 <_Z11sendUBIDotsv>:

void sendUBIDots()
{
   d43e0:	b500      	push	{lr}
  char data[256];
  snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", temperatureInC, voltage);
   d43e2:	4b18      	ldr	r3, [pc, #96]	; (d4444 <_Z11sendUBIDotsv+0x64>)
    return 0;
  }
}

void sendUBIDots()
{
   d43e4:	b0c7      	sub	sp, #284	; 0x11c
  char data[256];
  snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", temperatureInC, voltage);
   d43e6:	6818      	ldr	r0, [r3, #0]
   d43e8:	f002 fd08 	bl	d6dfc <__aeabi_f2d>
   d43ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43f0:	4b15      	ldr	r3, [pc, #84]	; (d4448 <_Z11sendUBIDotsv+0x68>)
   d43f2:	6818      	ldr	r0, [r3, #0]
   d43f4:	f002 fd02 	bl	d6dfc <__aeabi_f2d>
   d43f8:	4a14      	ldr	r2, [pc, #80]	; (d444c <_Z11sendUBIDotsv+0x6c>)
   d43fa:	e9cd 0100 	strd	r0, r1, [sp]
   d43fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4402:	a806      	add	r0, sp, #24
   d4404:	f001 f842 	bl	d548c <snprintf>
   d4408:	4b11      	ldr	r3, [pc, #68]	; (d4450 <_Z11sendUBIDotsv+0x70>)
  Particle.publish("Air-Quality-Hook", data, PRIVATE);
   d440a:	4912      	ldr	r1, [pc, #72]	; (d4454 <_Z11sendUBIDotsv+0x74>)
   d440c:	781b      	ldrb	r3, [r3, #0]
   d440e:	2200      	movs	r2, #0
   d4410:	f88d 2000 	strb.w	r2, [sp]
   d4414:	a804      	add	r0, sp, #16
   d4416:	aa06      	add	r2, sp, #24
   d4418:	f7ff fe65 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d441c:	a805      	add	r0, sp, #20
   d441e:	f7ff ff29 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  publishTime = Time.minute();
   d4422:	f001 ff27 	bl	d6274 <_ZN9TimeClass6minuteEv>
  publishTimeHour = Time.hour();
   d4426:	f001 ff1b 	bl	d6260 <_ZN9TimeClass4hourEv>
   d442a:	4b0b      	ldr	r3, [pc, #44]	; (d4458 <_Z11sendUBIDotsv+0x78>)
   d442c:	6018      	str	r0, [r3, #0]
   d442e:	f000 fe01 	bl	d5034 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4432:	4b0a      	ldr	r3, [pc, #40]	; (d445c <_Z11sendUBIDotsv+0x7c>)
   d4434:	6018      	str	r0, [r3, #0]
  inTransit = true;
   d4436:	4b0a      	ldr	r3, [pc, #40]	; (d4460 <_Z11sendUBIDotsv+0x80>)
   d4438:	2201      	movs	r2, #1
   d443a:	701a      	strb	r2, [r3, #0]
}
   d443c:	b047      	add	sp, #284	; 0x11c
   d443e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4442:	bf00      	nop
   d4444:	2003e35c 	.word	0x2003e35c
   d4448:	2003e2f8 	.word	0x2003e2f8
   d444c:	000d7fcc 	.word	0x000d7fcc
   d4450:	2003e370 	.word	0x2003e370
   d4454:	000d7ff3 	.word	0x000d7ff3
   d4458:	2003e30c 	.word	0x2003e30c
   d445c:	2003e354 	.word	0x2003e354
   d4460:	2003e305 	.word	0x2003e305

000d4464 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d4464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data)
   d4466:	460c      	mov	r4, r1
   d4468:	4e12      	ldr	r6, [pc, #72]	; (d44b4 <_Z14UbidotsHandlerPKcS0_+0x50>)
   d446a:	b921      	cbnz	r1, d4476 <_Z14UbidotsHandlerPKcS0_+0x12>
   d446c:	7833      	ldrb	r3, [r6, #0]
  { // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d446e:	f88d 1000 	strb.w	r1, [sp]
   d4472:	4a11      	ldr	r2, [pc, #68]	; (d44b8 <_Z14UbidotsHandlerPKcS0_+0x54>)
   d4474:	e015      	b.n	d44a2 <_Z14UbidotsHandlerPKcS0_+0x3e>
    return;
  }
  int responseCode = atoi(data); // Response is only a single number thanks to Template
   d4476:	4608      	mov	r0, r1
   d4478:	f002 ff76 	bl	d7368 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d447c:	38c8      	subs	r0, #200	; 0xc8
   d447e:	2500      	movs	r5, #0
   d4480:	2801      	cmp	r0, #1
   d4482:	7833      	ldrb	r3, [r6, #0]
  {
    Particle.publish("State", "Response Received", PRIVATE);
   d4484:	f88d 5000 	strb.w	r5, [sp]
  { // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
  }
  int responseCode = atoi(data); // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d4488:	d80a      	bhi.n	d44a0 <_Z14UbidotsHandlerPKcS0_+0x3c>
  {
    Particle.publish("State", "Response Received", PRIVATE);
   d448a:	4a0c      	ldr	r2, [pc, #48]	; (d44bc <_Z14UbidotsHandlerPKcS0_+0x58>)
   d448c:	490c      	ldr	r1, [pc, #48]	; (d44c0 <_Z14UbidotsHandlerPKcS0_+0x5c>)
   d448e:	a802      	add	r0, sp, #8
   d4490:	f7ff fe29 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d4494:	a803      	add	r0, sp, #12
   d4496:	f7ff feed 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    inTransit = false; // Data has been received
   d449a:	4b0a      	ldr	r3, [pc, #40]	; (d44c4 <_Z14UbidotsHandlerPKcS0_+0x60>)
   d449c:	701d      	strb	r5, [r3, #0]
   d449e:	e007      	b.n	d44b0 <_Z14UbidotsHandlerPKcS0_+0x4c>
  }
  else
    Particle.publish("Ubidots Hook", data, PRIVATE); // Publish the response code
   d44a0:	4622      	mov	r2, r4
   d44a2:	a802      	add	r0, sp, #8
   d44a4:	4908      	ldr	r1, [pc, #32]	; (d44c8 <_Z14UbidotsHandlerPKcS0_+0x64>)
   d44a6:	f7ff fe1e 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d44aa:	a803      	add	r0, sp, #12
   d44ac:	f7ff fee2 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d44b0:	b004      	add	sp, #16
   d44b2:	bd70      	pop	{r4, r5, r6, pc}
   d44b4:	2003e370 	.word	0x2003e370
   d44b8:	000d8004 	.word	0x000d8004
   d44bc:	000d8019 	.word	0x000d8019
   d44c0:	000d802b 	.word	0x000d802b
   d44c4:	2003e305 	.word	0x2003e305
   d44c8:	000d800c 	.word	0x000d800c

000d44cc <_Z15transitionStatev>:

void transitionState(void)
{                                 // This function publishes change of state.
   d44cc:	b530      	push	{r4, r5, lr}
  char stateTransitionString[64]; // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d44ce:	4d11      	ldr	r5, [pc, #68]	; (d4514 <_Z15transitionStatev+0x48>)
   d44d0:	4c11      	ldr	r4, [pc, #68]	; (d4518 <_Z15transitionStatev+0x4c>)
   d44d2:	4912      	ldr	r1, [pc, #72]	; (d451c <_Z15transitionStatev+0x50>)
   d44d4:	782a      	ldrb	r2, [r5, #0]
   d44d6:	7820      	ldrb	r0, [r4, #0]
  else
    Particle.publish("Ubidots Hook", data, PRIVATE); // Publish the response code
}

void transitionState(void)
{                                 // This function publishes change of state.
   d44d8:	b095      	sub	sp, #84	; 0x54
  char stateTransitionString[64]; // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d44da:	232c      	movs	r3, #44	; 0x2c
   d44dc:	fb03 1202 	mla	r2, r3, r2, r1
   d44e0:	9200      	str	r2, [sp, #0]
   d44e2:	fb03 1300 	mla	r3, r3, r0, r1
   d44e6:	4a0e      	ldr	r2, [pc, #56]	; (d4520 <_Z15transitionStatev+0x54>)
   d44e8:	2140      	movs	r1, #64	; 0x40
   d44ea:	a804      	add	r0, sp, #16
   d44ec:	f000 ffce 	bl	d548c <snprintf>
  oldState = state;
   d44f0:	782b      	ldrb	r3, [r5, #0]
   d44f2:	7023      	strb	r3, [r4, #0]
   d44f4:	4b0b      	ldr	r3, [pc, #44]	; (d4524 <_Z15transitionStatev+0x58>)
  Particle.publish("State", stateTransitionString, PRIVATE);
   d44f6:	490c      	ldr	r1, [pc, #48]	; (d4528 <_Z15transitionStatev+0x5c>)
   d44f8:	781b      	ldrb	r3, [r3, #0]
   d44fa:	2200      	movs	r2, #0
   d44fc:	f88d 2000 	strb.w	r2, [sp]
   d4500:	a802      	add	r0, sp, #8
   d4502:	aa04      	add	r2, sp, #16
   d4504:	f7ff fdef 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d4508:	a803      	add	r0, sp, #12
   d450a:	f7ff feb3 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d450e:	b015      	add	sp, #84	; 0x54
   d4510:	bd30      	pop	{r4, r5, pc}
   d4512:	bf00      	nop
   d4514:	2003e304 	.word	0x2003e304
   d4518:	2003e350 	.word	0x2003e350
   d451c:	2003e0c0 	.word	0x2003e0c0
   d4520:	000d8031 	.word	0x000d8031
   d4524:	2003e370 	.word	0x2003e370
   d4528:	000d802b 	.word	0x000d802b

000d452c <loop>:

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
}

void loop()
{
   d452c:	b5f0      	push	{r4, r5, r6, r7, lr}

  switch (state) // In the main loop, all code execution must take place in a defined state
   d452e:	4c90      	ldr	r4, [pc, #576]	; (d4770 <loop+0x244>)
   d4530:	7823      	ldrb	r3, [r4, #0]
   d4532:	3b01      	subs	r3, #1

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
}

void loop()
{
   d4534:	b085      	sub	sp, #20

  switch (state) // In the main loop, all code execution must take place in a defined state
   d4536:	2b04      	cmp	r3, #4
   d4538:	f200 8118 	bhi.w	d476c <loop+0x240>
   d453c:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4540:	001b0005 	.word	0x001b0005
   d4544:	00920061 	.word	0x00920061
   d4548:	00c4      	.short	0x00c4

  {
  case IDLE_STATE: // IDLE State.
    if (verboseMode && oldState != state)
   d454a:	4b8a      	ldr	r3, [pc, #552]	; (d4774 <loop+0x248>)
   d454c:	781b      	ldrb	r3, [r3, #0]
   d454e:	b12b      	cbz	r3, d455c <loop+0x30>
   d4550:	4b89      	ldr	r3, [pc, #548]	; (d4778 <loop+0x24c>)
   d4552:	781b      	ldrb	r3, [r3, #0]
   d4554:	2b01      	cmp	r3, #1
   d4556:	d001      	beq.n	d455c <loop+0x30>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d4558:	f7ff ffb8 	bl	d44cc <_Z15transitionStatev>
    static unsigned long TimePassed = 0;
    if (Time.minute() - TimePassed >= refreshRate)
   d455c:	4d87      	ldr	r5, [pc, #540]	; (d477c <loop+0x250>)
   d455e:	f001 fe89 	bl	d6274 <_ZN9TimeClass6minuteEv>
   d4562:	682b      	ldr	r3, [r5, #0]
   d4564:	4298      	cmp	r0, r3
   d4566:	f000 8101 	beq.w	d476c <loop+0x240>
    {
      state = MEASURING_STATE;
   d456a:	2302      	movs	r3, #2
   d456c:	7023      	strb	r3, [r4, #0]
      TimePassed = Time.minute();
   d456e:	f001 fe81 	bl	d6274 <_ZN9TimeClass6minuteEv>
   d4572:	6028      	str	r0, [r5, #0]
   d4574:	e0fa      	b.n	d476c <loop+0x240>
  case MEASURING_STATE:

    static unsigned long ForcedValueTimePassed = 0;
    static unsigned long adaptiveValueTimePassed = 0;

    if (verboseMode && oldState != state)
   d4576:	4d7f      	ldr	r5, [pc, #508]	; (d4774 <loop+0x248>)
   d4578:	782b      	ldrb	r3, [r5, #0]
   d457a:	b12b      	cbz	r3, d4588 <loop+0x5c>
   d457c:	4b7e      	ldr	r3, [pc, #504]	; (d4778 <loop+0x24c>)
   d457e:	781b      	ldrb	r3, [r3, #0]
   d4580:	2b02      	cmp	r3, #2
   d4582:	d001      	beq.n	d4588 <loop+0x5c>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d4584:	f7ff ffa2 	bl	d44cc <_Z15transitionStatev>

    // Measuring State.
    if (getMeasurements())
   d4588:	f7ff fe52 	bl	d4230 <_Z15getMeasurementsv>
   d458c:	4606      	mov	r6, r0
   d458e:	b170      	cbz	r0, d45ae <loop+0x82>
    { // Get Measurements and Move to Reporting State if there is a change
      state = REPORTING_STATE;
   d4590:	2303      	movs	r3, #3
   d4592:	7023      	strb	r3, [r4, #0]
      if (verboseMode)
   d4594:	782b      	ldrb	r3, [r5, #0]
   d4596:	2b00      	cmp	r3, #0
   d4598:	f000 80e8 	beq.w	d476c <loop+0x240>
      {
        waitUntil(PublishDelayFunction);
   d459c:	f7ff fdc6 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d45a0:	4b77      	ldr	r3, [pc, #476]	; (d4780 <loop+0x254>)
        Particle.publish("State", "Change detected - Reporting", PRIVATE);
   d45a2:	2200      	movs	r2, #0
   d45a4:	781b      	ldrb	r3, [r3, #0]
   d45a6:	f88d 2000 	strb.w	r2, [sp]
   d45aa:	4a76      	ldr	r2, [pc, #472]	; (d4784 <loop+0x258>)
   d45ac:	e012      	b.n	d45d4 <loop+0xa8>
      }
    }

    else if (Time.hour() != publishTimeHour) // Check if 60 minutes or 1 hr has passed.
   d45ae:	f001 fe57 	bl	d6260 <_ZN9TimeClass4hourEv>
   d45b2:	4b75      	ldr	r3, [pc, #468]	; (d4788 <loop+0x25c>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	4298      	cmp	r0, r3
   d45b8:	d014      	beq.n	d45e4 <loop+0xb8>
    {
      state = REPORTING_STATE;
   d45ba:	2303      	movs	r3, #3
   d45bc:	7023      	strb	r3, [r4, #0]
      if (verboseMode)
   d45be:	782b      	ldrb	r3, [r5, #0]
   d45c0:	2b00      	cmp	r3, #0
   d45c2:	f000 80d3 	beq.w	d476c <loop+0x240>
      {
        waitUntil(PublishDelayFunction);
   d45c6:	f7ff fdb1 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d45ca:	4b6d      	ldr	r3, [pc, #436]	; (d4780 <loop+0x254>)
        Particle.publish("State", "Time Passed - Reporting", PRIVATE); //Tells us that One Hour has passed.
   d45cc:	4a6f      	ldr	r2, [pc, #444]	; (d478c <loop+0x260>)
   d45ce:	781b      	ldrb	r3, [r3, #0]
   d45d0:	f88d 6000 	strb.w	r6, [sp]
   d45d4:	496e      	ldr	r1, [pc, #440]	; (d4790 <loop+0x264>)
   d45d6:	a802      	add	r0, sp, #8
   d45d8:	f7ff fd85 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d45dc:	a803      	add	r0, sp, #12
   d45de:	f7ff fe49 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45e2:	e0c3      	b.n	d476c <loop+0x240>
      }
    }

    // Forced Reading
    /* When the forced reading function is called, it checks if it is turned ON. Then if it is turned ON and 5 minutes have passed, It sends data to the UBIDots cloud by moving to the reporting state.  */
    else if ((forcedMode) && (Time.minute() - ForcedValueTimePassed > forcedReadingRate))
   d45e4:	4b6b      	ldr	r3, [pc, #428]	; (d4794 <loop+0x268>)
   d45e6:	781b      	ldrb	r3, [r3, #0]
   d45e8:	2b00      	cmp	r3, #0
   d45ea:	f000 8097 	beq.w	d471c <loop+0x1f0>
   d45ee:	4f6a      	ldr	r7, [pc, #424]	; (d4798 <loop+0x26c>)
   d45f0:	f001 fe40 	bl	d6274 <_ZN9TimeClass6minuteEv>
   d45f4:	683b      	ldr	r3, [r7, #0]
   d45f6:	1ac0      	subs	r0, r0, r3
   d45f8:	4b68      	ldr	r3, [pc, #416]	; (d479c <loop+0x270>)
   d45fa:	681b      	ldr	r3, [r3, #0]
   d45fc:	4298      	cmp	r0, r3
   d45fe:	d87c      	bhi.n	d46fa <loop+0x1ce>
   d4600:	e08c      	b.n	d471c <loop+0x1f0>
      }
    }
    break;

  case REPORTING_STATE:
    if (verboseMode && oldState != state)
   d4602:	4b5c      	ldr	r3, [pc, #368]	; (d4774 <loop+0x248>)
   d4604:	781a      	ldrb	r2, [r3, #0]
   d4606:	461d      	mov	r5, r3
   d4608:	b12a      	cbz	r2, d4616 <loop+0xea>
   d460a:	4b5b      	ldr	r3, [pc, #364]	; (d4778 <loop+0x24c>)
   d460c:	781b      	ldrb	r3, [r3, #0]
   d460e:	2b03      	cmp	r3, #3
   d4610:	d001      	beq.n	d4616 <loop+0xea>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d4612:	f7ff ff5b 	bl	d44cc <_Z15transitionStatev>

    if (Time.hour() == 12)
   d4616:	f001 fe23 	bl	d6260 <_ZN9TimeClass4hourEv>
   d461a:	280c      	cmp	r0, #12
   d461c:	d102      	bne.n	d4624 <loop+0xf8>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d461e:	2000      	movs	r0, #0
   d4620:	f000 feac 	bl	d537c <spark_sync_time>
      Particle.syncTime(); // SET CLOCK EACH DAY AT 12 NOON.
    if (verboseMode)
   d4624:	782b      	ldrb	r3, [r5, #0]
   d4626:	b1cb      	cbz	r3, d465c <loop+0x130>
   d4628:	4e55      	ldr	r6, [pc, #340]	; (d4780 <loop+0x254>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d462a:	2500      	movs	r5, #0
    {
      waitUntil(PublishDelayFunction);
   d462c:	f7ff fd7e 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4630:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("Temperature", temperatureString, PRIVATE);
   d4632:	4a5b      	ldr	r2, [pc, #364]	; (d47a0 <loop+0x274>)
   d4634:	495b      	ldr	r1, [pc, #364]	; (d47a4 <loop+0x278>)
   d4636:	f88d 5000 	strb.w	r5, [sp]
   d463a:	a802      	add	r0, sp, #8
   d463c:	f7ff fd53 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d4640:	a803      	add	r0, sp, #12
   d4642:	f7ff fe17 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4646:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("State", "Waiting RESPONSE", PRIVATE);
   d4648:	4a57      	ldr	r2, [pc, #348]	; (d47a8 <loop+0x27c>)
   d464a:	f88d 5000 	strb.w	r5, [sp]
   d464e:	a802      	add	r0, sp, #8
   d4650:	494f      	ldr	r1, [pc, #316]	; (d4790 <loop+0x264>)
   d4652:	f7ff fd48 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d4656:	a803      	add	r0, sp, #12
   d4658:	f7ff fe0c 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sendUBIDots();
   d465c:	f7ff fec0 	bl	d43e0 <_Z11sendUBIDotsv>
    state = RESPONSE_WAIT;
   d4660:	2304      	movs	r3, #4
   d4662:	e048      	b.n	d46f6 <loop+0x1ca>

    break;

  case RESPONSE_WAIT:
    if (verboseMode && oldState != state)
   d4664:	4b43      	ldr	r3, [pc, #268]	; (d4774 <loop+0x248>)
   d4666:	781b      	ldrb	r3, [r3, #0]
   d4668:	b12b      	cbz	r3, d4676 <loop+0x14a>
   d466a:	4b43      	ldr	r3, [pc, #268]	; (d4778 <loop+0x24c>)
   d466c:	781b      	ldrb	r3, [r3, #0]
   d466e:	2b04      	cmp	r3, #4
   d4670:	d001      	beq.n	d4676 <loop+0x14a>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d4672:	f7ff ff2b 	bl	d44cc <_Z15transitionStatev>

    if (!inTransit)
   d4676:	4b4d      	ldr	r3, [pc, #308]	; (d47ac <loop+0x280>)
   d4678:	781a      	ldrb	r2, [r3, #0]
   d467a:	b96a      	cbnz	r2, d4698 <loop+0x16c>
   d467c:	4b4c      	ldr	r3, [pc, #304]	; (d47b0 <loop+0x284>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d467e:	494d      	ldr	r1, [pc, #308]	; (d47b4 <loop+0x288>)
   d4680:	781b      	ldrb	r3, [r3, #0]
   d4682:	f88d 2000 	strb.w	r2, [sp]
   d4686:	a802      	add	r0, sp, #8
   d4688:	4a4b      	ldr	r2, [pc, #300]	; (d47b8 <loop+0x28c>)
   d468a:	f7ff fd2c 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d468e:	a803      	add	r0, sp, #12
   d4690:	f7ff fdf0 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
      Particle.publish("STATE", "Data Received, Going to IDLE"); // If data is not inTransit, Then data was sent succesfully, Hence go to Idle State.
      state = IDLE_STATE;
   d4694:	2301      	movs	r3, #1
   d4696:	7023      	strb	r3, [r4, #0]
   d4698:	f000 fccc 	bl	d5034 <HAL_Timer_Get_Milli_Seconds>
    } // This checks for the response from UBIDOTS.

    if (millis() - webhookTimeStamp > webhookTimeout)
   d469c:	4b47      	ldr	r3, [pc, #284]	; (d47bc <loop+0x290>)
   d469e:	681b      	ldr	r3, [r3, #0]
   d46a0:	1ac0      	subs	r0, r0, r3
   d46a2:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d46a6:	4298      	cmp	r0, r3
   d46a8:	d960      	bls.n	d476c <loop+0x240>
   d46aa:	4b35      	ldr	r3, [pc, #212]	; (d4780 <loop+0x254>)
    {                                                            // If device does not respond in 45 Seconds, Then Reset it.
      Particle.publish("spark/device/session/end", "", PRIVATE); //
   d46ac:	4944      	ldr	r1, [pc, #272]	; (d47c0 <loop+0x294>)
   d46ae:	781b      	ldrb	r3, [r3, #0]
   d46b0:	2200      	movs	r2, #0
   d46b2:	f88d 2000 	strb.w	r2, [sp]
   d46b6:	a802      	add	r0, sp, #8
   d46b8:	4a42      	ldr	r2, [pc, #264]	; (d47c4 <loop+0x298>)
   d46ba:	f7ff fd14 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d46be:	a803      	add	r0, sp, #12
   d46c0:	f7ff fdd8 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                       // time out
   d46c4:	2305      	movs	r3, #5
   d46c6:	e016      	b.n	d46f6 <loop+0x1ca>
    }
    break;

  case ERROR_STATE: // This state RESETS the devices.
    if (verboseMode && oldState != state)
   d46c8:	4b2a      	ldr	r3, [pc, #168]	; (d4774 <loop+0x248>)
   d46ca:	781b      	ldrb	r3, [r3, #0]
   d46cc:	b12b      	cbz	r3, d46da <loop+0x1ae>
   d46ce:	4b2a      	ldr	r3, [pc, #168]	; (d4778 <loop+0x24c>)
   d46d0:	781b      	ldrb	r3, [r3, #0]
   d46d2:	2b05      	cmp	r3, #5
   d46d4:	d001      	beq.n	d46da <loop+0x1ae>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d46d6:	f7ff fef9 	bl	d44cc <_Z15transitionStatev>
   d46da:	4b29      	ldr	r3, [pc, #164]	; (d4780 <loop+0x254>)
    Particle.publish("STATE", "RESETTING IN 30 SEC. ", PRIVATE);
   d46dc:	4935      	ldr	r1, [pc, #212]	; (d47b4 <loop+0x288>)
   d46de:	781b      	ldrb	r3, [r3, #0]
   d46e0:	2200      	movs	r2, #0
   d46e2:	f88d 2000 	strb.w	r2, [sp]
   d46e6:	a802      	add	r0, sp, #8
   d46e8:	4a37      	ldr	r2, [pc, #220]	; (d47c8 <loop+0x29c>)
   d46ea:	f7ff fcfc 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d46ee:	a803      	add	r0, sp, #12
   d46f0:	f7ff fdc0 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = IDLE_STATE;
   d46f4:	2301      	movs	r3, #1
   d46f6:	7023      	strb	r3, [r4, #0]
    break;
  }
}
   d46f8:	e038      	b.n	d476c <loop+0x240>
    // Forced Reading
    /* When the forced reading function is called, it checks if it is turned ON. Then if it is turned ON and 5 minutes have passed, It sends data to the UBIDots cloud by moving to the reporting state.  */
    else if ((forcedMode) && (Time.minute() - ForcedValueTimePassed > forcedReadingRate))
    {

      state = REPORTING_STATE;
   d46fa:	2303      	movs	r3, #3
   d46fc:	7023      	strb	r3, [r4, #0]
      ForcedValueTimePassed = Time.minute();
   d46fe:	f001 fdb9 	bl	d6274 <_ZN9TimeClass6minuteEv>

      if (verboseMode)
   d4702:	782b      	ldrb	r3, [r5, #0]
    /* When the forced reading function is called, it checks if it is turned ON. Then if it is turned ON and 5 minutes have passed, It sends data to the UBIDots cloud by moving to the reporting state.  */
    else if ((forcedMode) && (Time.minute() - ForcedValueTimePassed > forcedReadingRate))
    {

      state = REPORTING_STATE;
      ForcedValueTimePassed = Time.minute();
   d4704:	6038      	str	r0, [r7, #0]

      if (verboseMode)
   d4706:	2b00      	cmp	r3, #0
   d4708:	d030      	beq.n	d476c <loop+0x240>
      {
        waitUntil(PublishDelayFunction);
   d470a:	f7ff fd0f 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d470e:	4b1c      	ldr	r3, [pc, #112]	; (d4780 <loop+0x254>)
        Particle.publish("FORCED", "GETTING READING", PRIVATE);
   d4710:	4a2e      	ldr	r2, [pc, #184]	; (d47cc <loop+0x2a0>)
   d4712:	781b      	ldrb	r3, [r3, #0]
   d4714:	492e      	ldr	r1, [pc, #184]	; (d47d0 <loop+0x2a4>)
   d4716:	f88d 6000 	strb.w	r6, [sp]
   d471a:	e75c      	b.n	d45d6 <loop+0xaa>
      }
    }

    // AdaptiveMode
    else if ((adaptiveModeOn) && (Time.minute() - adaptiveValueTimePassed > adaptiveReadingRate)) // Checks if adaptiveMode is ON and 5 minutes have passed from the last value.
   d471c:	4b2d      	ldr	r3, [pc, #180]	; (d47d4 <loop+0x2a8>)
   d471e:	781b      	ldrb	r3, [r3, #0]
   d4720:	b133      	cbz	r3, d4730 <loop+0x204>
   d4722:	4e2d      	ldr	r6, [pc, #180]	; (d47d8 <loop+0x2ac>)
   d4724:	f001 fda6 	bl	d6274 <_ZN9TimeClass6minuteEv>
   d4728:	6833      	ldr	r3, [r6, #0]
   d472a:	1ac0      	subs	r0, r0, r3
   d472c:	2805      	cmp	r0, #5
   d472e:	d80c      	bhi.n	d474a <loop+0x21e>
      }
    }

    else
    {
      state = IDLE_STATE;
   d4730:	2301      	movs	r3, #1
   d4732:	7023      	strb	r3, [r4, #0]
      if (verboseMode)
   d4734:	782b      	ldrb	r3, [r5, #0]
   d4736:	b1cb      	cbz	r3, d476c <loop+0x240>
      {
        waitUntil(PublishDelayFunction);
   d4738:	f7ff fcf8 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d473c:	4b10      	ldr	r3, [pc, #64]	; (d4780 <loop+0x254>)
        Particle.publish("State", "No change - Idle", PRIVATE);
   d473e:	2200      	movs	r2, #0
   d4740:	781b      	ldrb	r3, [r3, #0]
   d4742:	f88d 2000 	strb.w	r2, [sp]
   d4746:	4a25      	ldr	r2, [pc, #148]	; (d47dc <loop+0x2b0>)
   d4748:	e744      	b.n	d45d4 <loop+0xa8>
    }

    // AdaptiveMode
    else if ((adaptiveModeOn) && (Time.minute() - adaptiveValueTimePassed > adaptiveReadingRate)) // Checks if adaptiveMode is ON and 5 minutes have passed from the last value.
    {
      state = REPORTING_STATE;
   d474a:	2303      	movs	r3, #3
   d474c:	7023      	strb	r3, [r4, #0]
      adaptiveValueTimePassed = Time.minute();
   d474e:	f001 fd91 	bl	d6274 <_ZN9TimeClass6minuteEv>

      if (verboseMode)
   d4752:	782b      	ldrb	r3, [r5, #0]

    // AdaptiveMode
    else if ((adaptiveModeOn) && (Time.minute() - adaptiveValueTimePassed > adaptiveReadingRate)) // Checks if adaptiveMode is ON and 5 minutes have passed from the last value.
    {
      state = REPORTING_STATE;
      adaptiveValueTimePassed = Time.minute();
   d4754:	6030      	str	r0, [r6, #0]

      if (verboseMode)
   d4756:	b14b      	cbz	r3, d476c <loop+0x240>
      {
        waitUntil(PublishDelayFunction);
   d4758:	f7ff fce8 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.39>
   d475c:	4b08      	ldr	r3, [pc, #32]	; (d4780 <loop+0x254>)
        Particle.publish("ADAPTIVE ON", "Next value in 5 minutes", PRIVATE);
   d475e:	4920      	ldr	r1, [pc, #128]	; (d47e0 <loop+0x2b4>)
   d4760:	781b      	ldrb	r3, [r3, #0]
   d4762:	2200      	movs	r2, #0
   d4764:	f88d 2000 	strb.w	r2, [sp]
   d4768:	4a1e      	ldr	r2, [pc, #120]	; (d47e4 <loop+0x2b8>)
   d476a:	e734      	b.n	d45d6 <loop+0xaa>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
    Particle.publish("STATE", "RESETTING IN 30 SEC. ", PRIVATE);
    state = IDLE_STATE;
    break;
  }
}
   d476c:	b005      	add	sp, #20
   d476e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4770:	2003e304 	.word	0x2003e304
   d4774:	2003e351 	.word	0x2003e351
   d4778:	2003e350 	.word	0x2003e350
   d477c:	2003e310 	.word	0x2003e310
   d4780:	2003e370 	.word	0x2003e370
   d4784:	000d8046 	.word	0x000d8046
   d4788:	2003e30c 	.word	0x2003e30c
   d478c:	000d8062 	.word	0x000d8062
   d4790:	000d802b 	.word	0x000d802b
   d4794:	2003e358 	.word	0x2003e358
   d4798:	2003e308 	.word	0x2003e308
   d479c:	2003e0bc 	.word	0x2003e0bc
   d47a0:	2003e2e0 	.word	0x2003e2e0
   d47a4:	000d80c6 	.word	0x000d80c6
   d47a8:	000d80d2 	.word	0x000d80d2
   d47ac:	2003e305 	.word	0x2003e305
   d47b0:	2003e2f0 	.word	0x2003e2f0
   d47b4:	000d7f65 	.word	0x000d7f65
   d47b8:	000d80e3 	.word	0x000d80e3
   d47bc:	2003e354 	.word	0x2003e354
   d47c0:	000d8100 	.word	0x000d8100
   d47c4:	000d820a 	.word	0x000d820a
   d47c8:	000d8119 	.word	0x000d8119
   d47cc:	000d807a 	.word	0x000d807a
   d47d0:	000d808a 	.word	0x000d808a
   d47d4:	2003e371 	.word	0x2003e371
   d47d8:	2003e300 	.word	0x2003e300
   d47dc:	000d80b5 	.word	0x000d80b5
   d47e0:	000d80a9 	.word	0x000d80a9
   d47e4:	000d8091 	.word	0x000d8091

000d47e8 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d47e8:	2300      	movs	r3, #0
   d47ea:	2204      	movs	r2, #4
   d47ec:	f000 bd8e 	b.w	d530c <spark_variable>

000d47f0 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
   d47f0:	b530      	push	{r4, r5, lr}
   d47f2:	b085      	sub	sp, #20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d47f4:	2300      	movs	r3, #0
   d47f6:	4605      	mov	r5, r0
   d47f8:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d47fa:	b121      	cbz	r1, d4806 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d47fc:	4b14      	ldr	r3, [pc, #80]	; (d4850 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
   d47fe:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4800:	4b14      	ldr	r3, [pc, #80]	; (d4854 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4802:	9100      	str	r1, [sp, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4804:	9302      	str	r3, [sp, #8]
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
   d4806:	9b02      	ldr	r3, [sp, #8]
   d4808:	b183      	cbz	r3, d482c <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d480a:	2010      	movs	r0, #16
   d480c:	f7ff fc43 	bl	d4096 <_Znwj>
   d4810:	4604      	mov	r4, r0
   d4812:	b158      	cbz	r0, d482c <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4814:	2300      	movs	r3, #0
   d4816:	6083      	str	r3, [r0, #8]
   d4818:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d481a:	b17b      	cbz	r3, d483c <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d481c:	2202      	movs	r2, #2
   d481e:	4669      	mov	r1, sp
   d4820:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4822:	9b03      	ldr	r3, [sp, #12]
   d4824:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4826:	9b02      	ldr	r3, [sp, #8]
   d4828:	60a3      	str	r3, [r4, #8]
   d482a:	e007      	b.n	d483c <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
   d482c:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d482e:	9b02      	ldr	r3, [sp, #8]
   d4830:	b15b      	cbz	r3, d484a <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4832:	2203      	movs	r2, #3
   d4834:	4669      	mov	r1, sp
   d4836:	4668      	mov	r0, sp
   d4838:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
   d483a:	e006      	b.n	d484a <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d483c:	4621      	mov	r1, r4
   d483e:	462a      	mov	r2, r5
   d4840:	4805      	ldr	r0, [pc, #20]	; (d4858 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
   d4842:	f000 fea0 	bl	d5586 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4846:	4604      	mov	r4, r0
   d4848:	e7f1      	b.n	d482e <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
   d484a:	4620      	mov	r0, r4
   d484c:	b005      	add	sp, #20
   d484e:	bd30      	pop	{r4, r5, pc}
   d4850:	000d40cb 	.word	0x000d40cb
   d4854:	000d40b3 	.word	0x000d40b3
   d4858:	000d555f 	.word	0x000d555f

000d485c <setup>:
bool inTransit = false;   // This variable is used to check if the data is inTransit to Ubidots or not. If inTransit is false, Then data is succesfully sent.
bool forcedMode = false;  //Forced value mode.
bool adaptiveModeOn;      // Variable to check if Adaptive mode is on or off.

void setup()
{
   d485c:	b510      	push	{r4, lr}
   d485e:	b0a8      	sub	sp, #160	; 0xa0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4860:	a804      	add	r0, sp, #16
   d4862:	f000 fd73 	bl	d534c <spark_deviceID>
     */
    int publishVitals(system_tick_t period = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4866:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4868:	2300      	movs	r3, #0
   d486a:	227d      	movs	r2, #125	; 0x7d
   d486c:	a908      	add	r1, sp, #32
   d486e:	a804      	add	r0, sp, #16
   d4870:	f001 fc69 	bl	d6146 <_ZNK6String8getBytesEPhjj>
   d4874:	4623      	mov	r3, r4
   d4876:	4622      	mov	r2, r4
   d4878:	491c      	ldr	r1, [pc, #112]	; (d48ec <setup+0x90>)
   d487a:	9401      	str	r4, [sp, #4]
   d487c:	9400      	str	r4, [sp, #0]
   d487e:	a808      	add	r0, sp, #32
   d4880:	f000 fd74 	bl	d536c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID(); // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic, 125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES); // Subscribe to the integration response event

  getTemperature();
   d4884:	f7ff fca2 	bl	d41cc <_Z14getTemperaturev>
  adaptiveMode();
   d4888:	f7ff fcdc 	bl	d4244 <_Z12adaptiveModev>

  // Particle Variables

  Particle.variable("celsius", temperatureString); // Setup Particle Variable
   d488c:	4918      	ldr	r1, [pc, #96]	; (d48f0 <setup+0x94>)
   d488e:	4819      	ldr	r0, [pc, #100]	; (d48f4 <setup+0x98>)
   d4890:	f7ff ffaa 	bl	d47e8 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);     // So we can see what release is running from the console
   d4894:	4918      	ldr	r1, [pc, #96]	; (d48f8 <setup+0x9c>)
   d4896:	4819      	ldr	r0, [pc, #100]	; (d48fc <setup+0xa0>)
   d4898:	f7ff ffa6 	bl	d47e8 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString);       // Particle variables that enable monitoring using the mobile app
   d489c:	4918      	ldr	r1, [pc, #96]	; (d4900 <setup+0xa4>)
   d489e:	4819      	ldr	r0, [pc, #100]	; (d4904 <setup+0xa8>)
   d48a0:	f7ff ffa2 	bl	d47e8 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);     // Battery level in V as the Argon does not have a fuel cell
   d48a4:	4918      	ldr	r1, [pc, #96]	; (d4908 <setup+0xac>)
   d48a6:	4819      	ldr	r0, [pc, #100]	; (d490c <setup+0xb0>)
   d48a8:	f7ff ff9e 	bl	d47e8 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>

  // Particle Functions.

  Particle.function("verboseMode", SetVerboseMode); // Added Particle Function For VerboseMode.
   d48ac:	4918      	ldr	r1, [pc, #96]	; (d4910 <setup+0xb4>)
   d48ae:	4819      	ldr	r0, [pc, #100]	; (d4914 <setup+0xb8>)
   d48b0:	f7ff ff9e 	bl	d47f0 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("GetReading", forcedReading);   // This function will force it to get a reading and set the refresh rate to 15mins.
   d48b4:	4918      	ldr	r1, [pc, #96]	; (d4918 <setup+0xbc>)
   d48b6:	4819      	ldr	r0, [pc, #100]	; (d491c <setup+0xc0>)
   d48b8:	f7ff ff9a 	bl	d47f0 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_>
  if (verboseMode)
   d48bc:	4b18      	ldr	r3, [pc, #96]	; (d4920 <setup+0xc4>)
   d48be:	781b      	ldrb	r3, [r3, #0]
   d48c0:	b15b      	cbz	r3, d48da <setup+0x7e>
   d48c2:	4b18      	ldr	r3, [pc, #96]	; (d4924 <setup+0xc8>)
    Particle.publish("State", "IDLE", PRIVATE);
   d48c4:	4a18      	ldr	r2, [pc, #96]	; (d4928 <setup+0xcc>)
   d48c6:	781b      	ldrb	r3, [r3, #0]
   d48c8:	4918      	ldr	r1, [pc, #96]	; (d492c <setup+0xd0>)
   d48ca:	f88d 4000 	strb.w	r4, [sp]
   d48ce:	a802      	add	r0, sp, #8
   d48d0:	f7ff fc09 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.49.constprop.62>
   d48d4:	a803      	add	r0, sp, #12
   d48d6:	f7ff fccd 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
   d48da:	4b15      	ldr	r3, [pc, #84]	; (d4930 <setup+0xd4>)
   d48dc:	2201      	movs	r2, #1
void setup()
{
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.

  char responseTopic[125];
  String deviceID = System.deviceID(); // Multiple Electrons share the same hook - keeps things straight
   d48de:	a804      	add	r0, sp, #16
  Particle.function("verboseMode", SetVerboseMode); // Added Particle Function For VerboseMode.
  Particle.function("GetReading", forcedReading);   // This function will force it to get a reading and set the refresh rate to 15mins.
  if (verboseMode)
    Particle.publish("State", "IDLE", PRIVATE);

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
   d48e0:	701a      	strb	r2, [r3, #0]
void setup()
{
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.

  char responseTopic[125];
  String deviceID = System.deviceID(); // Multiple Electrons share the same hook - keeps things straight
   d48e2:	f001 fbc4 	bl	d606e <_ZN6StringD1Ev>
  Particle.function("GetReading", forcedReading);   // This function will force it to get a reading and set the refresh rate to 15mins.
  if (verboseMode)
    Particle.publish("State", "IDLE", PRIVATE);

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
}
   d48e6:	b028      	add	sp, #160	; 0xa0
   d48e8:	bd10      	pop	{r4, pc}
   d48ea:	bf00      	nop
   d48ec:	000d4465 	.word	0x000d4465
   d48f0:	2003e2e0 	.word	0x2003e2e0
   d48f4:	000d812f 	.word	0x000d812f
   d48f8:	000d7f18 	.word	0x000d7f18
   d48fc:	000d8137 	.word	0x000d8137
   d4900:	2003e340 	.word	0x2003e340
   d4904:	000d813f 	.word	0x000d813f
   d4908:	2003e360 	.word	0x2003e360
   d490c:	000d8146 	.word	0x000d8146
   d4910:	000d4315 	.word	0x000d4315
   d4914:	000d814e 	.word	0x000d814e
   d4918:	000d42a1 	.word	0x000d42a1
   d491c:	000d815a 	.word	0x000d815a
   d4920:	2003e351 	.word	0x2003e351
   d4924:	2003e370 	.word	0x2003e370
   d4928:	000d80fb 	.word	0x000d80fb
   d492c:	000d802b 	.word	0x000d802b
   d4930:	2003e304 	.word	0x2003e304

000d4934 <_GLOBAL__sub_I_sensor>:
  else
  {
    adaptiveModeOn = false;
    return 0;
  }
   d4934:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4936:	4b07      	ldr	r3, [pc, #28]	; (d4954 <_GLOBAL__sub_I_sensor+0x20>)
   d4938:	2400      	movs	r4, #0
   d493a:	701c      	strb	r4, [r3, #0]
   d493c:	4b06      	ldr	r3, [pc, #24]	; (d4958 <_GLOBAL__sub_I_sensor+0x24>)
   d493e:	2201      	movs	r2, #1
   d4940:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4942:	f000 fb8f 	bl	d5064 <HAL_Pin_Map>
const char releaseNumber[6] = "1.13"; // Displays the release on the menu

#include "DS18.h" // Include the OneWire library

// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d4946:	4622      	mov	r2, r4
   d4948:	2103      	movs	r1, #3
   d494a:	4804      	ldr	r0, [pc, #16]	; (d495c <_GLOBAL__sub_I_sensor+0x28>)
  else
  {
    adaptiveModeOn = false;
    return 0;
  }
   d494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
const char releaseNumber[6] = "1.13"; // Displays the release on the menu

#include "DS18.h" // Include the OneWire library

// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d4950:	f000 b817 	b.w	d4982 <_ZN4DS18C1Etb>
   d4954:	2003e2f0 	.word	0x2003e2f0
   d4958:	2003e370 	.word	0x2003e370
   d495c:	2003e314 	.word	0x2003e314

000d4960 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4960:	2300      	movs	r3, #0
  _celsius = 0;
   d4962:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4964:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d4966:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d4968:	6183      	str	r3, [r0, #24]
   d496a:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d496c:	6203      	str	r3, [r0, #32]
   d496e:	6243      	str	r3, [r0, #36]	; 0x24
   d4970:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d4974:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d4978:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d497c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d4980:	4770      	bx	lr

000d4982 <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d4982:	b538      	push	{r3, r4, r5, lr}
   d4984:	4604      	mov	r4, r0
   d4986:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4988:	f000 f994 	bl	d4cb4 <_ZN7OneWireC1Et>
   d498c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d4990:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4992:	73a5      	strb	r5, [r4, #14]
   d4994:	8223      	strh	r3, [r4, #16]
{
  init();
   d4996:	f7ff ffe3 	bl	d4960 <_ZN4DS184initEv>
}
   d499a:	4620      	mov	r0, r4
   d499c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49a0 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d49a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49a2:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d49a6:	680b      	ldr	r3, [r1, #0]
   d49a8:	6183      	str	r3, [r0, #24]
   d49aa:	f100 0518 	add.w	r5, r0, #24
   d49ae:	684b      	ldr	r3, [r1, #4]
   d49b0:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d49b2:	780b      	ldrb	r3, [r1, #0]
   d49b4:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d49b6:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d49b8:	d00a      	beq.n	d49d0 <_ZN4DS184readEPh+0x30>
   d49ba:	d803      	bhi.n	d49c4 <_ZN4DS184readEPh+0x24>
   d49bc:	2b10      	cmp	r3, #16
   d49be:	d142      	bne.n	d4a46 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d49c0:	2301      	movs	r3, #1
   d49c2:	e008      	b.n	d49d6 <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d49c4:	2b26      	cmp	r3, #38	; 0x26
   d49c6:	d005      	beq.n	d49d4 <_ZN4DS184readEPh+0x34>
   d49c8:	2b28      	cmp	r3, #40	; 0x28
   d49ca:	d13c      	bne.n	d4a46 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d49cc:	2302      	movs	r3, #2
   d49ce:	e002      	b.n	d49d6 <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d49d0:	2303      	movs	r3, #3
   d49d2:	e000      	b.n	d49d6 <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d49d4:	2304      	movs	r3, #4
   d49d6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d49da:	4620      	mov	r0, r4
   d49dc:	f000 f974 	bl	d4cc8 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d49e0:	4629      	mov	r1, r5
   d49e2:	4620      	mov	r0, r4
   d49e4:	f000 fa30 	bl	d4e48 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d49e8:	7ba2      	ldrb	r2, [r4, #14]
   d49ea:	2144      	movs	r1, #68	; 0x44
   d49ec:	4620      	mov	r0, r4
   d49ee:	f000 f9f8 	bl	d4de2 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d49f2:	8a20      	ldrh	r0, [r4, #16]
   d49f4:	f000 fd62 	bl	d54bc <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d49f8:	4620      	mov	r0, r4
   d49fa:	f000 f965 	bl	d4cc8 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d49fe:	4629      	mov	r1, r5
   d4a00:	4620      	mov	r0, r4
   d4a02:	f000 fa21 	bl	d4e48 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d4a06:	2200      	movs	r2, #0
   d4a08:	21b8      	movs	r1, #184	; 0xb8
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	f000 f9e9 	bl	d4de2 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d4a10:	2200      	movs	r2, #0
   d4a12:	4611      	mov	r1, r2
   d4a14:	4620      	mov	r0, r4
   d4a16:	f000 f9e4 	bl	d4de2 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	f000 f954 	bl	d4cc8 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4a20:	4629      	mov	r1, r5
   d4a22:	4620      	mov	r0, r4
   d4a24:	f000 fa10 	bl	d4e48 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d4a28:	2200      	movs	r2, #0
   d4a2a:	21be      	movs	r1, #190	; 0xbe
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	f000 f9d8 	bl	d4de2 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d4a32:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d4a36:	2b04      	cmp	r3, #4
   d4a38:	d109      	bne.n	d4a4e <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d4a3a:	2200      	movs	r2, #0
   d4a3c:	4611      	mov	r1, r2
   d4a3e:	4620      	mov	r0, r4
   d4a40:	f000 f9cf 	bl	d4de2 <_ZN7OneWire5writeEhh>
   d4a44:	e003      	b.n	d4a4e <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d4a46:	2000      	movs	r0, #0
   d4a48:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d4a4c:	e094      	b.n	d4b78 <_ZN4DS184readEPh+0x1d8>
   d4a4e:	f104 051f 	add.w	r5, r4, #31
   d4a52:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d4a56:	4620      	mov	r0, r4
   d4a58:	f000 f9e6 	bl	d4e28 <_ZN7OneWire4readEv>
   d4a5c:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d4a60:	42ae      	cmp	r6, r5
   d4a62:	d1f8      	bne.n	d4a56 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d4a64:	2108      	movs	r1, #8
   d4a66:	f104 0020 	add.w	r0, r4, #32
   d4a6a:	f000 fa86 	bl	d4f7a <_ZN7OneWire4crc8EPhh>
   d4a6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d4a72:	4283      	cmp	r3, r0
   d4a74:	d004      	beq.n	d4a80 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d4a76:	2301      	movs	r3, #1
   d4a78:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4a7c:	2000      	movs	r0, #0
   d4a7e:	e07b      	b.n	d4b78 <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4a80:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d4a84:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d4a88:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4a8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d4a90:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4a92:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d4a94:	d127      	bne.n	d4ae6 <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d4a96:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4a9a:	ee07 3a90 	vmov	s15, r3
   d4a9e:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4aa2:	08d2      	lsrs	r2, r2, #3
   d4aa4:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d4aa8:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d4aac:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d4ab0:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4ab2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d4ab6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d4aba:	d045      	beq.n	d4b48 <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d4abc:	ee18 0a90 	vmov	r0, s17
   d4ac0:	f002 f99c 	bl	d6dfc <__aeabi_f2d>
   d4ac4:	4606      	mov	r6, r0
   d4ac6:	ee18 0a10 	vmov	r0, s16
   d4aca:	460f      	mov	r7, r1
   d4acc:	f002 f996 	bl	d6dfc <__aeabi_f2d>
   d4ad0:	2200      	movs	r2, #0
   d4ad2:	4b2b      	ldr	r3, [pc, #172]	; (d4b80 <_ZN4DS184readEPh+0x1e0>)
   d4ad4:	f002 f9e6 	bl	d6ea4 <__aeabi_dmul>
   d4ad8:	4602      	mov	r2, r0
   d4ada:	460b      	mov	r3, r1
   d4adc:	4630      	mov	r0, r6
   d4ade:	4639      	mov	r1, r7
   d4ae0:	f002 f82c 	bl	d6b3c <__aeabi_dsub>
   d4ae4:	e044      	b.n	d4b70 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d4ae6:	2901      	cmp	r1, #1
   d4ae8:	d003      	beq.n	d4af2 <_ZN4DS184readEPh+0x152>
   d4aea:	d344      	bcc.n	d4b76 <_ZN4DS184readEPh+0x1d6>
   d4aec:	2903      	cmp	r1, #3
   d4aee:	d910      	bls.n	d4b12 <_ZN4DS184readEPh+0x172>
   d4af0:	e041      	b.n	d4b76 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4af2:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4af6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4afa:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d4afc:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4afe:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4b00:	d119      	bne.n	d4b36 <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d4b02:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d4b06:	f023 030f 	bic.w	r3, r3, #15
   d4b0a:	f1c2 020c 	rsb	r2, r2, #12
   d4b0e:	4413      	add	r3, r2
   d4b10:	e010      	b.n	d4b34 <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d4b12:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d4b16:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d4b1a:	d102      	bne.n	d4b22 <_ZN4DS184readEPh+0x182>
   d4b1c:	f023 0307 	bic.w	r3, r3, #7
   d4b20:	e008      	b.n	d4b34 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d4b22:	2a20      	cmp	r2, #32
   d4b24:	d102      	bne.n	d4b2c <_ZN4DS184readEPh+0x18c>
   d4b26:	f023 0303 	bic.w	r3, r3, #3
   d4b2a:	e003      	b.n	d4b34 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4b2c:	2a40      	cmp	r2, #64	; 0x40
   d4b2e:	d102      	bne.n	d4b36 <_ZN4DS184readEPh+0x196>
   d4b30:	f023 0301 	bic.w	r3, r3, #1
   d4b34:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d4b36:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d4b3a:	ee07 3a90 	vmov	s15, r3
   d4b3e:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d4b42:	edc4 7a05 	vstr	s15, [r4, #20]
   d4b46:	e016      	b.n	d4b76 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4b48:	ee18 0a10 	vmov	r0, s16
   d4b4c:	f002 f956 	bl	d6dfc <__aeabi_f2d>
   d4b50:	2200      	movs	r2, #0
   d4b52:	4b0b      	ldr	r3, [pc, #44]	; (d4b80 <_ZN4DS184readEPh+0x1e0>)
   d4b54:	f002 f9a6 	bl	d6ea4 <__aeabi_dmul>
   d4b58:	4606      	mov	r6, r0
   d4b5a:	ee18 0a90 	vmov	r0, s17
   d4b5e:	460f      	mov	r7, r1
   d4b60:	f002 f94c 	bl	d6dfc <__aeabi_f2d>
   d4b64:	4602      	mov	r2, r0
   d4b66:	460b      	mov	r3, r1
   d4b68:	4630      	mov	r0, r6
   d4b6a:	4639      	mov	r1, r7
   d4b6c:	f001 ffe8 	bl	d6b40 <__adddf3>
   d4b70:	f002 fbaa 	bl	d72c8 <__aeabi_d2f>
   d4b74:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d4b76:	2001      	movs	r0, #1
}
   d4b78:	ecbd 8b02 	vpop	{d8}
   d4b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b7e:	bf00      	nop
   d4b80:	3fa00000 	.word	0x3fa00000

000d4b84 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d4b84:	b538      	push	{r3, r4, r5, lr}
   d4b86:	4604      	mov	r4, r0
  init();
   d4b88:	f7ff feea 	bl	d4960 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d4b8c:	f100 0518 	add.w	r5, r0, #24
   d4b90:	4629      	mov	r1, r5
   d4b92:	f000 f977 	bl	d4e84 <_ZN7OneWire6searchEPh>
   d4b96:	b930      	cbnz	r0, d4ba6 <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d4b98:	2301      	movs	r3, #1
   d4b9a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	f000 f964 	bl	d4e6c <_ZN7OneWire12reset_searchEv>
    return false;
   d4ba4:	e010      	b.n	d4bc8 <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d4ba6:	2107      	movs	r1, #7
   d4ba8:	4628      	mov	r0, r5
   d4baa:	f000 f9e6 	bl	d4f7a <_ZN7OneWire4crc8EPhh>
   d4bae:	7fe3      	ldrb	r3, [r4, #31]
   d4bb0:	4283      	cmp	r3, r0
   d4bb2:	d003      	beq.n	d4bbc <_ZN4DS184readEv+0x38>
    _crcError = true;
   d4bb4:	2301      	movs	r3, #1
   d4bb6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4bba:	e005      	b.n	d4bc8 <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d4bbc:	4629      	mov	r1, r5
   d4bbe:	4620      	mov	r0, r4
}
   d4bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d4bc4:	f7ff beec 	b.w	d49a0 <_ZN4DS184readEPh>
}
   d4bc8:	2000      	movs	r0, #0
   d4bca:	bd38      	pop	{r3, r4, r5, pc}

000d4bcc <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d4bcc:	ed90 0a05 	vldr	s0, [r0, #20]
   d4bd0:	4770      	bx	lr

000d4bd2 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4bd2:	f000 ba47 	b.w	d5064 <HAL_Pin_Map>
	...

000d4bd8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4bd8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4bda:	6803      	ldr	r3, [r0, #0]
   d4bdc:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4bde:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4be0:	d904      	bls.n	d4bec <nrf_gpio_pin_port_decode+0x14>
   d4be2:	4a07      	ldr	r2, [pc, #28]	; (d4c00 <nrf_gpio_pin_port_decode+0x28>)
   d4be4:	2100      	movs	r1, #0
   d4be6:	200a      	movs	r0, #10
   d4be8:	f000 fb44 	bl	d5274 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4bec:	6823      	ldr	r3, [r4, #0]
   d4bee:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4bf0:	bf83      	ittte	hi
   d4bf2:	f003 031f 	andhi.w	r3, r3, #31
   d4bf6:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4bf8:	4802      	ldrhi	r0, [pc, #8]	; (d4c04 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4bfa:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4bfe:	bd10      	pop	{r4, pc}
   d4c00:	000d5025 	.word	0x000d5025
   d4c04:	50000300 	.word	0x50000300

000d4c08 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d4c08:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4c0a:	4b0b      	ldr	r3, [pc, #44]	; (d4c38 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	0100      	lsls	r0, r0, #4
   d4c10:	1819      	adds	r1, r3, r0
   d4c12:	5c1a      	ldrb	r2, [r3, r0]
   d4c14:	784b      	ldrb	r3, [r1, #1]
   d4c16:	a802      	add	r0, sp, #8
   d4c18:	f003 031f 	and.w	r3, r3, #31
   d4c1c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4c20:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c24:	f7ff ffd8 	bl	d4bd8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4c28:	9a01      	ldr	r2, [sp, #4]
   d4c2a:	2301      	movs	r3, #1
   d4c2c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4c2e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4c32:	b003      	add	sp, #12
   d4c34:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c38:	2003e374 	.word	0x2003e374

000d4c3c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4c3c:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4c3e:	4b0b      	ldr	r3, [pc, #44]	; (d4c6c <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	0100      	lsls	r0, r0, #4
   d4c44:	1819      	adds	r1, r3, r0
   d4c46:	5c1a      	ldrb	r2, [r3, r0]
   d4c48:	784b      	ldrb	r3, [r1, #1]
   d4c4a:	a802      	add	r0, sp, #8
   d4c4c:	f003 031f 	and.w	r3, r3, #31
   d4c50:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4c54:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c58:	f7ff ffbe 	bl	d4bd8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4c5c:	9a01      	ldr	r2, [sp, #4]
   d4c5e:	2301      	movs	r3, #1
   d4c60:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4c62:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d4c66:	b003      	add	sp, #12
   d4c68:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c6c:	2003e374 	.word	0x2003e374

000d4c70 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4c70:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4c72:	4b0f      	ldr	r3, [pc, #60]	; (d4cb0 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	0100      	lsls	r0, r0, #4
   d4c78:	181a      	adds	r2, r3, r0
   d4c7a:	5c1c      	ldrb	r4, [r3, r0]
   d4c7c:	7853      	ldrb	r3, [r2, #1]
   d4c7e:	a802      	add	r0, sp, #8
   d4c80:	f003 031f 	and.w	r3, r3, #31
   d4c84:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4c88:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c8c:	f7ff ffa4 	bl	d4bd8 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4c90:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4c94:	a802      	add	r0, sp, #8
   d4c96:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c9a:	f7ff ff9d 	bl	d4bd8 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4c9e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d4ca2:	9800      	ldr	r0, [sp, #0]
   d4ca4:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4ca8:	f000 0001 	and.w	r0, r0, #1
   d4cac:	b002      	add	sp, #8
   d4cae:	bd10      	pop	{r4, pc}
   d4cb0:	2003e374 	.word	0x2003e374

000d4cb4 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d4cb4:	b538      	push	{r3, r4, r5, lr}
   d4cb6:	4604      	mov	r4, r0
   d4cb8:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d4cba:	4628      	mov	r0, r5
   d4cbc:	2100      	movs	r1, #0
   d4cbe:	f001 fd7d 	bl	d67bc <pinMode>
    _pin = pin;
   d4cc2:	8025      	strh	r5, [r4, #0]
}
   d4cc4:	4620      	mov	r0, r4
   d4cc6:	bd38      	pop	{r3, r4, r5, pc}

000d4cc8 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d4cc8:	b538      	push	{r3, r4, r5, lr}
   d4cca:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d4ccc:	f000 ff62 	bl	d5b94 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4cd0:	2100      	movs	r1, #0
   d4cd2:	8828      	ldrh	r0, [r5, #0]
   d4cd4:	f000 f9d6 	bl	d5084 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d4cd8:	f000 ff5e 	bl	d5b98 <_Z10interruptsv>
   d4cdc:	247d      	movs	r4, #125	; 0x7d
   d4cde:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d4ce0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4ce4:	d02b      	beq.n	d4d3e <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4ce6:	2002      	movs	r0, #2
   d4ce8:	f000 f99c 	bl	d5024 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d4cec:	8828      	ldrh	r0, [r5, #0]
   d4cee:	f7ff ffbf 	bl	d4c70 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d4cf2:	2800      	cmp	r0, #0
   d4cf4:	d0f3      	beq.n	d4cde <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d4cf6:	f000 ff4d 	bl	d5b94 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4cfa:	8828      	ldrh	r0, [r5, #0]
   d4cfc:	f7ff ff84 	bl	d4c08 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4d00:	2101      	movs	r1, #1
   d4d02:	8828      	ldrh	r0, [r5, #0]
   d4d04:	f000 f9be 	bl	d5084 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d4d08:	f000 ff46 	bl	d5b98 <_Z10interruptsv>
   d4d0c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4d10:	f000 f988 	bl	d5024 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4d14:	f000 ff3e 	bl	d5b94 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4d18:	2100      	movs	r1, #0
   d4d1a:	8828      	ldrh	r0, [r5, #0]
   d4d1c:	f000 f9b2 	bl	d5084 <HAL_Pin_Mode>
   d4d20:	2046      	movs	r0, #70	; 0x46
   d4d22:	f000 f97f 	bl	d5024 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4d26:	8828      	ldrh	r0, [r5, #0]
   d4d28:	f7ff ffa2 	bl	d4c70 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4d2c:	fab0 f480 	clz	r4, r0

    interrupts();
   d4d30:	f000 ff32 	bl	d5b98 <_Z10interruptsv>
   d4d34:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4d38:	0964      	lsrs	r4, r4, #5
   d4d3a:	f000 f973 	bl	d5024 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d4d3e:	4620      	mov	r0, r4
   d4d40:	bd38      	pop	{r3, r4, r5, pc}

000d4d42 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d4d42:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4d44:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d4d48:	4604      	mov	r4, r0
    if (v & 1) {
   d4d4a:	d013      	beq.n	d4d74 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4d4c:	f000 ff22 	bl	d5b94 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4d50:	8820      	ldrh	r0, [r4, #0]
   d4d52:	f7ff ff59 	bl	d4c08 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4d56:	2101      	movs	r1, #1
   d4d58:	8820      	ldrh	r0, [r4, #0]
   d4d5a:	f000 f993 	bl	d5084 <HAL_Pin_Mode>
   d4d5e:	200a      	movs	r0, #10
   d4d60:	f000 f960 	bl	d5024 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4d64:	8820      	ldrh	r0, [r4, #0]
   d4d66:	2100      	movs	r1, #0
   d4d68:	f000 f98c 	bl	d5084 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4d6c:	f000 ff14 	bl	d5b98 <_Z10interruptsv>
   d4d70:	2037      	movs	r0, #55	; 0x37
   d4d72:	e012      	b.n	d4d9a <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4d74:	f000 ff0e 	bl	d5b94 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4d78:	8820      	ldrh	r0, [r4, #0]
   d4d7a:	f7ff ff45 	bl	d4c08 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4d7e:	2101      	movs	r1, #1
   d4d80:	8820      	ldrh	r0, [r4, #0]
   d4d82:	f000 f97f 	bl	d5084 <HAL_Pin_Mode>
   d4d86:	2041      	movs	r0, #65	; 0x41
   d4d88:	f000 f94c 	bl	d5024 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4d8c:	8820      	ldrh	r0, [r4, #0]
   d4d8e:	4629      	mov	r1, r5
   d4d90:	f000 f978 	bl	d5084 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d4d94:	f000 ff00 	bl	d5b98 <_Z10interruptsv>
   d4d98:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d4d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d9e:	f000 b941 	b.w	d5024 <HAL_Delay_Microseconds>

000d4da2 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d4da2:	b510      	push	{r4, lr}
   d4da4:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d4da6:	f000 fef5 	bl	d5b94 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4daa:	8820      	ldrh	r0, [r4, #0]
   d4dac:	f7ff ff2c 	bl	d4c08 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4db0:	2101      	movs	r1, #1
   d4db2:	8820      	ldrh	r0, [r4, #0]
   d4db4:	f000 f966 	bl	d5084 <HAL_Pin_Mode>
   d4db8:	2003      	movs	r0, #3
   d4dba:	f000 f933 	bl	d5024 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4dbe:	2100      	movs	r1, #0
   d4dc0:	8820      	ldrh	r0, [r4, #0]
   d4dc2:	f000 f95f 	bl	d5084 <HAL_Pin_Mode>
   d4dc6:	200a      	movs	r0, #10
   d4dc8:	f000 f92c 	bl	d5024 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d4dcc:	8820      	ldrh	r0, [r4, #0]
   d4dce:	f7ff ff4f 	bl	d4c70 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4dd2:	4604      	mov	r4, r0

    interrupts();
   d4dd4:	f000 fee0 	bl	d5b98 <_Z10interruptsv>
   d4dd8:	2035      	movs	r0, #53	; 0x35
   d4dda:	f000 f923 	bl	d5024 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d4dde:	4620      	mov	r0, r4
   d4de0:	bd10      	pop	{r4, pc}

000d4de2 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d4de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4de6:	4605      	mov	r5, r0
   d4de8:	4688      	mov	r8, r1
   d4dea:	4617      	mov	r7, r2
   d4dec:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4dee:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d4df0:	ea18 0f04 	tst.w	r8, r4
   d4df4:	bf14      	ite	ne
   d4df6:	2101      	movne	r1, #1
   d4df8:	2100      	moveq	r1, #0
   d4dfa:	4628      	mov	r0, r5
   d4dfc:	f7ff ffa1 	bl	d4d42 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4e00:	0064      	lsls	r4, r4, #1
   d4e02:	3e01      	subs	r6, #1
   d4e04:	b2e4      	uxtb	r4, r4
   d4e06:	d1f3      	bne.n	d4df0 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d4e08:	b167      	cbz	r7, d4e24 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d4e0a:	f000 fec3 	bl	d5b94 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d4e0e:	8828      	ldrh	r0, [r5, #0]
   d4e10:	f7ff ff14 	bl	d4c3c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4e14:	8828      	ldrh	r0, [r5, #0]
   d4e16:	2101      	movs	r1, #1
   d4e18:	f000 f934 	bl	d5084 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d4e20:	f000 beba 	b.w	d5b98 <_Z10interruptsv>
   d4e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e28 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d4e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e2a:	4607      	mov	r7, r0
   d4e2c:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4e2e:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4e30:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4e32:	4638      	mov	r0, r7
   d4e34:	f7ff ffb5 	bl	d4da2 <_ZN7OneWire8read_bitEv>
   d4e38:	b100      	cbz	r0, d4e3c <_ZN7OneWire4readEv+0x14>
   d4e3a:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4e3c:	0064      	lsls	r4, r4, #1
   d4e3e:	3e01      	subs	r6, #1
   d4e40:	b2e4      	uxtb	r4, r4
   d4e42:	d1f6      	bne.n	d4e32 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4e44:	4628      	mov	r0, r5
   d4e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e48 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4e48:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d4e4a:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4e4c:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d4e4e:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4e50:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4e52:	f7ff ffc6 	bl	d4de2 <_ZN7OneWire5writeEhh>
   d4e56:	1e65      	subs	r5, r4, #1
   d4e58:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d4e5a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4e5e:	2200      	movs	r2, #0
   d4e60:	4630      	mov	r0, r6
   d4e62:	f7ff ffbe 	bl	d4de2 <_ZN7OneWire5writeEhh>
   d4e66:	42a5      	cmp	r5, r4
   d4e68:	d1f7      	bne.n	d4e5a <_ZN7OneWire6selectEPKh+0x12>
}
   d4e6a:	bd70      	pop	{r4, r5, r6, pc}

000d4e6c <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4e6c:	2300      	movs	r3, #0
   d4e6e:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4e70:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4e72:	72c3      	strb	r3, [r0, #11]
   d4e74:	f100 020a 	add.w	r2, r0, #10
   d4e78:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4e7a:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d4e7e:	4282      	cmp	r2, r0
   d4e80:	d1fb      	bne.n	d4e7a <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d4e82:	4770      	bx	lr

000d4e84 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4e88:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4e8a:	4604      	mov	r4, r0
   d4e8c:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4e8e:	2d00      	cmp	r5, #0
   d4e90:	d15e      	bne.n	d4f50 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d4e92:	f7ff ff19 	bl	d4cc8 <_ZN7OneWire5resetEv>
   d4e96:	b920      	cbnz	r0, d4ea2 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4e98:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4e9a:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4e9c:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4ea2:	462a      	mov	r2, r5
   d4ea4:	21f0      	movs	r1, #240	; 0xf0
   d4ea6:	4620      	mov	r0, r4
   d4ea8:	f7ff ff9b 	bl	d4de2 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4eac:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4eae:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4eb0:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	f7ff ff75 	bl	d4da2 <_ZN7OneWire8read_bitEv>
   d4eb8:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d4eba:	4620      	mov	r0, r4
   d4ebc:	f7ff ff71 	bl	d4da2 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4ec0:	f1b9 0f01 	cmp.w	r9, #1
   d4ec4:	d102      	bne.n	d4ecc <_ZN7OneWire6searchEPh+0x48>
   d4ec6:	2801      	cmp	r0, #1
   d4ec8:	d11b      	bne.n	d4f02 <_ZN7OneWire6searchEPh+0x7e>
   d4eca:	e037      	b.n	d4f3c <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d4ecc:	4581      	cmp	r9, r0
   d4ece:	eb04 0305 	add.w	r3, r4, r5
   d4ed2:	d11e      	bne.n	d4f12 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4ed4:	7aa2      	ldrb	r2, [r4, #10]
   d4ed6:	4297      	cmp	r7, r2
   d4ed8:	d207      	bcs.n	d4eea <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d4eda:	789a      	ldrb	r2, [r3, #2]
   d4edc:	4216      	tst	r6, r2
   d4ede:	bf14      	ite	ne
   d4ee0:	f04f 0901 	movne.w	r9, #1
   d4ee4:	f04f 0900 	moveq.w	r9, #0
   d4ee8:	e004      	b.n	d4ef4 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4eea:	bf0c      	ite	eq
   d4eec:	f04f 0901 	moveq.w	r9, #1
   d4ef0:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4ef4:	f1b9 0f00 	cmp.w	r9, #0
   d4ef8:	d103      	bne.n	d4f02 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d4efa:	2f08      	cmp	r7, #8
   d4efc:	d808      	bhi.n	d4f10 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d4efe:	72e7      	strb	r7, [r4, #11]
   d4f00:	e006      	b.n	d4f10 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d4f02:	1962      	adds	r2, r4, r5
   d4f04:	f04f 0901 	mov.w	r9, #1
   d4f08:	7893      	ldrb	r3, [r2, #2]
   d4f0a:	4333      	orrs	r3, r6
   d4f0c:	7093      	strb	r3, [r2, #2]
   d4f0e:	e004      	b.n	d4f1a <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4f10:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4f12:	789a      	ldrb	r2, [r3, #2]
   d4f14:	ea22 0206 	bic.w	r2, r2, r6
   d4f18:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4f1a:	4649      	mov	r1, r9
   d4f1c:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d4f1e:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d4f20:	f7ff ff0f 	bl	d4d42 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4f24:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4f28:	bf04      	itt	eq
   d4f2a:	3501      	addeq	r5, #1
   d4f2c:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4f2e:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4f32:	bf08      	it	eq
   d4f34:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4f36:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4f38:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4f3a:	d9ba      	bls.n	d4eb2 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4f3c:	2f40      	cmp	r7, #64	; 0x40
   d4f3e:	d907      	bls.n	d4f50 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4f40:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4f44:	f1ba 0f00 	cmp.w	sl, #0
   d4f48:	d112      	bne.n	d4f70 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4f4a:	2301      	movs	r3, #1
   d4f4c:	7323      	strb	r3, [r4, #12]
   d4f4e:	e00f      	b.n	d4f70 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d4f50:	2000      	movs	r0, #0
   d4f52:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4f54:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4f56:	72e0      	strb	r0, [r4, #11]
   d4f58:	1c63      	adds	r3, r4, #1
   d4f5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d4f5e:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d4f60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4f64:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4f68:	42a3      	cmp	r3, r4
   d4f6a:	d1f9      	bne.n	d4f60 <_ZN7OneWire6searchEPh+0xdc>
   d4f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d4f70:	78a3      	ldrb	r3, [r4, #2]
   d4f72:	2b00      	cmp	r3, #0
   d4f74:	d0ec      	beq.n	d4f50 <_ZN7OneWire6searchEPh+0xcc>
   d4f76:	2001      	movs	r0, #1
   d4f78:	e7ee      	b.n	d4f58 <_ZN7OneWire6searchEPh+0xd4>

000d4f7a <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4f7a:	b530      	push	{r4, r5, lr}
   d4f7c:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d4f7e:	2000      	movs	r0, #0

    while (len--) {
   d4f80:	3901      	subs	r1, #1
   d4f82:	b2c9      	uxtb	r1, r1
   d4f84:	29ff      	cmp	r1, #255	; 0xff
   d4f86:	d013      	beq.n	d4fb0 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4f88:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4f8c:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4f8e:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d4f92:	f013 0f01 	tst.w	r3, #1
   d4f96:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d4f9a:	bf1c      	itt	ne
   d4f9c:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4fa0:	b2d8      	uxtbne	r0, r3
   d4fa2:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4fa4:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d4fa8:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4fac:	d1ef      	bne.n	d4f8e <_ZN7OneWire4crc8EPhh+0x14>
   d4fae:	e7e7      	b.n	d4f80 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d4fb0:	bd30      	pop	{r4, r5, pc}
	...

000d4fb4 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4fb4:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4fb6:	f000 f855 	bl	d5064 <HAL_Pin_Map>
   d4fba:	4b01      	ldr	r3, [pc, #4]	; (d4fc0 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4fbc:	6018      	str	r0, [r3, #0]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	2003e374 	.word	0x2003e374

000d4fc4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <os_thread_is_current+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	689b      	ldr	r3, [r3, #8]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030248 	.word	0x00030248

000d4fd4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <os_thread_join+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	691b      	ldr	r3, [r3, #16]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030248 	.word	0x00030248

000d4fe4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <os_thread_cleanup+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	695b      	ldr	r3, [r3, #20]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030248 	.word	0x00030248

000d4ff4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <os_mutex_create+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030248 	.word	0x00030248

000d5004 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <os_mutex_recursive_create+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030248 	.word	0x00030248

000d5014 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_RNG_GetRandomNumber+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	685b      	ldr	r3, [r3, #4]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030218 	.word	0x00030218

000d5024 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_Delay_Microseconds+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	68db      	ldr	r3, [r3, #12]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030218 	.word	0x00030218

000d5034 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	695b      	ldr	r3, [r3, #20]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030218 	.word	0x00030218

000d5044 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_RTC_Get_UnixTime+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	69db      	ldr	r3, [r3, #28]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030218 	.word	0x00030218

000d5054 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_RTC_Time_Is_Valid+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030218 	.word	0x00030218

000d5064 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_Pin_Map+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	681b      	ldr	r3, [r3, #0]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003022c 	.word	0x0003022c

000d5074 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_Validate_Pin_Function+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	685b      	ldr	r3, [r3, #4]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	0003022c 	.word	0x0003022c

000d5084 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_Pin_Mode+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	689b      	ldr	r3, [r3, #8]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	0003022c 	.word	0x0003022c

000d5094 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_Interrupts_Enable_All+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6a1b      	ldr	r3, [r3, #32]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003022c 	.word	0x0003022c

000d50a4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_Interrupts_Disable_All+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003022c 	.word	0x0003022c

000d50b4 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_ADC_Read+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003022c 	.word	0x0003022c

000d50c4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_I2C_Write_Data+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a1b      	ldr	r3, [r3, #32]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030228 	.word	0x00030228

000d50d4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_I2C_Available_Data+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030228 	.word	0x00030228

000d50e4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <HAL_I2C_Read_Data+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030228 	.word	0x00030228

000d50f4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <HAL_I2C_Peek_Data+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030228 	.word	0x00030228

000d5104 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <HAL_I2C_Flush_Data+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030228 	.word	0x00030228

000d5114 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <HAL_I2C_Is_Enabled+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030228 	.word	0x00030228

000d5124 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <HAL_I2C_Init+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	00030228 	.word	0x00030228

000d5134 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <inet_inet_ntop+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	695b      	ldr	r3, [r3, #20]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	00030264 	.word	0x00030264

000d5144 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <netdb_freeaddrinfo+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	689b      	ldr	r3, [r3, #8]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	00030268 	.word	0x00030268

000d5154 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <netdb_getaddrinfo+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	68db      	ldr	r3, [r3, #12]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030268 	.word	0x00030268

000d5164 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_SPI_Init+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	69db      	ldr	r3, [r3, #28]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030230 	.word	0x00030230

000d5174 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_SPI_Is_Enabled+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6a1b      	ldr	r3, [r3, #32]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030230 	.word	0x00030230

000d5184 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_USART_Init+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	681b      	ldr	r3, [r3, #0]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003023c 	.word	0x0003023c

000d5194 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_USART_Write_Data+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	68db      	ldr	r3, [r3, #12]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003023c 	.word	0x0003023c

000d51a4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_USART_Available_Data+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	691b      	ldr	r3, [r3, #16]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	0003023c 	.word	0x0003023c

000d51b4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <HAL_USART_Read_Data+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	695b      	ldr	r3, [r3, #20]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	0003023c 	.word	0x0003023c

000d51c4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <HAL_USART_Peek_Data+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	699b      	ldr	r3, [r3, #24]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	0003023c 	.word	0x0003023c

000d51d4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <HAL_USART_Flush_Data+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	69db      	ldr	r3, [r3, #28]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	0003023c 	.word	0x0003023c

000d51e4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <HAL_USART_Is_Enabled+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6a1b      	ldr	r3, [r3, #32]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	0003023c 	.word	0x0003023c

000d51f4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <HAL_USART_Available_Data_For_Write+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	0003023c 	.word	0x0003023c

000d5204 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <HAL_USB_USART_Init+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	681b      	ldr	r3, [r3, #0]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	0003024c 	.word	0x0003024c

000d5214 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <HAL_USB_USART_Available_Data+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	691b      	ldr	r3, [r3, #16]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	0003024c 	.word	0x0003024c

000d5224 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	695b      	ldr	r3, [r3, #20]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003024c 	.word	0x0003024c

000d5234 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <HAL_USB_USART_Receive_Data+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	699b      	ldr	r3, [r3, #24]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003024c 	.word	0x0003024c

000d5244 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <HAL_USB_USART_Send_Data+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	69db      	ldr	r3, [r3, #28]
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003024c 	.word	0x0003024c

000d5254 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <HAL_USB_USART_Flush_Data+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6a1b      	ldr	r3, [r3, #32]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	0003024c 	.word	0x0003024c

000d5264 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <wlan_connected_info+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030274 	.word	0x00030274

000d5274 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <panic_+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030260 	.word	0x00030260

000d5284 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <system_mode+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	681b      	ldr	r3, [r3, #0]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030220 	.word	0x00030220

000d5294 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <set_system_mode+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	685b      	ldr	r3, [r3, #4]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030220 	.word	0x00030220

000d52a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <system_delay_ms+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	695b      	ldr	r3, [r3, #20]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030220 	.word	0x00030220

000d52b4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <application_thread_current+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030220 	.word	0x00030220

000d52c4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <application_thread_invoke+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	00030220 	.word	0x00030220

000d52d4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <system_thread_get_state+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	00030220 	.word	0x00030220

000d52e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b03      	ldr	r3, [pc, #12]	; (d52f4 <system_ctrl_set_app_request_handler+0x10>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d52ee:	9301      	str	r3, [sp, #4]
   d52f0:	bd08      	pop	{r3, pc}
   d52f2:	0000      	.short	0x0000
   d52f4:	00030220 	.word	0x00030220

000d52f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b03      	ldr	r3, [pc, #12]	; (d5308 <system_ctrl_set_result+0x10>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5302:	9301      	str	r3, [sp, #4]
   d5304:	bd08      	pop	{r3, pc}
   d5306:	0000      	.short	0x0000
   d5308:	00030220 	.word	0x00030220

000d530c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <spark_variable+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	681b      	ldr	r3, [r3, #0]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	00030244 	.word	0x00030244

000d531c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <spark_function+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	685b      	ldr	r3, [r3, #4]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	00030244 	.word	0x00030244

000d532c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <spark_process+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	689b      	ldr	r3, [r3, #8]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030244 	.word	0x00030244

000d533c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <spark_cloud_flag_connected+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	695b      	ldr	r3, [r3, #20]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030244 	.word	0x00030244

000d534c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <spark_deviceID+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	69db      	ldr	r3, [r3, #28]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030244 	.word	0x00030244

000d535c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <spark_send_event+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6a1b      	ldr	r3, [r3, #32]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030244 	.word	0x00030244

000d536c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <spark_subscribe+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030244 	.word	0x00030244

000d537c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <spark_sync_time+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030244 	.word	0x00030244

000d538c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <spark_sync_time_pending+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030244 	.word	0x00030244

000d539c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030244 	.word	0x00030244

000d53ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <network_connect+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	685b      	ldr	r3, [r3, #4]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030240 	.word	0x00030240

000d53bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <network_connecting+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	689b      	ldr	r3, [r3, #8]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030240 	.word	0x00030240

000d53cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <network_disconnect+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	68db      	ldr	r3, [r3, #12]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030240 	.word	0x00030240

000d53dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <network_ready+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	691b      	ldr	r3, [r3, #16]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030240 	.word	0x00030240

000d53ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <network_on+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	695b      	ldr	r3, [r3, #20]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030240 	.word	0x00030240

000d53fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <network_off+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	699b      	ldr	r3, [r3, #24]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030240 	.word	0x00030240

000d540c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <network_listen+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	69db      	ldr	r3, [r3, #28]
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030240 	.word	0x00030240

000d541c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <network_listening+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6a1b      	ldr	r3, [r3, #32]
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030240 	.word	0x00030240

000d542c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <network_set_listen_timeout+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030240 	.word	0x00030240

000d543c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <network_get_listen_timeout+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030240 	.word	0x00030240

000d544c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <malloc+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	681b      	ldr	r3, [r3, #0]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	0003021c 	.word	0x0003021c

000d545c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <free+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	685b      	ldr	r3, [r3, #4]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	0003021c 	.word	0x0003021c

000d546c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <realloc+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	689b      	ldr	r3, [r3, #8]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	0003021c 	.word	0x0003021c

000d547c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <siscanf+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	699b      	ldr	r3, [r3, #24]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	0003021c 	.word	0x0003021c

000d548c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <snprintf+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	69db      	ldr	r3, [r3, #28]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	0003021c 	.word	0x0003021c

000d549c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <abort+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003021c 	.word	0x0003021c

000d54ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <_malloc_r+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003021c 	.word	0x0003021c

000d54bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d54bc:	2100      	movs	r1, #0
   d54be:	f7ff bef1 	b.w	d52a4 <system_delay_ms>

000d54c2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d54c2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54c4:	6883      	ldr	r3, [r0, #8]
   d54c6:	4604      	mov	r4, r0
   d54c8:	b90b      	cbnz	r3, d54ce <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d54ca:	f001 f9e8 	bl	d689e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54ce:	68c3      	ldr	r3, [r0, #12]
   d54d0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d54d2:	68a3      	ldr	r3, [r4, #8]
   d54d4:	b11b      	cbz	r3, d54de <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d54d6:	2203      	movs	r2, #3
   d54d8:	4621      	mov	r1, r4
   d54da:	4620      	mov	r0, r4
   d54dc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d54de:	4620      	mov	r0, r4
   d54e0:	2110      	movs	r1, #16
}
   d54e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d54e6:	f001 b9d8 	b.w	d689a <_ZdlPvj>

000d54ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54ea:	4770      	bx	lr

000d54ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d54ec:	2000      	movs	r0, #0
   d54ee:	4770      	bx	lr

000d54f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d54f0:	b510      	push	{r4, lr}
   d54f2:	2110      	movs	r1, #16
   d54f4:	4604      	mov	r4, r0
   d54f6:	f001 f9d0 	bl	d689a <_ZdlPvj>
   d54fa:	4620      	mov	r0, r4
   d54fc:	bd10      	pop	{r4, pc}

000d54fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d54fe:	b508      	push	{r3, lr}
      { delete this; }
   d5500:	b108      	cbz	r0, d5506 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5502:	f7ff fff5 	bl	d54f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5506:	bd08      	pop	{r3, pc}

000d5508 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5508:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d550a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d550c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d550e:	b113      	cbz	r3, d5516 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5510:	2203      	movs	r2, #3
   d5512:	4601      	mov	r1, r0
   d5514:	4798      	blx	r3
    }
   d5516:	4620      	mov	r0, r4
   d5518:	bd10      	pop	{r4, pc}

000d551a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d551a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d551c:	68c4      	ldr	r4, [r0, #12]
   d551e:	b1ec      	cbz	r4, d555c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5520:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5522:	2b02      	cmp	r3, #2
   d5524:	d102      	bne.n	d552c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5526:	68e0      	ldr	r0, [r4, #12]
   d5528:	f7ff ff98 	bl	d545c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d552c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d552e:	b135      	cbz	r5, d553e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5530:	4628      	mov	r0, r5
   d5532:	f7ff ffe9 	bl	d5508 <_ZNSt14_Function_baseD1Ev>
   d5536:	2110      	movs	r1, #16
   d5538:	4628      	mov	r0, r5
   d553a:	f001 f9ae 	bl	d689a <_ZdlPvj>
   d553e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5540:	b135      	cbz	r5, d5550 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d5542:	4628      	mov	r0, r5
   d5544:	f7ff ffe0 	bl	d5508 <_ZNSt14_Function_baseD1Ev>
   d5548:	2110      	movs	r1, #16
   d554a:	4628      	mov	r0, r5
   d554c:	f001 f9a5 	bl	d689a <_ZdlPvj>
   d5550:	4620      	mov	r0, r4
   d5552:	2114      	movs	r1, #20
   d5554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5558:	f001 b99f 	b.w	d689a <_ZdlPvj>
   d555c:	bd38      	pop	{r3, r4, r5, pc}

000d555e <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d555e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5560:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d5562:	4668      	mov	r0, sp
   d5564:	f000 fdca 	bl	d60fc <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5568:	68a3      	ldr	r3, [r4, #8]
   d556a:	b90b      	cbnz	r3, d5570 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d556c:	f001 f997 	bl	d689e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5570:	68e3      	ldr	r3, [r4, #12]
   d5572:	4669      	mov	r1, sp
   d5574:	4620      	mov	r0, r4
   d5576:	4798      	blx	r3
   d5578:	4604      	mov	r4, r0
   d557a:	4668      	mov	r0, sp
   d557c:	f000 fd77 	bl	d606e <_ZN6StringD1Ev>
}
   d5580:	4620      	mov	r0, r4
   d5582:	b004      	add	sp, #16
   d5584:	bd10      	pop	{r4, pc}

000d5586 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5586:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5588:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d558a:	b085      	sub	sp, #20
   d558c:	4607      	mov	r7, r0
   d558e:	460e      	mov	r6, r1
   d5590:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5592:	2100      	movs	r1, #0
   d5594:	4622      	mov	r2, r4
   d5596:	4668      	mov	r0, sp
   d5598:	f001 fffb 	bl	d7592 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d559c:	2200      	movs	r2, #0
   d559e:	4669      	mov	r1, sp
   d55a0:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d55a2:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d55a6:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d55a8:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d55aa:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d55ac:	f7ff feb6 	bl	d531c <spark_function>
}
   d55b0:	b005      	add	sp, #20
   d55b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55b4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d55b4:	b513      	push	{r0, r1, r4, lr}
   d55b6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d55b8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d55bc:	2300      	movs	r3, #0
   d55be:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55c0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d55c2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d55c4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55c6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d55c8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55ca:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55cc:	f7fe fe52 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55d0:	4620      	mov	r0, r4
   d55d2:	b002      	add	sp, #8
   d55d4:	bd10      	pop	{r4, pc}

000d55d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d55d6:	680b      	ldr	r3, [r1, #0]
   d55d8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d55da:	b113      	cbz	r3, d55e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d55dc:	685a      	ldr	r2, [r3, #4]
   d55de:	3201      	adds	r2, #1
   d55e0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d55e2:	4770      	bx	lr

000d55e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d55e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55e6:	460c      	mov	r4, r1
   d55e8:	ad02      	add	r5, sp, #8
   d55ea:	f854 3b04 	ldr.w	r3, [r4], #4
   d55ee:	f845 3d08 	str.w	r3, [r5, #-8]!
   d55f2:	4606      	mov	r6, r0
   d55f4:	460f      	mov	r7, r1
   d55f6:	a801      	add	r0, sp, #4
   d55f8:	4621      	mov	r1, r4
   d55fa:	f7ff ffec 	bl	d55d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d55fe:	4629      	mov	r1, r5
   d5600:	4630      	mov	r0, r6
   d5602:	f7ff ffd7 	bl	d55b4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5606:	a801      	add	r0, sp, #4
   d5608:	f7fe fe34 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d560c:	4620      	mov	r0, r4
   d560e:	f7fe fe31 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5612:	4638      	mov	r0, r7
   d5614:	2108      	movs	r1, #8
   d5616:	f001 f940 	bl	d689a <_ZdlPvj>
        return p;
    }
   d561a:	4630      	mov	r0, r6
   d561c:	b003      	add	sp, #12
   d561e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5620 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5620:	b513      	push	{r0, r1, r4, lr}
   d5622:	460b      	mov	r3, r1
   d5624:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5626:	c803      	ldmia	r0, {r0, r1}
   d5628:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d562c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5630:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5634:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5638:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d563c:	b002      	add	sp, #8
   d563e:	bd10      	pop	{r4, pc}

000d5640 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5640:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5642:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5644:	b90a      	cbnz	r2, d564a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5646:	f001 f92a 	bl	d689e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d564a:	68c3      	ldr	r3, [r0, #12]
    }
   d564c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5650:	4718      	bx	r3

000d5652 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5652:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5654:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5656:	f100 0110 	add.w	r1, r0, #16
   d565a:	f7ff fff1 	bl	d5640 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d565e:	bd08      	pop	{r3, pc}

000d5660 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5660:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5662:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5664:	b90a      	cbnz	r2, d566a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5666:	f001 f91a 	bl	d689e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d566a:	68c3      	ldr	r3, [r0, #12]
    }
   d566c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5670:	4718      	bx	r3

000d5672 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5672:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5674:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5676:	f100 0110 	add.w	r1, r0, #16
   d567a:	f7ff fff1 	bl	d5660 <_ZNKSt8functionIFvRKbEEclES1_>
   d567e:	bd08      	pop	{r3, pc}

000d5680 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5680:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5682:	2300      	movs	r3, #0
   d5684:	6083      	str	r3, [r0, #8]
   d5686:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5688:	4604      	mov	r4, r0
   d568a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d568c:	b12b      	cbz	r3, d569a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d568e:	2202      	movs	r2, #2
   d5690:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5692:	68eb      	ldr	r3, [r5, #12]
   d5694:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5696:	68ab      	ldr	r3, [r5, #8]
   d5698:	60a3      	str	r3, [r4, #8]
	}
    }
   d569a:	4620      	mov	r0, r4
   d569c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d56a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d56a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d56a8:	b086      	sub	sp, #24
   d56aa:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56ac:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d56b0:	808b      	strh	r3, [r1, #4]
   d56b2:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56b4:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d56b6:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d56ba:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d56bc:	f04f 0002 	mov.w	r0, #2
   d56c0:	e8d4 1f4f 	ldrexb	r1, [r4]
   d56c4:	4299      	cmp	r1, r3
   d56c6:	d103      	bne.n	d56d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d56c8:	e8c4 0f45 	strexb	r5, r0, [r4]
   d56cc:	2d00      	cmp	r5, #0
   d56ce:	d1f7      	bne.n	d56c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d56d0:	d002      	beq.n	d56d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d56d2:	f88d 1000 	strb.w	r1, [sp]
   d56d6:	e06b      	b.n	d57b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d56d8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56dc:	bf1e      	ittt	ne
   d56de:	60e7      	strne	r7, [r4, #12]
   d56e0:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d56e2:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d56e4:	2301      	movs	r3, #1
   d56e6:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d56ea:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d56ec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d56ee:	f104 0308 	add.w	r3, r4, #8
   d56f2:	f3bf 8f5f 	dmb	sy
   d56f6:	e853 6f00 	ldrex	r6, [r3]
   d56fa:	e843 0200 	strex	r2, r0, [r3]
   d56fe:	2a00      	cmp	r2, #0
   d5700:	d1f9      	bne.n	d56f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5702:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5706:	2e00      	cmp	r6, #0
   d5708:	d052      	beq.n	d57b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d570a:	f7ff fdd3 	bl	d52b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d570e:	b120      	cbz	r0, d571a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5710:	4629      	mov	r1, r5
   d5712:	4630      	mov	r0, r6
   d5714:	f7ff ff94 	bl	d5640 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5718:	e043      	b.n	d57a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d571a:	4631      	mov	r1, r6
   d571c:	4668      	mov	r0, sp
   d571e:	f7ff ffaf 	bl	d5680 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5722:	68e0      	ldr	r0, [r4, #12]
   d5724:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5728:	b108      	cbz	r0, d572e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d572a:	f001 ff75 	bl	d7618 <strdup>
   d572e:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5730:	2010      	movs	r0, #16
   d5732:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5736:	f7fe fcae 	bl	d4096 <_Znwj>
   d573a:	4605      	mov	r5, r0
   d573c:	b330      	cbz	r0, d578c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d573e:	f04f 0800 	mov.w	r8, #0
   d5742:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5746:	2018      	movs	r0, #24
   d5748:	f7fe fca5 	bl	d4096 <_Znwj>
   d574c:	4604      	mov	r4, r0
   d574e:	b1c0      	cbz	r0, d5782 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5750:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5754:	4601      	mov	r1, r0
   d5756:	4668      	mov	r0, sp
   d5758:	f7ff ff62 	bl	d5620 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d575c:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d575e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5760:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5762:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5764:	9202      	str	r2, [sp, #8]
   d5766:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5768:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d576a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d576e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5770:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5774:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5778:	9b04      	ldr	r3, [sp, #16]
   d577a:	9203      	str	r2, [sp, #12]
   d577c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d577e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5782:	4b0e      	ldr	r3, [pc, #56]	; (d57bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5784:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5786:	4b0e      	ldr	r3, [pc, #56]	; (d57c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5788:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d578a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d578c:	9804      	ldr	r0, [sp, #16]
   d578e:	f7ff fe65 	bl	d545c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5792:	4668      	mov	r0, sp
   d5794:	f7ff feb8 	bl	d5508 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5798:	2200      	movs	r2, #0
   d579a:	4629      	mov	r1, r5
   d579c:	4809      	ldr	r0, [pc, #36]	; (d57c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d579e:	f7ff fd91 	bl	d52c4 <application_thread_invoke>
   d57a2:	4630      	mov	r0, r6
   d57a4:	f7ff feb0 	bl	d5508 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d57a8:	2110      	movs	r1, #16
   d57aa:	4630      	mov	r0, r6
   d57ac:	f001 f875 	bl	d689a <_ZdlPvj>
   d57b0:	4638      	mov	r0, r7
   d57b2:	f7ff fe53 	bl	d545c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d57b6:	b006      	add	sp, #24
   d57b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d57bc:	000d5653 	.word	0x000d5653
   d57c0:	000d58b1 	.word	0x000d58b1
   d57c4:	000d54c3 	.word	0x000d54c3

000d57c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57cc:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d57ce:	ad07      	add	r5, sp, #28
   d57d0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57d4:	4606      	mov	r6, r0
   d57d6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d57d8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d57da:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57dc:	460f      	mov	r7, r1
   d57de:	4690      	mov	r8, r2
   d57e0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d57e4:	f8c5 b004 	str.w	fp, [r5, #4]
   d57e8:	f8c5 b008 	str.w	fp, [r5, #8]
   d57ec:	9307      	str	r3, [sp, #28]
   d57ee:	f7fe fc52 	bl	d4096 <_Znwj>
   d57f2:	4604      	mov	r4, r0
   d57f4:	b138      	cbz	r0, d5806 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d57f6:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57fa:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d57fe:	f8c0 b004 	str.w	fp, [r0, #4]
   d5802:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5806:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5808:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d580a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d580c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d580e:	f7fe fc42 	bl	d4096 <_Znwj>
   d5812:	b128      	cbz	r0, d5820 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5814:	2301      	movs	r3, #1
   d5816:	6043      	str	r3, [r0, #4]
   d5818:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d581a:	4b23      	ldr	r3, [pc, #140]	; (d58a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d581c:	6003      	str	r3, [r0, #0]
   d581e:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5820:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5822:	4b22      	ldr	r3, [pc, #136]	; (d58ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5824:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5826:	2008      	movs	r0, #8
   d5828:	f7fe fc35 	bl	d4096 <_Znwj>
   d582c:	4604      	mov	r4, r0
   d582e:	b128      	cbz	r0, d583c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5830:	9b03      	ldr	r3, [sp, #12]
   d5832:	f840 3b04 	str.w	r3, [r0], #4
   d5836:	a904      	add	r1, sp, #16
   d5838:	f7ff fecd 	bl	d55d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d583c:	9500      	str	r5, [sp, #0]
   d583e:	fa5f f38a 	uxtb.w	r3, sl
   d5842:	464a      	mov	r2, r9
   d5844:	4641      	mov	r1, r8
   d5846:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5848:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d584a:	f7ff fd87 	bl	d535c <spark_send_event>
   d584e:	b9b8      	cbnz	r0, d5880 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5850:	9b03      	ldr	r3, [sp, #12]
   d5852:	785b      	ldrb	r3, [r3, #1]
   d5854:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5858:	b993      	cbnz	r3, d5880 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d585a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d585e:	a905      	add	r1, sp, #20
   d5860:	a803      	add	r0, sp, #12
   d5862:	9205      	str	r2, [sp, #20]
   d5864:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5868:	f7ff ff1a 	bl	d56a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d586c:	9805      	ldr	r0, [sp, #20]
   d586e:	f7ff fdf5 	bl	d545c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5872:	a805      	add	r0, sp, #20
   d5874:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5876:	f7ff feb5 	bl	d55e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d587a:	a806      	add	r0, sp, #24
   d587c:	f7fe fcfa 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5880:	9b03      	ldr	r3, [sp, #12]
   d5882:	9305      	str	r3, [sp, #20]
   d5884:	a904      	add	r1, sp, #16
   d5886:	a806      	add	r0, sp, #24
   d5888:	f7ff fea5 	bl	d55d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d588c:	a905      	add	r1, sp, #20
   d588e:	4630      	mov	r0, r6
   d5890:	f7ff fe90 	bl	d55b4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5894:	a806      	add	r0, sp, #24
   d5896:	f7fe fced 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d589a:	a804      	add	r0, sp, #16
   d589c:	f7fe fcea 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d58a0:	4630      	mov	r0, r6
   d58a2:	b00b      	add	sp, #44	; 0x2c
   d58a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58a8:	000d8170 	.word	0x000d8170
   d58ac:	000d5a1d 	.word	0x000d5a1d

000d58b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d58b0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d58b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58b4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d58b6:	d006      	beq.n	d58c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d58b8:	2a03      	cmp	r2, #3
   d58ba:	d017      	beq.n	d58ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d58bc:	2a01      	cmp	r2, #1
   d58be:	d121      	bne.n	d5904 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d58c0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58c2:	6003      	str	r3, [r0, #0]
	      break;
   d58c4:	e01e      	b.n	d5904 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58c6:	2018      	movs	r0, #24
   d58c8:	680e      	ldr	r6, [r1, #0]
   d58ca:	f7fe fbe4 	bl	d4096 <_Znwj>
   d58ce:	4605      	mov	r5, r0
   d58d0:	b150      	cbz	r0, d58e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58d2:	4631      	mov	r1, r6
   d58d4:	f7ff fed4 	bl	d5680 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d58d8:	6930      	ldr	r0, [r6, #16]
   d58da:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d58de:	b108      	cbz	r0, d58e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d58e0:	f001 fe9a 	bl	d7618 <strdup>
   d58e4:	6128      	str	r0, [r5, #16]
   d58e6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58e8:	6025      	str	r5, [r4, #0]
   d58ea:	e00b      	b.n	d5904 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58ec:	6804      	ldr	r4, [r0, #0]
   d58ee:	b14c      	cbz	r4, d5904 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d58f0:	6920      	ldr	r0, [r4, #16]
   d58f2:	f7ff fdb3 	bl	d545c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58f6:	4620      	mov	r0, r4
   d58f8:	f7ff fe06 	bl	d5508 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58fc:	2118      	movs	r1, #24
   d58fe:	4620      	mov	r0, r4
   d5900:	f000 ffcb 	bl	d689a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5904:	2000      	movs	r0, #0
   d5906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5908 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5908:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d590a:	2300      	movs	r3, #0
   d590c:	6083      	str	r3, [r0, #8]
   d590e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5910:	4604      	mov	r4, r0
   d5912:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5914:	b12b      	cbz	r3, d5922 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5916:	2202      	movs	r2, #2
   d5918:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d591a:	68eb      	ldr	r3, [r5, #12]
   d591c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d591e:	68ab      	ldr	r3, [r5, #8]
   d5920:	60a3      	str	r3, [r4, #8]
	}
    }
   d5922:	4620      	mov	r0, r4
   d5924:	bd38      	pop	{r3, r4, r5, pc}

000d5926 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5926:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5928:	b570      	push	{r4, r5, r6, lr}
   d592a:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d592c:	d006      	beq.n	d593c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d592e:	2a03      	cmp	r2, #3
   d5930:	d011      	beq.n	d5956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5932:	2a01      	cmp	r2, #1
   d5934:	d118      	bne.n	d5968 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5936:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5938:	6003      	str	r3, [r0, #0]
	      break;
   d593a:	e015      	b.n	d5968 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d593c:	2014      	movs	r0, #20
   d593e:	680e      	ldr	r6, [r1, #0]
   d5940:	f7fe fba9 	bl	d4096 <_Znwj>
   d5944:	4605      	mov	r5, r0
   d5946:	b120      	cbz	r0, d5952 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5948:	4631      	mov	r1, r6
   d594a:	f7ff ffdd 	bl	d5908 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d594e:	7c33      	ldrb	r3, [r6, #16]
   d5950:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5952:	6025      	str	r5, [r4, #0]
   d5954:	e008      	b.n	d5968 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5956:	6804      	ldr	r4, [r0, #0]
   d5958:	b134      	cbz	r4, d5968 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d595a:	4620      	mov	r0, r4
   d595c:	f7ff fdd4 	bl	d5508 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5960:	2114      	movs	r1, #20
   d5962:	4620      	mov	r0, r4
   d5964:	f000 ff99 	bl	d689a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5968:	2000      	movs	r0, #0
   d596a:	bd70      	pop	{r4, r5, r6, pc}

000d596c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d596c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d596e:	2300      	movs	r3, #0
   d5970:	b087      	sub	sp, #28
   d5972:	460c      	mov	r4, r1
   d5974:	f3bf 8f5f 	dmb	sy
   d5978:	e850 6f00 	ldrex	r6, [r0]
   d597c:	e840 3200 	strex	r2, r3, [r0]
   d5980:	2a00      	cmp	r2, #0
   d5982:	d1f9      	bne.n	d5978 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5984:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5988:	2e00      	cmp	r6, #0
   d598a:	d03f      	beq.n	d5a0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d598c:	4618      	mov	r0, r3
   d598e:	f7ff fc91 	bl	d52b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5992:	4607      	mov	r7, r0
   d5994:	b120      	cbz	r0, d59a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5996:	4621      	mov	r1, r4
   d5998:	4630      	mov	r0, r6
   d599a:	f7ff fe61 	bl	d5660 <_ZNKSt8functionIFvRKbEEclES1_>
   d599e:	e02e      	b.n	d59fe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d59a0:	4631      	mov	r1, r6
   d59a2:	a801      	add	r0, sp, #4
   d59a4:	f7ff ffb0 	bl	d5908 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d59a8:	7823      	ldrb	r3, [r4, #0]
   d59aa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d59ae:	2010      	movs	r0, #16
   d59b0:	f7fe fb71 	bl	d4096 <_Znwj>
   d59b4:	4605      	mov	r5, r0
   d59b6:	b1d0      	cbz	r0, d59ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59b8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59ba:	2014      	movs	r0, #20
   d59bc:	f7fe fb6b 	bl	d4096 <_Znwj>
   d59c0:	4604      	mov	r4, r0
   d59c2:	b178      	cbz	r0, d59e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59c4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d59c6:	4601      	mov	r1, r0
   d59c8:	a801      	add	r0, sp, #4
   d59ca:	f7ff fe29 	bl	d5620 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59ce:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d59d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d59d2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59d4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d59d6:	9203      	str	r2, [sp, #12]
   d59d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d59da:	60e3      	str	r3, [r4, #12]
   d59dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d59e0:	9204      	str	r2, [sp, #16]
   d59e2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d59e4:	4b0a      	ldr	r3, [pc, #40]	; (d5a10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d59e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d59e8:	4b0a      	ldr	r3, [pc, #40]	; (d5a14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59ea:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d59ec:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59ee:	a801      	add	r0, sp, #4
   d59f0:	f7ff fd8a 	bl	d5508 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d59f4:	2200      	movs	r2, #0
   d59f6:	4629      	mov	r1, r5
   d59f8:	4807      	ldr	r0, [pc, #28]	; (d5a18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d59fa:	f7ff fc63 	bl	d52c4 <application_thread_invoke>
   d59fe:	4630      	mov	r0, r6
   d5a00:	f7ff fd82 	bl	d5508 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a04:	2110      	movs	r1, #16
   d5a06:	4630      	mov	r0, r6
   d5a08:	f000 ff47 	bl	d689a <_ZdlPvj>
        }
    }
   d5a0c:	b007      	add	sp, #28
   d5a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a10:	000d5673 	.word	0x000d5673
   d5a14:	000d5927 	.word	0x000d5927
   d5a18:	000d54c3 	.word	0x000d54c3

000d5a1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5a1c:	b530      	push	{r4, r5, lr}
   d5a1e:	b085      	sub	sp, #20
   d5a20:	4604      	mov	r4, r0
   d5a22:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5a24:	4668      	mov	r0, sp
   d5a26:	4611      	mov	r1, r2
   d5a28:	f7ff fddc 	bl	d55e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5a2c:	b17c      	cbz	r4, d5a4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5a2e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5a30:	4628      	mov	r0, r5
   d5a32:	b10d      	cbz	r5, d5a38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5a34:	f001 fdf0 	bl	d7618 <strdup>
   d5a38:	9002      	str	r0, [sp, #8]
   d5a3a:	a902      	add	r1, sp, #8
   d5a3c:	4668      	mov	r0, sp
   d5a3e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5a42:	f7ff fe2d 	bl	d56a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5a46:	9802      	ldr	r0, [sp, #8]
   d5a48:	f7ff fd08 	bl	d545c <free>
   d5a4c:	e01d      	b.n	d5a8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5a4e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5a50:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5a54:	f04f 0201 	mov.w	r2, #1
   d5a58:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5a5c:	42a3      	cmp	r3, r4
   d5a5e:	d103      	bne.n	d5a68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5a60:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5a64:	2900      	cmp	r1, #0
   d5a66:	d1f7      	bne.n	d5a58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5a68:	d002      	beq.n	d5a70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5a6a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a6e:	e00c      	b.n	d5a8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5a70:	f110 010c 	adds.w	r1, r0, #12
   d5a74:	f04f 0301 	mov.w	r3, #1
   d5a78:	bf18      	it	ne
   d5a7a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5a7c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5a80:	3004      	adds	r0, #4
   d5a82:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5a86:	f7ff ff71 	bl	d596c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5a8a:	a801      	add	r0, sp, #4
   d5a8c:	f7fe fbf2 	bl	d4274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5a90:	b005      	add	sp, #20
   d5a92:	bd30      	pop	{r4, r5, pc}

000d5a94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a94:	2200      	movs	r2, #0
   d5a96:	4611      	mov	r1, r2
   d5a98:	6840      	ldr	r0, [r0, #4]
   d5a9a:	f7ff bcbf 	b.w	d541c <network_listening>

000d5a9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a9e:	2200      	movs	r2, #0
   d5aa0:	4611      	mov	r1, r2
   d5aa2:	6840      	ldr	r0, [r0, #4]
   d5aa4:	f7ff bcca 	b.w	d543c <network_get_listen_timeout>

000d5aa8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5aa8:	2200      	movs	r2, #0
   d5aaa:	6840      	ldr	r0, [r0, #4]
   d5aac:	f7ff bcbe 	b.w	d542c <network_set_listen_timeout>

000d5ab0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ab0:	2200      	movs	r2, #0
   d5ab2:	f081 0101 	eor.w	r1, r1, #1
   d5ab6:	6840      	ldr	r0, [r0, #4]
   d5ab8:	f7ff bca8 	b.w	d540c <network_listen>

000d5abc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5abc:	2300      	movs	r3, #0
   d5abe:	461a      	mov	r2, r3
   d5ac0:	4619      	mov	r1, r3
   d5ac2:	6840      	ldr	r0, [r0, #4]
   d5ac4:	f7ff bc9a 	b.w	d53fc <network_off>

000d5ac8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5ac8:	2300      	movs	r3, #0
   d5aca:	461a      	mov	r2, r3
   d5acc:	4619      	mov	r1, r3
   d5ace:	6840      	ldr	r0, [r0, #4]
   d5ad0:	f7ff bc8c 	b.w	d53ec <network_on>

000d5ad4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ad4:	2200      	movs	r2, #0
   d5ad6:	4611      	mov	r1, r2
   d5ad8:	6840      	ldr	r0, [r0, #4]
   d5ada:	f7ff bc7f 	b.w	d53dc <network_ready>

000d5ade <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ade:	2200      	movs	r2, #0
   d5ae0:	4611      	mov	r1, r2
   d5ae2:	6840      	ldr	r0, [r0, #4]
   d5ae4:	f7ff bc6a 	b.w	d53bc <network_connecting>

000d5ae8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ae8:	2200      	movs	r2, #0
   d5aea:	2102      	movs	r1, #2
   d5aec:	6840      	ldr	r0, [r0, #4]
   d5aee:	f7ff bc6d 	b.w	d53cc <network_disconnect>

000d5af2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5af2:	2300      	movs	r3, #0
   d5af4:	461a      	mov	r2, r3
   d5af6:	6840      	ldr	r0, [r0, #4]
   d5af8:	f7ff bc58 	b.w	d53ac <network_connect>

000d5afc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5afc:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5afe:	2203      	movs	r2, #3
   d5b00:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b02:	4a02      	ldr	r2, [pc, #8]	; (d5b0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b04:	601a      	str	r2, [r3, #0]
   d5b06:	4770      	bx	lr
   d5b08:	2003e378 	.word	0x2003e378
   d5b0c:	000d818c 	.word	0x000d818c

000d5b10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5b10:	4770      	bx	lr

000d5b12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b14:	4606      	mov	r6, r0
   d5b16:	4615      	mov	r5, r2
   d5b18:	460c      	mov	r4, r1
   d5b1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b1c:	42bc      	cmp	r4, r7
   d5b1e:	d006      	beq.n	d5b2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5b20:	6833      	ldr	r3, [r6, #0]
   d5b22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5b26:	689b      	ldr	r3, [r3, #8]
   d5b28:	4630      	mov	r0, r6
   d5b2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b2c:	e7f6      	b.n	d5b1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5b2e:	4628      	mov	r0, r5
   d5b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5b32:	2200      	movs	r2, #0
   d5b34:	7c00      	ldrb	r0, [r0, #16]
   d5b36:	f7ff bac5 	b.w	d50c4 <HAL_I2C_Write_Data>

000d5b3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5b3a:	2100      	movs	r1, #0
   d5b3c:	7c00      	ldrb	r0, [r0, #16]
   d5b3e:	f7ff bac9 	b.w	d50d4 <HAL_I2C_Available_Data>

000d5b42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5b42:	2100      	movs	r1, #0
   d5b44:	7c00      	ldrb	r0, [r0, #16]
   d5b46:	f7ff bacd 	b.w	d50e4 <HAL_I2C_Read_Data>

000d5b4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5b4a:	2100      	movs	r1, #0
   d5b4c:	7c00      	ldrb	r0, [r0, #16]
   d5b4e:	f7ff bad1 	b.w	d50f4 <HAL_I2C_Peek_Data>

000d5b52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5b52:	2100      	movs	r1, #0
   d5b54:	7c00      	ldrb	r0, [r0, #16]
   d5b56:	f7ff bad5 	b.w	d5104 <HAL_I2C_Flush_Data>

000d5b5a <_ZN7TwoWireD0Ev>:
   d5b5a:	b510      	push	{r4, lr}
   d5b5c:	2114      	movs	r1, #20
   d5b5e:	4604      	mov	r4, r0
   d5b60:	f000 fe9b 	bl	d689a <_ZdlPvj>
   d5b64:	4620      	mov	r0, r4
   d5b66:	bd10      	pop	{r4, pc}

000d5b68 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b68:	b510      	push	{r4, lr}
   d5b6a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b70:	4608      	mov	r0, r1
   d5b72:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b74:	2100      	movs	r1, #0
   d5b76:	4b04      	ldr	r3, [pc, #16]	; (d5b88 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5b78:	7420      	strb	r0, [r4, #16]
   d5b7a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5b7e:	f7ff fad1 	bl	d5124 <HAL_I2C_Init>

}
   d5b82:	4620      	mov	r0, r4
   d5b84:	bd10      	pop	{r4, pc}
   d5b86:	bf00      	nop
   d5b88:	000d81c0 	.word	0x000d81c0

000d5b8c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5b8c:	2100      	movs	r1, #0
   d5b8e:	7c00      	ldrb	r0, [r0, #16]
   d5b90:	f7ff bac0 	b.w	d5114 <HAL_I2C_Is_Enabled>

000d5b94 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5b94:	f7ff ba86 	b.w	d50a4 <HAL_Interrupts_Disable_All>

000d5b98 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5b98:	f7ff ba7c 	b.w	d5094 <HAL_Interrupts_Enable_All>

000d5b9c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b9c:	4770      	bx	lr

000d5b9e <_ZN9IPAddressD0Ev>:
   d5b9e:	b510      	push	{r4, lr}
   d5ba0:	2118      	movs	r1, #24
   d5ba2:	4604      	mov	r4, r0
   d5ba4:	f000 fe79 	bl	d689a <_ZdlPvj>
   d5ba8:	4620      	mov	r0, r4
   d5baa:	bd10      	pop	{r4, pc}

000d5bac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bae:	7d03      	ldrb	r3, [r0, #20]
   d5bb0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bb2:	b08d      	sub	sp, #52	; 0x34
   d5bb4:	460e      	mov	r6, r1
   d5bb6:	f100 0704 	add.w	r7, r0, #4
   d5bba:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bbe:	d002      	beq.n	d5bc6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5bc0:	f100 0508 	add.w	r5, r0, #8
   d5bc4:	e018      	b.n	d5bf8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bc6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bc8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bca:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bce:	232f      	movs	r3, #47	; 0x2f
   d5bd0:	462a      	mov	r2, r5
   d5bd2:	200a      	movs	r0, #10
   d5bd4:	f7ff faae 	bl	d5134 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5bd8:	4628      	mov	r0, r5
   d5bda:	f001 fd38 	bl	d764e <strlen>
   d5bde:	6833      	ldr	r3, [r6, #0]
   d5be0:	4602      	mov	r2, r0
   d5be2:	68db      	ldr	r3, [r3, #12]
   d5be4:	4629      	mov	r1, r5
   d5be6:	4630      	mov	r0, r6
   d5be8:	4798      	blx	r3
   d5bea:	e00f      	b.n	d5c0c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5bec:	b124      	cbz	r4, d5bf8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5bee:	212e      	movs	r1, #46	; 0x2e
   d5bf0:	4630      	mov	r0, r6
   d5bf2:	f000 f9c7 	bl	d5f84 <_ZN5Print5printEc>
   d5bf6:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5bf8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5bfc:	220a      	movs	r2, #10
   d5bfe:	4630      	mov	r0, r6
   d5c00:	f000 f9f0 	bl	d5fe4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c04:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c06:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c08:	d1f0      	bne.n	d5bec <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c0a:	4620      	mov	r0, r4
    }
    return n;
}
   d5c0c:	b00d      	add	sp, #52	; 0x34
   d5c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c10 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5c10:	b510      	push	{r4, lr}
   d5c12:	4b05      	ldr	r3, [pc, #20]	; (d5c28 <_ZN9IPAddressC1Ev+0x18>)
   d5c14:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c16:	2211      	movs	r2, #17
   d5c18:	f840 3b04 	str.w	r3, [r0], #4
   d5c1c:	2100      	movs	r1, #0
   d5c1e:	f001 fcb8 	bl	d7592 <memset>
{
    clear();
}
   d5c22:	4620      	mov	r0, r4
   d5c24:	bd10      	pop	{r4, pc}
   d5c26:	bf00      	nop
   d5c28:	000d81e8 	.word	0x000d81e8

000d5c2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c2c:	4603      	mov	r3, r0
   d5c2e:	4a07      	ldr	r2, [pc, #28]	; (d5c4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c30:	b510      	push	{r4, lr}
   d5c32:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c36:	f101 0210 	add.w	r2, r1, #16
   d5c3a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c3e:	f843 4b04 	str.w	r4, [r3], #4
   d5c42:	4291      	cmp	r1, r2
   d5c44:	d1f9      	bne.n	d5c3a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c46:	780a      	ldrb	r2, [r1, #0]
   d5c48:	701a      	strb	r2, [r3, #0]
}
   d5c4a:	bd10      	pop	{r4, pc}
   d5c4c:	000d81e8 	.word	0x000d81e8

000d5c50 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c52:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5c62:	2304      	movs	r3, #4
   d5c64:	6041      	str	r1, [r0, #4]
   d5c66:	7503      	strb	r3, [r0, #20]
   d5c68:	bd10      	pop	{r4, pc}

000d5c6a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5c6c:	780d      	ldrb	r5, [r1, #0]
   d5c6e:	788b      	ldrb	r3, [r1, #2]
   d5c70:	784a      	ldrb	r2, [r1, #1]
   d5c72:	78c9      	ldrb	r1, [r1, #3]
   d5c74:	9100      	str	r1, [sp, #0]
   d5c76:	4629      	mov	r1, r5
   d5c78:	f7ff ffea 	bl	d5c50 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5c7c:	b003      	add	sp, #12
   d5c7e:	bd30      	pop	{r4, r5, pc}

000d5c80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c80:	4b01      	ldr	r3, [pc, #4]	; (d5c88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c82:	4a02      	ldr	r2, [pc, #8]	; (d5c8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c84:	601a      	str	r2, [r3, #0]
   d5c86:	4770      	bx	lr
   d5c88:	2003e380 	.word	0x2003e380
   d5c8c:	000d82ac 	.word	0x000d82ac

000d5c90 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c90:	2200      	movs	r2, #0
   d5c92:	4611      	mov	r1, r2
   d5c94:	6840      	ldr	r0, [r0, #4]
   d5c96:	f7ff bbc1 	b.w	d541c <network_listening>

000d5c9a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c9a:	2200      	movs	r2, #0
   d5c9c:	4611      	mov	r1, r2
   d5c9e:	6840      	ldr	r0, [r0, #4]
   d5ca0:	f7ff bbcc 	b.w	d543c <network_get_listen_timeout>

000d5ca4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ca4:	2200      	movs	r2, #0
   d5ca6:	6840      	ldr	r0, [r0, #4]
   d5ca8:	f7ff bbc0 	b.w	d542c <network_set_listen_timeout>

000d5cac <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cac:	2200      	movs	r2, #0
   d5cae:	f081 0101 	eor.w	r1, r1, #1
   d5cb2:	6840      	ldr	r0, [r0, #4]
   d5cb4:	f7ff bbaa 	b.w	d540c <network_listen>

000d5cb8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5cb8:	2300      	movs	r3, #0
   d5cba:	461a      	mov	r2, r3
   d5cbc:	4619      	mov	r1, r3
   d5cbe:	6840      	ldr	r0, [r0, #4]
   d5cc0:	f7ff bb9c 	b.w	d53fc <network_off>

000d5cc4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5cc4:	2300      	movs	r3, #0
   d5cc6:	461a      	mov	r2, r3
   d5cc8:	4619      	mov	r1, r3
   d5cca:	6840      	ldr	r0, [r0, #4]
   d5ccc:	f7ff bb8e 	b.w	d53ec <network_on>

000d5cd0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5cd0:	2200      	movs	r2, #0
   d5cd2:	4611      	mov	r1, r2
   d5cd4:	6840      	ldr	r0, [r0, #4]
   d5cd6:	f7ff bb81 	b.w	d53dc <network_ready>

000d5cda <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cda:	2200      	movs	r2, #0
   d5cdc:	4611      	mov	r1, r2
   d5cde:	6840      	ldr	r0, [r0, #4]
   d5ce0:	f7ff bb6c 	b.w	d53bc <network_connecting>

000d5ce4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ce4:	2200      	movs	r2, #0
   d5ce6:	2102      	movs	r1, #2
   d5ce8:	6840      	ldr	r0, [r0, #4]
   d5cea:	f7ff bb6f 	b.w	d53cc <network_disconnect>

000d5cee <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cee:	2300      	movs	r3, #0
   d5cf0:	461a      	mov	r2, r3
   d5cf2:	6840      	ldr	r0, [r0, #4]
   d5cf4:	f7ff bb5a 	b.w	d53ac <network_connect>

000d5cf8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5cf8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cfa:	4605      	mov	r5, r0
   d5cfc:	b188      	cbz	r0, d5d22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cfe:	6804      	ldr	r4, [r0, #0]
   d5d00:	b14c      	cbz	r4, d5d16 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5d02:	68a3      	ldr	r3, [r4, #8]
   d5d04:	b11b      	cbz	r3, d5d0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d06:	2203      	movs	r2, #3
   d5d08:	4621      	mov	r1, r4
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d0e:	2110      	movs	r1, #16
   d5d10:	4620      	mov	r0, r4
   d5d12:	f000 fdc2 	bl	d689a <_ZdlPvj>
   d5d16:	4628      	mov	r0, r5
   d5d18:	2114      	movs	r1, #20
      }
   d5d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d1e:	f000 bdbc 	b.w	d689a <_ZdlPvj>
   d5d22:	bd38      	pop	{r3, r4, r5, pc}

000d5d24 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5d24:	b110      	cbz	r0, d5d2c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5d26:	6803      	ldr	r3, [r0, #0]
   d5d28:	685b      	ldr	r3, [r3, #4]
   d5d2a:	4718      	bx	r3
   d5d2c:	4770      	bx	lr

000d5d2e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5d2e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5d30:	6803      	ldr	r3, [r0, #0]
   d5d32:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5d34:	b1bb      	cbz	r3, d5d66 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5d36:	6858      	ldr	r0, [r3, #4]
   d5d38:	f7ff f944 	bl	d4fc4 <os_thread_is_current>
   d5d3c:	b978      	cbnz	r0, d5d5e <_ZN6ThreadD1Ev+0x30>
   d5d3e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5d40:	7c5a      	ldrb	r2, [r3, #17]
   d5d42:	b912      	cbnz	r2, d5d4a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5d44:	6858      	ldr	r0, [r3, #4]
   d5d46:	f7ff f945 	bl	d4fd4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5d4a:	6823      	ldr	r3, [r4, #0]
   d5d4c:	6858      	ldr	r0, [r3, #4]
   d5d4e:	f7ff f949 	bl	d4fe4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d52:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d54:	2300      	movs	r3, #0
   d5d56:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5d58:	b128      	cbz	r0, d5d66 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5d5a:	f7ff ffcd 	bl	d5cf8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d5e:	6820      	ldr	r0, [r4, #0]
   d5d60:	b108      	cbz	r0, d5d66 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5d62:	f7ff ffc9 	bl	d5cf8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5d66:	4620      	mov	r0, r4
   d5d68:	bd10      	pop	{r4, pc}
	...

000d5d6c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5d6c:	b538      	push	{r3, r4, r5, lr}
   d5d6e:	4b0c      	ldr	r3, [pc, #48]	; (d5da0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5d70:	6003      	str	r3, [r0, #0]
   d5d72:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d74:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5d78:	b108      	cbz	r0, d5d7e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d7a:	f7fe f990 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d7e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5d82:	b135      	cbz	r5, d5d92 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d84:	4628      	mov	r0, r5
   d5d86:	f7ff ffd2 	bl	d5d2e <_ZN6ThreadD1Ev>
   d5d8a:	2104      	movs	r1, #4
   d5d8c:	4628      	mov	r0, r5
   d5d8e:	f000 fd84 	bl	d689a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d92:	68a0      	ldr	r0, [r4, #8]
   d5d94:	b108      	cbz	r0, d5d9a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5d96:	f7ff ffc5 	bl	d5d24 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5d9a:	4620      	mov	r0, r4
   d5d9c:	bd38      	pop	{r3, r4, r5, pc}
   d5d9e:	bf00      	nop
   d5da0:	000d82e0 	.word	0x000d82e0

000d5da4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5da4:	b538      	push	{r3, r4, r5, lr}
   d5da6:	4c0d      	ldr	r4, [pc, #52]	; (d5ddc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5da8:	4b0d      	ldr	r3, [pc, #52]	; (d5de0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5daa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5dac:	2500      	movs	r5, #0
   d5dae:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5db0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5db4:	6063      	str	r3, [r4, #4]
   d5db6:	60a5      	str	r5, [r4, #8]
   d5db8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5dbc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5dc0:	f7ff f920 	bl	d5004 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5dc4:	4b07      	ldr	r3, [pc, #28]	; (d5de4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5dc6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5dca:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5dcc:	4620      	mov	r0, r4
   d5dce:	4a06      	ldr	r2, [pc, #24]	; (d5de8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5dd0:	4906      	ldr	r1, [pc, #24]	; (d5dec <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5dd6:	f000 bd5b 	b.w	d6890 <__aeabi_atexit>
   d5dda:	bf00      	nop
   d5ddc:	2003e384 	.word	0x2003e384
   d5de0:	000d8314 	.word	0x000d8314
   d5de4:	000d82e0 	.word	0x000d82e0
   d5de8:	2003e2dc 	.word	0x2003e2dc
   d5dec:	000d5d6d 	.word	0x000d5d6d

000d5df0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5df0:	2300      	movs	r3, #0
   d5df2:	461a      	mov	r2, r3
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	f7ff bad9 	b.w	d53ac <network_connect>

000d5dfa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	2102      	movs	r1, #2
   d5dfe:	6840      	ldr	r0, [r0, #4]
   d5e00:	f7ff bae4 	b.w	d53cc <network_disconnect>

000d5e04 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e04:	2200      	movs	r2, #0
   d5e06:	4611      	mov	r1, r2
   d5e08:	6840      	ldr	r0, [r0, #4]
   d5e0a:	f7ff bad7 	b.w	d53bc <network_connecting>

000d5e0e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5e0e:	2200      	movs	r2, #0
   d5e10:	4611      	mov	r1, r2
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	f7ff bae2 	b.w	d53dc <network_ready>

000d5e18 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e18:	2300      	movs	r3, #0
   d5e1a:	461a      	mov	r2, r3
   d5e1c:	4619      	mov	r1, r3
   d5e1e:	6840      	ldr	r0, [r0, #4]
   d5e20:	f7ff bae4 	b.w	d53ec <network_on>

000d5e24 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e24:	2300      	movs	r3, #0
   d5e26:	461a      	mov	r2, r3
   d5e28:	4619      	mov	r1, r3
   d5e2a:	6840      	ldr	r0, [r0, #4]
   d5e2c:	f7ff bae6 	b.w	d53fc <network_off>

000d5e30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e30:	2200      	movs	r2, #0
   d5e32:	f081 0101 	eor.w	r1, r1, #1
   d5e36:	6840      	ldr	r0, [r0, #4]
   d5e38:	f7ff bae8 	b.w	d540c <network_listen>

000d5e3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e3c:	2200      	movs	r2, #0
   d5e3e:	6840      	ldr	r0, [r0, #4]
   d5e40:	f7ff baf4 	b.w	d542c <network_set_listen_timeout>

000d5e44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e44:	2200      	movs	r2, #0
   d5e46:	4611      	mov	r1, r2
   d5e48:	6840      	ldr	r0, [r0, #4]
   d5e4a:	f7ff baf7 	b.w	d543c <network_get_listen_timeout>

000d5e4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e4e:	2200      	movs	r2, #0
   d5e50:	4611      	mov	r1, r2
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	f7ff bae2 	b.w	d541c <network_listening>

000d5e58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e5c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e5e:	b095      	sub	sp, #84	; 0x54
   d5e60:	4616      	mov	r6, r2
   d5e62:	460d      	mov	r5, r1
   d5e64:	4607      	mov	r7, r0
    IPAddress addr;
   d5e66:	f7ff fed3 	bl	d5c10 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5e6a:	4621      	mov	r1, r4
   d5e6c:	2220      	movs	r2, #32
   d5e6e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e70:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e72:	f001 fb8e 	bl	d7592 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e76:	2340      	movs	r3, #64	; 0x40
   d5e78:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e7a:	4621      	mov	r1, r4
   d5e7c:	466b      	mov	r3, sp
   d5e7e:	aa0c      	add	r2, sp, #48	; 0x30
   d5e80:	4630      	mov	r0, r6
   d5e82:	f7ff f967 	bl	d5154 <netdb_getaddrinfo>
    if (!r) {
   d5e86:	4604      	mov	r4, r0
   d5e88:	2800      	cmp	r0, #0
   d5e8a:	d144      	bne.n	d5f16 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e8c:	4602      	mov	r2, r0
   d5e8e:	2101      	movs	r1, #1
   d5e90:	6868      	ldr	r0, [r5, #4]
   d5e92:	f7ff faa3 	bl	d53dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e96:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e98:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e9a:	4622      	mov	r2, r4
   d5e9c:	6868      	ldr	r0, [r5, #4]
   d5e9e:	f7ff fa9d 	bl	d53dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ea2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ea4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5ea6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ea8:	2e00      	cmp	r6, #0
   d5eaa:	d034      	beq.n	d5f16 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5eac:	2900      	cmp	r1, #0
   d5eae:	d132      	bne.n	d5f16 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5eb0:	6873      	ldr	r3, [r6, #4]
   d5eb2:	2b02      	cmp	r3, #2
   d5eb4:	d002      	beq.n	d5ebc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5eb6:	2b0a      	cmp	r3, #10
   d5eb8:	d009      	beq.n	d5ece <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5eba:	e02a      	b.n	d5f12 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ebc:	f1b8 0f00 	cmp.w	r8, #0
   d5ec0:	d027      	beq.n	d5f12 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5ec2:	6971      	ldr	r1, [r6, #20]
   d5ec4:	4638      	mov	r0, r7
   d5ec6:	3104      	adds	r1, #4
   d5ec8:	f7ff fecf 	bl	d5c6a <_ZN9IPAddressaSEPKh>
   d5ecc:	e020      	b.n	d5f10 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5ece:	f1b9 0f00 	cmp.w	r9, #0
   d5ed2:	d01e      	beq.n	d5f12 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ed4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5ed6:	2211      	movs	r2, #17
   d5ed8:	a801      	add	r0, sp, #4
   d5eda:	f001 fb5a 	bl	d7592 <memset>
                    a.v = 6;
   d5ede:	2306      	movs	r3, #6
   d5ee0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ee4:	ad01      	add	r5, sp, #4
   d5ee6:	f104 0308 	add.w	r3, r4, #8
   d5eea:	3418      	adds	r4, #24
   d5eec:	6818      	ldr	r0, [r3, #0]
   d5eee:	6859      	ldr	r1, [r3, #4]
   d5ef0:	462a      	mov	r2, r5
   d5ef2:	c203      	stmia	r2!, {r0, r1}
   d5ef4:	3308      	adds	r3, #8
   d5ef6:	42a3      	cmp	r3, r4
   d5ef8:	4615      	mov	r5, r2
   d5efa:	d1f7      	bne.n	d5eec <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5efc:	a901      	add	r1, sp, #4
   d5efe:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f00:	ad07      	add	r5, sp, #28
   d5f02:	f7ff fe93 	bl	d5c2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f08:	1d3c      	adds	r4, r7, #4
   d5f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f0c:	682b      	ldr	r3, [r5, #0]
   d5f0e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5f10:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f12:	69f6      	ldr	r6, [r6, #28]
   d5f14:	e7c8      	b.n	d5ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5f16:	9800      	ldr	r0, [sp, #0]
   d5f18:	f7ff f914 	bl	d5144 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f1c:	4638      	mov	r0, r7
   d5f1e:	b015      	add	sp, #84	; 0x54
   d5f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f24 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5f24:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5f26:	4a03      	ldr	r2, [pc, #12]	; (d5f34 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5f28:	601a      	str	r2, [r3, #0]
   d5f2a:	2200      	movs	r2, #0
   d5f2c:	605a      	str	r2, [r3, #4]
   d5f2e:	4770      	bx	lr
   d5f30:	2003e554 	.word	0x2003e554
   d5f34:	000d8314 	.word	0x000d8314

000d5f38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f3a:	4606      	mov	r6, r0
   d5f3c:	460d      	mov	r5, r1
   d5f3e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5f40:	2400      	movs	r4, #0
  while (size--) {
   d5f42:	42bd      	cmp	r5, r7
   d5f44:	d00c      	beq.n	d5f60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5f46:	6833      	ldr	r3, [r6, #0]
   d5f48:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f4c:	689b      	ldr	r3, [r3, #8]
   d5f4e:	4630      	mov	r0, r6
   d5f50:	4798      	blx	r3
     if (chunk>=0)
   d5f52:	2800      	cmp	r0, #0
   d5f54:	db01      	blt.n	d5f5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5f56:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5f58:	e7f3      	b.n	d5f42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5f5a:	2c00      	cmp	r4, #0
   d5f5c:	bf08      	it	eq
   d5f5e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5f60:	4620      	mov	r0, r4
   d5f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f64 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f64:	b570      	push	{r4, r5, r6, lr}
   d5f66:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f68:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f6a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f6c:	b149      	cbz	r1, d5f82 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f6e:	f001 fb6e 	bl	d764e <strlen>
   d5f72:	682b      	ldr	r3, [r5, #0]
   d5f74:	4602      	mov	r2, r0
   d5f76:	4621      	mov	r1, r4
   d5f78:	4628      	mov	r0, r5
   d5f7a:	68db      	ldr	r3, [r3, #12]
    }
   d5f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f80:	4718      	bx	r3
    }
   d5f82:	bd70      	pop	{r4, r5, r6, pc}

000d5f84 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5f84:	6803      	ldr	r3, [r0, #0]
   d5f86:	689b      	ldr	r3, [r3, #8]
   d5f88:	4718      	bx	r3

000d5f8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5f8a:	b530      	push	{r4, r5, lr}
   d5f8c:	b08b      	sub	sp, #44	; 0x2c
   d5f8e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5f90:	2100      	movs	r1, #0
   d5f92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5f96:	2a01      	cmp	r2, #1
   d5f98:	bf98      	it	ls
   d5f9a:	220a      	movls	r2, #10
   d5f9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5fa0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5fa4:	fb05 3312 	mls	r3, r5, r2, r3
   d5fa8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5fac:	2b09      	cmp	r3, #9
   d5fae:	bf94      	ite	ls
   d5fb0:	3330      	addls	r3, #48	; 0x30
   d5fb2:	3337      	addhi	r3, #55	; 0x37
   d5fb4:	b2db      	uxtb	r3, r3
   d5fb6:	4621      	mov	r1, r4
   d5fb8:	f804 3901 	strb.w	r3, [r4], #-1
   d5fbc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5fbe:	2d00      	cmp	r5, #0
   d5fc0:	d1ee      	bne.n	d5fa0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5fc2:	f7ff ffcf 	bl	d5f64 <_ZN5Print5writeEPKc>
}
   d5fc6:	b00b      	add	sp, #44	; 0x2c
   d5fc8:	bd30      	pop	{r4, r5, pc}

000d5fca <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5fca:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5fcc:	b92a      	cbnz	r2, d5fda <_ZN5Print5printEmi+0x10>
   d5fce:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5fd4:	689b      	ldr	r3, [r3, #8]
   d5fd6:	b2c9      	uxtb	r1, r1
   d5fd8:	4718      	bx	r3
  else return printNumber(n, base);
   d5fda:	b2d2      	uxtb	r2, r2
}
   d5fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5fe0:	f7ff bfd3 	b.w	d5f8a <_ZN5Print11printNumberEmh>

000d5fe4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5fe4:	f7ff bff1 	b.w	d5fca <_ZN5Print5printEmi>

000d5fe8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5fe8:	b510      	push	{r4, lr}
   d5fea:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fec:	f7ff fa8c 	bl	d5508 <_ZNSt14_Function_baseD1Ev>
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	bd10      	pop	{r4, pc}

000d5ff4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ff4:	4803      	ldr	r0, [pc, #12]	; (d6004 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ff6:	4a04      	ldr	r2, [pc, #16]	; (d6008 <_GLOBAL__sub_I_RGB+0x14>)
   d5ff8:	4904      	ldr	r1, [pc, #16]	; (d600c <_GLOBAL__sub_I_RGB+0x18>)
   d5ffa:	2300      	movs	r3, #0
   d5ffc:	6083      	str	r3, [r0, #8]
   d5ffe:	f000 bc47 	b.w	d6890 <__aeabi_atexit>
   d6002:	bf00      	nop
   d6004:	2003e55c 	.word	0x2003e55c
   d6008:	2003e2dc 	.word	0x2003e2dc
   d600c:	000d5fe9 	.word	0x000d5fe9

000d6010 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6010:	4770      	bx	lr

000d6012 <_ZN8SPIClassD0Ev>:
   d6012:	b510      	push	{r4, lr}
   d6014:	2110      	movs	r1, #16
   d6016:	4604      	mov	r4, r0
   d6018:	f000 fc3f 	bl	d689a <_ZdlPvj>
   d601c:	4620      	mov	r0, r4
   d601e:	bd10      	pop	{r4, pc}

000d6020 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6020:	b570      	push	{r4, r5, r6, lr}
   d6022:	4b08      	ldr	r3, [pc, #32]	; (d6044 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6024:	6003      	str	r3, [r0, #0]
   d6026:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6028:	2500      	movs	r5, #0
   d602a:	460e      	mov	r6, r1
   d602c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6030:	f7fe ffe0 	bl	d4ff4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6034:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6036:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6038:	f7ff f894 	bl	d5164 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d603c:	60a5      	str	r5, [r4, #8]
}
   d603e:	4620      	mov	r0, r4
   d6040:	bd70      	pop	{r4, r5, r6, pc}
   d6042:	bf00      	nop
   d6044:	000d8348 	.word	0x000d8348

000d6048 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6048:	7900      	ldrb	r0, [r0, #4]
   d604a:	f7ff b893 	b.w	d5174 <HAL_SPI_Is_Enabled>

000d604e <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d604e:	2300      	movs	r3, #0
   d6050:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6052:	6043      	str	r3, [r0, #4]
	len = 0;
   d6054:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6056:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6058:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d605a:	680c      	ldr	r4, [r1, #0]
   d605c:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d605e:	684c      	ldr	r4, [r1, #4]
   d6060:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6062:	688c      	ldr	r4, [r1, #8]
   d6064:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6066:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6068:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d606a:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d606c:	bd10      	pop	{r4, pc}

000d606e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d606e:	b510      	push	{r4, lr}
   d6070:	4604      	mov	r4, r0
{
	free(buffer);
   d6072:	6800      	ldr	r0, [r0, #0]
   d6074:	f7ff f9f2 	bl	d545c <free>
}
   d6078:	4620      	mov	r0, r4
   d607a:	bd10      	pop	{r4, pc}

000d607c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d607c:	b510      	push	{r4, lr}
   d607e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6080:	6800      	ldr	r0, [r0, #0]
   d6082:	b108      	cbz	r0, d6088 <_ZN6String10invalidateEv+0xc>
   d6084:	f7ff f9ea 	bl	d545c <free>
	buffer = NULL;
   d6088:	2300      	movs	r3, #0
   d608a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d608c:	60a3      	str	r3, [r4, #8]
   d608e:	6063      	str	r3, [r4, #4]
   d6090:	bd10      	pop	{r4, pc}

000d6092 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6092:	b538      	push	{r3, r4, r5, lr}
   d6094:	4604      	mov	r4, r0
   d6096:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6098:	6800      	ldr	r0, [r0, #0]
   d609a:	3101      	adds	r1, #1
   d609c:	f7ff f9e6 	bl	d546c <realloc>
	if (newbuffer) {
   d60a0:	b110      	cbz	r0, d60a8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d60a2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d60a6:	2001      	movs	r0, #1
	}
	return 0;
}
   d60a8:	bd38      	pop	{r3, r4, r5, pc}

000d60aa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d60aa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d60ac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d60ae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d60b0:	b113      	cbz	r3, d60b8 <_ZN6String7reserveEj+0xe>
   d60b2:	6843      	ldr	r3, [r0, #4]
   d60b4:	428b      	cmp	r3, r1
   d60b6:	d207      	bcs.n	d60c8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d60b8:	4620      	mov	r0, r4
   d60ba:	f7ff ffea 	bl	d6092 <_ZN6String12changeBufferEj>
   d60be:	b120      	cbz	r0, d60ca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d60c0:	68a3      	ldr	r3, [r4, #8]
   d60c2:	b90b      	cbnz	r3, d60c8 <_ZN6String7reserveEj+0x1e>
   d60c4:	6822      	ldr	r2, [r4, #0]
   d60c6:	7013      	strb	r3, [r2, #0]
   d60c8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d60ca:	bd10      	pop	{r4, pc}

000d60cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d60cc:	b570      	push	{r4, r5, r6, lr}
   d60ce:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d60d0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d60d2:	4604      	mov	r4, r0
   d60d4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d60d6:	f7ff ffe8 	bl	d60aa <_ZN6String7reserveEj>
   d60da:	b918      	cbnz	r0, d60e4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d60dc:	4620      	mov	r0, r4
   d60de:	f7ff ffcd 	bl	d607c <_ZN6String10invalidateEv>
		return *this;
   d60e2:	e009      	b.n	d60f8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d60e4:	462a      	mov	r2, r5
   d60e6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d60e8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d60ea:	6820      	ldr	r0, [r4, #0]
   d60ec:	f001 fa46 	bl	d757c <memcpy>
	buffer[len] = 0;
   d60f0:	6822      	ldr	r2, [r4, #0]
   d60f2:	68a3      	ldr	r3, [r4, #8]
   d60f4:	2100      	movs	r1, #0
   d60f6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d60f8:	4620      	mov	r0, r4
   d60fa:	bd70      	pop	{r4, r5, r6, pc}

000d60fc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d60fc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d60fe:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6100:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6102:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6104:	6043      	str	r3, [r0, #4]
	len = 0;
   d6106:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6108:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d610a:	460d      	mov	r5, r1
   d610c:	b139      	cbz	r1, d611e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d610e:	4608      	mov	r0, r1
   d6110:	f001 fa9d 	bl	d764e <strlen>
   d6114:	4629      	mov	r1, r5
   d6116:	4602      	mov	r2, r0
   d6118:	4620      	mov	r0, r4
   d611a:	f7ff ffd7 	bl	d60cc <_ZN6String4copyEPKcj>
}
   d611e:	4620      	mov	r0, r4
   d6120:	bd38      	pop	{r3, r4, r5, pc}

000d6122 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6122:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6124:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6126:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6128:	b912      	cbnz	r2, d6130 <_ZNK6String6equalsEPKc+0xe>
   d612a:	b919      	cbnz	r1, d6134 <_ZNK6String6equalsEPKc+0x12>
   d612c:	2001      	movs	r0, #1
   d612e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6130:	b911      	cbnz	r1, d6138 <_ZNK6String6equalsEPKc+0x16>
   d6132:	6803      	ldr	r3, [r0, #0]
   d6134:	7818      	ldrb	r0, [r3, #0]
   d6136:	e002      	b.n	d613e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6138:	6800      	ldr	r0, [r0, #0]
   d613a:	f001 fa5b 	bl	d75f4 <strcmp>
   d613e:	fab0 f080 	clz	r0, r0
   d6142:	0940      	lsrs	r0, r0, #5
}
   d6144:	bd08      	pop	{r3, pc}

000d6146 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d6146:	b570      	push	{r4, r5, r6, lr}
   d6148:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d614a:	b19a      	cbz	r2, d6174 <_ZNK6String8getBytesEPhjj+0x2e>
   d614c:	b191      	cbz	r1, d6174 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d614e:	6885      	ldr	r5, [r0, #8]
   d6150:	429d      	cmp	r5, r3
   d6152:	d802      	bhi.n	d615a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6154:	2300      	movs	r3, #0
   d6156:	700b      	strb	r3, [r1, #0]
		return;
   d6158:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d615a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d615c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d615e:	6801      	ldr	r1, [r0, #0]
   d6160:	42ac      	cmp	r4, r5
   d6162:	bf28      	it	cs
   d6164:	462c      	movcs	r4, r5
   d6166:	4419      	add	r1, r3
   d6168:	4622      	mov	r2, r4
   d616a:	4630      	mov	r0, r6
   d616c:	f001 fa8c 	bl	d7688 <strncpy>
	buf[n] = 0;
   d6170:	2300      	movs	r3, #0
   d6172:	5533      	strb	r3, [r6, r4]
   d6174:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6178 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6178:	4b04      	ldr	r3, [pc, #16]	; (d618c <_GLOBAL__sub_I_System+0x14>)
   d617a:	2000      	movs	r0, #0
   d617c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6180:	7018      	strb	r0, [r3, #0]
   d6182:	8058      	strh	r0, [r3, #2]
   d6184:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6186:	f7ff b885 	b.w	d5294 <set_system_mode>
   d618a:	bf00      	nop
   d618c:	2003e56c 	.word	0x2003e56c

000d6190 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6190:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d6192:	4b14      	ldr	r3, [pc, #80]	; (d61e4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6194:	4f14      	ldr	r7, [pc, #80]	; (d61e8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6196:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6198:	4b14      	ldr	r3, [pc, #80]	; (d61ec <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d619a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d619c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d619e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d61a0:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d61a2:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d61a4:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d61a6:	d01b      	beq.n	d61e0 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d61a8:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d61aa:	ad01      	add	r5, sp, #4
   d61ac:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d61b0:	f001 f8ec 	bl	d738c <localtime>
	calendar_time->tm_year += 1900;
   d61b4:	6943      	ldr	r3, [r0, #20]
   d61b6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d61ba:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d61bc:	4604      	mov	r4, r0
   d61be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d61c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d61c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d61c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d61c6:	f8d4 e000 	ldr.w	lr, [r4]
   d61ca:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d61ce:	ad01      	add	r5, sp, #4
   d61d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61d2:	4c07      	ldr	r4, [pc, #28]	; (d61f0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d61d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d61da:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d61dc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d61e0:	b00b      	add	sp, #44	; 0x2c
   d61e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d61e4:	2003e5a4 	.word	0x2003e5a4
   d61e8:	2003e5a0 	.word	0x2003e5a0
   d61ec:	2003e59c 	.word	0x2003e59c
   d61f0:	2003e574 	.word	0x2003e574

000d61f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d61f4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d61f6:	2000      	movs	r0, #0
   d61f8:	f7ff f8c8 	bl	d538c <spark_sync_time_pending>
   d61fc:	b128      	cbz	r0, d620a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d61fe:	f7ff f89d 	bl	d533c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6202:	f080 0001 	eor.w	r0, r0, #1
   d6206:	b2c0      	uxtb	r0, r0
   d6208:	bd08      	pop	{r3, pc}
   d620a:	2001      	movs	r0, #1
    }
   d620c:	bd08      	pop	{r3, pc}

000d620e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d620e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6210:	2000      	movs	r0, #0
   d6212:	f7fe ff1f 	bl	d5054 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6216:	4604      	mov	r4, r0
   d6218:	b968      	cbnz	r0, d6236 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d621a:	f7ff f833 	bl	d5284 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d621e:	2801      	cmp	r0, #1
   d6220:	d10b      	bne.n	d623a <_ZN9TimeClass7isValidEv+0x2c>
   d6222:	4620      	mov	r0, r4
   d6224:	f7ff f856 	bl	d52d4 <system_thread_get_state>
   d6228:	b938      	cbnz	r0, d623a <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d622a:	f7ff ffe3 	bl	d61f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d622e:	b930      	cbnz	r0, d623e <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6230:	f7ff f87c 	bl	d532c <spark_process>
   d6234:	e7f9      	b.n	d622a <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6236:	2001      	movs	r0, #1
   d6238:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d623a:	2000      	movs	r0, #0
   d623c:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d623e:	f7ff ffd9 	bl	d61f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6242:	2000      	movs	r0, #0
   d6244:	f7fe ff06 	bl	d5054 <HAL_RTC_Time_Is_Valid>
   d6248:	3000      	adds	r0, #0
   d624a:	bf18      	it	ne
   d624c:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d624e:	bd10      	pop	{r4, pc}

000d6250 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6250:	b508      	push	{r3, lr}
    (void)isValid();
   d6252:	f7ff ffdc 	bl	d620e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d625a:	f7fe bef3 	b.w	d5044 <HAL_RTC_Get_UnixTime>
	...

000d6260 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d6260:	b508      	push	{r3, lr}
	return hour(now());
   d6262:	f7ff fff5 	bl	d6250 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6266:	f7ff ff93 	bl	d6190 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d626a:	4b01      	ldr	r3, [pc, #4]	; (d6270 <_ZN9TimeClass4hourEv+0x10>)
   d626c:	6898      	ldr	r0, [r3, #8]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	2003e574 	.word	0x2003e574

000d6274 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d6274:	b508      	push	{r3, lr}
	return minute(now());
   d6276:	f7ff ffeb 	bl	d6250 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d627a:	f7ff ff89 	bl	d6190 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d627e:	4b01      	ldr	r3, [pc, #4]	; (d6284 <_ZN9TimeClass6minuteEv+0x10>)
   d6280:	6858      	ldr	r0, [r3, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	2003e574 	.word	0x2003e574

000d6288 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6288:	4b02      	ldr	r3, [pc, #8]	; (d6294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d628a:	681a      	ldr	r2, [r3, #0]
   d628c:	4b02      	ldr	r3, [pc, #8]	; (d6298 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d628e:	601a      	str	r2, [r3, #0]
   d6290:	4770      	bx	lr
   d6292:	bf00      	nop
   d6294:	2003e224 	.word	0x2003e224
   d6298:	2003e598 	.word	0x2003e598

000d629c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d629c:	4770      	bx	lr

000d629e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d629e:	7441      	strb	r1, [r0, #17]
   d62a0:	4770      	bx	lr

000d62a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d62a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d62a4:	7c00      	ldrb	r0, [r0, #16]
   d62a6:	f7fe ffa5 	bl	d51f4 <HAL_USART_Available_Data_For_Write>
}
   d62aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62ae:	bd08      	pop	{r3, pc}

000d62b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d62b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d62b2:	7c00      	ldrb	r0, [r0, #16]
   d62b4:	f7fe ff76 	bl	d51a4 <HAL_USART_Available_Data>
}
   d62b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62bc:	bd08      	pop	{r3, pc}

000d62be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d62be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d62c0:	7c00      	ldrb	r0, [r0, #16]
   d62c2:	f7fe ff7f 	bl	d51c4 <HAL_USART_Peek_Data>
}
   d62c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d62ca:	bf28      	it	cs
   d62cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d62d0:	bd08      	pop	{r3, pc}

000d62d2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d62d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d62d4:	7c00      	ldrb	r0, [r0, #16]
   d62d6:	f7fe ff6d 	bl	d51b4 <HAL_USART_Read_Data>
}
   d62da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d62de:	bf28      	it	cs
   d62e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d62e4:	bd08      	pop	{r3, pc}

000d62e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d62e6:	7c00      	ldrb	r0, [r0, #16]
   d62e8:	f7fe bf74 	b.w	d51d4 <HAL_USART_Flush_Data>

000d62ec <_ZN11USARTSerialD0Ev>:
   d62ec:	b510      	push	{r4, lr}
   d62ee:	2114      	movs	r1, #20
   d62f0:	4604      	mov	r4, r0
   d62f2:	f000 fad2 	bl	d689a <_ZdlPvj>
   d62f6:	4620      	mov	r0, r4
   d62f8:	bd10      	pop	{r4, pc}

000d62fa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d62fa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d62fc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d62fe:	4604      	mov	r4, r0
   d6300:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6302:	b925      	cbnz	r5, d630e <_ZN11USARTSerial5writeEh+0x14>
   d6304:	7c00      	ldrb	r0, [r0, #16]
   d6306:	f7fe ff75 	bl	d51f4 <HAL_USART_Available_Data_For_Write>
   d630a:	2800      	cmp	r0, #0
   d630c:	dd05      	ble.n	d631a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d630e:	4631      	mov	r1, r6
   d6310:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6316:	f7fe bf3d 	b.w	d5194 <HAL_USART_Write_Data>
  }
  return 0;
}
   d631a:	4628      	mov	r0, r5
   d631c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6320 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6320:	b510      	push	{r4, lr}
   d6322:	4604      	mov	r4, r0
   d6324:	4608      	mov	r0, r1
   d6326:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6328:	2200      	movs	r2, #0
   d632a:	6062      	str	r2, [r4, #4]
   d632c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6330:	60a2      	str	r2, [r4, #8]
   d6332:	4a05      	ldr	r2, [pc, #20]	; (d6348 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6334:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6336:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6338:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d633a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d633c:	461a      	mov	r2, r3
   d633e:	f7fe ff21 	bl	d5184 <HAL_USART_Init>
}
   d6342:	4620      	mov	r0, r4
   d6344:	bd10      	pop	{r4, pc}
   d6346:	bf00      	nop
   d6348:	000d8380 	.word	0x000d8380

000d634c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d634c:	7c00      	ldrb	r0, [r0, #16]
   d634e:	f7fe bf49 	b.w	d51e4 <HAL_USART_Is_Enabled>
	...

000d6354 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6354:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6356:	4d0c      	ldr	r5, [pc, #48]	; (d6388 <_Z22__fetch_global_Serial1v+0x34>)
   d6358:	6829      	ldr	r1, [r5, #0]
   d635a:	f011 0401 	ands.w	r4, r1, #1
   d635e:	d111      	bne.n	d6384 <_Z22__fetch_global_Serial1v+0x30>
   d6360:	4628      	mov	r0, r5
   d6362:	f7fd fe9e 	bl	d40a2 <__cxa_guard_acquire>
   d6366:	b168      	cbz	r0, d6384 <_Z22__fetch_global_Serial1v+0x30>
   d6368:	4a08      	ldr	r2, [pc, #32]	; (d638c <_Z22__fetch_global_Serial1v+0x38>)
   d636a:	4b09      	ldr	r3, [pc, #36]	; (d6390 <_Z22__fetch_global_Serial1v+0x3c>)
   d636c:	4809      	ldr	r0, [pc, #36]	; (d6394 <_Z22__fetch_global_Serial1v+0x40>)
   d636e:	4621      	mov	r1, r4
   d6370:	f7ff ffd6 	bl	d6320 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6374:	4628      	mov	r0, r5
   d6376:	f7fd fe99 	bl	d40ac <__cxa_guard_release>
   d637a:	4a07      	ldr	r2, [pc, #28]	; (d6398 <_Z22__fetch_global_Serial1v+0x44>)
   d637c:	4907      	ldr	r1, [pc, #28]	; (d639c <_Z22__fetch_global_Serial1v+0x48>)
   d637e:	4805      	ldr	r0, [pc, #20]	; (d6394 <_Z22__fetch_global_Serial1v+0x40>)
   d6380:	f000 fa86 	bl	d6890 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6384:	4803      	ldr	r0, [pc, #12]	; (d6394 <_Z22__fetch_global_Serial1v+0x40>)
   d6386:	bd38      	pop	{r3, r4, r5, pc}
   d6388:	2003e640 	.word	0x2003e640
   d638c:	2003e644 	.word	0x2003e644
   d6390:	2003e5bc 	.word	0x2003e5bc
   d6394:	2003e5a8 	.word	0x2003e5a8
   d6398:	2003e2dc 	.word	0x2003e2dc
   d639c:	000d629d 	.word	0x000d629d

000d63a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63a0:	7441      	strb	r1, [r0, #17]
   d63a2:	4770      	bx	lr

000d63a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d63a4:	4770      	bx	lr

000d63a6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d63a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d63a8:	2100      	movs	r1, #0
   d63aa:	7c00      	ldrb	r0, [r0, #16]
   d63ac:	f7fe ff42 	bl	d5234 <HAL_USB_USART_Receive_Data>
}
   d63b0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d63b4:	bf28      	it	cs
   d63b6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d63ba:	bd08      	pop	{r3, pc}

000d63bc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d63bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d63be:	2101      	movs	r1, #1
   d63c0:	7c00      	ldrb	r0, [r0, #16]
   d63c2:	f7fe ff37 	bl	d5234 <HAL_USB_USART_Receive_Data>
}
   d63c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d63ca:	bf28      	it	cs
   d63cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d63d0:	bd08      	pop	{r3, pc}

000d63d2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d63d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d63d4:	7c00      	ldrb	r0, [r0, #16]
   d63d6:	f7fe ff25 	bl	d5224 <HAL_USB_USART_Available_Data_For_Write>
}
   d63da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63de:	bd08      	pop	{r3, pc}

000d63e0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d63e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d63e2:	7c00      	ldrb	r0, [r0, #16]
   d63e4:	f7fe ff16 	bl	d5214 <HAL_USB_USART_Available_Data>
}
   d63e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63ec:	bd08      	pop	{r3, pc}

000d63ee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d63ee:	7c00      	ldrb	r0, [r0, #16]
   d63f0:	f7fe bf30 	b.w	d5254 <HAL_USB_USART_Flush_Data>

000d63f4 <_ZN9USBSerialD0Ev>:
   d63f4:	b510      	push	{r4, lr}
   d63f6:	2114      	movs	r1, #20
   d63f8:	4604      	mov	r4, r0
   d63fa:	f000 fa4e 	bl	d689a <_ZdlPvj>
   d63fe:	4620      	mov	r0, r4
   d6400:	bd10      	pop	{r4, pc}

000d6402 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6402:	b538      	push	{r3, r4, r5, lr}
   d6404:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6406:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6408:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d640a:	f7fe ff0b 	bl	d5224 <HAL_USB_USART_Available_Data_For_Write>
   d640e:	2800      	cmp	r0, #0
   d6410:	dc01      	bgt.n	d6416 <_ZN9USBSerial5writeEh+0x14>
   d6412:	7c60      	ldrb	r0, [r4, #17]
   d6414:	b128      	cbz	r0, d6422 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6416:	4629      	mov	r1, r5
   d6418:	7c20      	ldrb	r0, [r4, #16]
   d641a:	f7fe ff13 	bl	d5244 <HAL_USB_USART_Send_Data>
   d641e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6422:	bd38      	pop	{r3, r4, r5, pc}

000d6424 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6424:	b510      	push	{r4, lr}
   d6426:	4604      	mov	r4, r0
   d6428:	2300      	movs	r3, #0
   d642a:	6063      	str	r3, [r4, #4]
   d642c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6430:	60a3      	str	r3, [r4, #8]
   d6432:	4b05      	ldr	r3, [pc, #20]	; (d6448 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6434:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6436:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6438:	4608      	mov	r0, r1
{
  _serial = serial;
   d643a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d643c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d643e:	4611      	mov	r1, r2
   d6440:	f7fe fee0 	bl	d5204 <HAL_USB_USART_Init>
}
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}
   d6448:	000d83b0 	.word	0x000d83b0

000d644c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d644c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d644e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6450:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6452:	2100      	movs	r1, #0
   d6454:	f001 f89d 	bl	d7592 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6458:	4620      	mov	r0, r4
   d645a:	bd10      	pop	{r4, pc}

000d645c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d645c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d645e:	4d0e      	ldr	r5, [pc, #56]	; (d6498 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6460:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6462:	a801      	add	r0, sp, #4
   d6464:	f7ff fff2 	bl	d644c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6468:	6829      	ldr	r1, [r5, #0]
   d646a:	f011 0401 	ands.w	r4, r1, #1
   d646e:	d110      	bne.n	d6492 <_Z16_fetch_usbserialv+0x36>
   d6470:	4628      	mov	r0, r5
   d6472:	f7fd fe16 	bl	d40a2 <__cxa_guard_acquire>
   d6476:	b160      	cbz	r0, d6492 <_Z16_fetch_usbserialv+0x36>
   d6478:	aa01      	add	r2, sp, #4
   d647a:	4621      	mov	r1, r4
   d647c:	4807      	ldr	r0, [pc, #28]	; (d649c <_Z16_fetch_usbserialv+0x40>)
   d647e:	f7ff ffd1 	bl	d6424 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6482:	4628      	mov	r0, r5
   d6484:	f7fd fe12 	bl	d40ac <__cxa_guard_release>
   d6488:	4a05      	ldr	r2, [pc, #20]	; (d64a0 <_Z16_fetch_usbserialv+0x44>)
   d648a:	4906      	ldr	r1, [pc, #24]	; (d64a4 <_Z16_fetch_usbserialv+0x48>)
   d648c:	4803      	ldr	r0, [pc, #12]	; (d649c <_Z16_fetch_usbserialv+0x40>)
   d648e:	f000 f9ff 	bl	d6890 <__aeabi_atexit>
	return _usbserial;
}
   d6492:	4802      	ldr	r0, [pc, #8]	; (d649c <_Z16_fetch_usbserialv+0x40>)
   d6494:	b007      	add	sp, #28
   d6496:	bd30      	pop	{r4, r5, pc}
   d6498:	2003e6c8 	.word	0x2003e6c8
   d649c:	2003e6cc 	.word	0x2003e6cc
   d64a0:	2003e2dc 	.word	0x2003e2dc
   d64a4:	000d63a5 	.word	0x000d63a5

000d64a8 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d64a8:	4770      	bx	lr

000d64aa <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d64aa:	2001      	movs	r0, #1
   d64ac:	4770      	bx	lr
	...

000d64b0 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d64b0:	8983      	ldrh	r3, [r0, #12]
   d64b2:	b11b      	cbz	r3, d64bc <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d64b4:	6903      	ldr	r3, [r0, #16]
   d64b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d64ba:	d102      	bne.n	d64c2 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d64bc:	ed9f 0a05 	vldr	s0, [pc, #20]	; d64d4 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d64c0:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d64c2:	ee07 3a90 	vmov	s15, r3
   d64c6:	ed9f 7a04 	vldr	s14, [pc, #16]	; d64d8 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d64ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d64ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d64d2:	4770      	bx	lr
   d64d4:	00000000 	.word	0x00000000
   d64d8:	42c80000 	.word	0x42c80000

000d64dc <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d64dc:	8983      	ldrh	r3, [r0, #12]
   d64de:	b11b      	cbz	r3, d64e8 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d64e0:	6983      	ldr	r3, [r0, #24]
   d64e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d64e6:	d102      	bne.n	d64ee <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d64e8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6500 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d64ec:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d64ee:	ee07 3a90 	vmov	s15, r3
   d64f2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6504 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d64f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d64fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d64fe:	4770      	bx	lr
   d6500:	00000000 	.word	0x00000000
   d6504:	42c80000 	.word	0x42c80000

000d6508 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6508:	2200      	movs	r2, #0
   d650a:	4611      	mov	r1, r2
   d650c:	6840      	ldr	r0, [r0, #4]
   d650e:	f7fe bf65 	b.w	d53dc <network_ready>

000d6512 <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6512:	b510      	push	{r4, lr}
   d6514:	2124      	movs	r1, #36	; 0x24
   d6516:	4604      	mov	r4, r0
   d6518:	f000 f9bf 	bl	d689a <_ZdlPvj>
   d651c:	4620      	mov	r0, r4
   d651e:	bd10      	pop	{r4, pc}

000d6520 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6520:	2200      	movs	r2, #0
   d6522:	4611      	mov	r1, r2
   d6524:	6840      	ldr	r0, [r0, #4]
   d6526:	f7fe bf79 	b.w	d541c <network_listening>

000d652a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d652a:	2200      	movs	r2, #0
   d652c:	4611      	mov	r1, r2
   d652e:	6840      	ldr	r0, [r0, #4]
   d6530:	f7fe bf84 	b.w	d543c <network_get_listen_timeout>

000d6534 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6534:	2200      	movs	r2, #0
   d6536:	6840      	ldr	r0, [r0, #4]
   d6538:	f7fe bf78 	b.w	d542c <network_set_listen_timeout>

000d653c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d653c:	2200      	movs	r2, #0
   d653e:	f081 0101 	eor.w	r1, r1, #1
   d6542:	6840      	ldr	r0, [r0, #4]
   d6544:	f7fe bf62 	b.w	d540c <network_listen>

000d6548 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6548:	2300      	movs	r3, #0
   d654a:	461a      	mov	r2, r3
   d654c:	4619      	mov	r1, r3
   d654e:	6840      	ldr	r0, [r0, #4]
   d6550:	f7fe bf54 	b.w	d53fc <network_off>

000d6554 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6554:	2300      	movs	r3, #0
   d6556:	461a      	mov	r2, r3
   d6558:	4619      	mov	r1, r3
   d655a:	6840      	ldr	r0, [r0, #4]
   d655c:	f7fe bf46 	b.w	d53ec <network_on>

000d6560 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6560:	2200      	movs	r2, #0
   d6562:	4611      	mov	r1, r2
   d6564:	6840      	ldr	r0, [r0, #4]
   d6566:	f7fe bf29 	b.w	d53bc <network_connecting>

000d656a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d656a:	2200      	movs	r2, #0
   d656c:	2102      	movs	r1, #2
   d656e:	6840      	ldr	r0, [r0, #4]
   d6570:	f7fe bf2c 	b.w	d53cc <network_disconnect>

000d6574 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6574:	2300      	movs	r3, #0
   d6576:	461a      	mov	r2, r3
   d6578:	6840      	ldr	r0, [r0, #4]
   d657a:	f7fe bf17 	b.w	d53ac <network_connect>
	...

000d6580 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d6580:	8983      	ldrh	r3, [r0, #12]
   d6582:	b17b      	cbz	r3, d65a4 <_ZNK10WiFiSignal10getQualityEv+0x24>
   d6584:	6a03      	ldr	r3, [r0, #32]
   d6586:	2b00      	cmp	r3, #0
   d6588:	db0c      	blt.n	d65a4 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d658a:	ee07 3a90 	vmov	s15, r3
   d658e:	eddf 6a07 	vldr	s13, [pc, #28]	; d65ac <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d6592:	ed9f 0a07 	vldr	s0, [pc, #28]	; d65b0 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d6596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d659a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d659e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d65a2:	4770      	bx	lr
    }
    return -1.0f;
   d65a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d65a8:	4770      	bx	lr
   d65aa:	bf00      	nop
   d65ac:	477fff00 	.word	0x477fff00
   d65b0:	42c80000 	.word	0x42c80000

000d65b4 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d65b4:	8983      	ldrh	r3, [r0, #12]
   d65b6:	b17b      	cbz	r3, d65d8 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d65b8:	6943      	ldr	r3, [r0, #20]
   d65ba:	2b00      	cmp	r3, #0
   d65bc:	db0c      	blt.n	d65d8 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d65be:	ee07 3a90 	vmov	s15, r3
   d65c2:	eddf 6a07 	vldr	s13, [pc, #28]	; d65e0 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d65c6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d65e4 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d65ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d65ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d65d2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d65d6:	4770      	bx	lr
    }
    return -1.0f;
   d65d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d65dc:	4770      	bx	lr
   d65de:	bf00      	nop
   d65e0:	477fff00 	.word	0x477fff00
   d65e4:	42c80000 	.word	0x42c80000

000d65e8 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d65e8:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d65ea:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d65ec:	4606      	mov	r6, r0
    inf_ = inf;
   d65ee:	f100 040c 	add.w	r4, r0, #12
   d65f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65f6:	e895 0003 	ldmia.w	r5, {r0, r1}
   d65fa:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d65fe:	6933      	ldr	r3, [r6, #16]
   d6600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6604:	bf0e      	itee	eq
   d6606:	2302      	moveq	r3, #2
   d6608:	2264      	movne	r2, #100	; 0x64
   d660a:	fb93 f3f2 	sdivne	r3, r3, r2
   d660e:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d6610:	69b3      	ldr	r3, [r6, #24]
   d6612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6616:	bf0e      	itee	eq
   d6618:	2300      	moveq	r3, #0
   d661a:	2264      	movne	r2, #100	; 0x64
   d661c:	fb93 f3f2 	sdivne	r3, r3, r2
   d6620:	60b3      	str	r3, [r6, #8]
    return true;
}
   d6622:	2001      	movs	r0, #1
   d6624:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6628 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d6628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d662c:	4b16      	ldr	r3, [pc, #88]	; (d6688 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d662e:	6003      	str	r3, [r0, #0]
   d6630:	2500      	movs	r5, #0
   d6632:	4688      	mov	r8, r1
   d6634:	2702      	movs	r7, #2
   d6636:	2618      	movs	r6, #24
   d6638:	b086      	sub	sp, #24
   d663a:	6047      	str	r7, [r0, #4]
   d663c:	6085      	str	r5, [r0, #8]
   d663e:	4632      	mov	r2, r6
   d6640:	4629      	mov	r1, r5
   d6642:	4604      	mov	r4, r0
   d6644:	300c      	adds	r0, #12
   d6646:	f000 ffa4 	bl	d7592 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d664a:	462a      	mov	r2, r5
   d664c:	4629      	mov	r1, r5
   d664e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d6652:	f7fe fec3 	bl	d53dc <network_ready>
   d6656:	b190      	cbz	r0, d667e <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d6658:	4632      	mov	r2, r6
   d665a:	4629      	mov	r1, r5
   d665c:	4668      	mov	r0, sp
   d665e:	f000 ff98 	bl	d7592 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d6662:	462a      	mov	r2, r5
   d6664:	4669      	mov	r1, sp
   d6666:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d6668:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d666c:	f7fe fdfa 	bl	d5264 <wlan_connected_info>
        if (r == 0) {
   d6670:	b920      	cbnz	r0, d667c <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d6672:	4669      	mov	r1, sp
   d6674:	4620      	mov	r0, r4
   d6676:	f7ff ffb7 	bl	d65e8 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d667a:	e000      	b.n	d667e <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d667c:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d667e:	4620      	mov	r0, r4
   d6680:	b006      	add	sp, #24
   d6682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6686:	bf00      	nop
   d6688:	000d8414 	.word	0x000d8414

000d668c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d668c:	4b02      	ldr	r3, [pc, #8]	; (d6698 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d668e:	2204      	movs	r2, #4
   d6690:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6692:	4a02      	ldr	r2, [pc, #8]	; (d669c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6694:	601a      	str	r2, [r3, #0]
   d6696:	4770      	bx	lr
   d6698:	2003e6e0 	.word	0x2003e6e0
   d669c:	000d83e0 	.word	0x000d83e0

000d66a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d66a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d66a2:	4b0c      	ldr	r3, [pc, #48]	; (d66d4 <serialEventRun+0x34>)
   d66a4:	b133      	cbz	r3, d66b4 <serialEventRun+0x14>
   d66a6:	f7ff fed9 	bl	d645c <_Z16_fetch_usbserialv>
   d66aa:	6803      	ldr	r3, [r0, #0]
   d66ac:	691b      	ldr	r3, [r3, #16]
   d66ae:	4798      	blx	r3
   d66b0:	2800      	cmp	r0, #0
   d66b2:	dc09      	bgt.n	d66c8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d66b4:	4b08      	ldr	r3, [pc, #32]	; (d66d8 <serialEventRun+0x38>)
   d66b6:	b163      	cbz	r3, d66d2 <serialEventRun+0x32>
   d66b8:	f7ff fe4c 	bl	d6354 <_Z22__fetch_global_Serial1v>
   d66bc:	6803      	ldr	r3, [r0, #0]
   d66be:	691b      	ldr	r3, [r3, #16]
   d66c0:	4798      	blx	r3
   d66c2:	2800      	cmp	r0, #0
   d66c4:	dc03      	bgt.n	d66ce <serialEventRun+0x2e>
   d66c6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d66c8:	f3af 8000 	nop.w
   d66cc:	e7f2      	b.n	d66b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d66ce:	f3af 8000 	nop.w
   d66d2:	bd08      	pop	{r3, pc}
	...

000d66dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d66dc:	b508      	push	{r3, lr}
	serialEventRun();
   d66de:	f7ff ffdf 	bl	d66a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d66e2:	f7fe fca7 	bl	d5034 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d66e6:	4b01      	ldr	r3, [pc, #4]	; (d66ec <_post_loop+0x10>)
   d66e8:	6018      	str	r0, [r3, #0]
   d66ea:	bd08      	pop	{r3, pc}
   d66ec:	2003e6ec 	.word	0x2003e6ec

000d66f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d66f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66f2:	2300      	movs	r3, #0
   d66f4:	9300      	str	r3, [sp, #0]
   d66f6:	461a      	mov	r2, r3
   d66f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66fc:	f7fe fdfc 	bl	d52f8 <system_ctrl_set_result>
}
   d6700:	b003      	add	sp, #12
   d6702:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6708 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6708:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d670a:	8843      	ldrh	r3, [r0, #2]
   d670c:	2b0a      	cmp	r3, #10
   d670e:	d008      	beq.n	d6722 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6710:	2b50      	cmp	r3, #80	; 0x50
   d6712:	d109      	bne.n	d6728 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6714:	4b09      	ldr	r3, [pc, #36]	; (d673c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6716:	681b      	ldr	r3, [r3, #0]
   d6718:	b13b      	cbz	r3, d672a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d671a:	b003      	add	sp, #12
   d671c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6720:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6722:	f7ff ffe5 	bl	d66f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6726:	e006      	b.n	d6736 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6728:	2300      	movs	r3, #0
   d672a:	9300      	str	r3, [sp, #0]
   d672c:	461a      	mov	r2, r3
   d672e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6732:	f7fe fde1 	bl	d52f8 <system_ctrl_set_result>
        break;
    }
}
   d6736:	b003      	add	sp, #12
   d6738:	f85d fb04 	ldr.w	pc, [sp], #4
   d673c:	2003e6e8 	.word	0x2003e6e8

000d6740 <module_user_init_hook>:

void module_user_init_hook()
{
   d6740:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6742:	f7fe fc67 	bl	d5014 <HAL_RNG_GetRandomNumber>
   d6746:	4604      	mov	r4, r0
    srand(seed);
   d6748:	f000 ff2c 	bl	d75a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d674c:	4b07      	ldr	r3, [pc, #28]	; (d676c <module_user_init_hook+0x2c>)
   d674e:	b113      	cbz	r3, d6756 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6750:	4620      	mov	r0, r4
   d6752:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6756:	2100      	movs	r1, #0
   d6758:	4804      	ldr	r0, [pc, #16]	; (d676c <module_user_init_hook+0x2c>)
   d675a:	f7fe fe1f 	bl	d539c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d675e:	2100      	movs	r1, #0
   d6760:	4803      	ldr	r0, [pc, #12]	; (d6770 <module_user_init_hook+0x30>)
}
   d6762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6766:	f7fe bdbd 	b.w	d52e4 <system_ctrl_set_app_request_handler>
   d676a:	bf00      	nop
   d676c:	00000000 	.word	0x00000000
   d6770:	000d6709 	.word	0x000d6709

000d6774 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6774:	b510      	push	{r4, lr}
   d6776:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6778:	480f      	ldr	r0, [pc, #60]	; (d67b8 <pinAvailable+0x44>)
   d677a:	f7ff fc65 	bl	d6048 <_ZN8SPIClass9isEnabledEv>
   d677e:	b128      	cbz	r0, d678c <pinAvailable+0x18>
   d6780:	f1a4 030b 	sub.w	r3, r4, #11
   d6784:	2b02      	cmp	r3, #2
   d6786:	d801      	bhi.n	d678c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6788:	2000      	movs	r0, #0
   d678a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d678c:	f000 f83e 	bl	d680c <_Z19__fetch_global_Wirev>
   d6790:	f7ff f9fc 	bl	d5b8c <_ZN7TwoWire9isEnabledEv>
   d6794:	b108      	cbz	r0, d679a <pinAvailable+0x26>
   d6796:	2c01      	cmp	r4, #1
   d6798:	d9f6      	bls.n	d6788 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d679a:	f7ff fddb 	bl	d6354 <_Z22__fetch_global_Serial1v>
   d679e:	f7ff fdd5 	bl	d634c <_ZN11USARTSerial9isEnabledEv>
   d67a2:	b118      	cbz	r0, d67ac <pinAvailable+0x38>
   d67a4:	f1a4 0309 	sub.w	r3, r4, #9
   d67a8:	2b01      	cmp	r3, #1
   d67aa:	d9ed      	bls.n	d6788 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d67ac:	2c23      	cmp	r4, #35	; 0x23
   d67ae:	bf8c      	ite	hi
   d67b0:	2000      	movhi	r0, #0
   d67b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d67b4:	bd10      	pop	{r4, pc}
   d67b6:	bf00      	nop
   d67b8:	2003e708 	.word	0x2003e708

000d67bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67bc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d67be:	b538      	push	{r3, r4, r5, lr}
   d67c0:	4604      	mov	r4, r0
   d67c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d67c4:	d80a      	bhi.n	d67dc <pinMode+0x20>
   d67c6:	29ff      	cmp	r1, #255	; 0xff
   d67c8:	d008      	beq.n	d67dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d67ca:	f7ff ffd3 	bl	d6774 <pinAvailable>
   d67ce:	b128      	cbz	r0, d67dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d67d0:	4629      	mov	r1, r5
   d67d2:	4620      	mov	r0, r4
}
   d67d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d67d8:	f7fe bc54 	b.w	d5084 <HAL_Pin_Mode>
   d67dc:	bd38      	pop	{r3, r4, r5, pc}

000d67de <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d67de:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d67e0:	b510      	push	{r4, lr}
   d67e2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d67e4:	bf9c      	itt	ls
   d67e6:	340e      	addls	r4, #14
   d67e8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d67ea:	4620      	mov	r0, r4
   d67ec:	f7ff ffc2 	bl	d6774 <pinAvailable>
   d67f0:	b150      	cbz	r0, d6808 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d67f2:	2103      	movs	r1, #3
   d67f4:	4620      	mov	r0, r4
   d67f6:	f7fe fc3d 	bl	d5074 <HAL_Validate_Pin_Function>
   d67fa:	2803      	cmp	r0, #3
   d67fc:	d104      	bne.n	d6808 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d67fe:	4620      	mov	r0, r4
}
   d6800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6804:	f7fe bc56 	b.w	d50b4 <HAL_ADC_Read>
}
   d6808:	2000      	movs	r0, #0
   d680a:	bd10      	pop	{r4, pc}

000d680c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d680c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d680e:	4d0b      	ldr	r5, [pc, #44]	; (d683c <_Z19__fetch_global_Wirev+0x30>)
   d6810:	6829      	ldr	r1, [r5, #0]
   d6812:	f011 0401 	ands.w	r4, r1, #1
   d6816:	d10f      	bne.n	d6838 <_Z19__fetch_global_Wirev+0x2c>
   d6818:	4628      	mov	r0, r5
   d681a:	f7fd fc42 	bl	d40a2 <__cxa_guard_acquire>
   d681e:	b158      	cbz	r0, d6838 <_Z19__fetch_global_Wirev+0x2c>
   d6820:	4621      	mov	r1, r4
   d6822:	4807      	ldr	r0, [pc, #28]	; (d6840 <_Z19__fetch_global_Wirev+0x34>)
   d6824:	f7ff f9a0 	bl	d5b68 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6828:	4628      	mov	r0, r5
   d682a:	f7fd fc3f 	bl	d40ac <__cxa_guard_release>
   d682e:	4a05      	ldr	r2, [pc, #20]	; (d6844 <_Z19__fetch_global_Wirev+0x38>)
   d6830:	4905      	ldr	r1, [pc, #20]	; (d6848 <_Z19__fetch_global_Wirev+0x3c>)
   d6832:	4803      	ldr	r0, [pc, #12]	; (d6840 <_Z19__fetch_global_Wirev+0x34>)
   d6834:	f000 f82c 	bl	d6890 <__aeabi_atexit>
	return wire;
}
   d6838:	4801      	ldr	r0, [pc, #4]	; (d6840 <_Z19__fetch_global_Wirev+0x34>)
   d683a:	bd38      	pop	{r3, r4, r5, pc}
   d683c:	2003e6f0 	.word	0x2003e6f0
   d6840:	2003e6f4 	.word	0x2003e6f4
   d6844:	2003e2dc 	.word	0x2003e2dc
   d6848:	000d5b11 	.word	0x000d5b11

000d684c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d684c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d684e:	4c0c      	ldr	r4, [pc, #48]	; (d6880 <_GLOBAL__sub_I_SPI+0x34>)
   d6850:	4e0c      	ldr	r6, [pc, #48]	; (d6884 <_GLOBAL__sub_I_SPI+0x38>)
   d6852:	4d0d      	ldr	r5, [pc, #52]	; (d6888 <_GLOBAL__sub_I_SPI+0x3c>)
   d6854:	2100      	movs	r1, #0
   d6856:	4620      	mov	r0, r4
   d6858:	f7ff fbe2 	bl	d6020 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d685c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d685e:	4c0b      	ldr	r4, [pc, #44]	; (d688c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6860:	4632      	mov	r2, r6
   d6862:	4629      	mov	r1, r5
   d6864:	f000 f814 	bl	d6890 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6868:	2101      	movs	r1, #1
   d686a:	4620      	mov	r0, r4
   d686c:	f7ff fbd8 	bl	d6020 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6870:	4632      	mov	r2, r6
   d6872:	4629      	mov	r1, r5
   d6874:	4620      	mov	r0, r4
   d6876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d687a:	f000 b809 	b.w	d6890 <__aeabi_atexit>
   d687e:	bf00      	nop
   d6880:	2003e708 	.word	0x2003e708
   d6884:	2003e2dc 	.word	0x2003e2dc
   d6888:	000d6011 	.word	0x000d6011
   d688c:	2003e718 	.word	0x2003e718

000d6890 <__aeabi_atexit>:
   d6890:	460b      	mov	r3, r1
   d6892:	4601      	mov	r1, r0
   d6894:	4618      	mov	r0, r3
   d6896:	f000 bd6b 	b.w	d7370 <__cxa_atexit>

000d689a <_ZdlPvj>:
   d689a:	f7fd bbfe 	b.w	d409a <_ZdlPv>

000d689e <_ZSt25__throw_bad_function_callv>:
   d689e:	b508      	push	{r3, lr}
   d68a0:	f7fe fdfc 	bl	d549c <abort>

000d68a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d68a4:	4b24      	ldr	r3, [pc, #144]	; (d6938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d68a6:	681a      	ldr	r2, [r3, #0]
   d68a8:	07d0      	lsls	r0, r2, #31
   d68aa:	bf5c      	itt	pl
   d68ac:	2201      	movpl	r2, #1
   d68ae:	601a      	strpl	r2, [r3, #0]
   d68b0:	4b22      	ldr	r3, [pc, #136]	; (d693c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d68b2:	681a      	ldr	r2, [r3, #0]
   d68b4:	07d1      	lsls	r1, r2, #31
   d68b6:	bf5c      	itt	pl
   d68b8:	2201      	movpl	r2, #1
   d68ba:	601a      	strpl	r2, [r3, #0]
   d68bc:	4b20      	ldr	r3, [pc, #128]	; (d6940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d68be:	681a      	ldr	r2, [r3, #0]
   d68c0:	07d2      	lsls	r2, r2, #31
   d68c2:	bf5c      	itt	pl
   d68c4:	2201      	movpl	r2, #1
   d68c6:	601a      	strpl	r2, [r3, #0]
   d68c8:	4b1e      	ldr	r3, [pc, #120]	; (d6944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d68ca:	681a      	ldr	r2, [r3, #0]
   d68cc:	07d0      	lsls	r0, r2, #31
   d68ce:	bf5c      	itt	pl
   d68d0:	2201      	movpl	r2, #1
   d68d2:	601a      	strpl	r2, [r3, #0]
   d68d4:	4b1c      	ldr	r3, [pc, #112]	; (d6948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d68d6:	681a      	ldr	r2, [r3, #0]
   d68d8:	07d1      	lsls	r1, r2, #31
   d68da:	bf5c      	itt	pl
   d68dc:	2201      	movpl	r2, #1
   d68de:	601a      	strpl	r2, [r3, #0]
   d68e0:	4b1a      	ldr	r3, [pc, #104]	; (d694c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d68e2:	681a      	ldr	r2, [r3, #0]
   d68e4:	07d2      	lsls	r2, r2, #31
   d68e6:	bf5c      	itt	pl
   d68e8:	2201      	movpl	r2, #1
   d68ea:	601a      	strpl	r2, [r3, #0]
   d68ec:	4b18      	ldr	r3, [pc, #96]	; (d6950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d68ee:	681a      	ldr	r2, [r3, #0]
   d68f0:	07d0      	lsls	r0, r2, #31
   d68f2:	bf5c      	itt	pl
   d68f4:	2201      	movpl	r2, #1
   d68f6:	601a      	strpl	r2, [r3, #0]
   d68f8:	4b16      	ldr	r3, [pc, #88]	; (d6954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d68fa:	681a      	ldr	r2, [r3, #0]
   d68fc:	07d1      	lsls	r1, r2, #31
   d68fe:	bf5c      	itt	pl
   d6900:	2201      	movpl	r2, #1
   d6902:	601a      	strpl	r2, [r3, #0]
   d6904:	4b14      	ldr	r3, [pc, #80]	; (d6958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6906:	681a      	ldr	r2, [r3, #0]
   d6908:	07d2      	lsls	r2, r2, #31
   d690a:	bf5c      	itt	pl
   d690c:	2201      	movpl	r2, #1
   d690e:	601a      	strpl	r2, [r3, #0]
   d6910:	4b12      	ldr	r3, [pc, #72]	; (d695c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6912:	681a      	ldr	r2, [r3, #0]
   d6914:	07d0      	lsls	r0, r2, #31
   d6916:	bf5c      	itt	pl
   d6918:	2201      	movpl	r2, #1
   d691a:	601a      	strpl	r2, [r3, #0]
   d691c:	4b10      	ldr	r3, [pc, #64]	; (d6960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d691e:	681a      	ldr	r2, [r3, #0]
   d6920:	07d1      	lsls	r1, r2, #31
   d6922:	bf5c      	itt	pl
   d6924:	2201      	movpl	r2, #1
   d6926:	601a      	strpl	r2, [r3, #0]
   d6928:	4b0e      	ldr	r3, [pc, #56]	; (d6964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d692a:	681a      	ldr	r2, [r3, #0]
   d692c:	07d2      	lsls	r2, r2, #31
   d692e:	bf5c      	itt	pl
   d6930:	2201      	movpl	r2, #1
   d6932:	601a      	strpl	r2, [r3, #0]
   d6934:	4770      	bx	lr
   d6936:	bf00      	nop
   d6938:	2003e754 	.word	0x2003e754
   d693c:	2003e750 	.word	0x2003e750
   d6940:	2003e74c 	.word	0x2003e74c
   d6944:	2003e748 	.word	0x2003e748
   d6948:	2003e744 	.word	0x2003e744
   d694c:	2003e740 	.word	0x2003e740
   d6950:	2003e73c 	.word	0x2003e73c
   d6954:	2003e738 	.word	0x2003e738
   d6958:	2003e734 	.word	0x2003e734
   d695c:	2003e730 	.word	0x2003e730
   d6960:	2003e72c 	.word	0x2003e72c
   d6964:	2003e728 	.word	0x2003e728

000d6968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6968:	4b18      	ldr	r3, [pc, #96]	; (d69cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d696a:	681a      	ldr	r2, [r3, #0]
   d696c:	07d1      	lsls	r1, r2, #31
   d696e:	bf5c      	itt	pl
   d6970:	2201      	movpl	r2, #1
   d6972:	601a      	strpl	r2, [r3, #0]
   d6974:	4b16      	ldr	r3, [pc, #88]	; (d69d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6976:	681a      	ldr	r2, [r3, #0]
   d6978:	07d2      	lsls	r2, r2, #31
   d697a:	bf5c      	itt	pl
   d697c:	2201      	movpl	r2, #1
   d697e:	601a      	strpl	r2, [r3, #0]
   d6980:	4b14      	ldr	r3, [pc, #80]	; (d69d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6982:	681a      	ldr	r2, [r3, #0]
   d6984:	07d0      	lsls	r0, r2, #31
   d6986:	bf5c      	itt	pl
   d6988:	2201      	movpl	r2, #1
   d698a:	601a      	strpl	r2, [r3, #0]
   d698c:	4b12      	ldr	r3, [pc, #72]	; (d69d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d698e:	681a      	ldr	r2, [r3, #0]
   d6990:	07d1      	lsls	r1, r2, #31
   d6992:	bf5c      	itt	pl
   d6994:	2201      	movpl	r2, #1
   d6996:	601a      	strpl	r2, [r3, #0]
   d6998:	4b10      	ldr	r3, [pc, #64]	; (d69dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d699a:	681a      	ldr	r2, [r3, #0]
   d699c:	07d2      	lsls	r2, r2, #31
   d699e:	bf5c      	itt	pl
   d69a0:	2201      	movpl	r2, #1
   d69a2:	601a      	strpl	r2, [r3, #0]
   d69a4:	4b0e      	ldr	r3, [pc, #56]	; (d69e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d69a6:	681a      	ldr	r2, [r3, #0]
   d69a8:	07d0      	lsls	r0, r2, #31
   d69aa:	bf5c      	itt	pl
   d69ac:	2201      	movpl	r2, #1
   d69ae:	601a      	strpl	r2, [r3, #0]
   d69b0:	4b0c      	ldr	r3, [pc, #48]	; (d69e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d69b2:	681a      	ldr	r2, [r3, #0]
   d69b4:	07d1      	lsls	r1, r2, #31
   d69b6:	bf5c      	itt	pl
   d69b8:	2201      	movpl	r2, #1
   d69ba:	601a      	strpl	r2, [r3, #0]
   d69bc:	4b0a      	ldr	r3, [pc, #40]	; (d69e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d69be:	681a      	ldr	r2, [r3, #0]
   d69c0:	07d2      	lsls	r2, r2, #31
   d69c2:	bf5c      	itt	pl
   d69c4:	2201      	movpl	r2, #1
   d69c6:	601a      	strpl	r2, [r3, #0]
   d69c8:	4770      	bx	lr
   d69ca:	bf00      	nop
   d69cc:	2003e774 	.word	0x2003e774
   d69d0:	2003e770 	.word	0x2003e770
   d69d4:	2003e76c 	.word	0x2003e76c
   d69d8:	2003e768 	.word	0x2003e768
   d69dc:	2003e764 	.word	0x2003e764
   d69e0:	2003e760 	.word	0x2003e760
   d69e4:	2003e75c 	.word	0x2003e75c
   d69e8:	2003e758 	.word	0x2003e758

000d69ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d69ec:	4b18      	ldr	r3, [pc, #96]	; (d6a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d69ee:	681a      	ldr	r2, [r3, #0]
   d69f0:	07d1      	lsls	r1, r2, #31
   d69f2:	bf5c      	itt	pl
   d69f4:	2201      	movpl	r2, #1
   d69f6:	601a      	strpl	r2, [r3, #0]
   d69f8:	4b16      	ldr	r3, [pc, #88]	; (d6a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d69fa:	681a      	ldr	r2, [r3, #0]
   d69fc:	07d2      	lsls	r2, r2, #31
   d69fe:	bf5c      	itt	pl
   d6a00:	2201      	movpl	r2, #1
   d6a02:	601a      	strpl	r2, [r3, #0]
   d6a04:	4b14      	ldr	r3, [pc, #80]	; (d6a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a06:	681a      	ldr	r2, [r3, #0]
   d6a08:	07d0      	lsls	r0, r2, #31
   d6a0a:	bf5c      	itt	pl
   d6a0c:	2201      	movpl	r2, #1
   d6a0e:	601a      	strpl	r2, [r3, #0]
   d6a10:	4b12      	ldr	r3, [pc, #72]	; (d6a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a12:	681a      	ldr	r2, [r3, #0]
   d6a14:	07d1      	lsls	r1, r2, #31
   d6a16:	bf5c      	itt	pl
   d6a18:	2201      	movpl	r2, #1
   d6a1a:	601a      	strpl	r2, [r3, #0]
   d6a1c:	4b10      	ldr	r3, [pc, #64]	; (d6a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a1e:	681a      	ldr	r2, [r3, #0]
   d6a20:	07d2      	lsls	r2, r2, #31
   d6a22:	bf5c      	itt	pl
   d6a24:	2201      	movpl	r2, #1
   d6a26:	601a      	strpl	r2, [r3, #0]
   d6a28:	4b0e      	ldr	r3, [pc, #56]	; (d6a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a2a:	681a      	ldr	r2, [r3, #0]
   d6a2c:	07d0      	lsls	r0, r2, #31
   d6a2e:	bf5c      	itt	pl
   d6a30:	2201      	movpl	r2, #1
   d6a32:	601a      	strpl	r2, [r3, #0]
   d6a34:	4b0c      	ldr	r3, [pc, #48]	; (d6a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a36:	681a      	ldr	r2, [r3, #0]
   d6a38:	07d1      	lsls	r1, r2, #31
   d6a3a:	bf5c      	itt	pl
   d6a3c:	2201      	movpl	r2, #1
   d6a3e:	601a      	strpl	r2, [r3, #0]
   d6a40:	4b0a      	ldr	r3, [pc, #40]	; (d6a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6a42:	681a      	ldr	r2, [r3, #0]
   d6a44:	07d2      	lsls	r2, r2, #31
   d6a46:	bf5c      	itt	pl
   d6a48:	2201      	movpl	r2, #1
   d6a4a:	601a      	strpl	r2, [r3, #0]
   d6a4c:	4770      	bx	lr
   d6a4e:	bf00      	nop
   d6a50:	2003e794 	.word	0x2003e794
   d6a54:	2003e790 	.word	0x2003e790
   d6a58:	2003e78c 	.word	0x2003e78c
   d6a5c:	2003e788 	.word	0x2003e788
   d6a60:	2003e784 	.word	0x2003e784
   d6a64:	2003e780 	.word	0x2003e780
   d6a68:	2003e77c 	.word	0x2003e77c
   d6a6c:	2003e778 	.word	0x2003e778

000d6a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6a70:	4b24      	ldr	r3, [pc, #144]	; (d6b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	07d0      	lsls	r0, r2, #31
   d6a76:	bf5c      	itt	pl
   d6a78:	2201      	movpl	r2, #1
   d6a7a:	601a      	strpl	r2, [r3, #0]
   d6a7c:	4b22      	ldr	r3, [pc, #136]	; (d6b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6a7e:	681a      	ldr	r2, [r3, #0]
   d6a80:	07d1      	lsls	r1, r2, #31
   d6a82:	bf5c      	itt	pl
   d6a84:	2201      	movpl	r2, #1
   d6a86:	601a      	strpl	r2, [r3, #0]
   d6a88:	4b20      	ldr	r3, [pc, #128]	; (d6b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d2      	lsls	r2, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b1e      	ldr	r3, [pc, #120]	; (d6b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d0      	lsls	r0, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b1c      	ldr	r3, [pc, #112]	; (d6b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d1      	lsls	r1, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b1a      	ldr	r3, [pc, #104]	; (d6b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d2      	lsls	r2, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4b18      	ldr	r3, [pc, #96]	; (d6b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d0      	lsls	r0, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b16      	ldr	r3, [pc, #88]	; (d6b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d1      	lsls	r1, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4b14      	ldr	r3, [pc, #80]	; (d6b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d2      	lsls	r2, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4b12      	ldr	r3, [pc, #72]	; (d6b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d0      	lsls	r0, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4b10      	ldr	r3, [pc, #64]	; (d6b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6aea:	681a      	ldr	r2, [r3, #0]
   d6aec:	07d1      	lsls	r1, r2, #31
   d6aee:	bf5c      	itt	pl
   d6af0:	2201      	movpl	r2, #1
   d6af2:	601a      	strpl	r2, [r3, #0]
   d6af4:	4b0e      	ldr	r3, [pc, #56]	; (d6b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d2      	lsls	r2, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4770      	bx	lr
   d6b02:	bf00      	nop
   d6b04:	2003e7c4 	.word	0x2003e7c4
   d6b08:	2003e7c0 	.word	0x2003e7c0
   d6b0c:	2003e7bc 	.word	0x2003e7bc
   d6b10:	2003e7b8 	.word	0x2003e7b8
   d6b14:	2003e7b4 	.word	0x2003e7b4
   d6b18:	2003e7b0 	.word	0x2003e7b0
   d6b1c:	2003e7ac 	.word	0x2003e7ac
   d6b20:	2003e7a8 	.word	0x2003e7a8
   d6b24:	2003e7a4 	.word	0x2003e7a4
   d6b28:	2003e7a0 	.word	0x2003e7a0
   d6b2c:	2003e79c 	.word	0x2003e79c
   d6b30:	2003e798 	.word	0x2003e798

000d6b34 <__aeabi_drsub>:
   d6b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6b38:	e002      	b.n	d6b40 <__adddf3>
   d6b3a:	bf00      	nop

000d6b3c <__aeabi_dsub>:
   d6b3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6b40 <__adddf3>:
   d6b40:	b530      	push	{r4, r5, lr}
   d6b42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6b46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6b4a:	ea94 0f05 	teq	r4, r5
   d6b4e:	bf08      	it	eq
   d6b50:	ea90 0f02 	teqeq	r0, r2
   d6b54:	bf1f      	itttt	ne
   d6b56:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6b5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6b5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6b62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6b66:	f000 80e2 	beq.w	d6d2e <__adddf3+0x1ee>
   d6b6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6b6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6b72:	bfb8      	it	lt
   d6b74:	426d      	neglt	r5, r5
   d6b76:	dd0c      	ble.n	d6b92 <__adddf3+0x52>
   d6b78:	442c      	add	r4, r5
   d6b7a:	ea80 0202 	eor.w	r2, r0, r2
   d6b7e:	ea81 0303 	eor.w	r3, r1, r3
   d6b82:	ea82 0000 	eor.w	r0, r2, r0
   d6b86:	ea83 0101 	eor.w	r1, r3, r1
   d6b8a:	ea80 0202 	eor.w	r2, r0, r2
   d6b8e:	ea81 0303 	eor.w	r3, r1, r3
   d6b92:	2d36      	cmp	r5, #54	; 0x36
   d6b94:	bf88      	it	hi
   d6b96:	bd30      	pophi	{r4, r5, pc}
   d6b98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6b9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6ba0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6ba4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6ba8:	d002      	beq.n	d6bb0 <__adddf3+0x70>
   d6baa:	4240      	negs	r0, r0
   d6bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6bb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6bb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6bb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6bbc:	d002      	beq.n	d6bc4 <__adddf3+0x84>
   d6bbe:	4252      	negs	r2, r2
   d6bc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6bc4:	ea94 0f05 	teq	r4, r5
   d6bc8:	f000 80a7 	beq.w	d6d1a <__adddf3+0x1da>
   d6bcc:	f1a4 0401 	sub.w	r4, r4, #1
   d6bd0:	f1d5 0e20 	rsbs	lr, r5, #32
   d6bd4:	db0d      	blt.n	d6bf2 <__adddf3+0xb2>
   d6bd6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6bda:	fa22 f205 	lsr.w	r2, r2, r5
   d6bde:	1880      	adds	r0, r0, r2
   d6be0:	f141 0100 	adc.w	r1, r1, #0
   d6be4:	fa03 f20e 	lsl.w	r2, r3, lr
   d6be8:	1880      	adds	r0, r0, r2
   d6bea:	fa43 f305 	asr.w	r3, r3, r5
   d6bee:	4159      	adcs	r1, r3
   d6bf0:	e00e      	b.n	d6c10 <__adddf3+0xd0>
   d6bf2:	f1a5 0520 	sub.w	r5, r5, #32
   d6bf6:	f10e 0e20 	add.w	lr, lr, #32
   d6bfa:	2a01      	cmp	r2, #1
   d6bfc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c00:	bf28      	it	cs
   d6c02:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c06:	fa43 f305 	asr.w	r3, r3, r5
   d6c0a:	18c0      	adds	r0, r0, r3
   d6c0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c14:	d507      	bpl.n	d6c26 <__adddf3+0xe6>
   d6c16:	f04f 0e00 	mov.w	lr, #0
   d6c1a:	f1dc 0c00 	rsbs	ip, ip, #0
   d6c1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6c22:	eb6e 0101 	sbc.w	r1, lr, r1
   d6c26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6c2a:	d31b      	bcc.n	d6c64 <__adddf3+0x124>
   d6c2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6c30:	d30c      	bcc.n	d6c4c <__adddf3+0x10c>
   d6c32:	0849      	lsrs	r1, r1, #1
   d6c34:	ea5f 0030 	movs.w	r0, r0, rrx
   d6c38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6c3c:	f104 0401 	add.w	r4, r4, #1
   d6c40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6c44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6c48:	f080 809a 	bcs.w	d6d80 <__adddf3+0x240>
   d6c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6c50:	bf08      	it	eq
   d6c52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c56:	f150 0000 	adcs.w	r0, r0, #0
   d6c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c5e:	ea41 0105 	orr.w	r1, r1, r5
   d6c62:	bd30      	pop	{r4, r5, pc}
   d6c64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6c68:	4140      	adcs	r0, r0
   d6c6a:	eb41 0101 	adc.w	r1, r1, r1
   d6c6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c72:	f1a4 0401 	sub.w	r4, r4, #1
   d6c76:	d1e9      	bne.n	d6c4c <__adddf3+0x10c>
   d6c78:	f091 0f00 	teq	r1, #0
   d6c7c:	bf04      	itt	eq
   d6c7e:	4601      	moveq	r1, r0
   d6c80:	2000      	moveq	r0, #0
   d6c82:	fab1 f381 	clz	r3, r1
   d6c86:	bf08      	it	eq
   d6c88:	3320      	addeq	r3, #32
   d6c8a:	f1a3 030b 	sub.w	r3, r3, #11
   d6c8e:	f1b3 0220 	subs.w	r2, r3, #32
   d6c92:	da0c      	bge.n	d6cae <__adddf3+0x16e>
   d6c94:	320c      	adds	r2, #12
   d6c96:	dd08      	ble.n	d6caa <__adddf3+0x16a>
   d6c98:	f102 0c14 	add.w	ip, r2, #20
   d6c9c:	f1c2 020c 	rsb	r2, r2, #12
   d6ca0:	fa01 f00c 	lsl.w	r0, r1, ip
   d6ca4:	fa21 f102 	lsr.w	r1, r1, r2
   d6ca8:	e00c      	b.n	d6cc4 <__adddf3+0x184>
   d6caa:	f102 0214 	add.w	r2, r2, #20
   d6cae:	bfd8      	it	le
   d6cb0:	f1c2 0c20 	rsble	ip, r2, #32
   d6cb4:	fa01 f102 	lsl.w	r1, r1, r2
   d6cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6cbc:	bfdc      	itt	le
   d6cbe:	ea41 010c 	orrle.w	r1, r1, ip
   d6cc2:	4090      	lslle	r0, r2
   d6cc4:	1ae4      	subs	r4, r4, r3
   d6cc6:	bfa2      	ittt	ge
   d6cc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6ccc:	4329      	orrge	r1, r5
   d6cce:	bd30      	popge	{r4, r5, pc}
   d6cd0:	ea6f 0404 	mvn.w	r4, r4
   d6cd4:	3c1f      	subs	r4, #31
   d6cd6:	da1c      	bge.n	d6d12 <__adddf3+0x1d2>
   d6cd8:	340c      	adds	r4, #12
   d6cda:	dc0e      	bgt.n	d6cfa <__adddf3+0x1ba>
   d6cdc:	f104 0414 	add.w	r4, r4, #20
   d6ce0:	f1c4 0220 	rsb	r2, r4, #32
   d6ce4:	fa20 f004 	lsr.w	r0, r0, r4
   d6ce8:	fa01 f302 	lsl.w	r3, r1, r2
   d6cec:	ea40 0003 	orr.w	r0, r0, r3
   d6cf0:	fa21 f304 	lsr.w	r3, r1, r4
   d6cf4:	ea45 0103 	orr.w	r1, r5, r3
   d6cf8:	bd30      	pop	{r4, r5, pc}
   d6cfa:	f1c4 040c 	rsb	r4, r4, #12
   d6cfe:	f1c4 0220 	rsb	r2, r4, #32
   d6d02:	fa20 f002 	lsr.w	r0, r0, r2
   d6d06:	fa01 f304 	lsl.w	r3, r1, r4
   d6d0a:	ea40 0003 	orr.w	r0, r0, r3
   d6d0e:	4629      	mov	r1, r5
   d6d10:	bd30      	pop	{r4, r5, pc}
   d6d12:	fa21 f004 	lsr.w	r0, r1, r4
   d6d16:	4629      	mov	r1, r5
   d6d18:	bd30      	pop	{r4, r5, pc}
   d6d1a:	f094 0f00 	teq	r4, #0
   d6d1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6d22:	bf06      	itte	eq
   d6d24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6d28:	3401      	addeq	r4, #1
   d6d2a:	3d01      	subne	r5, #1
   d6d2c:	e74e      	b.n	d6bcc <__adddf3+0x8c>
   d6d2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6d32:	bf18      	it	ne
   d6d34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6d38:	d029      	beq.n	d6d8e <__adddf3+0x24e>
   d6d3a:	ea94 0f05 	teq	r4, r5
   d6d3e:	bf08      	it	eq
   d6d40:	ea90 0f02 	teqeq	r0, r2
   d6d44:	d005      	beq.n	d6d52 <__adddf3+0x212>
   d6d46:	ea54 0c00 	orrs.w	ip, r4, r0
   d6d4a:	bf04      	itt	eq
   d6d4c:	4619      	moveq	r1, r3
   d6d4e:	4610      	moveq	r0, r2
   d6d50:	bd30      	pop	{r4, r5, pc}
   d6d52:	ea91 0f03 	teq	r1, r3
   d6d56:	bf1e      	ittt	ne
   d6d58:	2100      	movne	r1, #0
   d6d5a:	2000      	movne	r0, #0
   d6d5c:	bd30      	popne	{r4, r5, pc}
   d6d5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6d62:	d105      	bne.n	d6d70 <__adddf3+0x230>
   d6d64:	0040      	lsls	r0, r0, #1
   d6d66:	4149      	adcs	r1, r1
   d6d68:	bf28      	it	cs
   d6d6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6d6e:	bd30      	pop	{r4, r5, pc}
   d6d70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6d74:	bf3c      	itt	cc
   d6d76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6d7a:	bd30      	popcc	{r4, r5, pc}
   d6d7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6d84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6d88:	f04f 0000 	mov.w	r0, #0
   d6d8c:	bd30      	pop	{r4, r5, pc}
   d6d8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6d92:	bf1a      	itte	ne
   d6d94:	4619      	movne	r1, r3
   d6d96:	4610      	movne	r0, r2
   d6d98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6d9c:	bf1c      	itt	ne
   d6d9e:	460b      	movne	r3, r1
   d6da0:	4602      	movne	r2, r0
   d6da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6da6:	bf06      	itte	eq
   d6da8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6dac:	ea91 0f03 	teqeq	r1, r3
   d6db0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6db4:	bd30      	pop	{r4, r5, pc}
   d6db6:	bf00      	nop

000d6db8 <__aeabi_ui2d>:
   d6db8:	f090 0f00 	teq	r0, #0
   d6dbc:	bf04      	itt	eq
   d6dbe:	2100      	moveq	r1, #0
   d6dc0:	4770      	bxeq	lr
   d6dc2:	b530      	push	{r4, r5, lr}
   d6dc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6dc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6dcc:	f04f 0500 	mov.w	r5, #0
   d6dd0:	f04f 0100 	mov.w	r1, #0
   d6dd4:	e750      	b.n	d6c78 <__adddf3+0x138>
   d6dd6:	bf00      	nop

000d6dd8 <__aeabi_i2d>:
   d6dd8:	f090 0f00 	teq	r0, #0
   d6ddc:	bf04      	itt	eq
   d6dde:	2100      	moveq	r1, #0
   d6de0:	4770      	bxeq	lr
   d6de2:	b530      	push	{r4, r5, lr}
   d6de4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6de8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6dec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6df0:	bf48      	it	mi
   d6df2:	4240      	negmi	r0, r0
   d6df4:	f04f 0100 	mov.w	r1, #0
   d6df8:	e73e      	b.n	d6c78 <__adddf3+0x138>
   d6dfa:	bf00      	nop

000d6dfc <__aeabi_f2d>:
   d6dfc:	0042      	lsls	r2, r0, #1
   d6dfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e02:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e0a:	bf1f      	itttt	ne
   d6e0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6e10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6e18:	4770      	bxne	lr
   d6e1a:	f092 0f00 	teq	r2, #0
   d6e1e:	bf14      	ite	ne
   d6e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e24:	4770      	bxeq	lr
   d6e26:	b530      	push	{r4, r5, lr}
   d6e28:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6e2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e34:	e720      	b.n	d6c78 <__adddf3+0x138>
   d6e36:	bf00      	nop

000d6e38 <__aeabi_ul2d>:
   d6e38:	ea50 0201 	orrs.w	r2, r0, r1
   d6e3c:	bf08      	it	eq
   d6e3e:	4770      	bxeq	lr
   d6e40:	b530      	push	{r4, r5, lr}
   d6e42:	f04f 0500 	mov.w	r5, #0
   d6e46:	e00a      	b.n	d6e5e <__aeabi_l2d+0x16>

000d6e48 <__aeabi_l2d>:
   d6e48:	ea50 0201 	orrs.w	r2, r0, r1
   d6e4c:	bf08      	it	eq
   d6e4e:	4770      	bxeq	lr
   d6e50:	b530      	push	{r4, r5, lr}
   d6e52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6e56:	d502      	bpl.n	d6e5e <__aeabi_l2d+0x16>
   d6e58:	4240      	negs	r0, r0
   d6e5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6e5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6e6a:	f43f aedc 	beq.w	d6c26 <__adddf3+0xe6>
   d6e6e:	f04f 0203 	mov.w	r2, #3
   d6e72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6e76:	bf18      	it	ne
   d6e78:	3203      	addne	r2, #3
   d6e7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6e7e:	bf18      	it	ne
   d6e80:	3203      	addne	r2, #3
   d6e82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6e86:	f1c2 0320 	rsb	r3, r2, #32
   d6e8a:	fa00 fc03 	lsl.w	ip, r0, r3
   d6e8e:	fa20 f002 	lsr.w	r0, r0, r2
   d6e92:	fa01 fe03 	lsl.w	lr, r1, r3
   d6e96:	ea40 000e 	orr.w	r0, r0, lr
   d6e9a:	fa21 f102 	lsr.w	r1, r1, r2
   d6e9e:	4414      	add	r4, r2
   d6ea0:	e6c1      	b.n	d6c26 <__adddf3+0xe6>
   d6ea2:	bf00      	nop

000d6ea4 <__aeabi_dmul>:
   d6ea4:	b570      	push	{r4, r5, r6, lr}
   d6ea6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6eaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6eae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6eb2:	bf1d      	ittte	ne
   d6eb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6eb8:	ea94 0f0c 	teqne	r4, ip
   d6ebc:	ea95 0f0c 	teqne	r5, ip
   d6ec0:	f000 f8de 	bleq	d7080 <__aeabi_dmul+0x1dc>
   d6ec4:	442c      	add	r4, r5
   d6ec6:	ea81 0603 	eor.w	r6, r1, r3
   d6eca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6ece:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6ed2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6ed6:	bf18      	it	ne
   d6ed8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6ee4:	d038      	beq.n	d6f58 <__aeabi_dmul+0xb4>
   d6ee6:	fba0 ce02 	umull	ip, lr, r0, r2
   d6eea:	f04f 0500 	mov.w	r5, #0
   d6eee:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6ef2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6ef6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6efa:	f04f 0600 	mov.w	r6, #0
   d6efe:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f02:	f09c 0f00 	teq	ip, #0
   d6f06:	bf18      	it	ne
   d6f08:	f04e 0e01 	orrne.w	lr, lr, #1
   d6f0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6f10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6f14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6f18:	d204      	bcs.n	d6f24 <__aeabi_dmul+0x80>
   d6f1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6f1e:	416d      	adcs	r5, r5
   d6f20:	eb46 0606 	adc.w	r6, r6, r6
   d6f24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6f28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6f2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6f30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6f34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6f38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6f3c:	bf88      	it	hi
   d6f3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6f42:	d81e      	bhi.n	d6f82 <__aeabi_dmul+0xde>
   d6f44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6f48:	bf08      	it	eq
   d6f4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6f4e:	f150 0000 	adcs.w	r0, r0, #0
   d6f52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f56:	bd70      	pop	{r4, r5, r6, pc}
   d6f58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6f5c:	ea46 0101 	orr.w	r1, r6, r1
   d6f60:	ea40 0002 	orr.w	r0, r0, r2
   d6f64:	ea81 0103 	eor.w	r1, r1, r3
   d6f68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6f6c:	bfc2      	ittt	gt
   d6f6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6f72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6f76:	bd70      	popgt	{r4, r5, r6, pc}
   d6f78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f7c:	f04f 0e00 	mov.w	lr, #0
   d6f80:	3c01      	subs	r4, #1
   d6f82:	f300 80ab 	bgt.w	d70dc <__aeabi_dmul+0x238>
   d6f86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6f8a:	bfde      	ittt	le
   d6f8c:	2000      	movle	r0, #0
   d6f8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6f92:	bd70      	pople	{r4, r5, r6, pc}
   d6f94:	f1c4 0400 	rsb	r4, r4, #0
   d6f98:	3c20      	subs	r4, #32
   d6f9a:	da35      	bge.n	d7008 <__aeabi_dmul+0x164>
   d6f9c:	340c      	adds	r4, #12
   d6f9e:	dc1b      	bgt.n	d6fd8 <__aeabi_dmul+0x134>
   d6fa0:	f104 0414 	add.w	r4, r4, #20
   d6fa4:	f1c4 0520 	rsb	r5, r4, #32
   d6fa8:	fa00 f305 	lsl.w	r3, r0, r5
   d6fac:	fa20 f004 	lsr.w	r0, r0, r4
   d6fb0:	fa01 f205 	lsl.w	r2, r1, r5
   d6fb4:	ea40 0002 	orr.w	r0, r0, r2
   d6fb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6fbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6fc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6fc4:	fa21 f604 	lsr.w	r6, r1, r4
   d6fc8:	eb42 0106 	adc.w	r1, r2, r6
   d6fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6fd0:	bf08      	it	eq
   d6fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6fd6:	bd70      	pop	{r4, r5, r6, pc}
   d6fd8:	f1c4 040c 	rsb	r4, r4, #12
   d6fdc:	f1c4 0520 	rsb	r5, r4, #32
   d6fe0:	fa00 f304 	lsl.w	r3, r0, r4
   d6fe4:	fa20 f005 	lsr.w	r0, r0, r5
   d6fe8:	fa01 f204 	lsl.w	r2, r1, r4
   d6fec:	ea40 0002 	orr.w	r0, r0, r2
   d6ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ff4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6ff8:	f141 0100 	adc.w	r1, r1, #0
   d6ffc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7000:	bf08      	it	eq
   d7002:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7006:	bd70      	pop	{r4, r5, r6, pc}
   d7008:	f1c4 0520 	rsb	r5, r4, #32
   d700c:	fa00 f205 	lsl.w	r2, r0, r5
   d7010:	ea4e 0e02 	orr.w	lr, lr, r2
   d7014:	fa20 f304 	lsr.w	r3, r0, r4
   d7018:	fa01 f205 	lsl.w	r2, r1, r5
   d701c:	ea43 0302 	orr.w	r3, r3, r2
   d7020:	fa21 f004 	lsr.w	r0, r1, r4
   d7024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7028:	fa21 f204 	lsr.w	r2, r1, r4
   d702c:	ea20 0002 	bic.w	r0, r0, r2
   d7030:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7038:	bf08      	it	eq
   d703a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d703e:	bd70      	pop	{r4, r5, r6, pc}
   d7040:	f094 0f00 	teq	r4, #0
   d7044:	d10f      	bne.n	d7066 <__aeabi_dmul+0x1c2>
   d7046:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d704a:	0040      	lsls	r0, r0, #1
   d704c:	eb41 0101 	adc.w	r1, r1, r1
   d7050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7054:	bf08      	it	eq
   d7056:	3c01      	subeq	r4, #1
   d7058:	d0f7      	beq.n	d704a <__aeabi_dmul+0x1a6>
   d705a:	ea41 0106 	orr.w	r1, r1, r6
   d705e:	f095 0f00 	teq	r5, #0
   d7062:	bf18      	it	ne
   d7064:	4770      	bxne	lr
   d7066:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d706a:	0052      	lsls	r2, r2, #1
   d706c:	eb43 0303 	adc.w	r3, r3, r3
   d7070:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7074:	bf08      	it	eq
   d7076:	3d01      	subeq	r5, #1
   d7078:	d0f7      	beq.n	d706a <__aeabi_dmul+0x1c6>
   d707a:	ea43 0306 	orr.w	r3, r3, r6
   d707e:	4770      	bx	lr
   d7080:	ea94 0f0c 	teq	r4, ip
   d7084:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7088:	bf18      	it	ne
   d708a:	ea95 0f0c 	teqne	r5, ip
   d708e:	d00c      	beq.n	d70aa <__aeabi_dmul+0x206>
   d7090:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7094:	bf18      	it	ne
   d7096:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d709a:	d1d1      	bne.n	d7040 <__aeabi_dmul+0x19c>
   d709c:	ea81 0103 	eor.w	r1, r1, r3
   d70a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70a4:	f04f 0000 	mov.w	r0, #0
   d70a8:	bd70      	pop	{r4, r5, r6, pc}
   d70aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70ae:	bf06      	itte	eq
   d70b0:	4610      	moveq	r0, r2
   d70b2:	4619      	moveq	r1, r3
   d70b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70b8:	d019      	beq.n	d70ee <__aeabi_dmul+0x24a>
   d70ba:	ea94 0f0c 	teq	r4, ip
   d70be:	d102      	bne.n	d70c6 <__aeabi_dmul+0x222>
   d70c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d70c4:	d113      	bne.n	d70ee <__aeabi_dmul+0x24a>
   d70c6:	ea95 0f0c 	teq	r5, ip
   d70ca:	d105      	bne.n	d70d8 <__aeabi_dmul+0x234>
   d70cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d70d0:	bf1c      	itt	ne
   d70d2:	4610      	movne	r0, r2
   d70d4:	4619      	movne	r1, r3
   d70d6:	d10a      	bne.n	d70ee <__aeabi_dmul+0x24a>
   d70d8:	ea81 0103 	eor.w	r1, r1, r3
   d70dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d70e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d70e8:	f04f 0000 	mov.w	r0, #0
   d70ec:	bd70      	pop	{r4, r5, r6, pc}
   d70ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d70f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d70f6:	bd70      	pop	{r4, r5, r6, pc}

000d70f8 <__aeabi_ddiv>:
   d70f8:	b570      	push	{r4, r5, r6, lr}
   d70fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d70fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7102:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7106:	bf1d      	ittte	ne
   d7108:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d710c:	ea94 0f0c 	teqne	r4, ip
   d7110:	ea95 0f0c 	teqne	r5, ip
   d7114:	f000 f8a7 	bleq	d7266 <__aeabi_ddiv+0x16e>
   d7118:	eba4 0405 	sub.w	r4, r4, r5
   d711c:	ea81 0e03 	eor.w	lr, r1, r3
   d7120:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7124:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7128:	f000 8088 	beq.w	d723c <__aeabi_ddiv+0x144>
   d712c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7130:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7134:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7138:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d713c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7140:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7144:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7148:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d714c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7150:	429d      	cmp	r5, r3
   d7152:	bf08      	it	eq
   d7154:	4296      	cmpeq	r6, r2
   d7156:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d715a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d715e:	d202      	bcs.n	d7166 <__aeabi_ddiv+0x6e>
   d7160:	085b      	lsrs	r3, r3, #1
   d7162:	ea4f 0232 	mov.w	r2, r2, rrx
   d7166:	1ab6      	subs	r6, r6, r2
   d7168:	eb65 0503 	sbc.w	r5, r5, r3
   d716c:	085b      	lsrs	r3, r3, #1
   d716e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7172:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7176:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d717a:	ebb6 0e02 	subs.w	lr, r6, r2
   d717e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7182:	bf22      	ittt	cs
   d7184:	1ab6      	subcs	r6, r6, r2
   d7186:	4675      	movcs	r5, lr
   d7188:	ea40 000c 	orrcs.w	r0, r0, ip
   d718c:	085b      	lsrs	r3, r3, #1
   d718e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7192:	ebb6 0e02 	subs.w	lr, r6, r2
   d7196:	eb75 0e03 	sbcs.w	lr, r5, r3
   d719a:	bf22      	ittt	cs
   d719c:	1ab6      	subcs	r6, r6, r2
   d719e:	4675      	movcs	r5, lr
   d71a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d71a4:	085b      	lsrs	r3, r3, #1
   d71a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d71aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d71ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71b2:	bf22      	ittt	cs
   d71b4:	1ab6      	subcs	r6, r6, r2
   d71b6:	4675      	movcs	r5, lr
   d71b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d71bc:	085b      	lsrs	r3, r3, #1
   d71be:	ea4f 0232 	mov.w	r2, r2, rrx
   d71c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d71c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71ca:	bf22      	ittt	cs
   d71cc:	1ab6      	subcs	r6, r6, r2
   d71ce:	4675      	movcs	r5, lr
   d71d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d71d4:	ea55 0e06 	orrs.w	lr, r5, r6
   d71d8:	d018      	beq.n	d720c <__aeabi_ddiv+0x114>
   d71da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d71de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d71e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d71e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d71ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d71ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d71f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d71f6:	d1c0      	bne.n	d717a <__aeabi_ddiv+0x82>
   d71f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d71fc:	d10b      	bne.n	d7216 <__aeabi_ddiv+0x11e>
   d71fe:	ea41 0100 	orr.w	r1, r1, r0
   d7202:	f04f 0000 	mov.w	r0, #0
   d7206:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d720a:	e7b6      	b.n	d717a <__aeabi_ddiv+0x82>
   d720c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7210:	bf04      	itt	eq
   d7212:	4301      	orreq	r1, r0
   d7214:	2000      	moveq	r0, #0
   d7216:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d721a:	bf88      	it	hi
   d721c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7220:	f63f aeaf 	bhi.w	d6f82 <__aeabi_dmul+0xde>
   d7224:	ebb5 0c03 	subs.w	ip, r5, r3
   d7228:	bf04      	itt	eq
   d722a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d722e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7232:	f150 0000 	adcs.w	r0, r0, #0
   d7236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d723a:	bd70      	pop	{r4, r5, r6, pc}
   d723c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7240:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7244:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7248:	bfc2      	ittt	gt
   d724a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d724e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7252:	bd70      	popgt	{r4, r5, r6, pc}
   d7254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7258:	f04f 0e00 	mov.w	lr, #0
   d725c:	3c01      	subs	r4, #1
   d725e:	e690      	b.n	d6f82 <__aeabi_dmul+0xde>
   d7260:	ea45 0e06 	orr.w	lr, r5, r6
   d7264:	e68d      	b.n	d6f82 <__aeabi_dmul+0xde>
   d7266:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d726a:	ea94 0f0c 	teq	r4, ip
   d726e:	bf08      	it	eq
   d7270:	ea95 0f0c 	teqeq	r5, ip
   d7274:	f43f af3b 	beq.w	d70ee <__aeabi_dmul+0x24a>
   d7278:	ea94 0f0c 	teq	r4, ip
   d727c:	d10a      	bne.n	d7294 <__aeabi_ddiv+0x19c>
   d727e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7282:	f47f af34 	bne.w	d70ee <__aeabi_dmul+0x24a>
   d7286:	ea95 0f0c 	teq	r5, ip
   d728a:	f47f af25 	bne.w	d70d8 <__aeabi_dmul+0x234>
   d728e:	4610      	mov	r0, r2
   d7290:	4619      	mov	r1, r3
   d7292:	e72c      	b.n	d70ee <__aeabi_dmul+0x24a>
   d7294:	ea95 0f0c 	teq	r5, ip
   d7298:	d106      	bne.n	d72a8 <__aeabi_ddiv+0x1b0>
   d729a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d729e:	f43f aefd 	beq.w	d709c <__aeabi_dmul+0x1f8>
   d72a2:	4610      	mov	r0, r2
   d72a4:	4619      	mov	r1, r3
   d72a6:	e722      	b.n	d70ee <__aeabi_dmul+0x24a>
   d72a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d72ac:	bf18      	it	ne
   d72ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d72b2:	f47f aec5 	bne.w	d7040 <__aeabi_dmul+0x19c>
   d72b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d72ba:	f47f af0d 	bne.w	d70d8 <__aeabi_dmul+0x234>
   d72be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d72c2:	f47f aeeb 	bne.w	d709c <__aeabi_dmul+0x1f8>
   d72c6:	e712      	b.n	d70ee <__aeabi_dmul+0x24a>

000d72c8 <__aeabi_d2f>:
   d72c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d72cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d72d0:	bf24      	itt	cs
   d72d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d72d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d72da:	d90d      	bls.n	d72f8 <__aeabi_d2f+0x30>
   d72dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d72e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d72e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d72e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d72ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d72f0:	bf08      	it	eq
   d72f2:	f020 0001 	biceq.w	r0, r0, #1
   d72f6:	4770      	bx	lr
   d72f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d72fc:	d121      	bne.n	d7342 <__aeabi_d2f+0x7a>
   d72fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7302:	bfbc      	itt	lt
   d7304:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7308:	4770      	bxlt	lr
   d730a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d730e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7312:	f1c2 0218 	rsb	r2, r2, #24
   d7316:	f1c2 0c20 	rsb	ip, r2, #32
   d731a:	fa10 f30c 	lsls.w	r3, r0, ip
   d731e:	fa20 f002 	lsr.w	r0, r0, r2
   d7322:	bf18      	it	ne
   d7324:	f040 0001 	orrne.w	r0, r0, #1
   d7328:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d732c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7330:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7334:	ea40 000c 	orr.w	r0, r0, ip
   d7338:	fa23 f302 	lsr.w	r3, r3, r2
   d733c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7340:	e7cc      	b.n	d72dc <__aeabi_d2f+0x14>
   d7342:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7346:	d107      	bne.n	d7358 <__aeabi_d2f+0x90>
   d7348:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d734c:	bf1e      	ittt	ne
   d734e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7352:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7356:	4770      	bxne	lr
   d7358:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d735c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7364:	4770      	bx	lr
   d7366:	bf00      	nop

000d7368 <atoi>:
   d7368:	220a      	movs	r2, #10
   d736a:	2100      	movs	r1, #0
   d736c:	f000 ba26 	b.w	d77bc <strtol>

000d7370 <__cxa_atexit>:
   d7370:	b510      	push	{r4, lr}
   d7372:	4c05      	ldr	r4, [pc, #20]	; (d7388 <__cxa_atexit+0x18>)
   d7374:	4613      	mov	r3, r2
   d7376:	b12c      	cbz	r4, d7384 <__cxa_atexit+0x14>
   d7378:	460a      	mov	r2, r1
   d737a:	4601      	mov	r1, r0
   d737c:	2002      	movs	r0, #2
   d737e:	f3af 8000 	nop.w
   d7382:	bd10      	pop	{r4, pc}
   d7384:	4620      	mov	r0, r4
   d7386:	bd10      	pop	{r4, pc}
   d7388:	00000000 	.word	0x00000000

000d738c <localtime>:
   d738c:	b538      	push	{r3, r4, r5, lr}
   d738e:	4b07      	ldr	r3, [pc, #28]	; (d73ac <localtime+0x20>)
   d7390:	681c      	ldr	r4, [r3, #0]
   d7392:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7394:	4605      	mov	r5, r0
   d7396:	b91b      	cbnz	r3, d73a0 <localtime+0x14>
   d7398:	2024      	movs	r0, #36	; 0x24
   d739a:	f7fe f857 	bl	d544c <malloc>
   d739e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d73a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d73a2:	4628      	mov	r0, r5
   d73a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d73a8:	f000 b802 	b.w	d73b0 <localtime_r>
   d73ac:	2003e28c 	.word	0x2003e28c

000d73b0 <localtime_r>:
   d73b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73b4:	460c      	mov	r4, r1
   d73b6:	4680      	mov	r8, r0
   d73b8:	f000 fd06 	bl	d7dc8 <__gettzinfo>
   d73bc:	4621      	mov	r1, r4
   d73be:	4607      	mov	r7, r0
   d73c0:	4640      	mov	r0, r8
   d73c2:	f000 fd05 	bl	d7dd0 <gmtime_r>
   d73c6:	6946      	ldr	r6, [r0, #20]
   d73c8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d73cc:	07b3      	lsls	r3, r6, #30
   d73ce:	4604      	mov	r4, r0
   d73d0:	d105      	bne.n	d73de <localtime_r+0x2e>
   d73d2:	2264      	movs	r2, #100	; 0x64
   d73d4:	fb96 f3f2 	sdiv	r3, r6, r2
   d73d8:	fb02 6313 	mls	r3, r2, r3, r6
   d73dc:	b94b      	cbnz	r3, d73f2 <localtime_r+0x42>
   d73de:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d73e2:	fb96 f3f5 	sdiv	r3, r6, r5
   d73e6:	fb05 6513 	mls	r5, r5, r3, r6
   d73ea:	fab5 f385 	clz	r3, r5
   d73ee:	095b      	lsrs	r3, r3, #5
   d73f0:	e000      	b.n	d73f4 <localtime_r+0x44>
   d73f2:	2301      	movs	r3, #1
   d73f4:	4a5f      	ldr	r2, [pc, #380]	; (d7574 <localtime_r+0x1c4>)
   d73f6:	2530      	movs	r5, #48	; 0x30
   d73f8:	fb05 2503 	mla	r5, r5, r3, r2
   d73fc:	f000 fb18 	bl	d7a30 <__tz_lock>
   d7400:	f000 fb18 	bl	d7a34 <_tzset_unlocked>
   d7404:	4b5c      	ldr	r3, [pc, #368]	; (d7578 <localtime_r+0x1c8>)
   d7406:	681b      	ldr	r3, [r3, #0]
   d7408:	b1f3      	cbz	r3, d7448 <localtime_r+0x98>
   d740a:	687b      	ldr	r3, [r7, #4]
   d740c:	429e      	cmp	r6, r3
   d740e:	d105      	bne.n	d741c <localtime_r+0x6c>
   d7410:	6839      	ldr	r1, [r7, #0]
   d7412:	f8d8 3000 	ldr.w	r3, [r8]
   d7416:	69fa      	ldr	r2, [r7, #28]
   d7418:	b941      	cbnz	r1, d742c <localtime_r+0x7c>
   d741a:	e00a      	b.n	d7432 <localtime_r+0x82>
   d741c:	4630      	mov	r0, r6
   d741e:	f000 fa5f 	bl	d78e0 <__tzcalc_limits>
   d7422:	2800      	cmp	r0, #0
   d7424:	d1f4      	bne.n	d7410 <localtime_r+0x60>
   d7426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d742a:	e00d      	b.n	d7448 <localtime_r+0x98>
   d742c:	4293      	cmp	r3, r2
   d742e:	db08      	blt.n	d7442 <localtime_r+0x92>
   d7430:	e001      	b.n	d7436 <localtime_r+0x86>
   d7432:	4293      	cmp	r3, r2
   d7434:	da07      	bge.n	d7446 <localtime_r+0x96>
   d7436:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7438:	4293      	cmp	r3, r2
   d743a:	bfac      	ite	ge
   d743c:	2300      	movge	r3, #0
   d743e:	2301      	movlt	r3, #1
   d7440:	e002      	b.n	d7448 <localtime_r+0x98>
   d7442:	2300      	movs	r3, #0
   d7444:	e000      	b.n	d7448 <localtime_r+0x98>
   d7446:	2301      	movs	r3, #1
   d7448:	6223      	str	r3, [r4, #32]
   d744a:	6a23      	ldr	r3, [r4, #32]
   d744c:	2b01      	cmp	r3, #1
   d744e:	bf0c      	ite	eq
   d7450:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d7452:	6a39      	ldrne	r1, [r7, #32]
   d7454:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7458:	203c      	movs	r0, #60	; 0x3c
   d745a:	fb91 f6f3 	sdiv	r6, r1, r3
   d745e:	fb03 1316 	mls	r3, r3, r6, r1
   d7462:	6861      	ldr	r1, [r4, #4]
   d7464:	fb93 f2f0 	sdiv	r2, r3, r0
   d7468:	fb00 3012 	mls	r0, r0, r2, r3
   d746c:	6823      	ldr	r3, [r4, #0]
   d746e:	1a89      	subs	r1, r1, r2
   d7470:	68a2      	ldr	r2, [r4, #8]
   d7472:	6061      	str	r1, [r4, #4]
   d7474:	1a1b      	subs	r3, r3, r0
   d7476:	1b92      	subs	r2, r2, r6
   d7478:	2b3b      	cmp	r3, #59	; 0x3b
   d747a:	6023      	str	r3, [r4, #0]
   d747c:	60a2      	str	r2, [r4, #8]
   d747e:	dd03      	ble.n	d7488 <localtime_r+0xd8>
   d7480:	3101      	adds	r1, #1
   d7482:	6061      	str	r1, [r4, #4]
   d7484:	3b3c      	subs	r3, #60	; 0x3c
   d7486:	e004      	b.n	d7492 <localtime_r+0xe2>
   d7488:	2b00      	cmp	r3, #0
   d748a:	da03      	bge.n	d7494 <localtime_r+0xe4>
   d748c:	3901      	subs	r1, #1
   d748e:	6061      	str	r1, [r4, #4]
   d7490:	333c      	adds	r3, #60	; 0x3c
   d7492:	6023      	str	r3, [r4, #0]
   d7494:	6863      	ldr	r3, [r4, #4]
   d7496:	2b3b      	cmp	r3, #59	; 0x3b
   d7498:	dd03      	ble.n	d74a2 <localtime_r+0xf2>
   d749a:	3201      	adds	r2, #1
   d749c:	60a2      	str	r2, [r4, #8]
   d749e:	3b3c      	subs	r3, #60	; 0x3c
   d74a0:	e004      	b.n	d74ac <localtime_r+0xfc>
   d74a2:	2b00      	cmp	r3, #0
   d74a4:	da03      	bge.n	d74ae <localtime_r+0xfe>
   d74a6:	3a01      	subs	r2, #1
   d74a8:	60a2      	str	r2, [r4, #8]
   d74aa:	333c      	adds	r3, #60	; 0x3c
   d74ac:	6063      	str	r3, [r4, #4]
   d74ae:	68a3      	ldr	r3, [r4, #8]
   d74b0:	2b17      	cmp	r3, #23
   d74b2:	dd22      	ble.n	d74fa <localtime_r+0x14a>
   d74b4:	69e2      	ldr	r2, [r4, #28]
   d74b6:	3201      	adds	r2, #1
   d74b8:	61e2      	str	r2, [r4, #28]
   d74ba:	69a2      	ldr	r2, [r4, #24]
   d74bc:	3201      	adds	r2, #1
   d74be:	2a06      	cmp	r2, #6
   d74c0:	bfc8      	it	gt
   d74c2:	2200      	movgt	r2, #0
   d74c4:	61a2      	str	r2, [r4, #24]
   d74c6:	68e2      	ldr	r2, [r4, #12]
   d74c8:	3b18      	subs	r3, #24
   d74ca:	3201      	adds	r2, #1
   d74cc:	60a3      	str	r3, [r4, #8]
   d74ce:	6923      	ldr	r3, [r4, #16]
   d74d0:	60e2      	str	r2, [r4, #12]
   d74d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d74d6:	428a      	cmp	r2, r1
   d74d8:	dd46      	ble.n	d7568 <localtime_r+0x1b8>
   d74da:	3301      	adds	r3, #1
   d74dc:	2b0c      	cmp	r3, #12
   d74de:	bf0c      	ite	eq
   d74e0:	6963      	ldreq	r3, [r4, #20]
   d74e2:	6123      	strne	r3, [r4, #16]
   d74e4:	eba2 0201 	sub.w	r2, r2, r1
   d74e8:	60e2      	str	r2, [r4, #12]
   d74ea:	bf01      	itttt	eq
   d74ec:	3301      	addeq	r3, #1
   d74ee:	2200      	moveq	r2, #0
   d74f0:	6122      	streq	r2, [r4, #16]
   d74f2:	6163      	streq	r3, [r4, #20]
   d74f4:	bf08      	it	eq
   d74f6:	61e2      	streq	r2, [r4, #28]
   d74f8:	e036      	b.n	d7568 <localtime_r+0x1b8>
   d74fa:	2b00      	cmp	r3, #0
   d74fc:	da34      	bge.n	d7568 <localtime_r+0x1b8>
   d74fe:	69e2      	ldr	r2, [r4, #28]
   d7500:	3a01      	subs	r2, #1
   d7502:	61e2      	str	r2, [r4, #28]
   d7504:	69a2      	ldr	r2, [r4, #24]
   d7506:	3a01      	subs	r2, #1
   d7508:	bf48      	it	mi
   d750a:	2206      	movmi	r2, #6
   d750c:	61a2      	str	r2, [r4, #24]
   d750e:	68e2      	ldr	r2, [r4, #12]
   d7510:	3318      	adds	r3, #24
   d7512:	3a01      	subs	r2, #1
   d7514:	60e2      	str	r2, [r4, #12]
   d7516:	60a3      	str	r3, [r4, #8]
   d7518:	bb32      	cbnz	r2, d7568 <localtime_r+0x1b8>
   d751a:	6923      	ldr	r3, [r4, #16]
   d751c:	3b01      	subs	r3, #1
   d751e:	d401      	bmi.n	d7524 <localtime_r+0x174>
   d7520:	6123      	str	r3, [r4, #16]
   d7522:	e01d      	b.n	d7560 <localtime_r+0x1b0>
   d7524:	230b      	movs	r3, #11
   d7526:	6123      	str	r3, [r4, #16]
   d7528:	6963      	ldr	r3, [r4, #20]
   d752a:	1e5a      	subs	r2, r3, #1
   d752c:	f012 0f03 	tst.w	r2, #3
   d7530:	6162      	str	r2, [r4, #20]
   d7532:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7536:	d105      	bne.n	d7544 <localtime_r+0x194>
   d7538:	2164      	movs	r1, #100	; 0x64
   d753a:	fb93 f2f1 	sdiv	r2, r3, r1
   d753e:	fb01 3212 	mls	r2, r1, r2, r3
   d7542:	b94a      	cbnz	r2, d7558 <localtime_r+0x1a8>
   d7544:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7548:	fb93 f2f1 	sdiv	r2, r3, r1
   d754c:	fb01 3312 	mls	r3, r1, r2, r3
   d7550:	fab3 f383 	clz	r3, r3
   d7554:	095b      	lsrs	r3, r3, #5
   d7556:	e000      	b.n	d755a <localtime_r+0x1aa>
   d7558:	2301      	movs	r3, #1
   d755a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d755e:	61e3      	str	r3, [r4, #28]
   d7560:	6923      	ldr	r3, [r4, #16]
   d7562:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7566:	60e3      	str	r3, [r4, #12]
   d7568:	f000 fa63 	bl	d7a32 <__tz_unlock>
   d756c:	4620      	mov	r0, r4
   d756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7572:	bf00      	nop
   d7574:	000d8594 	.word	0x000d8594
   d7578:	2003e7e4 	.word	0x2003e7e4

000d757c <memcpy>:
   d757c:	b510      	push	{r4, lr}
   d757e:	1e43      	subs	r3, r0, #1
   d7580:	440a      	add	r2, r1
   d7582:	4291      	cmp	r1, r2
   d7584:	d004      	beq.n	d7590 <memcpy+0x14>
   d7586:	f811 4b01 	ldrb.w	r4, [r1], #1
   d758a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d758e:	e7f8      	b.n	d7582 <memcpy+0x6>
   d7590:	bd10      	pop	{r4, pc}

000d7592 <memset>:
   d7592:	4402      	add	r2, r0
   d7594:	4603      	mov	r3, r0
   d7596:	4293      	cmp	r3, r2
   d7598:	d002      	beq.n	d75a0 <memset+0xe>
   d759a:	f803 1b01 	strb.w	r1, [r3], #1
   d759e:	e7fa      	b.n	d7596 <memset+0x4>
   d75a0:	4770      	bx	lr
	...

000d75a4 <srand>:
   d75a4:	b538      	push	{r3, r4, r5, lr}
   d75a6:	4b12      	ldr	r3, [pc, #72]	; (d75f0 <srand+0x4c>)
   d75a8:	681c      	ldr	r4, [r3, #0]
   d75aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d75ac:	4605      	mov	r5, r0
   d75ae:	b9d3      	cbnz	r3, d75e6 <srand+0x42>
   d75b0:	2018      	movs	r0, #24
   d75b2:	f7fd ff4b 	bl	d544c <malloc>
   d75b6:	f243 330e 	movw	r3, #13070	; 0x330e
   d75ba:	63a0      	str	r0, [r4, #56]	; 0x38
   d75bc:	8003      	strh	r3, [r0, #0]
   d75be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d75c2:	8043      	strh	r3, [r0, #2]
   d75c4:	f241 2334 	movw	r3, #4660	; 0x1234
   d75c8:	8083      	strh	r3, [r0, #4]
   d75ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d75ce:	80c3      	strh	r3, [r0, #6]
   d75d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d75d4:	8103      	strh	r3, [r0, #8]
   d75d6:	2305      	movs	r3, #5
   d75d8:	8143      	strh	r3, [r0, #10]
   d75da:	230b      	movs	r3, #11
   d75dc:	8183      	strh	r3, [r0, #12]
   d75de:	2201      	movs	r2, #1
   d75e0:	2300      	movs	r3, #0
   d75e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d75e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d75e8:	2200      	movs	r2, #0
   d75ea:	611d      	str	r5, [r3, #16]
   d75ec:	615a      	str	r2, [r3, #20]
   d75ee:	bd38      	pop	{r3, r4, r5, pc}
   d75f0:	2003e28c 	.word	0x2003e28c

000d75f4 <strcmp>:
   d75f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d75f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d75fc:	2a01      	cmp	r2, #1
   d75fe:	bf28      	it	cs
   d7600:	429a      	cmpcs	r2, r3
   d7602:	d0f7      	beq.n	d75f4 <strcmp>
   d7604:	1ad0      	subs	r0, r2, r3
   d7606:	4770      	bx	lr

000d7608 <strcpy>:
   d7608:	4603      	mov	r3, r0
   d760a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d760e:	f803 2b01 	strb.w	r2, [r3], #1
   d7612:	2a00      	cmp	r2, #0
   d7614:	d1f9      	bne.n	d760a <strcpy+0x2>
   d7616:	4770      	bx	lr

000d7618 <strdup>:
   d7618:	4b02      	ldr	r3, [pc, #8]	; (d7624 <strdup+0xc>)
   d761a:	4601      	mov	r1, r0
   d761c:	6818      	ldr	r0, [r3, #0]
   d761e:	f000 b803 	b.w	d7628 <_strdup_r>
   d7622:	bf00      	nop
   d7624:	2003e28c 	.word	0x2003e28c

000d7628 <_strdup_r>:
   d7628:	b570      	push	{r4, r5, r6, lr}
   d762a:	4606      	mov	r6, r0
   d762c:	4608      	mov	r0, r1
   d762e:	460c      	mov	r4, r1
   d7630:	f000 f80d 	bl	d764e <strlen>
   d7634:	1c45      	adds	r5, r0, #1
   d7636:	4629      	mov	r1, r5
   d7638:	4630      	mov	r0, r6
   d763a:	f7fd ff37 	bl	d54ac <_malloc_r>
   d763e:	4606      	mov	r6, r0
   d7640:	b118      	cbz	r0, d764a <_strdup_r+0x22>
   d7642:	462a      	mov	r2, r5
   d7644:	4621      	mov	r1, r4
   d7646:	f7ff ff99 	bl	d757c <memcpy>
   d764a:	4630      	mov	r0, r6
   d764c:	bd70      	pop	{r4, r5, r6, pc}

000d764e <strlen>:
   d764e:	4603      	mov	r3, r0
   d7650:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7654:	2a00      	cmp	r2, #0
   d7656:	d1fb      	bne.n	d7650 <strlen+0x2>
   d7658:	1a18      	subs	r0, r3, r0
   d765a:	3801      	subs	r0, #1
   d765c:	4770      	bx	lr

000d765e <strncmp>:
   d765e:	b530      	push	{r4, r5, lr}
   d7660:	b182      	cbz	r2, d7684 <strncmp+0x26>
   d7662:	1e45      	subs	r5, r0, #1
   d7664:	3901      	subs	r1, #1
   d7666:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d766a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d766e:	42a3      	cmp	r3, r4
   d7670:	d106      	bne.n	d7680 <strncmp+0x22>
   d7672:	43ec      	mvns	r4, r5
   d7674:	4414      	add	r4, r2
   d7676:	42e0      	cmn	r0, r4
   d7678:	d001      	beq.n	d767e <strncmp+0x20>
   d767a:	2b00      	cmp	r3, #0
   d767c:	d1f3      	bne.n	d7666 <strncmp+0x8>
   d767e:	461c      	mov	r4, r3
   d7680:	1b18      	subs	r0, r3, r4
   d7682:	bd30      	pop	{r4, r5, pc}
   d7684:	4610      	mov	r0, r2
   d7686:	bd30      	pop	{r4, r5, pc}

000d7688 <strncpy>:
   d7688:	b510      	push	{r4, lr}
   d768a:	4603      	mov	r3, r0
   d768c:	b142      	cbz	r2, d76a0 <strncpy+0x18>
   d768e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7692:	f803 4b01 	strb.w	r4, [r3], #1
   d7696:	3a01      	subs	r2, #1
   d7698:	2c00      	cmp	r4, #0
   d769a:	d1f7      	bne.n	d768c <strncpy+0x4>
   d769c:	441a      	add	r2, r3
   d769e:	e000      	b.n	d76a2 <strncpy+0x1a>
   d76a0:	bd10      	pop	{r4, pc}
   d76a2:	4293      	cmp	r3, r2
   d76a4:	d002      	beq.n	d76ac <strncpy+0x24>
   d76a6:	f803 4b01 	strb.w	r4, [r3], #1
   d76aa:	e7fa      	b.n	d76a2 <strncpy+0x1a>
   d76ac:	bd10      	pop	{r4, pc}
	...

000d76b0 <_strtol_r>:
   d76b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d76b4:	4680      	mov	r8, r0
   d76b6:	4840      	ldr	r0, [pc, #256]	; (d77b8 <_strtol_r+0x108>)
   d76b8:	f8d0 9000 	ldr.w	r9, [r0]
   d76bc:	460f      	mov	r7, r1
   d76be:	463d      	mov	r5, r7
   d76c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d76c4:	eb09 0004 	add.w	r0, r9, r4
   d76c8:	7840      	ldrb	r0, [r0, #1]
   d76ca:	f000 0008 	and.w	r0, r0, #8
   d76ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d76d2:	b108      	cbz	r0, d76d8 <_strtol_r+0x28>
   d76d4:	462f      	mov	r7, r5
   d76d6:	e7f2      	b.n	d76be <_strtol_r+0xe>
   d76d8:	2c2d      	cmp	r4, #45	; 0x2d
   d76da:	d103      	bne.n	d76e4 <_strtol_r+0x34>
   d76dc:	1cbd      	adds	r5, r7, #2
   d76de:	787c      	ldrb	r4, [r7, #1]
   d76e0:	2601      	movs	r6, #1
   d76e2:	e003      	b.n	d76ec <_strtol_r+0x3c>
   d76e4:	2c2b      	cmp	r4, #43	; 0x2b
   d76e6:	bf04      	itt	eq
   d76e8:	787c      	ldrbeq	r4, [r7, #1]
   d76ea:	1cbd      	addeq	r5, r7, #2
   d76ec:	b113      	cbz	r3, d76f4 <_strtol_r+0x44>
   d76ee:	2b10      	cmp	r3, #16
   d76f0:	d10a      	bne.n	d7708 <_strtol_r+0x58>
   d76f2:	e05b      	b.n	d77ac <_strtol_r+0xfc>
   d76f4:	2c30      	cmp	r4, #48	; 0x30
   d76f6:	d157      	bne.n	d77a8 <_strtol_r+0xf8>
   d76f8:	7828      	ldrb	r0, [r5, #0]
   d76fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d76fe:	2858      	cmp	r0, #88	; 0x58
   d7700:	d14d      	bne.n	d779e <_strtol_r+0xee>
   d7702:	786c      	ldrb	r4, [r5, #1]
   d7704:	2310      	movs	r3, #16
   d7706:	3502      	adds	r5, #2
   d7708:	2e00      	cmp	r6, #0
   d770a:	bf14      	ite	ne
   d770c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7710:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7714:	2700      	movs	r7, #0
   d7716:	fbbc faf3 	udiv	sl, ip, r3
   d771a:	4638      	mov	r0, r7
   d771c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7720:	eb09 0e04 	add.w	lr, r9, r4
   d7724:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7728:	f01e 0f04 	tst.w	lr, #4
   d772c:	d001      	beq.n	d7732 <_strtol_r+0x82>
   d772e:	3c30      	subs	r4, #48	; 0x30
   d7730:	e00b      	b.n	d774a <_strtol_r+0x9a>
   d7732:	f01e 0e03 	ands.w	lr, lr, #3
   d7736:	d01b      	beq.n	d7770 <_strtol_r+0xc0>
   d7738:	f1be 0f01 	cmp.w	lr, #1
   d773c:	bf0c      	ite	eq
   d773e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7742:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7746:	ebce 0404 	rsb	r4, lr, r4
   d774a:	42a3      	cmp	r3, r4
   d774c:	dd10      	ble.n	d7770 <_strtol_r+0xc0>
   d774e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d7752:	d00a      	beq.n	d776a <_strtol_r+0xba>
   d7754:	4550      	cmp	r0, sl
   d7756:	d806      	bhi.n	d7766 <_strtol_r+0xb6>
   d7758:	d101      	bne.n	d775e <_strtol_r+0xae>
   d775a:	4564      	cmp	r4, ip
   d775c:	dc03      	bgt.n	d7766 <_strtol_r+0xb6>
   d775e:	fb03 4000 	mla	r0, r3, r0, r4
   d7762:	2701      	movs	r7, #1
   d7764:	e001      	b.n	d776a <_strtol_r+0xba>
   d7766:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d776a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d776e:	e7d7      	b.n	d7720 <_strtol_r+0x70>
   d7770:	1c7b      	adds	r3, r7, #1
   d7772:	d10c      	bne.n	d778e <_strtol_r+0xde>
   d7774:	2e00      	cmp	r6, #0
   d7776:	f04f 0322 	mov.w	r3, #34	; 0x22
   d777a:	bf14      	ite	ne
   d777c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7780:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7784:	f8c8 3000 	str.w	r3, [r8]
   d7788:	b92a      	cbnz	r2, d7796 <_strtol_r+0xe6>
   d778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d778e:	b106      	cbz	r6, d7792 <_strtol_r+0xe2>
   d7790:	4240      	negs	r0, r0
   d7792:	b172      	cbz	r2, d77b2 <_strtol_r+0x102>
   d7794:	b107      	cbz	r7, d7798 <_strtol_r+0xe8>
   d7796:	1e69      	subs	r1, r5, #1
   d7798:	6011      	str	r1, [r2, #0]
   d779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d779e:	2430      	movs	r4, #48	; 0x30
   d77a0:	2b00      	cmp	r3, #0
   d77a2:	d1b1      	bne.n	d7708 <_strtol_r+0x58>
   d77a4:	2308      	movs	r3, #8
   d77a6:	e7af      	b.n	d7708 <_strtol_r+0x58>
   d77a8:	230a      	movs	r3, #10
   d77aa:	e7ad      	b.n	d7708 <_strtol_r+0x58>
   d77ac:	2c30      	cmp	r4, #48	; 0x30
   d77ae:	d0a3      	beq.n	d76f8 <_strtol_r+0x48>
   d77b0:	e7aa      	b.n	d7708 <_strtol_r+0x58>
   d77b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77b6:	bf00      	nop
   d77b8:	2003e228 	.word	0x2003e228

000d77bc <strtol>:
   d77bc:	4613      	mov	r3, r2
   d77be:	460a      	mov	r2, r1
   d77c0:	4601      	mov	r1, r0
   d77c2:	4802      	ldr	r0, [pc, #8]	; (d77cc <strtol+0x10>)
   d77c4:	6800      	ldr	r0, [r0, #0]
   d77c6:	f7ff bf73 	b.w	d76b0 <_strtol_r>
   d77ca:	bf00      	nop
   d77cc:	2003e28c 	.word	0x2003e28c

000d77d0 <_strtoul_r>:
   d77d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d77d4:	4680      	mov	r8, r0
   d77d6:	483c      	ldr	r0, [pc, #240]	; (d78c8 <_strtoul_r+0xf8>)
   d77d8:	f8d0 9000 	ldr.w	r9, [r0]
   d77dc:	460e      	mov	r6, r1
   d77de:	4635      	mov	r5, r6
   d77e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d77e4:	eb09 0004 	add.w	r0, r9, r4
   d77e8:	7840      	ldrb	r0, [r0, #1]
   d77ea:	f000 0008 	and.w	r0, r0, #8
   d77ee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d77f2:	b108      	cbz	r0, d77f8 <_strtoul_r+0x28>
   d77f4:	462e      	mov	r6, r5
   d77f6:	e7f2      	b.n	d77de <_strtoul_r+0xe>
   d77f8:	2c2d      	cmp	r4, #45	; 0x2d
   d77fa:	d103      	bne.n	d7804 <_strtoul_r+0x34>
   d77fc:	1cb5      	adds	r5, r6, #2
   d77fe:	7874      	ldrb	r4, [r6, #1]
   d7800:	2701      	movs	r7, #1
   d7802:	e003      	b.n	d780c <_strtoul_r+0x3c>
   d7804:	2c2b      	cmp	r4, #43	; 0x2b
   d7806:	bf04      	itt	eq
   d7808:	7874      	ldrbeq	r4, [r6, #1]
   d780a:	1cb5      	addeq	r5, r6, #2
   d780c:	b113      	cbz	r3, d7814 <_strtoul_r+0x44>
   d780e:	2b10      	cmp	r3, #16
   d7810:	d10a      	bne.n	d7828 <_strtoul_r+0x58>
   d7812:	e053      	b.n	d78bc <_strtoul_r+0xec>
   d7814:	2c30      	cmp	r4, #48	; 0x30
   d7816:	d14f      	bne.n	d78b8 <_strtoul_r+0xe8>
   d7818:	7828      	ldrb	r0, [r5, #0]
   d781a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d781e:	2858      	cmp	r0, #88	; 0x58
   d7820:	d145      	bne.n	d78ae <_strtoul_r+0xde>
   d7822:	786c      	ldrb	r4, [r5, #1]
   d7824:	2310      	movs	r3, #16
   d7826:	3502      	adds	r5, #2
   d7828:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d782c:	2600      	movs	r6, #0
   d782e:	fbbc fcf3 	udiv	ip, ip, r3
   d7832:	fb03 fa0c 	mul.w	sl, r3, ip
   d7836:	ea6f 0a0a 	mvn.w	sl, sl
   d783a:	4630      	mov	r0, r6
   d783c:	eb09 0e04 	add.w	lr, r9, r4
   d7840:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7844:	f01e 0f04 	tst.w	lr, #4
   d7848:	d001      	beq.n	d784e <_strtoul_r+0x7e>
   d784a:	3c30      	subs	r4, #48	; 0x30
   d784c:	e00b      	b.n	d7866 <_strtoul_r+0x96>
   d784e:	f01e 0e03 	ands.w	lr, lr, #3
   d7852:	d01a      	beq.n	d788a <_strtoul_r+0xba>
   d7854:	f1be 0f01 	cmp.w	lr, #1
   d7858:	bf0c      	ite	eq
   d785a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d785e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7862:	ebce 0404 	rsb	r4, lr, r4
   d7866:	42a3      	cmp	r3, r4
   d7868:	dd0f      	ble.n	d788a <_strtoul_r+0xba>
   d786a:	2e00      	cmp	r6, #0
   d786c:	db08      	blt.n	d7880 <_strtoul_r+0xb0>
   d786e:	4560      	cmp	r0, ip
   d7870:	d806      	bhi.n	d7880 <_strtoul_r+0xb0>
   d7872:	d101      	bne.n	d7878 <_strtoul_r+0xa8>
   d7874:	4554      	cmp	r4, sl
   d7876:	dc03      	bgt.n	d7880 <_strtoul_r+0xb0>
   d7878:	fb03 4000 	mla	r0, r3, r0, r4
   d787c:	2601      	movs	r6, #1
   d787e:	e001      	b.n	d7884 <_strtoul_r+0xb4>
   d7880:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7884:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7888:	e7d8      	b.n	d783c <_strtoul_r+0x6c>
   d788a:	2e00      	cmp	r6, #0
   d788c:	da07      	bge.n	d789e <_strtoul_r+0xce>
   d788e:	2322      	movs	r3, #34	; 0x22
   d7890:	f8c8 3000 	str.w	r3, [r8]
   d7894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7898:	b92a      	cbnz	r2, d78a6 <_strtoul_r+0xd6>
   d789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d789e:	b107      	cbz	r7, d78a2 <_strtoul_r+0xd2>
   d78a0:	4240      	negs	r0, r0
   d78a2:	b172      	cbz	r2, d78c2 <_strtoul_r+0xf2>
   d78a4:	b106      	cbz	r6, d78a8 <_strtoul_r+0xd8>
   d78a6:	1e69      	subs	r1, r5, #1
   d78a8:	6011      	str	r1, [r2, #0]
   d78aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78ae:	2430      	movs	r4, #48	; 0x30
   d78b0:	2b00      	cmp	r3, #0
   d78b2:	d1b9      	bne.n	d7828 <_strtoul_r+0x58>
   d78b4:	2308      	movs	r3, #8
   d78b6:	e7b7      	b.n	d7828 <_strtoul_r+0x58>
   d78b8:	230a      	movs	r3, #10
   d78ba:	e7b5      	b.n	d7828 <_strtoul_r+0x58>
   d78bc:	2c30      	cmp	r4, #48	; 0x30
   d78be:	d0ab      	beq.n	d7818 <_strtoul_r+0x48>
   d78c0:	e7b2      	b.n	d7828 <_strtoul_r+0x58>
   d78c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78c6:	bf00      	nop
   d78c8:	2003e228 	.word	0x2003e228

000d78cc <strtoul>:
   d78cc:	4613      	mov	r3, r2
   d78ce:	460a      	mov	r2, r1
   d78d0:	4601      	mov	r1, r0
   d78d2:	4802      	ldr	r0, [pc, #8]	; (d78dc <strtoul+0x10>)
   d78d4:	6800      	ldr	r0, [r0, #0]
   d78d6:	f7ff bf7b 	b.w	d77d0 <_strtoul_r>
   d78da:	bf00      	nop
   d78dc:	2003e28c 	.word	0x2003e28c

000d78e0 <__tzcalc_limits>:
   d78e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78e4:	4604      	mov	r4, r0
   d78e6:	f000 fa6f 	bl	d7dc8 <__gettzinfo>
   d78ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d78ee:	429c      	cmp	r4, r3
   d78f0:	f340 8096 	ble.w	d7a20 <__tzcalc_limits+0x140>
   d78f4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d78f8:	18e3      	adds	r3, r4, r3
   d78fa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d78fe:	109b      	asrs	r3, r3, #2
   d7900:	f240 156d 	movw	r5, #365	; 0x16d
   d7904:	fb05 3502 	mla	r5, r5, r2, r3
   d7908:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d790c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7910:	fb92 f3f3 	sdiv	r3, r2, r3
   d7914:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7918:	442b      	add	r3, r5
   d791a:	18a5      	adds	r5, r4, r2
   d791c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7920:	fb95 f5f2 	sdiv	r5, r5, r2
   d7924:	441d      	add	r5, r3
   d7926:	2364      	movs	r3, #100	; 0x64
   d7928:	fb94 f7f2 	sdiv	r7, r4, r2
   d792c:	fb94 f6f3 	sdiv	r6, r4, r3
   d7930:	fb02 4717 	mls	r7, r2, r7, r4
   d7934:	fb03 4616 	mls	r6, r3, r6, r4
   d7938:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d793c:	fab7 fe87 	clz	lr, r7
   d7940:	9301      	str	r3, [sp, #4]
   d7942:	f004 0303 	and.w	r3, r4, #3
   d7946:	6044      	str	r4, [r0, #4]
   d7948:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d794c:	4601      	mov	r1, r0
   d794e:	9300      	str	r3, [sp, #0]
   d7950:	f04f 0c07 	mov.w	ip, #7
   d7954:	7a0b      	ldrb	r3, [r1, #8]
   d7956:	2b4a      	cmp	r3, #74	; 0x4a
   d7958:	d10e      	bne.n	d7978 <__tzcalc_limits+0x98>
   d795a:	694b      	ldr	r3, [r1, #20]
   d795c:	9a00      	ldr	r2, [sp, #0]
   d795e:	18ec      	adds	r4, r5, r3
   d7960:	b902      	cbnz	r2, d7964 <__tzcalc_limits+0x84>
   d7962:	b906      	cbnz	r6, d7966 <__tzcalc_limits+0x86>
   d7964:	b927      	cbnz	r7, d7970 <__tzcalc_limits+0x90>
   d7966:	2b3b      	cmp	r3, #59	; 0x3b
   d7968:	bfd4      	ite	le
   d796a:	2300      	movle	r3, #0
   d796c:	2301      	movgt	r3, #1
   d796e:	e000      	b.n	d7972 <__tzcalc_limits+0x92>
   d7970:	2300      	movs	r3, #0
   d7972:	4423      	add	r3, r4
   d7974:	3b01      	subs	r3, #1
   d7976:	e03f      	b.n	d79f8 <__tzcalc_limits+0x118>
   d7978:	2b44      	cmp	r3, #68	; 0x44
   d797a:	d102      	bne.n	d7982 <__tzcalc_limits+0xa2>
   d797c:	694b      	ldr	r3, [r1, #20]
   d797e:	442b      	add	r3, r5
   d7980:	e03a      	b.n	d79f8 <__tzcalc_limits+0x118>
   d7982:	9b00      	ldr	r3, [sp, #0]
   d7984:	b92b      	cbnz	r3, d7992 <__tzcalc_limits+0xb2>
   d7986:	2e00      	cmp	r6, #0
   d7988:	bf0c      	ite	eq
   d798a:	46f0      	moveq	r8, lr
   d798c:	f04f 0801 	movne.w	r8, #1
   d7990:	e000      	b.n	d7994 <__tzcalc_limits+0xb4>
   d7992:	46f0      	mov	r8, lr
   d7994:	4b24      	ldr	r3, [pc, #144]	; (d7a28 <__tzcalc_limits+0x148>)
   d7996:	68cc      	ldr	r4, [r1, #12]
   d7998:	2230      	movs	r2, #48	; 0x30
   d799a:	fb02 3808 	mla	r8, r2, r8, r3
   d799e:	f1a8 0a04 	sub.w	sl, r8, #4
   d79a2:	46a9      	mov	r9, r5
   d79a4:	2301      	movs	r3, #1
   d79a6:	42a3      	cmp	r3, r4
   d79a8:	da04      	bge.n	d79b4 <__tzcalc_limits+0xd4>
   d79aa:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d79ae:	3301      	adds	r3, #1
   d79b0:	44d9      	add	r9, fp
   d79b2:	e7f8      	b.n	d79a6 <__tzcalc_limits+0xc6>
   d79b4:	f109 0304 	add.w	r3, r9, #4
   d79b8:	fb93 fbfc 	sdiv	fp, r3, ip
   d79bc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d79c0:	2c01      	cmp	r4, #1
   d79c2:	ebca 0a03 	rsb	sl, sl, r3
   d79c6:	694b      	ldr	r3, [r1, #20]
   d79c8:	bfb8      	it	lt
   d79ca:	2401      	movlt	r4, #1
   d79cc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d79d0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d79d4:	690b      	ldr	r3, [r1, #16]
   d79d6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d79da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d79de:	bf48      	it	mi
   d79e0:	f10a 0a07 	addmi.w	sl, sl, #7
   d79e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d79e8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d79ec:	4453      	add	r3, sl
   d79ee:	42a3      	cmp	r3, r4
   d79f0:	db01      	blt.n	d79f6 <__tzcalc_limits+0x116>
   d79f2:	3b07      	subs	r3, #7
   d79f4:	e7fb      	b.n	d79ee <__tzcalc_limits+0x10e>
   d79f6:	444b      	add	r3, r9
   d79f8:	698c      	ldr	r4, [r1, #24]
   d79fa:	4a0c      	ldr	r2, [pc, #48]	; (d7a2c <__tzcalc_limits+0x14c>)
   d79fc:	fb02 4303 	mla	r3, r2, r3, r4
   d7a00:	6a0c      	ldr	r4, [r1, #32]
   d7a02:	4423      	add	r3, r4
   d7a04:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7a08:	9b01      	ldr	r3, [sp, #4]
   d7a0a:	4299      	cmp	r1, r3
   d7a0c:	d1a2      	bne.n	d7954 <__tzcalc_limits+0x74>
   d7a0e:	69c3      	ldr	r3, [r0, #28]
   d7a10:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7a12:	4293      	cmp	r3, r2
   d7a14:	bfac      	ite	ge
   d7a16:	2300      	movge	r3, #0
   d7a18:	2301      	movlt	r3, #1
   d7a1a:	6003      	str	r3, [r0, #0]
   d7a1c:	2001      	movs	r0, #1
   d7a1e:	e000      	b.n	d7a22 <__tzcalc_limits+0x142>
   d7a20:	2000      	movs	r0, #0
   d7a22:	b003      	add	sp, #12
   d7a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a28:	000d8594 	.word	0x000d8594
   d7a2c:	00015180 	.word	0x00015180

000d7a30 <__tz_lock>:
   d7a30:	4770      	bx	lr

000d7a32 <__tz_unlock>:
   d7a32:	4770      	bx	lr

000d7a34 <_tzset_unlocked>:
   d7a34:	4b01      	ldr	r3, [pc, #4]	; (d7a3c <_tzset_unlocked+0x8>)
   d7a36:	6818      	ldr	r0, [r3, #0]
   d7a38:	f000 b802 	b.w	d7a40 <_tzset_unlocked_r>
   d7a3c:	2003e28c 	.word	0x2003e28c

000d7a40 <_tzset_unlocked_r>:
   d7a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a44:	b08d      	sub	sp, #52	; 0x34
   d7a46:	4607      	mov	r7, r0
   d7a48:	f000 f9be 	bl	d7dc8 <__gettzinfo>
   d7a4c:	49b0      	ldr	r1, [pc, #704]	; (d7d10 <_tzset_unlocked_r+0x2d0>)
   d7a4e:	4eb1      	ldr	r6, [pc, #708]	; (d7d14 <_tzset_unlocked_r+0x2d4>)
   d7a50:	4604      	mov	r4, r0
   d7a52:	4638      	mov	r0, r7
   d7a54:	f000 f9b0 	bl	d7db8 <_getenv_r>
   d7a58:	4605      	mov	r5, r0
   d7a5a:	b960      	cbnz	r0, d7a76 <_tzset_unlocked_r+0x36>
   d7a5c:	4bae      	ldr	r3, [pc, #696]	; (d7d18 <_tzset_unlocked_r+0x2d8>)
   d7a5e:	4aaf      	ldr	r2, [pc, #700]	; (d7d1c <_tzset_unlocked_r+0x2dc>)
   d7a60:	6018      	str	r0, [r3, #0]
   d7a62:	4baf      	ldr	r3, [pc, #700]	; (d7d20 <_tzset_unlocked_r+0x2e0>)
   d7a64:	6018      	str	r0, [r3, #0]
   d7a66:	4baf      	ldr	r3, [pc, #700]	; (d7d24 <_tzset_unlocked_r+0x2e4>)
   d7a68:	6830      	ldr	r0, [r6, #0]
   d7a6a:	601a      	str	r2, [r3, #0]
   d7a6c:	605a      	str	r2, [r3, #4]
   d7a6e:	f7fd fcf5 	bl	d545c <free>
   d7a72:	6035      	str	r5, [r6, #0]
   d7a74:	e148      	b.n	d7d08 <_tzset_unlocked_r+0x2c8>
   d7a76:	6831      	ldr	r1, [r6, #0]
   d7a78:	b979      	cbnz	r1, d7a9a <_tzset_unlocked_r+0x5a>
   d7a7a:	6830      	ldr	r0, [r6, #0]
   d7a7c:	f7fd fcee 	bl	d545c <free>
   d7a80:	4628      	mov	r0, r5
   d7a82:	f7ff fde4 	bl	d764e <strlen>
   d7a86:	1c41      	adds	r1, r0, #1
   d7a88:	4638      	mov	r0, r7
   d7a8a:	f7fd fd0f 	bl	d54ac <_malloc_r>
   d7a8e:	6030      	str	r0, [r6, #0]
   d7a90:	b148      	cbz	r0, d7aa6 <_tzset_unlocked_r+0x66>
   d7a92:	4629      	mov	r1, r5
   d7a94:	f7ff fdb8 	bl	d7608 <strcpy>
   d7a98:	e005      	b.n	d7aa6 <_tzset_unlocked_r+0x66>
   d7a9a:	f7ff fdab 	bl	d75f4 <strcmp>
   d7a9e:	2800      	cmp	r0, #0
   d7aa0:	f000 8132 	beq.w	d7d08 <_tzset_unlocked_r+0x2c8>
   d7aa4:	e7e9      	b.n	d7a7a <_tzset_unlocked_r+0x3a>
   d7aa6:	782b      	ldrb	r3, [r5, #0]
   d7aa8:	4a9f      	ldr	r2, [pc, #636]	; (d7d28 <_tzset_unlocked_r+0x2e8>)
   d7aaa:	49a0      	ldr	r1, [pc, #640]	; (d7d2c <_tzset_unlocked_r+0x2ec>)
   d7aac:	2b3a      	cmp	r3, #58	; 0x3a
   d7aae:	bf08      	it	eq
   d7ab0:	3501      	addeq	r5, #1
   d7ab2:	ae0a      	add	r6, sp, #40	; 0x28
   d7ab4:	4633      	mov	r3, r6
   d7ab6:	4628      	mov	r0, r5
   d7ab8:	f7fd fce0 	bl	d547c <siscanf>
   d7abc:	2800      	cmp	r0, #0
   d7abe:	f340 8123 	ble.w	d7d08 <_tzset_unlocked_r+0x2c8>
   d7ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ac4:	18ef      	adds	r7, r5, r3
   d7ac6:	5ceb      	ldrb	r3, [r5, r3]
   d7ac8:	2b2d      	cmp	r3, #45	; 0x2d
   d7aca:	d103      	bne.n	d7ad4 <_tzset_unlocked_r+0x94>
   d7acc:	3701      	adds	r7, #1
   d7ace:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7ad2:	e003      	b.n	d7adc <_tzset_unlocked_r+0x9c>
   d7ad4:	2b2b      	cmp	r3, #43	; 0x2b
   d7ad6:	bf08      	it	eq
   d7ad8:	3701      	addeq	r7, #1
   d7ada:	2501      	movs	r5, #1
   d7adc:	f10d 0a20 	add.w	sl, sp, #32
   d7ae0:	f10d 0b1e 	add.w	fp, sp, #30
   d7ae4:	f04f 0800 	mov.w	r8, #0
   d7ae8:	9603      	str	r6, [sp, #12]
   d7aea:	f8cd a008 	str.w	sl, [sp, #8]
   d7aee:	9601      	str	r6, [sp, #4]
   d7af0:	f8cd b000 	str.w	fp, [sp]
   d7af4:	4633      	mov	r3, r6
   d7af6:	aa07      	add	r2, sp, #28
   d7af8:	498d      	ldr	r1, [pc, #564]	; (d7d30 <_tzset_unlocked_r+0x2f0>)
   d7afa:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7afe:	4638      	mov	r0, r7
   d7b00:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7b04:	f7fd fcba 	bl	d547c <siscanf>
   d7b08:	4540      	cmp	r0, r8
   d7b0a:	f340 80fd 	ble.w	d7d08 <_tzset_unlocked_r+0x2c8>
   d7b0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7b12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7b16:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7d3c <_tzset_unlocked_r+0x2fc>
   d7b1a:	213c      	movs	r1, #60	; 0x3c
   d7b1c:	fb01 3302 	mla	r3, r1, r2, r3
   d7b20:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7b24:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7b28:	fb01 3302 	mla	r3, r1, r2, r3
   d7b2c:	435d      	muls	r5, r3
   d7b2e:	6225      	str	r5, [r4, #32]
   d7b30:	4d7c      	ldr	r5, [pc, #496]	; (d7d24 <_tzset_unlocked_r+0x2e4>)
   d7b32:	4b7d      	ldr	r3, [pc, #500]	; (d7d28 <_tzset_unlocked_r+0x2e8>)
   d7b34:	602b      	str	r3, [r5, #0]
   d7b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b38:	497c      	ldr	r1, [pc, #496]	; (d7d2c <_tzset_unlocked_r+0x2ec>)
   d7b3a:	441f      	add	r7, r3
   d7b3c:	464a      	mov	r2, r9
   d7b3e:	4633      	mov	r3, r6
   d7b40:	4638      	mov	r0, r7
   d7b42:	f7fd fc9b 	bl	d547c <siscanf>
   d7b46:	4540      	cmp	r0, r8
   d7b48:	dc08      	bgt.n	d7b5c <_tzset_unlocked_r+0x11c>
   d7b4a:	682b      	ldr	r3, [r5, #0]
   d7b4c:	606b      	str	r3, [r5, #4]
   d7b4e:	4b72      	ldr	r3, [pc, #456]	; (d7d18 <_tzset_unlocked_r+0x2d8>)
   d7b50:	6a22      	ldr	r2, [r4, #32]
   d7b52:	601a      	str	r2, [r3, #0]
   d7b54:	4b72      	ldr	r3, [pc, #456]	; (d7d20 <_tzset_unlocked_r+0x2e0>)
   d7b56:	f8c3 8000 	str.w	r8, [r3]
   d7b5a:	e0d5      	b.n	d7d08 <_tzset_unlocked_r+0x2c8>
   d7b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b5e:	f8c5 9004 	str.w	r9, [r5, #4]
   d7b62:	18fd      	adds	r5, r7, r3
   d7b64:	5cfb      	ldrb	r3, [r7, r3]
   d7b66:	2b2d      	cmp	r3, #45	; 0x2d
   d7b68:	d103      	bne.n	d7b72 <_tzset_unlocked_r+0x132>
   d7b6a:	3501      	adds	r5, #1
   d7b6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7b70:	e003      	b.n	d7b7a <_tzset_unlocked_r+0x13a>
   d7b72:	2b2b      	cmp	r3, #43	; 0x2b
   d7b74:	bf08      	it	eq
   d7b76:	3501      	addeq	r5, #1
   d7b78:	2701      	movs	r7, #1
   d7b7a:	2300      	movs	r3, #0
   d7b7c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7b80:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7b84:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7b88:	930a      	str	r3, [sp, #40]	; 0x28
   d7b8a:	9603      	str	r6, [sp, #12]
   d7b8c:	f8cd a008 	str.w	sl, [sp, #8]
   d7b90:	9601      	str	r6, [sp, #4]
   d7b92:	f8cd b000 	str.w	fp, [sp]
   d7b96:	4633      	mov	r3, r6
   d7b98:	aa07      	add	r2, sp, #28
   d7b9a:	4965      	ldr	r1, [pc, #404]	; (d7d30 <_tzset_unlocked_r+0x2f0>)
   d7b9c:	4628      	mov	r0, r5
   d7b9e:	f7fd fc6d 	bl	d547c <siscanf>
   d7ba2:	2800      	cmp	r0, #0
   d7ba4:	dc04      	bgt.n	d7bb0 <_tzset_unlocked_r+0x170>
   d7ba6:	6a23      	ldr	r3, [r4, #32]
   d7ba8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7bac:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7bae:	e00e      	b.n	d7bce <_tzset_unlocked_r+0x18e>
   d7bb0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7bb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7bb8:	213c      	movs	r1, #60	; 0x3c
   d7bba:	fb01 3302 	mla	r3, r1, r2, r3
   d7bbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7bc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7bc6:	fb01 3302 	mla	r3, r1, r2, r3
   d7bca:	435f      	muls	r7, r3
   d7bcc:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7bd0:	4627      	mov	r7, r4
   d7bd2:	441d      	add	r5, r3
   d7bd4:	f04f 0900 	mov.w	r9, #0
   d7bd8:	782b      	ldrb	r3, [r5, #0]
   d7bda:	2b2c      	cmp	r3, #44	; 0x2c
   d7bdc:	bf08      	it	eq
   d7bde:	3501      	addeq	r5, #1
   d7be0:	f895 8000 	ldrb.w	r8, [r5]
   d7be4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7be8:	d126      	bne.n	d7c38 <_tzset_unlocked_r+0x1f8>
   d7bea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7bee:	9302      	str	r3, [sp, #8]
   d7bf0:	ab09      	add	r3, sp, #36	; 0x24
   d7bf2:	9300      	str	r3, [sp, #0]
   d7bf4:	9603      	str	r6, [sp, #12]
   d7bf6:	9601      	str	r6, [sp, #4]
   d7bf8:	4633      	mov	r3, r6
   d7bfa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7bfe:	494d      	ldr	r1, [pc, #308]	; (d7d34 <_tzset_unlocked_r+0x2f4>)
   d7c00:	4628      	mov	r0, r5
   d7c02:	f7fd fc3b 	bl	d547c <siscanf>
   d7c06:	2803      	cmp	r0, #3
   d7c08:	d17e      	bne.n	d7d08 <_tzset_unlocked_r+0x2c8>
   d7c0a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7c0e:	1e4b      	subs	r3, r1, #1
   d7c10:	2b0b      	cmp	r3, #11
   d7c12:	d879      	bhi.n	d7d08 <_tzset_unlocked_r+0x2c8>
   d7c14:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7c18:	1e53      	subs	r3, r2, #1
   d7c1a:	2b04      	cmp	r3, #4
   d7c1c:	d874      	bhi.n	d7d08 <_tzset_unlocked_r+0x2c8>
   d7c1e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7c22:	2b06      	cmp	r3, #6
   d7c24:	d870      	bhi.n	d7d08 <_tzset_unlocked_r+0x2c8>
   d7c26:	f887 8008 	strb.w	r8, [r7, #8]
   d7c2a:	60f9      	str	r1, [r7, #12]
   d7c2c:	613a      	str	r2, [r7, #16]
   d7c2e:	617b      	str	r3, [r7, #20]
   d7c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7c32:	eb05 0803 	add.w	r8, r5, r3
   d7c36:	e02a      	b.n	d7c8e <_tzset_unlocked_r+0x24e>
   d7c38:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7c3c:	bf06      	itte	eq
   d7c3e:	3501      	addeq	r5, #1
   d7c40:	4643      	moveq	r3, r8
   d7c42:	2344      	movne	r3, #68	; 0x44
   d7c44:	220a      	movs	r2, #10
   d7c46:	a90b      	add	r1, sp, #44	; 0x2c
   d7c48:	4628      	mov	r0, r5
   d7c4a:	9305      	str	r3, [sp, #20]
   d7c4c:	f7ff fe3e 	bl	d78cc <strtoul>
   d7c50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7c54:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7c58:	4545      	cmp	r5, r8
   d7c5a:	9b05      	ldr	r3, [sp, #20]
   d7c5c:	d114      	bne.n	d7c88 <_tzset_unlocked_r+0x248>
   d7c5e:	234d      	movs	r3, #77	; 0x4d
   d7c60:	f1b9 0f00 	cmp.w	r9, #0
   d7c64:	d107      	bne.n	d7c76 <_tzset_unlocked_r+0x236>
   d7c66:	7223      	strb	r3, [r4, #8]
   d7c68:	2303      	movs	r3, #3
   d7c6a:	60e3      	str	r3, [r4, #12]
   d7c6c:	2302      	movs	r3, #2
   d7c6e:	6123      	str	r3, [r4, #16]
   d7c70:	f8c4 9014 	str.w	r9, [r4, #20]
   d7c74:	e00b      	b.n	d7c8e <_tzset_unlocked_r+0x24e>
   d7c76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7c7a:	230b      	movs	r3, #11
   d7c7c:	62a3      	str	r3, [r4, #40]	; 0x28
   d7c7e:	2301      	movs	r3, #1
   d7c80:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7c82:	2300      	movs	r3, #0
   d7c84:	6323      	str	r3, [r4, #48]	; 0x30
   d7c86:	e002      	b.n	d7c8e <_tzset_unlocked_r+0x24e>
   d7c88:	b280      	uxth	r0, r0
   d7c8a:	723b      	strb	r3, [r7, #8]
   d7c8c:	6178      	str	r0, [r7, #20]
   d7c8e:	2302      	movs	r3, #2
   d7c90:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7c94:	2300      	movs	r3, #0
   d7c96:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7c9a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7c9e:	930a      	str	r3, [sp, #40]	; 0x28
   d7ca0:	f898 3000 	ldrb.w	r3, [r8]
   d7ca4:	2b2f      	cmp	r3, #47	; 0x2f
   d7ca6:	d10b      	bne.n	d7cc0 <_tzset_unlocked_r+0x280>
   d7ca8:	9603      	str	r6, [sp, #12]
   d7caa:	f8cd a008 	str.w	sl, [sp, #8]
   d7cae:	9601      	str	r6, [sp, #4]
   d7cb0:	f8cd b000 	str.w	fp, [sp]
   d7cb4:	4633      	mov	r3, r6
   d7cb6:	aa07      	add	r2, sp, #28
   d7cb8:	491f      	ldr	r1, [pc, #124]	; (d7d38 <_tzset_unlocked_r+0x2f8>)
   d7cba:	4640      	mov	r0, r8
   d7cbc:	f7fd fbde 	bl	d547c <siscanf>
   d7cc0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7cc4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7cc8:	213c      	movs	r1, #60	; 0x3c
   d7cca:	fb01 3302 	mla	r3, r1, r2, r3
   d7cce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7cd2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7cd6:	fb01 3302 	mla	r3, r1, r2, r3
   d7cda:	61bb      	str	r3, [r7, #24]
   d7cdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7cde:	f109 0901 	add.w	r9, r9, #1
   d7ce2:	f1b9 0f02 	cmp.w	r9, #2
   d7ce6:	4445      	add	r5, r8
   d7ce8:	f107 071c 	add.w	r7, r7, #28
   d7cec:	f47f af74 	bne.w	d7bd8 <_tzset_unlocked_r+0x198>
   d7cf0:	6860      	ldr	r0, [r4, #4]
   d7cf2:	f7ff fdf5 	bl	d78e0 <__tzcalc_limits>
   d7cf6:	4b08      	ldr	r3, [pc, #32]	; (d7d18 <_tzset_unlocked_r+0x2d8>)
   d7cf8:	6a22      	ldr	r2, [r4, #32]
   d7cfa:	601a      	str	r2, [r3, #0]
   d7cfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7cfe:	1a9b      	subs	r3, r3, r2
   d7d00:	4a07      	ldr	r2, [pc, #28]	; (d7d20 <_tzset_unlocked_r+0x2e0>)
   d7d02:	bf18      	it	ne
   d7d04:	2301      	movne	r3, #1
   d7d06:	6013      	str	r3, [r2, #0]
   d7d08:	b00d      	add	sp, #52	; 0x34
   d7d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d0e:	bf00      	nop
   d7d10:	000d85f4 	.word	0x000d85f4
   d7d14:	2003e7e0 	.word	0x2003e7e0
   d7d18:	2003e7e8 	.word	0x2003e7e8
   d7d1c:	000d85f7 	.word	0x000d85f7
   d7d20:	2003e7e4 	.word	0x2003e7e4
   d7d24:	2003e290 	.word	0x2003e290
   d7d28:	2003e7d3 	.word	0x2003e7d3
   d7d2c:	000d85fb 	.word	0x000d85fb
   d7d30:	000d861e 	.word	0x000d861e
   d7d34:	000d860a 	.word	0x000d860a
   d7d38:	000d861d 	.word	0x000d861d
   d7d3c:	2003e7c8 	.word	0x2003e7c8

000d7d40 <_findenv_r>:
   d7d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d44:	4607      	mov	r7, r0
   d7d46:	468b      	mov	fp, r1
   d7d48:	4690      	mov	r8, r2
   d7d4a:	f000 f8d9 	bl	d7f00 <__env_lock>
   d7d4e:	4b19      	ldr	r3, [pc, #100]	; (d7db4 <_findenv_r+0x74>)
   d7d50:	681d      	ldr	r5, [r3, #0]
   d7d52:	469a      	mov	sl, r3
   d7d54:	b13d      	cbz	r5, d7d66 <_findenv_r+0x26>
   d7d56:	465c      	mov	r4, fp
   d7d58:	4623      	mov	r3, r4
   d7d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7d5e:	b142      	cbz	r2, d7d72 <_findenv_r+0x32>
   d7d60:	2a3d      	cmp	r2, #61	; 0x3d
   d7d62:	461c      	mov	r4, r3
   d7d64:	d1f8      	bne.n	d7d58 <_findenv_r+0x18>
   d7d66:	4638      	mov	r0, r7
   d7d68:	f000 f8cb 	bl	d7f02 <__env_unlock>
   d7d6c:	2000      	movs	r0, #0
   d7d6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d72:	ebcb 0404 	rsb	r4, fp, r4
   d7d76:	46a9      	mov	r9, r5
   d7d78:	f859 0b04 	ldr.w	r0, [r9], #4
   d7d7c:	2800      	cmp	r0, #0
   d7d7e:	d0f2      	beq.n	d7d66 <_findenv_r+0x26>
   d7d80:	4622      	mov	r2, r4
   d7d82:	4659      	mov	r1, fp
   d7d84:	f7ff fc6b 	bl	d765e <strncmp>
   d7d88:	b988      	cbnz	r0, d7dae <_findenv_r+0x6e>
   d7d8a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7d8e:	191e      	adds	r6, r3, r4
   d7d90:	5d1b      	ldrb	r3, [r3, r4]
   d7d92:	2b3d      	cmp	r3, #61	; 0x3d
   d7d94:	d10b      	bne.n	d7dae <_findenv_r+0x6e>
   d7d96:	f8da 3000 	ldr.w	r3, [sl]
   d7d9a:	1aed      	subs	r5, r5, r3
   d7d9c:	10ad      	asrs	r5, r5, #2
   d7d9e:	4638      	mov	r0, r7
   d7da0:	f8c8 5000 	str.w	r5, [r8]
   d7da4:	f000 f8ad 	bl	d7f02 <__env_unlock>
   d7da8:	1c70      	adds	r0, r6, #1
   d7daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7dae:	464d      	mov	r5, r9
   d7db0:	e7e1      	b.n	d7d76 <_findenv_r+0x36>
   d7db2:	bf00      	nop
   d7db4:	2003e2d8 	.word	0x2003e2d8

000d7db8 <_getenv_r>:
   d7db8:	b507      	push	{r0, r1, r2, lr}
   d7dba:	aa01      	add	r2, sp, #4
   d7dbc:	f7ff ffc0 	bl	d7d40 <_findenv_r>
   d7dc0:	b003      	add	sp, #12
   d7dc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7dc8 <__gettzinfo>:
   d7dc8:	4800      	ldr	r0, [pc, #0]	; (d7dcc <__gettzinfo+0x4>)
   d7dca:	4770      	bx	lr
   d7dcc:	2003e298 	.word	0x2003e298

000d7dd0 <gmtime_r>:
   d7dd0:	6802      	ldr	r2, [r0, #0]
   d7dd2:	4b47      	ldr	r3, [pc, #284]	; (d7ef0 <gmtime_r+0x120>)
   d7dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7dd6:	fb92 f4f3 	sdiv	r4, r2, r3
   d7dda:	fb03 2214 	mls	r2, r3, r4, r2
   d7dde:	2a00      	cmp	r2, #0
   d7de0:	bfbc      	itt	lt
   d7de2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7de6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7dea:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7dee:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7df2:	fb92 f3f0 	sdiv	r3, r2, r0
   d7df6:	fb00 2213 	mls	r2, r0, r3, r2
   d7dfa:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7dfe:	bfac      	ite	ge
   d7e00:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7e04:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7e08:	608b      	str	r3, [r1, #8]
   d7e0a:	fb92 f3f0 	sdiv	r3, r2, r0
   d7e0e:	fb00 2213 	mls	r2, r0, r3, r2
   d7e12:	604b      	str	r3, [r1, #4]
   d7e14:	600a      	str	r2, [r1, #0]
   d7e16:	2307      	movs	r3, #7
   d7e18:	1ce2      	adds	r2, r4, #3
   d7e1a:	fb92 f3f3 	sdiv	r3, r2, r3
   d7e1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7e22:	1ad3      	subs	r3, r2, r3
   d7e24:	618b      	str	r3, [r1, #24]
   d7e26:	4b33      	ldr	r3, [pc, #204]	; (d7ef4 <gmtime_r+0x124>)
   d7e28:	4d33      	ldr	r5, [pc, #204]	; (d7ef8 <gmtime_r+0x128>)
   d7e2a:	fb94 f5f5 	sdiv	r5, r4, r5
   d7e2e:	fb03 4405 	mla	r4, r3, r5, r4
   d7e32:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7e36:	fbb4 f2f2 	udiv	r2, r4, r2
   d7e3a:	4422      	add	r2, r4
   d7e3c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7e40:	fbb4 f3f7 	udiv	r3, r4, r7
   d7e44:	1ad2      	subs	r2, r2, r3
   d7e46:	482d      	ldr	r0, [pc, #180]	; (d7efc <gmtime_r+0x12c>)
   d7e48:	fbb4 f0f0 	udiv	r0, r4, r0
   d7e4c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7e50:	1a13      	subs	r3, r2, r0
   d7e52:	fbb3 f6f6 	udiv	r6, r3, r6
   d7e56:	4434      	add	r4, r6
   d7e58:	f240 126d 	movw	r2, #365	; 0x16d
   d7e5c:	fbb3 f0f2 	udiv	r0, r3, r2
   d7e60:	fbb3 f3f7 	udiv	r3, r3, r7
   d7e64:	1ae3      	subs	r3, r4, r3
   d7e66:	fb02 3310 	mls	r3, r2, r0, r3
   d7e6a:	2499      	movs	r4, #153	; 0x99
   d7e6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d7e70:	3202      	adds	r2, #2
   d7e72:	fbb2 f2f4 	udiv	r2, r2, r4
   d7e76:	2a0a      	cmp	r2, #10
   d7e78:	fb04 f402 	mul.w	r4, r4, r2
   d7e7c:	f104 0602 	add.w	r6, r4, #2
   d7e80:	f04f 0405 	mov.w	r4, #5
   d7e84:	fbb6 f4f4 	udiv	r4, r6, r4
   d7e88:	bf34      	ite	cc
   d7e8a:	2602      	movcc	r6, #2
   d7e8c:	f06f 0609 	mvncs.w	r6, #9
   d7e90:	4416      	add	r6, r2
   d7e92:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7e96:	fb02 0505 	mla	r5, r2, r5, r0
   d7e9a:	1c5f      	adds	r7, r3, #1
   d7e9c:	2e01      	cmp	r6, #1
   d7e9e:	bf98      	it	ls
   d7ea0:	3501      	addls	r5, #1
   d7ea2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7ea6:	eba7 0704 	sub.w	r7, r7, r4
   d7eaa:	d302      	bcc.n	d7eb2 <gmtime_r+0xe2>
   d7eac:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7eb0:	e014      	b.n	d7edc <gmtime_r+0x10c>
   d7eb2:	0782      	lsls	r2, r0, #30
   d7eb4:	d105      	bne.n	d7ec2 <gmtime_r+0xf2>
   d7eb6:	2464      	movs	r4, #100	; 0x64
   d7eb8:	fbb0 f2f4 	udiv	r2, r0, r4
   d7ebc:	fb04 0212 	mls	r2, r4, r2, r0
   d7ec0:	b94a      	cbnz	r2, d7ed6 <gmtime_r+0x106>
   d7ec2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7ec6:	fbb0 f4f2 	udiv	r4, r0, r2
   d7eca:	fb02 0014 	mls	r0, r2, r4, r0
   d7ece:	fab0 f280 	clz	r2, r0
   d7ed2:	0952      	lsrs	r2, r2, #5
   d7ed4:	e000      	b.n	d7ed8 <gmtime_r+0x108>
   d7ed6:	2201      	movs	r2, #1
   d7ed8:	333b      	adds	r3, #59	; 0x3b
   d7eda:	441a      	add	r2, r3
   d7edc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7ee0:	2300      	movs	r3, #0
   d7ee2:	61ca      	str	r2, [r1, #28]
   d7ee4:	614d      	str	r5, [r1, #20]
   d7ee6:	610e      	str	r6, [r1, #16]
   d7ee8:	60cf      	str	r7, [r1, #12]
   d7eea:	620b      	str	r3, [r1, #32]
   d7eec:	4608      	mov	r0, r1
   d7eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ef0:	00015180 	.word	0x00015180
   d7ef4:	fffdc54f 	.word	0xfffdc54f
   d7ef8:	00023ab1 	.word	0x00023ab1
   d7efc:	00023ab0 	.word	0x00023ab0

000d7f00 <__env_lock>:
   d7f00:	4770      	bx	lr

000d7f02 <__env_unlock>:
   d7f02:	4770      	bx	lr

000d7f04 <dynalib_user>:
   d7f04:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7f14:	0000 0000                                   ....

000d7f18 <_ZL13releaseNumber>:
   d7f18:	2e31 3331 0000 2e25 6630 2525 2500 2e33     1.13..%.0f%%.%3.
   d7f28:	6631 5620 2500 2e33 6631 4420 6765 6572     1f V.%3.1f Degre
   d7f38:	7365 4320 4700 7465 6974 676e 5620 6c61     es C.Getting Val
   d7f48:	6575 202c 654e 7478 5220 6165 6964 676e     ue, Next Reading
   d7f58:	6920 206e 3531 4d20 6e69 2e73 5300 4154      in 15 Mins..STA
   d7f68:	4554 3000 5600 7265 6f62 6573 4d20 646f     TE.0.Verbose Mod
   d7f78:	2065 7453 7261 6574 2e64 5600 7265 6f62     e Started..Verbo
   d7f88:	6573 4d20 646f 2065 6c41 6572 6461 2079     se Mode Already 
   d7f98:	4e4f 002e 6556 6272 736f 2065 6f4d 6564     ON..Verbose Mode
   d7fa8:	5320 6f74 7070 6465 002e 6556 6272 736f      Stopped..Verbos
   d7fb8:	2065 6f4d 6564 6120 726c 6165 7964 4f20     e Mode already O
   d7fc8:	4646 002e 227b 6554 706d 7265 7461 7275     FF..{"Temperatur
   d7fd8:	2265 253a 2e33 6631 202c 4222 7461 6574     e":%3.1f, "Batte
   d7fe8:	7972 3a22 3325 312e 7d66 4100 7269 512d     ry":%3.1f}.Air-Q
   d7ff8:	6175 696c 7974 482d 6f6f 006b 6f4e 4420     uality-Hook.No D
   d8008:	7461 0061 6255 6469 746f 2073 6f48 6b6f     ata.Ubidots Hook
   d8018:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   d8028:	6465 5300 6174 6574 5400 6172 736e 7469     ed.State.Transit
   d8038:	6f69 3a6e 2520 2073 6f74 2520 0073 6843     ion: %s to %s.Ch
   d8048:	6e61 6567 6420 7465 6365 6574 2064 202d     ange detected - 
   d8058:	6552 6f70 7472 6e69 0067 6954 656d 5020     Reporting.Time P
   d8068:	7361 6573 2064 202d 6552 6f70 7472 6e69     assed - Reportin
   d8078:	0067 4547 5454 4e49 2047 4552 4441 4e49     g.GETTING READIN
   d8088:	0047 4f46 4352 4445 4e00 7865 2074 6176     G.FORCED.Next va
   d8098:	756c 2065 6e69 3520 6d20 6e69 7475 7365     lue in 5 minutes
   d80a8:	4100 4144 5450 5649 2045 4e4f 4e00 206f     .ADAPTIVE ON.No 
   d80b8:	6863 6e61 6567 2d20 4920 6c64 0065 6554     change - Idle.Te
   d80c8:	706d 7265 7461 7275 0065 6157 7469 6e69     mperature.Waitin
   d80d8:	2067 4552 5053 4e4f 4553 4400 7461 2061     g RESPONSE.Data 
   d80e8:	6552 6563 7669 6465 202c 6f47 6e69 2067     Received, Going 
   d80f8:	6f74 4920 4c44 0045 7073 7261 2f6b 6564     to IDLE.spark/de
   d8108:	6976 6563 732f 7365 6973 6e6f 652f 646e     vice/session/end
   d8118:	5200 5345 5445 4954 474e 4920 204e 3033     .RESETTING IN 30
   d8128:	5320 4345 202e 6300 6c65 6973 7375 5200      SEC. .celsius.R
   d8138:	6c65 6165 6573 5300 6769 616e 006c 6142     elease.Signal.Ba
   d8148:	7474 7265 0079 6576 6272 736f 4d65 646f     ttery.verboseMod
   d8158:	0065 6547 5274 6165 6964 676e 0000 0000     e.GetReading....

000d8168 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8170:	54eb 000d 54f1 000d 551b 000d 54ff 000d     .T...T...U...T..
   d8180:	54ed 000d                                   .T..

000d8184 <_ZTVN5spark13EthernetClassE>:
	...
   d818c:	5af3 000d 5ae9 000d 5adf 000d 5ad5 000d     .Z...Z...Z...Z..
   d819c:	5ac9 000d 5abd 000d 5ab1 000d 5aa9 000d     .Z...Z...Z...Z..
   d81ac:	5a9f 000d 5a95 000d 5e59 000d               .Z...Z..Y^..

000d81b8 <_ZTV7TwoWire>:
	...
   d81c0:	5b11 000d 5b5b 000d 5b33 000d 5b13 000d     .[..[[..3[...[..
   d81d0:	5b3b 000d 5b43 000d 5b4b 000d 5b53 000d     ;[..C[..K[..S[..

000d81e0 <_ZTV9IPAddress>:
	...
   d81e8:	5bad 000d 5b9d 000d 5b9f 000d 0066 6e6c     .[...[...[..f.ln
   d81f8:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d8208:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d8218:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d8228:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d8238:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d8248:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d8258:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d8268:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d8278:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d8288:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d8298:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d82a8:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d82b8:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d82c8:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d82d8 <_ZTVN5spark9MeshClassE>:
	...
   d82e0:	5cef 000d 5ce5 000d 5cdb 000d 5cd1 000d     .\...\...\...\..
   d82f0:	5cc5 000d 5cb9 000d 5cad 000d 5ca5 000d     .\...\...\...\..
   d8300:	5c9b 000d 5c91 000d 5e59 000d               .\...\..Y^..

000d830c <_ZTVN5spark12NetworkClassE>:
	...
   d8314:	5df1 000d 5dfb 000d 5e05 000d 5e0f 000d     .]...]...^...^..
   d8324:	5e19 000d 5e25 000d 5e31 000d 5e3d 000d     .^..%^..1^..=^..
   d8334:	5e45 000d 5e4f 000d 5e59 000d               E^..O^..Y^..

000d8340 <_ZTV8SPIClass>:
	...
   d8348:	6011 000d 6013 000d 2b25 3330 3a64 3025     .`...`..%+03d:%0
   d8358:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d8368:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d8378 <_ZTV11USARTSerial>:
	...
   d8380:	629d 000d 62ed 000d 62fb 000d 5f39 000d     .b...b...b..9_..
   d8390:	62b1 000d 62d3 000d 62bf 000d 62e7 000d     .b...b...b...b..
   d83a0:	629f 000d 62a3 000d                         .b...b..

000d83a8 <_ZTV9USBSerial>:
	...
   d83b0:	63a5 000d 63f5 000d 6403 000d 5f39 000d     .c...c...d..9_..
   d83c0:	63e1 000d 63a7 000d 63bd 000d 63ef 000d     .c...c...c...c..
   d83d0:	63d3 000d 63a1 000d                         .c...c..

000d83d8 <_ZTVN5spark9WiFiClassE>:
	...
   d83e0:	6575 000d 656b 000d 6561 000d 6509 000d     ue..ke..ae...e..
   d83f0:	6555 000d 6549 000d 653d 000d 6535 000d     Ue..Ie..=e..5e..
   d8400:	652b 000d 6521 000d 5e59 000d               +e..!e..Y^..

000d840c <_ZTV10WiFiSignal>:
	...
   d8414:	64a9 000d 6513 000d 64ab 000d 65b5 000d     .d...e...d...e..
   d8424:	64b1 000d 6581 000d 64dd 000d               .d...e...d..

000d8430 <_ctype_>:
   d8430:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8440:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8450:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8460:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8470:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8480:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8490:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d84a0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d84b0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8534 <__sf_fake_stdin>:
	...

000d8554 <__sf_fake_stdout>:
	...

000d8574 <__sf_fake_stderr>:
	...

000d8594 <__month_lengths>:
   d8594:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d85a4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d85b4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d85c4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d85d4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d85e4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d85f4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8604:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8614:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d8624:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d8630 <link_const_variable_data_end>:
   d8630:	000d4935 	.word	0x000d4935
   d8634:	000d4bd3 	.word	0x000d4bd3
   d8638:	000d4fb5 	.word	0x000d4fb5
   d863c:	000d5afd 	.word	0x000d5afd
   d8640:	000d5c81 	.word	0x000d5c81
   d8644:	000d5da5 	.word	0x000d5da5
   d8648:	000d5f25 	.word	0x000d5f25
   d864c:	000d5ff5 	.word	0x000d5ff5
   d8650:	000d6179 	.word	0x000d6179
   d8654:	000d6289 	.word	0x000d6289
   d8658:	000d668d 	.word	0x000d668d
   d865c:	000d684d 	.word	0x000d684d
   d8660:	000d68a5 	.word	0x000d68a5
   d8664:	000d6969 	.word	0x000d6969
   d8668:	000d69ed 	.word	0x000d69ed
   d866c:	000d6a71 	.word	0x000d6a71
