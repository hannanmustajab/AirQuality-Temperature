
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/TempLogger/target/TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001880c  2**0
                  CONTENTS
  3 .data         00000220  2003e0c4  000d85c0  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000050c  2003e2e4  2003e2e4  0001e2e4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d87e0  000d87e0  000187e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8808  000d8808  00018808  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000cfc77  00000000  00000000  0001880c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012357  00000000  00000000  000e8483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000167c4  00000000  00000000  000fa7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002288  00000000  00000000  00110f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003820  00000000  00000000  00113226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00035c81  00000000  00000000  00116a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002ba6a  00000000  00000000  0014c6c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e1c5e  00000000  00000000  00178131  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c4f0  00000000  00000000  00259d90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	6c 7e 0d 00                                         l~..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fa59 	bl	d74e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fa5e 	bl	d74fa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e0c4 	.word	0x2003e0c4
   d4048:	000d85c0 	.word	0x000d85c0
   d404c:	2003e2e4 	.word	0x2003e2e4
   d4050:	2003e2e4 	.word	0x2003e2e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fb25 	bl	d66a8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d85b4 	.word	0x000d85b4
   d4080:	000d8574 	.word	0x000d8574

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bba0 	b.w	d47c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa29 	bl	d44e0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bad7 	b.w	d6644 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b98d 	b.w	d53b4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b993 	b.w	d53c4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b991 	b.w	d53c4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d002      	beq.n	d40bc <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40ba:	e004      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40bc:	6001      	str	r1, [r0, #0]
	      break;
   d40be:	e002      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c0:	680b      	ldr	r3, [r1, #0]
   d40c2:	b100      	cbz	r0, d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c6:	2000      	movs	r0, #0
   d40c8:	4770      	bx	lr

000d40ca <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40cc:	6804      	ldr	r4, [r0, #0]
   d40ce:	4668      	mov	r0, sp
   d40d0:	f001 ff71 	bl	d5fb6 <_ZN6StringC1EOS_>
   d40d4:	4668      	mov	r0, sp
   d40d6:	47a0      	blx	r4
   d40d8:	4604      	mov	r4, r0
   d40da:	4668      	mov	r0, sp
   d40dc:	f001 ff7b 	bl	d5fd6 <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e0:	4620      	mov	r0, r4
   d40e2:	b004      	add	sp, #16
   d40e4:	bd10      	pop	{r4, pc}

000d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40ec:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ee:	f88d 3000 	strb.w	r3, [sp]
   d40f2:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f4:	4605      	mov	r5, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f6:	f001 fb1b 	bl	d5730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
   d40fa:	4628      	mov	r0, r5
   d40fc:	b003      	add	sp, #12
   d40fe:	bd30      	pop	{r4, r5, pc}

000d4100 <_Z20PublishDelayFunctionv>:
}

// Function to create a delay in the publish time
bool PublishDelayFunction()

{
   d4100:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= updateRate)
   d4102:	4c08      	ldr	r4, [pc, #32]	; (d4124 <_Z20PublishDelayFunctionv+0x24>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4104:	f000 ff4a 	bl	d4f9c <HAL_Timer_Get_Milli_Seconds>
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	1ac0      	subs	r0, r0, r3
   d410c:	4b06      	ldr	r3, [pc, #24]	; (d4128 <_Z20PublishDelayFunctionv+0x28>)
   d410e:	681b      	ldr	r3, [r3, #0]
   d4110:	4298      	cmp	r0, r3
   d4112:	d904      	bls.n	d411e <_Z20PublishDelayFunctionv+0x1e>
   d4114:	f000 ff42 	bl	d4f9c <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else
  {
    tstamp = millis();
   d4118:	6020      	str	r0, [r4, #0]
   d411a:	2001      	movs	r0, #1
   d411c:	bd10      	pop	{r4, pc}
bool PublishDelayFunction()

{
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= updateRate)
    return 0;
   d411e:	2000      	movs	r0, #0
  else
  {
    tstamp = millis();
    return 1;
  }
}
   d4120:	bd10      	pop	{r4, pc}
   d4122:	bf00      	nop
   d4124:	2003e304 	.word	0x2003e304
   d4128:	2003e228 	.word	0x2003e228

000d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d412c:	b508      	push	{r3, lr}
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d412e:	f7ff ffe7 	bl	d4100 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4132:	b118      	cbz	r0, d413c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4138:	f7ff bfe2 	b.w	d4100 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d413c:	f001 f8aa 	bl	d5294 <spark_process>
   d4140:	e7f5      	b.n	d412e <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35+0x2>
	...

000d4144 <_Z17getSignalStrengthv>:
  }
}

// Functions for mobile app reporting.
void getSignalStrength()
{
   d4144:	b500      	push	{lr}
   d4146:	b08d      	sub	sp, #52	; 0x34
  WiFiSignal sig = WiFi.RSSI();
   d4148:	490a      	ldr	r1, [pc, #40]	; (d4174 <_Z17getSignalStrengthv+0x30>)
   d414a:	a803      	add	r0, sp, #12
   d414c:	f002 fa20 	bl	d6590 <_ZN5spark9WiFiClass4RSSIEv>
  float rssi = sig.getStrength();
   d4150:	a803      	add	r0, sp, #12
   d4152:	f002 f9e3 	bl	d651c <_ZNK10WiFiSignal11getStrengthEv>
  snprintf(signalString, sizeof(signalString), "%.0f%%", rssi);
   d4156:	ee10 0a10 	vmov	r0, s0
   d415a:	f002 fe03 	bl	d6d64 <__aeabi_f2d>
   d415e:	4a06      	ldr	r2, [pc, #24]	; (d4178 <_Z17getSignalStrengthv+0x34>)
   d4160:	e9cd 0100 	strd	r0, r1, [sp]
   d4164:	2110      	movs	r1, #16
   d4166:	4805      	ldr	r0, [pc, #20]	; (d417c <_Z17getSignalStrengthv+0x38>)
   d4168:	f001 f944 	bl	d53f4 <snprintf>
}
   d416c:	b00d      	add	sp, #52	; 0x34
   d416e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4172:	bf00      	nop
   d4174:	2003e6e0 	.word	0x2003e6e0
   d4178:	000d7e86 	.word	0x000d7e86
   d417c:	2003e344 	.word	0x2003e344

000d4180 <_Z16getBatteryChargev>:

void getBatteryCharge()
{
   d4180:	b507      	push	{r0, r1, r2, lr}
  voltage = analogRead(BATT) * 0.0011224;
   d4182:	2021      	movs	r0, #33	; 0x21
   d4184:	f002 fadf 	bl	d6746 <analogRead>
   d4188:	f002 fdda 	bl	d6d40 <__aeabi_i2d>
   d418c:	a30d      	add	r3, pc, #52	; (adr r3, d41c4 <_Z16getBatteryChargev+0x44>)
   d418e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4192:	f002 fe3b 	bl	d6e0c <__aeabi_dmul>
   d4196:	f003 f84b 	bl	d7230 <__aeabi_d2f>
   d419a:	4b07      	ldr	r3, [pc, #28]	; (d41b8 <_Z16getBatteryChargev+0x38>)
   d419c:	6018      	str	r0, [r3, #0]
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d419e:	f002 fde1 	bl	d6d64 <__aeabi_f2d>
   d41a2:	4a06      	ldr	r2, [pc, #24]	; (d41bc <_Z16getBatteryChargev+0x3c>)
   d41a4:	e9cd 0100 	strd	r0, r1, [sp]
   d41a8:	2110      	movs	r1, #16
   d41aa:	4805      	ldr	r0, [pc, #20]	; (d41c0 <_Z16getBatteryChargev+0x40>)
   d41ac:	f001 f922 	bl	d53f4 <snprintf>
}
   d41b0:	b003      	add	sp, #12
   d41b2:	f85d fb04 	ldr.w	pc, [sp], #4
   d41b6:	bf00      	nop
   d41b8:	2003e35c 	.word	0x2003e35c
   d41bc:	000d7e8d 	.word	0x000d7e8d
   d41c0:	2003e360 	.word	0x2003e360
   d41c4:	d2c10294 	.word	0xd2c10294
   d41c8:	3f5263af 	.word	0x3f5263af

000d41cc <_Z14getTemperaturev>:
    return 0; // Less than 1 degree difference detected
}

// Function to get temperature value from DS18B20.
bool getTemperature()
{
   d41cc:	b513      	push	{r0, r1, r4, lr}
  static float lastTemperatureInC = 0;
  if (sensor.read())
   d41ce:	4813      	ldr	r0, [pc, #76]	; (d421c <_Z14getTemperaturev+0x50>)
   d41d0:	4c13      	ldr	r4, [pc, #76]	; (d4220 <_Z14getTemperaturev+0x54>)
   d41d2:	f000 fc8b 	bl	d4aec <_ZN4DS184readEv>
   d41d6:	b178      	cbz	r0, d41f8 <_Z14getTemperaturev+0x2c>
  {
    temperatureInC = sensor.celsius();
   d41d8:	4810      	ldr	r0, [pc, #64]	; (d421c <_Z14getTemperaturev+0x50>)
   d41da:	f000 fcab 	bl	d4b34 <_ZN4DS187celsiusEv>
   d41de:	ee10 0a10 	vmov	r0, s0
   d41e2:	ed84 0a00 	vstr	s0, [r4]
    snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", temperatureInC);
   d41e6:	f002 fdbd 	bl	d6d64 <__aeabi_f2d>
   d41ea:	4a0e      	ldr	r2, [pc, #56]	; (d4224 <_Z14getTemperaturev+0x58>)
   d41ec:	e9cd 0100 	strd	r0, r1, [sp]
   d41f0:	2110      	movs	r1, #16
   d41f2:	480d      	ldr	r0, [pc, #52]	; (d4228 <_Z14getTemperaturev+0x5c>)
   d41f4:	f001 f8fe 	bl	d53f4 <snprintf>
  }
  if (abs(temperatureInC - lastTemperatureInC) >= 1)
   d41f8:	4b0c      	ldr	r3, [pc, #48]	; (d422c <_Z14getTemperaturev+0x60>)
   d41fa:	ed94 7a00 	vldr	s14, [r4]
   d41fe:	edd3 7a00 	vldr	s15, [r3]
   d4202:	ee77 7a67 	vsub.f32	s15, s14, s15
   d4206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d420a:	ee17 0a90 	vmov	r0, s15
   d420e:	b110      	cbz	r0, d4216 <_Z14getTemperaturev+0x4a>
  {
    lastTemperatureInC = temperatureInC;
   d4210:	ed83 7a00 	vstr	s14, [r3]
    return 1;
   d4214:	2001      	movs	r0, #1
  }
  else
    return 0;
}
   d4216:	b002      	add	sp, #8
   d4218:	bd10      	pop	{r4, pc}
   d421a:	bf00      	nop
   d421c:	2003e318 	.word	0x2003e318
   d4220:	2003e300 	.word	0x2003e300
   d4224:	000d7e95 	.word	0x000d7e95
   d4228:	2003e2e8 	.word	0x2003e2e8
   d422c:	2003e2fc 	.word	0x2003e2fc

000d4230 <_Z15getMeasurementsv>:
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}

bool getMeasurements()
{
   d4230:	b508      	push	{r3, lr}
  getSignalStrength(); // Get Signal Strength
   d4232:	f7ff ff87 	bl	d4144 <_Z17getSignalStrengthv>
  getBatteryCharge();  // Get Battery Charge Percentage
   d4236:	f7ff ffa3 	bl	d4180 <_Z16getBatteryChargev>
  if (getTemperature())
    return 1; // Read Temperature from Sensor
  else
    return 0; // Less than 1 degree difference detected
}
   d423a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

bool getMeasurements()
{
  getSignalStrength(); // Get Signal Strength
  getBatteryCharge();  // Get Battery Charge Percentage
  if (getTemperature())
   d423e:	f7ff bfc5 	b.w	d41cc <_Z14getTemperaturev>

000d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4242:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4244:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4246:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4248:	b17c      	cbz	r4, d426a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d424a:	6863      	ldr	r3, [r4, #4]
   d424c:	3b01      	subs	r3, #1
   d424e:	6063      	str	r3, [r4, #4]
   d4250:	b95b      	cbnz	r3, d426a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4252:	6823      	ldr	r3, [r4, #0]
   d4254:	4620      	mov	r0, r4
   d4256:	689b      	ldr	r3, [r3, #8]
   d4258:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d425a:	68a3      	ldr	r3, [r4, #8]
   d425c:	3b01      	subs	r3, #1
   d425e:	60a3      	str	r3, [r4, #8]
   d4260:	b91b      	cbnz	r3, d426a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4262:	6823      	ldr	r3, [r4, #0]
   d4264:	4620      	mov	r0, r4
   d4266:	68db      	ldr	r3, [r3, #12]
   d4268:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d426a:	4628      	mov	r0, r5
   d426c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4270 <_Z13forcedReading6String>:
  oldState = state;
  Particle.publish("State", stateTransitionString, PRIVATE);
}

bool forcedReading(String Command)
{
   d4270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4272:	490e      	ldr	r1, [pc, #56]	; (d42ac <_Z13forcedReading6String+0x3c>)
   d4274:	f001 ff09 	bl	d608a <_ZNK6String6equalsEPKc>

  if (Command == "1")
   d4278:	b1b0      	cbz	r0, d42a8 <_Z13forcedReading6String+0x38>
  {
    state = REPORTING_STATE;
   d427a:	4b0d      	ldr	r3, [pc, #52]	; (d42b0 <_Z13forcedReading6String+0x40>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d427c:	490d      	ldr	r1, [pc, #52]	; (d42b4 <_Z13forcedReading6String+0x44>)
   d427e:	2203      	movs	r2, #3
   d4280:	701a      	strb	r2, [r3, #0]
    forcedReadingRate = 5;
   d4282:	4b0d      	ldr	r3, [pc, #52]	; (d42b8 <_Z13forcedReading6String+0x48>)
   d4284:	2205      	movs	r2, #5
   d4286:	601a      	str	r2, [r3, #0]
    forcedMode = true;
   d4288:	4b0c      	ldr	r3, [pc, #48]	; (d42bc <_Z13forcedReading6String+0x4c>)
   d428a:	2401      	movs	r4, #1
   d428c:	701c      	strb	r4, [r3, #0]
   d428e:	4b0c      	ldr	r3, [pc, #48]	; (d42c0 <_Z13forcedReading6String+0x50>)
   d4290:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4292:	781b      	ldrb	r3, [r3, #0]
   d4294:	f88d 2000 	strb.w	r2, [sp]
   d4298:	a802      	add	r0, sp, #8
   d429a:	4a0a      	ldr	r2, [pc, #40]	; (d42c4 <_Z13forcedReading6String+0x54>)
   d429c:	f7ff ff23 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42a0:	a803      	add	r0, sp, #12
   d42a2:	f7ff ffce 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("STATE", "Getting Value, Next Reading in 15 Mins.");
   d42a6:	4620      	mov	r0, r4
    return 1;
  }
  else
    return 0;
   d42a8:	b004      	add	sp, #16
   d42aa:	bd10      	pop	{r4, pc}
   d42ac:	000d818f 	.word	0x000d818f
   d42b0:	2003e308 	.word	0x2003e308
   d42b4:	000d7ecd 	.word	0x000d7ecd
   d42b8:	2003e0c4 	.word	0x2003e0c4
   d42bc:	2003e371 	.word	0x2003e371
   d42c0:	2003e2f8 	.word	0x2003e2f8
   d42c4:	000d7ea5 	.word	0x000d7ea5

000d42c8 <_Z14SetVerboseMode6String>:
    return 0;
}

// Function to Toggle VerboseMode.
bool SetVerboseMode(String command)
{
   d42c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d42ca:	4929      	ldr	r1, [pc, #164]	; (d4370 <_Z14SetVerboseMode6String+0xa8>)
   d42cc:	4605      	mov	r5, r0
   d42ce:	f001 fedc 	bl	d608a <_ZNK6String6equalsEPKc>

  if (command == "1" && verboseMode == false)
   d42d2:	b110      	cbz	r0, d42da <_Z14SetVerboseMode6String+0x12>
   d42d4:	4b27      	ldr	r3, [pc, #156]	; (d4374 <_Z14SetVerboseMode6String+0xac>)
   d42d6:	781e      	ldrb	r6, [r3, #0]
   d42d8:	b186      	cbz	r6, d42fc <_Z14SetVerboseMode6String+0x34>
   d42da:	4925      	ldr	r1, [pc, #148]	; (d4370 <_Z14SetVerboseMode6String+0xa8>)
   d42dc:	4628      	mov	r0, r5
   d42de:	f001 fed4 	bl	d608a <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
    return 1;
  }

  if (command == "1" && verboseMode == true)
   d42e2:	b1a8      	cbz	r0, d4310 <_Z14SetVerboseMode6String+0x48>
   d42e4:	4b23      	ldr	r3, [pc, #140]	; (d4374 <_Z14SetVerboseMode6String+0xac>)
   d42e6:	781b      	ldrb	r3, [r3, #0]
   d42e8:	b193      	cbz	r3, d4310 <_Z14SetVerboseMode6String+0x48>
  {
    waitUntil(PublishDelayFunction);
   d42ea:	f7ff ff1f 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d42ee:	4b22      	ldr	r3, [pc, #136]	; (d4378 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
   d42f0:	4a22      	ldr	r2, [pc, #136]	; (d437c <_Z14SetVerboseMode6String+0xb4>)
   d42f2:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d42f4:	2400      	movs	r4, #0
   d42f6:	f88d 4000 	strb.w	r4, [sp]
   d42fa:	e02e      	b.n	d435a <_Z14SetVerboseMode6String+0x92>
bool SetVerboseMode(String command)
{

  if (command == "1" && verboseMode == false)
  {
    verboseMode = true;
   d42fc:	2401      	movs	r4, #1
   d42fe:	701c      	strb	r4, [r3, #0]
    waitUntil(PublishDelayFunction);
   d4300:	f7ff ff14 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d4304:	4b1c      	ldr	r3, [pc, #112]	; (d4378 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
   d4306:	4a1e      	ldr	r2, [pc, #120]	; (d4380 <_Z14SetVerboseMode6String+0xb8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4308:	781b      	ldrb	r3, [r3, #0]
   d430a:	f88d 6000 	strb.w	r6, [sp]
   d430e:	e024      	b.n	d435a <_Z14SetVerboseMode6String+0x92>
   d4310:	491c      	ldr	r1, [pc, #112]	; (d4384 <_Z14SetVerboseMode6String+0xbc>)
   d4312:	4628      	mov	r0, r5
   d4314:	f001 feb9 	bl	d608a <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
    return 0;
  }

  if (command == "0" && verboseMode == true)
   d4318:	b160      	cbz	r0, d4334 <_Z14SetVerboseMode6String+0x6c>
   d431a:	4b16      	ldr	r3, [pc, #88]	; (d4374 <_Z14SetVerboseMode6String+0xac>)
   d431c:	781c      	ldrb	r4, [r3, #0]
   d431e:	b14c      	cbz	r4, d4334 <_Z14SetVerboseMode6String+0x6c>
  {
    verboseMode = false;
   d4320:	2500      	movs	r5, #0
   d4322:	701d      	strb	r5, [r3, #0]
    waitUntil(PublishDelayFunction);
   d4324:	f7ff ff02 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d4328:	4b13      	ldr	r3, [pc, #76]	; (d4378 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Stopped.", PRIVATE);
   d432a:	4a17      	ldr	r2, [pc, #92]	; (d4388 <_Z14SetVerboseMode6String+0xc0>)
   d432c:	781b      	ldrb	r3, [r3, #0]
   d432e:	f88d 5000 	strb.w	r5, [sp]
   d4332:	e012      	b.n	d435a <_Z14SetVerboseMode6String+0x92>
   d4334:	4913      	ldr	r1, [pc, #76]	; (d4384 <_Z14SetVerboseMode6String+0xbc>)
   d4336:	4628      	mov	r0, r5
   d4338:	f001 fea7 	bl	d608a <_ZNK6String6equalsEPKc>
    return 1;
  }

  if (command == "0" && verboseMode == false)
   d433c:	b120      	cbz	r0, d4348 <_Z14SetVerboseMode6String+0x80>
   d433e:	4b0d      	ldr	r3, [pc, #52]	; (d4374 <_Z14SetVerboseMode6String+0xac>)
   d4340:	781c      	ldrb	r4, [r3, #0]
   d4342:	b11c      	cbz	r4, d434c <_Z14SetVerboseMode6String+0x84>
    return 0;
  }

  else
  {
    return 0;
   d4344:	2400      	movs	r4, #0
   d4346:	e00f      	b.n	d4368 <_Z14SetVerboseMode6String+0xa0>
   d4348:	4604      	mov	r4, r0
   d434a:	e00d      	b.n	d4368 <_Z14SetVerboseMode6String+0xa0>
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d434c:	f7ff feee 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d4350:	4b09      	ldr	r3, [pc, #36]	; (d4378 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
   d4352:	4a0e      	ldr	r2, [pc, #56]	; (d438c <_Z14SetVerboseMode6String+0xc4>)
   d4354:	781b      	ldrb	r3, [r3, #0]
   d4356:	f88d 4000 	strb.w	r4, [sp]
   d435a:	a802      	add	r0, sp, #8
   d435c:	490c      	ldr	r1, [pc, #48]	; (d4390 <_Z14SetVerboseMode6String+0xc8>)
   d435e:	f7ff fec2 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d4362:	a803      	add	r0, sp, #12
   d4364:	f7ff ff6d 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  else
  {
    return 0;
  }
}
   d4368:	4620      	mov	r0, r4
   d436a:	b004      	add	sp, #16
   d436c:	bd70      	pop	{r4, r5, r6, pc}
   d436e:	bf00      	nop
   d4370:	000d818f 	.word	0x000d818f
   d4374:	2003e355 	.word	0x2003e355
   d4378:	2003e370 	.word	0x2003e370
   d437c:	000d7ee9 	.word	0x000d7ee9
   d4380:	000d7ed3 	.word	0x000d7ed3
   d4384:	000d7f02 	.word	0x000d7f02
   d4388:	000d7f04 	.word	0x000d7f04
   d438c:	000d7f1a 	.word	0x000d7f1a
   d4390:	000d8099 	.word	0x000d8099

000d4394 <_Z11sendUBIDotsv>:

void sendUBIDots()
{
   d4394:	b500      	push	{lr}
  char data[256];
  snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", temperatureInC, voltage);
   d4396:	4b18      	ldr	r3, [pc, #96]	; (d43f8 <_Z11sendUBIDotsv+0x64>)
    return 0;
  }
}

void sendUBIDots()
{
   d4398:	b0c7      	sub	sp, #284	; 0x11c
  char data[256];
  snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", temperatureInC, voltage);
   d439a:	6818      	ldr	r0, [r3, #0]
   d439c:	f002 fce2 	bl	d6d64 <__aeabi_f2d>
   d43a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43a4:	4b15      	ldr	r3, [pc, #84]	; (d43fc <_Z11sendUBIDotsv+0x68>)
   d43a6:	6818      	ldr	r0, [r3, #0]
   d43a8:	f002 fcdc 	bl	d6d64 <__aeabi_f2d>
   d43ac:	4a14      	ldr	r2, [pc, #80]	; (d4400 <_Z11sendUBIDotsv+0x6c>)
   d43ae:	e9cd 0100 	strd	r0, r1, [sp]
   d43b2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d43b6:	a806      	add	r0, sp, #24
   d43b8:	f001 f81c 	bl	d53f4 <snprintf>
   d43bc:	4b11      	ldr	r3, [pc, #68]	; (d4404 <_Z11sendUBIDotsv+0x70>)
  Particle.publish("Air-Quality-Hook", data, PRIVATE);
   d43be:	4912      	ldr	r1, [pc, #72]	; (d4408 <_Z11sendUBIDotsv+0x74>)
   d43c0:	781b      	ldrb	r3, [r3, #0]
   d43c2:	2200      	movs	r2, #0
   d43c4:	f88d 2000 	strb.w	r2, [sp]
   d43c8:	a804      	add	r0, sp, #16
   d43ca:	aa06      	add	r2, sp, #24
   d43cc:	f7ff fe8b 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d43d0:	a805      	add	r0, sp, #20
   d43d2:	f7ff ff36 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  publishTime = Time.minute();
   d43d6:	f001 ff01 	bl	d61dc <_ZN9TimeClass6minuteEv>
  publishTimeHour = Time.hour();
   d43da:	f001 fef5 	bl	d61c8 <_ZN9TimeClass4hourEv>
   d43de:	4b0b      	ldr	r3, [pc, #44]	; (d440c <_Z11sendUBIDotsv+0x78>)
   d43e0:	6018      	str	r0, [r3, #0]
   d43e2:	f000 fddb 	bl	d4f9c <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d43e6:	4b0a      	ldr	r3, [pc, #40]	; (d4410 <_Z11sendUBIDotsv+0x7c>)
   d43e8:	6018      	str	r0, [r3, #0]
  inTransit = true;
   d43ea:	4b0a      	ldr	r3, [pc, #40]	; (d4414 <_Z11sendUBIDotsv+0x80>)
   d43ec:	2201      	movs	r2, #1
   d43ee:	701a      	strb	r2, [r3, #0]
}
   d43f0:	b047      	add	sp, #284	; 0x11c
   d43f2:	f85d fb04 	ldr.w	pc, [sp], #4
   d43f6:	bf00      	nop
   d43f8:	2003e35c 	.word	0x2003e35c
   d43fc:	2003e300 	.word	0x2003e300
   d4400:	000d7f34 	.word	0x000d7f34
   d4404:	2003e370 	.word	0x2003e370
   d4408:	000d7f5b 	.word	0x000d7f5b
   d440c:	2003e310 	.word	0x2003e310
   d4410:	2003e358 	.word	0x2003e358
   d4414:	2003e309 	.word	0x2003e309

000d4418 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d4418:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data)
   d441a:	460c      	mov	r4, r1
   d441c:	4e12      	ldr	r6, [pc, #72]	; (d4468 <_Z14UbidotsHandlerPKcS0_+0x50>)
   d441e:	b921      	cbnz	r1, d442a <_Z14UbidotsHandlerPKcS0_+0x12>
   d4420:	7833      	ldrb	r3, [r6, #0]
  { // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4422:	f88d 1000 	strb.w	r1, [sp]
   d4426:	4a11      	ldr	r2, [pc, #68]	; (d446c <_Z14UbidotsHandlerPKcS0_+0x54>)
   d4428:	e015      	b.n	d4456 <_Z14UbidotsHandlerPKcS0_+0x3e>
    return;
  }
  int responseCode = atoi(data); // Response is only a single number thanks to Template
   d442a:	4608      	mov	r0, r1
   d442c:	f002 ff50 	bl	d72d0 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4430:	38c8      	subs	r0, #200	; 0xc8
   d4432:	2500      	movs	r5, #0
   d4434:	2801      	cmp	r0, #1
   d4436:	7833      	ldrb	r3, [r6, #0]
  {
    Particle.publish("State", "Response Received", PRIVATE);
   d4438:	f88d 5000 	strb.w	r5, [sp]
  { // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
  }
  int responseCode = atoi(data); // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d443c:	d80a      	bhi.n	d4454 <_Z14UbidotsHandlerPKcS0_+0x3c>
  {
    Particle.publish("State", "Response Received", PRIVATE);
   d443e:	4a0c      	ldr	r2, [pc, #48]	; (d4470 <_Z14UbidotsHandlerPKcS0_+0x58>)
   d4440:	490c      	ldr	r1, [pc, #48]	; (d4474 <_Z14UbidotsHandlerPKcS0_+0x5c>)
   d4442:	a802      	add	r0, sp, #8
   d4444:	f7ff fe4f 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d4448:	a803      	add	r0, sp, #12
   d444a:	f7ff fefa 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    inTransit = false; // Data has been received
   d444e:	4b0a      	ldr	r3, [pc, #40]	; (d4478 <_Z14UbidotsHandlerPKcS0_+0x60>)
   d4450:	701d      	strb	r5, [r3, #0]
   d4452:	e007      	b.n	d4464 <_Z14UbidotsHandlerPKcS0_+0x4c>
  }
  else
    Particle.publish("Ubidots Hook", data, PRIVATE); // Publish the response code
   d4454:	4622      	mov	r2, r4
   d4456:	a802      	add	r0, sp, #8
   d4458:	4908      	ldr	r1, [pc, #32]	; (d447c <_Z14UbidotsHandlerPKcS0_+0x64>)
   d445a:	f7ff fe44 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d445e:	a803      	add	r0, sp, #12
   d4460:	f7ff feef 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4464:	b004      	add	sp, #16
   d4466:	bd70      	pop	{r4, r5, r6, pc}
   d4468:	2003e370 	.word	0x2003e370
   d446c:	000d7f6c 	.word	0x000d7f6c
   d4470:	000d7f81 	.word	0x000d7f81
   d4474:	000d7f93 	.word	0x000d7f93
   d4478:	2003e309 	.word	0x2003e309
   d447c:	000d7f74 	.word	0x000d7f74

000d4480 <_Z15transitionStatev>:

void transitionState(void)
{                                 // This function publishes change of state.
   d4480:	b530      	push	{r4, r5, lr}
  char stateTransitionString[64]; // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d4482:	4d11      	ldr	r5, [pc, #68]	; (d44c8 <_Z15transitionStatev+0x48>)
   d4484:	4c11      	ldr	r4, [pc, #68]	; (d44cc <_Z15transitionStatev+0x4c>)
   d4486:	4912      	ldr	r1, [pc, #72]	; (d44d0 <_Z15transitionStatev+0x50>)
   d4488:	782a      	ldrb	r2, [r5, #0]
   d448a:	7820      	ldrb	r0, [r4, #0]
  else
    Particle.publish("Ubidots Hook", data, PRIVATE); // Publish the response code
}

void transitionState(void)
{                                 // This function publishes change of state.
   d448c:	b095      	sub	sp, #84	; 0x54
  char stateTransitionString[64]; // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d448e:	232c      	movs	r3, #44	; 0x2c
   d4490:	fb03 1202 	mla	r2, r3, r2, r1
   d4494:	9200      	str	r2, [sp, #0]
   d4496:	fb03 1300 	mla	r3, r3, r0, r1
   d449a:	4a0e      	ldr	r2, [pc, #56]	; (d44d4 <_Z15transitionStatev+0x54>)
   d449c:	2140      	movs	r1, #64	; 0x40
   d449e:	a804      	add	r0, sp, #16
   d44a0:	f000 ffa8 	bl	d53f4 <snprintf>
  oldState = state;
   d44a4:	782b      	ldrb	r3, [r5, #0]
   d44a6:	7023      	strb	r3, [r4, #0]
   d44a8:	4b0b      	ldr	r3, [pc, #44]	; (d44d8 <_Z15transitionStatev+0x58>)
  Particle.publish("State", stateTransitionString, PRIVATE);
   d44aa:	490c      	ldr	r1, [pc, #48]	; (d44dc <_Z15transitionStatev+0x5c>)
   d44ac:	781b      	ldrb	r3, [r3, #0]
   d44ae:	2200      	movs	r2, #0
   d44b0:	f88d 2000 	strb.w	r2, [sp]
   d44b4:	a802      	add	r0, sp, #8
   d44b6:	aa04      	add	r2, sp, #16
   d44b8:	f7ff fe15 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d44bc:	a803      	add	r0, sp, #12
   d44be:	f7ff fec0 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d44c2:	b015      	add	sp, #84	; 0x54
   d44c4:	bd30      	pop	{r4, r5, pc}
   d44c6:	bf00      	nop
   d44c8:	2003e308 	.word	0x2003e308
   d44cc:	2003e354 	.word	0x2003e354
   d44d0:	2003e0c8 	.word	0x2003e0c8
   d44d4:	000d7f99 	.word	0x000d7f99
   d44d8:	2003e370 	.word	0x2003e370
   d44dc:	000d7f93 	.word	0x000d7f93

000d44e0 <loop>:

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
}

void loop()
{
   d44e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  switch (state) // In the main loop, all code execution must take place in a defined state
   d44e2:	4c82      	ldr	r4, [pc, #520]	; (d46ec <loop+0x20c>)
   d44e4:	7823      	ldrb	r3, [r4, #0]
   d44e6:	3b01      	subs	r3, #1

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
}

void loop()
{
   d44e8:	b085      	sub	sp, #20

  switch (state) // In the main loop, all code execution must take place in a defined state
   d44ea:	2b04      	cmp	r3, #4
   d44ec:	f200 80fc 	bhi.w	d46e8 <loop+0x208>
   d44f0:	e8df f013 	tbh	[pc, r3, lsl #1]
   d44f4:	001b0005 	.word	0x001b0005
   d44f8:	00920061 	.word	0x00920061
   d44fc:	00c4      	.short	0x00c4
  {
  case IDLE_STATE: // IDLE State.
    if (verboseMode && oldState != state)
   d44fe:	4b7c      	ldr	r3, [pc, #496]	; (d46f0 <loop+0x210>)
   d4500:	781b      	ldrb	r3, [r3, #0]
   d4502:	b12b      	cbz	r3, d4510 <loop+0x30>
   d4504:	4b7b      	ldr	r3, [pc, #492]	; (d46f4 <loop+0x214>)
   d4506:	781b      	ldrb	r3, [r3, #0]
   d4508:	2b01      	cmp	r3, #1
   d450a:	d001      	beq.n	d4510 <loop+0x30>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d450c:	f7ff ffb8 	bl	d4480 <_Z15transitionStatev>
    static unsigned long TimePassed = 0;
    if (Time.minute() - TimePassed >= refreshRate)
   d4510:	4d79      	ldr	r5, [pc, #484]	; (d46f8 <loop+0x218>)
   d4512:	f001 fe63 	bl	d61dc <_ZN9TimeClass6minuteEv>
   d4516:	682b      	ldr	r3, [r5, #0]
   d4518:	4298      	cmp	r0, r3
   d451a:	f000 80e5 	beq.w	d46e8 <loop+0x208>
    {
      state = MEASURING_STATE;
   d451e:	2302      	movs	r3, #2
   d4520:	7023      	strb	r3, [r4, #0]
      TimePassed = Time.minute();
   d4522:	f001 fe5b 	bl	d61dc <_ZN9TimeClass6minuteEv>
   d4526:	6028      	str	r0, [r5, #0]
   d4528:	e0de      	b.n	d46e8 <loop+0x208>
    break;

  case MEASURING_STATE:

    static unsigned long ForcedValueTimePassed = 0;
    if (verboseMode && oldState != state)
   d452a:	4d71      	ldr	r5, [pc, #452]	; (d46f0 <loop+0x210>)
   d452c:	782b      	ldrb	r3, [r5, #0]
   d452e:	b12b      	cbz	r3, d453c <loop+0x5c>
   d4530:	4b70      	ldr	r3, [pc, #448]	; (d46f4 <loop+0x214>)
   d4532:	781b      	ldrb	r3, [r3, #0]
   d4534:	2b02      	cmp	r3, #2
   d4536:	d001      	beq.n	d453c <loop+0x5c>
      transitionState();
   d4538:	f7ff ffa2 	bl	d4480 <_Z15transitionStatev>
    // If verboseMode is on and state is changed, Then publish the state transition.
    // Measuring State.
    if (getMeasurements())
   d453c:	f7ff fe78 	bl	d4230 <_Z15getMeasurementsv>
   d4540:	4607      	mov	r7, r0
   d4542:	b170      	cbz	r0, d4562 <loop+0x82>
    { // Get Measurements and Move to Reporting State if there is a change
      state = REPORTING_STATE;
   d4544:	2303      	movs	r3, #3
   d4546:	7023      	strb	r3, [r4, #0]
      if (verboseMode)
   d4548:	782b      	ldrb	r3, [r5, #0]
   d454a:	2b00      	cmp	r3, #0
   d454c:	f000 80cc 	beq.w	d46e8 <loop+0x208>
      {
        waitUntil(PublishDelayFunction);
   d4550:	f7ff fdec 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d4554:	4b69      	ldr	r3, [pc, #420]	; (d46fc <loop+0x21c>)
        Particle.publish("State", "Change detected - Reporting", PRIVATE);
   d4556:	2200      	movs	r2, #0
   d4558:	781b      	ldrb	r3, [r3, #0]
   d455a:	f88d 2000 	strb.w	r2, [sp]
   d455e:	4a68      	ldr	r2, [pc, #416]	; (d4700 <loop+0x220>)
   d4560:	e012      	b.n	d4588 <loop+0xa8>
      }
    }

    else if (Time.hour() != publishTimeHour) // Check if 60 minutes or 1 hr has passed.
   d4562:	f001 fe31 	bl	d61c8 <_ZN9TimeClass4hourEv>
   d4566:	4b67      	ldr	r3, [pc, #412]	; (d4704 <loop+0x224>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	4298      	cmp	r0, r3
   d456c:	d014      	beq.n	d4598 <loop+0xb8>
    {
      state = REPORTING_STATE;
   d456e:	2303      	movs	r3, #3
   d4570:	7023      	strb	r3, [r4, #0]
      if (verboseMode)
   d4572:	782b      	ldrb	r3, [r5, #0]
   d4574:	2b00      	cmp	r3, #0
   d4576:	f000 80b7 	beq.w	d46e8 <loop+0x208>
      {
        waitUntil(PublishDelayFunction);
   d457a:	f7ff fdd7 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d457e:	4b5f      	ldr	r3, [pc, #380]	; (d46fc <loop+0x21c>)
        Particle.publish("State", "Time Passed - Reporting", PRIVATE); //Tells us that One Hour has passed.
   d4580:	4a61      	ldr	r2, [pc, #388]	; (d4708 <loop+0x228>)
   d4582:	781b      	ldrb	r3, [r3, #0]
   d4584:	f88d 7000 	strb.w	r7, [sp]
   d4588:	4960      	ldr	r1, [pc, #384]	; (d470c <loop+0x22c>)
   d458a:	a802      	add	r0, sp, #8
   d458c:	f7ff fdab 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d4590:	a803      	add	r0, sp, #12
   d4592:	f7ff fe56 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4596:	e0a7      	b.n	d46e8 <loop+0x208>
      }
    }

    // Forced Reading
    /* When the forced reading function is called,  */
    else if ((forcedMode) && (Time.minute() - ForcedValueTimePassed > forcedReadingRate))
   d4598:	4b5d      	ldr	r3, [pc, #372]	; (d4710 <loop+0x230>)
   d459a:	781b      	ldrb	r3, [r3, #0]
   d459c:	2b00      	cmp	r3, #0
   d459e:	f000 8096 	beq.w	d46ce <loop+0x1ee>
   d45a2:	4e5c      	ldr	r6, [pc, #368]	; (d4714 <loop+0x234>)
   d45a4:	f001 fe1a 	bl	d61dc <_ZN9TimeClass6minuteEv>
   d45a8:	6833      	ldr	r3, [r6, #0]
   d45aa:	1ac0      	subs	r0, r0, r3
   d45ac:	4b5a      	ldr	r3, [pc, #360]	; (d4718 <loop+0x238>)
   d45ae:	681b      	ldr	r3, [r3, #0]
   d45b0:	4298      	cmp	r0, r3
   d45b2:	d87c      	bhi.n	d46ae <loop+0x1ce>
   d45b4:	e08b      	b.n	d46ce <loop+0x1ee>
      }
    }
    break;

  case REPORTING_STATE:
    if (verboseMode && oldState != state)
   d45b6:	4b4e      	ldr	r3, [pc, #312]	; (d46f0 <loop+0x210>)
   d45b8:	781a      	ldrb	r2, [r3, #0]
   d45ba:	461d      	mov	r5, r3
   d45bc:	b12a      	cbz	r2, d45ca <loop+0xea>
   d45be:	4b4d      	ldr	r3, [pc, #308]	; (d46f4 <loop+0x214>)
   d45c0:	781b      	ldrb	r3, [r3, #0]
   d45c2:	2b03      	cmp	r3, #3
   d45c4:	d001      	beq.n	d45ca <loop+0xea>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d45c6:	f7ff ff5b 	bl	d4480 <_Z15transitionStatev>

    if (Time.hour() == 12)
   d45ca:	f001 fdfd 	bl	d61c8 <_ZN9TimeClass4hourEv>
   d45ce:	280c      	cmp	r0, #12
   d45d0:	d102      	bne.n	d45d8 <loop+0xf8>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d45d2:	2000      	movs	r0, #0
   d45d4:	f000 fe86 	bl	d52e4 <spark_sync_time>
      Particle.syncTime(); // SET CLOCK EACH DAY AT 12 NOON.
    if (verboseMode)
   d45d8:	782b      	ldrb	r3, [r5, #0]
   d45da:	b1cb      	cbz	r3, d4610 <loop+0x130>
   d45dc:	4e47      	ldr	r6, [pc, #284]	; (d46fc <loop+0x21c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d45de:	2500      	movs	r5, #0
    {
      waitUntil(PublishDelayFunction);
   d45e0:	f7ff fda4 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d45e4:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("Temperature", temperatureString, PRIVATE);
   d45e6:	4a4d      	ldr	r2, [pc, #308]	; (d471c <loop+0x23c>)
   d45e8:	494d      	ldr	r1, [pc, #308]	; (d4720 <loop+0x240>)
   d45ea:	f88d 5000 	strb.w	r5, [sp]
   d45ee:	a802      	add	r0, sp, #8
   d45f0:	f7ff fd79 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d45f4:	a803      	add	r0, sp, #12
   d45f6:	f7ff fe24 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45fa:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("State", "Waiting RESPONSE", PRIVATE);
   d45fc:	4a49      	ldr	r2, [pc, #292]	; (d4724 <loop+0x244>)
   d45fe:	f88d 5000 	strb.w	r5, [sp]
   d4602:	a802      	add	r0, sp, #8
   d4604:	4941      	ldr	r1, [pc, #260]	; (d470c <loop+0x22c>)
   d4606:	f7ff fd6e 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d460a:	a803      	add	r0, sp, #12
   d460c:	f7ff fe19 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sendUBIDots();
   d4610:	f7ff fec0 	bl	d4394 <_Z11sendUBIDotsv>
    state = RESPONSE_WAIT;
   d4614:	2304      	movs	r3, #4
   d4616:	e048      	b.n	d46aa <loop+0x1ca>

    break;

  case RESPONSE_WAIT:
    if (verboseMode && oldState != state)
   d4618:	4b35      	ldr	r3, [pc, #212]	; (d46f0 <loop+0x210>)
   d461a:	781b      	ldrb	r3, [r3, #0]
   d461c:	b12b      	cbz	r3, d462a <loop+0x14a>
   d461e:	4b35      	ldr	r3, [pc, #212]	; (d46f4 <loop+0x214>)
   d4620:	781b      	ldrb	r3, [r3, #0]
   d4622:	2b04      	cmp	r3, #4
   d4624:	d001      	beq.n	d462a <loop+0x14a>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d4626:	f7ff ff2b 	bl	d4480 <_Z15transitionStatev>

    if (!inTransit)
   d462a:	4b3f      	ldr	r3, [pc, #252]	; (d4728 <loop+0x248>)
   d462c:	781a      	ldrb	r2, [r3, #0]
   d462e:	b96a      	cbnz	r2, d464c <loop+0x16c>
   d4630:	4b3e      	ldr	r3, [pc, #248]	; (d472c <loop+0x24c>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d4632:	493f      	ldr	r1, [pc, #252]	; (d4730 <loop+0x250>)
   d4634:	781b      	ldrb	r3, [r3, #0]
   d4636:	f88d 2000 	strb.w	r2, [sp]
   d463a:	a802      	add	r0, sp, #8
   d463c:	4a3d      	ldr	r2, [pc, #244]	; (d4734 <loop+0x254>)
   d463e:	f7ff fd52 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d4642:	a803      	add	r0, sp, #12
   d4644:	f7ff fdfd 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {
      Particle.publish("STATE", "Data Received, Going to IDLE"); // If data is not inTransit, Then data was sent succesfully, Hence go to Idle State.
      state = IDLE_STATE;
   d4648:	2301      	movs	r3, #1
   d464a:	7023      	strb	r3, [r4, #0]
   d464c:	f000 fca6 	bl	d4f9c <HAL_Timer_Get_Milli_Seconds>
    } // This checks for the response from UBIDOTS.

    if (millis() - webhookTimeStamp > webhookTimeout)
   d4650:	4b39      	ldr	r3, [pc, #228]	; (d4738 <loop+0x258>)
   d4652:	681b      	ldr	r3, [r3, #0]
   d4654:	1ac0      	subs	r0, r0, r3
   d4656:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d465a:	4298      	cmp	r0, r3
   d465c:	d944      	bls.n	d46e8 <loop+0x208>
   d465e:	4b27      	ldr	r3, [pc, #156]	; (d46fc <loop+0x21c>)
    {                                                            // If device does not respond in 45 Seconds, Then Reset it.
      Particle.publish("spark/device/session/end", "", PRIVATE); //
   d4660:	4936      	ldr	r1, [pc, #216]	; (d473c <loop+0x25c>)
   d4662:	781b      	ldrb	r3, [r3, #0]
   d4664:	2200      	movs	r2, #0
   d4666:	f88d 2000 	strb.w	r2, [sp]
   d466a:	a802      	add	r0, sp, #8
   d466c:	4a34      	ldr	r2, [pc, #208]	; (d4740 <loop+0x260>)
   d466e:	f7ff fd3a 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d4672:	a803      	add	r0, sp, #12
   d4674:	f7ff fde5 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                       // time out
   d4678:	2305      	movs	r3, #5
   d467a:	e016      	b.n	d46aa <loop+0x1ca>
    }
    break;

  case ERROR_STATE: // This state RESETS the devices.
    if (verboseMode && oldState != state)
   d467c:	4b1c      	ldr	r3, [pc, #112]	; (d46f0 <loop+0x210>)
   d467e:	781b      	ldrb	r3, [r3, #0]
   d4680:	b12b      	cbz	r3, d468e <loop+0x1ae>
   d4682:	4b1c      	ldr	r3, [pc, #112]	; (d46f4 <loop+0x214>)
   d4684:	781b      	ldrb	r3, [r3, #0]
   d4686:	2b05      	cmp	r3, #5
   d4688:	d001      	beq.n	d468e <loop+0x1ae>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
   d468a:	f7ff fef9 	bl	d4480 <_Z15transitionStatev>
   d468e:	4b1b      	ldr	r3, [pc, #108]	; (d46fc <loop+0x21c>)
    Particle.publish("STATE", "RESETTING IN 30 SEC. ", PRIVATE);
   d4690:	4927      	ldr	r1, [pc, #156]	; (d4730 <loop+0x250>)
   d4692:	781b      	ldrb	r3, [r3, #0]
   d4694:	2200      	movs	r2, #0
   d4696:	f88d 2000 	strb.w	r2, [sp]
   d469a:	a802      	add	r0, sp, #8
   d469c:	4a29      	ldr	r2, [pc, #164]	; (d4744 <loop+0x264>)
   d469e:	f7ff fd22 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d46a2:	a803      	add	r0, sp, #12
   d46a4:	f7ff fdcd 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = IDLE_STATE;
   d46a8:	2301      	movs	r3, #1
   d46aa:	7023      	strb	r3, [r4, #0]
    break;
  }
}
   d46ac:	e01c      	b.n	d46e8 <loop+0x208>
    // Forced Reading
    /* When the forced reading function is called,  */
    else if ((forcedMode) && (Time.minute() - ForcedValueTimePassed > forcedReadingRate))
    {

      state = REPORTING_STATE;
   d46ae:	2303      	movs	r3, #3
   d46b0:	7023      	strb	r3, [r4, #0]
      ForcedValueTimePassed = Time.minute();
   d46b2:	f001 fd93 	bl	d61dc <_ZN9TimeClass6minuteEv>

      if (verboseMode)
   d46b6:	782b      	ldrb	r3, [r5, #0]
    /* When the forced reading function is called,  */
    else if ((forcedMode) && (Time.minute() - ForcedValueTimePassed > forcedReadingRate))
    {

      state = REPORTING_STATE;
      ForcedValueTimePassed = Time.minute();
   d46b8:	6030      	str	r0, [r6, #0]

      if (verboseMode)
   d46ba:	b1ab      	cbz	r3, d46e8 <loop+0x208>
      {
        waitUntil(PublishDelayFunction);
   d46bc:	f7ff fd36 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d46c0:	4b0e      	ldr	r3, [pc, #56]	; (d46fc <loop+0x21c>)
        Particle.publish("FORCED", "GETTING READING", PRIVATE);
   d46c2:	4a21      	ldr	r2, [pc, #132]	; (d4748 <loop+0x268>)
   d46c4:	781b      	ldrb	r3, [r3, #0]
   d46c6:	4921      	ldr	r1, [pc, #132]	; (d474c <loop+0x26c>)
   d46c8:	f88d 7000 	strb.w	r7, [sp]
   d46cc:	e75d      	b.n	d458a <loop+0xaa>
      }
    }

    else
    {
      state = IDLE_STATE;
   d46ce:	2301      	movs	r3, #1
   d46d0:	7023      	strb	r3, [r4, #0]
      if (verboseMode)
   d46d2:	782b      	ldrb	r3, [r5, #0]
   d46d4:	b143      	cbz	r3, d46e8 <loop+0x208>
      {
        waitUntil(PublishDelayFunction);
   d46d6:	f7ff fd29 	bl	d412c <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.35>
   d46da:	4b08      	ldr	r3, [pc, #32]	; (d46fc <loop+0x21c>)
        Particle.publish("State", "No change - Idle", PRIVATE);
   d46dc:	2200      	movs	r2, #0
   d46de:	781b      	ldrb	r3, [r3, #0]
   d46e0:	f88d 2000 	strb.w	r2, [sp]
   d46e4:	4a1a      	ldr	r2, [pc, #104]	; (d4750 <loop+0x270>)
   d46e6:	e74f      	b.n	d4588 <loop+0xa8>
      transitionState(); // If verboseMode is on and state is changed, Then publish the state transition.
    Particle.publish("STATE", "RESETTING IN 30 SEC. ", PRIVATE);
    state = IDLE_STATE;
    break;
  }
}
   d46e8:	b005      	add	sp, #20
   d46ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46ec:	2003e308 	.word	0x2003e308
   d46f0:	2003e355 	.word	0x2003e355
   d46f4:	2003e354 	.word	0x2003e354
   d46f8:	2003e314 	.word	0x2003e314
   d46fc:	2003e370 	.word	0x2003e370
   d4700:	000d7fae 	.word	0x000d7fae
   d4704:	2003e310 	.word	0x2003e310
   d4708:	000d7fca 	.word	0x000d7fca
   d470c:	000d7f93 	.word	0x000d7f93
   d4710:	2003e371 	.word	0x2003e371
   d4714:	2003e30c 	.word	0x2003e30c
   d4718:	2003e0c4 	.word	0x2003e0c4
   d471c:	2003e2e8 	.word	0x2003e2e8
   d4720:	000d800a 	.word	0x000d800a
   d4724:	000d8016 	.word	0x000d8016
   d4728:	2003e309 	.word	0x2003e309
   d472c:	2003e2f8 	.word	0x2003e2f8
   d4730:	000d7ecd 	.word	0x000d7ecd
   d4734:	000d8027 	.word	0x000d8027
   d4738:	2003e358 	.word	0x2003e358
   d473c:	000d8044 	.word	0x000d8044
   d4740:	000d814e 	.word	0x000d814e
   d4744:	000d805d 	.word	0x000d805d
   d4748:	000d7fe2 	.word	0x000d7fe2
   d474c:	000d7ff2 	.word	0x000d7ff2
   d4750:	000d7ff9 	.word	0x000d7ff9

000d4754 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4754:	2300      	movs	r3, #0
   d4756:	2204      	movs	r2, #4
   d4758:	f000 bd8c 	b.w	d5274 <spark_variable>

000d475c <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
   d475c:	b530      	push	{r4, r5, lr}
   d475e:	b085      	sub	sp, #20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4760:	2300      	movs	r3, #0
   d4762:	4605      	mov	r5, r0
   d4764:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d4766:	b121      	cbz	r1, d4772 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4768:	4b14      	ldr	r3, [pc, #80]	; (d47bc <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
   d476a:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d476c:	4b14      	ldr	r3, [pc, #80]	; (d47c0 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d476e:	9100      	str	r1, [sp, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4770:	9302      	str	r3, [sp, #8]
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
   d4772:	9b02      	ldr	r3, [sp, #8]
   d4774:	b183      	cbz	r3, d4798 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4776:	2010      	movs	r0, #16
   d4778:	f7ff fc8d 	bl	d4096 <_Znwj>
   d477c:	4604      	mov	r4, r0
   d477e:	b158      	cbz	r0, d4798 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4780:	2300      	movs	r3, #0
   d4782:	6083      	str	r3, [r0, #8]
   d4784:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4786:	b17b      	cbz	r3, d47a8 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4788:	2202      	movs	r2, #2
   d478a:	4669      	mov	r1, sp
   d478c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d478e:	9b03      	ldr	r3, [sp, #12]
   d4790:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4792:	9b02      	ldr	r3, [sp, #8]
   d4794:	60a3      	str	r3, [r4, #8]
   d4796:	e007      	b.n	d47a8 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
   d4798:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d479a:	9b02      	ldr	r3, [sp, #8]
   d479c:	b15b      	cbz	r3, d47b6 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d479e:	2203      	movs	r2, #3
   d47a0:	4669      	mov	r1, sp
   d47a2:	4668      	mov	r0, sp
   d47a4:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
   d47a6:	e006      	b.n	d47b6 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d47a8:	4621      	mov	r1, r4
   d47aa:	462a      	mov	r2, r5
   d47ac:	4805      	ldr	r0, [pc, #20]	; (d47c4 <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
   d47ae:	f000 fe9e 	bl	d54ee <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d47b2:	4604      	mov	r4, r0
   d47b4:	e7f1      	b.n	d479a <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
   d47b6:	4620      	mov	r0, r4
   d47b8:	b005      	add	sp, #20
   d47ba:	bd30      	pop	{r4, r5, pc}
   d47bc:	000d40cb 	.word	0x000d40cb
   d47c0:	000d40b3 	.word	0x000d40b3
   d47c4:	000d54c7 	.word	0x000d54c7

000d47c8 <setup>:
float temperatureInC = 0; // Current Temp Reading global variable
float voltage;            // Voltage level of the LiPo battery - 3.6-4.2V range
bool inTransit = false;   // This variable is used to check if the data is inTransit to Ubidots or not. If inTransit is false, Then data is succesfully sent.
bool forcedMode = false;  //Forced value mode.
void setup()
{
   d47c8:	b510      	push	{r4, lr}
   d47ca:	b0a8      	sub	sp, #160	; 0xa0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d47cc:	a804      	add	r0, sp, #16
   d47ce:	f000 fd71 	bl	d52b4 <spark_deviceID>
     */
    int publishVitals(system_tick_t period = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d47d2:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d47d4:	2300      	movs	r3, #0
   d47d6:	227d      	movs	r2, #125	; 0x7d
   d47d8:	a908      	add	r1, sp, #32
   d47da:	a804      	add	r0, sp, #16
   d47dc:	f001 fc67 	bl	d60ae <_ZNK6String8getBytesEPhjj>
   d47e0:	4623      	mov	r3, r4
   d47e2:	4622      	mov	r2, r4
   d47e4:	491b      	ldr	r1, [pc, #108]	; (d4854 <setup+0x8c>)
   d47e6:	9401      	str	r4, [sp, #4]
   d47e8:	9400      	str	r4, [sp, #0]
   d47ea:	a808      	add	r0, sp, #32
   d47ec:	f000 fd72 	bl	d52d4 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID(); // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic, 125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES); // Subscribe to the integration response event

  getTemperature();
   d47f0:	f7ff fcec 	bl	d41cc <_Z14getTemperaturev>

  // Particle Variables

  Particle.variable("celsius", temperatureString); // Setup Particle Variable
   d47f4:	4918      	ldr	r1, [pc, #96]	; (d4858 <setup+0x90>)
   d47f6:	4819      	ldr	r0, [pc, #100]	; (d485c <setup+0x94>)
   d47f8:	f7ff ffac 	bl	d4754 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);     // So we can see what release is running from the console
   d47fc:	4918      	ldr	r1, [pc, #96]	; (d4860 <setup+0x98>)
   d47fe:	4819      	ldr	r0, [pc, #100]	; (d4864 <setup+0x9c>)
   d4800:	f7ff ffa8 	bl	d4754 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString);       // Particle variables that enable monitoring using the mobile app
   d4804:	4918      	ldr	r1, [pc, #96]	; (d4868 <setup+0xa0>)
   d4806:	4819      	ldr	r0, [pc, #100]	; (d486c <setup+0xa4>)
   d4808:	f7ff ffa4 	bl	d4754 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);     // Battery level in V as the Argon does not have a fuel cell
   d480c:	4918      	ldr	r1, [pc, #96]	; (d4870 <setup+0xa8>)
   d480e:	4819      	ldr	r0, [pc, #100]	; (d4874 <setup+0xac>)
   d4810:	f7ff ffa0 	bl	d4754 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>

  // Particle Functions.

  Particle.function("verboseMode", SetVerboseMode); // Added Particle Function For VerboseMode.
   d4814:	4918      	ldr	r1, [pc, #96]	; (d4878 <setup+0xb0>)
   d4816:	4819      	ldr	r0, [pc, #100]	; (d487c <setup+0xb4>)
   d4818:	f7ff ffa0 	bl	d475c <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("GetReading", forcedReading);   // This function will force it to get a reading and set the refresh rate to 15mins.
   d481c:	4918      	ldr	r1, [pc, #96]	; (d4880 <setup+0xb8>)
   d481e:	4819      	ldr	r0, [pc, #100]	; (d4884 <setup+0xbc>)
   d4820:	f7ff ff9c 	bl	d475c <_ZN10CloudClass8functionIA11_cIPFb6StringEEEEbRKT_DpT0_>
  if (verboseMode)
   d4824:	4b18      	ldr	r3, [pc, #96]	; (d4888 <setup+0xc0>)
   d4826:	781b      	ldrb	r3, [r3, #0]
   d4828:	b15b      	cbz	r3, d4842 <setup+0x7a>
   d482a:	4b18      	ldr	r3, [pc, #96]	; (d488c <setup+0xc4>)
    Particle.publish("State", "IDLE", PRIVATE);
   d482c:	4a18      	ldr	r2, [pc, #96]	; (d4890 <setup+0xc8>)
   d482e:	781b      	ldrb	r3, [r3, #0]
   d4830:	4918      	ldr	r1, [pc, #96]	; (d4894 <setup+0xcc>)
   d4832:	f88d 4000 	strb.w	r4, [sp]
   d4836:	a802      	add	r0, sp, #8
   d4838:	f7ff fc55 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.45.constprop.58>
   d483c:	a803      	add	r0, sp, #12
   d483e:	f7ff fd00 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
   d4842:	4b15      	ldr	r3, [pc, #84]	; (d4898 <setup+0xd0>)
   d4844:	2201      	movs	r2, #1
void setup()
{
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.

  char responseTopic[125];
  String deviceID = System.deviceID(); // Multiple Electrons share the same hook - keeps things straight
   d4846:	a804      	add	r0, sp, #16
  Particle.function("verboseMode", SetVerboseMode); // Added Particle Function For VerboseMode.
  Particle.function("GetReading", forcedReading);   // This function will force it to get a reading and set the refresh rate to 15mins.
  if (verboseMode)
    Particle.publish("State", "IDLE", PRIVATE);

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
   d4848:	701a      	strb	r2, [r3, #0]
void setup()
{
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.

  char responseTopic[125];
  String deviceID = System.deviceID(); // Multiple Electrons share the same hook - keeps things straight
   d484a:	f001 fbc4 	bl	d5fd6 <_ZN6StringD1Ev>
  Particle.function("GetReading", forcedReading);   // This function will force it to get a reading and set the refresh rate to 15mins.
  if (verboseMode)
    Particle.publish("State", "IDLE", PRIVATE);

  state = IDLE_STATE; // If we made it this far, we are ready to go to IDLE in the main loop
}
   d484e:	b028      	add	sp, #160	; 0xa0
   d4850:	bd10      	pop	{r4, pc}
   d4852:	bf00      	nop
   d4854:	000d4419 	.word	0x000d4419
   d4858:	2003e2e8 	.word	0x2003e2e8
   d485c:	000d8073 	.word	0x000d8073
   d4860:	000d7e80 	.word	0x000d7e80
   d4864:	000d807b 	.word	0x000d807b
   d4868:	2003e344 	.word	0x2003e344
   d486c:	000d8083 	.word	0x000d8083
   d4870:	2003e360 	.word	0x2003e360
   d4874:	000d808a 	.word	0x000d808a
   d4878:	000d42c9 	.word	0x000d42c9
   d487c:	000d8092 	.word	0x000d8092
   d4880:	000d4271 	.word	0x000d4271
   d4884:	000d809e 	.word	0x000d809e
   d4888:	2003e355 	.word	0x2003e355
   d488c:	2003e370 	.word	0x2003e370
   d4890:	000d803f 	.word	0x000d803f
   d4894:	000d7f93 	.word	0x000d7f93
   d4898:	2003e308 	.word	0x2003e308

000d489c <_GLOBAL__sub_I_sensor>:
    Particle.publish("STATE", "Getting Value, Next Reading in 15 Mins.");
    return 1;
  }
  else
    return 0;
   d489c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d489e:	4b07      	ldr	r3, [pc, #28]	; (d48bc <_GLOBAL__sub_I_sensor+0x20>)
   d48a0:	2400      	movs	r4, #0
   d48a2:	701c      	strb	r4, [r3, #0]
   d48a4:	4b06      	ldr	r3, [pc, #24]	; (d48c0 <_GLOBAL__sub_I_sensor+0x24>)
   d48a6:	2201      	movs	r2, #1
   d48a8:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d48aa:	f000 fb8f 	bl	d4fcc <HAL_Pin_Map>
const char releaseNumber[6] = "1.10"; // Displays the release on the menu

#include "DS18.h" // Include the OneWire library

// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d48ae:	4622      	mov	r2, r4
   d48b0:	2103      	movs	r1, #3
   d48b2:	4804      	ldr	r0, [pc, #16]	; (d48c4 <_GLOBAL__sub_I_sensor+0x28>)
    Particle.publish("STATE", "Getting Value, Next Reading in 15 Mins.");
    return 1;
  }
  else
    return 0;
   d48b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
const char releaseNumber[6] = "1.10"; // Displays the release on the menu

#include "DS18.h" // Include the OneWire library

// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d48b8:	f000 b817 	b.w	d48ea <_ZN4DS18C1Etb>
   d48bc:	2003e2f8 	.word	0x2003e2f8
   d48c0:	2003e370 	.word	0x2003e370
   d48c4:	2003e318 	.word	0x2003e318

000d48c8 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d48c8:	2300      	movs	r3, #0
  _celsius = 0;
   d48ca:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d48cc:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d48ce:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d48d0:	6183      	str	r3, [r0, #24]
   d48d2:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d48d4:	6203      	str	r3, [r0, #32]
   d48d6:	6243      	str	r3, [r0, #36]	; 0x24
   d48d8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d48dc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d48e0:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d48e4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d48e8:	4770      	bx	lr

000d48ea <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d48ea:	b538      	push	{r3, r4, r5, lr}
   d48ec:	4604      	mov	r4, r0
   d48ee:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d48f0:	f000 f994 	bl	d4c1c <_ZN7OneWireC1Et>
   d48f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d48f8:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d48fa:	73a5      	strb	r5, [r4, #14]
   d48fc:	8223      	strh	r3, [r4, #16]
{
  init();
   d48fe:	f7ff ffe3 	bl	d48c8 <_ZN4DS184initEv>
}
   d4902:	4620      	mov	r0, r4
   d4904:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4908 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d490a:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d490e:	680b      	ldr	r3, [r1, #0]
   d4910:	6183      	str	r3, [r0, #24]
   d4912:	f100 0518 	add.w	r5, r0, #24
   d4916:	684b      	ldr	r3, [r1, #4]
   d4918:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d491a:	780b      	ldrb	r3, [r1, #0]
   d491c:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d491e:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4920:	d00a      	beq.n	d4938 <_ZN4DS184readEPh+0x30>
   d4922:	d803      	bhi.n	d492c <_ZN4DS184readEPh+0x24>
   d4924:	2b10      	cmp	r3, #16
   d4926:	d142      	bne.n	d49ae <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d4928:	2301      	movs	r3, #1
   d492a:	e008      	b.n	d493e <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d492c:	2b26      	cmp	r3, #38	; 0x26
   d492e:	d005      	beq.n	d493c <_ZN4DS184readEPh+0x34>
   d4930:	2b28      	cmp	r3, #40	; 0x28
   d4932:	d13c      	bne.n	d49ae <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d4934:	2302      	movs	r3, #2
   d4936:	e002      	b.n	d493e <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d4938:	2303      	movs	r3, #3
   d493a:	e000      	b.n	d493e <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d493c:	2304      	movs	r3, #4
   d493e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d4942:	4620      	mov	r0, r4
   d4944:	f000 f974 	bl	d4c30 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d4948:	4629      	mov	r1, r5
   d494a:	4620      	mov	r0, r4
   d494c:	f000 fa30 	bl	d4db0 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d4950:	7ba2      	ldrb	r2, [r4, #14]
   d4952:	2144      	movs	r1, #68	; 0x44
   d4954:	4620      	mov	r0, r4
   d4956:	f000 f9f8 	bl	d4d4a <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d495a:	8a20      	ldrh	r0, [r4, #16]
   d495c:	f000 fd62 	bl	d5424 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d4960:	4620      	mov	r0, r4
   d4962:	f000 f965 	bl	d4c30 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4966:	4629      	mov	r1, r5
   d4968:	4620      	mov	r0, r4
   d496a:	f000 fa21 	bl	d4db0 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d496e:	2200      	movs	r2, #0
   d4970:	21b8      	movs	r1, #184	; 0xb8
   d4972:	4620      	mov	r0, r4
   d4974:	f000 f9e9 	bl	d4d4a <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d4978:	2200      	movs	r2, #0
   d497a:	4611      	mov	r1, r2
   d497c:	4620      	mov	r0, r4
   d497e:	f000 f9e4 	bl	d4d4a <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d4982:	4620      	mov	r0, r4
   d4984:	f000 f954 	bl	d4c30 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4988:	4629      	mov	r1, r5
   d498a:	4620      	mov	r0, r4
   d498c:	f000 fa10 	bl	d4db0 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d4990:	2200      	movs	r2, #0
   d4992:	21be      	movs	r1, #190	; 0xbe
   d4994:	4620      	mov	r0, r4
   d4996:	f000 f9d8 	bl	d4d4a <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d499a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d499e:	2b04      	cmp	r3, #4
   d49a0:	d109      	bne.n	d49b6 <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d49a2:	2200      	movs	r2, #0
   d49a4:	4611      	mov	r1, r2
   d49a6:	4620      	mov	r0, r4
   d49a8:	f000 f9cf 	bl	d4d4a <_ZN7OneWire5writeEhh>
   d49ac:	e003      	b.n	d49b6 <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d49ae:	2000      	movs	r0, #0
   d49b0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d49b4:	e094      	b.n	d4ae0 <_ZN4DS184readEPh+0x1d8>
   d49b6:	f104 051f 	add.w	r5, r4, #31
   d49ba:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d49be:	4620      	mov	r0, r4
   d49c0:	f000 f9e6 	bl	d4d90 <_ZN7OneWire4readEv>
   d49c4:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d49c8:	42ae      	cmp	r6, r5
   d49ca:	d1f8      	bne.n	d49be <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d49cc:	2108      	movs	r1, #8
   d49ce:	f104 0020 	add.w	r0, r4, #32
   d49d2:	f000 fa86 	bl	d4ee2 <_ZN7OneWire4crc8EPhh>
   d49d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d49da:	4283      	cmp	r3, r0
   d49dc:	d004      	beq.n	d49e8 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d49de:	2301      	movs	r3, #1
   d49e0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d49e4:	2000      	movs	r0, #0
   d49e6:	e07b      	b.n	d4ae0 <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d49e8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d49ec:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d49f0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d49f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d49f8:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d49fa:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d49fc:	d127      	bne.n	d4a4e <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d49fe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4a02:	ee07 3a90 	vmov	s15, r3
   d4a06:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4a0a:	08d2      	lsrs	r2, r2, #3
   d4a0c:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d4a10:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d4a14:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d4a18:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4a1a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d4a1e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d4a22:	d045      	beq.n	d4ab0 <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d4a24:	ee18 0a90 	vmov	r0, s17
   d4a28:	f002 f99c 	bl	d6d64 <__aeabi_f2d>
   d4a2c:	4606      	mov	r6, r0
   d4a2e:	ee18 0a10 	vmov	r0, s16
   d4a32:	460f      	mov	r7, r1
   d4a34:	f002 f996 	bl	d6d64 <__aeabi_f2d>
   d4a38:	2200      	movs	r2, #0
   d4a3a:	4b2b      	ldr	r3, [pc, #172]	; (d4ae8 <_ZN4DS184readEPh+0x1e0>)
   d4a3c:	f002 f9e6 	bl	d6e0c <__aeabi_dmul>
   d4a40:	4602      	mov	r2, r0
   d4a42:	460b      	mov	r3, r1
   d4a44:	4630      	mov	r0, r6
   d4a46:	4639      	mov	r1, r7
   d4a48:	f002 f82c 	bl	d6aa4 <__aeabi_dsub>
   d4a4c:	e044      	b.n	d4ad8 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d4a4e:	2901      	cmp	r1, #1
   d4a50:	d003      	beq.n	d4a5a <_ZN4DS184readEPh+0x152>
   d4a52:	d344      	bcc.n	d4ade <_ZN4DS184readEPh+0x1d6>
   d4a54:	2903      	cmp	r1, #3
   d4a56:	d910      	bls.n	d4a7a <_ZN4DS184readEPh+0x172>
   d4a58:	e041      	b.n	d4ade <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4a5a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4a5e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4a62:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d4a64:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4a66:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4a68:	d119      	bne.n	d4a9e <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d4a6a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d4a6e:	f023 030f 	bic.w	r3, r3, #15
   d4a72:	f1c2 020c 	rsb	r2, r2, #12
   d4a76:	4413      	add	r3, r2
   d4a78:	e010      	b.n	d4a9c <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d4a7a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d4a7e:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d4a82:	d102      	bne.n	d4a8a <_ZN4DS184readEPh+0x182>
   d4a84:	f023 0307 	bic.w	r3, r3, #7
   d4a88:	e008      	b.n	d4a9c <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d4a8a:	2a20      	cmp	r2, #32
   d4a8c:	d102      	bne.n	d4a94 <_ZN4DS184readEPh+0x18c>
   d4a8e:	f023 0303 	bic.w	r3, r3, #3
   d4a92:	e003      	b.n	d4a9c <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4a94:	2a40      	cmp	r2, #64	; 0x40
   d4a96:	d102      	bne.n	d4a9e <_ZN4DS184readEPh+0x196>
   d4a98:	f023 0301 	bic.w	r3, r3, #1
   d4a9c:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d4a9e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d4aa2:	ee07 3a90 	vmov	s15, r3
   d4aa6:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d4aaa:	edc4 7a05 	vstr	s15, [r4, #20]
   d4aae:	e016      	b.n	d4ade <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4ab0:	ee18 0a10 	vmov	r0, s16
   d4ab4:	f002 f956 	bl	d6d64 <__aeabi_f2d>
   d4ab8:	2200      	movs	r2, #0
   d4aba:	4b0b      	ldr	r3, [pc, #44]	; (d4ae8 <_ZN4DS184readEPh+0x1e0>)
   d4abc:	f002 f9a6 	bl	d6e0c <__aeabi_dmul>
   d4ac0:	4606      	mov	r6, r0
   d4ac2:	ee18 0a90 	vmov	r0, s17
   d4ac6:	460f      	mov	r7, r1
   d4ac8:	f002 f94c 	bl	d6d64 <__aeabi_f2d>
   d4acc:	4602      	mov	r2, r0
   d4ace:	460b      	mov	r3, r1
   d4ad0:	4630      	mov	r0, r6
   d4ad2:	4639      	mov	r1, r7
   d4ad4:	f001 ffe8 	bl	d6aa8 <__adddf3>
   d4ad8:	f002 fbaa 	bl	d7230 <__aeabi_d2f>
   d4adc:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d4ade:	2001      	movs	r0, #1
}
   d4ae0:	ecbd 8b02 	vpop	{d8}
   d4ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4ae6:	bf00      	nop
   d4ae8:	3fa00000 	.word	0x3fa00000

000d4aec <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d4aec:	b538      	push	{r3, r4, r5, lr}
   d4aee:	4604      	mov	r4, r0
  init();
   d4af0:	f7ff feea 	bl	d48c8 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d4af4:	f100 0518 	add.w	r5, r0, #24
   d4af8:	4629      	mov	r1, r5
   d4afa:	f000 f977 	bl	d4dec <_ZN7OneWire6searchEPh>
   d4afe:	b930      	cbnz	r0, d4b0e <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d4b00:	2301      	movs	r3, #1
   d4b02:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d4b06:	4620      	mov	r0, r4
   d4b08:	f000 f964 	bl	d4dd4 <_ZN7OneWire12reset_searchEv>
    return false;
   d4b0c:	e010      	b.n	d4b30 <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d4b0e:	2107      	movs	r1, #7
   d4b10:	4628      	mov	r0, r5
   d4b12:	f000 f9e6 	bl	d4ee2 <_ZN7OneWire4crc8EPhh>
   d4b16:	7fe3      	ldrb	r3, [r4, #31]
   d4b18:	4283      	cmp	r3, r0
   d4b1a:	d003      	beq.n	d4b24 <_ZN4DS184readEv+0x38>
    _crcError = true;
   d4b1c:	2301      	movs	r3, #1
   d4b1e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4b22:	e005      	b.n	d4b30 <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d4b24:	4629      	mov	r1, r5
   d4b26:	4620      	mov	r0, r4
}
   d4b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d4b2c:	f7ff beec 	b.w	d4908 <_ZN4DS184readEPh>
}
   d4b30:	2000      	movs	r0, #0
   d4b32:	bd38      	pop	{r3, r4, r5, pc}

000d4b34 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d4b34:	ed90 0a05 	vldr	s0, [r0, #20]
   d4b38:	4770      	bx	lr

000d4b3a <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4b3a:	f000 ba47 	b.w	d4fcc <HAL_Pin_Map>
	...

000d4b40 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4b40:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4b42:	6803      	ldr	r3, [r0, #0]
   d4b44:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4b46:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4b48:	d904      	bls.n	d4b54 <nrf_gpio_pin_port_decode+0x14>
   d4b4a:	4a07      	ldr	r2, [pc, #28]	; (d4b68 <nrf_gpio_pin_port_decode+0x28>)
   d4b4c:	2100      	movs	r1, #0
   d4b4e:	200a      	movs	r0, #10
   d4b50:	f000 fb44 	bl	d51dc <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4b54:	6823      	ldr	r3, [r4, #0]
   d4b56:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4b58:	bf83      	ittte	hi
   d4b5a:	f003 031f 	andhi.w	r3, r3, #31
   d4b5e:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4b60:	4802      	ldrhi	r0, [pc, #8]	; (d4b6c <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4b62:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4b66:	bd10      	pop	{r4, pc}
   d4b68:	000d4f8d 	.word	0x000d4f8d
   d4b6c:	50000300 	.word	0x50000300

000d4b70 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d4b70:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4b72:	4b0b      	ldr	r3, [pc, #44]	; (d4ba0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	0100      	lsls	r0, r0, #4
   d4b78:	1819      	adds	r1, r3, r0
   d4b7a:	5c1a      	ldrb	r2, [r3, r0]
   d4b7c:	784b      	ldrb	r3, [r1, #1]
   d4b7e:	a802      	add	r0, sp, #8
   d4b80:	f003 031f 	and.w	r3, r3, #31
   d4b84:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4b88:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4b8c:	f7ff ffd8 	bl	d4b40 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4b90:	9a01      	ldr	r2, [sp, #4]
   d4b92:	2301      	movs	r3, #1
   d4b94:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4b96:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4b9a:	b003      	add	sp, #12
   d4b9c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ba0:	2003e374 	.word	0x2003e374

000d4ba4 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4ba4:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4ba6:	4b0b      	ldr	r3, [pc, #44]	; (d4bd4 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	0100      	lsls	r0, r0, #4
   d4bac:	1819      	adds	r1, r3, r0
   d4bae:	5c1a      	ldrb	r2, [r3, r0]
   d4bb0:	784b      	ldrb	r3, [r1, #1]
   d4bb2:	a802      	add	r0, sp, #8
   d4bb4:	f003 031f 	and.w	r3, r3, #31
   d4bb8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4bbc:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4bc0:	f7ff ffbe 	bl	d4b40 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4bc4:	9a01      	ldr	r2, [sp, #4]
   d4bc6:	2301      	movs	r3, #1
   d4bc8:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4bca:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d4bce:	b003      	add	sp, #12
   d4bd0:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bd4:	2003e374 	.word	0x2003e374

000d4bd8 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4bd8:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4bda:	4b0f      	ldr	r3, [pc, #60]	; (d4c18 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	0100      	lsls	r0, r0, #4
   d4be0:	181a      	adds	r2, r3, r0
   d4be2:	5c1c      	ldrb	r4, [r3, r0]
   d4be4:	7853      	ldrb	r3, [r2, #1]
   d4be6:	a802      	add	r0, sp, #8
   d4be8:	f003 031f 	and.w	r3, r3, #31
   d4bec:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4bf0:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4bf4:	f7ff ffa4 	bl	d4b40 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4bf8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4bfc:	a802      	add	r0, sp, #8
   d4bfe:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c02:	f7ff ff9d 	bl	d4b40 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4c06:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d4c0a:	9800      	ldr	r0, [sp, #0]
   d4c0c:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4c10:	f000 0001 	and.w	r0, r0, #1
   d4c14:	b002      	add	sp, #8
   d4c16:	bd10      	pop	{r4, pc}
   d4c18:	2003e374 	.word	0x2003e374

000d4c1c <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d4c1c:	b538      	push	{r3, r4, r5, lr}
   d4c1e:	4604      	mov	r4, r0
   d4c20:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d4c22:	4628      	mov	r0, r5
   d4c24:	2100      	movs	r1, #0
   d4c26:	f001 fd7d 	bl	d6724 <pinMode>
    _pin = pin;
   d4c2a:	8025      	strh	r5, [r4, #0]
}
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	bd38      	pop	{r3, r4, r5, pc}

000d4c30 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d4c30:	b538      	push	{r3, r4, r5, lr}
   d4c32:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d4c34:	f000 ff62 	bl	d5afc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4c38:	2100      	movs	r1, #0
   d4c3a:	8828      	ldrh	r0, [r5, #0]
   d4c3c:	f000 f9d6 	bl	d4fec <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d4c40:	f000 ff5e 	bl	d5b00 <_Z10interruptsv>
   d4c44:	247d      	movs	r4, #125	; 0x7d
   d4c46:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d4c48:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4c4c:	d02b      	beq.n	d4ca6 <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4c4e:	2002      	movs	r0, #2
   d4c50:	f000 f99c 	bl	d4f8c <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d4c54:	8828      	ldrh	r0, [r5, #0]
   d4c56:	f7ff ffbf 	bl	d4bd8 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d4c5a:	2800      	cmp	r0, #0
   d4c5c:	d0f3      	beq.n	d4c46 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d4c5e:	f000 ff4d 	bl	d5afc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4c62:	8828      	ldrh	r0, [r5, #0]
   d4c64:	f7ff ff84 	bl	d4b70 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4c68:	2101      	movs	r1, #1
   d4c6a:	8828      	ldrh	r0, [r5, #0]
   d4c6c:	f000 f9be 	bl	d4fec <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d4c70:	f000 ff46 	bl	d5b00 <_Z10interruptsv>
   d4c74:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4c78:	f000 f988 	bl	d4f8c <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4c7c:	f000 ff3e 	bl	d5afc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4c80:	2100      	movs	r1, #0
   d4c82:	8828      	ldrh	r0, [r5, #0]
   d4c84:	f000 f9b2 	bl	d4fec <HAL_Pin_Mode>
   d4c88:	2046      	movs	r0, #70	; 0x46
   d4c8a:	f000 f97f 	bl	d4f8c <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4c8e:	8828      	ldrh	r0, [r5, #0]
   d4c90:	f7ff ffa2 	bl	d4bd8 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4c94:	fab0 f480 	clz	r4, r0

    interrupts();
   d4c98:	f000 ff32 	bl	d5b00 <_Z10interruptsv>
   d4c9c:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4ca0:	0964      	lsrs	r4, r4, #5
   d4ca2:	f000 f973 	bl	d4f8c <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	bd38      	pop	{r3, r4, r5, pc}

000d4caa <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d4caa:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4cac:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d4cb0:	4604      	mov	r4, r0
    if (v & 1) {
   d4cb2:	d013      	beq.n	d4cdc <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4cb4:	f000 ff22 	bl	d5afc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4cb8:	8820      	ldrh	r0, [r4, #0]
   d4cba:	f7ff ff59 	bl	d4b70 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4cbe:	2101      	movs	r1, #1
   d4cc0:	8820      	ldrh	r0, [r4, #0]
   d4cc2:	f000 f993 	bl	d4fec <HAL_Pin_Mode>
   d4cc6:	200a      	movs	r0, #10
   d4cc8:	f000 f960 	bl	d4f8c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4ccc:	8820      	ldrh	r0, [r4, #0]
   d4cce:	2100      	movs	r1, #0
   d4cd0:	f000 f98c 	bl	d4fec <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4cd4:	f000 ff14 	bl	d5b00 <_Z10interruptsv>
   d4cd8:	2037      	movs	r0, #55	; 0x37
   d4cda:	e012      	b.n	d4d02 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4cdc:	f000 ff0e 	bl	d5afc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4ce0:	8820      	ldrh	r0, [r4, #0]
   d4ce2:	f7ff ff45 	bl	d4b70 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4ce6:	2101      	movs	r1, #1
   d4ce8:	8820      	ldrh	r0, [r4, #0]
   d4cea:	f000 f97f 	bl	d4fec <HAL_Pin_Mode>
   d4cee:	2041      	movs	r0, #65	; 0x41
   d4cf0:	f000 f94c 	bl	d4f8c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4cf4:	8820      	ldrh	r0, [r4, #0]
   d4cf6:	4629      	mov	r1, r5
   d4cf8:	f000 f978 	bl	d4fec <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d4cfc:	f000 ff00 	bl	d5b00 <_Z10interruptsv>
   d4d00:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d4d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d06:	f000 b941 	b.w	d4f8c <HAL_Delay_Microseconds>

000d4d0a <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d4d0a:	b510      	push	{r4, lr}
   d4d0c:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d4d0e:	f000 fef5 	bl	d5afc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4d12:	8820      	ldrh	r0, [r4, #0]
   d4d14:	f7ff ff2c 	bl	d4b70 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4d18:	2101      	movs	r1, #1
   d4d1a:	8820      	ldrh	r0, [r4, #0]
   d4d1c:	f000 f966 	bl	d4fec <HAL_Pin_Mode>
   d4d20:	2003      	movs	r0, #3
   d4d22:	f000 f933 	bl	d4f8c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4d26:	2100      	movs	r1, #0
   d4d28:	8820      	ldrh	r0, [r4, #0]
   d4d2a:	f000 f95f 	bl	d4fec <HAL_Pin_Mode>
   d4d2e:	200a      	movs	r0, #10
   d4d30:	f000 f92c 	bl	d4f8c <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d4d34:	8820      	ldrh	r0, [r4, #0]
   d4d36:	f7ff ff4f 	bl	d4bd8 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4d3a:	4604      	mov	r4, r0

    interrupts();
   d4d3c:	f000 fee0 	bl	d5b00 <_Z10interruptsv>
   d4d40:	2035      	movs	r0, #53	; 0x35
   d4d42:	f000 f923 	bl	d4f8c <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d4d46:	4620      	mov	r0, r4
   d4d48:	bd10      	pop	{r4, pc}

000d4d4a <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d4d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d4e:	4605      	mov	r5, r0
   d4d50:	4688      	mov	r8, r1
   d4d52:	4617      	mov	r7, r2
   d4d54:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4d56:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d4d58:	ea18 0f04 	tst.w	r8, r4
   d4d5c:	bf14      	ite	ne
   d4d5e:	2101      	movne	r1, #1
   d4d60:	2100      	moveq	r1, #0
   d4d62:	4628      	mov	r0, r5
   d4d64:	f7ff ffa1 	bl	d4caa <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4d68:	0064      	lsls	r4, r4, #1
   d4d6a:	3e01      	subs	r6, #1
   d4d6c:	b2e4      	uxtb	r4, r4
   d4d6e:	d1f3      	bne.n	d4d58 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d4d70:	b167      	cbz	r7, d4d8c <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d4d72:	f000 fec3 	bl	d5afc <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d4d76:	8828      	ldrh	r0, [r5, #0]
   d4d78:	f7ff ff14 	bl	d4ba4 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4d7c:	8828      	ldrh	r0, [r5, #0]
   d4d7e:	2101      	movs	r1, #1
   d4d80:	f000 f934 	bl	d4fec <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d4d88:	f000 beba 	b.w	d5b00 <_Z10interruptsv>
   d4d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d90 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d4d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d92:	4607      	mov	r7, r0
   d4d94:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4d96:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4d98:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4d9a:	4638      	mov	r0, r7
   d4d9c:	f7ff ffb5 	bl	d4d0a <_ZN7OneWire8read_bitEv>
   d4da0:	b100      	cbz	r0, d4da4 <_ZN7OneWire4readEv+0x14>
   d4da2:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4da4:	0064      	lsls	r4, r4, #1
   d4da6:	3e01      	subs	r6, #1
   d4da8:	b2e4      	uxtb	r4, r4
   d4daa:	d1f6      	bne.n	d4d9a <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4dac:	4628      	mov	r0, r5
   d4dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4db0 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4db0:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d4db2:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4db4:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d4db6:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4db8:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4dba:	f7ff ffc6 	bl	d4d4a <_ZN7OneWire5writeEhh>
   d4dbe:	1e65      	subs	r5, r4, #1
   d4dc0:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d4dc2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	4630      	mov	r0, r6
   d4dca:	f7ff ffbe 	bl	d4d4a <_ZN7OneWire5writeEhh>
   d4dce:	42a5      	cmp	r5, r4
   d4dd0:	d1f7      	bne.n	d4dc2 <_ZN7OneWire6selectEPKh+0x12>
}
   d4dd2:	bd70      	pop	{r4, r5, r6, pc}

000d4dd4 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4dd4:	2300      	movs	r3, #0
   d4dd6:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4dd8:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4dda:	72c3      	strb	r3, [r0, #11]
   d4ddc:	f100 020a 	add.w	r2, r0, #10
   d4de0:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4de2:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d4de6:	4282      	cmp	r2, r0
   d4de8:	d1fb      	bne.n	d4de2 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d4dea:	4770      	bx	lr

000d4dec <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4df0:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4df2:	4604      	mov	r4, r0
   d4df4:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4df6:	2d00      	cmp	r5, #0
   d4df8:	d15e      	bne.n	d4eb8 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d4dfa:	f7ff ff19 	bl	d4c30 <_ZN7OneWire5resetEv>
   d4dfe:	b920      	cbnz	r0, d4e0a <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4e00:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4e02:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4e04:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4e0a:	462a      	mov	r2, r5
   d4e0c:	21f0      	movs	r1, #240	; 0xf0
   d4e0e:	4620      	mov	r0, r4
   d4e10:	f7ff ff9b 	bl	d4d4a <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4e14:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4e16:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4e18:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	f7ff ff75 	bl	d4d0a <_ZN7OneWire8read_bitEv>
   d4e20:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d4e22:	4620      	mov	r0, r4
   d4e24:	f7ff ff71 	bl	d4d0a <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4e28:	f1b9 0f01 	cmp.w	r9, #1
   d4e2c:	d102      	bne.n	d4e34 <_ZN7OneWire6searchEPh+0x48>
   d4e2e:	2801      	cmp	r0, #1
   d4e30:	d11b      	bne.n	d4e6a <_ZN7OneWire6searchEPh+0x7e>
   d4e32:	e037      	b.n	d4ea4 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d4e34:	4581      	cmp	r9, r0
   d4e36:	eb04 0305 	add.w	r3, r4, r5
   d4e3a:	d11e      	bne.n	d4e7a <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4e3c:	7aa2      	ldrb	r2, [r4, #10]
   d4e3e:	4297      	cmp	r7, r2
   d4e40:	d207      	bcs.n	d4e52 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d4e42:	789a      	ldrb	r2, [r3, #2]
   d4e44:	4216      	tst	r6, r2
   d4e46:	bf14      	ite	ne
   d4e48:	f04f 0901 	movne.w	r9, #1
   d4e4c:	f04f 0900 	moveq.w	r9, #0
   d4e50:	e004      	b.n	d4e5c <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4e52:	bf0c      	ite	eq
   d4e54:	f04f 0901 	moveq.w	r9, #1
   d4e58:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4e5c:	f1b9 0f00 	cmp.w	r9, #0
   d4e60:	d103      	bne.n	d4e6a <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d4e62:	2f08      	cmp	r7, #8
   d4e64:	d808      	bhi.n	d4e78 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d4e66:	72e7      	strb	r7, [r4, #11]
   d4e68:	e006      	b.n	d4e78 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d4e6a:	1962      	adds	r2, r4, r5
   d4e6c:	f04f 0901 	mov.w	r9, #1
   d4e70:	7893      	ldrb	r3, [r2, #2]
   d4e72:	4333      	orrs	r3, r6
   d4e74:	7093      	strb	r3, [r2, #2]
   d4e76:	e004      	b.n	d4e82 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4e78:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4e7a:	789a      	ldrb	r2, [r3, #2]
   d4e7c:	ea22 0206 	bic.w	r2, r2, r6
   d4e80:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4e82:	4649      	mov	r1, r9
   d4e84:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d4e86:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d4e88:	f7ff ff0f 	bl	d4caa <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4e8c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4e90:	bf04      	itt	eq
   d4e92:	3501      	addeq	r5, #1
   d4e94:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4e96:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4e9a:	bf08      	it	eq
   d4e9c:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4e9e:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4ea0:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4ea2:	d9ba      	bls.n	d4e1a <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4ea4:	2f40      	cmp	r7, #64	; 0x40
   d4ea6:	d907      	bls.n	d4eb8 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4ea8:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4eac:	f1ba 0f00 	cmp.w	sl, #0
   d4eb0:	d112      	bne.n	d4ed8 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4eb2:	2301      	movs	r3, #1
   d4eb4:	7323      	strb	r3, [r4, #12]
   d4eb6:	e00f      	b.n	d4ed8 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d4eb8:	2000      	movs	r0, #0
   d4eba:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4ebc:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4ebe:	72e0      	strb	r0, [r4, #11]
   d4ec0:	1c63      	adds	r3, r4, #1
   d4ec2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d4ec6:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d4ec8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4ecc:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4ed0:	42a3      	cmp	r3, r4
   d4ed2:	d1f9      	bne.n	d4ec8 <_ZN7OneWire6searchEPh+0xdc>
   d4ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d4ed8:	78a3      	ldrb	r3, [r4, #2]
   d4eda:	2b00      	cmp	r3, #0
   d4edc:	d0ec      	beq.n	d4eb8 <_ZN7OneWire6searchEPh+0xcc>
   d4ede:	2001      	movs	r0, #1
   d4ee0:	e7ee      	b.n	d4ec0 <_ZN7OneWire6searchEPh+0xd4>

000d4ee2 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4ee2:	b530      	push	{r4, r5, lr}
   d4ee4:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d4ee6:	2000      	movs	r0, #0

    while (len--) {
   d4ee8:	3901      	subs	r1, #1
   d4eea:	b2c9      	uxtb	r1, r1
   d4eec:	29ff      	cmp	r1, #255	; 0xff
   d4eee:	d013      	beq.n	d4f18 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4ef4:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4ef6:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d4efa:	f013 0f01 	tst.w	r3, #1
   d4efe:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d4f02:	bf1c      	itt	ne
   d4f04:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4f08:	b2d8      	uxtbne	r0, r3
   d4f0a:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4f0c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d4f10:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4f14:	d1ef      	bne.n	d4ef6 <_ZN7OneWire4crc8EPhh+0x14>
   d4f16:	e7e7      	b.n	d4ee8 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d4f18:	bd30      	pop	{r4, r5, pc}
	...

000d4f1c <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4f1c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4f1e:	f000 f855 	bl	d4fcc <HAL_Pin_Map>
   d4f22:	4b01      	ldr	r3, [pc, #4]	; (d4f28 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4f24:	6018      	str	r0, [r3, #0]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	2003e374 	.word	0x2003e374

000d4f2c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <os_thread_is_current+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	689b      	ldr	r3, [r3, #8]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030248 	.word	0x00030248

000d4f3c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <os_thread_join+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	691b      	ldr	r3, [r3, #16]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	00030248 	.word	0x00030248

000d4f4c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <os_thread_cleanup+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	695b      	ldr	r3, [r3, #20]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030248 	.word	0x00030248

000d4f5c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <os_mutex_create+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030248 	.word	0x00030248

000d4f6c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <os_mutex_recursive_create+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030248 	.word	0x00030248

000d4f7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <HAL_RNG_GetRandomNumber+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	685b      	ldr	r3, [r3, #4]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030218 	.word	0x00030218

000d4f8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <HAL_Delay_Microseconds+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	68db      	ldr	r3, [r3, #12]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030218 	.word	0x00030218

000d4f9c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	695b      	ldr	r3, [r3, #20]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030218 	.word	0x00030218

000d4fac <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <HAL_RTC_Get_UnixTime+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	69db      	ldr	r3, [r3, #28]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030218 	.word	0x00030218

000d4fbc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <HAL_RTC_Time_Is_Valid+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030218 	.word	0x00030218

000d4fcc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <HAL_Pin_Map+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	681b      	ldr	r3, [r3, #0]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	0003022c 	.word	0x0003022c

000d4fdc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <HAL_Validate_Pin_Function+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	685b      	ldr	r3, [r3, #4]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	0003022c 	.word	0x0003022c

000d4fec <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <HAL_Pin_Mode+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	689b      	ldr	r3, [r3, #8]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	0003022c 	.word	0x0003022c

000d4ffc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <HAL_Interrupts_Enable_All+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6a1b      	ldr	r3, [r3, #32]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	0003022c 	.word	0x0003022c

000d500c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <HAL_Interrupts_Disable_All+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	0003022c 	.word	0x0003022c

000d501c <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <HAL_ADC_Read+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	0003022c 	.word	0x0003022c

000d502c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <HAL_I2C_Write_Data+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6a1b      	ldr	r3, [r3, #32]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030228 	.word	0x00030228

000d503c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <HAL_I2C_Available_Data+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030228 	.word	0x00030228

000d504c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <HAL_I2C_Read_Data+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030228 	.word	0x00030228

000d505c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_I2C_Peek_Data+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030228 	.word	0x00030228

000d506c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_I2C_Flush_Data+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030228 	.word	0x00030228

000d507c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_I2C_Is_Enabled+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	00030228 	.word	0x00030228

000d508c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_I2C_Init+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030228 	.word	0x00030228

000d509c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <inet_inet_ntop+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	695b      	ldr	r3, [r3, #20]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030264 	.word	0x00030264

000d50ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <netdb_freeaddrinfo+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	689b      	ldr	r3, [r3, #8]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030268 	.word	0x00030268

000d50bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <netdb_getaddrinfo+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	68db      	ldr	r3, [r3, #12]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030268 	.word	0x00030268

000d50cc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <HAL_SPI_Init+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	69db      	ldr	r3, [r3, #28]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030230 	.word	0x00030230

000d50dc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <HAL_SPI_Is_Enabled+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6a1b      	ldr	r3, [r3, #32]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030230 	.word	0x00030230

000d50ec <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <HAL_USART_Init+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	681b      	ldr	r3, [r3, #0]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	0003023c 	.word	0x0003023c

000d50fc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <HAL_USART_Write_Data+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	68db      	ldr	r3, [r3, #12]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	0003023c 	.word	0x0003023c

000d510c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <HAL_USART_Available_Data+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	691b      	ldr	r3, [r3, #16]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	0003023c 	.word	0x0003023c

000d511c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <HAL_USART_Read_Data+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	695b      	ldr	r3, [r3, #20]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	0003023c 	.word	0x0003023c

000d512c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <HAL_USART_Peek_Data+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	699b      	ldr	r3, [r3, #24]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003023c 	.word	0x0003023c

000d513c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <HAL_USART_Flush_Data+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	69db      	ldr	r3, [r3, #28]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	0003023c 	.word	0x0003023c

000d514c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <HAL_USART_Is_Enabled+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6a1b      	ldr	r3, [r3, #32]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	0003023c 	.word	0x0003023c

000d515c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <HAL_USART_Available_Data_For_Write+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003023c 	.word	0x0003023c

000d516c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <HAL_USB_USART_Init+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	681b      	ldr	r3, [r3, #0]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	0003024c 	.word	0x0003024c

000d517c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <HAL_USB_USART_Available_Data+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	691b      	ldr	r3, [r3, #16]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	0003024c 	.word	0x0003024c

000d518c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	695b      	ldr	r3, [r3, #20]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	0003024c 	.word	0x0003024c

000d519c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <HAL_USB_USART_Receive_Data+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	699b      	ldr	r3, [r3, #24]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	0003024c 	.word	0x0003024c

000d51ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <HAL_USB_USART_Send_Data+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	69db      	ldr	r3, [r3, #28]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	0003024c 	.word	0x0003024c

000d51bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <HAL_USB_USART_Flush_Data+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6a1b      	ldr	r3, [r3, #32]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	0003024c 	.word	0x0003024c

000d51cc <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <wlan_connected_info+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030274 	.word	0x00030274

000d51dc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <panic_+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030260 	.word	0x00030260

000d51ec <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <system_mode+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	681b      	ldr	r3, [r3, #0]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030220 	.word	0x00030220

000d51fc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <set_system_mode+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	685b      	ldr	r3, [r3, #4]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	00030220 	.word	0x00030220

000d520c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <system_delay_ms+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	695b      	ldr	r3, [r3, #20]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	00030220 	.word	0x00030220

000d521c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <application_thread_current+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	00030220 	.word	0x00030220

000d522c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <application_thread_invoke+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	00030220 	.word	0x00030220

000d523c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <system_thread_get_state+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030220 	.word	0x00030220

000d524c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b03      	ldr	r3, [pc, #12]	; (d525c <system_ctrl_set_app_request_handler+0x10>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5256:	9301      	str	r3, [sp, #4]
   d5258:	bd08      	pop	{r3, pc}
   d525a:	0000      	.short	0x0000
   d525c:	00030220 	.word	0x00030220

000d5260 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b03      	ldr	r3, [pc, #12]	; (d5270 <system_ctrl_set_result+0x10>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d526a:	9301      	str	r3, [sp, #4]
   d526c:	bd08      	pop	{r3, pc}
   d526e:	0000      	.short	0x0000
   d5270:	00030220 	.word	0x00030220

000d5274 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <spark_variable+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	681b      	ldr	r3, [r3, #0]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030244 	.word	0x00030244

000d5284 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <spark_function+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	685b      	ldr	r3, [r3, #4]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030244 	.word	0x00030244

000d5294 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <spark_process+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	689b      	ldr	r3, [r3, #8]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030244 	.word	0x00030244

000d52a4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <spark_cloud_flag_connected+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	695b      	ldr	r3, [r3, #20]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030244 	.word	0x00030244

000d52b4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <spark_deviceID+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	69db      	ldr	r3, [r3, #28]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030244 	.word	0x00030244

000d52c4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <spark_send_event+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	6a1b      	ldr	r3, [r3, #32]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	00030244 	.word	0x00030244

000d52d4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <spark_subscribe+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	00030244 	.word	0x00030244

000d52e4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <spark_sync_time+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	00030244 	.word	0x00030244

000d52f4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <spark_sync_time_pending+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030244 	.word	0x00030244

000d5304 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030244 	.word	0x00030244

000d5314 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <network_connect+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	685b      	ldr	r3, [r3, #4]
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030240 	.word	0x00030240

000d5324 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <network_connecting+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	689b      	ldr	r3, [r3, #8]
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	00030240 	.word	0x00030240

000d5334 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <network_disconnect+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	68db      	ldr	r3, [r3, #12]
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030240 	.word	0x00030240

000d5344 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <network_ready+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	691b      	ldr	r3, [r3, #16]
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030240 	.word	0x00030240

000d5354 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <network_on+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	695b      	ldr	r3, [r3, #20]
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030240 	.word	0x00030240

000d5364 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <network_off+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	699b      	ldr	r3, [r3, #24]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030240 	.word	0x00030240

000d5374 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <network_listen+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	69db      	ldr	r3, [r3, #28]
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	00030240 	.word	0x00030240

000d5384 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <network_listening+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	6a1b      	ldr	r3, [r3, #32]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030240 	.word	0x00030240

000d5394 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <network_set_listen_timeout+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030240 	.word	0x00030240

000d53a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <network_get_listen_timeout+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	00030240 	.word	0x00030240

000d53b4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <malloc+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	681b      	ldr	r3, [r3, #0]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	0003021c 	.word	0x0003021c

000d53c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <free+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	685b      	ldr	r3, [r3, #4]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	0003021c 	.word	0x0003021c

000d53d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <realloc+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	689b      	ldr	r3, [r3, #8]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003021c 	.word	0x0003021c

000d53e4 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <siscanf+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	699b      	ldr	r3, [r3, #24]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	0003021c 	.word	0x0003021c

000d53f4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <snprintf+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	69db      	ldr	r3, [r3, #28]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	0003021c 	.word	0x0003021c

000d5404 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <abort+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	0003021c 	.word	0x0003021c

000d5414 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <_malloc_r+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	0003021c 	.word	0x0003021c

000d5424 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5424:	2100      	movs	r1, #0
   d5426:	f7ff bef1 	b.w	d520c <system_delay_ms>

000d542a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d542a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d542c:	6883      	ldr	r3, [r0, #8]
   d542e:	4604      	mov	r4, r0
   d5430:	b90b      	cbnz	r3, d5436 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5432:	f001 f9e8 	bl	d6806 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5436:	68c3      	ldr	r3, [r0, #12]
   d5438:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d543a:	68a3      	ldr	r3, [r4, #8]
   d543c:	b11b      	cbz	r3, d5446 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d543e:	2203      	movs	r2, #3
   d5440:	4621      	mov	r1, r4
   d5442:	4620      	mov	r0, r4
   d5444:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5446:	4620      	mov	r0, r4
   d5448:	2110      	movs	r1, #16
}
   d544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d544e:	f001 b9d8 	b.w	d6802 <_ZdlPvj>

000d5452 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5452:	4770      	bx	lr

000d5454 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5454:	2000      	movs	r0, #0
   d5456:	4770      	bx	lr

000d5458 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5458:	b510      	push	{r4, lr}
   d545a:	2110      	movs	r1, #16
   d545c:	4604      	mov	r4, r0
   d545e:	f001 f9d0 	bl	d6802 <_ZdlPvj>
   d5462:	4620      	mov	r0, r4
   d5464:	bd10      	pop	{r4, pc}

000d5466 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5466:	b508      	push	{r3, lr}
      { delete this; }
   d5468:	b108      	cbz	r0, d546e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d546a:	f7ff fff5 	bl	d5458 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d546e:	bd08      	pop	{r3, pc}

000d5470 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5470:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5472:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5474:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5476:	b113      	cbz	r3, d547e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5478:	2203      	movs	r2, #3
   d547a:	4601      	mov	r1, r0
   d547c:	4798      	blx	r3
    }
   d547e:	4620      	mov	r0, r4
   d5480:	bd10      	pop	{r4, pc}

000d5482 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5482:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5484:	68c4      	ldr	r4, [r0, #12]
   d5486:	b1ec      	cbz	r4, d54c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5488:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d548a:	2b02      	cmp	r3, #2
   d548c:	d102      	bne.n	d5494 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d548e:	68e0      	ldr	r0, [r4, #12]
   d5490:	f7ff ff98 	bl	d53c4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5494:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5496:	b135      	cbz	r5, d54a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5498:	4628      	mov	r0, r5
   d549a:	f7ff ffe9 	bl	d5470 <_ZNSt14_Function_baseD1Ev>
   d549e:	2110      	movs	r1, #16
   d54a0:	4628      	mov	r0, r5
   d54a2:	f001 f9ae 	bl	d6802 <_ZdlPvj>
   d54a6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d54a8:	b135      	cbz	r5, d54b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d54aa:	4628      	mov	r0, r5
   d54ac:	f7ff ffe0 	bl	d5470 <_ZNSt14_Function_baseD1Ev>
   d54b0:	2110      	movs	r1, #16
   d54b2:	4628      	mov	r0, r5
   d54b4:	f001 f9a5 	bl	d6802 <_ZdlPvj>
   d54b8:	4620      	mov	r0, r4
   d54ba:	2114      	movs	r1, #20
   d54bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d54c0:	f001 b99f 	b.w	d6802 <_ZdlPvj>
   d54c4:	bd38      	pop	{r3, r4, r5, pc}

000d54c6 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d54c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d54c8:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d54ca:	4668      	mov	r0, sp
   d54cc:	f000 fdca 	bl	d6064 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54d0:	68a3      	ldr	r3, [r4, #8]
   d54d2:	b90b      	cbnz	r3, d54d8 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d54d4:	f001 f997 	bl	d6806 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54d8:	68e3      	ldr	r3, [r4, #12]
   d54da:	4669      	mov	r1, sp
   d54dc:	4620      	mov	r0, r4
   d54de:	4798      	blx	r3
   d54e0:	4604      	mov	r4, r0
   d54e2:	4668      	mov	r0, sp
   d54e4:	f000 fd77 	bl	d5fd6 <_ZN6StringD1Ev>
}
   d54e8:	4620      	mov	r0, r4
   d54ea:	b004      	add	sp, #16
   d54ec:	bd10      	pop	{r4, pc}

000d54ee <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d54ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d54f0:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d54f2:	b085      	sub	sp, #20
   d54f4:	4607      	mov	r7, r0
   d54f6:	460e      	mov	r6, r1
   d54f8:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d54fa:	2100      	movs	r1, #0
   d54fc:	4622      	mov	r2, r4
   d54fe:	4668      	mov	r0, sp
   d5500:	f001 fffb 	bl	d74fa <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5504:	2200      	movs	r2, #0
   d5506:	4669      	mov	r1, sp
   d5508:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d550a:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d550e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5510:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5512:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5514:	f7ff feb6 	bl	d5284 <spark_function>
}
   d5518:	b005      	add	sp, #20
   d551a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d551c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d551c:	b513      	push	{r0, r1, r4, lr}
   d551e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5520:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5524:	2300      	movs	r3, #0
   d5526:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5528:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d552a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d552c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d552e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5530:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5532:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5534:	f7fe fe85 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5538:	4620      	mov	r0, r4
   d553a:	b002      	add	sp, #8
   d553c:	bd10      	pop	{r4, pc}

000d553e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d553e:	680b      	ldr	r3, [r1, #0]
   d5540:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5542:	b113      	cbz	r3, d554a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5544:	685a      	ldr	r2, [r3, #4]
   d5546:	3201      	adds	r2, #1
   d5548:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d554a:	4770      	bx	lr

000d554c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d554c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d554e:	460c      	mov	r4, r1
   d5550:	ad02      	add	r5, sp, #8
   d5552:	f854 3b04 	ldr.w	r3, [r4], #4
   d5556:	f845 3d08 	str.w	r3, [r5, #-8]!
   d555a:	4606      	mov	r6, r0
   d555c:	460f      	mov	r7, r1
   d555e:	a801      	add	r0, sp, #4
   d5560:	4621      	mov	r1, r4
   d5562:	f7ff ffec 	bl	d553e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5566:	4629      	mov	r1, r5
   d5568:	4630      	mov	r0, r6
   d556a:	f7ff ffd7 	bl	d551c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d556e:	a801      	add	r0, sp, #4
   d5570:	f7fe fe67 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5574:	4620      	mov	r0, r4
   d5576:	f7fe fe64 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d557a:	4638      	mov	r0, r7
   d557c:	2108      	movs	r1, #8
   d557e:	f001 f940 	bl	d6802 <_ZdlPvj>
        return p;
    }
   d5582:	4630      	mov	r0, r6
   d5584:	b003      	add	sp, #12
   d5586:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5588 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5588:	b513      	push	{r0, r1, r4, lr}
   d558a:	460b      	mov	r3, r1
   d558c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d558e:	c803      	ldmia	r0, {r0, r1}
   d5590:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5594:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5598:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d559c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d55a0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d55a4:	b002      	add	sp, #8
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55a8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d55aa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55ac:	b90a      	cbnz	r2, d55b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d55ae:	f001 f92a 	bl	d6806 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55b2:	68c3      	ldr	r3, [r0, #12]
    }
   d55b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55b8:	4718      	bx	r3

000d55ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d55ba:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d55bc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d55be:	f100 0110 	add.w	r1, r0, #16
   d55c2:	f7ff fff1 	bl	d55a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d55c6:	bd08      	pop	{r3, pc}

000d55c8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55c8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d55ca:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55cc:	b90a      	cbnz	r2, d55d2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d55ce:	f001 f91a 	bl	d6806 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55d2:	68c3      	ldr	r3, [r0, #12]
    }
   d55d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55d8:	4718      	bx	r3

000d55da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d55da:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d55dc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d55de:	f100 0110 	add.w	r1, r0, #16
   d55e2:	f7ff fff1 	bl	d55c8 <_ZNKSt8functionIFvRKbEEclES1_>
   d55e6:	bd08      	pop	{r3, pc}

000d55e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d55e8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55ea:	2300      	movs	r3, #0
   d55ec:	6083      	str	r3, [r0, #8]
   d55ee:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d55f0:	4604      	mov	r4, r0
   d55f2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d55f4:	b12b      	cbz	r3, d5602 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d55f6:	2202      	movs	r2, #2
   d55f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d55fa:	68eb      	ldr	r3, [r5, #12]
   d55fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d55fe:	68ab      	ldr	r3, [r5, #8]
   d5600:	60a3      	str	r3, [r4, #8]
	}
    }
   d5602:	4620      	mov	r0, r4
   d5604:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5608 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d560c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5610:	b086      	sub	sp, #24
   d5612:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5614:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5618:	808b      	strh	r3, [r1, #4]
   d561a:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d561c:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d561e:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d5622:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5624:	f04f 0002 	mov.w	r0, #2
   d5628:	e8d4 1f4f 	ldrexb	r1, [r4]
   d562c:	4299      	cmp	r1, r3
   d562e:	d103      	bne.n	d5638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5630:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5634:	2d00      	cmp	r5, #0
   d5636:	d1f7      	bne.n	d5628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5638:	d002      	beq.n	d5640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d563a:	f88d 1000 	strb.w	r1, [sp]
   d563e:	e06b      	b.n	d5718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5640:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5644:	bf1e      	ittt	ne
   d5646:	60e7      	strne	r7, [r4, #12]
   d5648:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d564a:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d564c:	2301      	movs	r3, #1
   d564e:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5652:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5654:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5656:	f104 0308 	add.w	r3, r4, #8
   d565a:	f3bf 8f5f 	dmb	sy
   d565e:	e853 6f00 	ldrex	r6, [r3]
   d5662:	e843 0200 	strex	r2, r0, [r3]
   d5666:	2a00      	cmp	r2, #0
   d5668:	d1f9      	bne.n	d565e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d566a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d566e:	2e00      	cmp	r6, #0
   d5670:	d052      	beq.n	d5718 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5672:	f7ff fdd3 	bl	d521c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5676:	b120      	cbz	r0, d5682 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5678:	4629      	mov	r1, r5
   d567a:	4630      	mov	r0, r6
   d567c:	f7ff ff94 	bl	d55a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5680:	e043      	b.n	d570a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5682:	4631      	mov	r1, r6
   d5684:	4668      	mov	r0, sp
   d5686:	f7ff ffaf 	bl	d55e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d568a:	68e0      	ldr	r0, [r4, #12]
   d568c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5690:	b108      	cbz	r0, d5696 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5692:	f001 ff75 	bl	d7580 <strdup>
   d5696:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5698:	2010      	movs	r0, #16
   d569a:	f8ad 5014 	strh.w	r5, [sp, #20]
   d569e:	f7fe fcfa 	bl	d4096 <_Znwj>
   d56a2:	4605      	mov	r5, r0
   d56a4:	b330      	cbz	r0, d56f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56a6:	f04f 0800 	mov.w	r8, #0
   d56aa:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ae:	2018      	movs	r0, #24
   d56b0:	f7fe fcf1 	bl	d4096 <_Znwj>
   d56b4:	4604      	mov	r4, r0
   d56b6:	b1c0      	cbz	r0, d56ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56b8:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d56bc:	4601      	mov	r1, r0
   d56be:	4668      	mov	r0, sp
   d56c0:	f7ff ff62 	bl	d5588 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56c4:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d56c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56c8:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56ca:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d56cc:	9202      	str	r2, [sp, #8]
   d56ce:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56d0:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d56d6:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d56d8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d56dc:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56e0:	9b04      	ldr	r3, [sp, #16]
   d56e2:	9203      	str	r2, [sp, #12]
   d56e4:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d56e6:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d56ea:	4b0e      	ldr	r3, [pc, #56]	; (d5724 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d56ec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d56ee:	4b0e      	ldr	r3, [pc, #56]	; (d5728 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56f0:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d56f2:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d56f4:	9804      	ldr	r0, [sp, #16]
   d56f6:	f7ff fe65 	bl	d53c4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56fa:	4668      	mov	r0, sp
   d56fc:	f7ff feb8 	bl	d5470 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5700:	2200      	movs	r2, #0
   d5702:	4629      	mov	r1, r5
   d5704:	4809      	ldr	r0, [pc, #36]	; (d572c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5706:	f7ff fd91 	bl	d522c <application_thread_invoke>
   d570a:	4630      	mov	r0, r6
   d570c:	f7ff feb0 	bl	d5470 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5710:	2110      	movs	r1, #16
   d5712:	4630      	mov	r0, r6
   d5714:	f001 f875 	bl	d6802 <_ZdlPvj>
   d5718:	4638      	mov	r0, r7
   d571a:	f7ff fe53 	bl	d53c4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d571e:	b006      	add	sp, #24
   d5720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5724:	000d55bb 	.word	0x000d55bb
   d5728:	000d5819 	.word	0x000d5819
   d572c:	000d542b 	.word	0x000d542b

000d5730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5734:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5736:	ad07      	add	r5, sp, #28
   d5738:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d573c:	4606      	mov	r6, r0
   d573e:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5740:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5742:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5744:	460f      	mov	r7, r1
   d5746:	4690      	mov	r8, r2
   d5748:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d574c:	f8c5 b004 	str.w	fp, [r5, #4]
   d5750:	f8c5 b008 	str.w	fp, [r5, #8]
   d5754:	9307      	str	r3, [sp, #28]
   d5756:	f7fe fc9e 	bl	d4096 <_Znwj>
   d575a:	4604      	mov	r4, r0
   d575c:	b138      	cbz	r0, d576e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d575e:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5762:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5766:	f8c0 b004 	str.w	fp, [r0, #4]
   d576a:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d576e:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5770:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5772:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5774:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5776:	f7fe fc8e 	bl	d4096 <_Znwj>
   d577a:	b128      	cbz	r0, d5788 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d577c:	2301      	movs	r3, #1
   d577e:	6043      	str	r3, [r0, #4]
   d5780:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5782:	4b23      	ldr	r3, [pc, #140]	; (d5810 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5784:	6003      	str	r3, [r0, #0]
   d5786:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5788:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d578a:	4b22      	ldr	r3, [pc, #136]	; (d5814 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d578c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d578e:	2008      	movs	r0, #8
   d5790:	f7fe fc81 	bl	d4096 <_Znwj>
   d5794:	4604      	mov	r4, r0
   d5796:	b128      	cbz	r0, d57a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5798:	9b03      	ldr	r3, [sp, #12]
   d579a:	f840 3b04 	str.w	r3, [r0], #4
   d579e:	a904      	add	r1, sp, #16
   d57a0:	f7ff fecd 	bl	d553e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d57a4:	9500      	str	r5, [sp, #0]
   d57a6:	fa5f f38a 	uxtb.w	r3, sl
   d57aa:	464a      	mov	r2, r9
   d57ac:	4641      	mov	r1, r8
   d57ae:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d57b0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d57b2:	f7ff fd87 	bl	d52c4 <spark_send_event>
   d57b6:	b9b8      	cbnz	r0, d57e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d57b8:	9b03      	ldr	r3, [sp, #12]
   d57ba:	785b      	ldrb	r3, [r3, #1]
   d57bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d57c0:	b993      	cbnz	r3, d57e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57c2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d57c6:	a905      	add	r1, sp, #20
   d57c8:	a803      	add	r0, sp, #12
   d57ca:	9205      	str	r2, [sp, #20]
   d57cc:	f8ad 3018 	strh.w	r3, [sp, #24]
   d57d0:	f7ff ff1a 	bl	d5608 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d57d4:	9805      	ldr	r0, [sp, #20]
   d57d6:	f7ff fdf5 	bl	d53c4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d57da:	a805      	add	r0, sp, #20
   d57dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d57de:	f7ff feb5 	bl	d554c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57e2:	a806      	add	r0, sp, #24
   d57e4:	f7fe fd2d 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d57e8:	9b03      	ldr	r3, [sp, #12]
   d57ea:	9305      	str	r3, [sp, #20]
   d57ec:	a904      	add	r1, sp, #16
   d57ee:	a806      	add	r0, sp, #24
   d57f0:	f7ff fea5 	bl	d553e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d57f4:	a905      	add	r1, sp, #20
   d57f6:	4630      	mov	r0, r6
   d57f8:	f7ff fe90 	bl	d551c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57fc:	a806      	add	r0, sp, #24
   d57fe:	f7fe fd20 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5802:	a804      	add	r0, sp, #16
   d5804:	f7fe fd1d 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5808:	4630      	mov	r0, r6
   d580a:	b00b      	add	sp, #44	; 0x2c
   d580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5810:	000d80b4 	.word	0x000d80b4
   d5814:	000d5985 	.word	0x000d5985

000d5818 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5818:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d581a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d581c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d581e:	d006      	beq.n	d582e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5820:	2a03      	cmp	r2, #3
   d5822:	d017      	beq.n	d5854 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5824:	2a01      	cmp	r2, #1
   d5826:	d121      	bne.n	d586c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5828:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d582a:	6003      	str	r3, [r0, #0]
	      break;
   d582c:	e01e      	b.n	d586c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d582e:	2018      	movs	r0, #24
   d5830:	680e      	ldr	r6, [r1, #0]
   d5832:	f7fe fc30 	bl	d4096 <_Znwj>
   d5836:	4605      	mov	r5, r0
   d5838:	b150      	cbz	r0, d5850 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d583a:	4631      	mov	r1, r6
   d583c:	f7ff fed4 	bl	d55e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5840:	6930      	ldr	r0, [r6, #16]
   d5842:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5846:	b108      	cbz	r0, d584c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5848:	f001 fe9a 	bl	d7580 <strdup>
   d584c:	6128      	str	r0, [r5, #16]
   d584e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5850:	6025      	str	r5, [r4, #0]
   d5852:	e00b      	b.n	d586c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5854:	6804      	ldr	r4, [r0, #0]
   d5856:	b14c      	cbz	r4, d586c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5858:	6920      	ldr	r0, [r4, #16]
   d585a:	f7ff fdb3 	bl	d53c4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d585e:	4620      	mov	r0, r4
   d5860:	f7ff fe06 	bl	d5470 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5864:	2118      	movs	r1, #24
   d5866:	4620      	mov	r0, r4
   d5868:	f000 ffcb 	bl	d6802 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d586c:	2000      	movs	r0, #0
   d586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5870 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5870:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5872:	2300      	movs	r3, #0
   d5874:	6083      	str	r3, [r0, #8]
   d5876:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5878:	4604      	mov	r4, r0
   d587a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d587c:	b12b      	cbz	r3, d588a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d587e:	2202      	movs	r2, #2
   d5880:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5882:	68eb      	ldr	r3, [r5, #12]
   d5884:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5886:	68ab      	ldr	r3, [r5, #8]
   d5888:	60a3      	str	r3, [r4, #8]
	}
    }
   d588a:	4620      	mov	r0, r4
   d588c:	bd38      	pop	{r3, r4, r5, pc}

000d588e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d588e:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5890:	b570      	push	{r4, r5, r6, lr}
   d5892:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5894:	d006      	beq.n	d58a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5896:	2a03      	cmp	r2, #3
   d5898:	d011      	beq.n	d58be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d589a:	2a01      	cmp	r2, #1
   d589c:	d118      	bne.n	d58d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d589e:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58a0:	6003      	str	r3, [r0, #0]
	      break;
   d58a2:	e015      	b.n	d58d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58a4:	2014      	movs	r0, #20
   d58a6:	680e      	ldr	r6, [r1, #0]
   d58a8:	f7fe fbf5 	bl	d4096 <_Znwj>
   d58ac:	4605      	mov	r5, r0
   d58ae:	b120      	cbz	r0, d58ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58b0:	4631      	mov	r1, r6
   d58b2:	f7ff ffdd 	bl	d5870 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d58b6:	7c33      	ldrb	r3, [r6, #16]
   d58b8:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58ba:	6025      	str	r5, [r4, #0]
   d58bc:	e008      	b.n	d58d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58be:	6804      	ldr	r4, [r0, #0]
   d58c0:	b134      	cbz	r4, d58d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58c2:	4620      	mov	r0, r4
   d58c4:	f7ff fdd4 	bl	d5470 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58c8:	2114      	movs	r1, #20
   d58ca:	4620      	mov	r0, r4
   d58cc:	f000 ff99 	bl	d6802 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d58d0:	2000      	movs	r0, #0
   d58d2:	bd70      	pop	{r4, r5, r6, pc}

000d58d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d58d4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d58d6:	2300      	movs	r3, #0
   d58d8:	b087      	sub	sp, #28
   d58da:	460c      	mov	r4, r1
   d58dc:	f3bf 8f5f 	dmb	sy
   d58e0:	e850 6f00 	ldrex	r6, [r0]
   d58e4:	e840 3200 	strex	r2, r3, [r0]
   d58e8:	2a00      	cmp	r2, #0
   d58ea:	d1f9      	bne.n	d58e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d58ec:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d58f0:	2e00      	cmp	r6, #0
   d58f2:	d03f      	beq.n	d5974 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d58f4:	4618      	mov	r0, r3
   d58f6:	f7ff fc91 	bl	d521c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d58fa:	4607      	mov	r7, r0
   d58fc:	b120      	cbz	r0, d5908 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d58fe:	4621      	mov	r1, r4
   d5900:	4630      	mov	r0, r6
   d5902:	f7ff fe61 	bl	d55c8 <_ZNKSt8functionIFvRKbEEclES1_>
   d5906:	e02e      	b.n	d5966 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5908:	4631      	mov	r1, r6
   d590a:	a801      	add	r0, sp, #4
   d590c:	f7ff ffb0 	bl	d5870 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5910:	7823      	ldrb	r3, [r4, #0]
   d5912:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5916:	2010      	movs	r0, #16
   d5918:	f7fe fbbd 	bl	d4096 <_Znwj>
   d591c:	4605      	mov	r5, r0
   d591e:	b1d0      	cbz	r0, d5956 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5920:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5922:	2014      	movs	r0, #20
   d5924:	f7fe fbb7 	bl	d4096 <_Znwj>
   d5928:	4604      	mov	r4, r0
   d592a:	b178      	cbz	r0, d594c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d592c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d592e:	4601      	mov	r1, r0
   d5930:	a801      	add	r0, sp, #4
   d5932:	f7ff fe29 	bl	d5588 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5936:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5938:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d593a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d593c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d593e:	9203      	str	r2, [sp, #12]
   d5940:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5942:	60e3      	str	r3, [r4, #12]
   d5944:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5948:	9204      	str	r2, [sp, #16]
   d594a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d594c:	4b0a      	ldr	r3, [pc, #40]	; (d5978 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d594e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5950:	4b0a      	ldr	r3, [pc, #40]	; (d597c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5952:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5954:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5956:	a801      	add	r0, sp, #4
   d5958:	f7ff fd8a 	bl	d5470 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d595c:	2200      	movs	r2, #0
   d595e:	4629      	mov	r1, r5
   d5960:	4807      	ldr	r0, [pc, #28]	; (d5980 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5962:	f7ff fc63 	bl	d522c <application_thread_invoke>
   d5966:	4630      	mov	r0, r6
   d5968:	f7ff fd82 	bl	d5470 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d596c:	2110      	movs	r1, #16
   d596e:	4630      	mov	r0, r6
   d5970:	f000 ff47 	bl	d6802 <_ZdlPvj>
        }
    }
   d5974:	b007      	add	sp, #28
   d5976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5978:	000d55db 	.word	0x000d55db
   d597c:	000d588f 	.word	0x000d588f
   d5980:	000d542b 	.word	0x000d542b

000d5984 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5984:	b530      	push	{r4, r5, lr}
   d5986:	b085      	sub	sp, #20
   d5988:	4604      	mov	r4, r0
   d598a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d598c:	4668      	mov	r0, sp
   d598e:	4611      	mov	r1, r2
   d5990:	f7ff fddc 	bl	d554c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5994:	b17c      	cbz	r4, d59b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5996:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5998:	4628      	mov	r0, r5
   d599a:	b10d      	cbz	r5, d59a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d599c:	f001 fdf0 	bl	d7580 <strdup>
   d59a0:	9002      	str	r0, [sp, #8]
   d59a2:	a902      	add	r1, sp, #8
   d59a4:	4668      	mov	r0, sp
   d59a6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d59aa:	f7ff fe2d 	bl	d5608 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d59ae:	9802      	ldr	r0, [sp, #8]
   d59b0:	f7ff fd08 	bl	d53c4 <free>
   d59b4:	e01d      	b.n	d59f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d59b6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d59b8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d59bc:	f04f 0201 	mov.w	r2, #1
   d59c0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d59c4:	42a3      	cmp	r3, r4
   d59c6:	d103      	bne.n	d59d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d59c8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d59cc:	2900      	cmp	r1, #0
   d59ce:	d1f7      	bne.n	d59c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d59d0:	d002      	beq.n	d59d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d59d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d59d6:	e00c      	b.n	d59f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d59d8:	f110 010c 	adds.w	r1, r0, #12
   d59dc:	f04f 0301 	mov.w	r3, #1
   d59e0:	bf18      	it	ne
   d59e2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d59e4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d59e8:	3004      	adds	r0, #4
   d59ea:	f800 3c03 	strb.w	r3, [r0, #-3]
   d59ee:	f7ff ff71 	bl	d58d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d59f2:	a801      	add	r0, sp, #4
   d59f4:	f7fe fc25 	bl	d4242 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d59f8:	b005      	add	sp, #20
   d59fa:	bd30      	pop	{r4, r5, pc}

000d59fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59fc:	2200      	movs	r2, #0
   d59fe:	4611      	mov	r1, r2
   d5a00:	6840      	ldr	r0, [r0, #4]
   d5a02:	f7ff bcbf 	b.w	d5384 <network_listening>

000d5a06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a06:	2200      	movs	r2, #0
   d5a08:	4611      	mov	r1, r2
   d5a0a:	6840      	ldr	r0, [r0, #4]
   d5a0c:	f7ff bcca 	b.w	d53a4 <network_get_listen_timeout>

000d5a10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a10:	2200      	movs	r2, #0
   d5a12:	6840      	ldr	r0, [r0, #4]
   d5a14:	f7ff bcbe 	b.w	d5394 <network_set_listen_timeout>

000d5a18 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a18:	2200      	movs	r2, #0
   d5a1a:	f081 0101 	eor.w	r1, r1, #1
   d5a1e:	6840      	ldr	r0, [r0, #4]
   d5a20:	f7ff bca8 	b.w	d5374 <network_listen>

000d5a24 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5a24:	2300      	movs	r3, #0
   d5a26:	461a      	mov	r2, r3
   d5a28:	4619      	mov	r1, r3
   d5a2a:	6840      	ldr	r0, [r0, #4]
   d5a2c:	f7ff bc9a 	b.w	d5364 <network_off>

000d5a30 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a30:	2300      	movs	r3, #0
   d5a32:	461a      	mov	r2, r3
   d5a34:	4619      	mov	r1, r3
   d5a36:	6840      	ldr	r0, [r0, #4]
   d5a38:	f7ff bc8c 	b.w	d5354 <network_on>

000d5a3c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a3c:	2200      	movs	r2, #0
   d5a3e:	4611      	mov	r1, r2
   d5a40:	6840      	ldr	r0, [r0, #4]
   d5a42:	f7ff bc7f 	b.w	d5344 <network_ready>

000d5a46 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a46:	2200      	movs	r2, #0
   d5a48:	4611      	mov	r1, r2
   d5a4a:	6840      	ldr	r0, [r0, #4]
   d5a4c:	f7ff bc6a 	b.w	d5324 <network_connecting>

000d5a50 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a50:	2200      	movs	r2, #0
   d5a52:	2102      	movs	r1, #2
   d5a54:	6840      	ldr	r0, [r0, #4]
   d5a56:	f7ff bc6d 	b.w	d5334 <network_disconnect>

000d5a5a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a5a:	2300      	movs	r3, #0
   d5a5c:	461a      	mov	r2, r3
   d5a5e:	6840      	ldr	r0, [r0, #4]
   d5a60:	f7ff bc58 	b.w	d5314 <network_connect>

000d5a64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a64:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a66:	2203      	movs	r2, #3
   d5a68:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a6a:	4a02      	ldr	r2, [pc, #8]	; (d5a74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a6c:	601a      	str	r2, [r3, #0]
   d5a6e:	4770      	bx	lr
   d5a70:	2003e378 	.word	0x2003e378
   d5a74:	000d80d0 	.word	0x000d80d0

000d5a78 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5a78:	4770      	bx	lr

000d5a7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a7c:	4606      	mov	r6, r0
   d5a7e:	4615      	mov	r5, r2
   d5a80:	460c      	mov	r4, r1
   d5a82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a84:	42bc      	cmp	r4, r7
   d5a86:	d006      	beq.n	d5a96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5a88:	6833      	ldr	r3, [r6, #0]
   d5a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5a8e:	689b      	ldr	r3, [r3, #8]
   d5a90:	4630      	mov	r0, r6
   d5a92:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a94:	e7f6      	b.n	d5a84 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5a96:	4628      	mov	r0, r5
   d5a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a9a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5a9a:	2200      	movs	r2, #0
   d5a9c:	7c00      	ldrb	r0, [r0, #16]
   d5a9e:	f7ff bac5 	b.w	d502c <HAL_I2C_Write_Data>

000d5aa2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5aa2:	2100      	movs	r1, #0
   d5aa4:	7c00      	ldrb	r0, [r0, #16]
   d5aa6:	f7ff bac9 	b.w	d503c <HAL_I2C_Available_Data>

000d5aaa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5aaa:	2100      	movs	r1, #0
   d5aac:	7c00      	ldrb	r0, [r0, #16]
   d5aae:	f7ff bacd 	b.w	d504c <HAL_I2C_Read_Data>

000d5ab2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5ab2:	2100      	movs	r1, #0
   d5ab4:	7c00      	ldrb	r0, [r0, #16]
   d5ab6:	f7ff bad1 	b.w	d505c <HAL_I2C_Peek_Data>

000d5aba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5aba:	2100      	movs	r1, #0
   d5abc:	7c00      	ldrb	r0, [r0, #16]
   d5abe:	f7ff bad5 	b.w	d506c <HAL_I2C_Flush_Data>

000d5ac2 <_ZN7TwoWireD0Ev>:
   d5ac2:	b510      	push	{r4, lr}
   d5ac4:	2114      	movs	r1, #20
   d5ac6:	4604      	mov	r4, r0
   d5ac8:	f000 fe9b 	bl	d6802 <_ZdlPvj>
   d5acc:	4620      	mov	r0, r4
   d5ace:	bd10      	pop	{r4, pc}

000d5ad0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5ad0:	b510      	push	{r4, lr}
   d5ad2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ad8:	4608      	mov	r0, r1
   d5ada:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5adc:	2100      	movs	r1, #0
   d5ade:	4b04      	ldr	r3, [pc, #16]	; (d5af0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5ae0:	7420      	strb	r0, [r4, #16]
   d5ae2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5ae4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5ae6:	f7ff fad1 	bl	d508c <HAL_I2C_Init>

}
   d5aea:	4620      	mov	r0, r4
   d5aec:	bd10      	pop	{r4, pc}
   d5aee:	bf00      	nop
   d5af0:	000d8104 	.word	0x000d8104

000d5af4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5af4:	2100      	movs	r1, #0
   d5af6:	7c00      	ldrb	r0, [r0, #16]
   d5af8:	f7ff bac0 	b.w	d507c <HAL_I2C_Is_Enabled>

000d5afc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5afc:	f7ff ba86 	b.w	d500c <HAL_Interrupts_Disable_All>

000d5b00 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5b00:	f7ff ba7c 	b.w	d4ffc <HAL_Interrupts_Enable_All>

000d5b04 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b04:	4770      	bx	lr

000d5b06 <_ZN9IPAddressD0Ev>:
   d5b06:	b510      	push	{r4, lr}
   d5b08:	2118      	movs	r1, #24
   d5b0a:	4604      	mov	r4, r0
   d5b0c:	f000 fe79 	bl	d6802 <_ZdlPvj>
   d5b10:	4620      	mov	r0, r4
   d5b12:	bd10      	pop	{r4, pc}

000d5b14 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b14:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b16:	7d03      	ldrb	r3, [r0, #20]
   d5b18:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b1a:	b08d      	sub	sp, #52	; 0x34
   d5b1c:	460e      	mov	r6, r1
   d5b1e:	f100 0704 	add.w	r7, r0, #4
   d5b22:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b26:	d002      	beq.n	d5b2e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5b28:	f100 0508 	add.w	r5, r0, #8
   d5b2c:	e018      	b.n	d5b60 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b2e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b30:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b32:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b36:	232f      	movs	r3, #47	; 0x2f
   d5b38:	462a      	mov	r2, r5
   d5b3a:	200a      	movs	r0, #10
   d5b3c:	f7ff faae 	bl	d509c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5b40:	4628      	mov	r0, r5
   d5b42:	f001 fd38 	bl	d75b6 <strlen>
   d5b46:	6833      	ldr	r3, [r6, #0]
   d5b48:	4602      	mov	r2, r0
   d5b4a:	68db      	ldr	r3, [r3, #12]
   d5b4c:	4629      	mov	r1, r5
   d5b4e:	4630      	mov	r0, r6
   d5b50:	4798      	blx	r3
   d5b52:	e00f      	b.n	d5b74 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5b54:	b124      	cbz	r4, d5b60 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5b56:	212e      	movs	r1, #46	; 0x2e
   d5b58:	4630      	mov	r0, r6
   d5b5a:	f000 f9c7 	bl	d5eec <_ZN5Print5printEc>
   d5b5e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5b60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b64:	220a      	movs	r2, #10
   d5b66:	4630      	mov	r0, r6
   d5b68:	f000 f9f0 	bl	d5f4c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b6c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b6e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b70:	d1f0      	bne.n	d5b54 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b72:	4620      	mov	r0, r4
    }
    return n;
}
   d5b74:	b00d      	add	sp, #52	; 0x34
   d5b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b78 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5b78:	b510      	push	{r4, lr}
   d5b7a:	4b05      	ldr	r3, [pc, #20]	; (d5b90 <_ZN9IPAddressC1Ev+0x18>)
   d5b7c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b7e:	2211      	movs	r2, #17
   d5b80:	f840 3b04 	str.w	r3, [r0], #4
   d5b84:	2100      	movs	r1, #0
   d5b86:	f001 fcb8 	bl	d74fa <memset>
{
    clear();
}
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	bd10      	pop	{r4, pc}
   d5b8e:	bf00      	nop
   d5b90:	000d812c 	.word	0x000d812c

000d5b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b94:	4603      	mov	r3, r0
   d5b96:	4a07      	ldr	r2, [pc, #28]	; (d5bb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5b98:	b510      	push	{r4, lr}
   d5b9a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5b9e:	f101 0210 	add.w	r2, r1, #16
   d5ba2:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ba6:	f843 4b04 	str.w	r4, [r3], #4
   d5baa:	4291      	cmp	r1, r2
   d5bac:	d1f9      	bne.n	d5ba2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5bae:	780a      	ldrb	r2, [r1, #0]
   d5bb0:	701a      	strb	r2, [r3, #0]
}
   d5bb2:	bd10      	pop	{r4, pc}
   d5bb4:	000d812c 	.word	0x000d812c

000d5bb8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5bb8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5bba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5bbe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5bc2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5bc6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5bca:	2304      	movs	r3, #4
   d5bcc:	6041      	str	r1, [r0, #4]
   d5bce:	7503      	strb	r3, [r0, #20]
   d5bd0:	bd10      	pop	{r4, pc}

000d5bd2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5bd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5bd4:	780d      	ldrb	r5, [r1, #0]
   d5bd6:	788b      	ldrb	r3, [r1, #2]
   d5bd8:	784a      	ldrb	r2, [r1, #1]
   d5bda:	78c9      	ldrb	r1, [r1, #3]
   d5bdc:	9100      	str	r1, [sp, #0]
   d5bde:	4629      	mov	r1, r5
   d5be0:	f7ff ffea 	bl	d5bb8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5be4:	b003      	add	sp, #12
   d5be6:	bd30      	pop	{r4, r5, pc}

000d5be8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5be8:	4b01      	ldr	r3, [pc, #4]	; (d5bf0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5bea:	4a02      	ldr	r2, [pc, #8]	; (d5bf4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5bec:	601a      	str	r2, [r3, #0]
   d5bee:	4770      	bx	lr
   d5bf0:	2003e380 	.word	0x2003e380
   d5bf4:	000d81f0 	.word	0x000d81f0

000d5bf8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bf8:	2200      	movs	r2, #0
   d5bfa:	4611      	mov	r1, r2
   d5bfc:	6840      	ldr	r0, [r0, #4]
   d5bfe:	f7ff bbc1 	b.w	d5384 <network_listening>

000d5c02 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c02:	2200      	movs	r2, #0
   d5c04:	4611      	mov	r1, r2
   d5c06:	6840      	ldr	r0, [r0, #4]
   d5c08:	f7ff bbcc 	b.w	d53a4 <network_get_listen_timeout>

000d5c0c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c0c:	2200      	movs	r2, #0
   d5c0e:	6840      	ldr	r0, [r0, #4]
   d5c10:	f7ff bbc0 	b.w	d5394 <network_set_listen_timeout>

000d5c14 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c14:	2200      	movs	r2, #0
   d5c16:	f081 0101 	eor.w	r1, r1, #1
   d5c1a:	6840      	ldr	r0, [r0, #4]
   d5c1c:	f7ff bbaa 	b.w	d5374 <network_listen>

000d5c20 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5c20:	2300      	movs	r3, #0
   d5c22:	461a      	mov	r2, r3
   d5c24:	4619      	mov	r1, r3
   d5c26:	6840      	ldr	r0, [r0, #4]
   d5c28:	f7ff bb9c 	b.w	d5364 <network_off>

000d5c2c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c2c:	2300      	movs	r3, #0
   d5c2e:	461a      	mov	r2, r3
   d5c30:	4619      	mov	r1, r3
   d5c32:	6840      	ldr	r0, [r0, #4]
   d5c34:	f7ff bb8e 	b.w	d5354 <network_on>

000d5c38 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c38:	2200      	movs	r2, #0
   d5c3a:	4611      	mov	r1, r2
   d5c3c:	6840      	ldr	r0, [r0, #4]
   d5c3e:	f7ff bb81 	b.w	d5344 <network_ready>

000d5c42 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c42:	2200      	movs	r2, #0
   d5c44:	4611      	mov	r1, r2
   d5c46:	6840      	ldr	r0, [r0, #4]
   d5c48:	f7ff bb6c 	b.w	d5324 <network_connecting>

000d5c4c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c4c:	2200      	movs	r2, #0
   d5c4e:	2102      	movs	r1, #2
   d5c50:	6840      	ldr	r0, [r0, #4]
   d5c52:	f7ff bb6f 	b.w	d5334 <network_disconnect>

000d5c56 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c56:	2300      	movs	r3, #0
   d5c58:	461a      	mov	r2, r3
   d5c5a:	6840      	ldr	r0, [r0, #4]
   d5c5c:	f7ff bb5a 	b.w	d5314 <network_connect>

000d5c60 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5c60:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c62:	4605      	mov	r5, r0
   d5c64:	b188      	cbz	r0, d5c8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c66:	6804      	ldr	r4, [r0, #0]
   d5c68:	b14c      	cbz	r4, d5c7e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5c6a:	68a3      	ldr	r3, [r4, #8]
   d5c6c:	b11b      	cbz	r3, d5c76 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c6e:	2203      	movs	r2, #3
   d5c70:	4621      	mov	r1, r4
   d5c72:	4620      	mov	r0, r4
   d5c74:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c76:	2110      	movs	r1, #16
   d5c78:	4620      	mov	r0, r4
   d5c7a:	f000 fdc2 	bl	d6802 <_ZdlPvj>
   d5c7e:	4628      	mov	r0, r5
   d5c80:	2114      	movs	r1, #20
      }
   d5c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c86:	f000 bdbc 	b.w	d6802 <_ZdlPvj>
   d5c8a:	bd38      	pop	{r3, r4, r5, pc}

000d5c8c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5c8c:	b110      	cbz	r0, d5c94 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5c8e:	6803      	ldr	r3, [r0, #0]
   d5c90:	685b      	ldr	r3, [r3, #4]
   d5c92:	4718      	bx	r3
   d5c94:	4770      	bx	lr

000d5c96 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5c96:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5c98:	6803      	ldr	r3, [r0, #0]
   d5c9a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5c9c:	b1bb      	cbz	r3, d5cce <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5c9e:	6858      	ldr	r0, [r3, #4]
   d5ca0:	f7ff f944 	bl	d4f2c <os_thread_is_current>
   d5ca4:	b978      	cbnz	r0, d5cc6 <_ZN6ThreadD1Ev+0x30>
   d5ca6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5ca8:	7c5a      	ldrb	r2, [r3, #17]
   d5caa:	b912      	cbnz	r2, d5cb2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5cac:	6858      	ldr	r0, [r3, #4]
   d5cae:	f7ff f945 	bl	d4f3c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5cb2:	6823      	ldr	r3, [r4, #0]
   d5cb4:	6858      	ldr	r0, [r3, #4]
   d5cb6:	f7ff f949 	bl	d4f4c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cba:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5cbc:	2300      	movs	r3, #0
   d5cbe:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5cc0:	b128      	cbz	r0, d5cce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5cc2:	f7ff ffcd 	bl	d5c60 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cc6:	6820      	ldr	r0, [r4, #0]
   d5cc8:	b108      	cbz	r0, d5cce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5cca:	f7ff ffc9 	bl	d5c60 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5cce:	4620      	mov	r0, r4
   d5cd0:	bd10      	pop	{r4, pc}
	...

000d5cd4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5cd4:	b538      	push	{r3, r4, r5, lr}
   d5cd6:	4b0c      	ldr	r3, [pc, #48]	; (d5d08 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5cd8:	6003      	str	r3, [r0, #0]
   d5cda:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cdc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5ce0:	b108      	cbz	r0, d5ce6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5ce2:	f7fe f9dc 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ce6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5cea:	b135      	cbz	r5, d5cfa <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cec:	4628      	mov	r0, r5
   d5cee:	f7ff ffd2 	bl	d5c96 <_ZN6ThreadD1Ev>
   d5cf2:	2104      	movs	r1, #4
   d5cf4:	4628      	mov	r0, r5
   d5cf6:	f000 fd84 	bl	d6802 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cfa:	68a0      	ldr	r0, [r4, #8]
   d5cfc:	b108      	cbz	r0, d5d02 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5cfe:	f7ff ffc5 	bl	d5c8c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5d02:	4620      	mov	r0, r4
   d5d04:	bd38      	pop	{r3, r4, r5, pc}
   d5d06:	bf00      	nop
   d5d08:	000d8224 	.word	0x000d8224

000d5d0c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5d0c:	b538      	push	{r3, r4, r5, lr}
   d5d0e:	4c0d      	ldr	r4, [pc, #52]	; (d5d44 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5d10:	4b0d      	ldr	r3, [pc, #52]	; (d5d48 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5d12:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5d14:	2500      	movs	r5, #0
   d5d16:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5d18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5d1c:	6063      	str	r3, [r4, #4]
   d5d1e:	60a5      	str	r5, [r4, #8]
   d5d20:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d24:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5d28:	f7ff f920 	bl	d4f6c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5d2c:	4b07      	ldr	r3, [pc, #28]	; (d5d4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5d2e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5d32:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5d34:	4620      	mov	r0, r4
   d5d36:	4a06      	ldr	r2, [pc, #24]	; (d5d50 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5d38:	4906      	ldr	r1, [pc, #24]	; (d5d54 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5d3e:	f000 bd5b 	b.w	d67f8 <__aeabi_atexit>
   d5d42:	bf00      	nop
   d5d44:	2003e384 	.word	0x2003e384
   d5d48:	000d8258 	.word	0x000d8258
   d5d4c:	000d8224 	.word	0x000d8224
   d5d50:	2003e2e4 	.word	0x2003e2e4
   d5d54:	000d5cd5 	.word	0x000d5cd5

000d5d58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d58:	2300      	movs	r3, #0
   d5d5a:	461a      	mov	r2, r3
   d5d5c:	6840      	ldr	r0, [r0, #4]
   d5d5e:	f7ff bad9 	b.w	d5314 <network_connect>

000d5d62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d62:	2200      	movs	r2, #0
   d5d64:	2102      	movs	r1, #2
   d5d66:	6840      	ldr	r0, [r0, #4]
   d5d68:	f7ff bae4 	b.w	d5334 <network_disconnect>

000d5d6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d6c:	2200      	movs	r2, #0
   d5d6e:	4611      	mov	r1, r2
   d5d70:	6840      	ldr	r0, [r0, #4]
   d5d72:	f7ff bad7 	b.w	d5324 <network_connecting>

000d5d76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5d76:	2200      	movs	r2, #0
   d5d78:	4611      	mov	r1, r2
   d5d7a:	6840      	ldr	r0, [r0, #4]
   d5d7c:	f7ff bae2 	b.w	d5344 <network_ready>

000d5d80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5d80:	2300      	movs	r3, #0
   d5d82:	461a      	mov	r2, r3
   d5d84:	4619      	mov	r1, r3
   d5d86:	6840      	ldr	r0, [r0, #4]
   d5d88:	f7ff bae4 	b.w	d5354 <network_on>

000d5d8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5d8c:	2300      	movs	r3, #0
   d5d8e:	461a      	mov	r2, r3
   d5d90:	4619      	mov	r1, r3
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	f7ff bae6 	b.w	d5364 <network_off>

000d5d98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5d98:	2200      	movs	r2, #0
   d5d9a:	f081 0101 	eor.w	r1, r1, #1
   d5d9e:	6840      	ldr	r0, [r0, #4]
   d5da0:	f7ff bae8 	b.w	d5374 <network_listen>

000d5da4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5da4:	2200      	movs	r2, #0
   d5da6:	6840      	ldr	r0, [r0, #4]
   d5da8:	f7ff baf4 	b.w	d5394 <network_set_listen_timeout>

000d5dac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5dac:	2200      	movs	r2, #0
   d5dae:	4611      	mov	r1, r2
   d5db0:	6840      	ldr	r0, [r0, #4]
   d5db2:	f7ff baf7 	b.w	d53a4 <network_get_listen_timeout>

000d5db6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5db6:	2200      	movs	r2, #0
   d5db8:	4611      	mov	r1, r2
   d5dba:	6840      	ldr	r0, [r0, #4]
   d5dbc:	f7ff bae2 	b.w	d5384 <network_listening>

000d5dc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5dc4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5dc6:	b095      	sub	sp, #84	; 0x54
   d5dc8:	4616      	mov	r6, r2
   d5dca:	460d      	mov	r5, r1
   d5dcc:	4607      	mov	r7, r0
    IPAddress addr;
   d5dce:	f7ff fed3 	bl	d5b78 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5dd2:	4621      	mov	r1, r4
   d5dd4:	2220      	movs	r2, #32
   d5dd6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5dd8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5dda:	f001 fb8e 	bl	d74fa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5dde:	2340      	movs	r3, #64	; 0x40
   d5de0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5de2:	4621      	mov	r1, r4
   d5de4:	466b      	mov	r3, sp
   d5de6:	aa0c      	add	r2, sp, #48	; 0x30
   d5de8:	4630      	mov	r0, r6
   d5dea:	f7ff f967 	bl	d50bc <netdb_getaddrinfo>
    if (!r) {
   d5dee:	4604      	mov	r4, r0
   d5df0:	2800      	cmp	r0, #0
   d5df2:	d144      	bne.n	d5e7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5df4:	4602      	mov	r2, r0
   d5df6:	2101      	movs	r1, #1
   d5df8:	6868      	ldr	r0, [r5, #4]
   d5dfa:	f7ff faa3 	bl	d5344 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5dfe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e00:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e02:	4622      	mov	r2, r4
   d5e04:	6868      	ldr	r0, [r5, #4]
   d5e06:	f7ff fa9d 	bl	d5344 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e0a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e0c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5e0e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e10:	2e00      	cmp	r6, #0
   d5e12:	d034      	beq.n	d5e7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5e14:	2900      	cmp	r1, #0
   d5e16:	d132      	bne.n	d5e7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e18:	6873      	ldr	r3, [r6, #4]
   d5e1a:	2b02      	cmp	r3, #2
   d5e1c:	d002      	beq.n	d5e24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5e1e:	2b0a      	cmp	r3, #10
   d5e20:	d009      	beq.n	d5e36 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5e22:	e02a      	b.n	d5e7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5e24:	f1b8 0f00 	cmp.w	r8, #0
   d5e28:	d027      	beq.n	d5e7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e2a:	6971      	ldr	r1, [r6, #20]
   d5e2c:	4638      	mov	r0, r7
   d5e2e:	3104      	adds	r1, #4
   d5e30:	f7ff fecf 	bl	d5bd2 <_ZN9IPAddressaSEPKh>
   d5e34:	e020      	b.n	d5e78 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e36:	f1b9 0f00 	cmp.w	r9, #0
   d5e3a:	d01e      	beq.n	d5e7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e3c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e3e:	2211      	movs	r2, #17
   d5e40:	a801      	add	r0, sp, #4
   d5e42:	f001 fb5a 	bl	d74fa <memset>
                    a.v = 6;
   d5e46:	2306      	movs	r3, #6
   d5e48:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e4c:	ad01      	add	r5, sp, #4
   d5e4e:	f104 0308 	add.w	r3, r4, #8
   d5e52:	3418      	adds	r4, #24
   d5e54:	6818      	ldr	r0, [r3, #0]
   d5e56:	6859      	ldr	r1, [r3, #4]
   d5e58:	462a      	mov	r2, r5
   d5e5a:	c203      	stmia	r2!, {r0, r1}
   d5e5c:	3308      	adds	r3, #8
   d5e5e:	42a3      	cmp	r3, r4
   d5e60:	4615      	mov	r5, r2
   d5e62:	d1f7      	bne.n	d5e54 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5e64:	a901      	add	r1, sp, #4
   d5e66:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5e68:	ad07      	add	r5, sp, #28
   d5e6a:	f7ff fe93 	bl	d5b94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e70:	1d3c      	adds	r4, r7, #4
   d5e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e74:	682b      	ldr	r3, [r5, #0]
   d5e76:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5e78:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e7a:	69f6      	ldr	r6, [r6, #28]
   d5e7c:	e7c8      	b.n	d5e10 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5e7e:	9800      	ldr	r0, [sp, #0]
   d5e80:	f7ff f914 	bl	d50ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5e84:	4638      	mov	r0, r7
   d5e86:	b015      	add	sp, #84	; 0x54
   d5e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5e8c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5e8c:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5e8e:	4a03      	ldr	r2, [pc, #12]	; (d5e9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e90:	601a      	str	r2, [r3, #0]
   d5e92:	2200      	movs	r2, #0
   d5e94:	605a      	str	r2, [r3, #4]
   d5e96:	4770      	bx	lr
   d5e98:	2003e554 	.word	0x2003e554
   d5e9c:	000d8258 	.word	0x000d8258

000d5ea0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ea2:	4606      	mov	r6, r0
   d5ea4:	460d      	mov	r5, r1
   d5ea6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5ea8:	2400      	movs	r4, #0
  while (size--) {
   d5eaa:	42bd      	cmp	r5, r7
   d5eac:	d00c      	beq.n	d5ec8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5eae:	6833      	ldr	r3, [r6, #0]
   d5eb0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5eb4:	689b      	ldr	r3, [r3, #8]
   d5eb6:	4630      	mov	r0, r6
   d5eb8:	4798      	blx	r3
     if (chunk>=0)
   d5eba:	2800      	cmp	r0, #0
   d5ebc:	db01      	blt.n	d5ec2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5ebe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5ec0:	e7f3      	b.n	d5eaa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5ec2:	2c00      	cmp	r4, #0
   d5ec4:	bf08      	it	eq
   d5ec6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5ec8:	4620      	mov	r0, r4
   d5eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ecc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5ecc:	b570      	push	{r4, r5, r6, lr}
   d5ece:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5ed0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5ed2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5ed4:	b149      	cbz	r1, d5eea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5ed6:	f001 fb6e 	bl	d75b6 <strlen>
   d5eda:	682b      	ldr	r3, [r5, #0]
   d5edc:	4602      	mov	r2, r0
   d5ede:	4621      	mov	r1, r4
   d5ee0:	4628      	mov	r0, r5
   d5ee2:	68db      	ldr	r3, [r3, #12]
    }
   d5ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ee8:	4718      	bx	r3
    }
   d5eea:	bd70      	pop	{r4, r5, r6, pc}

000d5eec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5eec:	6803      	ldr	r3, [r0, #0]
   d5eee:	689b      	ldr	r3, [r3, #8]
   d5ef0:	4718      	bx	r3

000d5ef2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5ef2:	b530      	push	{r4, r5, lr}
   d5ef4:	b08b      	sub	sp, #44	; 0x2c
   d5ef6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5ef8:	2100      	movs	r1, #0
   d5efa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5efe:	2a01      	cmp	r2, #1
   d5f00:	bf98      	it	ls
   d5f02:	220a      	movls	r2, #10
   d5f04:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5f08:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5f0c:	fb05 3312 	mls	r3, r5, r2, r3
   d5f10:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5f14:	2b09      	cmp	r3, #9
   d5f16:	bf94      	ite	ls
   d5f18:	3330      	addls	r3, #48	; 0x30
   d5f1a:	3337      	addhi	r3, #55	; 0x37
   d5f1c:	b2db      	uxtb	r3, r3
   d5f1e:	4621      	mov	r1, r4
   d5f20:	f804 3901 	strb.w	r3, [r4], #-1
   d5f24:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5f26:	2d00      	cmp	r5, #0
   d5f28:	d1ee      	bne.n	d5f08 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5f2a:	f7ff ffcf 	bl	d5ecc <_ZN5Print5writeEPKc>
}
   d5f2e:	b00b      	add	sp, #44	; 0x2c
   d5f30:	bd30      	pop	{r4, r5, pc}

000d5f32 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5f32:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5f34:	b92a      	cbnz	r2, d5f42 <_ZN5Print5printEmi+0x10>
   d5f36:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5f38:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5f3c:	689b      	ldr	r3, [r3, #8]
   d5f3e:	b2c9      	uxtb	r1, r1
   d5f40:	4718      	bx	r3
  else return printNumber(n, base);
   d5f42:	b2d2      	uxtb	r2, r2
}
   d5f44:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5f48:	f7ff bfd3 	b.w	d5ef2 <_ZN5Print11printNumberEmh>

000d5f4c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5f4c:	f7ff bff1 	b.w	d5f32 <_ZN5Print5printEmi>

000d5f50 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5f50:	b510      	push	{r4, lr}
   d5f52:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f54:	f7ff fa8c 	bl	d5470 <_ZNSt14_Function_baseD1Ev>
   d5f58:	4620      	mov	r0, r4
   d5f5a:	bd10      	pop	{r4, pc}

000d5f5c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f5c:	4803      	ldr	r0, [pc, #12]	; (d5f6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5f5e:	4a04      	ldr	r2, [pc, #16]	; (d5f70 <_GLOBAL__sub_I_RGB+0x14>)
   d5f60:	4904      	ldr	r1, [pc, #16]	; (d5f74 <_GLOBAL__sub_I_RGB+0x18>)
   d5f62:	2300      	movs	r3, #0
   d5f64:	6083      	str	r3, [r0, #8]
   d5f66:	f000 bc47 	b.w	d67f8 <__aeabi_atexit>
   d5f6a:	bf00      	nop
   d5f6c:	2003e55c 	.word	0x2003e55c
   d5f70:	2003e2e4 	.word	0x2003e2e4
   d5f74:	000d5f51 	.word	0x000d5f51

000d5f78 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5f78:	4770      	bx	lr

000d5f7a <_ZN8SPIClassD0Ev>:
   d5f7a:	b510      	push	{r4, lr}
   d5f7c:	2110      	movs	r1, #16
   d5f7e:	4604      	mov	r4, r0
   d5f80:	f000 fc3f 	bl	d6802 <_ZdlPvj>
   d5f84:	4620      	mov	r0, r4
   d5f86:	bd10      	pop	{r4, pc}

000d5f88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5f88:	b570      	push	{r4, r5, r6, lr}
   d5f8a:	4b08      	ldr	r3, [pc, #32]	; (d5fac <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5f8c:	6003      	str	r3, [r0, #0]
   d5f8e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5f90:	2500      	movs	r5, #0
   d5f92:	460e      	mov	r6, r1
   d5f94:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5f98:	f7fe ffe0 	bl	d4f5c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5f9c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5f9e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5fa0:	f7ff f894 	bl	d50cc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5fa4:	60a5      	str	r5, [r4, #8]
}
   d5fa6:	4620      	mov	r0, r4
   d5fa8:	bd70      	pop	{r4, r5, r6, pc}
   d5faa:	bf00      	nop
   d5fac:	000d828c 	.word	0x000d828c

000d5fb0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5fb0:	7900      	ldrb	r0, [r0, #4]
   d5fb2:	f7ff b893 	b.w	d50dc <HAL_SPI_Is_Enabled>

000d5fb6 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5fb6:	2300      	movs	r3, #0
   d5fb8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5fba:	6043      	str	r3, [r0, #4]
	len = 0;
   d5fbc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fbe:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d5fc0:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d5fc2:	680c      	ldr	r4, [r1, #0]
   d5fc4:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d5fc6:	684c      	ldr	r4, [r1, #4]
   d5fc8:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d5fca:	688c      	ldr	r4, [r1, #8]
   d5fcc:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d5fce:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d5fd0:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5fd2:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d5fd4:	bd10      	pop	{r4, pc}

000d5fd6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5fd6:	b510      	push	{r4, lr}
   d5fd8:	4604      	mov	r4, r0
{
	free(buffer);
   d5fda:	6800      	ldr	r0, [r0, #0]
   d5fdc:	f7ff f9f2 	bl	d53c4 <free>
}
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	bd10      	pop	{r4, pc}

000d5fe4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5fe4:	b510      	push	{r4, lr}
   d5fe6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5fe8:	6800      	ldr	r0, [r0, #0]
   d5fea:	b108      	cbz	r0, d5ff0 <_ZN6String10invalidateEv+0xc>
   d5fec:	f7ff f9ea 	bl	d53c4 <free>
	buffer = NULL;
   d5ff0:	2300      	movs	r3, #0
   d5ff2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5ff4:	60a3      	str	r3, [r4, #8]
   d5ff6:	6063      	str	r3, [r4, #4]
   d5ff8:	bd10      	pop	{r4, pc}

000d5ffa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5ffa:	b538      	push	{r3, r4, r5, lr}
   d5ffc:	4604      	mov	r4, r0
   d5ffe:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6000:	6800      	ldr	r0, [r0, #0]
   d6002:	3101      	adds	r1, #1
   d6004:	f7ff f9e6 	bl	d53d4 <realloc>
	if (newbuffer) {
   d6008:	b110      	cbz	r0, d6010 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d600a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d600e:	2001      	movs	r0, #1
	}
	return 0;
}
   d6010:	bd38      	pop	{r3, r4, r5, pc}

000d6012 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6012:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6014:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6016:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6018:	b113      	cbz	r3, d6020 <_ZN6String7reserveEj+0xe>
   d601a:	6843      	ldr	r3, [r0, #4]
   d601c:	428b      	cmp	r3, r1
   d601e:	d207      	bcs.n	d6030 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6020:	4620      	mov	r0, r4
   d6022:	f7ff ffea 	bl	d5ffa <_ZN6String12changeBufferEj>
   d6026:	b120      	cbz	r0, d6032 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6028:	68a3      	ldr	r3, [r4, #8]
   d602a:	b90b      	cbnz	r3, d6030 <_ZN6String7reserveEj+0x1e>
   d602c:	6822      	ldr	r2, [r4, #0]
   d602e:	7013      	strb	r3, [r2, #0]
   d6030:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6032:	bd10      	pop	{r4, pc}

000d6034 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6034:	b570      	push	{r4, r5, r6, lr}
   d6036:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6038:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d603a:	4604      	mov	r4, r0
   d603c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d603e:	f7ff ffe8 	bl	d6012 <_ZN6String7reserveEj>
   d6042:	b918      	cbnz	r0, d604c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6044:	4620      	mov	r0, r4
   d6046:	f7ff ffcd 	bl	d5fe4 <_ZN6String10invalidateEv>
		return *this;
   d604a:	e009      	b.n	d6060 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d604c:	462a      	mov	r2, r5
   d604e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6050:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6052:	6820      	ldr	r0, [r4, #0]
   d6054:	f001 fa46 	bl	d74e4 <memcpy>
	buffer[len] = 0;
   d6058:	6822      	ldr	r2, [r4, #0]
   d605a:	68a3      	ldr	r3, [r4, #8]
   d605c:	2100      	movs	r1, #0
   d605e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6060:	4620      	mov	r0, r4
   d6062:	bd70      	pop	{r4, r5, r6, pc}

000d6064 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6064:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6066:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6068:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d606a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d606c:	6043      	str	r3, [r0, #4]
	len = 0;
   d606e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6070:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6072:	460d      	mov	r5, r1
   d6074:	b139      	cbz	r1, d6086 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6076:	4608      	mov	r0, r1
   d6078:	f001 fa9d 	bl	d75b6 <strlen>
   d607c:	4629      	mov	r1, r5
   d607e:	4602      	mov	r2, r0
   d6080:	4620      	mov	r0, r4
   d6082:	f7ff ffd7 	bl	d6034 <_ZN6String4copyEPKcj>
}
   d6086:	4620      	mov	r0, r4
   d6088:	bd38      	pop	{r3, r4, r5, pc}

000d608a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d608a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d608c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d608e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6090:	b912      	cbnz	r2, d6098 <_ZNK6String6equalsEPKc+0xe>
   d6092:	b919      	cbnz	r1, d609c <_ZNK6String6equalsEPKc+0x12>
   d6094:	2001      	movs	r0, #1
   d6096:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6098:	b911      	cbnz	r1, d60a0 <_ZNK6String6equalsEPKc+0x16>
   d609a:	6803      	ldr	r3, [r0, #0]
   d609c:	7818      	ldrb	r0, [r3, #0]
   d609e:	e002      	b.n	d60a6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d60a0:	6800      	ldr	r0, [r0, #0]
   d60a2:	f001 fa5b 	bl	d755c <strcmp>
   d60a6:	fab0 f080 	clz	r0, r0
   d60aa:	0940      	lsrs	r0, r0, #5
}
   d60ac:	bd08      	pop	{r3, pc}

000d60ae <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d60ae:	b570      	push	{r4, r5, r6, lr}
   d60b0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d60b2:	b19a      	cbz	r2, d60dc <_ZNK6String8getBytesEPhjj+0x2e>
   d60b4:	b191      	cbz	r1, d60dc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d60b6:	6885      	ldr	r5, [r0, #8]
   d60b8:	429d      	cmp	r5, r3
   d60ba:	d802      	bhi.n	d60c2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d60bc:	2300      	movs	r3, #0
   d60be:	700b      	strb	r3, [r1, #0]
		return;
   d60c0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d60c2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d60c4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d60c6:	6801      	ldr	r1, [r0, #0]
   d60c8:	42ac      	cmp	r4, r5
   d60ca:	bf28      	it	cs
   d60cc:	462c      	movcs	r4, r5
   d60ce:	4419      	add	r1, r3
   d60d0:	4622      	mov	r2, r4
   d60d2:	4630      	mov	r0, r6
   d60d4:	f001 fa8c 	bl	d75f0 <strncpy>
	buf[n] = 0;
   d60d8:	2300      	movs	r3, #0
   d60da:	5533      	strb	r3, [r6, r4]
   d60dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d60e0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d60e0:	4b04      	ldr	r3, [pc, #16]	; (d60f4 <_GLOBAL__sub_I_System+0x14>)
   d60e2:	2000      	movs	r0, #0
   d60e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d60e8:	7018      	strb	r0, [r3, #0]
   d60ea:	8058      	strh	r0, [r3, #2]
   d60ec:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d60ee:	f7ff b885 	b.w	d51fc <set_system_mode>
   d60f2:	bf00      	nop
   d60f4:	2003e56c 	.word	0x2003e56c

000d60f8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d60f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d60fa:	4b14      	ldr	r3, [pc, #80]	; (d614c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d60fc:	4f14      	ldr	r7, [pc, #80]	; (d6150 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d60fe:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6100:	4b14      	ldr	r3, [pc, #80]	; (d6154 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6102:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d6104:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d6106:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6108:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d610a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d610c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d610e:	d01b      	beq.n	d6148 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6110:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d6112:	ad01      	add	r5, sp, #4
   d6114:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6118:	f001 f8ec 	bl	d72f4 <localtime>
	calendar_time->tm_year += 1900;
   d611c:	6943      	ldr	r3, [r0, #20]
   d611e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6122:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d6124:	4604      	mov	r4, r0
   d6126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d612a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d612c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d612e:	f8d4 e000 	ldr.w	lr, [r4]
   d6132:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6136:	ad01      	add	r5, sp, #4
   d6138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d613a:	4c07      	ldr	r4, [pc, #28]	; (d6158 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d613c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d613e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6142:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6144:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d6148:	b00b      	add	sp, #44	; 0x2c
   d614a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d614c:	2003e5a4 	.word	0x2003e5a4
   d6150:	2003e5a0 	.word	0x2003e5a0
   d6154:	2003e59c 	.word	0x2003e59c
   d6158:	2003e574 	.word	0x2003e574

000d615c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d615c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d615e:	2000      	movs	r0, #0
   d6160:	f7ff f8c8 	bl	d52f4 <spark_sync_time_pending>
   d6164:	b128      	cbz	r0, d6172 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6166:	f7ff f89d 	bl	d52a4 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d616a:	f080 0001 	eor.w	r0, r0, #1
   d616e:	b2c0      	uxtb	r0, r0
   d6170:	bd08      	pop	{r3, pc}
   d6172:	2001      	movs	r0, #1
    }
   d6174:	bd08      	pop	{r3, pc}

000d6176 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6176:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6178:	2000      	movs	r0, #0
   d617a:	f7fe ff1f 	bl	d4fbc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d617e:	4604      	mov	r4, r0
   d6180:	b968      	cbnz	r0, d619e <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6182:	f7ff f833 	bl	d51ec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6186:	2801      	cmp	r0, #1
   d6188:	d10b      	bne.n	d61a2 <_ZN9TimeClass7isValidEv+0x2c>
   d618a:	4620      	mov	r0, r4
   d618c:	f7ff f856 	bl	d523c <system_thread_get_state>
   d6190:	b938      	cbnz	r0, d61a2 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6192:	f7ff ffe3 	bl	d615c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6196:	b930      	cbnz	r0, d61a6 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6198:	f7ff f87c 	bl	d5294 <spark_process>
   d619c:	e7f9      	b.n	d6192 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d619e:	2001      	movs	r0, #1
   d61a0:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d61a2:	2000      	movs	r0, #0
   d61a4:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d61a6:	f7ff ffd9 	bl	d615c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d61aa:	2000      	movs	r0, #0
   d61ac:	f7fe ff06 	bl	d4fbc <HAL_RTC_Time_Is_Valid>
   d61b0:	3000      	adds	r0, #0
   d61b2:	bf18      	it	ne
   d61b4:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d61b6:	bd10      	pop	{r4, pc}

000d61b8 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d61b8:	b508      	push	{r3, lr}
    (void)isValid();
   d61ba:	f7ff ffdc 	bl	d6176 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d61be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d61c2:	f7fe bef3 	b.w	d4fac <HAL_RTC_Get_UnixTime>
	...

000d61c8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d61c8:	b508      	push	{r3, lr}
	return hour(now());
   d61ca:	f7ff fff5 	bl	d61b8 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d61ce:	f7ff ff93 	bl	d60f8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d61d2:	4b01      	ldr	r3, [pc, #4]	; (d61d8 <_ZN9TimeClass4hourEv+0x10>)
   d61d4:	6898      	ldr	r0, [r3, #8]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	2003e574 	.word	0x2003e574

000d61dc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d61dc:	b508      	push	{r3, lr}
	return minute(now());
   d61de:	f7ff ffeb 	bl	d61b8 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d61e2:	f7ff ff89 	bl	d60f8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d61e6:	4b01      	ldr	r3, [pc, #4]	; (d61ec <_ZN9TimeClass6minuteEv+0x10>)
   d61e8:	6858      	ldr	r0, [r3, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	2003e574 	.word	0x2003e574

000d61f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d61f0:	4b02      	ldr	r3, [pc, #8]	; (d61fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	4b02      	ldr	r3, [pc, #8]	; (d6200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d61f6:	601a      	str	r2, [r3, #0]
   d61f8:	4770      	bx	lr
   d61fa:	bf00      	nop
   d61fc:	2003e22c 	.word	0x2003e22c
   d6200:	2003e598 	.word	0x2003e598

000d6204 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6204:	4770      	bx	lr

000d6206 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6206:	7441      	strb	r1, [r0, #17]
   d6208:	4770      	bx	lr

000d620a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d620a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d620c:	7c00      	ldrb	r0, [r0, #16]
   d620e:	f7fe ffa5 	bl	d515c <HAL_USART_Available_Data_For_Write>
}
   d6212:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6216:	bd08      	pop	{r3, pc}

000d6218 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6218:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d621a:	7c00      	ldrb	r0, [r0, #16]
   d621c:	f7fe ff76 	bl	d510c <HAL_USART_Available_Data>
}
   d6220:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6224:	bd08      	pop	{r3, pc}

000d6226 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6226:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6228:	7c00      	ldrb	r0, [r0, #16]
   d622a:	f7fe ff7f 	bl	d512c <HAL_USART_Peek_Data>
}
   d622e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6232:	bf28      	it	cs
   d6234:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6238:	bd08      	pop	{r3, pc}

000d623a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d623a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d623c:	7c00      	ldrb	r0, [r0, #16]
   d623e:	f7fe ff6d 	bl	d511c <HAL_USART_Read_Data>
}
   d6242:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6246:	bf28      	it	cs
   d6248:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d624c:	bd08      	pop	{r3, pc}

000d624e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d624e:	7c00      	ldrb	r0, [r0, #16]
   d6250:	f7fe bf74 	b.w	d513c <HAL_USART_Flush_Data>

000d6254 <_ZN11USARTSerialD0Ev>:
   d6254:	b510      	push	{r4, lr}
   d6256:	2114      	movs	r1, #20
   d6258:	4604      	mov	r4, r0
   d625a:	f000 fad2 	bl	d6802 <_ZdlPvj>
   d625e:	4620      	mov	r0, r4
   d6260:	bd10      	pop	{r4, pc}

000d6262 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6262:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6264:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6266:	4604      	mov	r4, r0
   d6268:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d626a:	b925      	cbnz	r5, d6276 <_ZN11USARTSerial5writeEh+0x14>
   d626c:	7c00      	ldrb	r0, [r0, #16]
   d626e:	f7fe ff75 	bl	d515c <HAL_USART_Available_Data_For_Write>
   d6272:	2800      	cmp	r0, #0
   d6274:	dd05      	ble.n	d6282 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6276:	4631      	mov	r1, r6
   d6278:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d627a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d627e:	f7fe bf3d 	b.w	d50fc <HAL_USART_Write_Data>
  }
  return 0;
}
   d6282:	4628      	mov	r0, r5
   d6284:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6288 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6288:	b510      	push	{r4, lr}
   d628a:	4604      	mov	r4, r0
   d628c:	4608      	mov	r0, r1
   d628e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6290:	2200      	movs	r2, #0
   d6292:	6062      	str	r2, [r4, #4]
   d6294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6298:	60a2      	str	r2, [r4, #8]
   d629a:	4a05      	ldr	r2, [pc, #20]	; (d62b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d629c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d629e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d62a0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d62a2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d62a4:	461a      	mov	r2, r3
   d62a6:	f7fe ff21 	bl	d50ec <HAL_USART_Init>
}
   d62aa:	4620      	mov	r0, r4
   d62ac:	bd10      	pop	{r4, pc}
   d62ae:	bf00      	nop
   d62b0:	000d82c4 	.word	0x000d82c4

000d62b4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d62b4:	7c00      	ldrb	r0, [r0, #16]
   d62b6:	f7fe bf49 	b.w	d514c <HAL_USART_Is_Enabled>
	...

000d62bc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d62bc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d62be:	4d0c      	ldr	r5, [pc, #48]	; (d62f0 <_Z22__fetch_global_Serial1v+0x34>)
   d62c0:	6829      	ldr	r1, [r5, #0]
   d62c2:	f011 0401 	ands.w	r4, r1, #1
   d62c6:	d111      	bne.n	d62ec <_Z22__fetch_global_Serial1v+0x30>
   d62c8:	4628      	mov	r0, r5
   d62ca:	f7fd feea 	bl	d40a2 <__cxa_guard_acquire>
   d62ce:	b168      	cbz	r0, d62ec <_Z22__fetch_global_Serial1v+0x30>
   d62d0:	4a08      	ldr	r2, [pc, #32]	; (d62f4 <_Z22__fetch_global_Serial1v+0x38>)
   d62d2:	4b09      	ldr	r3, [pc, #36]	; (d62f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d62d4:	4809      	ldr	r0, [pc, #36]	; (d62fc <_Z22__fetch_global_Serial1v+0x40>)
   d62d6:	4621      	mov	r1, r4
   d62d8:	f7ff ffd6 	bl	d6288 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d62dc:	4628      	mov	r0, r5
   d62de:	f7fd fee5 	bl	d40ac <__cxa_guard_release>
   d62e2:	4a07      	ldr	r2, [pc, #28]	; (d6300 <_Z22__fetch_global_Serial1v+0x44>)
   d62e4:	4907      	ldr	r1, [pc, #28]	; (d6304 <_Z22__fetch_global_Serial1v+0x48>)
   d62e6:	4805      	ldr	r0, [pc, #20]	; (d62fc <_Z22__fetch_global_Serial1v+0x40>)
   d62e8:	f000 fa86 	bl	d67f8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d62ec:	4803      	ldr	r0, [pc, #12]	; (d62fc <_Z22__fetch_global_Serial1v+0x40>)
   d62ee:	bd38      	pop	{r3, r4, r5, pc}
   d62f0:	2003e640 	.word	0x2003e640
   d62f4:	2003e644 	.word	0x2003e644
   d62f8:	2003e5bc 	.word	0x2003e5bc
   d62fc:	2003e5a8 	.word	0x2003e5a8
   d6300:	2003e2e4 	.word	0x2003e2e4
   d6304:	000d6205 	.word	0x000d6205

000d6308 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6308:	7441      	strb	r1, [r0, #17]
   d630a:	4770      	bx	lr

000d630c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d630c:	4770      	bx	lr

000d630e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d630e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6310:	2100      	movs	r1, #0
   d6312:	7c00      	ldrb	r0, [r0, #16]
   d6314:	f7fe ff42 	bl	d519c <HAL_USB_USART_Receive_Data>
}
   d6318:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d631c:	bf28      	it	cs
   d631e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6322:	bd08      	pop	{r3, pc}

000d6324 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6324:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6326:	2101      	movs	r1, #1
   d6328:	7c00      	ldrb	r0, [r0, #16]
   d632a:	f7fe ff37 	bl	d519c <HAL_USB_USART_Receive_Data>
}
   d632e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6332:	bf28      	it	cs
   d6334:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6338:	bd08      	pop	{r3, pc}

000d633a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d633a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d633c:	7c00      	ldrb	r0, [r0, #16]
   d633e:	f7fe ff25 	bl	d518c <HAL_USB_USART_Available_Data_For_Write>
}
   d6342:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6346:	bd08      	pop	{r3, pc}

000d6348 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6348:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d634a:	7c00      	ldrb	r0, [r0, #16]
   d634c:	f7fe ff16 	bl	d517c <HAL_USB_USART_Available_Data>
}
   d6350:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6354:	bd08      	pop	{r3, pc}

000d6356 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6356:	7c00      	ldrb	r0, [r0, #16]
   d6358:	f7fe bf30 	b.w	d51bc <HAL_USB_USART_Flush_Data>

000d635c <_ZN9USBSerialD0Ev>:
   d635c:	b510      	push	{r4, lr}
   d635e:	2114      	movs	r1, #20
   d6360:	4604      	mov	r4, r0
   d6362:	f000 fa4e 	bl	d6802 <_ZdlPvj>
   d6366:	4620      	mov	r0, r4
   d6368:	bd10      	pop	{r4, pc}

000d636a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d636a:	b538      	push	{r3, r4, r5, lr}
   d636c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d636e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6370:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6372:	f7fe ff0b 	bl	d518c <HAL_USB_USART_Available_Data_For_Write>
   d6376:	2800      	cmp	r0, #0
   d6378:	dc01      	bgt.n	d637e <_ZN9USBSerial5writeEh+0x14>
   d637a:	7c60      	ldrb	r0, [r4, #17]
   d637c:	b128      	cbz	r0, d638a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d637e:	4629      	mov	r1, r5
   d6380:	7c20      	ldrb	r0, [r4, #16]
   d6382:	f7fe ff13 	bl	d51ac <HAL_USB_USART_Send_Data>
   d6386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d638a:	bd38      	pop	{r3, r4, r5, pc}

000d638c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d638c:	b510      	push	{r4, lr}
   d638e:	4604      	mov	r4, r0
   d6390:	2300      	movs	r3, #0
   d6392:	6063      	str	r3, [r4, #4]
   d6394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6398:	60a3      	str	r3, [r4, #8]
   d639a:	4b05      	ldr	r3, [pc, #20]	; (d63b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d639c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d639e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d63a0:	4608      	mov	r0, r1
{
  _serial = serial;
   d63a2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d63a4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d63a6:	4611      	mov	r1, r2
   d63a8:	f7fe fee0 	bl	d516c <HAL_USB_USART_Init>
}
   d63ac:	4620      	mov	r0, r4
   d63ae:	bd10      	pop	{r4, pc}
   d63b0:	000d82f4 	.word	0x000d82f4

000d63b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d63b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d63b6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d63b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d63ba:	2100      	movs	r1, #0
   d63bc:	f001 f89d 	bl	d74fa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d63c0:	4620      	mov	r0, r4
   d63c2:	bd10      	pop	{r4, pc}

000d63c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d63c4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d63c6:	4d0e      	ldr	r5, [pc, #56]	; (d6400 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d63c8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d63ca:	a801      	add	r0, sp, #4
   d63cc:	f7ff fff2 	bl	d63b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d63d0:	6829      	ldr	r1, [r5, #0]
   d63d2:	f011 0401 	ands.w	r4, r1, #1
   d63d6:	d110      	bne.n	d63fa <_Z16_fetch_usbserialv+0x36>
   d63d8:	4628      	mov	r0, r5
   d63da:	f7fd fe62 	bl	d40a2 <__cxa_guard_acquire>
   d63de:	b160      	cbz	r0, d63fa <_Z16_fetch_usbserialv+0x36>
   d63e0:	aa01      	add	r2, sp, #4
   d63e2:	4621      	mov	r1, r4
   d63e4:	4807      	ldr	r0, [pc, #28]	; (d6404 <_Z16_fetch_usbserialv+0x40>)
   d63e6:	f7ff ffd1 	bl	d638c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d63ea:	4628      	mov	r0, r5
   d63ec:	f7fd fe5e 	bl	d40ac <__cxa_guard_release>
   d63f0:	4a05      	ldr	r2, [pc, #20]	; (d6408 <_Z16_fetch_usbserialv+0x44>)
   d63f2:	4906      	ldr	r1, [pc, #24]	; (d640c <_Z16_fetch_usbserialv+0x48>)
   d63f4:	4803      	ldr	r0, [pc, #12]	; (d6404 <_Z16_fetch_usbserialv+0x40>)
   d63f6:	f000 f9ff 	bl	d67f8 <__aeabi_atexit>
	return _usbserial;
}
   d63fa:	4802      	ldr	r0, [pc, #8]	; (d6404 <_Z16_fetch_usbserialv+0x40>)
   d63fc:	b007      	add	sp, #28
   d63fe:	bd30      	pop	{r4, r5, pc}
   d6400:	2003e6c8 	.word	0x2003e6c8
   d6404:	2003e6cc 	.word	0x2003e6cc
   d6408:	2003e2e4 	.word	0x2003e2e4
   d640c:	000d630d 	.word	0x000d630d

000d6410 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6410:	4770      	bx	lr

000d6412 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d6412:	2001      	movs	r0, #1
   d6414:	4770      	bx	lr
	...

000d6418 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d6418:	8983      	ldrh	r3, [r0, #12]
   d641a:	b11b      	cbz	r3, d6424 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d641c:	6903      	ldr	r3, [r0, #16]
   d641e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6422:	d102      	bne.n	d642a <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d6424:	ed9f 0a05 	vldr	s0, [pc, #20]	; d643c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d6428:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d642a:	ee07 3a90 	vmov	s15, r3
   d642e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6440 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d6432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6436:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d643a:	4770      	bx	lr
   d643c:	00000000 	.word	0x00000000
   d6440:	42c80000 	.word	0x42c80000

000d6444 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d6444:	8983      	ldrh	r3, [r0, #12]
   d6446:	b11b      	cbz	r3, d6450 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d6448:	6983      	ldr	r3, [r0, #24]
   d644a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d644e:	d102      	bne.n	d6456 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d6450:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6468 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d6454:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d6456:	ee07 3a90 	vmov	s15, r3
   d645a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d646c <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d645e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6462:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6466:	4770      	bx	lr
   d6468:	00000000 	.word	0x00000000
   d646c:	42c80000 	.word	0x42c80000

000d6470 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6470:	2200      	movs	r2, #0
   d6472:	4611      	mov	r1, r2
   d6474:	6840      	ldr	r0, [r0, #4]
   d6476:	f7fe bf65 	b.w	d5344 <network_ready>

000d647a <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d647a:	b510      	push	{r4, lr}
   d647c:	2124      	movs	r1, #36	; 0x24
   d647e:	4604      	mov	r4, r0
   d6480:	f000 f9bf 	bl	d6802 <_ZdlPvj>
   d6484:	4620      	mov	r0, r4
   d6486:	bd10      	pop	{r4, pc}

000d6488 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6488:	2200      	movs	r2, #0
   d648a:	4611      	mov	r1, r2
   d648c:	6840      	ldr	r0, [r0, #4]
   d648e:	f7fe bf79 	b.w	d5384 <network_listening>

000d6492 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6492:	2200      	movs	r2, #0
   d6494:	4611      	mov	r1, r2
   d6496:	6840      	ldr	r0, [r0, #4]
   d6498:	f7fe bf84 	b.w	d53a4 <network_get_listen_timeout>

000d649c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d649c:	2200      	movs	r2, #0
   d649e:	6840      	ldr	r0, [r0, #4]
   d64a0:	f7fe bf78 	b.w	d5394 <network_set_listen_timeout>

000d64a4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d64a4:	2200      	movs	r2, #0
   d64a6:	f081 0101 	eor.w	r1, r1, #1
   d64aa:	6840      	ldr	r0, [r0, #4]
   d64ac:	f7fe bf62 	b.w	d5374 <network_listen>

000d64b0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d64b0:	2300      	movs	r3, #0
   d64b2:	461a      	mov	r2, r3
   d64b4:	4619      	mov	r1, r3
   d64b6:	6840      	ldr	r0, [r0, #4]
   d64b8:	f7fe bf54 	b.w	d5364 <network_off>

000d64bc <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d64bc:	2300      	movs	r3, #0
   d64be:	461a      	mov	r2, r3
   d64c0:	4619      	mov	r1, r3
   d64c2:	6840      	ldr	r0, [r0, #4]
   d64c4:	f7fe bf46 	b.w	d5354 <network_on>

000d64c8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64c8:	2200      	movs	r2, #0
   d64ca:	4611      	mov	r1, r2
   d64cc:	6840      	ldr	r0, [r0, #4]
   d64ce:	f7fe bf29 	b.w	d5324 <network_connecting>

000d64d2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64d2:	2200      	movs	r2, #0
   d64d4:	2102      	movs	r1, #2
   d64d6:	6840      	ldr	r0, [r0, #4]
   d64d8:	f7fe bf2c 	b.w	d5334 <network_disconnect>

000d64dc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64dc:	2300      	movs	r3, #0
   d64de:	461a      	mov	r2, r3
   d64e0:	6840      	ldr	r0, [r0, #4]
   d64e2:	f7fe bf17 	b.w	d5314 <network_connect>
	...

000d64e8 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d64e8:	8983      	ldrh	r3, [r0, #12]
   d64ea:	b17b      	cbz	r3, d650c <_ZNK10WiFiSignal10getQualityEv+0x24>
   d64ec:	6a03      	ldr	r3, [r0, #32]
   d64ee:	2b00      	cmp	r3, #0
   d64f0:	db0c      	blt.n	d650c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d64f2:	ee07 3a90 	vmov	s15, r3
   d64f6:	eddf 6a07 	vldr	s13, [pc, #28]	; d6514 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d64fa:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6518 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d64fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6502:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6506:	ee27 0a80 	vmul.f32	s0, s15, s0
   d650a:	4770      	bx	lr
    }
    return -1.0f;
   d650c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6510:	4770      	bx	lr
   d6512:	bf00      	nop
   d6514:	477fff00 	.word	0x477fff00
   d6518:	42c80000 	.word	0x42c80000

000d651c <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d651c:	8983      	ldrh	r3, [r0, #12]
   d651e:	b17b      	cbz	r3, d6540 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d6520:	6943      	ldr	r3, [r0, #20]
   d6522:	2b00      	cmp	r3, #0
   d6524:	db0c      	blt.n	d6540 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d6526:	ee07 3a90 	vmov	s15, r3
   d652a:	eddf 6a07 	vldr	s13, [pc, #28]	; d6548 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d652e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d654c <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d6532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6536:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d653a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d653e:	4770      	bx	lr
    }
    return -1.0f;
   d6540:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6544:	4770      	bx	lr
   d6546:	bf00      	nop
   d6548:	477fff00 	.word	0x477fff00
   d654c:	42c80000 	.word	0x42c80000

000d6550 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6550:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d6552:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6554:	4606      	mov	r6, r0
    inf_ = inf;
   d6556:	f100 040c 	add.w	r4, r0, #12
   d655a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d655c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d655e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6562:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d6566:	6933      	ldr	r3, [r6, #16]
   d6568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d656c:	bf0e      	itee	eq
   d656e:	2302      	moveq	r3, #2
   d6570:	2264      	movne	r2, #100	; 0x64
   d6572:	fb93 f3f2 	sdivne	r3, r3, r2
   d6576:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d6578:	69b3      	ldr	r3, [r6, #24]
   d657a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d657e:	bf0e      	itee	eq
   d6580:	2300      	moveq	r3, #0
   d6582:	2264      	movne	r2, #100	; 0x64
   d6584:	fb93 f3f2 	sdivne	r3, r3, r2
   d6588:	60b3      	str	r3, [r6, #8]
    return true;
}
   d658a:	2001      	movs	r0, #1
   d658c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6590 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d6590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d6594:	4b16      	ldr	r3, [pc, #88]	; (d65f0 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d6596:	6003      	str	r3, [r0, #0]
   d6598:	2500      	movs	r5, #0
   d659a:	4688      	mov	r8, r1
   d659c:	2702      	movs	r7, #2
   d659e:	2618      	movs	r6, #24
   d65a0:	b086      	sub	sp, #24
   d65a2:	6047      	str	r7, [r0, #4]
   d65a4:	6085      	str	r5, [r0, #8]
   d65a6:	4632      	mov	r2, r6
   d65a8:	4629      	mov	r1, r5
   d65aa:	4604      	mov	r4, r0
   d65ac:	300c      	adds	r0, #12
   d65ae:	f000 ffa4 	bl	d74fa <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d65b2:	462a      	mov	r2, r5
   d65b4:	4629      	mov	r1, r5
   d65b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d65ba:	f7fe fec3 	bl	d5344 <network_ready>
   d65be:	b190      	cbz	r0, d65e6 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d65c0:	4632      	mov	r2, r6
   d65c2:	4629      	mov	r1, r5
   d65c4:	4668      	mov	r0, sp
   d65c6:	f000 ff98 	bl	d74fa <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d65ca:	462a      	mov	r2, r5
   d65cc:	4669      	mov	r1, sp
   d65ce:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d65d0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d65d4:	f7fe fdfa 	bl	d51cc <wlan_connected_info>
        if (r == 0) {
   d65d8:	b920      	cbnz	r0, d65e4 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d65da:	4669      	mov	r1, sp
   d65dc:	4620      	mov	r0, r4
   d65de:	f7ff ffb7 	bl	d6550 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d65e2:	e000      	b.n	d65e6 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d65e4:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d65e6:	4620      	mov	r0, r4
   d65e8:	b006      	add	sp, #24
   d65ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d65ee:	bf00      	nop
   d65f0:	000d8358 	.word	0x000d8358

000d65f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d65f4:	4b02      	ldr	r3, [pc, #8]	; (d6600 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d65f6:	2204      	movs	r2, #4
   d65f8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d65fa:	4a02      	ldr	r2, [pc, #8]	; (d6604 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d65fc:	601a      	str	r2, [r3, #0]
   d65fe:	4770      	bx	lr
   d6600:	2003e6e0 	.word	0x2003e6e0
   d6604:	000d8324 	.word	0x000d8324

000d6608 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6608:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d660a:	4b0c      	ldr	r3, [pc, #48]	; (d663c <serialEventRun+0x34>)
   d660c:	b133      	cbz	r3, d661c <serialEventRun+0x14>
   d660e:	f7ff fed9 	bl	d63c4 <_Z16_fetch_usbserialv>
   d6612:	6803      	ldr	r3, [r0, #0]
   d6614:	691b      	ldr	r3, [r3, #16]
   d6616:	4798      	blx	r3
   d6618:	2800      	cmp	r0, #0
   d661a:	dc09      	bgt.n	d6630 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d661c:	4b08      	ldr	r3, [pc, #32]	; (d6640 <serialEventRun+0x38>)
   d661e:	b163      	cbz	r3, d663a <serialEventRun+0x32>
   d6620:	f7ff fe4c 	bl	d62bc <_Z22__fetch_global_Serial1v>
   d6624:	6803      	ldr	r3, [r0, #0]
   d6626:	691b      	ldr	r3, [r3, #16]
   d6628:	4798      	blx	r3
   d662a:	2800      	cmp	r0, #0
   d662c:	dc03      	bgt.n	d6636 <serialEventRun+0x2e>
   d662e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6630:	f3af 8000 	nop.w
   d6634:	e7f2      	b.n	d661c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6636:	f3af 8000 	nop.w
   d663a:	bd08      	pop	{r3, pc}
	...

000d6644 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6644:	b508      	push	{r3, lr}
	serialEventRun();
   d6646:	f7ff ffdf 	bl	d6608 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d664a:	f7fe fca7 	bl	d4f9c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d664e:	4b01      	ldr	r3, [pc, #4]	; (d6654 <_post_loop+0x10>)
   d6650:	6018      	str	r0, [r3, #0]
   d6652:	bd08      	pop	{r3, pc}
   d6654:	2003e6ec 	.word	0x2003e6ec

000d6658 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6658:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d665a:	2300      	movs	r3, #0
   d665c:	9300      	str	r3, [sp, #0]
   d665e:	461a      	mov	r2, r3
   d6660:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6664:	f7fe fdfc 	bl	d5260 <system_ctrl_set_result>
}
   d6668:	b003      	add	sp, #12
   d666a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6670 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6670:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6672:	8843      	ldrh	r3, [r0, #2]
   d6674:	2b0a      	cmp	r3, #10
   d6676:	d008      	beq.n	d668a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6678:	2b50      	cmp	r3, #80	; 0x50
   d667a:	d109      	bne.n	d6690 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d667c:	4b09      	ldr	r3, [pc, #36]	; (d66a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d667e:	681b      	ldr	r3, [r3, #0]
   d6680:	b13b      	cbz	r3, d6692 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6682:	b003      	add	sp, #12
   d6684:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6688:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d668a:	f7ff ffe5 	bl	d6658 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d668e:	e006      	b.n	d669e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6690:	2300      	movs	r3, #0
   d6692:	9300      	str	r3, [sp, #0]
   d6694:	461a      	mov	r2, r3
   d6696:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d669a:	f7fe fde1 	bl	d5260 <system_ctrl_set_result>
        break;
    }
}
   d669e:	b003      	add	sp, #12
   d66a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d66a4:	2003e6e8 	.word	0x2003e6e8

000d66a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d66a8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d66aa:	f7fe fc67 	bl	d4f7c <HAL_RNG_GetRandomNumber>
   d66ae:	4604      	mov	r4, r0
    srand(seed);
   d66b0:	f000 ff2c 	bl	d750c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d66b4:	4b07      	ldr	r3, [pc, #28]	; (d66d4 <module_user_init_hook+0x2c>)
   d66b6:	b113      	cbz	r3, d66be <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d66b8:	4620      	mov	r0, r4
   d66ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d66be:	2100      	movs	r1, #0
   d66c0:	4804      	ldr	r0, [pc, #16]	; (d66d4 <module_user_init_hook+0x2c>)
   d66c2:	f7fe fe1f 	bl	d5304 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d66c6:	2100      	movs	r1, #0
   d66c8:	4803      	ldr	r0, [pc, #12]	; (d66d8 <module_user_init_hook+0x30>)
}
   d66ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d66ce:	f7fe bdbd 	b.w	d524c <system_ctrl_set_app_request_handler>
   d66d2:	bf00      	nop
   d66d4:	00000000 	.word	0x00000000
   d66d8:	000d6671 	.word	0x000d6671

000d66dc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d66dc:	b510      	push	{r4, lr}
   d66de:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d66e0:	480f      	ldr	r0, [pc, #60]	; (d6720 <pinAvailable+0x44>)
   d66e2:	f7ff fc65 	bl	d5fb0 <_ZN8SPIClass9isEnabledEv>
   d66e6:	b128      	cbz	r0, d66f4 <pinAvailable+0x18>
   d66e8:	f1a4 030b 	sub.w	r3, r4, #11
   d66ec:	2b02      	cmp	r3, #2
   d66ee:	d801      	bhi.n	d66f4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d66f0:	2000      	movs	r0, #0
   d66f2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d66f4:	f000 f83e 	bl	d6774 <_Z19__fetch_global_Wirev>
   d66f8:	f7ff f9fc 	bl	d5af4 <_ZN7TwoWire9isEnabledEv>
   d66fc:	b108      	cbz	r0, d6702 <pinAvailable+0x26>
   d66fe:	2c01      	cmp	r4, #1
   d6700:	d9f6      	bls.n	d66f0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6702:	f7ff fddb 	bl	d62bc <_Z22__fetch_global_Serial1v>
   d6706:	f7ff fdd5 	bl	d62b4 <_ZN11USARTSerial9isEnabledEv>
   d670a:	b118      	cbz	r0, d6714 <pinAvailable+0x38>
   d670c:	f1a4 0309 	sub.w	r3, r4, #9
   d6710:	2b01      	cmp	r3, #1
   d6712:	d9ed      	bls.n	d66f0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6714:	2c23      	cmp	r4, #35	; 0x23
   d6716:	bf8c      	ite	hi
   d6718:	2000      	movhi	r0, #0
   d671a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d671c:	bd10      	pop	{r4, pc}
   d671e:	bf00      	nop
   d6720:	2003e708 	.word	0x2003e708

000d6724 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6724:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6726:	b538      	push	{r3, r4, r5, lr}
   d6728:	4604      	mov	r4, r0
   d672a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d672c:	d80a      	bhi.n	d6744 <pinMode+0x20>
   d672e:	29ff      	cmp	r1, #255	; 0xff
   d6730:	d008      	beq.n	d6744 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6732:	f7ff ffd3 	bl	d66dc <pinAvailable>
   d6736:	b128      	cbz	r0, d6744 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6738:	4629      	mov	r1, r5
   d673a:	4620      	mov	r0, r4
}
   d673c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6740:	f7fe bc54 	b.w	d4fec <HAL_Pin_Mode>
   d6744:	bd38      	pop	{r3, r4, r5, pc}

000d6746 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6746:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6748:	b510      	push	{r4, lr}
   d674a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d674c:	bf9c      	itt	ls
   d674e:	340e      	addls	r4, #14
   d6750:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6752:	4620      	mov	r0, r4
   d6754:	f7ff ffc2 	bl	d66dc <pinAvailable>
   d6758:	b150      	cbz	r0, d6770 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d675a:	2103      	movs	r1, #3
   d675c:	4620      	mov	r0, r4
   d675e:	f7fe fc3d 	bl	d4fdc <HAL_Validate_Pin_Function>
   d6762:	2803      	cmp	r0, #3
   d6764:	d104      	bne.n	d6770 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6766:	4620      	mov	r0, r4
}
   d6768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d676c:	f7fe bc56 	b.w	d501c <HAL_ADC_Read>
}
   d6770:	2000      	movs	r0, #0
   d6772:	bd10      	pop	{r4, pc}

000d6774 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6774:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6776:	4d0b      	ldr	r5, [pc, #44]	; (d67a4 <_Z19__fetch_global_Wirev+0x30>)
   d6778:	6829      	ldr	r1, [r5, #0]
   d677a:	f011 0401 	ands.w	r4, r1, #1
   d677e:	d10f      	bne.n	d67a0 <_Z19__fetch_global_Wirev+0x2c>
   d6780:	4628      	mov	r0, r5
   d6782:	f7fd fc8e 	bl	d40a2 <__cxa_guard_acquire>
   d6786:	b158      	cbz	r0, d67a0 <_Z19__fetch_global_Wirev+0x2c>
   d6788:	4621      	mov	r1, r4
   d678a:	4807      	ldr	r0, [pc, #28]	; (d67a8 <_Z19__fetch_global_Wirev+0x34>)
   d678c:	f7ff f9a0 	bl	d5ad0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6790:	4628      	mov	r0, r5
   d6792:	f7fd fc8b 	bl	d40ac <__cxa_guard_release>
   d6796:	4a05      	ldr	r2, [pc, #20]	; (d67ac <_Z19__fetch_global_Wirev+0x38>)
   d6798:	4905      	ldr	r1, [pc, #20]	; (d67b0 <_Z19__fetch_global_Wirev+0x3c>)
   d679a:	4803      	ldr	r0, [pc, #12]	; (d67a8 <_Z19__fetch_global_Wirev+0x34>)
   d679c:	f000 f82c 	bl	d67f8 <__aeabi_atexit>
	return wire;
}
   d67a0:	4801      	ldr	r0, [pc, #4]	; (d67a8 <_Z19__fetch_global_Wirev+0x34>)
   d67a2:	bd38      	pop	{r3, r4, r5, pc}
   d67a4:	2003e6f0 	.word	0x2003e6f0
   d67a8:	2003e6f4 	.word	0x2003e6f4
   d67ac:	2003e2e4 	.word	0x2003e2e4
   d67b0:	000d5a79 	.word	0x000d5a79

000d67b4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d67b4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d67b6:	4c0c      	ldr	r4, [pc, #48]	; (d67e8 <_GLOBAL__sub_I_SPI+0x34>)
   d67b8:	4e0c      	ldr	r6, [pc, #48]	; (d67ec <_GLOBAL__sub_I_SPI+0x38>)
   d67ba:	4d0d      	ldr	r5, [pc, #52]	; (d67f0 <_GLOBAL__sub_I_SPI+0x3c>)
   d67bc:	2100      	movs	r1, #0
   d67be:	4620      	mov	r0, r4
   d67c0:	f7ff fbe2 	bl	d5f88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d67c4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d67c6:	4c0b      	ldr	r4, [pc, #44]	; (d67f4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d67c8:	4632      	mov	r2, r6
   d67ca:	4629      	mov	r1, r5
   d67cc:	f000 f814 	bl	d67f8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d67d0:	2101      	movs	r1, #1
   d67d2:	4620      	mov	r0, r4
   d67d4:	f7ff fbd8 	bl	d5f88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d67d8:	4632      	mov	r2, r6
   d67da:	4629      	mov	r1, r5
   d67dc:	4620      	mov	r0, r4
   d67de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d67e2:	f000 b809 	b.w	d67f8 <__aeabi_atexit>
   d67e6:	bf00      	nop
   d67e8:	2003e708 	.word	0x2003e708
   d67ec:	2003e2e4 	.word	0x2003e2e4
   d67f0:	000d5f79 	.word	0x000d5f79
   d67f4:	2003e718 	.word	0x2003e718

000d67f8 <__aeabi_atexit>:
   d67f8:	460b      	mov	r3, r1
   d67fa:	4601      	mov	r1, r0
   d67fc:	4618      	mov	r0, r3
   d67fe:	f000 bd6b 	b.w	d72d8 <__cxa_atexit>

000d6802 <_ZdlPvj>:
   d6802:	f7fd bc4a 	b.w	d409a <_ZdlPv>

000d6806 <_ZSt25__throw_bad_function_callv>:
   d6806:	b508      	push	{r3, lr}
   d6808:	f7fe fdfc 	bl	d5404 <abort>

000d680c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d680c:	4b24      	ldr	r3, [pc, #144]	; (d68a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d680e:	681a      	ldr	r2, [r3, #0]
   d6810:	07d0      	lsls	r0, r2, #31
   d6812:	bf5c      	itt	pl
   d6814:	2201      	movpl	r2, #1
   d6816:	601a      	strpl	r2, [r3, #0]
   d6818:	4b22      	ldr	r3, [pc, #136]	; (d68a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d681a:	681a      	ldr	r2, [r3, #0]
   d681c:	07d1      	lsls	r1, r2, #31
   d681e:	bf5c      	itt	pl
   d6820:	2201      	movpl	r2, #1
   d6822:	601a      	strpl	r2, [r3, #0]
   d6824:	4b20      	ldr	r3, [pc, #128]	; (d68a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6826:	681a      	ldr	r2, [r3, #0]
   d6828:	07d2      	lsls	r2, r2, #31
   d682a:	bf5c      	itt	pl
   d682c:	2201      	movpl	r2, #1
   d682e:	601a      	strpl	r2, [r3, #0]
   d6830:	4b1e      	ldr	r3, [pc, #120]	; (d68ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6832:	681a      	ldr	r2, [r3, #0]
   d6834:	07d0      	lsls	r0, r2, #31
   d6836:	bf5c      	itt	pl
   d6838:	2201      	movpl	r2, #1
   d683a:	601a      	strpl	r2, [r3, #0]
   d683c:	4b1c      	ldr	r3, [pc, #112]	; (d68b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d683e:	681a      	ldr	r2, [r3, #0]
   d6840:	07d1      	lsls	r1, r2, #31
   d6842:	bf5c      	itt	pl
   d6844:	2201      	movpl	r2, #1
   d6846:	601a      	strpl	r2, [r3, #0]
   d6848:	4b1a      	ldr	r3, [pc, #104]	; (d68b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d684a:	681a      	ldr	r2, [r3, #0]
   d684c:	07d2      	lsls	r2, r2, #31
   d684e:	bf5c      	itt	pl
   d6850:	2201      	movpl	r2, #1
   d6852:	601a      	strpl	r2, [r3, #0]
   d6854:	4b18      	ldr	r3, [pc, #96]	; (d68b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6856:	681a      	ldr	r2, [r3, #0]
   d6858:	07d0      	lsls	r0, r2, #31
   d685a:	bf5c      	itt	pl
   d685c:	2201      	movpl	r2, #1
   d685e:	601a      	strpl	r2, [r3, #0]
   d6860:	4b16      	ldr	r3, [pc, #88]	; (d68bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6862:	681a      	ldr	r2, [r3, #0]
   d6864:	07d1      	lsls	r1, r2, #31
   d6866:	bf5c      	itt	pl
   d6868:	2201      	movpl	r2, #1
   d686a:	601a      	strpl	r2, [r3, #0]
   d686c:	4b14      	ldr	r3, [pc, #80]	; (d68c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d686e:	681a      	ldr	r2, [r3, #0]
   d6870:	07d2      	lsls	r2, r2, #31
   d6872:	bf5c      	itt	pl
   d6874:	2201      	movpl	r2, #1
   d6876:	601a      	strpl	r2, [r3, #0]
   d6878:	4b12      	ldr	r3, [pc, #72]	; (d68c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d687a:	681a      	ldr	r2, [r3, #0]
   d687c:	07d0      	lsls	r0, r2, #31
   d687e:	bf5c      	itt	pl
   d6880:	2201      	movpl	r2, #1
   d6882:	601a      	strpl	r2, [r3, #0]
   d6884:	4b10      	ldr	r3, [pc, #64]	; (d68c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6886:	681a      	ldr	r2, [r3, #0]
   d6888:	07d1      	lsls	r1, r2, #31
   d688a:	bf5c      	itt	pl
   d688c:	2201      	movpl	r2, #1
   d688e:	601a      	strpl	r2, [r3, #0]
   d6890:	4b0e      	ldr	r3, [pc, #56]	; (d68cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6892:	681a      	ldr	r2, [r3, #0]
   d6894:	07d2      	lsls	r2, r2, #31
   d6896:	bf5c      	itt	pl
   d6898:	2201      	movpl	r2, #1
   d689a:	601a      	strpl	r2, [r3, #0]
   d689c:	4770      	bx	lr
   d689e:	bf00      	nop
   d68a0:	2003e754 	.word	0x2003e754
   d68a4:	2003e750 	.word	0x2003e750
   d68a8:	2003e74c 	.word	0x2003e74c
   d68ac:	2003e748 	.word	0x2003e748
   d68b0:	2003e744 	.word	0x2003e744
   d68b4:	2003e740 	.word	0x2003e740
   d68b8:	2003e73c 	.word	0x2003e73c
   d68bc:	2003e738 	.word	0x2003e738
   d68c0:	2003e734 	.word	0x2003e734
   d68c4:	2003e730 	.word	0x2003e730
   d68c8:	2003e72c 	.word	0x2003e72c
   d68cc:	2003e728 	.word	0x2003e728

000d68d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d68d0:	4b18      	ldr	r3, [pc, #96]	; (d6934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d68d2:	681a      	ldr	r2, [r3, #0]
   d68d4:	07d1      	lsls	r1, r2, #31
   d68d6:	bf5c      	itt	pl
   d68d8:	2201      	movpl	r2, #1
   d68da:	601a      	strpl	r2, [r3, #0]
   d68dc:	4b16      	ldr	r3, [pc, #88]	; (d6938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d68de:	681a      	ldr	r2, [r3, #0]
   d68e0:	07d2      	lsls	r2, r2, #31
   d68e2:	bf5c      	itt	pl
   d68e4:	2201      	movpl	r2, #1
   d68e6:	601a      	strpl	r2, [r3, #0]
   d68e8:	4b14      	ldr	r3, [pc, #80]	; (d693c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d68ea:	681a      	ldr	r2, [r3, #0]
   d68ec:	07d0      	lsls	r0, r2, #31
   d68ee:	bf5c      	itt	pl
   d68f0:	2201      	movpl	r2, #1
   d68f2:	601a      	strpl	r2, [r3, #0]
   d68f4:	4b12      	ldr	r3, [pc, #72]	; (d6940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d68f6:	681a      	ldr	r2, [r3, #0]
   d68f8:	07d1      	lsls	r1, r2, #31
   d68fa:	bf5c      	itt	pl
   d68fc:	2201      	movpl	r2, #1
   d68fe:	601a      	strpl	r2, [r3, #0]
   d6900:	4b10      	ldr	r3, [pc, #64]	; (d6944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6902:	681a      	ldr	r2, [r3, #0]
   d6904:	07d2      	lsls	r2, r2, #31
   d6906:	bf5c      	itt	pl
   d6908:	2201      	movpl	r2, #1
   d690a:	601a      	strpl	r2, [r3, #0]
   d690c:	4b0e      	ldr	r3, [pc, #56]	; (d6948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d690e:	681a      	ldr	r2, [r3, #0]
   d6910:	07d0      	lsls	r0, r2, #31
   d6912:	bf5c      	itt	pl
   d6914:	2201      	movpl	r2, #1
   d6916:	601a      	strpl	r2, [r3, #0]
   d6918:	4b0c      	ldr	r3, [pc, #48]	; (d694c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d691a:	681a      	ldr	r2, [r3, #0]
   d691c:	07d1      	lsls	r1, r2, #31
   d691e:	bf5c      	itt	pl
   d6920:	2201      	movpl	r2, #1
   d6922:	601a      	strpl	r2, [r3, #0]
   d6924:	4b0a      	ldr	r3, [pc, #40]	; (d6950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6926:	681a      	ldr	r2, [r3, #0]
   d6928:	07d2      	lsls	r2, r2, #31
   d692a:	bf5c      	itt	pl
   d692c:	2201      	movpl	r2, #1
   d692e:	601a      	strpl	r2, [r3, #0]
   d6930:	4770      	bx	lr
   d6932:	bf00      	nop
   d6934:	2003e774 	.word	0x2003e774
   d6938:	2003e770 	.word	0x2003e770
   d693c:	2003e76c 	.word	0x2003e76c
   d6940:	2003e768 	.word	0x2003e768
   d6944:	2003e764 	.word	0x2003e764
   d6948:	2003e760 	.word	0x2003e760
   d694c:	2003e75c 	.word	0x2003e75c
   d6950:	2003e758 	.word	0x2003e758

000d6954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6954:	4b18      	ldr	r3, [pc, #96]	; (d69b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6956:	681a      	ldr	r2, [r3, #0]
   d6958:	07d1      	lsls	r1, r2, #31
   d695a:	bf5c      	itt	pl
   d695c:	2201      	movpl	r2, #1
   d695e:	601a      	strpl	r2, [r3, #0]
   d6960:	4b16      	ldr	r3, [pc, #88]	; (d69bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6962:	681a      	ldr	r2, [r3, #0]
   d6964:	07d2      	lsls	r2, r2, #31
   d6966:	bf5c      	itt	pl
   d6968:	2201      	movpl	r2, #1
   d696a:	601a      	strpl	r2, [r3, #0]
   d696c:	4b14      	ldr	r3, [pc, #80]	; (d69c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d696e:	681a      	ldr	r2, [r3, #0]
   d6970:	07d0      	lsls	r0, r2, #31
   d6972:	bf5c      	itt	pl
   d6974:	2201      	movpl	r2, #1
   d6976:	601a      	strpl	r2, [r3, #0]
   d6978:	4b12      	ldr	r3, [pc, #72]	; (d69c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d697a:	681a      	ldr	r2, [r3, #0]
   d697c:	07d1      	lsls	r1, r2, #31
   d697e:	bf5c      	itt	pl
   d6980:	2201      	movpl	r2, #1
   d6982:	601a      	strpl	r2, [r3, #0]
   d6984:	4b10      	ldr	r3, [pc, #64]	; (d69c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6986:	681a      	ldr	r2, [r3, #0]
   d6988:	07d2      	lsls	r2, r2, #31
   d698a:	bf5c      	itt	pl
   d698c:	2201      	movpl	r2, #1
   d698e:	601a      	strpl	r2, [r3, #0]
   d6990:	4b0e      	ldr	r3, [pc, #56]	; (d69cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6992:	681a      	ldr	r2, [r3, #0]
   d6994:	07d0      	lsls	r0, r2, #31
   d6996:	bf5c      	itt	pl
   d6998:	2201      	movpl	r2, #1
   d699a:	601a      	strpl	r2, [r3, #0]
   d699c:	4b0c      	ldr	r3, [pc, #48]	; (d69d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d699e:	681a      	ldr	r2, [r3, #0]
   d69a0:	07d1      	lsls	r1, r2, #31
   d69a2:	bf5c      	itt	pl
   d69a4:	2201      	movpl	r2, #1
   d69a6:	601a      	strpl	r2, [r3, #0]
   d69a8:	4b0a      	ldr	r3, [pc, #40]	; (d69d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d69aa:	681a      	ldr	r2, [r3, #0]
   d69ac:	07d2      	lsls	r2, r2, #31
   d69ae:	bf5c      	itt	pl
   d69b0:	2201      	movpl	r2, #1
   d69b2:	601a      	strpl	r2, [r3, #0]
   d69b4:	4770      	bx	lr
   d69b6:	bf00      	nop
   d69b8:	2003e794 	.word	0x2003e794
   d69bc:	2003e790 	.word	0x2003e790
   d69c0:	2003e78c 	.word	0x2003e78c
   d69c4:	2003e788 	.word	0x2003e788
   d69c8:	2003e784 	.word	0x2003e784
   d69cc:	2003e780 	.word	0x2003e780
   d69d0:	2003e77c 	.word	0x2003e77c
   d69d4:	2003e778 	.word	0x2003e778

000d69d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d69d8:	4b24      	ldr	r3, [pc, #144]	; (d6a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d69da:	681a      	ldr	r2, [r3, #0]
   d69dc:	07d0      	lsls	r0, r2, #31
   d69de:	bf5c      	itt	pl
   d69e0:	2201      	movpl	r2, #1
   d69e2:	601a      	strpl	r2, [r3, #0]
   d69e4:	4b22      	ldr	r3, [pc, #136]	; (d6a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d69e6:	681a      	ldr	r2, [r3, #0]
   d69e8:	07d1      	lsls	r1, r2, #31
   d69ea:	bf5c      	itt	pl
   d69ec:	2201      	movpl	r2, #1
   d69ee:	601a      	strpl	r2, [r3, #0]
   d69f0:	4b20      	ldr	r3, [pc, #128]	; (d6a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d69f2:	681a      	ldr	r2, [r3, #0]
   d69f4:	07d2      	lsls	r2, r2, #31
   d69f6:	bf5c      	itt	pl
   d69f8:	2201      	movpl	r2, #1
   d69fa:	601a      	strpl	r2, [r3, #0]
   d69fc:	4b1e      	ldr	r3, [pc, #120]	; (d6a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d69fe:	681a      	ldr	r2, [r3, #0]
   d6a00:	07d0      	lsls	r0, r2, #31
   d6a02:	bf5c      	itt	pl
   d6a04:	2201      	movpl	r2, #1
   d6a06:	601a      	strpl	r2, [r3, #0]
   d6a08:	4b1c      	ldr	r3, [pc, #112]	; (d6a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6a0a:	681a      	ldr	r2, [r3, #0]
   d6a0c:	07d1      	lsls	r1, r2, #31
   d6a0e:	bf5c      	itt	pl
   d6a10:	2201      	movpl	r2, #1
   d6a12:	601a      	strpl	r2, [r3, #0]
   d6a14:	4b1a      	ldr	r3, [pc, #104]	; (d6a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6a16:	681a      	ldr	r2, [r3, #0]
   d6a18:	07d2      	lsls	r2, r2, #31
   d6a1a:	bf5c      	itt	pl
   d6a1c:	2201      	movpl	r2, #1
   d6a1e:	601a      	strpl	r2, [r3, #0]
   d6a20:	4b18      	ldr	r3, [pc, #96]	; (d6a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6a22:	681a      	ldr	r2, [r3, #0]
   d6a24:	07d0      	lsls	r0, r2, #31
   d6a26:	bf5c      	itt	pl
   d6a28:	2201      	movpl	r2, #1
   d6a2a:	601a      	strpl	r2, [r3, #0]
   d6a2c:	4b16      	ldr	r3, [pc, #88]	; (d6a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6a2e:	681a      	ldr	r2, [r3, #0]
   d6a30:	07d1      	lsls	r1, r2, #31
   d6a32:	bf5c      	itt	pl
   d6a34:	2201      	movpl	r2, #1
   d6a36:	601a      	strpl	r2, [r3, #0]
   d6a38:	4b14      	ldr	r3, [pc, #80]	; (d6a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6a3a:	681a      	ldr	r2, [r3, #0]
   d6a3c:	07d2      	lsls	r2, r2, #31
   d6a3e:	bf5c      	itt	pl
   d6a40:	2201      	movpl	r2, #1
   d6a42:	601a      	strpl	r2, [r3, #0]
   d6a44:	4b12      	ldr	r3, [pc, #72]	; (d6a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6a46:	681a      	ldr	r2, [r3, #0]
   d6a48:	07d0      	lsls	r0, r2, #31
   d6a4a:	bf5c      	itt	pl
   d6a4c:	2201      	movpl	r2, #1
   d6a4e:	601a      	strpl	r2, [r3, #0]
   d6a50:	4b10      	ldr	r3, [pc, #64]	; (d6a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6a52:	681a      	ldr	r2, [r3, #0]
   d6a54:	07d1      	lsls	r1, r2, #31
   d6a56:	bf5c      	itt	pl
   d6a58:	2201      	movpl	r2, #1
   d6a5a:	601a      	strpl	r2, [r3, #0]
   d6a5c:	4b0e      	ldr	r3, [pc, #56]	; (d6a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6a5e:	681a      	ldr	r2, [r3, #0]
   d6a60:	07d2      	lsls	r2, r2, #31
   d6a62:	bf5c      	itt	pl
   d6a64:	2201      	movpl	r2, #1
   d6a66:	601a      	strpl	r2, [r3, #0]
   d6a68:	4770      	bx	lr
   d6a6a:	bf00      	nop
   d6a6c:	2003e7c4 	.word	0x2003e7c4
   d6a70:	2003e7c0 	.word	0x2003e7c0
   d6a74:	2003e7bc 	.word	0x2003e7bc
   d6a78:	2003e7b8 	.word	0x2003e7b8
   d6a7c:	2003e7b4 	.word	0x2003e7b4
   d6a80:	2003e7b0 	.word	0x2003e7b0
   d6a84:	2003e7ac 	.word	0x2003e7ac
   d6a88:	2003e7a8 	.word	0x2003e7a8
   d6a8c:	2003e7a4 	.word	0x2003e7a4
   d6a90:	2003e7a0 	.word	0x2003e7a0
   d6a94:	2003e79c 	.word	0x2003e79c
   d6a98:	2003e798 	.word	0x2003e798

000d6a9c <__aeabi_drsub>:
   d6a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6aa0:	e002      	b.n	d6aa8 <__adddf3>
   d6aa2:	bf00      	nop

000d6aa4 <__aeabi_dsub>:
   d6aa4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6aa8 <__adddf3>:
   d6aa8:	b530      	push	{r4, r5, lr}
   d6aaa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6aae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6ab2:	ea94 0f05 	teq	r4, r5
   d6ab6:	bf08      	it	eq
   d6ab8:	ea90 0f02 	teqeq	r0, r2
   d6abc:	bf1f      	itttt	ne
   d6abe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6ac2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6ac6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6aca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ace:	f000 80e2 	beq.w	d6c96 <__adddf3+0x1ee>
   d6ad2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6ad6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6ada:	bfb8      	it	lt
   d6adc:	426d      	neglt	r5, r5
   d6ade:	dd0c      	ble.n	d6afa <__adddf3+0x52>
   d6ae0:	442c      	add	r4, r5
   d6ae2:	ea80 0202 	eor.w	r2, r0, r2
   d6ae6:	ea81 0303 	eor.w	r3, r1, r3
   d6aea:	ea82 0000 	eor.w	r0, r2, r0
   d6aee:	ea83 0101 	eor.w	r1, r3, r1
   d6af2:	ea80 0202 	eor.w	r2, r0, r2
   d6af6:	ea81 0303 	eor.w	r3, r1, r3
   d6afa:	2d36      	cmp	r5, #54	; 0x36
   d6afc:	bf88      	it	hi
   d6afe:	bd30      	pophi	{r4, r5, pc}
   d6b00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6b04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6b08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6b0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6b10:	d002      	beq.n	d6b18 <__adddf3+0x70>
   d6b12:	4240      	negs	r0, r0
   d6b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6b18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6b1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6b20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6b24:	d002      	beq.n	d6b2c <__adddf3+0x84>
   d6b26:	4252      	negs	r2, r2
   d6b28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6b2c:	ea94 0f05 	teq	r4, r5
   d6b30:	f000 80a7 	beq.w	d6c82 <__adddf3+0x1da>
   d6b34:	f1a4 0401 	sub.w	r4, r4, #1
   d6b38:	f1d5 0e20 	rsbs	lr, r5, #32
   d6b3c:	db0d      	blt.n	d6b5a <__adddf3+0xb2>
   d6b3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6b42:	fa22 f205 	lsr.w	r2, r2, r5
   d6b46:	1880      	adds	r0, r0, r2
   d6b48:	f141 0100 	adc.w	r1, r1, #0
   d6b4c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6b50:	1880      	adds	r0, r0, r2
   d6b52:	fa43 f305 	asr.w	r3, r3, r5
   d6b56:	4159      	adcs	r1, r3
   d6b58:	e00e      	b.n	d6b78 <__adddf3+0xd0>
   d6b5a:	f1a5 0520 	sub.w	r5, r5, #32
   d6b5e:	f10e 0e20 	add.w	lr, lr, #32
   d6b62:	2a01      	cmp	r2, #1
   d6b64:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6b68:	bf28      	it	cs
   d6b6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6b6e:	fa43 f305 	asr.w	r3, r3, r5
   d6b72:	18c0      	adds	r0, r0, r3
   d6b74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6b78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b7c:	d507      	bpl.n	d6b8e <__adddf3+0xe6>
   d6b7e:	f04f 0e00 	mov.w	lr, #0
   d6b82:	f1dc 0c00 	rsbs	ip, ip, #0
   d6b86:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6b8a:	eb6e 0101 	sbc.w	r1, lr, r1
   d6b8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6b92:	d31b      	bcc.n	d6bcc <__adddf3+0x124>
   d6b94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6b98:	d30c      	bcc.n	d6bb4 <__adddf3+0x10c>
   d6b9a:	0849      	lsrs	r1, r1, #1
   d6b9c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6ba0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6ba4:	f104 0401 	add.w	r4, r4, #1
   d6ba8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6bac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6bb0:	f080 809a 	bcs.w	d6ce8 <__adddf3+0x240>
   d6bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6bb8:	bf08      	it	eq
   d6bba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6bbe:	f150 0000 	adcs.w	r0, r0, #0
   d6bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6bc6:	ea41 0105 	orr.w	r1, r1, r5
   d6bca:	bd30      	pop	{r4, r5, pc}
   d6bcc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6bd0:	4140      	adcs	r0, r0
   d6bd2:	eb41 0101 	adc.w	r1, r1, r1
   d6bd6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bda:	f1a4 0401 	sub.w	r4, r4, #1
   d6bde:	d1e9      	bne.n	d6bb4 <__adddf3+0x10c>
   d6be0:	f091 0f00 	teq	r1, #0
   d6be4:	bf04      	itt	eq
   d6be6:	4601      	moveq	r1, r0
   d6be8:	2000      	moveq	r0, #0
   d6bea:	fab1 f381 	clz	r3, r1
   d6bee:	bf08      	it	eq
   d6bf0:	3320      	addeq	r3, #32
   d6bf2:	f1a3 030b 	sub.w	r3, r3, #11
   d6bf6:	f1b3 0220 	subs.w	r2, r3, #32
   d6bfa:	da0c      	bge.n	d6c16 <__adddf3+0x16e>
   d6bfc:	320c      	adds	r2, #12
   d6bfe:	dd08      	ble.n	d6c12 <__adddf3+0x16a>
   d6c00:	f102 0c14 	add.w	ip, r2, #20
   d6c04:	f1c2 020c 	rsb	r2, r2, #12
   d6c08:	fa01 f00c 	lsl.w	r0, r1, ip
   d6c0c:	fa21 f102 	lsr.w	r1, r1, r2
   d6c10:	e00c      	b.n	d6c2c <__adddf3+0x184>
   d6c12:	f102 0214 	add.w	r2, r2, #20
   d6c16:	bfd8      	it	le
   d6c18:	f1c2 0c20 	rsble	ip, r2, #32
   d6c1c:	fa01 f102 	lsl.w	r1, r1, r2
   d6c20:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6c24:	bfdc      	itt	le
   d6c26:	ea41 010c 	orrle.w	r1, r1, ip
   d6c2a:	4090      	lslle	r0, r2
   d6c2c:	1ae4      	subs	r4, r4, r3
   d6c2e:	bfa2      	ittt	ge
   d6c30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6c34:	4329      	orrge	r1, r5
   d6c36:	bd30      	popge	{r4, r5, pc}
   d6c38:	ea6f 0404 	mvn.w	r4, r4
   d6c3c:	3c1f      	subs	r4, #31
   d6c3e:	da1c      	bge.n	d6c7a <__adddf3+0x1d2>
   d6c40:	340c      	adds	r4, #12
   d6c42:	dc0e      	bgt.n	d6c62 <__adddf3+0x1ba>
   d6c44:	f104 0414 	add.w	r4, r4, #20
   d6c48:	f1c4 0220 	rsb	r2, r4, #32
   d6c4c:	fa20 f004 	lsr.w	r0, r0, r4
   d6c50:	fa01 f302 	lsl.w	r3, r1, r2
   d6c54:	ea40 0003 	orr.w	r0, r0, r3
   d6c58:	fa21 f304 	lsr.w	r3, r1, r4
   d6c5c:	ea45 0103 	orr.w	r1, r5, r3
   d6c60:	bd30      	pop	{r4, r5, pc}
   d6c62:	f1c4 040c 	rsb	r4, r4, #12
   d6c66:	f1c4 0220 	rsb	r2, r4, #32
   d6c6a:	fa20 f002 	lsr.w	r0, r0, r2
   d6c6e:	fa01 f304 	lsl.w	r3, r1, r4
   d6c72:	ea40 0003 	orr.w	r0, r0, r3
   d6c76:	4629      	mov	r1, r5
   d6c78:	bd30      	pop	{r4, r5, pc}
   d6c7a:	fa21 f004 	lsr.w	r0, r1, r4
   d6c7e:	4629      	mov	r1, r5
   d6c80:	bd30      	pop	{r4, r5, pc}
   d6c82:	f094 0f00 	teq	r4, #0
   d6c86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6c8a:	bf06      	itte	eq
   d6c8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6c90:	3401      	addeq	r4, #1
   d6c92:	3d01      	subne	r5, #1
   d6c94:	e74e      	b.n	d6b34 <__adddf3+0x8c>
   d6c96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6c9a:	bf18      	it	ne
   d6c9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ca0:	d029      	beq.n	d6cf6 <__adddf3+0x24e>
   d6ca2:	ea94 0f05 	teq	r4, r5
   d6ca6:	bf08      	it	eq
   d6ca8:	ea90 0f02 	teqeq	r0, r2
   d6cac:	d005      	beq.n	d6cba <__adddf3+0x212>
   d6cae:	ea54 0c00 	orrs.w	ip, r4, r0
   d6cb2:	bf04      	itt	eq
   d6cb4:	4619      	moveq	r1, r3
   d6cb6:	4610      	moveq	r0, r2
   d6cb8:	bd30      	pop	{r4, r5, pc}
   d6cba:	ea91 0f03 	teq	r1, r3
   d6cbe:	bf1e      	ittt	ne
   d6cc0:	2100      	movne	r1, #0
   d6cc2:	2000      	movne	r0, #0
   d6cc4:	bd30      	popne	{r4, r5, pc}
   d6cc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6cca:	d105      	bne.n	d6cd8 <__adddf3+0x230>
   d6ccc:	0040      	lsls	r0, r0, #1
   d6cce:	4149      	adcs	r1, r1
   d6cd0:	bf28      	it	cs
   d6cd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6cd6:	bd30      	pop	{r4, r5, pc}
   d6cd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6cdc:	bf3c      	itt	cc
   d6cde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6ce2:	bd30      	popcc	{r4, r5, pc}
   d6ce4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ce8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6cec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6cf0:	f04f 0000 	mov.w	r0, #0
   d6cf4:	bd30      	pop	{r4, r5, pc}
   d6cf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6cfa:	bf1a      	itte	ne
   d6cfc:	4619      	movne	r1, r3
   d6cfe:	4610      	movne	r0, r2
   d6d00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6d04:	bf1c      	itt	ne
   d6d06:	460b      	movne	r3, r1
   d6d08:	4602      	movne	r2, r0
   d6d0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6d0e:	bf06      	itte	eq
   d6d10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6d14:	ea91 0f03 	teqeq	r1, r3
   d6d18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6d1c:	bd30      	pop	{r4, r5, pc}
   d6d1e:	bf00      	nop

000d6d20 <__aeabi_ui2d>:
   d6d20:	f090 0f00 	teq	r0, #0
   d6d24:	bf04      	itt	eq
   d6d26:	2100      	moveq	r1, #0
   d6d28:	4770      	bxeq	lr
   d6d2a:	b530      	push	{r4, r5, lr}
   d6d2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6d30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6d34:	f04f 0500 	mov.w	r5, #0
   d6d38:	f04f 0100 	mov.w	r1, #0
   d6d3c:	e750      	b.n	d6be0 <__adddf3+0x138>
   d6d3e:	bf00      	nop

000d6d40 <__aeabi_i2d>:
   d6d40:	f090 0f00 	teq	r0, #0
   d6d44:	bf04      	itt	eq
   d6d46:	2100      	moveq	r1, #0
   d6d48:	4770      	bxeq	lr
   d6d4a:	b530      	push	{r4, r5, lr}
   d6d4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6d50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6d54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6d58:	bf48      	it	mi
   d6d5a:	4240      	negmi	r0, r0
   d6d5c:	f04f 0100 	mov.w	r1, #0
   d6d60:	e73e      	b.n	d6be0 <__adddf3+0x138>
   d6d62:	bf00      	nop

000d6d64 <__aeabi_f2d>:
   d6d64:	0042      	lsls	r2, r0, #1
   d6d66:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6d6a:	ea4f 0131 	mov.w	r1, r1, rrx
   d6d6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6d72:	bf1f      	itttt	ne
   d6d74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6d78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6d7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6d80:	4770      	bxne	lr
   d6d82:	f092 0f00 	teq	r2, #0
   d6d86:	bf14      	ite	ne
   d6d88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6d8c:	4770      	bxeq	lr
   d6d8e:	b530      	push	{r4, r5, lr}
   d6d90:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6d94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6d9c:	e720      	b.n	d6be0 <__adddf3+0x138>
   d6d9e:	bf00      	nop

000d6da0 <__aeabi_ul2d>:
   d6da0:	ea50 0201 	orrs.w	r2, r0, r1
   d6da4:	bf08      	it	eq
   d6da6:	4770      	bxeq	lr
   d6da8:	b530      	push	{r4, r5, lr}
   d6daa:	f04f 0500 	mov.w	r5, #0
   d6dae:	e00a      	b.n	d6dc6 <__aeabi_l2d+0x16>

000d6db0 <__aeabi_l2d>:
   d6db0:	ea50 0201 	orrs.w	r2, r0, r1
   d6db4:	bf08      	it	eq
   d6db6:	4770      	bxeq	lr
   d6db8:	b530      	push	{r4, r5, lr}
   d6dba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6dbe:	d502      	bpl.n	d6dc6 <__aeabi_l2d+0x16>
   d6dc0:	4240      	negs	r0, r0
   d6dc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6dc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6dca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6dce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6dd2:	f43f aedc 	beq.w	d6b8e <__adddf3+0xe6>
   d6dd6:	f04f 0203 	mov.w	r2, #3
   d6dda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6dde:	bf18      	it	ne
   d6de0:	3203      	addne	r2, #3
   d6de2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6de6:	bf18      	it	ne
   d6de8:	3203      	addne	r2, #3
   d6dea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6dee:	f1c2 0320 	rsb	r3, r2, #32
   d6df2:	fa00 fc03 	lsl.w	ip, r0, r3
   d6df6:	fa20 f002 	lsr.w	r0, r0, r2
   d6dfa:	fa01 fe03 	lsl.w	lr, r1, r3
   d6dfe:	ea40 000e 	orr.w	r0, r0, lr
   d6e02:	fa21 f102 	lsr.w	r1, r1, r2
   d6e06:	4414      	add	r4, r2
   d6e08:	e6c1      	b.n	d6b8e <__adddf3+0xe6>
   d6e0a:	bf00      	nop

000d6e0c <__aeabi_dmul>:
   d6e0c:	b570      	push	{r4, r5, r6, lr}
   d6e0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6e12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6e16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6e1a:	bf1d      	ittte	ne
   d6e1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6e20:	ea94 0f0c 	teqne	r4, ip
   d6e24:	ea95 0f0c 	teqne	r5, ip
   d6e28:	f000 f8de 	bleq	d6fe8 <__aeabi_dmul+0x1dc>
   d6e2c:	442c      	add	r4, r5
   d6e2e:	ea81 0603 	eor.w	r6, r1, r3
   d6e32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6e36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6e3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6e3e:	bf18      	it	ne
   d6e40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6e44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6e4c:	d038      	beq.n	d6ec0 <__aeabi_dmul+0xb4>
   d6e4e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6e52:	f04f 0500 	mov.w	r5, #0
   d6e56:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6e5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6e5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6e62:	f04f 0600 	mov.w	r6, #0
   d6e66:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6e6a:	f09c 0f00 	teq	ip, #0
   d6e6e:	bf18      	it	ne
   d6e70:	f04e 0e01 	orrne.w	lr, lr, #1
   d6e74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6e78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6e7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6e80:	d204      	bcs.n	d6e8c <__aeabi_dmul+0x80>
   d6e82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6e86:	416d      	adcs	r5, r5
   d6e88:	eb46 0606 	adc.w	r6, r6, r6
   d6e8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6e90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6e94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6e98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6e9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6ea0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ea4:	bf88      	it	hi
   d6ea6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6eaa:	d81e      	bhi.n	d6eea <__aeabi_dmul+0xde>
   d6eac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6eb0:	bf08      	it	eq
   d6eb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6eb6:	f150 0000 	adcs.w	r0, r0, #0
   d6eba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ebe:	bd70      	pop	{r4, r5, r6, pc}
   d6ec0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6ec4:	ea46 0101 	orr.w	r1, r6, r1
   d6ec8:	ea40 0002 	orr.w	r0, r0, r2
   d6ecc:	ea81 0103 	eor.w	r1, r1, r3
   d6ed0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6ed4:	bfc2      	ittt	gt
   d6ed6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6eda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ede:	bd70      	popgt	{r4, r5, r6, pc}
   d6ee0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ee4:	f04f 0e00 	mov.w	lr, #0
   d6ee8:	3c01      	subs	r4, #1
   d6eea:	f300 80ab 	bgt.w	d7044 <__aeabi_dmul+0x238>
   d6eee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6ef2:	bfde      	ittt	le
   d6ef4:	2000      	movle	r0, #0
   d6ef6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6efa:	bd70      	pople	{r4, r5, r6, pc}
   d6efc:	f1c4 0400 	rsb	r4, r4, #0
   d6f00:	3c20      	subs	r4, #32
   d6f02:	da35      	bge.n	d6f70 <__aeabi_dmul+0x164>
   d6f04:	340c      	adds	r4, #12
   d6f06:	dc1b      	bgt.n	d6f40 <__aeabi_dmul+0x134>
   d6f08:	f104 0414 	add.w	r4, r4, #20
   d6f0c:	f1c4 0520 	rsb	r5, r4, #32
   d6f10:	fa00 f305 	lsl.w	r3, r0, r5
   d6f14:	fa20 f004 	lsr.w	r0, r0, r4
   d6f18:	fa01 f205 	lsl.w	r2, r1, r5
   d6f1c:	ea40 0002 	orr.w	r0, r0, r2
   d6f20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6f28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6f2c:	fa21 f604 	lsr.w	r6, r1, r4
   d6f30:	eb42 0106 	adc.w	r1, r2, r6
   d6f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6f38:	bf08      	it	eq
   d6f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6f3e:	bd70      	pop	{r4, r5, r6, pc}
   d6f40:	f1c4 040c 	rsb	r4, r4, #12
   d6f44:	f1c4 0520 	rsb	r5, r4, #32
   d6f48:	fa00 f304 	lsl.w	r3, r0, r4
   d6f4c:	fa20 f005 	lsr.w	r0, r0, r5
   d6f50:	fa01 f204 	lsl.w	r2, r1, r4
   d6f54:	ea40 0002 	orr.w	r0, r0, r2
   d6f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6f60:	f141 0100 	adc.w	r1, r1, #0
   d6f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6f68:	bf08      	it	eq
   d6f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6f6e:	bd70      	pop	{r4, r5, r6, pc}
   d6f70:	f1c4 0520 	rsb	r5, r4, #32
   d6f74:	fa00 f205 	lsl.w	r2, r0, r5
   d6f78:	ea4e 0e02 	orr.w	lr, lr, r2
   d6f7c:	fa20 f304 	lsr.w	r3, r0, r4
   d6f80:	fa01 f205 	lsl.w	r2, r1, r5
   d6f84:	ea43 0302 	orr.w	r3, r3, r2
   d6f88:	fa21 f004 	lsr.w	r0, r1, r4
   d6f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f90:	fa21 f204 	lsr.w	r2, r1, r4
   d6f94:	ea20 0002 	bic.w	r0, r0, r2
   d6f98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6fa0:	bf08      	it	eq
   d6fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6fa6:	bd70      	pop	{r4, r5, r6, pc}
   d6fa8:	f094 0f00 	teq	r4, #0
   d6fac:	d10f      	bne.n	d6fce <__aeabi_dmul+0x1c2>
   d6fae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6fb2:	0040      	lsls	r0, r0, #1
   d6fb4:	eb41 0101 	adc.w	r1, r1, r1
   d6fb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6fbc:	bf08      	it	eq
   d6fbe:	3c01      	subeq	r4, #1
   d6fc0:	d0f7      	beq.n	d6fb2 <__aeabi_dmul+0x1a6>
   d6fc2:	ea41 0106 	orr.w	r1, r1, r6
   d6fc6:	f095 0f00 	teq	r5, #0
   d6fca:	bf18      	it	ne
   d6fcc:	4770      	bxne	lr
   d6fce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6fd2:	0052      	lsls	r2, r2, #1
   d6fd4:	eb43 0303 	adc.w	r3, r3, r3
   d6fd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6fdc:	bf08      	it	eq
   d6fde:	3d01      	subeq	r5, #1
   d6fe0:	d0f7      	beq.n	d6fd2 <__aeabi_dmul+0x1c6>
   d6fe2:	ea43 0306 	orr.w	r3, r3, r6
   d6fe6:	4770      	bx	lr
   d6fe8:	ea94 0f0c 	teq	r4, ip
   d6fec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ff0:	bf18      	it	ne
   d6ff2:	ea95 0f0c 	teqne	r5, ip
   d6ff6:	d00c      	beq.n	d7012 <__aeabi_dmul+0x206>
   d6ff8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ffc:	bf18      	it	ne
   d6ffe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7002:	d1d1      	bne.n	d6fa8 <__aeabi_dmul+0x19c>
   d7004:	ea81 0103 	eor.w	r1, r1, r3
   d7008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d700c:	f04f 0000 	mov.w	r0, #0
   d7010:	bd70      	pop	{r4, r5, r6, pc}
   d7012:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7016:	bf06      	itte	eq
   d7018:	4610      	moveq	r0, r2
   d701a:	4619      	moveq	r1, r3
   d701c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7020:	d019      	beq.n	d7056 <__aeabi_dmul+0x24a>
   d7022:	ea94 0f0c 	teq	r4, ip
   d7026:	d102      	bne.n	d702e <__aeabi_dmul+0x222>
   d7028:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d702c:	d113      	bne.n	d7056 <__aeabi_dmul+0x24a>
   d702e:	ea95 0f0c 	teq	r5, ip
   d7032:	d105      	bne.n	d7040 <__aeabi_dmul+0x234>
   d7034:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7038:	bf1c      	itt	ne
   d703a:	4610      	movne	r0, r2
   d703c:	4619      	movne	r1, r3
   d703e:	d10a      	bne.n	d7056 <__aeabi_dmul+0x24a>
   d7040:	ea81 0103 	eor.w	r1, r1, r3
   d7044:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7048:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d704c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7050:	f04f 0000 	mov.w	r0, #0
   d7054:	bd70      	pop	{r4, r5, r6, pc}
   d7056:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d705a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d705e:	bd70      	pop	{r4, r5, r6, pc}

000d7060 <__aeabi_ddiv>:
   d7060:	b570      	push	{r4, r5, r6, lr}
   d7062:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7066:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d706a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d706e:	bf1d      	ittte	ne
   d7070:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7074:	ea94 0f0c 	teqne	r4, ip
   d7078:	ea95 0f0c 	teqne	r5, ip
   d707c:	f000 f8a7 	bleq	d71ce <__aeabi_ddiv+0x16e>
   d7080:	eba4 0405 	sub.w	r4, r4, r5
   d7084:	ea81 0e03 	eor.w	lr, r1, r3
   d7088:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d708c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7090:	f000 8088 	beq.w	d71a4 <__aeabi_ddiv+0x144>
   d7094:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7098:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d709c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d70a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d70a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d70a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d70ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d70b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d70b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d70b8:	429d      	cmp	r5, r3
   d70ba:	bf08      	it	eq
   d70bc:	4296      	cmpeq	r6, r2
   d70be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d70c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d70c6:	d202      	bcs.n	d70ce <__aeabi_ddiv+0x6e>
   d70c8:	085b      	lsrs	r3, r3, #1
   d70ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d70ce:	1ab6      	subs	r6, r6, r2
   d70d0:	eb65 0503 	sbc.w	r5, r5, r3
   d70d4:	085b      	lsrs	r3, r3, #1
   d70d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d70da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d70de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d70e2:	ebb6 0e02 	subs.w	lr, r6, r2
   d70e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d70ea:	bf22      	ittt	cs
   d70ec:	1ab6      	subcs	r6, r6, r2
   d70ee:	4675      	movcs	r5, lr
   d70f0:	ea40 000c 	orrcs.w	r0, r0, ip
   d70f4:	085b      	lsrs	r3, r3, #1
   d70f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d70fa:	ebb6 0e02 	subs.w	lr, r6, r2
   d70fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7102:	bf22      	ittt	cs
   d7104:	1ab6      	subcs	r6, r6, r2
   d7106:	4675      	movcs	r5, lr
   d7108:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d710c:	085b      	lsrs	r3, r3, #1
   d710e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7112:	ebb6 0e02 	subs.w	lr, r6, r2
   d7116:	eb75 0e03 	sbcs.w	lr, r5, r3
   d711a:	bf22      	ittt	cs
   d711c:	1ab6      	subcs	r6, r6, r2
   d711e:	4675      	movcs	r5, lr
   d7120:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7124:	085b      	lsrs	r3, r3, #1
   d7126:	ea4f 0232 	mov.w	r2, r2, rrx
   d712a:	ebb6 0e02 	subs.w	lr, r6, r2
   d712e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7132:	bf22      	ittt	cs
   d7134:	1ab6      	subcs	r6, r6, r2
   d7136:	4675      	movcs	r5, lr
   d7138:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d713c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7140:	d018      	beq.n	d7174 <__aeabi_ddiv+0x114>
   d7142:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7146:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d714a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d714e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7152:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7156:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d715a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d715e:	d1c0      	bne.n	d70e2 <__aeabi_ddiv+0x82>
   d7160:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7164:	d10b      	bne.n	d717e <__aeabi_ddiv+0x11e>
   d7166:	ea41 0100 	orr.w	r1, r1, r0
   d716a:	f04f 0000 	mov.w	r0, #0
   d716e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7172:	e7b6      	b.n	d70e2 <__aeabi_ddiv+0x82>
   d7174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7178:	bf04      	itt	eq
   d717a:	4301      	orreq	r1, r0
   d717c:	2000      	moveq	r0, #0
   d717e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7182:	bf88      	it	hi
   d7184:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7188:	f63f aeaf 	bhi.w	d6eea <__aeabi_dmul+0xde>
   d718c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7190:	bf04      	itt	eq
   d7192:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7196:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d719a:	f150 0000 	adcs.w	r0, r0, #0
   d719e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71a2:	bd70      	pop	{r4, r5, r6, pc}
   d71a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d71a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d71ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d71b0:	bfc2      	ittt	gt
   d71b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d71b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d71ba:	bd70      	popgt	{r4, r5, r6, pc}
   d71bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d71c0:	f04f 0e00 	mov.w	lr, #0
   d71c4:	3c01      	subs	r4, #1
   d71c6:	e690      	b.n	d6eea <__aeabi_dmul+0xde>
   d71c8:	ea45 0e06 	orr.w	lr, r5, r6
   d71cc:	e68d      	b.n	d6eea <__aeabi_dmul+0xde>
   d71ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d71d2:	ea94 0f0c 	teq	r4, ip
   d71d6:	bf08      	it	eq
   d71d8:	ea95 0f0c 	teqeq	r5, ip
   d71dc:	f43f af3b 	beq.w	d7056 <__aeabi_dmul+0x24a>
   d71e0:	ea94 0f0c 	teq	r4, ip
   d71e4:	d10a      	bne.n	d71fc <__aeabi_ddiv+0x19c>
   d71e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d71ea:	f47f af34 	bne.w	d7056 <__aeabi_dmul+0x24a>
   d71ee:	ea95 0f0c 	teq	r5, ip
   d71f2:	f47f af25 	bne.w	d7040 <__aeabi_dmul+0x234>
   d71f6:	4610      	mov	r0, r2
   d71f8:	4619      	mov	r1, r3
   d71fa:	e72c      	b.n	d7056 <__aeabi_dmul+0x24a>
   d71fc:	ea95 0f0c 	teq	r5, ip
   d7200:	d106      	bne.n	d7210 <__aeabi_ddiv+0x1b0>
   d7202:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7206:	f43f aefd 	beq.w	d7004 <__aeabi_dmul+0x1f8>
   d720a:	4610      	mov	r0, r2
   d720c:	4619      	mov	r1, r3
   d720e:	e722      	b.n	d7056 <__aeabi_dmul+0x24a>
   d7210:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7214:	bf18      	it	ne
   d7216:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d721a:	f47f aec5 	bne.w	d6fa8 <__aeabi_dmul+0x19c>
   d721e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7222:	f47f af0d 	bne.w	d7040 <__aeabi_dmul+0x234>
   d7226:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d722a:	f47f aeeb 	bne.w	d7004 <__aeabi_dmul+0x1f8>
   d722e:	e712      	b.n	d7056 <__aeabi_dmul+0x24a>

000d7230 <__aeabi_d2f>:
   d7230:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7234:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7238:	bf24      	itt	cs
   d723a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d723e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7242:	d90d      	bls.n	d7260 <__aeabi_d2f+0x30>
   d7244:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7248:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d724c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7250:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7254:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7258:	bf08      	it	eq
   d725a:	f020 0001 	biceq.w	r0, r0, #1
   d725e:	4770      	bx	lr
   d7260:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7264:	d121      	bne.n	d72aa <__aeabi_d2f+0x7a>
   d7266:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d726a:	bfbc      	itt	lt
   d726c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7270:	4770      	bxlt	lr
   d7272:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7276:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d727a:	f1c2 0218 	rsb	r2, r2, #24
   d727e:	f1c2 0c20 	rsb	ip, r2, #32
   d7282:	fa10 f30c 	lsls.w	r3, r0, ip
   d7286:	fa20 f002 	lsr.w	r0, r0, r2
   d728a:	bf18      	it	ne
   d728c:	f040 0001 	orrne.w	r0, r0, #1
   d7290:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7294:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7298:	fa03 fc0c 	lsl.w	ip, r3, ip
   d729c:	ea40 000c 	orr.w	r0, r0, ip
   d72a0:	fa23 f302 	lsr.w	r3, r3, r2
   d72a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d72a8:	e7cc      	b.n	d7244 <__aeabi_d2f+0x14>
   d72aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d72ae:	d107      	bne.n	d72c0 <__aeabi_d2f+0x90>
   d72b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d72b4:	bf1e      	ittt	ne
   d72b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d72ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d72be:	4770      	bxne	lr
   d72c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d72c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d72c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d72cc:	4770      	bx	lr
   d72ce:	bf00      	nop

000d72d0 <atoi>:
   d72d0:	220a      	movs	r2, #10
   d72d2:	2100      	movs	r1, #0
   d72d4:	f000 ba26 	b.w	d7724 <strtol>

000d72d8 <__cxa_atexit>:
   d72d8:	b510      	push	{r4, lr}
   d72da:	4c05      	ldr	r4, [pc, #20]	; (d72f0 <__cxa_atexit+0x18>)
   d72dc:	4613      	mov	r3, r2
   d72de:	b12c      	cbz	r4, d72ec <__cxa_atexit+0x14>
   d72e0:	460a      	mov	r2, r1
   d72e2:	4601      	mov	r1, r0
   d72e4:	2002      	movs	r0, #2
   d72e6:	f3af 8000 	nop.w
   d72ea:	bd10      	pop	{r4, pc}
   d72ec:	4620      	mov	r0, r4
   d72ee:	bd10      	pop	{r4, pc}
   d72f0:	00000000 	.word	0x00000000

000d72f4 <localtime>:
   d72f4:	b538      	push	{r3, r4, r5, lr}
   d72f6:	4b07      	ldr	r3, [pc, #28]	; (d7314 <localtime+0x20>)
   d72f8:	681c      	ldr	r4, [r3, #0]
   d72fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d72fc:	4605      	mov	r5, r0
   d72fe:	b91b      	cbnz	r3, d7308 <localtime+0x14>
   d7300:	2024      	movs	r0, #36	; 0x24
   d7302:	f7fe f857 	bl	d53b4 <malloc>
   d7306:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7308:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d730a:	4628      	mov	r0, r5
   d730c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7310:	f000 b802 	b.w	d7318 <localtime_r>
   d7314:	2003e294 	.word	0x2003e294

000d7318 <localtime_r>:
   d7318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d731c:	460c      	mov	r4, r1
   d731e:	4680      	mov	r8, r0
   d7320:	f000 fd06 	bl	d7d30 <__gettzinfo>
   d7324:	4621      	mov	r1, r4
   d7326:	4607      	mov	r7, r0
   d7328:	4640      	mov	r0, r8
   d732a:	f000 fd05 	bl	d7d38 <gmtime_r>
   d732e:	6946      	ldr	r6, [r0, #20]
   d7330:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7334:	07b3      	lsls	r3, r6, #30
   d7336:	4604      	mov	r4, r0
   d7338:	d105      	bne.n	d7346 <localtime_r+0x2e>
   d733a:	2264      	movs	r2, #100	; 0x64
   d733c:	fb96 f3f2 	sdiv	r3, r6, r2
   d7340:	fb02 6313 	mls	r3, r2, r3, r6
   d7344:	b94b      	cbnz	r3, d735a <localtime_r+0x42>
   d7346:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d734a:	fb96 f3f5 	sdiv	r3, r6, r5
   d734e:	fb05 6513 	mls	r5, r5, r3, r6
   d7352:	fab5 f385 	clz	r3, r5
   d7356:	095b      	lsrs	r3, r3, #5
   d7358:	e000      	b.n	d735c <localtime_r+0x44>
   d735a:	2301      	movs	r3, #1
   d735c:	4a5f      	ldr	r2, [pc, #380]	; (d74dc <localtime_r+0x1c4>)
   d735e:	2530      	movs	r5, #48	; 0x30
   d7360:	fb05 2503 	mla	r5, r5, r3, r2
   d7364:	f000 fb18 	bl	d7998 <__tz_lock>
   d7368:	f000 fb18 	bl	d799c <_tzset_unlocked>
   d736c:	4b5c      	ldr	r3, [pc, #368]	; (d74e0 <localtime_r+0x1c8>)
   d736e:	681b      	ldr	r3, [r3, #0]
   d7370:	b1f3      	cbz	r3, d73b0 <localtime_r+0x98>
   d7372:	687b      	ldr	r3, [r7, #4]
   d7374:	429e      	cmp	r6, r3
   d7376:	d105      	bne.n	d7384 <localtime_r+0x6c>
   d7378:	6839      	ldr	r1, [r7, #0]
   d737a:	f8d8 3000 	ldr.w	r3, [r8]
   d737e:	69fa      	ldr	r2, [r7, #28]
   d7380:	b941      	cbnz	r1, d7394 <localtime_r+0x7c>
   d7382:	e00a      	b.n	d739a <localtime_r+0x82>
   d7384:	4630      	mov	r0, r6
   d7386:	f000 fa5f 	bl	d7848 <__tzcalc_limits>
   d738a:	2800      	cmp	r0, #0
   d738c:	d1f4      	bne.n	d7378 <localtime_r+0x60>
   d738e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7392:	e00d      	b.n	d73b0 <localtime_r+0x98>
   d7394:	4293      	cmp	r3, r2
   d7396:	db08      	blt.n	d73aa <localtime_r+0x92>
   d7398:	e001      	b.n	d739e <localtime_r+0x86>
   d739a:	4293      	cmp	r3, r2
   d739c:	da07      	bge.n	d73ae <localtime_r+0x96>
   d739e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d73a0:	4293      	cmp	r3, r2
   d73a2:	bfac      	ite	ge
   d73a4:	2300      	movge	r3, #0
   d73a6:	2301      	movlt	r3, #1
   d73a8:	e002      	b.n	d73b0 <localtime_r+0x98>
   d73aa:	2300      	movs	r3, #0
   d73ac:	e000      	b.n	d73b0 <localtime_r+0x98>
   d73ae:	2301      	movs	r3, #1
   d73b0:	6223      	str	r3, [r4, #32]
   d73b2:	6a23      	ldr	r3, [r4, #32]
   d73b4:	2b01      	cmp	r3, #1
   d73b6:	bf0c      	ite	eq
   d73b8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d73ba:	6a39      	ldrne	r1, [r7, #32]
   d73bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d73c0:	203c      	movs	r0, #60	; 0x3c
   d73c2:	fb91 f6f3 	sdiv	r6, r1, r3
   d73c6:	fb03 1316 	mls	r3, r3, r6, r1
   d73ca:	6861      	ldr	r1, [r4, #4]
   d73cc:	fb93 f2f0 	sdiv	r2, r3, r0
   d73d0:	fb00 3012 	mls	r0, r0, r2, r3
   d73d4:	6823      	ldr	r3, [r4, #0]
   d73d6:	1a89      	subs	r1, r1, r2
   d73d8:	68a2      	ldr	r2, [r4, #8]
   d73da:	6061      	str	r1, [r4, #4]
   d73dc:	1a1b      	subs	r3, r3, r0
   d73de:	1b92      	subs	r2, r2, r6
   d73e0:	2b3b      	cmp	r3, #59	; 0x3b
   d73e2:	6023      	str	r3, [r4, #0]
   d73e4:	60a2      	str	r2, [r4, #8]
   d73e6:	dd03      	ble.n	d73f0 <localtime_r+0xd8>
   d73e8:	3101      	adds	r1, #1
   d73ea:	6061      	str	r1, [r4, #4]
   d73ec:	3b3c      	subs	r3, #60	; 0x3c
   d73ee:	e004      	b.n	d73fa <localtime_r+0xe2>
   d73f0:	2b00      	cmp	r3, #0
   d73f2:	da03      	bge.n	d73fc <localtime_r+0xe4>
   d73f4:	3901      	subs	r1, #1
   d73f6:	6061      	str	r1, [r4, #4]
   d73f8:	333c      	adds	r3, #60	; 0x3c
   d73fa:	6023      	str	r3, [r4, #0]
   d73fc:	6863      	ldr	r3, [r4, #4]
   d73fe:	2b3b      	cmp	r3, #59	; 0x3b
   d7400:	dd03      	ble.n	d740a <localtime_r+0xf2>
   d7402:	3201      	adds	r2, #1
   d7404:	60a2      	str	r2, [r4, #8]
   d7406:	3b3c      	subs	r3, #60	; 0x3c
   d7408:	e004      	b.n	d7414 <localtime_r+0xfc>
   d740a:	2b00      	cmp	r3, #0
   d740c:	da03      	bge.n	d7416 <localtime_r+0xfe>
   d740e:	3a01      	subs	r2, #1
   d7410:	60a2      	str	r2, [r4, #8]
   d7412:	333c      	adds	r3, #60	; 0x3c
   d7414:	6063      	str	r3, [r4, #4]
   d7416:	68a3      	ldr	r3, [r4, #8]
   d7418:	2b17      	cmp	r3, #23
   d741a:	dd22      	ble.n	d7462 <localtime_r+0x14a>
   d741c:	69e2      	ldr	r2, [r4, #28]
   d741e:	3201      	adds	r2, #1
   d7420:	61e2      	str	r2, [r4, #28]
   d7422:	69a2      	ldr	r2, [r4, #24]
   d7424:	3201      	adds	r2, #1
   d7426:	2a06      	cmp	r2, #6
   d7428:	bfc8      	it	gt
   d742a:	2200      	movgt	r2, #0
   d742c:	61a2      	str	r2, [r4, #24]
   d742e:	68e2      	ldr	r2, [r4, #12]
   d7430:	3b18      	subs	r3, #24
   d7432:	3201      	adds	r2, #1
   d7434:	60a3      	str	r3, [r4, #8]
   d7436:	6923      	ldr	r3, [r4, #16]
   d7438:	60e2      	str	r2, [r4, #12]
   d743a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d743e:	428a      	cmp	r2, r1
   d7440:	dd46      	ble.n	d74d0 <localtime_r+0x1b8>
   d7442:	3301      	adds	r3, #1
   d7444:	2b0c      	cmp	r3, #12
   d7446:	bf0c      	ite	eq
   d7448:	6963      	ldreq	r3, [r4, #20]
   d744a:	6123      	strne	r3, [r4, #16]
   d744c:	eba2 0201 	sub.w	r2, r2, r1
   d7450:	60e2      	str	r2, [r4, #12]
   d7452:	bf01      	itttt	eq
   d7454:	3301      	addeq	r3, #1
   d7456:	2200      	moveq	r2, #0
   d7458:	6122      	streq	r2, [r4, #16]
   d745a:	6163      	streq	r3, [r4, #20]
   d745c:	bf08      	it	eq
   d745e:	61e2      	streq	r2, [r4, #28]
   d7460:	e036      	b.n	d74d0 <localtime_r+0x1b8>
   d7462:	2b00      	cmp	r3, #0
   d7464:	da34      	bge.n	d74d0 <localtime_r+0x1b8>
   d7466:	69e2      	ldr	r2, [r4, #28]
   d7468:	3a01      	subs	r2, #1
   d746a:	61e2      	str	r2, [r4, #28]
   d746c:	69a2      	ldr	r2, [r4, #24]
   d746e:	3a01      	subs	r2, #1
   d7470:	bf48      	it	mi
   d7472:	2206      	movmi	r2, #6
   d7474:	61a2      	str	r2, [r4, #24]
   d7476:	68e2      	ldr	r2, [r4, #12]
   d7478:	3318      	adds	r3, #24
   d747a:	3a01      	subs	r2, #1
   d747c:	60e2      	str	r2, [r4, #12]
   d747e:	60a3      	str	r3, [r4, #8]
   d7480:	bb32      	cbnz	r2, d74d0 <localtime_r+0x1b8>
   d7482:	6923      	ldr	r3, [r4, #16]
   d7484:	3b01      	subs	r3, #1
   d7486:	d401      	bmi.n	d748c <localtime_r+0x174>
   d7488:	6123      	str	r3, [r4, #16]
   d748a:	e01d      	b.n	d74c8 <localtime_r+0x1b0>
   d748c:	230b      	movs	r3, #11
   d748e:	6123      	str	r3, [r4, #16]
   d7490:	6963      	ldr	r3, [r4, #20]
   d7492:	1e5a      	subs	r2, r3, #1
   d7494:	f012 0f03 	tst.w	r2, #3
   d7498:	6162      	str	r2, [r4, #20]
   d749a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d749e:	d105      	bne.n	d74ac <localtime_r+0x194>
   d74a0:	2164      	movs	r1, #100	; 0x64
   d74a2:	fb93 f2f1 	sdiv	r2, r3, r1
   d74a6:	fb01 3212 	mls	r2, r1, r2, r3
   d74aa:	b94a      	cbnz	r2, d74c0 <localtime_r+0x1a8>
   d74ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d74b0:	fb93 f2f1 	sdiv	r2, r3, r1
   d74b4:	fb01 3312 	mls	r3, r1, r2, r3
   d74b8:	fab3 f383 	clz	r3, r3
   d74bc:	095b      	lsrs	r3, r3, #5
   d74be:	e000      	b.n	d74c2 <localtime_r+0x1aa>
   d74c0:	2301      	movs	r3, #1
   d74c2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d74c6:	61e3      	str	r3, [r4, #28]
   d74c8:	6923      	ldr	r3, [r4, #16]
   d74ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d74ce:	60e3      	str	r3, [r4, #12]
   d74d0:	f000 fa63 	bl	d799a <__tz_unlock>
   d74d4:	4620      	mov	r0, r4
   d74d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d74da:	bf00      	nop
   d74dc:	000d84d8 	.word	0x000d84d8
   d74e0:	2003e7e4 	.word	0x2003e7e4

000d74e4 <memcpy>:
   d74e4:	b510      	push	{r4, lr}
   d74e6:	1e43      	subs	r3, r0, #1
   d74e8:	440a      	add	r2, r1
   d74ea:	4291      	cmp	r1, r2
   d74ec:	d004      	beq.n	d74f8 <memcpy+0x14>
   d74ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d74f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d74f6:	e7f8      	b.n	d74ea <memcpy+0x6>
   d74f8:	bd10      	pop	{r4, pc}

000d74fa <memset>:
   d74fa:	4402      	add	r2, r0
   d74fc:	4603      	mov	r3, r0
   d74fe:	4293      	cmp	r3, r2
   d7500:	d002      	beq.n	d7508 <memset+0xe>
   d7502:	f803 1b01 	strb.w	r1, [r3], #1
   d7506:	e7fa      	b.n	d74fe <memset+0x4>
   d7508:	4770      	bx	lr
	...

000d750c <srand>:
   d750c:	b538      	push	{r3, r4, r5, lr}
   d750e:	4b12      	ldr	r3, [pc, #72]	; (d7558 <srand+0x4c>)
   d7510:	681c      	ldr	r4, [r3, #0]
   d7512:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7514:	4605      	mov	r5, r0
   d7516:	b9d3      	cbnz	r3, d754e <srand+0x42>
   d7518:	2018      	movs	r0, #24
   d751a:	f7fd ff4b 	bl	d53b4 <malloc>
   d751e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7522:	63a0      	str	r0, [r4, #56]	; 0x38
   d7524:	8003      	strh	r3, [r0, #0]
   d7526:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d752a:	8043      	strh	r3, [r0, #2]
   d752c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7530:	8083      	strh	r3, [r0, #4]
   d7532:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7536:	80c3      	strh	r3, [r0, #6]
   d7538:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d753c:	8103      	strh	r3, [r0, #8]
   d753e:	2305      	movs	r3, #5
   d7540:	8143      	strh	r3, [r0, #10]
   d7542:	230b      	movs	r3, #11
   d7544:	8183      	strh	r3, [r0, #12]
   d7546:	2201      	movs	r2, #1
   d7548:	2300      	movs	r3, #0
   d754a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d754e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7550:	2200      	movs	r2, #0
   d7552:	611d      	str	r5, [r3, #16]
   d7554:	615a      	str	r2, [r3, #20]
   d7556:	bd38      	pop	{r3, r4, r5, pc}
   d7558:	2003e294 	.word	0x2003e294

000d755c <strcmp>:
   d755c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7560:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7564:	2a01      	cmp	r2, #1
   d7566:	bf28      	it	cs
   d7568:	429a      	cmpcs	r2, r3
   d756a:	d0f7      	beq.n	d755c <strcmp>
   d756c:	1ad0      	subs	r0, r2, r3
   d756e:	4770      	bx	lr

000d7570 <strcpy>:
   d7570:	4603      	mov	r3, r0
   d7572:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7576:	f803 2b01 	strb.w	r2, [r3], #1
   d757a:	2a00      	cmp	r2, #0
   d757c:	d1f9      	bne.n	d7572 <strcpy+0x2>
   d757e:	4770      	bx	lr

000d7580 <strdup>:
   d7580:	4b02      	ldr	r3, [pc, #8]	; (d758c <strdup+0xc>)
   d7582:	4601      	mov	r1, r0
   d7584:	6818      	ldr	r0, [r3, #0]
   d7586:	f000 b803 	b.w	d7590 <_strdup_r>
   d758a:	bf00      	nop
   d758c:	2003e294 	.word	0x2003e294

000d7590 <_strdup_r>:
   d7590:	b570      	push	{r4, r5, r6, lr}
   d7592:	4606      	mov	r6, r0
   d7594:	4608      	mov	r0, r1
   d7596:	460c      	mov	r4, r1
   d7598:	f000 f80d 	bl	d75b6 <strlen>
   d759c:	1c45      	adds	r5, r0, #1
   d759e:	4629      	mov	r1, r5
   d75a0:	4630      	mov	r0, r6
   d75a2:	f7fd ff37 	bl	d5414 <_malloc_r>
   d75a6:	4606      	mov	r6, r0
   d75a8:	b118      	cbz	r0, d75b2 <_strdup_r+0x22>
   d75aa:	462a      	mov	r2, r5
   d75ac:	4621      	mov	r1, r4
   d75ae:	f7ff ff99 	bl	d74e4 <memcpy>
   d75b2:	4630      	mov	r0, r6
   d75b4:	bd70      	pop	{r4, r5, r6, pc}

000d75b6 <strlen>:
   d75b6:	4603      	mov	r3, r0
   d75b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d75bc:	2a00      	cmp	r2, #0
   d75be:	d1fb      	bne.n	d75b8 <strlen+0x2>
   d75c0:	1a18      	subs	r0, r3, r0
   d75c2:	3801      	subs	r0, #1
   d75c4:	4770      	bx	lr

000d75c6 <strncmp>:
   d75c6:	b530      	push	{r4, r5, lr}
   d75c8:	b182      	cbz	r2, d75ec <strncmp+0x26>
   d75ca:	1e45      	subs	r5, r0, #1
   d75cc:	3901      	subs	r1, #1
   d75ce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d75d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d75d6:	42a3      	cmp	r3, r4
   d75d8:	d106      	bne.n	d75e8 <strncmp+0x22>
   d75da:	43ec      	mvns	r4, r5
   d75dc:	4414      	add	r4, r2
   d75de:	42e0      	cmn	r0, r4
   d75e0:	d001      	beq.n	d75e6 <strncmp+0x20>
   d75e2:	2b00      	cmp	r3, #0
   d75e4:	d1f3      	bne.n	d75ce <strncmp+0x8>
   d75e6:	461c      	mov	r4, r3
   d75e8:	1b18      	subs	r0, r3, r4
   d75ea:	bd30      	pop	{r4, r5, pc}
   d75ec:	4610      	mov	r0, r2
   d75ee:	bd30      	pop	{r4, r5, pc}

000d75f0 <strncpy>:
   d75f0:	b510      	push	{r4, lr}
   d75f2:	4603      	mov	r3, r0
   d75f4:	b142      	cbz	r2, d7608 <strncpy+0x18>
   d75f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d75fa:	f803 4b01 	strb.w	r4, [r3], #1
   d75fe:	3a01      	subs	r2, #1
   d7600:	2c00      	cmp	r4, #0
   d7602:	d1f7      	bne.n	d75f4 <strncpy+0x4>
   d7604:	441a      	add	r2, r3
   d7606:	e000      	b.n	d760a <strncpy+0x1a>
   d7608:	bd10      	pop	{r4, pc}
   d760a:	4293      	cmp	r3, r2
   d760c:	d002      	beq.n	d7614 <strncpy+0x24>
   d760e:	f803 4b01 	strb.w	r4, [r3], #1
   d7612:	e7fa      	b.n	d760a <strncpy+0x1a>
   d7614:	bd10      	pop	{r4, pc}
	...

000d7618 <_strtol_r>:
   d7618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d761c:	4680      	mov	r8, r0
   d761e:	4840      	ldr	r0, [pc, #256]	; (d7720 <_strtol_r+0x108>)
   d7620:	f8d0 9000 	ldr.w	r9, [r0]
   d7624:	460f      	mov	r7, r1
   d7626:	463d      	mov	r5, r7
   d7628:	f815 4b01 	ldrb.w	r4, [r5], #1
   d762c:	eb09 0004 	add.w	r0, r9, r4
   d7630:	7840      	ldrb	r0, [r0, #1]
   d7632:	f000 0008 	and.w	r0, r0, #8
   d7636:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d763a:	b108      	cbz	r0, d7640 <_strtol_r+0x28>
   d763c:	462f      	mov	r7, r5
   d763e:	e7f2      	b.n	d7626 <_strtol_r+0xe>
   d7640:	2c2d      	cmp	r4, #45	; 0x2d
   d7642:	d103      	bne.n	d764c <_strtol_r+0x34>
   d7644:	1cbd      	adds	r5, r7, #2
   d7646:	787c      	ldrb	r4, [r7, #1]
   d7648:	2601      	movs	r6, #1
   d764a:	e003      	b.n	d7654 <_strtol_r+0x3c>
   d764c:	2c2b      	cmp	r4, #43	; 0x2b
   d764e:	bf04      	itt	eq
   d7650:	787c      	ldrbeq	r4, [r7, #1]
   d7652:	1cbd      	addeq	r5, r7, #2
   d7654:	b113      	cbz	r3, d765c <_strtol_r+0x44>
   d7656:	2b10      	cmp	r3, #16
   d7658:	d10a      	bne.n	d7670 <_strtol_r+0x58>
   d765a:	e05b      	b.n	d7714 <_strtol_r+0xfc>
   d765c:	2c30      	cmp	r4, #48	; 0x30
   d765e:	d157      	bne.n	d7710 <_strtol_r+0xf8>
   d7660:	7828      	ldrb	r0, [r5, #0]
   d7662:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7666:	2858      	cmp	r0, #88	; 0x58
   d7668:	d14d      	bne.n	d7706 <_strtol_r+0xee>
   d766a:	786c      	ldrb	r4, [r5, #1]
   d766c:	2310      	movs	r3, #16
   d766e:	3502      	adds	r5, #2
   d7670:	2e00      	cmp	r6, #0
   d7672:	bf14      	ite	ne
   d7674:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7678:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d767c:	2700      	movs	r7, #0
   d767e:	fbbc faf3 	udiv	sl, ip, r3
   d7682:	4638      	mov	r0, r7
   d7684:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7688:	eb09 0e04 	add.w	lr, r9, r4
   d768c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7690:	f01e 0f04 	tst.w	lr, #4
   d7694:	d001      	beq.n	d769a <_strtol_r+0x82>
   d7696:	3c30      	subs	r4, #48	; 0x30
   d7698:	e00b      	b.n	d76b2 <_strtol_r+0x9a>
   d769a:	f01e 0e03 	ands.w	lr, lr, #3
   d769e:	d01b      	beq.n	d76d8 <_strtol_r+0xc0>
   d76a0:	f1be 0f01 	cmp.w	lr, #1
   d76a4:	bf0c      	ite	eq
   d76a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d76aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d76ae:	ebce 0404 	rsb	r4, lr, r4
   d76b2:	42a3      	cmp	r3, r4
   d76b4:	dd10      	ble.n	d76d8 <_strtol_r+0xc0>
   d76b6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d76ba:	d00a      	beq.n	d76d2 <_strtol_r+0xba>
   d76bc:	4550      	cmp	r0, sl
   d76be:	d806      	bhi.n	d76ce <_strtol_r+0xb6>
   d76c0:	d101      	bne.n	d76c6 <_strtol_r+0xae>
   d76c2:	4564      	cmp	r4, ip
   d76c4:	dc03      	bgt.n	d76ce <_strtol_r+0xb6>
   d76c6:	fb03 4000 	mla	r0, r3, r0, r4
   d76ca:	2701      	movs	r7, #1
   d76cc:	e001      	b.n	d76d2 <_strtol_r+0xba>
   d76ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d76d2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d76d6:	e7d7      	b.n	d7688 <_strtol_r+0x70>
   d76d8:	1c7b      	adds	r3, r7, #1
   d76da:	d10c      	bne.n	d76f6 <_strtol_r+0xde>
   d76dc:	2e00      	cmp	r6, #0
   d76de:	f04f 0322 	mov.w	r3, #34	; 0x22
   d76e2:	bf14      	ite	ne
   d76e4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d76e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d76ec:	f8c8 3000 	str.w	r3, [r8]
   d76f0:	b92a      	cbnz	r2, d76fe <_strtol_r+0xe6>
   d76f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d76f6:	b106      	cbz	r6, d76fa <_strtol_r+0xe2>
   d76f8:	4240      	negs	r0, r0
   d76fa:	b172      	cbz	r2, d771a <_strtol_r+0x102>
   d76fc:	b107      	cbz	r7, d7700 <_strtol_r+0xe8>
   d76fe:	1e69      	subs	r1, r5, #1
   d7700:	6011      	str	r1, [r2, #0]
   d7702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7706:	2430      	movs	r4, #48	; 0x30
   d7708:	2b00      	cmp	r3, #0
   d770a:	d1b1      	bne.n	d7670 <_strtol_r+0x58>
   d770c:	2308      	movs	r3, #8
   d770e:	e7af      	b.n	d7670 <_strtol_r+0x58>
   d7710:	230a      	movs	r3, #10
   d7712:	e7ad      	b.n	d7670 <_strtol_r+0x58>
   d7714:	2c30      	cmp	r4, #48	; 0x30
   d7716:	d0a3      	beq.n	d7660 <_strtol_r+0x48>
   d7718:	e7aa      	b.n	d7670 <_strtol_r+0x58>
   d771a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d771e:	bf00      	nop
   d7720:	2003e230 	.word	0x2003e230

000d7724 <strtol>:
   d7724:	4613      	mov	r3, r2
   d7726:	460a      	mov	r2, r1
   d7728:	4601      	mov	r1, r0
   d772a:	4802      	ldr	r0, [pc, #8]	; (d7734 <strtol+0x10>)
   d772c:	6800      	ldr	r0, [r0, #0]
   d772e:	f7ff bf73 	b.w	d7618 <_strtol_r>
   d7732:	bf00      	nop
   d7734:	2003e294 	.word	0x2003e294

000d7738 <_strtoul_r>:
   d7738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d773c:	4680      	mov	r8, r0
   d773e:	483c      	ldr	r0, [pc, #240]	; (d7830 <_strtoul_r+0xf8>)
   d7740:	f8d0 9000 	ldr.w	r9, [r0]
   d7744:	460e      	mov	r6, r1
   d7746:	4635      	mov	r5, r6
   d7748:	f815 4b01 	ldrb.w	r4, [r5], #1
   d774c:	eb09 0004 	add.w	r0, r9, r4
   d7750:	7840      	ldrb	r0, [r0, #1]
   d7752:	f000 0008 	and.w	r0, r0, #8
   d7756:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d775a:	b108      	cbz	r0, d7760 <_strtoul_r+0x28>
   d775c:	462e      	mov	r6, r5
   d775e:	e7f2      	b.n	d7746 <_strtoul_r+0xe>
   d7760:	2c2d      	cmp	r4, #45	; 0x2d
   d7762:	d103      	bne.n	d776c <_strtoul_r+0x34>
   d7764:	1cb5      	adds	r5, r6, #2
   d7766:	7874      	ldrb	r4, [r6, #1]
   d7768:	2701      	movs	r7, #1
   d776a:	e003      	b.n	d7774 <_strtoul_r+0x3c>
   d776c:	2c2b      	cmp	r4, #43	; 0x2b
   d776e:	bf04      	itt	eq
   d7770:	7874      	ldrbeq	r4, [r6, #1]
   d7772:	1cb5      	addeq	r5, r6, #2
   d7774:	b113      	cbz	r3, d777c <_strtoul_r+0x44>
   d7776:	2b10      	cmp	r3, #16
   d7778:	d10a      	bne.n	d7790 <_strtoul_r+0x58>
   d777a:	e053      	b.n	d7824 <_strtoul_r+0xec>
   d777c:	2c30      	cmp	r4, #48	; 0x30
   d777e:	d14f      	bne.n	d7820 <_strtoul_r+0xe8>
   d7780:	7828      	ldrb	r0, [r5, #0]
   d7782:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7786:	2858      	cmp	r0, #88	; 0x58
   d7788:	d145      	bne.n	d7816 <_strtoul_r+0xde>
   d778a:	786c      	ldrb	r4, [r5, #1]
   d778c:	2310      	movs	r3, #16
   d778e:	3502      	adds	r5, #2
   d7790:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7794:	2600      	movs	r6, #0
   d7796:	fbbc fcf3 	udiv	ip, ip, r3
   d779a:	fb03 fa0c 	mul.w	sl, r3, ip
   d779e:	ea6f 0a0a 	mvn.w	sl, sl
   d77a2:	4630      	mov	r0, r6
   d77a4:	eb09 0e04 	add.w	lr, r9, r4
   d77a8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d77ac:	f01e 0f04 	tst.w	lr, #4
   d77b0:	d001      	beq.n	d77b6 <_strtoul_r+0x7e>
   d77b2:	3c30      	subs	r4, #48	; 0x30
   d77b4:	e00b      	b.n	d77ce <_strtoul_r+0x96>
   d77b6:	f01e 0e03 	ands.w	lr, lr, #3
   d77ba:	d01a      	beq.n	d77f2 <_strtoul_r+0xba>
   d77bc:	f1be 0f01 	cmp.w	lr, #1
   d77c0:	bf0c      	ite	eq
   d77c2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d77c6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d77ca:	ebce 0404 	rsb	r4, lr, r4
   d77ce:	42a3      	cmp	r3, r4
   d77d0:	dd0f      	ble.n	d77f2 <_strtoul_r+0xba>
   d77d2:	2e00      	cmp	r6, #0
   d77d4:	db08      	blt.n	d77e8 <_strtoul_r+0xb0>
   d77d6:	4560      	cmp	r0, ip
   d77d8:	d806      	bhi.n	d77e8 <_strtoul_r+0xb0>
   d77da:	d101      	bne.n	d77e0 <_strtoul_r+0xa8>
   d77dc:	4554      	cmp	r4, sl
   d77de:	dc03      	bgt.n	d77e8 <_strtoul_r+0xb0>
   d77e0:	fb03 4000 	mla	r0, r3, r0, r4
   d77e4:	2601      	movs	r6, #1
   d77e6:	e001      	b.n	d77ec <_strtoul_r+0xb4>
   d77e8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d77ec:	f815 4b01 	ldrb.w	r4, [r5], #1
   d77f0:	e7d8      	b.n	d77a4 <_strtoul_r+0x6c>
   d77f2:	2e00      	cmp	r6, #0
   d77f4:	da07      	bge.n	d7806 <_strtoul_r+0xce>
   d77f6:	2322      	movs	r3, #34	; 0x22
   d77f8:	f8c8 3000 	str.w	r3, [r8]
   d77fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7800:	b92a      	cbnz	r2, d780e <_strtoul_r+0xd6>
   d7802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7806:	b107      	cbz	r7, d780a <_strtoul_r+0xd2>
   d7808:	4240      	negs	r0, r0
   d780a:	b172      	cbz	r2, d782a <_strtoul_r+0xf2>
   d780c:	b106      	cbz	r6, d7810 <_strtoul_r+0xd8>
   d780e:	1e69      	subs	r1, r5, #1
   d7810:	6011      	str	r1, [r2, #0]
   d7812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7816:	2430      	movs	r4, #48	; 0x30
   d7818:	2b00      	cmp	r3, #0
   d781a:	d1b9      	bne.n	d7790 <_strtoul_r+0x58>
   d781c:	2308      	movs	r3, #8
   d781e:	e7b7      	b.n	d7790 <_strtoul_r+0x58>
   d7820:	230a      	movs	r3, #10
   d7822:	e7b5      	b.n	d7790 <_strtoul_r+0x58>
   d7824:	2c30      	cmp	r4, #48	; 0x30
   d7826:	d0ab      	beq.n	d7780 <_strtoul_r+0x48>
   d7828:	e7b2      	b.n	d7790 <_strtoul_r+0x58>
   d782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d782e:	bf00      	nop
   d7830:	2003e230 	.word	0x2003e230

000d7834 <strtoul>:
   d7834:	4613      	mov	r3, r2
   d7836:	460a      	mov	r2, r1
   d7838:	4601      	mov	r1, r0
   d783a:	4802      	ldr	r0, [pc, #8]	; (d7844 <strtoul+0x10>)
   d783c:	6800      	ldr	r0, [r0, #0]
   d783e:	f7ff bf7b 	b.w	d7738 <_strtoul_r>
   d7842:	bf00      	nop
   d7844:	2003e294 	.word	0x2003e294

000d7848 <__tzcalc_limits>:
   d7848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d784c:	4604      	mov	r4, r0
   d784e:	f000 fa6f 	bl	d7d30 <__gettzinfo>
   d7852:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7856:	429c      	cmp	r4, r3
   d7858:	f340 8096 	ble.w	d7988 <__tzcalc_limits+0x140>
   d785c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7860:	18e3      	adds	r3, r4, r3
   d7862:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7866:	109b      	asrs	r3, r3, #2
   d7868:	f240 156d 	movw	r5, #365	; 0x16d
   d786c:	fb05 3502 	mla	r5, r5, r2, r3
   d7870:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7874:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7878:	fb92 f3f3 	sdiv	r3, r2, r3
   d787c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7880:	442b      	add	r3, r5
   d7882:	18a5      	adds	r5, r4, r2
   d7884:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7888:	fb95 f5f2 	sdiv	r5, r5, r2
   d788c:	441d      	add	r5, r3
   d788e:	2364      	movs	r3, #100	; 0x64
   d7890:	fb94 f7f2 	sdiv	r7, r4, r2
   d7894:	fb94 f6f3 	sdiv	r6, r4, r3
   d7898:	fb02 4717 	mls	r7, r2, r7, r4
   d789c:	fb03 4616 	mls	r6, r3, r6, r4
   d78a0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d78a4:	fab7 fe87 	clz	lr, r7
   d78a8:	9301      	str	r3, [sp, #4]
   d78aa:	f004 0303 	and.w	r3, r4, #3
   d78ae:	6044      	str	r4, [r0, #4]
   d78b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d78b4:	4601      	mov	r1, r0
   d78b6:	9300      	str	r3, [sp, #0]
   d78b8:	f04f 0c07 	mov.w	ip, #7
   d78bc:	7a0b      	ldrb	r3, [r1, #8]
   d78be:	2b4a      	cmp	r3, #74	; 0x4a
   d78c0:	d10e      	bne.n	d78e0 <__tzcalc_limits+0x98>
   d78c2:	694b      	ldr	r3, [r1, #20]
   d78c4:	9a00      	ldr	r2, [sp, #0]
   d78c6:	18ec      	adds	r4, r5, r3
   d78c8:	b902      	cbnz	r2, d78cc <__tzcalc_limits+0x84>
   d78ca:	b906      	cbnz	r6, d78ce <__tzcalc_limits+0x86>
   d78cc:	b927      	cbnz	r7, d78d8 <__tzcalc_limits+0x90>
   d78ce:	2b3b      	cmp	r3, #59	; 0x3b
   d78d0:	bfd4      	ite	le
   d78d2:	2300      	movle	r3, #0
   d78d4:	2301      	movgt	r3, #1
   d78d6:	e000      	b.n	d78da <__tzcalc_limits+0x92>
   d78d8:	2300      	movs	r3, #0
   d78da:	4423      	add	r3, r4
   d78dc:	3b01      	subs	r3, #1
   d78de:	e03f      	b.n	d7960 <__tzcalc_limits+0x118>
   d78e0:	2b44      	cmp	r3, #68	; 0x44
   d78e2:	d102      	bne.n	d78ea <__tzcalc_limits+0xa2>
   d78e4:	694b      	ldr	r3, [r1, #20]
   d78e6:	442b      	add	r3, r5
   d78e8:	e03a      	b.n	d7960 <__tzcalc_limits+0x118>
   d78ea:	9b00      	ldr	r3, [sp, #0]
   d78ec:	b92b      	cbnz	r3, d78fa <__tzcalc_limits+0xb2>
   d78ee:	2e00      	cmp	r6, #0
   d78f0:	bf0c      	ite	eq
   d78f2:	46f0      	moveq	r8, lr
   d78f4:	f04f 0801 	movne.w	r8, #1
   d78f8:	e000      	b.n	d78fc <__tzcalc_limits+0xb4>
   d78fa:	46f0      	mov	r8, lr
   d78fc:	4b24      	ldr	r3, [pc, #144]	; (d7990 <__tzcalc_limits+0x148>)
   d78fe:	68cc      	ldr	r4, [r1, #12]
   d7900:	2230      	movs	r2, #48	; 0x30
   d7902:	fb02 3808 	mla	r8, r2, r8, r3
   d7906:	f1a8 0a04 	sub.w	sl, r8, #4
   d790a:	46a9      	mov	r9, r5
   d790c:	2301      	movs	r3, #1
   d790e:	42a3      	cmp	r3, r4
   d7910:	da04      	bge.n	d791c <__tzcalc_limits+0xd4>
   d7912:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7916:	3301      	adds	r3, #1
   d7918:	44d9      	add	r9, fp
   d791a:	e7f8      	b.n	d790e <__tzcalc_limits+0xc6>
   d791c:	f109 0304 	add.w	r3, r9, #4
   d7920:	fb93 fbfc 	sdiv	fp, r3, ip
   d7924:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7928:	2c01      	cmp	r4, #1
   d792a:	ebca 0a03 	rsb	sl, sl, r3
   d792e:	694b      	ldr	r3, [r1, #20]
   d7930:	bfb8      	it	lt
   d7932:	2401      	movlt	r4, #1
   d7934:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7938:	ebb3 0a0a 	subs.w	sl, r3, sl
   d793c:	690b      	ldr	r3, [r1, #16]
   d793e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7942:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7946:	bf48      	it	mi
   d7948:	f10a 0a07 	addmi.w	sl, sl, #7
   d794c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7950:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7954:	4453      	add	r3, sl
   d7956:	42a3      	cmp	r3, r4
   d7958:	db01      	blt.n	d795e <__tzcalc_limits+0x116>
   d795a:	3b07      	subs	r3, #7
   d795c:	e7fb      	b.n	d7956 <__tzcalc_limits+0x10e>
   d795e:	444b      	add	r3, r9
   d7960:	698c      	ldr	r4, [r1, #24]
   d7962:	4a0c      	ldr	r2, [pc, #48]	; (d7994 <__tzcalc_limits+0x14c>)
   d7964:	fb02 4303 	mla	r3, r2, r3, r4
   d7968:	6a0c      	ldr	r4, [r1, #32]
   d796a:	4423      	add	r3, r4
   d796c:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7970:	9b01      	ldr	r3, [sp, #4]
   d7972:	4299      	cmp	r1, r3
   d7974:	d1a2      	bne.n	d78bc <__tzcalc_limits+0x74>
   d7976:	69c3      	ldr	r3, [r0, #28]
   d7978:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d797a:	4293      	cmp	r3, r2
   d797c:	bfac      	ite	ge
   d797e:	2300      	movge	r3, #0
   d7980:	2301      	movlt	r3, #1
   d7982:	6003      	str	r3, [r0, #0]
   d7984:	2001      	movs	r0, #1
   d7986:	e000      	b.n	d798a <__tzcalc_limits+0x142>
   d7988:	2000      	movs	r0, #0
   d798a:	b003      	add	sp, #12
   d798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7990:	000d84d8 	.word	0x000d84d8
   d7994:	00015180 	.word	0x00015180

000d7998 <__tz_lock>:
   d7998:	4770      	bx	lr

000d799a <__tz_unlock>:
   d799a:	4770      	bx	lr

000d799c <_tzset_unlocked>:
   d799c:	4b01      	ldr	r3, [pc, #4]	; (d79a4 <_tzset_unlocked+0x8>)
   d799e:	6818      	ldr	r0, [r3, #0]
   d79a0:	f000 b802 	b.w	d79a8 <_tzset_unlocked_r>
   d79a4:	2003e294 	.word	0x2003e294

000d79a8 <_tzset_unlocked_r>:
   d79a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79ac:	b08d      	sub	sp, #52	; 0x34
   d79ae:	4607      	mov	r7, r0
   d79b0:	f000 f9be 	bl	d7d30 <__gettzinfo>
   d79b4:	49b0      	ldr	r1, [pc, #704]	; (d7c78 <_tzset_unlocked_r+0x2d0>)
   d79b6:	4eb1      	ldr	r6, [pc, #708]	; (d7c7c <_tzset_unlocked_r+0x2d4>)
   d79b8:	4604      	mov	r4, r0
   d79ba:	4638      	mov	r0, r7
   d79bc:	f000 f9b0 	bl	d7d20 <_getenv_r>
   d79c0:	4605      	mov	r5, r0
   d79c2:	b960      	cbnz	r0, d79de <_tzset_unlocked_r+0x36>
   d79c4:	4bae      	ldr	r3, [pc, #696]	; (d7c80 <_tzset_unlocked_r+0x2d8>)
   d79c6:	4aaf      	ldr	r2, [pc, #700]	; (d7c84 <_tzset_unlocked_r+0x2dc>)
   d79c8:	6018      	str	r0, [r3, #0]
   d79ca:	4baf      	ldr	r3, [pc, #700]	; (d7c88 <_tzset_unlocked_r+0x2e0>)
   d79cc:	6018      	str	r0, [r3, #0]
   d79ce:	4baf      	ldr	r3, [pc, #700]	; (d7c8c <_tzset_unlocked_r+0x2e4>)
   d79d0:	6830      	ldr	r0, [r6, #0]
   d79d2:	601a      	str	r2, [r3, #0]
   d79d4:	605a      	str	r2, [r3, #4]
   d79d6:	f7fd fcf5 	bl	d53c4 <free>
   d79da:	6035      	str	r5, [r6, #0]
   d79dc:	e148      	b.n	d7c70 <_tzset_unlocked_r+0x2c8>
   d79de:	6831      	ldr	r1, [r6, #0]
   d79e0:	b979      	cbnz	r1, d7a02 <_tzset_unlocked_r+0x5a>
   d79e2:	6830      	ldr	r0, [r6, #0]
   d79e4:	f7fd fcee 	bl	d53c4 <free>
   d79e8:	4628      	mov	r0, r5
   d79ea:	f7ff fde4 	bl	d75b6 <strlen>
   d79ee:	1c41      	adds	r1, r0, #1
   d79f0:	4638      	mov	r0, r7
   d79f2:	f7fd fd0f 	bl	d5414 <_malloc_r>
   d79f6:	6030      	str	r0, [r6, #0]
   d79f8:	b148      	cbz	r0, d7a0e <_tzset_unlocked_r+0x66>
   d79fa:	4629      	mov	r1, r5
   d79fc:	f7ff fdb8 	bl	d7570 <strcpy>
   d7a00:	e005      	b.n	d7a0e <_tzset_unlocked_r+0x66>
   d7a02:	f7ff fdab 	bl	d755c <strcmp>
   d7a06:	2800      	cmp	r0, #0
   d7a08:	f000 8132 	beq.w	d7c70 <_tzset_unlocked_r+0x2c8>
   d7a0c:	e7e9      	b.n	d79e2 <_tzset_unlocked_r+0x3a>
   d7a0e:	782b      	ldrb	r3, [r5, #0]
   d7a10:	4a9f      	ldr	r2, [pc, #636]	; (d7c90 <_tzset_unlocked_r+0x2e8>)
   d7a12:	49a0      	ldr	r1, [pc, #640]	; (d7c94 <_tzset_unlocked_r+0x2ec>)
   d7a14:	2b3a      	cmp	r3, #58	; 0x3a
   d7a16:	bf08      	it	eq
   d7a18:	3501      	addeq	r5, #1
   d7a1a:	ae0a      	add	r6, sp, #40	; 0x28
   d7a1c:	4633      	mov	r3, r6
   d7a1e:	4628      	mov	r0, r5
   d7a20:	f7fd fce0 	bl	d53e4 <siscanf>
   d7a24:	2800      	cmp	r0, #0
   d7a26:	f340 8123 	ble.w	d7c70 <_tzset_unlocked_r+0x2c8>
   d7a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7a2c:	18ef      	adds	r7, r5, r3
   d7a2e:	5ceb      	ldrb	r3, [r5, r3]
   d7a30:	2b2d      	cmp	r3, #45	; 0x2d
   d7a32:	d103      	bne.n	d7a3c <_tzset_unlocked_r+0x94>
   d7a34:	3701      	adds	r7, #1
   d7a36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7a3a:	e003      	b.n	d7a44 <_tzset_unlocked_r+0x9c>
   d7a3c:	2b2b      	cmp	r3, #43	; 0x2b
   d7a3e:	bf08      	it	eq
   d7a40:	3701      	addeq	r7, #1
   d7a42:	2501      	movs	r5, #1
   d7a44:	f10d 0a20 	add.w	sl, sp, #32
   d7a48:	f10d 0b1e 	add.w	fp, sp, #30
   d7a4c:	f04f 0800 	mov.w	r8, #0
   d7a50:	9603      	str	r6, [sp, #12]
   d7a52:	f8cd a008 	str.w	sl, [sp, #8]
   d7a56:	9601      	str	r6, [sp, #4]
   d7a58:	f8cd b000 	str.w	fp, [sp]
   d7a5c:	4633      	mov	r3, r6
   d7a5e:	aa07      	add	r2, sp, #28
   d7a60:	498d      	ldr	r1, [pc, #564]	; (d7c98 <_tzset_unlocked_r+0x2f0>)
   d7a62:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7a66:	4638      	mov	r0, r7
   d7a68:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7a6c:	f7fd fcba 	bl	d53e4 <siscanf>
   d7a70:	4540      	cmp	r0, r8
   d7a72:	f340 80fd 	ble.w	d7c70 <_tzset_unlocked_r+0x2c8>
   d7a76:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7a7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7a7e:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7ca4 <_tzset_unlocked_r+0x2fc>
   d7a82:	213c      	movs	r1, #60	; 0x3c
   d7a84:	fb01 3302 	mla	r3, r1, r2, r3
   d7a88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7a8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7a90:	fb01 3302 	mla	r3, r1, r2, r3
   d7a94:	435d      	muls	r5, r3
   d7a96:	6225      	str	r5, [r4, #32]
   d7a98:	4d7c      	ldr	r5, [pc, #496]	; (d7c8c <_tzset_unlocked_r+0x2e4>)
   d7a9a:	4b7d      	ldr	r3, [pc, #500]	; (d7c90 <_tzset_unlocked_r+0x2e8>)
   d7a9c:	602b      	str	r3, [r5, #0]
   d7a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7aa0:	497c      	ldr	r1, [pc, #496]	; (d7c94 <_tzset_unlocked_r+0x2ec>)
   d7aa2:	441f      	add	r7, r3
   d7aa4:	464a      	mov	r2, r9
   d7aa6:	4633      	mov	r3, r6
   d7aa8:	4638      	mov	r0, r7
   d7aaa:	f7fd fc9b 	bl	d53e4 <siscanf>
   d7aae:	4540      	cmp	r0, r8
   d7ab0:	dc08      	bgt.n	d7ac4 <_tzset_unlocked_r+0x11c>
   d7ab2:	682b      	ldr	r3, [r5, #0]
   d7ab4:	606b      	str	r3, [r5, #4]
   d7ab6:	4b72      	ldr	r3, [pc, #456]	; (d7c80 <_tzset_unlocked_r+0x2d8>)
   d7ab8:	6a22      	ldr	r2, [r4, #32]
   d7aba:	601a      	str	r2, [r3, #0]
   d7abc:	4b72      	ldr	r3, [pc, #456]	; (d7c88 <_tzset_unlocked_r+0x2e0>)
   d7abe:	f8c3 8000 	str.w	r8, [r3]
   d7ac2:	e0d5      	b.n	d7c70 <_tzset_unlocked_r+0x2c8>
   d7ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ac6:	f8c5 9004 	str.w	r9, [r5, #4]
   d7aca:	18fd      	adds	r5, r7, r3
   d7acc:	5cfb      	ldrb	r3, [r7, r3]
   d7ace:	2b2d      	cmp	r3, #45	; 0x2d
   d7ad0:	d103      	bne.n	d7ada <_tzset_unlocked_r+0x132>
   d7ad2:	3501      	adds	r5, #1
   d7ad4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7ad8:	e003      	b.n	d7ae2 <_tzset_unlocked_r+0x13a>
   d7ada:	2b2b      	cmp	r3, #43	; 0x2b
   d7adc:	bf08      	it	eq
   d7ade:	3501      	addeq	r5, #1
   d7ae0:	2701      	movs	r7, #1
   d7ae2:	2300      	movs	r3, #0
   d7ae4:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7ae8:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7aec:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7af0:	930a      	str	r3, [sp, #40]	; 0x28
   d7af2:	9603      	str	r6, [sp, #12]
   d7af4:	f8cd a008 	str.w	sl, [sp, #8]
   d7af8:	9601      	str	r6, [sp, #4]
   d7afa:	f8cd b000 	str.w	fp, [sp]
   d7afe:	4633      	mov	r3, r6
   d7b00:	aa07      	add	r2, sp, #28
   d7b02:	4965      	ldr	r1, [pc, #404]	; (d7c98 <_tzset_unlocked_r+0x2f0>)
   d7b04:	4628      	mov	r0, r5
   d7b06:	f7fd fc6d 	bl	d53e4 <siscanf>
   d7b0a:	2800      	cmp	r0, #0
   d7b0c:	dc04      	bgt.n	d7b18 <_tzset_unlocked_r+0x170>
   d7b0e:	6a23      	ldr	r3, [r4, #32]
   d7b10:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7b14:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7b16:	e00e      	b.n	d7b36 <_tzset_unlocked_r+0x18e>
   d7b18:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7b1c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7b20:	213c      	movs	r1, #60	; 0x3c
   d7b22:	fb01 3302 	mla	r3, r1, r2, r3
   d7b26:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7b2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7b2e:	fb01 3302 	mla	r3, r1, r2, r3
   d7b32:	435f      	muls	r7, r3
   d7b34:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b38:	4627      	mov	r7, r4
   d7b3a:	441d      	add	r5, r3
   d7b3c:	f04f 0900 	mov.w	r9, #0
   d7b40:	782b      	ldrb	r3, [r5, #0]
   d7b42:	2b2c      	cmp	r3, #44	; 0x2c
   d7b44:	bf08      	it	eq
   d7b46:	3501      	addeq	r5, #1
   d7b48:	f895 8000 	ldrb.w	r8, [r5]
   d7b4c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7b50:	d126      	bne.n	d7ba0 <_tzset_unlocked_r+0x1f8>
   d7b52:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7b56:	9302      	str	r3, [sp, #8]
   d7b58:	ab09      	add	r3, sp, #36	; 0x24
   d7b5a:	9300      	str	r3, [sp, #0]
   d7b5c:	9603      	str	r6, [sp, #12]
   d7b5e:	9601      	str	r6, [sp, #4]
   d7b60:	4633      	mov	r3, r6
   d7b62:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7b66:	494d      	ldr	r1, [pc, #308]	; (d7c9c <_tzset_unlocked_r+0x2f4>)
   d7b68:	4628      	mov	r0, r5
   d7b6a:	f7fd fc3b 	bl	d53e4 <siscanf>
   d7b6e:	2803      	cmp	r0, #3
   d7b70:	d17e      	bne.n	d7c70 <_tzset_unlocked_r+0x2c8>
   d7b72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7b76:	1e4b      	subs	r3, r1, #1
   d7b78:	2b0b      	cmp	r3, #11
   d7b7a:	d879      	bhi.n	d7c70 <_tzset_unlocked_r+0x2c8>
   d7b7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7b80:	1e53      	subs	r3, r2, #1
   d7b82:	2b04      	cmp	r3, #4
   d7b84:	d874      	bhi.n	d7c70 <_tzset_unlocked_r+0x2c8>
   d7b86:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7b8a:	2b06      	cmp	r3, #6
   d7b8c:	d870      	bhi.n	d7c70 <_tzset_unlocked_r+0x2c8>
   d7b8e:	f887 8008 	strb.w	r8, [r7, #8]
   d7b92:	60f9      	str	r1, [r7, #12]
   d7b94:	613a      	str	r2, [r7, #16]
   d7b96:	617b      	str	r3, [r7, #20]
   d7b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b9a:	eb05 0803 	add.w	r8, r5, r3
   d7b9e:	e02a      	b.n	d7bf6 <_tzset_unlocked_r+0x24e>
   d7ba0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7ba4:	bf06      	itte	eq
   d7ba6:	3501      	addeq	r5, #1
   d7ba8:	4643      	moveq	r3, r8
   d7baa:	2344      	movne	r3, #68	; 0x44
   d7bac:	220a      	movs	r2, #10
   d7bae:	a90b      	add	r1, sp, #44	; 0x2c
   d7bb0:	4628      	mov	r0, r5
   d7bb2:	9305      	str	r3, [sp, #20]
   d7bb4:	f7ff fe3e 	bl	d7834 <strtoul>
   d7bb8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7bbc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7bc0:	4545      	cmp	r5, r8
   d7bc2:	9b05      	ldr	r3, [sp, #20]
   d7bc4:	d114      	bne.n	d7bf0 <_tzset_unlocked_r+0x248>
   d7bc6:	234d      	movs	r3, #77	; 0x4d
   d7bc8:	f1b9 0f00 	cmp.w	r9, #0
   d7bcc:	d107      	bne.n	d7bde <_tzset_unlocked_r+0x236>
   d7bce:	7223      	strb	r3, [r4, #8]
   d7bd0:	2303      	movs	r3, #3
   d7bd2:	60e3      	str	r3, [r4, #12]
   d7bd4:	2302      	movs	r3, #2
   d7bd6:	6123      	str	r3, [r4, #16]
   d7bd8:	f8c4 9014 	str.w	r9, [r4, #20]
   d7bdc:	e00b      	b.n	d7bf6 <_tzset_unlocked_r+0x24e>
   d7bde:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7be2:	230b      	movs	r3, #11
   d7be4:	62a3      	str	r3, [r4, #40]	; 0x28
   d7be6:	2301      	movs	r3, #1
   d7be8:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7bea:	2300      	movs	r3, #0
   d7bec:	6323      	str	r3, [r4, #48]	; 0x30
   d7bee:	e002      	b.n	d7bf6 <_tzset_unlocked_r+0x24e>
   d7bf0:	b280      	uxth	r0, r0
   d7bf2:	723b      	strb	r3, [r7, #8]
   d7bf4:	6178      	str	r0, [r7, #20]
   d7bf6:	2302      	movs	r3, #2
   d7bf8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7bfc:	2300      	movs	r3, #0
   d7bfe:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7c02:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7c06:	930a      	str	r3, [sp, #40]	; 0x28
   d7c08:	f898 3000 	ldrb.w	r3, [r8]
   d7c0c:	2b2f      	cmp	r3, #47	; 0x2f
   d7c0e:	d10b      	bne.n	d7c28 <_tzset_unlocked_r+0x280>
   d7c10:	9603      	str	r6, [sp, #12]
   d7c12:	f8cd a008 	str.w	sl, [sp, #8]
   d7c16:	9601      	str	r6, [sp, #4]
   d7c18:	f8cd b000 	str.w	fp, [sp]
   d7c1c:	4633      	mov	r3, r6
   d7c1e:	aa07      	add	r2, sp, #28
   d7c20:	491f      	ldr	r1, [pc, #124]	; (d7ca0 <_tzset_unlocked_r+0x2f8>)
   d7c22:	4640      	mov	r0, r8
   d7c24:	f7fd fbde 	bl	d53e4 <siscanf>
   d7c28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7c2c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7c30:	213c      	movs	r1, #60	; 0x3c
   d7c32:	fb01 3302 	mla	r3, r1, r2, r3
   d7c36:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7c3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7c3e:	fb01 3302 	mla	r3, r1, r2, r3
   d7c42:	61bb      	str	r3, [r7, #24]
   d7c44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7c46:	f109 0901 	add.w	r9, r9, #1
   d7c4a:	f1b9 0f02 	cmp.w	r9, #2
   d7c4e:	4445      	add	r5, r8
   d7c50:	f107 071c 	add.w	r7, r7, #28
   d7c54:	f47f af74 	bne.w	d7b40 <_tzset_unlocked_r+0x198>
   d7c58:	6860      	ldr	r0, [r4, #4]
   d7c5a:	f7ff fdf5 	bl	d7848 <__tzcalc_limits>
   d7c5e:	4b08      	ldr	r3, [pc, #32]	; (d7c80 <_tzset_unlocked_r+0x2d8>)
   d7c60:	6a22      	ldr	r2, [r4, #32]
   d7c62:	601a      	str	r2, [r3, #0]
   d7c64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7c66:	1a9b      	subs	r3, r3, r2
   d7c68:	4a07      	ldr	r2, [pc, #28]	; (d7c88 <_tzset_unlocked_r+0x2e0>)
   d7c6a:	bf18      	it	ne
   d7c6c:	2301      	movne	r3, #1
   d7c6e:	6013      	str	r3, [r2, #0]
   d7c70:	b00d      	add	sp, #52	; 0x34
   d7c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c76:	bf00      	nop
   d7c78:	000d8538 	.word	0x000d8538
   d7c7c:	2003e7e0 	.word	0x2003e7e0
   d7c80:	2003e7e8 	.word	0x2003e7e8
   d7c84:	000d853b 	.word	0x000d853b
   d7c88:	2003e7e4 	.word	0x2003e7e4
   d7c8c:	2003e298 	.word	0x2003e298
   d7c90:	2003e7d3 	.word	0x2003e7d3
   d7c94:	000d853f 	.word	0x000d853f
   d7c98:	000d8562 	.word	0x000d8562
   d7c9c:	000d854e 	.word	0x000d854e
   d7ca0:	000d8561 	.word	0x000d8561
   d7ca4:	2003e7c8 	.word	0x2003e7c8

000d7ca8 <_findenv_r>:
   d7ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cac:	4607      	mov	r7, r0
   d7cae:	468b      	mov	fp, r1
   d7cb0:	4690      	mov	r8, r2
   d7cb2:	f000 f8d9 	bl	d7e68 <__env_lock>
   d7cb6:	4b19      	ldr	r3, [pc, #100]	; (d7d1c <_findenv_r+0x74>)
   d7cb8:	681d      	ldr	r5, [r3, #0]
   d7cba:	469a      	mov	sl, r3
   d7cbc:	b13d      	cbz	r5, d7cce <_findenv_r+0x26>
   d7cbe:	465c      	mov	r4, fp
   d7cc0:	4623      	mov	r3, r4
   d7cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7cc6:	b142      	cbz	r2, d7cda <_findenv_r+0x32>
   d7cc8:	2a3d      	cmp	r2, #61	; 0x3d
   d7cca:	461c      	mov	r4, r3
   d7ccc:	d1f8      	bne.n	d7cc0 <_findenv_r+0x18>
   d7cce:	4638      	mov	r0, r7
   d7cd0:	f000 f8cb 	bl	d7e6a <__env_unlock>
   d7cd4:	2000      	movs	r0, #0
   d7cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7cda:	ebcb 0404 	rsb	r4, fp, r4
   d7cde:	46a9      	mov	r9, r5
   d7ce0:	f859 0b04 	ldr.w	r0, [r9], #4
   d7ce4:	2800      	cmp	r0, #0
   d7ce6:	d0f2      	beq.n	d7cce <_findenv_r+0x26>
   d7ce8:	4622      	mov	r2, r4
   d7cea:	4659      	mov	r1, fp
   d7cec:	f7ff fc6b 	bl	d75c6 <strncmp>
   d7cf0:	b988      	cbnz	r0, d7d16 <_findenv_r+0x6e>
   d7cf2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7cf6:	191e      	adds	r6, r3, r4
   d7cf8:	5d1b      	ldrb	r3, [r3, r4]
   d7cfa:	2b3d      	cmp	r3, #61	; 0x3d
   d7cfc:	d10b      	bne.n	d7d16 <_findenv_r+0x6e>
   d7cfe:	f8da 3000 	ldr.w	r3, [sl]
   d7d02:	1aed      	subs	r5, r5, r3
   d7d04:	10ad      	asrs	r5, r5, #2
   d7d06:	4638      	mov	r0, r7
   d7d08:	f8c8 5000 	str.w	r5, [r8]
   d7d0c:	f000 f8ad 	bl	d7e6a <__env_unlock>
   d7d10:	1c70      	adds	r0, r6, #1
   d7d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d16:	464d      	mov	r5, r9
   d7d18:	e7e1      	b.n	d7cde <_findenv_r+0x36>
   d7d1a:	bf00      	nop
   d7d1c:	2003e2e0 	.word	0x2003e2e0

000d7d20 <_getenv_r>:
   d7d20:	b507      	push	{r0, r1, r2, lr}
   d7d22:	aa01      	add	r2, sp, #4
   d7d24:	f7ff ffc0 	bl	d7ca8 <_findenv_r>
   d7d28:	b003      	add	sp, #12
   d7d2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7d30 <__gettzinfo>:
   d7d30:	4800      	ldr	r0, [pc, #0]	; (d7d34 <__gettzinfo+0x4>)
   d7d32:	4770      	bx	lr
   d7d34:	2003e2a0 	.word	0x2003e2a0

000d7d38 <gmtime_r>:
   d7d38:	6802      	ldr	r2, [r0, #0]
   d7d3a:	4b47      	ldr	r3, [pc, #284]	; (d7e58 <gmtime_r+0x120>)
   d7d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d3e:	fb92 f4f3 	sdiv	r4, r2, r3
   d7d42:	fb03 2214 	mls	r2, r3, r4, r2
   d7d46:	2a00      	cmp	r2, #0
   d7d48:	bfbc      	itt	lt
   d7d4a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7d4e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7d52:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7d56:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7d5a:	fb92 f3f0 	sdiv	r3, r2, r0
   d7d5e:	fb00 2213 	mls	r2, r0, r3, r2
   d7d62:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7d66:	bfac      	ite	ge
   d7d68:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7d6c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7d70:	608b      	str	r3, [r1, #8]
   d7d72:	fb92 f3f0 	sdiv	r3, r2, r0
   d7d76:	fb00 2213 	mls	r2, r0, r3, r2
   d7d7a:	604b      	str	r3, [r1, #4]
   d7d7c:	600a      	str	r2, [r1, #0]
   d7d7e:	2307      	movs	r3, #7
   d7d80:	1ce2      	adds	r2, r4, #3
   d7d82:	fb92 f3f3 	sdiv	r3, r2, r3
   d7d86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7d8a:	1ad3      	subs	r3, r2, r3
   d7d8c:	618b      	str	r3, [r1, #24]
   d7d8e:	4b33      	ldr	r3, [pc, #204]	; (d7e5c <gmtime_r+0x124>)
   d7d90:	4d33      	ldr	r5, [pc, #204]	; (d7e60 <gmtime_r+0x128>)
   d7d92:	fb94 f5f5 	sdiv	r5, r4, r5
   d7d96:	fb03 4405 	mla	r4, r3, r5, r4
   d7d9a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7d9e:	fbb4 f2f2 	udiv	r2, r4, r2
   d7da2:	4422      	add	r2, r4
   d7da4:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7da8:	fbb4 f3f7 	udiv	r3, r4, r7
   d7dac:	1ad2      	subs	r2, r2, r3
   d7dae:	482d      	ldr	r0, [pc, #180]	; (d7e64 <gmtime_r+0x12c>)
   d7db0:	fbb4 f0f0 	udiv	r0, r4, r0
   d7db4:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7db8:	1a13      	subs	r3, r2, r0
   d7dba:	fbb3 f6f6 	udiv	r6, r3, r6
   d7dbe:	4434      	add	r4, r6
   d7dc0:	f240 126d 	movw	r2, #365	; 0x16d
   d7dc4:	fbb3 f0f2 	udiv	r0, r3, r2
   d7dc8:	fbb3 f3f7 	udiv	r3, r3, r7
   d7dcc:	1ae3      	subs	r3, r4, r3
   d7dce:	fb02 3310 	mls	r3, r2, r0, r3
   d7dd2:	2499      	movs	r4, #153	; 0x99
   d7dd4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d7dd8:	3202      	adds	r2, #2
   d7dda:	fbb2 f2f4 	udiv	r2, r2, r4
   d7dde:	2a0a      	cmp	r2, #10
   d7de0:	fb04 f402 	mul.w	r4, r4, r2
   d7de4:	f104 0602 	add.w	r6, r4, #2
   d7de8:	f04f 0405 	mov.w	r4, #5
   d7dec:	fbb6 f4f4 	udiv	r4, r6, r4
   d7df0:	bf34      	ite	cc
   d7df2:	2602      	movcc	r6, #2
   d7df4:	f06f 0609 	mvncs.w	r6, #9
   d7df8:	4416      	add	r6, r2
   d7dfa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7dfe:	fb02 0505 	mla	r5, r2, r5, r0
   d7e02:	1c5f      	adds	r7, r3, #1
   d7e04:	2e01      	cmp	r6, #1
   d7e06:	bf98      	it	ls
   d7e08:	3501      	addls	r5, #1
   d7e0a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7e0e:	eba7 0704 	sub.w	r7, r7, r4
   d7e12:	d302      	bcc.n	d7e1a <gmtime_r+0xe2>
   d7e14:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7e18:	e014      	b.n	d7e44 <gmtime_r+0x10c>
   d7e1a:	0782      	lsls	r2, r0, #30
   d7e1c:	d105      	bne.n	d7e2a <gmtime_r+0xf2>
   d7e1e:	2464      	movs	r4, #100	; 0x64
   d7e20:	fbb0 f2f4 	udiv	r2, r0, r4
   d7e24:	fb04 0212 	mls	r2, r4, r2, r0
   d7e28:	b94a      	cbnz	r2, d7e3e <gmtime_r+0x106>
   d7e2a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7e2e:	fbb0 f4f2 	udiv	r4, r0, r2
   d7e32:	fb02 0014 	mls	r0, r2, r4, r0
   d7e36:	fab0 f280 	clz	r2, r0
   d7e3a:	0952      	lsrs	r2, r2, #5
   d7e3c:	e000      	b.n	d7e40 <gmtime_r+0x108>
   d7e3e:	2201      	movs	r2, #1
   d7e40:	333b      	adds	r3, #59	; 0x3b
   d7e42:	441a      	add	r2, r3
   d7e44:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7e48:	2300      	movs	r3, #0
   d7e4a:	61ca      	str	r2, [r1, #28]
   d7e4c:	614d      	str	r5, [r1, #20]
   d7e4e:	610e      	str	r6, [r1, #16]
   d7e50:	60cf      	str	r7, [r1, #12]
   d7e52:	620b      	str	r3, [r1, #32]
   d7e54:	4608      	mov	r0, r1
   d7e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e58:	00015180 	.word	0x00015180
   d7e5c:	fffdc54f 	.word	0xfffdc54f
   d7e60:	00023ab1 	.word	0x00023ab1
   d7e64:	00023ab0 	.word	0x00023ab0

000d7e68 <__env_lock>:
   d7e68:	4770      	bx	lr

000d7e6a <__env_unlock>:
   d7e6a:	4770      	bx	lr

000d7e6c <dynalib_user>:
   d7e6c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7e7c:	0000 0000                                   ....

000d7e80 <_ZL13releaseNumber>:
   d7e80:	2e31 3031 0000 2e25 6630 2525 2500 2e33     1.10..%.0f%%.%3.
   d7e90:	6631 5620 2500 2e33 6631 4420 6765 6572     1f V.%3.1f Degre
   d7ea0:	7365 4320 4700 7465 6974 676e 5620 6c61     es C.Getting Val
   d7eb0:	6575 202c 654e 7478 5220 6165 6964 676e     ue, Next Reading
   d7ec0:	6920 206e 3531 4d20 6e69 2e73 5300 4154      in 15 Mins..STA
   d7ed0:	4554 5600 7265 6f62 6573 4d20 646f 2065     TE.Verbose Mode 
   d7ee0:	7453 7261 6574 2e64 5600 7265 6f62 6573     Started..Verbose
   d7ef0:	4d20 646f 2065 6c41 6572 6461 2079 4e4f      Mode Already ON
   d7f00:	002e 0030 6556 6272 736f 2065 6f4d 6564     ..0.Verbose Mode
   d7f10:	5320 6f74 7070 6465 002e 6556 6272 736f      Stopped..Verbos
   d7f20:	2065 6f4d 6564 6120 726c 6165 7964 4f20     e Mode already O
   d7f30:	4646 002e 227b 6554 706d 7265 7461 7275     FF..{"Temperatur
   d7f40:	2265 253a 2e33 6631 202c 4222 7461 6574     e":%3.1f, "Batte
   d7f50:	7972 3a22 3325 312e 7d66 4100 7269 512d     ry":%3.1f}.Air-Q
   d7f60:	6175 696c 7974 482d 6f6f 006b 6f4e 4420     uality-Hook.No D
   d7f70:	7461 0061 6255 6469 746f 2073 6f48 6b6f     ata.Ubidots Hook
   d7f80:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   d7f90:	6465 5300 6174 6574 5400 6172 736e 7469     ed.State.Transit
   d7fa0:	6f69 3a6e 2520 2073 6f74 2520 0073 6843     ion: %s to %s.Ch
   d7fb0:	6e61 6567 6420 7465 6365 6574 2064 202d     ange detected - 
   d7fc0:	6552 6f70 7472 6e69 0067 6954 656d 5020     Reporting.Time P
   d7fd0:	7361 6573 2064 202d 6552 6f70 7472 6e69     assed - Reportin
   d7fe0:	0067 4547 5454 4e49 2047 4552 4441 4e49     g.GETTING READIN
   d7ff0:	0047 4f46 4352 4445 4e00 206f 6863 6e61     G.FORCED.No chan
   d8000:	6567 2d20 4920 6c64 0065 6554 706d 7265     ge - Idle.Temper
   d8010:	7461 7275 0065 6157 7469 6e69 2067 4552     ature.Waiting RE
   d8020:	5053 4e4f 4553 4400 7461 2061 6552 6563     SPONSE.Data Rece
   d8030:	7669 6465 202c 6f47 6e69 2067 6f74 4920     ived, Going to I
   d8040:	4c44 0045 7073 7261 2f6b 6564 6976 6563     DLE.spark/device
   d8050:	732f 7365 6973 6e6f 652f 646e 5200 5345     /session/end.RES
   d8060:	5445 4954 474e 4920 204e 3033 5320 4345     ETTING IN 30 SEC
   d8070:	202e 6300 6c65 6973 7375 5200 6c65 6165     . .celsius.Relea
   d8080:	6573 5300 6769 616e 006c 6142 7474 7265     se.Signal.Batter
   d8090:	0079 6576 6272 736f 4d65 646f 0065 6547     y.verboseMode.Ge
   d80a0:	5274 6165 6964 676e 0000 0000               tReading....

000d80ac <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d80b4:	5453 000d 5459 000d 5483 000d 5467 000d     ST..YT...T..gT..
   d80c4:	5455 000d                                   UT..

000d80c8 <_ZTVN5spark13EthernetClassE>:
	...
   d80d0:	5a5b 000d 5a51 000d 5a47 000d 5a3d 000d     [Z..QZ..GZ..=Z..
   d80e0:	5a31 000d 5a25 000d 5a19 000d 5a11 000d     1Z..%Z...Z...Z..
   d80f0:	5a07 000d 59fd 000d 5dc1 000d               .Z...Y...]..

000d80fc <_ZTV7TwoWire>:
	...
   d8104:	5a79 000d 5ac3 000d 5a9b 000d 5a7b 000d     yZ...Z...Z..{Z..
   d8114:	5aa3 000d 5aab 000d 5ab3 000d 5abb 000d     .Z...Z...Z...Z..

000d8124 <_ZTV9IPAddress>:
	...
   d812c:	5b15 000d 5b05 000d 5b07 000d 0066 6e6c     .[...[...[..f.ln
   d813c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d814c:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d815c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d816c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d817c:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d818c:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d819c:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d81ac:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d81bc:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d81cc:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d81dc:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d81ec:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d81fc:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d820c:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d821c <_ZTVN5spark9MeshClassE>:
	...
   d8224:	5c57 000d 5c4d 000d 5c43 000d 5c39 000d     W\..M\..C\..9\..
   d8234:	5c2d 000d 5c21 000d 5c15 000d 5c0d 000d     -\..!\...\...\..
   d8244:	5c03 000d 5bf9 000d 5dc1 000d               .\...[...]..

000d8250 <_ZTVN5spark12NetworkClassE>:
	...
   d8258:	5d59 000d 5d63 000d 5d6d 000d 5d77 000d     Y]..c]..m]..w]..
   d8268:	5d81 000d 5d8d 000d 5d99 000d 5da5 000d     .]...]...]...]..
   d8278:	5dad 000d 5db7 000d 5dc1 000d               .]...]...]..

000d8284 <_ZTV8SPIClass>:
	...
   d828c:	5f79 000d 5f7b 000d 2b25 3330 3a64 3025     y_..{_..%+03d:%0
   d829c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d82ac:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d82bc <_ZTV11USARTSerial>:
	...
   d82c4:	6205 000d 6255 000d 6263 000d 5ea1 000d     .b..Ub..cb...^..
   d82d4:	6219 000d 623b 000d 6227 000d 624f 000d     .b..;b..'b..Ob..
   d82e4:	6207 000d 620b 000d                         .b...b..

000d82ec <_ZTV9USBSerial>:
	...
   d82f4:	630d 000d 635d 000d 636b 000d 5ea1 000d     .c..]c..kc...^..
   d8304:	6349 000d 630f 000d 6325 000d 6357 000d     Ic...c..%c..Wc..
   d8314:	633b 000d 6309 000d                         ;c...c..

000d831c <_ZTVN5spark9WiFiClassE>:
	...
   d8324:	64dd 000d 64d3 000d 64c9 000d 6471 000d     .d...d...d..qd..
   d8334:	64bd 000d 64b1 000d 64a5 000d 649d 000d     .d...d...d...d..
   d8344:	6493 000d 6489 000d 5dc1 000d               .d...d...]..

000d8350 <_ZTV10WiFiSignal>:
	...
   d8358:	6411 000d 647b 000d 6413 000d 651d 000d     .d..{d...d...e..
   d8368:	6419 000d 64e9 000d 6445 000d               .d...d..Ed..

000d8374 <_ctype_>:
   d8374:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8384:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8394:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d83a4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d83b4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d83c4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d83d4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d83e4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d83f4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8478 <__sf_fake_stdin>:
	...

000d8498 <__sf_fake_stdout>:
	...

000d84b8 <__sf_fake_stderr>:
	...

000d84d8 <__month_lengths>:
   d84d8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d84e8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d84f8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8508:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8518:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8528:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8538:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8548:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8558:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d8568:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d8574 <link_const_variable_data_end>:
   d8574:	000d489d 	.word	0x000d489d
   d8578:	000d4b3b 	.word	0x000d4b3b
   d857c:	000d4f1d 	.word	0x000d4f1d
   d8580:	000d5a65 	.word	0x000d5a65
   d8584:	000d5be9 	.word	0x000d5be9
   d8588:	000d5d0d 	.word	0x000d5d0d
   d858c:	000d5e8d 	.word	0x000d5e8d
   d8590:	000d5f5d 	.word	0x000d5f5d
   d8594:	000d60e1 	.word	0x000d60e1
   d8598:	000d61f1 	.word	0x000d61f1
   d859c:	000d65f5 	.word	0x000d65f5
   d85a0:	000d67b5 	.word	0x000d67b5
   d85a4:	000d680d 	.word	0x000d680d
   d85a8:	000d68d1 	.word	0x000d68d1
   d85ac:	000d6955 	.word	0x000d6955
   d85b0:	000d69d9 	.word	0x000d69d9

000d85b4 <link_constructors_end>:
	...
