
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/TempLogger/target/TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00018edc  2**0
                  CONTENTS
  3 .data         000000c0  2003e12c  000d8df0  0000e12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000604  2003e1ec  2003e1ec  0001e1ec  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d8eb0  000d8eb0  00018eb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8ed8  000d8ed8  00018ed8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00136c62  00000000  00000000  00018edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001a50c  00000000  00000000  0014fb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001e61e  00000000  00000000  0016a04a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002b18  00000000  00000000  00188668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004850  00000000  00000000  0018b180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00040f83  00000000  00000000  0018f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000414a2  00000000  00000000  001d0953  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000f7e87  00000000  00000000  00211df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000dbec  00000000  00000000  00309c7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	e0 86 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ff37 	bl	d7ea0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ff3c 	bl	d7eb6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e12c 	.word	0x2003e12c
   d4048:	000d8df0 	.word	0x000d8df0
   d404c:	2003e1ec 	.word	0x2003e1ec
   d4050:	2003e1ec 	.word	0x2003e1ec
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f807 	bl	d706c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8dec 	.word	0x000d8dec
   d4080:	000d8d8c 	.word	0x000d8d8c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9e6 	b.w	d4454 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f957 	bl	d433c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bfb9 	b.w	d7008 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b8ff 	b.w	d5298 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 b8fd 	b.w	d5298 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b903 	b.w	d52a8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b901 	b.w	d52a8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d002      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40be:	e004      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c0:	6001      	str	r1, [r0, #0]
	      break;
   d40c2:	e002      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	b100      	cbz	r0, d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ca:	2000      	movs	r0, #0
   d40cc:	4770      	bx	lr

000d40ce <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40d0:	6804      	ldr	r4, [r0, #0]
   d40d2:	4668      	mov	r0, sp
   d40d4:	f001 feef 	bl	d5eb6 <_ZN6StringC1EOS_>
   d40d8:	4668      	mov	r0, sp
   d40da:	47a0      	blx	r4
   d40dc:	4604      	mov	r4, r0
   d40de:	4668      	mov	r0, sp
   d40e0:	f001 fef9 	bl	d5ed6 <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e4:	4620      	mov	r0, r4
   d40e6:	b004      	add	sp, #16
   d40e8:	bd10      	pop	{r4, pc}

000d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.38>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ec:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40f0:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f2:	f88d 3000 	strb.w	r3, [sp]
   d40f6:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f8:	4605      	mov	r5, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40fa:	f001 fa89 	bl	d5610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
   d40fe:	4628      	mov	r0, r5
   d4100:	b003      	add	sp, #12
   d4102:	bd30      	pop	{r4, r5, pc}

000d4104 <_Z20PublishDelayFunctionv>:
 
}

// Function to create a delay in the publish time
bool PublishDelayFunction()
{
   d4104:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0; 
  if (millis() - tstamp <= updateRate)
   d4106:	4c08      	ldr	r4, [pc, #32]	; (d4128 <_Z20PublishDelayFunctionv+0x24>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4108:	f000 fe62 	bl	d4dd0 <HAL_Timer_Get_Milli_Seconds>
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	1ac0      	subs	r0, r0, r3
   d4110:	4b06      	ldr	r3, [pc, #24]	; (d412c <_Z20PublishDelayFunctionv+0x28>)
   d4112:	681b      	ldr	r3, [r3, #0]
   d4114:	4298      	cmp	r0, r3
   d4116:	d904      	bls.n	d4122 <_Z20PublishDelayFunctionv+0x1e>
   d4118:	f000 fe5a 	bl	d4dd0 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else
  {
    tstamp = millis();
   d411c:	6020      	str	r0, [r4, #0]
   d411e:	2001      	movs	r0, #1
   d4120:	bd10      	pop	{r4, pc}
// Function to create a delay in the publish time
bool PublishDelayFunction()
{
  static unsigned long tstamp = 0; 
  if (millis() - tstamp <= updateRate)
    return 0;
   d4122:	2000      	movs	r0, #0
  else
  {
    tstamp = millis();
    return 1;
  }
}
   d4124:	bd10      	pop	{r4, pc}
   d4126:	bf00      	nop
   d4128:	2003e214 	.word	0x2003e214
   d412c:	2003e130 	.word	0x2003e130

000d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4130:	b508      	push	{r3, lr}
    Particle.publish("Mode","Verbose Mode Started.", PRIVATE);
    return 1;
  }
  else if (command == "0"){
    verboseMode = false;
    waitUntil(PublishDelayFunction);
   d4132:	f7ff ffe7 	bl	d4104 <_Z20PublishDelayFunctionv>
        while (_while() && !_condition()) {
   d4136:	b118      	cbz	r0, d4140 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22+0x10>
            spark_process();
        }
        return _condition();
    }
   d4138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d413c:	f7ff bfe2 	b.w	d4104 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4140:	f001 f832 	bl	d51a8 <spark_process>
   d4144:	e7f5      	b.n	d4132 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22+0x2>
	...

000d4148 <_Z17getSignalStrengthv>:
}

// Functions for mobile app reporting. 

void getSignalStrength()
{
   d4148:	b500      	push	{lr}
   d414a:	b08d      	sub	sp, #52	; 0x34
  WiFiSignal sig = WiFi.RSSI();
   d414c:	490a      	ldr	r1, [pc, #40]	; (d4178 <_Z17getSignalStrengthv+0x30>)
   d414e:	a803      	add	r0, sp, #12
   d4150:	f002 ff00 	bl	d6f54 <_ZN5spark9WiFiClass4RSSIEv>

  float rssi = sig.getStrength();
   d4154:	a803      	add	r0, sp, #12
   d4156:	f002 fec3 	bl	d6ee0 <_ZNK10WiFiSignal11getStrengthEv>

  snprintf(signalString, sizeof(signalString), "%.0f%%", rssi);
   d415a:	ee10 0a10 	vmov	r0, s0
   d415e:	f003 fae3 	bl	d7728 <__aeabi_f2d>
   d4162:	4a06      	ldr	r2, [pc, #24]	; (d417c <_Z17getSignalStrengthv+0x34>)
   d4164:	e9cd 0100 	strd	r0, r1, [sp]
   d4168:	2110      	movs	r1, #16
   d416a:	4805      	ldr	r0, [pc, #20]	; (d4180 <_Z17getSignalStrengthv+0x38>)
   d416c:	f001 f8b4 	bl	d52d8 <snprintf>
}
   d4170:	b00d      	add	sp, #52	; 0x34
   d4172:	f85d fb04 	ldr.w	pc, [sp], #4
   d4176:	bf00      	nop
   d4178:	2003e6e0 	.word	0x2003e6e0
   d417c:	000d86f4 	.word	0x000d86f4
   d4180:	2003e1f0 	.word	0x2003e1f0
   d4184:	00000000 	.word	0x00000000

000d4188 <_Z16getBatteryChargev>:

void getBatteryCharge()
{
   d4188:	b507      	push	{r0, r1, r2, lr}
  float voltage = analogRead(BATT) * 0.0011224;
   d418a:	2021      	movs	r0, #33	; 0x21
   d418c:	f002 ffbd 	bl	d710a <analogRead>

  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d4190:	f003 fab8 	bl	d7704 <__aeabi_i2d>
   d4194:	a30c      	add	r3, pc, #48	; (adr r3, d41c8 <_Z16getBatteryChargev+0x40>)
   d4196:	e9d3 2300 	ldrd	r2, r3, [r3]
   d419a:	f003 fb19 	bl	d77d0 <__aeabi_dmul>
   d419e:	f003 fd29 	bl	d7bf4 <__aeabi_d2f>
   d41a2:	f003 fac1 	bl	d7728 <__aeabi_f2d>
   d41a6:	4a06      	ldr	r2, [pc, #24]	; (d41c0 <_Z16getBatteryChargev+0x38>)
   d41a8:	e9cd 0100 	strd	r0, r1, [sp]
   d41ac:	2110      	movs	r1, #16
   d41ae:	4805      	ldr	r0, [pc, #20]	; (d41c4 <_Z16getBatteryChargev+0x3c>)
   d41b0:	f001 f892 	bl	d52d8 <snprintf>
}
   d41b4:	b003      	add	sp, #12
   d41b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ba:	bf00      	nop
   d41bc:	f3af 8000 	nop.w
   d41c0:	000d86fb 	.word	0x000d86fb
   d41c4:	2003e254 	.word	0x2003e254
   d41c8:	d2c10294 	.word	0xd2c10294
   d41cc:	3f5263af 	.word	0x3f5263af

000d41d0 <_Z14getTemperaturev>:

// Function to get temperature value from DS18B20. 
    bool getTemperature()
{
   d41d0:	b513      	push	{r0, r1, r4, lr}
  lastTemperatureInC = temperatureInC; 
   d41d2:	4c0d      	ldr	r4, [pc, #52]	; (d4208 <_Z14getTemperaturev+0x38>)
   d41d4:	4b0d      	ldr	r3, [pc, #52]	; (d420c <_Z14getTemperaturev+0x3c>)
   d41d6:	6822      	ldr	r2, [r4, #0]
  
  if (sensor.read())
   d41d8:	480d      	ldr	r0, [pc, #52]	; (d4210 <_Z14getTemperaturev+0x40>)
}

// Function to get temperature value from DS18B20. 
    bool getTemperature()
{
  lastTemperatureInC = temperatureInC; 
   d41da:	601a      	str	r2, [r3, #0]
  
  if (sensor.read())
   d41dc:	f000 facc 	bl	d4778 <_ZN4DS184readEv>
   d41e0:	b178      	cbz	r0, d4202 <_Z14getTemperaturev+0x32>
  { 
    temperatureInC = sensor.celsius();
   d41e2:	480b      	ldr	r0, [pc, #44]	; (d4210 <_Z14getTemperaturev+0x40>)
   d41e4:	f000 faec 	bl	d47c0 <_ZN4DS187celsiusEv>
   d41e8:	ee10 0a10 	vmov	r0, s0
   d41ec:	ed84 0a00 	vstr	s0, [r4]
    snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", temperatureInC); 
   d41f0:	f003 fa9a 	bl	d7728 <__aeabi_f2d>
   d41f4:	4a07      	ldr	r2, [pc, #28]	; (d4214 <_Z14getTemperaturev+0x44>)
   d41f6:	e9cd 0100 	strd	r0, r1, [sp]
   d41fa:	2110      	movs	r1, #16
   d41fc:	4806      	ldr	r0, [pc, #24]	; (d4218 <_Z14getTemperaturev+0x48>)
   d41fe:	f001 f86b 	bl	d52d8 <snprintf>
  }
  return 1;
}
   d4202:	2001      	movs	r0, #1
   d4204:	b002      	add	sp, #8
   d4206:	bd10      	pop	{r4, pc}
   d4208:	2003e210 	.word	0x2003e210
   d420c:	2003e250 	.word	0x2003e250
   d4210:	2003e220 	.word	0x2003e220
   d4214:	000d8703 	.word	0x000d8703
   d4218:	2003e200 	.word	0x2003e200

000d421c <_Z15getMeasurementsv>:

void getMeasurements()
{
   d421c:	b508      	push	{r3, lr}

  getSignalStrength(); // Get Signal Strength
   d421e:	f7ff ff93 	bl	d4148 <_Z17getSignalStrengthv>

  getBatteryCharge(); // Get Battery Charge Percentage
   d4222:	f7ff ffb1 	bl	d4188 <_Z16getBatteryChargev>

  getTemperature(); // Read Temperature from Sensor.
  
  
}
   d4226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  getSignalStrength(); // Get Signal Strength

  getBatteryCharge(); // Get Battery Charge Percentage

  getTemperature(); // Read Temperature from Sensor.
   d422a:	f7ff bfd1 	b.w	d41d0 <_Z14getTemperaturev>

000d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d422e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4230:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4232:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4234:	b17c      	cbz	r4, d4256 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4236:	6863      	ldr	r3, [r4, #4]
   d4238:	3b01      	subs	r3, #1
   d423a:	6063      	str	r3, [r4, #4]
   d423c:	b95b      	cbnz	r3, d4256 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d423e:	6823      	ldr	r3, [r4, #0]
   d4240:	4620      	mov	r0, r4
   d4242:	689b      	ldr	r3, [r3, #8]
   d4244:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4246:	68a3      	ldr	r3, [r4, #8]
   d4248:	3b01      	subs	r3, #1
   d424a:	60a3      	str	r3, [r4, #8]
   d424c:	b91b      	cbnz	r3, d4256 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d424e:	6823      	ldr	r3, [r4, #0]
   d4250:	4620      	mov	r0, r4
   d4252:	68db      	ldr	r3, [r3, #12]
   d4254:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4256:	4628      	mov	r0, r5
   d4258:	bd38      	pop	{r3, r4, r5, pc}
	...

000d425c <_Z14SetVerboseMode6String>:
}

// Function to Toggle VerboseMode. 

bool SetVerboseMode(String command)
{
   d425c:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d425e:	4915      	ldr	r1, [pc, #84]	; (d42b4 <_Z14SetVerboseMode6String+0x58>)
   d4260:	b085      	sub	sp, #20
   d4262:	4605      	mov	r5, r0
   d4264:	f001 fe91 	bl	d5f8a <_ZNK6String6equalsEPKc>

  if(command == "1")
   d4268:	4604      	mov	r4, r0
   d426a:	b158      	cbz	r0, d4284 <_Z14SetVerboseMode6String+0x28>
  {
    verboseMode = true;
   d426c:	4b12      	ldr	r3, [pc, #72]	; (d42b8 <_Z14SetVerboseMode6String+0x5c>)
   d426e:	2401      	movs	r4, #1
   d4270:	701c      	strb	r4, [r3, #0]
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
   d4272:	f7ff ff5d 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4276:	4b11      	ldr	r3, [pc, #68]	; (d42bc <_Z14SetVerboseMode6String+0x60>)
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode","Verbose Mode Started.", PRIVATE);
   d4278:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d427a:	781b      	ldrb	r3, [r3, #0]
   d427c:	f88d 2000 	strb.w	r2, [sp]
   d4280:	4a0f      	ldr	r2, [pc, #60]	; (d42c0 <_Z14SetVerboseMode6String+0x64>)
   d4282:	e00d      	b.n	d42a0 <_Z14SetVerboseMode6String+0x44>
   d4284:	490f      	ldr	r1, [pc, #60]	; (d42c4 <_Z14SetVerboseMode6String+0x68>)
   d4286:	4628      	mov	r0, r5
   d4288:	f001 fe7f 	bl	d5f8a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0"){
   d428c:	b180      	cbz	r0, d42b0 <_Z14SetVerboseMode6String+0x54>
    verboseMode = false;
   d428e:	4b0a      	ldr	r3, [pc, #40]	; (d42b8 <_Z14SetVerboseMode6String+0x5c>)
   d4290:	701c      	strb	r4, [r3, #0]
   d4292:	f7ff ff4d 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4296:	4b09      	ldr	r3, [pc, #36]	; (d42bc <_Z14SetVerboseMode6String+0x60>)
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode","Verbose Mode Stopped.", PRIVATE);
   d4298:	4a0b      	ldr	r2, [pc, #44]	; (d42c8 <_Z14SetVerboseMode6String+0x6c>)
   d429a:	781b      	ldrb	r3, [r3, #0]
   d429c:	f88d 4000 	strb.w	r4, [sp]
   d42a0:	490a      	ldr	r1, [pc, #40]	; (d42cc <_Z14SetVerboseMode6String+0x70>)
   d42a2:	a802      	add	r0, sp, #8
   d42a4:	f7ff ff21 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.38>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42a8:	a803      	add	r0, sp, #12
   d42aa:	f7ff ffc0 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42ae:	2001      	movs	r0, #1
    return 1;
    }
    else {
      return 0;
    }
}
   d42b0:	b005      	add	sp, #20
   d42b2:	bd30      	pop	{r4, r5, pc}
   d42b4:	000d88b8 	.word	0x000d88b8
   d42b8:	2003e12c 	.word	0x2003e12c
   d42bc:	2003e24c 	.word	0x2003e24c
   d42c0:	000d8713 	.word	0x000d8713
   d42c4:	000d8729 	.word	0x000d8729
   d42c8:	000d872b 	.word	0x000d872b
   d42cc:	000d87ca 	.word	0x000d87ca

000d42d0 <_Z11sendUBIDotsv.part.30>:
void sendUBIDots(){
   d42d0:	b500      	push	{lr}
   d42d2:	b0c7      	sub	sp, #284	; 0x11c
 
  if(sensor.read()){
     char data[256];
    snprintf(data,sizeof(data),"{\"Temperature\":%3.1f, \"Battery\":%3.1f}",temperatureInC, batteryString);
   d42d4:	4b0e      	ldr	r3, [pc, #56]	; (d4310 <_Z11sendUBIDotsv.part.30+0x40>)
   d42d6:	9302      	str	r3, [sp, #8]
   d42d8:	4b0e      	ldr	r3, [pc, #56]	; (d4314 <_Z11sendUBIDotsv.part.30+0x44>)
   d42da:	6818      	ldr	r0, [r3, #0]
   d42dc:	f003 fa24 	bl	d7728 <__aeabi_f2d>
   d42e0:	4a0d      	ldr	r2, [pc, #52]	; (d4318 <_Z11sendUBIDotsv.part.30+0x48>)
   d42e2:	e9cd 0100 	strd	r0, r1, [sp]
   d42e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d42ea:	a806      	add	r0, sp, #24
   d42ec:	f000 fff4 	bl	d52d8 <snprintf>
   d42f0:	4b0a      	ldr	r3, [pc, #40]	; (d431c <_Z11sendUBIDotsv.part.30+0x4c>)
    Particle.publish("Air-Quality-Hook",data,PRIVATE);
   d42f2:	490b      	ldr	r1, [pc, #44]	; (d4320 <_Z11sendUBIDotsv.part.30+0x50>)
   d42f4:	781b      	ldrb	r3, [r3, #0]
   d42f6:	2200      	movs	r2, #0
   d42f8:	f88d 2000 	strb.w	r2, [sp]
   d42fc:	a804      	add	r0, sp, #16
   d42fe:	aa06      	add	r2, sp, #24
   d4300:	f7ff fef3 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.38>
   d4304:	a805      	add	r0, sp, #20
   d4306:	f7ff ff92 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    
    }
   
    }
   d430a:	b047      	add	sp, #284	; 0x11c
   d430c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4310:	2003e254 	.word	0x2003e254
   d4314:	2003e210 	.word	0x2003e210
   d4318:	000d8741 	.word	0x000d8741
   d431c:	2003e24c 	.word	0x2003e24c
   d4320:	000d8768 	.word	0x000d8768

000d4324 <_Z11sendUBIDotsv>:
    }
    else {
      return 0;
    }
}
void sendUBIDots(){
   d4324:	b508      	push	{r3, lr}
 
  if(sensor.read()){
   d4326:	4804      	ldr	r0, [pc, #16]	; (d4338 <_Z11sendUBIDotsv+0x14>)
   d4328:	f000 fa26 	bl	d4778 <_ZN4DS184readEv>
   d432c:	b118      	cbz	r0, d4336 <_Z11sendUBIDotsv+0x12>
    snprintf(data,sizeof(data),"{\"Temperature\":%3.1f, \"Battery\":%3.1f}",temperatureInC, batteryString);
    Particle.publish("Air-Quality-Hook",data,PRIVATE);
    
    }
   
    }
   d432e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4332:	f7ff bfcd 	b.w	d42d0 <_Z11sendUBIDotsv.part.30>
   d4336:	bd08      	pop	{r3, pc}
   d4338:	2003e220 	.word	0x2003e220

000d433c <loop>:
  
  
}

void loop()
{
   d433c:	b530      	push	{r4, r5, lr}
  
 
  switch (state)
   d433e:	4c37      	ldr	r4, [pc, #220]	; (d441c <loop+0xe0>)
   d4340:	7823      	ldrb	r3, [r4, #0]
   d4342:	2b02      	cmp	r3, #2
  
  
}

void loop()
{
   d4344:	b085      	sub	sp, #20
   d4346:	4625      	mov	r5, r4
  
 
  switch (state)
   d4348:	d01b      	beq.n	d4382 <loop+0x46>
   d434a:	2b03      	cmp	r3, #3
   d434c:	d031      	beq.n	d43b2 <loop+0x76>
   d434e:	2b01      	cmp	r3, #1
   d4350:	d162      	bne.n	d4418 <loop+0xdc>
  {
  case IDLE_STATE: // IDLE State.
    
    static unsigned long TimePassed = 0;        
    if (Time.minute() - TimePassed >= refreshRate ) 
   d4352:	4d33      	ldr	r5, [pc, #204]	; (d4420 <loop+0xe4>)
   d4354:	f002 f968 	bl	d6628 <_ZN9TimeClass6minuteEv>
   d4358:	682b      	ldr	r3, [r5, #0]
   d435a:	4298      	cmp	r0, r3
   d435c:	d05c      	beq.n	d4418 <loop+0xdc>
    {
    state = MEASURING_STATE;
   d435e:	2302      	movs	r3, #2
   d4360:	7023      	strb	r3, [r4, #0]
    TimePassed = Time.minute();     
   d4362:	f002 f961 	bl	d6628 <_ZN9TimeClass6minuteEv>
    if(verboseMode){
   d4366:	4b2f      	ldr	r3, [pc, #188]	; (d4424 <loop+0xe8>)
    
    static unsigned long TimePassed = 0;        
    if (Time.minute() - TimePassed >= refreshRate ) 
    {
    state = MEASURING_STATE;
    TimePassed = Time.minute();     
   d4368:	6028      	str	r0, [r5, #0]
    if(verboseMode){
   d436a:	781b      	ldrb	r3, [r3, #0]
   d436c:	2b00      	cmp	r3, #0
   d436e:	d053      	beq.n	d4418 <loop+0xdc>
   d4370:	f7ff fede 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4374:	4b2c      	ldr	r3, [pc, #176]	; (d4428 <loop+0xec>)
      waitUntil(PublishDelayFunction);
      Particle.publish("State","MEASURING",PRIVATE);
   d4376:	2200      	movs	r2, #0
   d4378:	781b      	ldrb	r3, [r3, #0]
   d437a:	f88d 2000 	strb.w	r2, [sp]
   d437e:	4a2b      	ldr	r2, [pc, #172]	; (d442c <loop+0xf0>)
   d4380:	e00f      	b.n	d43a2 <loop+0x66>
    }
  break;

  case MEASURING_STATE: // Measuring State. 
  
    getMeasurements(); // Get Measurements and Move to Reporting State. 
   d4382:	f7ff ff4b 	bl	d421c <_Z15getMeasurementsv>
    state = REPORTING_STATE;
   d4386:	2303      	movs	r3, #3
   d4388:	7023      	strb	r3, [r4, #0]
     if(verboseMode){
   d438a:	4b26      	ldr	r3, [pc, #152]	; (d4424 <loop+0xe8>)
   d438c:	781b      	ldrb	r3, [r3, #0]
   d438e:	2b00      	cmp	r3, #0
   d4390:	d042      	beq.n	d4418 <loop+0xdc>
   d4392:	f7ff fecd 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d4396:	4b24      	ldr	r3, [pc, #144]	; (d4428 <loop+0xec>)
      waitUntil(PublishDelayFunction);
      Particle.publish("State","REPORTING",PRIVATE);
   d4398:	2200      	movs	r2, #0
   d439a:	781b      	ldrb	r3, [r3, #0]
   d439c:	f88d 2000 	strb.w	r2, [sp]
   d43a0:	4a23      	ldr	r2, [pc, #140]	; (d4430 <loop+0xf4>)
   d43a2:	4924      	ldr	r1, [pc, #144]	; (d4434 <loop+0xf8>)
   d43a4:	a802      	add	r0, sp, #8
   d43a6:	f7ff fea0 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.38>
   d43aa:	a803      	add	r0, sp, #12
   d43ac:	f7ff ff3f 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43b0:	e032      	b.n	d4418 <loop+0xdc>
      
    } 
    break;

  case REPORTING_STATE: //
    if (verboseMode) Particle.publish("Temperature", temperatureString, PRIVATE); 
   d43b2:	4b1c      	ldr	r3, [pc, #112]	; (d4424 <loop+0xe8>)
   d43b4:	781a      	ldrb	r2, [r3, #0]
   d43b6:	461c      	mov	r4, r3
   d43b8:	b162      	cbz	r2, d43d4 <loop+0x98>
   d43ba:	4b1b      	ldr	r3, [pc, #108]	; (d4428 <loop+0xec>)
   d43bc:	491e      	ldr	r1, [pc, #120]	; (d4438 <loop+0xfc>)
   d43be:	781b      	ldrb	r3, [r3, #0]
   d43c0:	2200      	movs	r2, #0
   d43c2:	f88d 2000 	strb.w	r2, [sp]
   d43c6:	a802      	add	r0, sp, #8
   d43c8:	4a1c      	ldr	r2, [pc, #112]	; (d443c <loop+0x100>)
   d43ca:	f7ff fe8e 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.38>
   d43ce:	a803      	add	r0, sp, #12
   d43d0:	f7ff ff2d 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    
    if(abs(lastTemperatureInC-temperatureInC) >= 1) sendUBIDots();
   d43d4:	4b1a      	ldr	r3, [pc, #104]	; (d4440 <loop+0x104>)
   d43d6:	edd3 7a00 	vldr	s15, [r3]
   d43da:	4b1a      	ldr	r3, [pc, #104]	; (d4444 <loop+0x108>)
   d43dc:	ed93 7a00 	vldr	s14, [r3]
   d43e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d43e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d43e8:	ee17 3a90 	vmov	r3, s15
   d43ec:	b10b      	cbz	r3, d43f2 <loop+0xb6>
   d43ee:	f7ff ff99 	bl	d4324 <_Z11sendUBIDotsv>
   if(verboseMode){
   d43f2:	7823      	ldrb	r3, [r4, #0]
   d43f4:	b173      	cbz	r3, d4414 <loop+0xd8>
   d43f6:	f7ff fe9b 	bl	d4130 <_ZN11SystemClass18waitConditionWhileIZ14SetVerboseMode6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.22>
   d43fa:	4b0b      	ldr	r3, [pc, #44]	; (d4428 <loop+0xec>)
      waitUntil(PublishDelayFunction);
      Particle.publish("State","IDLE",PRIVATE);
   d43fc:	490d      	ldr	r1, [pc, #52]	; (d4434 <loop+0xf8>)
   d43fe:	781b      	ldrb	r3, [r3, #0]
   d4400:	2200      	movs	r2, #0
   d4402:	f88d 2000 	strb.w	r2, [sp]
   d4406:	a802      	add	r0, sp, #8
   d4408:	4a0f      	ldr	r2, [pc, #60]	; (d4448 <loop+0x10c>)
   d440a:	f7ff fe6e 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.38>
   d440e:	a803      	add	r0, sp, #12
   d4410:	f7ff ff0d 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    } 
    state = IDLE_STATE;
   d4414:	2301      	movs	r3, #1
   d4416:	702b      	strb	r3, [r5, #0]

  }

 
 
}
   d4418:	b005      	add	sp, #20
   d441a:	bd30      	pop	{r4, r5, pc}
   d441c:	2003e218 	.word	0x2003e218
   d4420:	2003e21c 	.word	0x2003e21c
   d4424:	2003e12c 	.word	0x2003e12c
   d4428:	2003e24c 	.word	0x2003e24c
   d442c:	000d8779 	.word	0x000d8779
   d4430:	000d8789 	.word	0x000d8789
   d4434:	000d8783 	.word	0x000d8783
   d4438:	000d8793 	.word	0x000d8793
   d443c:	2003e200 	.word	0x2003e200
   d4440:	2003e250 	.word	0x2003e250
   d4444:	2003e210 	.word	0x2003e210
   d4448:	000d879f 	.word	0x000d879f

000d444c <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d444c:	2300      	movs	r3, #0
   d444e:	2204      	movs	r2, #4
   d4450:	f000 be9a 	b.w	d5188 <spark_variable>

000d4454 <setup>:


// Setup Particle Variables and Functions here. 

void setup()
{
   d4454:	b510      	push	{r4, lr}
   d4456:	b086      	sub	sp, #24
  getTemperature();
   d4458:	f7ff feba 	bl	d41d0 <_Z14getTemperaturev>
  Particle.variable("celsius", temperatureString); // Setup Particle Variable
   d445c:	4922      	ldr	r1, [pc, #136]	; (d44e8 <setup+0x94>)
   d445e:	4823      	ldr	r0, [pc, #140]	; (d44ec <setup+0x98>)
   d4460:	f7ff fff4 	bl	d444c <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);
   d4464:	4922      	ldr	r1, [pc, #136]	; (d44f0 <setup+0x9c>)
   d4466:	4823      	ldr	r0, [pc, #140]	; (d44f4 <setup+0xa0>)
   d4468:	f7ff fff0 	bl	d444c <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString); // Particle variables that enable monitoring using the mobile app
   d446c:	4922      	ldr	r1, [pc, #136]	; (d44f8 <setup+0xa4>)
   d446e:	4823      	ldr	r0, [pc, #140]	; (d44fc <setup+0xa8>)
   d4470:	f7ff ffec 	bl	d444c <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);
   d4474:	4922      	ldr	r1, [pc, #136]	; (d4500 <setup+0xac>)
   d4476:	4823      	ldr	r0, [pc, #140]	; (d4504 <setup+0xb0>)
   d4478:	f7ff ffe8 	bl	d444c <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d447c:	4b22      	ldr	r3, [pc, #136]	; (d4508 <setup+0xb4>)
   d447e:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4480:	4b22      	ldr	r3, [pc, #136]	; (d450c <setup+0xb8>)
   d4482:	9305      	str	r3, [sp, #20]
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4484:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   d4486:	4b22      	ldr	r3, [pc, #136]	; (d4510 <setup+0xbc>)
   d4488:	9304      	str	r3, [sp, #16]
   d448a:	f7ff fe04 	bl	d4096 <_Znwj>
   d448e:	4604      	mov	r4, r0
   d4490:	b178      	cbz	r0, d44b2 <setup+0x5e>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4492:	2300      	movs	r3, #0
   d4494:	6083      	str	r3, [r0, #8]
   d4496:	9b04      	ldr	r3, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4498:	b133      	cbz	r3, d44a8 <setup+0x54>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d449a:	2202      	movs	r2, #2
   d449c:	a902      	add	r1, sp, #8
   d449e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d44a0:	9b05      	ldr	r3, [sp, #20]
   d44a2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d44a4:	9b04      	ldr	r3, [sp, #16]
   d44a6:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d44a8:	4a1a      	ldr	r2, [pc, #104]	; (d4514 <setup+0xc0>)
   d44aa:	481b      	ldr	r0, [pc, #108]	; (d4518 <setup+0xc4>)
   d44ac:	4621      	mov	r1, r4
   d44ae:	f000 ff8f 	bl	d53d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d44b2:	9b04      	ldr	r3, [sp, #16]
   d44b4:	b11b      	cbz	r3, d44be <setup+0x6a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d44b6:	a902      	add	r1, sp, #8
   d44b8:	2203      	movs	r2, #3
   d44ba:	4608      	mov	r0, r1
   d44bc:	4798      	blx	r3
  Particle.function("verboseMode", SetVerboseMode);  // Added Particle Function For VerboseMode. 
  
  if (verboseMode) Particle.publish("State","IDLE", PRIVATE);
   d44be:	4b17      	ldr	r3, [pc, #92]	; (d451c <setup+0xc8>)
   d44c0:	781b      	ldrb	r3, [r3, #0]
   d44c2:	b163      	cbz	r3, d44de <setup+0x8a>
   d44c4:	4b16      	ldr	r3, [pc, #88]	; (d4520 <setup+0xcc>)
   d44c6:	4917      	ldr	r1, [pc, #92]	; (d4524 <setup+0xd0>)
   d44c8:	781b      	ldrb	r3, [r3, #0]
   d44ca:	2200      	movs	r2, #0
   d44cc:	f88d 2000 	strb.w	r2, [sp]
   d44d0:	a802      	add	r0, sp, #8
   d44d2:	4a15      	ldr	r2, [pc, #84]	; (d4528 <setup+0xd4>)
   d44d4:	f7ff fe09 	bl	d40ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.38>
   d44d8:	a803      	add	r0, sp, #12
   d44da:	f7ff fea8 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = IDLE_STATE;
   d44de:	4b13      	ldr	r3, [pc, #76]	; (d452c <setup+0xd8>)
   d44e0:	2201      	movs	r2, #1
   d44e2:	701a      	strb	r2, [r3, #0]
  
  
}
   d44e4:	b006      	add	sp, #24
   d44e6:	bd10      	pop	{r4, pc}
   d44e8:	2003e200 	.word	0x2003e200
   d44ec:	000d87a4 	.word	0x000d87a4
   d44f0:	000d87cf 	.word	0x000d87cf
   d44f4:	000d87ac 	.word	0x000d87ac
   d44f8:	2003e1f0 	.word	0x2003e1f0
   d44fc:	000d87b4 	.word	0x000d87b4
   d4500:	2003e254 	.word	0x2003e254
   d4504:	000d87bb 	.word	0x000d87bb
   d4508:	000d425d 	.word	0x000d425d
   d450c:	000d40cf 	.word	0x000d40cf
   d4510:	000d40b7 	.word	0x000d40b7
   d4514:	000d87c3 	.word	0x000d87c3
   d4518:	000d53a9 	.word	0x000d53a9
   d451c:	2003e12c 	.word	0x2003e12c
   d4520:	2003e24c 	.word	0x2003e24c
   d4524:	000d8783 	.word	0x000d8783
   d4528:	000d879f 	.word	0x000d879f
   d452c:	2003e218 	.word	0x2003e218

000d4530 <_GLOBAL__sub_I_sensor>:
    snprintf(data,sizeof(data),"{\"Temperature\":%3.1f, \"Battery\":%3.1f}",temperatureInC, batteryString);
    Particle.publish("Air-Quality-Hook",data,PRIVATE);
    
    }
   
    }
   d4530:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4532:	4b06      	ldr	r3, [pc, #24]	; (d454c <_GLOBAL__sub_I_sensor+0x1c>)
   d4534:	2201      	movs	r2, #1
   d4536:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4538:	f000 fc62 	bl	d4e00 <HAL_Pin_Map>



// Initialize modules here

DS18 sensor(D3); // Initialize sensor object
   d453c:	2200      	movs	r2, #0
   d453e:	2103      	movs	r1, #3
   d4540:	4803      	ldr	r0, [pc, #12]	; (d4550 <_GLOBAL__sub_I_sensor+0x20>)
    snprintf(data,sizeof(data),"{\"Temperature\":%3.1f, \"Battery\":%3.1f}",temperatureInC, batteryString);
    Particle.publish("Air-Quality-Hook",data,PRIVATE);
    
    }
   
    }
   d4542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}



// Initialize modules here

DS18 sensor(D3); // Initialize sensor object
   d4546:	f000 b816 	b.w	d4576 <_ZN4DS18C1Etb>
   d454a:	bf00      	nop
   d454c:	2003e24c 	.word	0x2003e24c
   d4550:	2003e220 	.word	0x2003e220

000d4554 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4554:	2300      	movs	r3, #0
  _celsius = 0;
   d4556:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4558:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d455a:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d455c:	6183      	str	r3, [r0, #24]
   d455e:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d4560:	6203      	str	r3, [r0, #32]
   d4562:	6243      	str	r3, [r0, #36]	; 0x24
   d4564:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d4568:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d456c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d4570:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d4574:	4770      	bx	lr

000d4576 <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d4576:	b538      	push	{r3, r4, r5, lr}
   d4578:	4604      	mov	r4, r0
   d457a:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d457c:	f000 f994 	bl	d48a8 <_ZN7OneWireC1Et>
   d4580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d4584:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4586:	73a5      	strb	r5, [r4, #14]
   d4588:	8223      	strh	r3, [r4, #16]
{
  init();
   d458a:	f7ff ffe3 	bl	d4554 <_ZN4DS184initEv>
}
   d458e:	4620      	mov	r0, r4
   d4590:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4594 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4596:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d459a:	680b      	ldr	r3, [r1, #0]
   d459c:	6183      	str	r3, [r0, #24]
   d459e:	f100 0518 	add.w	r5, r0, #24
   d45a2:	684b      	ldr	r3, [r1, #4]
   d45a4:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d45a6:	780b      	ldrb	r3, [r1, #0]
   d45a8:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d45aa:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d45ac:	d00a      	beq.n	d45c4 <_ZN4DS184readEPh+0x30>
   d45ae:	d803      	bhi.n	d45b8 <_ZN4DS184readEPh+0x24>
   d45b0:	2b10      	cmp	r3, #16
   d45b2:	d142      	bne.n	d463a <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d45b4:	2301      	movs	r3, #1
   d45b6:	e008      	b.n	d45ca <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d45b8:	2b26      	cmp	r3, #38	; 0x26
   d45ba:	d005      	beq.n	d45c8 <_ZN4DS184readEPh+0x34>
   d45bc:	2b28      	cmp	r3, #40	; 0x28
   d45be:	d13c      	bne.n	d463a <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d45c0:	2302      	movs	r3, #2
   d45c2:	e002      	b.n	d45ca <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d45c4:	2303      	movs	r3, #3
   d45c6:	e000      	b.n	d45ca <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d45c8:	2304      	movs	r3, #4
   d45ca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d45ce:	4620      	mov	r0, r4
   d45d0:	f000 f974 	bl	d48bc <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d45d4:	4629      	mov	r1, r5
   d45d6:	4620      	mov	r0, r4
   d45d8:	f000 fa30 	bl	d4a3c <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d45dc:	7ba2      	ldrb	r2, [r4, #14]
   d45de:	2144      	movs	r1, #68	; 0x44
   d45e0:	4620      	mov	r0, r4
   d45e2:	f000 f9f8 	bl	d49d6 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d45e6:	8a20      	ldrh	r0, [r4, #16]
   d45e8:	f000 fe96 	bl	d5318 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d45ec:	4620      	mov	r0, r4
   d45ee:	f000 f965 	bl	d48bc <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d45f2:	4629      	mov	r1, r5
   d45f4:	4620      	mov	r0, r4
   d45f6:	f000 fa21 	bl	d4a3c <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d45fa:	2200      	movs	r2, #0
   d45fc:	21b8      	movs	r1, #184	; 0xb8
   d45fe:	4620      	mov	r0, r4
   d4600:	f000 f9e9 	bl	d49d6 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d4604:	2200      	movs	r2, #0
   d4606:	4611      	mov	r1, r2
   d4608:	4620      	mov	r0, r4
   d460a:	f000 f9e4 	bl	d49d6 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d460e:	4620      	mov	r0, r4
   d4610:	f000 f954 	bl	d48bc <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4614:	4629      	mov	r1, r5
   d4616:	4620      	mov	r0, r4
   d4618:	f000 fa10 	bl	d4a3c <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d461c:	2200      	movs	r2, #0
   d461e:	21be      	movs	r1, #190	; 0xbe
   d4620:	4620      	mov	r0, r4
   d4622:	f000 f9d8 	bl	d49d6 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d4626:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d462a:	2b04      	cmp	r3, #4
   d462c:	d109      	bne.n	d4642 <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d462e:	2200      	movs	r2, #0
   d4630:	4611      	mov	r1, r2
   d4632:	4620      	mov	r0, r4
   d4634:	f000 f9cf 	bl	d49d6 <_ZN7OneWire5writeEhh>
   d4638:	e003      	b.n	d4642 <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d463a:	2000      	movs	r0, #0
   d463c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d4640:	e094      	b.n	d476c <_ZN4DS184readEPh+0x1d8>
   d4642:	f104 051f 	add.w	r5, r4, #31
   d4646:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d464a:	4620      	mov	r0, r4
   d464c:	f000 f9e6 	bl	d4a1c <_ZN7OneWire4readEv>
   d4650:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d4654:	42ae      	cmp	r6, r5
   d4656:	d1f8      	bne.n	d464a <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d4658:	2108      	movs	r1, #8
   d465a:	f104 0020 	add.w	r0, r4, #32
   d465e:	f000 fa86 	bl	d4b6e <_ZN7OneWire4crc8EPhh>
   d4662:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d4666:	4283      	cmp	r3, r0
   d4668:	d004      	beq.n	d4674 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d466a:	2301      	movs	r3, #1
   d466c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4670:	2000      	movs	r0, #0
   d4672:	e07b      	b.n	d476c <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4674:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d4678:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d467c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4680:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d4684:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4686:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d4688:	d127      	bne.n	d46da <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d468a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d468e:	ee07 3a90 	vmov	s15, r3
   d4692:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4696:	08d2      	lsrs	r2, r2, #3
   d4698:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d469c:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d46a0:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d46a4:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d46a6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d46aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d46ae:	d045      	beq.n	d473c <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d46b0:	ee18 0a90 	vmov	r0, s17
   d46b4:	f003 f838 	bl	d7728 <__aeabi_f2d>
   d46b8:	4606      	mov	r6, r0
   d46ba:	ee18 0a10 	vmov	r0, s16
   d46be:	460f      	mov	r7, r1
   d46c0:	f003 f832 	bl	d7728 <__aeabi_f2d>
   d46c4:	2200      	movs	r2, #0
   d46c6:	4b2b      	ldr	r3, [pc, #172]	; (d4774 <_ZN4DS184readEPh+0x1e0>)
   d46c8:	f003 f882 	bl	d77d0 <__aeabi_dmul>
   d46cc:	4602      	mov	r2, r0
   d46ce:	460b      	mov	r3, r1
   d46d0:	4630      	mov	r0, r6
   d46d2:	4639      	mov	r1, r7
   d46d4:	f002 fec8 	bl	d7468 <__aeabi_dsub>
   d46d8:	e044      	b.n	d4764 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d46da:	2901      	cmp	r1, #1
   d46dc:	d003      	beq.n	d46e6 <_ZN4DS184readEPh+0x152>
   d46de:	d344      	bcc.n	d476a <_ZN4DS184readEPh+0x1d6>
   d46e0:	2903      	cmp	r1, #3
   d46e2:	d910      	bls.n	d4706 <_ZN4DS184readEPh+0x172>
   d46e4:	e041      	b.n	d476a <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d46e6:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d46ea:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d46ee:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d46f0:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d46f2:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d46f4:	d119      	bne.n	d472a <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d46f6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d46fa:	f023 030f 	bic.w	r3, r3, #15
   d46fe:	f1c2 020c 	rsb	r2, r2, #12
   d4702:	4413      	add	r3, r2
   d4704:	e010      	b.n	d4728 <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d4706:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d470a:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d470e:	d102      	bne.n	d4716 <_ZN4DS184readEPh+0x182>
   d4710:	f023 0307 	bic.w	r3, r3, #7
   d4714:	e008      	b.n	d4728 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d4716:	2a20      	cmp	r2, #32
   d4718:	d102      	bne.n	d4720 <_ZN4DS184readEPh+0x18c>
   d471a:	f023 0303 	bic.w	r3, r3, #3
   d471e:	e003      	b.n	d4728 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4720:	2a40      	cmp	r2, #64	; 0x40
   d4722:	d102      	bne.n	d472a <_ZN4DS184readEPh+0x196>
   d4724:	f023 0301 	bic.w	r3, r3, #1
   d4728:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d472a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d472e:	ee07 3a90 	vmov	s15, r3
   d4732:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d4736:	edc4 7a05 	vstr	s15, [r4, #20]
   d473a:	e016      	b.n	d476a <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d473c:	ee18 0a10 	vmov	r0, s16
   d4740:	f002 fff2 	bl	d7728 <__aeabi_f2d>
   d4744:	2200      	movs	r2, #0
   d4746:	4b0b      	ldr	r3, [pc, #44]	; (d4774 <_ZN4DS184readEPh+0x1e0>)
   d4748:	f003 f842 	bl	d77d0 <__aeabi_dmul>
   d474c:	4606      	mov	r6, r0
   d474e:	ee18 0a90 	vmov	r0, s17
   d4752:	460f      	mov	r7, r1
   d4754:	f002 ffe8 	bl	d7728 <__aeabi_f2d>
   d4758:	4602      	mov	r2, r0
   d475a:	460b      	mov	r3, r1
   d475c:	4630      	mov	r0, r6
   d475e:	4639      	mov	r1, r7
   d4760:	f002 fe84 	bl	d746c <__adddf3>
   d4764:	f003 fa46 	bl	d7bf4 <__aeabi_d2f>
   d4768:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d476a:	2001      	movs	r0, #1
}
   d476c:	ecbd 8b02 	vpop	{d8}
   d4770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4772:	bf00      	nop
   d4774:	3fa00000 	.word	0x3fa00000

000d4778 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d4778:	b538      	push	{r3, r4, r5, lr}
   d477a:	4604      	mov	r4, r0
  init();
   d477c:	f7ff feea 	bl	d4554 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d4780:	f100 0518 	add.w	r5, r0, #24
   d4784:	4629      	mov	r1, r5
   d4786:	f000 f977 	bl	d4a78 <_ZN7OneWire6searchEPh>
   d478a:	b930      	cbnz	r0, d479a <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d478c:	2301      	movs	r3, #1
   d478e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d4792:	4620      	mov	r0, r4
   d4794:	f000 f964 	bl	d4a60 <_ZN7OneWire12reset_searchEv>
    return false;
   d4798:	e010      	b.n	d47bc <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d479a:	2107      	movs	r1, #7
   d479c:	4628      	mov	r0, r5
   d479e:	f000 f9e6 	bl	d4b6e <_ZN7OneWire4crc8EPhh>
   d47a2:	7fe3      	ldrb	r3, [r4, #31]
   d47a4:	4283      	cmp	r3, r0
   d47a6:	d003      	beq.n	d47b0 <_ZN4DS184readEv+0x38>
    _crcError = true;
   d47a8:	2301      	movs	r3, #1
   d47aa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d47ae:	e005      	b.n	d47bc <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d47b0:	4629      	mov	r1, r5
   d47b2:	4620      	mov	r0, r4
}
   d47b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d47b8:	f7ff beec 	b.w	d4594 <_ZN4DS184readEPh>
}
   d47bc:	2000      	movs	r0, #0
   d47be:	bd38      	pop	{r3, r4, r5, pc}

000d47c0 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d47c0:	ed90 0a05 	vldr	s0, [r0, #20]
   d47c4:	4770      	bx	lr

000d47c6 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d47c6:	f000 bb1b 	b.w	d4e00 <HAL_Pin_Map>
	...

000d47cc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d47cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d47ce:	6803      	ldr	r3, [r0, #0]
   d47d0:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d47d2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d47d4:	d904      	bls.n	d47e0 <nrf_gpio_pin_port_decode+0x14>
   d47d6:	4a07      	ldr	r2, [pc, #28]	; (d47f4 <nrf_gpio_pin_port_decode+0x28>)
   d47d8:	2100      	movs	r1, #0
   d47da:	200a      	movs	r0, #10
   d47dc:	f000 fc80 	bl	d50e0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d47e0:	6823      	ldr	r3, [r4, #0]
   d47e2:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d47e4:	bf83      	ittte	hi
   d47e6:	f003 031f 	andhi.w	r3, r3, #31
   d47ea:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d47ec:	4802      	ldrhi	r0, [pc, #8]	; (d47f8 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d47ee:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d47f2:	bd10      	pop	{r4, pc}
   d47f4:	000d4dc1 	.word	0x000d4dc1
   d47f8:	50000300 	.word	0x50000300

000d47fc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d47fc:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47fe:	4b0b      	ldr	r3, [pc, #44]	; (d482c <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	0100      	lsls	r0, r0, #4
   d4804:	1819      	adds	r1, r3, r0
   d4806:	5c1a      	ldrb	r2, [r3, r0]
   d4808:	784b      	ldrb	r3, [r1, #1]
   d480a:	a802      	add	r0, sp, #8
   d480c:	f003 031f 	and.w	r3, r3, #31
   d4810:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4814:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4818:	f7ff ffd8 	bl	d47cc <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d481c:	9a01      	ldr	r2, [sp, #4]
   d481e:	2301      	movs	r3, #1
   d4820:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4822:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4826:	b003      	add	sp, #12
   d4828:	f85d fb04 	ldr.w	pc, [sp], #4
   d482c:	2003e264 	.word	0x2003e264

000d4830 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4830:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4832:	4b0b      	ldr	r3, [pc, #44]	; (d4860 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	0100      	lsls	r0, r0, #4
   d4838:	1819      	adds	r1, r3, r0
   d483a:	5c1a      	ldrb	r2, [r3, r0]
   d483c:	784b      	ldrb	r3, [r1, #1]
   d483e:	a802      	add	r0, sp, #8
   d4840:	f003 031f 	and.w	r3, r3, #31
   d4844:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4848:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d484c:	f7ff ffbe 	bl	d47cc <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4850:	9a01      	ldr	r2, [sp, #4]
   d4852:	2301      	movs	r3, #1
   d4854:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4856:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d485a:	b003      	add	sp, #12
   d485c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4860:	2003e264 	.word	0x2003e264

000d4864 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4864:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4866:	4b0f      	ldr	r3, [pc, #60]	; (d48a4 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	0100      	lsls	r0, r0, #4
   d486c:	181a      	adds	r2, r3, r0
   d486e:	5c1c      	ldrb	r4, [r3, r0]
   d4870:	7853      	ldrb	r3, [r2, #1]
   d4872:	a802      	add	r0, sp, #8
   d4874:	f003 031f 	and.w	r3, r3, #31
   d4878:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d487c:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4880:	f7ff ffa4 	bl	d47cc <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4884:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4888:	a802      	add	r0, sp, #8
   d488a:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d488e:	f7ff ff9d 	bl	d47cc <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4892:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d4896:	9800      	ldr	r0, [sp, #0]
   d4898:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d489c:	f000 0001 	and.w	r0, r0, #1
   d48a0:	b002      	add	sp, #8
   d48a2:	bd10      	pop	{r4, pc}
   d48a4:	2003e264 	.word	0x2003e264

000d48a8 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d48a8:	b538      	push	{r3, r4, r5, lr}
   d48aa:	4604      	mov	r4, r0
   d48ac:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d48ae:	4628      	mov	r0, r5
   d48b0:	2100      	movs	r1, #0
   d48b2:	f002 fc19 	bl	d70e8 <pinMode>
    _pin = pin;
   d48b6:	8025      	strh	r5, [r4, #0]
}
   d48b8:	4620      	mov	r0, r4
   d48ba:	bd38      	pop	{r3, r4, r5, pc}

000d48bc <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d48bc:	b538      	push	{r3, r4, r5, lr}
   d48be:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d48c0:	f001 f88c 	bl	d59dc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d48c4:	2100      	movs	r1, #0
   d48c6:	8828      	ldrh	r0, [r5, #0]
   d48c8:	f000 faaa 	bl	d4e20 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d48cc:	f001 f888 	bl	d59e0 <_Z10interruptsv>
   d48d0:	247d      	movs	r4, #125	; 0x7d
   d48d2:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d48d4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d48d8:	d02b      	beq.n	d4932 <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d48da:	2002      	movs	r0, #2
   d48dc:	f000 fa70 	bl	d4dc0 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d48e0:	8828      	ldrh	r0, [r5, #0]
   d48e2:	f7ff ffbf 	bl	d4864 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d48e6:	2800      	cmp	r0, #0
   d48e8:	d0f3      	beq.n	d48d2 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d48ea:	f001 f877 	bl	d59dc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d48ee:	8828      	ldrh	r0, [r5, #0]
   d48f0:	f7ff ff84 	bl	d47fc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d48f4:	2101      	movs	r1, #1
   d48f6:	8828      	ldrh	r0, [r5, #0]
   d48f8:	f000 fa92 	bl	d4e20 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d48fc:	f001 f870 	bl	d59e0 <_Z10interruptsv>
   d4900:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4904:	f000 fa5c 	bl	d4dc0 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4908:	f001 f868 	bl	d59dc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d490c:	2100      	movs	r1, #0
   d490e:	8828      	ldrh	r0, [r5, #0]
   d4910:	f000 fa86 	bl	d4e20 <HAL_Pin_Mode>
   d4914:	2046      	movs	r0, #70	; 0x46
   d4916:	f000 fa53 	bl	d4dc0 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d491a:	8828      	ldrh	r0, [r5, #0]
   d491c:	f7ff ffa2 	bl	d4864 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4920:	fab0 f480 	clz	r4, r0

    interrupts();
   d4924:	f001 f85c 	bl	d59e0 <_Z10interruptsv>
   d4928:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d492c:	0964      	lsrs	r4, r4, #5
   d492e:	f000 fa47 	bl	d4dc0 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d4932:	4620      	mov	r0, r4
   d4934:	bd38      	pop	{r3, r4, r5, pc}

000d4936 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d4936:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4938:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d493c:	4604      	mov	r4, r0
    if (v & 1) {
   d493e:	d013      	beq.n	d4968 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4940:	f001 f84c 	bl	d59dc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4944:	8820      	ldrh	r0, [r4, #0]
   d4946:	f7ff ff59 	bl	d47fc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d494a:	2101      	movs	r1, #1
   d494c:	8820      	ldrh	r0, [r4, #0]
   d494e:	f000 fa67 	bl	d4e20 <HAL_Pin_Mode>
   d4952:	200a      	movs	r0, #10
   d4954:	f000 fa34 	bl	d4dc0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4958:	8820      	ldrh	r0, [r4, #0]
   d495a:	2100      	movs	r1, #0
   d495c:	f000 fa60 	bl	d4e20 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4960:	f001 f83e 	bl	d59e0 <_Z10interruptsv>
   d4964:	2037      	movs	r0, #55	; 0x37
   d4966:	e012      	b.n	d498e <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4968:	f001 f838 	bl	d59dc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d496c:	8820      	ldrh	r0, [r4, #0]
   d496e:	f7ff ff45 	bl	d47fc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4972:	2101      	movs	r1, #1
   d4974:	8820      	ldrh	r0, [r4, #0]
   d4976:	f000 fa53 	bl	d4e20 <HAL_Pin_Mode>
   d497a:	2041      	movs	r0, #65	; 0x41
   d497c:	f000 fa20 	bl	d4dc0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4980:	8820      	ldrh	r0, [r4, #0]
   d4982:	4629      	mov	r1, r5
   d4984:	f000 fa4c 	bl	d4e20 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d4988:	f001 f82a 	bl	d59e0 <_Z10interruptsv>
   d498c:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d498e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4992:	f000 ba15 	b.w	d4dc0 <HAL_Delay_Microseconds>

000d4996 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d4996:	b510      	push	{r4, lr}
   d4998:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d499a:	f001 f81f 	bl	d59dc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d499e:	8820      	ldrh	r0, [r4, #0]
   d49a0:	f7ff ff2c 	bl	d47fc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d49a4:	2101      	movs	r1, #1
   d49a6:	8820      	ldrh	r0, [r4, #0]
   d49a8:	f000 fa3a 	bl	d4e20 <HAL_Pin_Mode>
   d49ac:	2003      	movs	r0, #3
   d49ae:	f000 fa07 	bl	d4dc0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d49b2:	2100      	movs	r1, #0
   d49b4:	8820      	ldrh	r0, [r4, #0]
   d49b6:	f000 fa33 	bl	d4e20 <HAL_Pin_Mode>
   d49ba:	200a      	movs	r0, #10
   d49bc:	f000 fa00 	bl	d4dc0 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d49c0:	8820      	ldrh	r0, [r4, #0]
   d49c2:	f7ff ff4f 	bl	d4864 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d49c6:	4604      	mov	r4, r0

    interrupts();
   d49c8:	f001 f80a 	bl	d59e0 <_Z10interruptsv>
   d49cc:	2035      	movs	r0, #53	; 0x35
   d49ce:	f000 f9f7 	bl	d4dc0 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d49d2:	4620      	mov	r0, r4
   d49d4:	bd10      	pop	{r4, pc}

000d49d6 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d49d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d49da:	4605      	mov	r5, r0
   d49dc:	4688      	mov	r8, r1
   d49de:	4617      	mov	r7, r2
   d49e0:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d49e2:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d49e4:	ea18 0f04 	tst.w	r8, r4
   d49e8:	bf14      	ite	ne
   d49ea:	2101      	movne	r1, #1
   d49ec:	2100      	moveq	r1, #0
   d49ee:	4628      	mov	r0, r5
   d49f0:	f7ff ffa1 	bl	d4936 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d49f4:	0064      	lsls	r4, r4, #1
   d49f6:	3e01      	subs	r6, #1
   d49f8:	b2e4      	uxtb	r4, r4
   d49fa:	d1f3      	bne.n	d49e4 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d49fc:	b167      	cbz	r7, d4a18 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d49fe:	f000 ffed 	bl	d59dc <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d4a02:	8828      	ldrh	r0, [r5, #0]
   d4a04:	f7ff ff14 	bl	d4830 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4a08:	8828      	ldrh	r0, [r5, #0]
   d4a0a:	2101      	movs	r1, #1
   d4a0c:	f000 fa08 	bl	d4e20 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d4a14:	f000 bfe4 	b.w	d59e0 <_Z10interruptsv>
   d4a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a1c <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d4a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a1e:	4607      	mov	r7, r0
   d4a20:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4a22:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4a24:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4a26:	4638      	mov	r0, r7
   d4a28:	f7ff ffb5 	bl	d4996 <_ZN7OneWire8read_bitEv>
   d4a2c:	b100      	cbz	r0, d4a30 <_ZN7OneWire4readEv+0x14>
   d4a2e:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4a30:	0064      	lsls	r4, r4, #1
   d4a32:	3e01      	subs	r6, #1
   d4a34:	b2e4      	uxtb	r4, r4
   d4a36:	d1f6      	bne.n	d4a26 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4a38:	4628      	mov	r0, r5
   d4a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a3c <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4a3c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d4a3e:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4a40:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d4a42:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4a44:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4a46:	f7ff ffc6 	bl	d49d6 <_ZN7OneWire5writeEhh>
   d4a4a:	1e65      	subs	r5, r4, #1
   d4a4c:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d4a4e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4a52:	2200      	movs	r2, #0
   d4a54:	4630      	mov	r0, r6
   d4a56:	f7ff ffbe 	bl	d49d6 <_ZN7OneWire5writeEhh>
   d4a5a:	42a5      	cmp	r5, r4
   d4a5c:	d1f7      	bne.n	d4a4e <_ZN7OneWire6selectEPKh+0x12>
}
   d4a5e:	bd70      	pop	{r4, r5, r6, pc}

000d4a60 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4a60:	2300      	movs	r3, #0
   d4a62:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4a64:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4a66:	72c3      	strb	r3, [r0, #11]
   d4a68:	f100 020a 	add.w	r2, r0, #10
   d4a6c:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4a6e:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d4a72:	4282      	cmp	r2, r0
   d4a74:	d1fb      	bne.n	d4a6e <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d4a76:	4770      	bx	lr

000d4a78 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4a7c:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4a7e:	4604      	mov	r4, r0
   d4a80:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4a82:	2d00      	cmp	r5, #0
   d4a84:	d15e      	bne.n	d4b44 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d4a86:	f7ff ff19 	bl	d48bc <_ZN7OneWire5resetEv>
   d4a8a:	b920      	cbnz	r0, d4a96 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4a8c:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4a8e:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4a90:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4a96:	462a      	mov	r2, r5
   d4a98:	21f0      	movs	r1, #240	; 0xf0
   d4a9a:	4620      	mov	r0, r4
   d4a9c:	f7ff ff9b 	bl	d49d6 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4aa0:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4aa2:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4aa4:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4aa6:	4620      	mov	r0, r4
   d4aa8:	f7ff ff75 	bl	d4996 <_ZN7OneWire8read_bitEv>
   d4aac:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d4aae:	4620      	mov	r0, r4
   d4ab0:	f7ff ff71 	bl	d4996 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4ab4:	f1b9 0f01 	cmp.w	r9, #1
   d4ab8:	d102      	bne.n	d4ac0 <_ZN7OneWire6searchEPh+0x48>
   d4aba:	2801      	cmp	r0, #1
   d4abc:	d11b      	bne.n	d4af6 <_ZN7OneWire6searchEPh+0x7e>
   d4abe:	e037      	b.n	d4b30 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d4ac0:	4581      	cmp	r9, r0
   d4ac2:	eb04 0305 	add.w	r3, r4, r5
   d4ac6:	d11e      	bne.n	d4b06 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4ac8:	7aa2      	ldrb	r2, [r4, #10]
   d4aca:	4297      	cmp	r7, r2
   d4acc:	d207      	bcs.n	d4ade <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d4ace:	789a      	ldrb	r2, [r3, #2]
   d4ad0:	4216      	tst	r6, r2
   d4ad2:	bf14      	ite	ne
   d4ad4:	f04f 0901 	movne.w	r9, #1
   d4ad8:	f04f 0900 	moveq.w	r9, #0
   d4adc:	e004      	b.n	d4ae8 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4ade:	bf0c      	ite	eq
   d4ae0:	f04f 0901 	moveq.w	r9, #1
   d4ae4:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4ae8:	f1b9 0f00 	cmp.w	r9, #0
   d4aec:	d103      	bne.n	d4af6 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d4aee:	2f08      	cmp	r7, #8
   d4af0:	d808      	bhi.n	d4b04 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d4af2:	72e7      	strb	r7, [r4, #11]
   d4af4:	e006      	b.n	d4b04 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d4af6:	1962      	adds	r2, r4, r5
   d4af8:	f04f 0901 	mov.w	r9, #1
   d4afc:	7893      	ldrb	r3, [r2, #2]
   d4afe:	4333      	orrs	r3, r6
   d4b00:	7093      	strb	r3, [r2, #2]
   d4b02:	e004      	b.n	d4b0e <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4b04:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4b06:	789a      	ldrb	r2, [r3, #2]
   d4b08:	ea22 0206 	bic.w	r2, r2, r6
   d4b0c:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4b0e:	4649      	mov	r1, r9
   d4b10:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d4b12:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d4b14:	f7ff ff0f 	bl	d4936 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4b18:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4b1c:	bf04      	itt	eq
   d4b1e:	3501      	addeq	r5, #1
   d4b20:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4b22:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4b26:	bf08      	it	eq
   d4b28:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4b2a:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4b2c:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4b2e:	d9ba      	bls.n	d4aa6 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4b30:	2f40      	cmp	r7, #64	; 0x40
   d4b32:	d907      	bls.n	d4b44 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4b34:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4b38:	f1ba 0f00 	cmp.w	sl, #0
   d4b3c:	d112      	bne.n	d4b64 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4b3e:	2301      	movs	r3, #1
   d4b40:	7323      	strb	r3, [r4, #12]
   d4b42:	e00f      	b.n	d4b64 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d4b44:	2000      	movs	r0, #0
   d4b46:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4b48:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4b4a:	72e0      	strb	r0, [r4, #11]
   d4b4c:	1c63      	adds	r3, r4, #1
   d4b4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d4b52:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d4b54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4b58:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4b5c:	42a3      	cmp	r3, r4
   d4b5e:	d1f9      	bne.n	d4b54 <_ZN7OneWire6searchEPh+0xdc>
   d4b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d4b64:	78a3      	ldrb	r3, [r4, #2]
   d4b66:	2b00      	cmp	r3, #0
   d4b68:	d0ec      	beq.n	d4b44 <_ZN7OneWire6searchEPh+0xcc>
   d4b6a:	2001      	movs	r0, #1
   d4b6c:	e7ee      	b.n	d4b4c <_ZN7OneWire6searchEPh+0xd4>

000d4b6e <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4b6e:	b530      	push	{r4, r5, lr}
   d4b70:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d4b72:	2000      	movs	r0, #0

    while (len--) {
   d4b74:	3901      	subs	r1, #1
   d4b76:	b2c9      	uxtb	r1, r1
   d4b78:	29ff      	cmp	r1, #255	; 0xff
   d4b7a:	d013      	beq.n	d4ba4 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4b80:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4b82:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d4b86:	f013 0f01 	tst.w	r3, #1
   d4b8a:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d4b8e:	bf1c      	itt	ne
   d4b90:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4b94:	b2d8      	uxtbne	r0, r3
   d4b96:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4b98:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d4b9c:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4ba0:	d1ef      	bne.n	d4b82 <_ZN7OneWire4crc8EPhh+0x14>
   d4ba2:	e7e7      	b.n	d4b74 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d4ba4:	bd30      	pop	{r4, r5, pc}
	...

000d4ba8 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4ba8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4baa:	f000 f929 	bl	d4e00 <HAL_Pin_Map>
   d4bae:	4b01      	ldr	r3, [pc, #4]	; (d4bb4 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4bb0:	6018      	str	r0, [r3, #0]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	2003e264 	.word	0x2003e264

000d4bb8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d4bb8:	b510      	push	{r4, lr}
   d4bba:	4b06      	ldr	r3, [pc, #24]	; (d4bd4 <_ZN3UDPD1Ev+0x1c>)
   d4bbc:	6003      	str	r3, [r0, #0]
   d4bbe:	3364      	adds	r3, #100	; 0x64
   d4bc0:	4604      	mov	r4, r0
   d4bc2:	6103      	str	r3, [r0, #16]
   d4bc4:	f001 fddb 	bl	d677e <_ZN3UDP4stopEv>
   d4bc8:	4620      	mov	r0, r4
   d4bca:	f001 ff9d 	bl	d6b08 <_ZN3UDP13releaseBufferEv>
   d4bce:	4620      	mov	r0, r4
   d4bd0:	bd10      	pop	{r4, pc}
   d4bd2:	bf00      	nop
   d4bd4:	000d8a6c 	.word	0x000d8a6c

000d4bd8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4bd8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4bda:	6984      	ldr	r4, [r0, #24]
   d4bdc:	4b0a      	ldr	r3, [pc, #40]	; (d4c08 <_ZN9TCPClientD1Ev+0x30>)
   d4bde:	6003      	str	r3, [r0, #0]
   d4be0:	4605      	mov	r5, r0
   d4be2:	b17c      	cbz	r4, d4c04 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4be4:	6863      	ldr	r3, [r4, #4]
   d4be6:	3b01      	subs	r3, #1
   d4be8:	6063      	str	r3, [r4, #4]
   d4bea:	b95b      	cbnz	r3, d4c04 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4bec:	6823      	ldr	r3, [r4, #0]
   d4bee:	4620      	mov	r0, r4
   d4bf0:	689b      	ldr	r3, [r3, #8]
   d4bf2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4bf4:	68a3      	ldr	r3, [r4, #8]
   d4bf6:	3b01      	subs	r3, #1
   d4bf8:	60a3      	str	r3, [r4, #8]
   d4bfa:	b91b      	cbnz	r3, d4c04 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4bfc:	6823      	ldr	r3, [r4, #0]
   d4bfe:	4620      	mov	r0, r4
   d4c00:	68db      	ldr	r3, [r3, #12]
   d4c02:	4798      	blx	r3
   d4c04:	4628      	mov	r0, r5
   d4c06:	bd38      	pop	{r3, r4, r5, pc}
   d4c08:	000d89e0 	.word	0x000d89e0

000d4c0c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c0c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c0e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c10:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c12:	b113      	cbz	r3, d4c1a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c14:	2203      	movs	r2, #3
   d4c16:	4601      	mov	r1, r0
   d4c18:	4798      	blx	r3
    }
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	bd10      	pop	{r4, pc}

000d4c1e <_ZN3UDPD0Ev>:
   d4c1e:	b510      	push	{r4, lr}
   d4c20:	4604      	mov	r4, r0
   d4c22:	f7ff ffc9 	bl	d4bb8 <_ZN3UDPD1Ev>
   d4c26:	4620      	mov	r0, r4
   d4c28:	214c      	movs	r1, #76	; 0x4c
   d4c2a:	f002 facc 	bl	d71c6 <_ZdlPvj>
   d4c2e:	4620      	mov	r0, r4
   d4c30:	bd10      	pop	{r4, pc}

000d4c32 <_ZN9TCPClientD0Ev>:
   d4c32:	b510      	push	{r4, lr}
   d4c34:	4604      	mov	r4, r0
   d4c36:	f7ff ffcf 	bl	d4bd8 <_ZN9TCPClientD1Ev>
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	211c      	movs	r1, #28
   d4c3e:	f002 fac2 	bl	d71c6 <_ZdlPvj>
   d4c42:	4620      	mov	r0, r4
   d4c44:	bd10      	pop	{r4, pc}
	...

000d4c48 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}

UbiProtocol* builderParticle() {
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
  return particleInstance;
   d4c48:	b570      	push	{r4, r5, r6, lr}
#ifndef _UbiHttp_H_
#define _UbiHttp_H_

#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d4c4a:	4d10      	ldr	r5, [pc, #64]	; (d4c8c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d4c4c:	4c10      	ldr	r4, [pc, #64]	; (d4c90 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d4c4e:	4e11      	ldr	r6, [pc, #68]	; (d4c94 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d4c50:	f000 f8d6 	bl	d4e00 <HAL_Pin_Map>
   d4c54:	4628      	mov	r0, r5
   d4c56:	f001 fc61 	bl	d651c <_ZN9TCPClientC1Ev>
   d4c5a:	4628      	mov	r0, r5
#ifndef _UbiTcp_H_
#define _UbiTcp_H_

#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d4c5c:	4d0e      	ldr	r5, [pc, #56]	; (d4c98 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d4c5e:	4622      	mov	r2, r4
   d4c60:	4631      	mov	r1, r6
   d4c62:	f002 faab 	bl	d71bc <__aeabi_atexit>
   d4c66:	4628      	mov	r0, r5
   d4c68:	f001 fc58 	bl	d651c <_ZN9TCPClientC1Ev>
   d4c6c:	4628      	mov	r0, r5
#define _UbiUdp_H_

#include "Particle.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d4c6e:	4d0b      	ldr	r5, [pc, #44]	; (d4c9c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x54>)
   d4c70:	4622      	mov	r2, r4
   d4c72:	4631      	mov	r1, r6
   d4c74:	f002 faa2 	bl	d71bc <__aeabi_atexit>
   d4c78:	4628      	mov	r0, r5
   d4c7a:	f001 ff27 	bl	d6acc <_ZN3UDPC1Ev>
   d4c7e:	4622      	mov	r2, r4
   d4c80:	4628      	mov	r0, r5
   d4c82:	4907      	ldr	r1, [pc, #28]	; (d4ca0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x58>)
   d4c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4c88:	f002 ba98 	b.w	d71bc <__aeabi_atexit>
   d4c8c:	2003e284 	.word	0x2003e284
   d4c90:	2003e1ec 	.word	0x2003e1ec
   d4c94:	000d4bd9 	.word	0x000d4bd9
   d4c98:	2003e268 	.word	0x2003e268
   d4c9c:	2003e2a0 	.word	0x2003e2a0
   d4ca0:	000d4bb9 	.word	0x000d4bb9

000d4ca4 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	4c06      	ldr	r4, [pc, #24]	; (d4cc0 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d4ca8:	f000 f8aa 	bl	d4e00 <HAL_Pin_Map>
   d4cac:	4620      	mov	r0, r4
   d4cae:	f001 fc35 	bl	d651c <_ZN9TCPClientC1Ev>
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	4a03      	ldr	r2, [pc, #12]	; (d4cc4 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d4cb6:	4904      	ldr	r1, [pc, #16]	; (d4cc8 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x24>)
   d4cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4cbc:	f002 ba7e 	b.w	d71bc <__aeabi_atexit>
   d4cc0:	2003e2ec 	.word	0x2003e2ec
   d4cc4:	2003e1ec 	.word	0x2003e1ec
   d4cc8:	000d4bd9 	.word	0x000d4bd9

000d4ccc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ccc:	2200      	movs	r2, #0
   d4cce:	4611      	mov	r1, r2
   d4cd0:	6840      	ldr	r0, [r0, #4]
   d4cd2:	f000 baa9 	b.w	d5228 <network_ready>
	...

000d4cd8 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv>:

  if (meshMap.find(6) != meshMap.end()) {
    strcmp(meshMap[6], " ") != 0 ? dots->dotTimestampMillis = atoll(meshMap[6])
                                 : dots->dotTimestampMillis = NULL;
  }
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	f000 f891 	bl	d4e00 <HAL_Pin_Map>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4cde:	f000 f877 	bl	d4dd0 <HAL_Timer_Get_Milli_Seconds>
typedef std::map<uint8_t, char*> meshMap;
static IotProtocol iotProtocolMesh = UBI_UDP;
static char* _tokenMesh;
static bool _debugMesh = false;
static int _throttlingTime = 20000;
static unsigned long time_now = millis();
   d4ce2:	4b01      	ldr	r3, [pc, #4]	; (d4ce8 <_GLOBAL__sub_I__ZN7UbiMesh11isThrottledEv+0x10>)
   d4ce4:	6018      	str	r0, [r3, #0]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	2003e308 	.word	0x2003e308

000d4cec <_GLOBAL__sub_I__ZN11UbiParticleC2EPKciS1_S1_>:
   d4cec:	f000 b888 	b.w	d4e00 <HAL_Pin_Map>

000d4cf0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
   d4cf0:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0xc>)
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	701a      	strb	r2, [r3, #0]
   d4cf6:	f000 b883 	b.w	d4e00 <HAL_Pin_Map>
   d4cfa:	bf00      	nop
   d4cfc:	2003e30c 	.word	0x2003e30c

000d4d00 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:

/**
 * Makes available debug traces
 */

   d4d00:	b510      	push	{r4, lr}
   d4d02:	4c06      	ldr	r4, [pc, #24]	; (d4d1c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d4d04:	f000 f87c 	bl	d4e00 <HAL_Pin_Map>
   d4d08:	4620      	mov	r0, r4
   d4d0a:	f001 fc07 	bl	d651c <_ZN9TCPClientC1Ev>
   d4d0e:	4620      	mov	r0, r4
   d4d10:	4a03      	ldr	r2, [pc, #12]	; (d4d20 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d4d12:	4904      	ldr	r1, [pc, #16]	; (d4d24 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x24>)
   d4d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d18:	f002 ba50 	b.w	d71bc <__aeabi_atexit>
   d4d1c:	2003e310 	.word	0x2003e310
   d4d20:	2003e1ec 	.word	0x2003e1ec
   d4d24:	000d4bd9 	.word	0x000d4bd9

000d4d28 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
          : IPAddress(ip);
  return serverIpAddress;
#endif

  return serverIpAddress;
}
   d4d28:	b510      	push	{r4, lr}
   d4d2a:	4c06      	ldr	r4, [pc, #24]	; (d4d44 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d4d2c:	f000 f868 	bl	d4e00 <HAL_Pin_Map>
   d4d30:	4620      	mov	r0, r4
   d4d32:	f001 fecb 	bl	d6acc <_ZN3UDPC1Ev>
   d4d36:	4620      	mov	r0, r4
   d4d38:	4a03      	ldr	r2, [pc, #12]	; (d4d48 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d4d3a:	4904      	ldr	r1, [pc, #16]	; (d4d4c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x24>)
   d4d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d40:	f002 ba3c 	b.w	d71bc <__aeabi_atexit>
   d4d44:	2003e32c 	.word	0x2003e32c
   d4d48:	2003e1ec 	.word	0x2003e1ec
   d4d4c:	000d4bb9 	.word	0x000d4bb9

000d4d50 <_GLOBAL__sub_I__ZN7UbidotsC2EPc11IotProtocol>:
        sprintf(context_result, "%s", context_result);
        _current_context = 0;
      }
    }
  }
   d4d50:	b508      	push	{r3, lr}
   d4d52:	f000 f855 	bl	d4e00 <HAL_Pin_Map>
   d4d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4d5a:	f000 b839 	b.w	d4dd0 <HAL_Timer_Get_Milli_Seconds>
	...

000d4d60 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <os_thread_is_current+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	689b      	ldr	r3, [r3, #8]
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030248 	.word	0x00030248

000d4d70 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <os_thread_join+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	691b      	ldr	r3, [r3, #16]
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030248 	.word	0x00030248

000d4d80 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <os_thread_cleanup+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	695b      	ldr	r3, [r3, #20]
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	00030248 	.word	0x00030248

000d4d90 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <os_mutex_create+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	00030248 	.word	0x00030248

000d4da0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <os_mutex_recursive_create+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	00030248 	.word	0x00030248

000d4db0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <HAL_RNG_GetRandomNumber+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	685b      	ldr	r3, [r3, #4]
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	00030218 	.word	0x00030218

000d4dc0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <HAL_Delay_Microseconds+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	68db      	ldr	r3, [r3, #12]
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	00030218 	.word	0x00030218

000d4dd0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	695b      	ldr	r3, [r3, #20]
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	00030218 	.word	0x00030218

000d4de0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <HAL_RTC_Get_UnixTime+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	69db      	ldr	r3, [r3, #28]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	00030218 	.word	0x00030218

000d4df0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <HAL_RTC_Time_Is_Valid+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	00030218 	.word	0x00030218

000d4e00 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <HAL_Pin_Map+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	681b      	ldr	r3, [r3, #0]
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	0003022c 	.word	0x0003022c

000d4e10 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <HAL_Validate_Pin_Function+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	685b      	ldr	r3, [r3, #4]
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	0003022c 	.word	0x0003022c

000d4e20 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <HAL_Pin_Mode+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	689b      	ldr	r3, [r3, #8]
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	0003022c 	.word	0x0003022c

000d4e30 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <HAL_Interrupts_Enable_All+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	6a1b      	ldr	r3, [r3, #32]
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	0003022c 	.word	0x0003022c

000d4e40 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4e40:	b508      	push	{r3, lr}
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <HAL_Interrupts_Disable_All+0xc>)
   d4e44:	681b      	ldr	r3, [r3, #0]
   d4e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	bd08      	pop	{r3, pc}
   d4e4c:	0003022c 	.word	0x0003022c

000d4e50 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <HAL_ADC_Read+0xc>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e58:	9301      	str	r3, [sp, #4]
   d4e5a:	bd08      	pop	{r3, pc}
   d4e5c:	0003022c 	.word	0x0003022c

000d4e60 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <HAL_I2C_Write_Data+0xc>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	6a1b      	ldr	r3, [r3, #32]
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	bd08      	pop	{r3, pc}
   d4e6c:	00030228 	.word	0x00030228

000d4e70 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <HAL_I2C_Available_Data+0xc>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e78:	9301      	str	r3, [sp, #4]
   d4e7a:	bd08      	pop	{r3, pc}
   d4e7c:	00030228 	.word	0x00030228

000d4e80 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e80:	b508      	push	{r3, lr}
   d4e82:	4b02      	ldr	r3, [pc, #8]	; (d4e8c <HAL_I2C_Read_Data+0xc>)
   d4e84:	681b      	ldr	r3, [r3, #0]
   d4e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e88:	9301      	str	r3, [sp, #4]
   d4e8a:	bd08      	pop	{r3, pc}
   d4e8c:	00030228 	.word	0x00030228

000d4e90 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <HAL_I2C_Peek_Data+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	00030228 	.word	0x00030228

000d4ea0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <HAL_I2C_Flush_Data+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	00030228 	.word	0x00030228

000d4eb0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <HAL_I2C_Is_Enabled+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	00030228 	.word	0x00030228

000d4ec0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <HAL_I2C_Init+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	00030228 	.word	0x00030228

000d4ed0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <if_index_to_name+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	695b      	ldr	r3, [r3, #20]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	0003026c 	.word	0x0003026c

000d4ee0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <inet_inet_ntop+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	695b      	ldr	r3, [r3, #20]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030264 	.word	0x00030264

000d4ef0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <inet_htonl+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	6a1b      	ldr	r3, [r3, #32]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030264 	.word	0x00030264

000d4f00 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <inet_ntohs+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030264 	.word	0x00030264

000d4f10 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <inet_htons+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	00030264 	.word	0x00030264

000d4f20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <netdb_freeaddrinfo+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	689b      	ldr	r3, [r3, #8]
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030268 	.word	0x00030268

000d4f30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <netdb_getaddrinfo+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	68db      	ldr	r3, [r3, #12]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030268 	.word	0x00030268

000d4f40 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <sock_bind+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	685b      	ldr	r3, [r3, #4]
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030238 	.word	0x00030238

000d4f50 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <sock_setsockopt+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	699b      	ldr	r3, [r3, #24]
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030238 	.word	0x00030238

000d4f60 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <sock_close+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	69db      	ldr	r3, [r3, #28]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030238 	.word	0x00030238

000d4f70 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <sock_connect+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	6a1b      	ldr	r3, [r3, #32]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	00030238 	.word	0x00030238

000d4f80 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <sock_recv+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030238 	.word	0x00030238

000d4f90 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <sock_recvfrom+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030238 	.word	0x00030238

000d4fa0 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <sock_send+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030238 	.word	0x00030238

000d4fb0 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <sock_sendto+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	00030238 	.word	0x00030238

000d4fc0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <sock_socket+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030238 	.word	0x00030238

000d4fd0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <HAL_SPI_Init+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	69db      	ldr	r3, [r3, #28]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030230 	.word	0x00030230

000d4fe0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <HAL_SPI_Is_Enabled+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6a1b      	ldr	r3, [r3, #32]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030230 	.word	0x00030230

000d4ff0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <HAL_USART_Init+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	681b      	ldr	r3, [r3, #0]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	0003023c 	.word	0x0003023c

000d5000 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <HAL_USART_Write_Data+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	68db      	ldr	r3, [r3, #12]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	0003023c 	.word	0x0003023c

000d5010 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <HAL_USART_Available_Data+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	691b      	ldr	r3, [r3, #16]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	0003023c 	.word	0x0003023c

000d5020 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <HAL_USART_Read_Data+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	695b      	ldr	r3, [r3, #20]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	0003023c 	.word	0x0003023c

000d5030 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <HAL_USART_Peek_Data+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	699b      	ldr	r3, [r3, #24]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	0003023c 	.word	0x0003023c

000d5040 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <HAL_USART_Flush_Data+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	69db      	ldr	r3, [r3, #28]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	0003023c 	.word	0x0003023c

000d5050 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <HAL_USART_Is_Enabled+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	6a1b      	ldr	r3, [r3, #32]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	0003023c 	.word	0x0003023c

000d5060 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <HAL_USART_Available_Data_For_Write+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	0003023c 	.word	0x0003023c

000d5070 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <HAL_USB_USART_Init+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	681b      	ldr	r3, [r3, #0]
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	0003024c 	.word	0x0003024c

000d5080 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <HAL_USB_USART_Available_Data+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	691b      	ldr	r3, [r3, #16]
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	0003024c 	.word	0x0003024c

000d5090 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	695b      	ldr	r3, [r3, #20]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	0003024c 	.word	0x0003024c

000d50a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <HAL_USB_USART_Receive_Data+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	699b      	ldr	r3, [r3, #24]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	0003024c 	.word	0x0003024c

000d50b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <HAL_USB_USART_Send_Data+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	69db      	ldr	r3, [r3, #28]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	0003024c 	.word	0x0003024c

000d50c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <HAL_USB_USART_Flush_Data+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	6a1b      	ldr	r3, [r3, #32]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	0003024c 	.word	0x0003024c

000d50d0 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <wlan_connected_info+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	00030274 	.word	0x00030274

000d50e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <panic_+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	00030260 	.word	0x00030260

000d50f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <log_message+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	00030260 	.word	0x00030260

000d5100 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <system_mode+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	681b      	ldr	r3, [r3, #0]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030220 	.word	0x00030220

000d5110 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <set_system_mode+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	685b      	ldr	r3, [r3, #4]
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030220 	.word	0x00030220

000d5120 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <system_delay_ms+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	695b      	ldr	r3, [r3, #20]
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030220 	.word	0x00030220

000d5130 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <application_thread_current+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030220 	.word	0x00030220

000d5140 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <application_thread_invoke+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030220 	.word	0x00030220

000d5150 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <system_thread_get_state+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030220 	.word	0x00030220

000d5160 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b03      	ldr	r3, [pc, #12]	; (d5170 <system_ctrl_set_app_request_handler+0x10>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d516a:	9301      	str	r3, [sp, #4]
   d516c:	bd08      	pop	{r3, pc}
   d516e:	0000      	.short	0x0000
   d5170:	00030220 	.word	0x00030220

000d5174 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b03      	ldr	r3, [pc, #12]	; (d5184 <system_ctrl_set_result+0x10>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d517e:	9301      	str	r3, [sp, #4]
   d5180:	bd08      	pop	{r3, pc}
   d5182:	0000      	.short	0x0000
   d5184:	00030220 	.word	0x00030220

000d5188 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <spark_variable+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	681b      	ldr	r3, [r3, #0]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	00030244 	.word	0x00030244

000d5198 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <spark_function+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	685b      	ldr	r3, [r3, #4]
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	00030244 	.word	0x00030244

000d51a8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <spark_process+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	689b      	ldr	r3, [r3, #8]
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	00030244 	.word	0x00030244

000d51b8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <spark_cloud_flag_connected+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	695b      	ldr	r3, [r3, #20]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	00030244 	.word	0x00030244

000d51c8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <spark_send_event+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	6a1b      	ldr	r3, [r3, #32]
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	00030244 	.word	0x00030244

000d51d8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <spark_sync_time_pending+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	00030244 	.word	0x00030244

000d51e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	00030244 	.word	0x00030244

000d51f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <network_connect+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	685b      	ldr	r3, [r3, #4]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	00030240 	.word	0x00030240

000d5208 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <network_connecting+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	689b      	ldr	r3, [r3, #8]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	00030240 	.word	0x00030240

000d5218 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <network_disconnect+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	68db      	ldr	r3, [r3, #12]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	00030240 	.word	0x00030240

000d5228 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <network_ready+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	691b      	ldr	r3, [r3, #16]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030240 	.word	0x00030240

000d5238 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <network_on+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	695b      	ldr	r3, [r3, #20]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030240 	.word	0x00030240

000d5248 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <network_off+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	699b      	ldr	r3, [r3, #24]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030240 	.word	0x00030240

000d5258 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <network_listen+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	69db      	ldr	r3, [r3, #28]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030240 	.word	0x00030240

000d5268 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <network_listening+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	6a1b      	ldr	r3, [r3, #32]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030240 	.word	0x00030240

000d5278 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <network_set_listen_timeout+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030240 	.word	0x00030240

000d5288 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <network_get_listen_timeout+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030240 	.word	0x00030240

000d5298 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <malloc+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	681b      	ldr	r3, [r3, #0]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	0003021c 	.word	0x0003021c

000d52a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <free+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	685b      	ldr	r3, [r3, #4]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	0003021c 	.word	0x0003021c

000d52b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <realloc+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	689b      	ldr	r3, [r3, #8]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	0003021c 	.word	0x0003021c

000d52c8 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <siscanf+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	699b      	ldr	r3, [r3, #24]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	0003021c 	.word	0x0003021c

000d52d8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <snprintf+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	69db      	ldr	r3, [r3, #28]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	0003021c 	.word	0x0003021c

000d52e8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <abort+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	0003021c 	.word	0x0003021c

000d52f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <_malloc_r+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	0003021c 	.word	0x0003021c

000d5308 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <__errno+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	0003021c 	.word	0x0003021c

000d5318 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5318:	2100      	movs	r1, #0
   d531a:	f7ff bf01 	b.w	d5120 <system_delay_ms>

000d531e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d531e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5320:	6883      	ldr	r3, [r0, #8]
   d5322:	4604      	mov	r4, r0
   d5324:	b90b      	cbnz	r3, d532a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5326:	f001 ff50 	bl	d71ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d532a:	68c3      	ldr	r3, [r0, #12]
   d532c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d532e:	68a3      	ldr	r3, [r4, #8]
   d5330:	b11b      	cbz	r3, d533a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5332:	2203      	movs	r2, #3
   d5334:	4621      	mov	r1, r4
   d5336:	4620      	mov	r0, r4
   d5338:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d533a:	4620      	mov	r0, r4
   d533c:	2110      	movs	r1, #16
}
   d533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5342:	f001 bf40 	b.w	d71c6 <_ZdlPvj>

000d5346 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5346:	4770      	bx	lr

000d5348 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5348:	2000      	movs	r0, #0
   d534a:	4770      	bx	lr

000d534c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d534c:	b510      	push	{r4, lr}
   d534e:	2110      	movs	r1, #16
   d5350:	4604      	mov	r4, r0
   d5352:	f001 ff38 	bl	d71c6 <_ZdlPvj>
   d5356:	4620      	mov	r0, r4
   d5358:	bd10      	pop	{r4, pc}

000d535a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d535a:	b508      	push	{r3, lr}
      { delete this; }
   d535c:	b108      	cbz	r0, d5362 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d535e:	f7ff fff5 	bl	d534c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5362:	bd08      	pop	{r3, pc}

000d5364 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5364:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5366:	68c4      	ldr	r4, [r0, #12]
   d5368:	b1ec      	cbz	r4, d53a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d536a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d536c:	2b02      	cmp	r3, #2
   d536e:	d102      	bne.n	d5376 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5370:	68e0      	ldr	r0, [r4, #12]
   d5372:	f7ff ff99 	bl	d52a8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5376:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5378:	b135      	cbz	r5, d5388 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d537a:	4628      	mov	r0, r5
   d537c:	f7ff fc46 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>
   d5380:	2110      	movs	r1, #16
   d5382:	4628      	mov	r0, r5
   d5384:	f001 ff1f 	bl	d71c6 <_ZdlPvj>
   d5388:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d538a:	b135      	cbz	r5, d539a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d538c:	4628      	mov	r0, r5
   d538e:	f7ff fc3d 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>
   d5392:	2110      	movs	r1, #16
   d5394:	4628      	mov	r0, r5
   d5396:	f001 ff16 	bl	d71c6 <_ZdlPvj>
   d539a:	4620      	mov	r0, r4
   d539c:	2114      	movs	r1, #20
   d539e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d53a2:	f001 bf10 	b.w	d71c6 <_ZdlPvj>
   d53a6:	bd38      	pop	{r3, r4, r5, pc}

000d53a8 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d53a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d53aa:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d53ac:	4668      	mov	r0, sp
   d53ae:	f000 fdd9 	bl	d5f64 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d53b2:	68a3      	ldr	r3, [r4, #8]
   d53b4:	b90b      	cbnz	r3, d53ba <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d53b6:	f001 ff08 	bl	d71ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d53ba:	68e3      	ldr	r3, [r4, #12]
   d53bc:	4669      	mov	r1, sp
   d53be:	4620      	mov	r0, r4
   d53c0:	4798      	blx	r3
   d53c2:	4604      	mov	r4, r0
   d53c4:	4668      	mov	r0, sp
   d53c6:	f000 fd86 	bl	d5ed6 <_ZN6StringD1Ev>
}
   d53ca:	4620      	mov	r0, r4
   d53cc:	b004      	add	sp, #16
   d53ce:	bd10      	pop	{r4, pc}

000d53d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d53d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d53d2:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d53d4:	b085      	sub	sp, #20
   d53d6:	4607      	mov	r7, r0
   d53d8:	460e      	mov	r6, r1
   d53da:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d53dc:	2100      	movs	r1, #0
   d53de:	4622      	mov	r2, r4
   d53e0:	4668      	mov	r0, sp
   d53e2:	f002 fd68 	bl	d7eb6 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d53e6:	2200      	movs	r2, #0
   d53e8:	4669      	mov	r1, sp
   d53ea:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d53ec:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d53f0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d53f2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d53f4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d53f6:	f7ff fecf 	bl	d5198 <spark_function>
}
   d53fa:	b005      	add	sp, #20
   d53fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53fe <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d53fe:	b513      	push	{r0, r1, r4, lr}
   d5400:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5402:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5406:	2300      	movs	r3, #0
   d5408:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d540a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d540c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d540e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5410:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5412:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5414:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5416:	f7fe ff0a 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d541a:	4620      	mov	r0, r4
   d541c:	b002      	add	sp, #8
   d541e:	bd10      	pop	{r4, pc}

000d5420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5420:	680b      	ldr	r3, [r1, #0]
   d5422:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5424:	b113      	cbz	r3, d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5426:	685a      	ldr	r2, [r3, #4]
   d5428:	3201      	adds	r2, #1
   d542a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d542c:	4770      	bx	lr

000d542e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d542e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5430:	460c      	mov	r4, r1
   d5432:	ad02      	add	r5, sp, #8
   d5434:	f854 3b04 	ldr.w	r3, [r4], #4
   d5438:	f845 3d08 	str.w	r3, [r5, #-8]!
   d543c:	4606      	mov	r6, r0
   d543e:	460f      	mov	r7, r1
   d5440:	a801      	add	r0, sp, #4
   d5442:	4621      	mov	r1, r4
   d5444:	f7ff ffec 	bl	d5420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5448:	4629      	mov	r1, r5
   d544a:	4630      	mov	r0, r6
   d544c:	f7ff ffd7 	bl	d53fe <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5450:	a801      	add	r0, sp, #4
   d5452:	f7fe feec 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5456:	4620      	mov	r0, r4
   d5458:	f7fe fee9 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d545c:	4638      	mov	r0, r7
   d545e:	2108      	movs	r1, #8
   d5460:	f001 feb1 	bl	d71c6 <_ZdlPvj>
        return p;
    }
   d5464:	4630      	mov	r0, r6
   d5466:	b003      	add	sp, #12
   d5468:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d546a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d546a:	b513      	push	{r0, r1, r4, lr}
   d546c:	460b      	mov	r3, r1
   d546e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5470:	c803      	ldmia	r0, {r0, r1}
   d5472:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5476:	e893 0003 	ldmia.w	r3, {r0, r1}
   d547a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d547e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5482:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5486:	b002      	add	sp, #8
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d548a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d548c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d548e:	b90a      	cbnz	r2, d5494 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5490:	f001 fe9b 	bl	d71ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5494:	68c3      	ldr	r3, [r0, #12]
    }
   d5496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d549a:	4718      	bx	r3

000d549c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d549c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d549e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54a0:	f100 0110 	add.w	r1, r0, #16
   d54a4:	f7ff fff1 	bl	d548a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d54a8:	bd08      	pop	{r3, pc}

000d54aa <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54aa:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d54ac:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54ae:	b90a      	cbnz	r2, d54b4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d54b0:	f001 fe8b 	bl	d71ca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54b4:	68c3      	ldr	r3, [r0, #12]
    }
   d54b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54ba:	4718      	bx	r3

000d54bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54bc:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54be:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54c0:	f100 0110 	add.w	r1, r0, #16
   d54c4:	f7ff fff1 	bl	d54aa <_ZNKSt8functionIFvRKbEEclES1_>
   d54c8:	bd08      	pop	{r3, pc}

000d54ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54ca:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54cc:	2300      	movs	r3, #0
   d54ce:	6083      	str	r3, [r0, #8]
   d54d0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54d2:	4604      	mov	r4, r0
   d54d4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54d6:	b12b      	cbz	r3, d54e4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54d8:	2202      	movs	r2, #2
   d54da:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54dc:	68eb      	ldr	r3, [r5, #12]
   d54de:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d54e0:	68ab      	ldr	r3, [r5, #8]
   d54e2:	60a3      	str	r3, [r4, #8]
	}
    }
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd38      	pop	{r3, r4, r5, pc}

000d54e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d54e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d54ec:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d54f0:	b086      	sub	sp, #24
   d54f2:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54f4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d54f8:	808b      	strh	r3, [r1, #4]
   d54fa:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54fc:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d54fe:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d5502:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5504:	f04f 0002 	mov.w	r0, #2
   d5508:	e8d4 1f4f 	ldrexb	r1, [r4]
   d550c:	4299      	cmp	r1, r3
   d550e:	d103      	bne.n	d5518 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5510:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5514:	2d00      	cmp	r5, #0
   d5516:	d1f7      	bne.n	d5508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5518:	d002      	beq.n	d5520 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d551a:	f88d 1000 	strb.w	r1, [sp]
   d551e:	e06b      	b.n	d55f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5520:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5524:	bf1e      	ittt	ne
   d5526:	60e7      	strne	r7, [r4, #12]
   d5528:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d552a:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d552c:	2301      	movs	r3, #1
   d552e:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5532:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5534:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5536:	f104 0308 	add.w	r3, r4, #8
   d553a:	f3bf 8f5f 	dmb	sy
   d553e:	e853 6f00 	ldrex	r6, [r3]
   d5542:	e843 0200 	strex	r2, r0, [r3]
   d5546:	2a00      	cmp	r2, #0
   d5548:	d1f9      	bne.n	d553e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d554a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d554e:	2e00      	cmp	r6, #0
   d5550:	d052      	beq.n	d55f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5552:	f7ff fded 	bl	d5130 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5556:	b120      	cbz	r0, d5562 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5558:	4629      	mov	r1, r5
   d555a:	4630      	mov	r0, r6
   d555c:	f7ff ff95 	bl	d548a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5560:	e043      	b.n	d55ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5562:	4631      	mov	r1, r6
   d5564:	4668      	mov	r0, sp
   d5566:	f7ff ffb0 	bl	d54ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d556a:	68e0      	ldr	r0, [r4, #12]
   d556c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5570:	b108      	cbz	r0, d5576 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5572:	f002 fce3 	bl	d7f3c <strdup>
   d5576:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5578:	2010      	movs	r0, #16
   d557a:	f8ad 5014 	strh.w	r5, [sp, #20]
   d557e:	f7fe fd8a 	bl	d4096 <_Znwj>
   d5582:	4605      	mov	r5, r0
   d5584:	b330      	cbz	r0, d55d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5586:	f04f 0800 	mov.w	r8, #0
   d558a:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d558e:	2018      	movs	r0, #24
   d5590:	f7fe fd81 	bl	d4096 <_Znwj>
   d5594:	4604      	mov	r4, r0
   d5596:	b1c0      	cbz	r0, d55ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5598:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d559c:	4601      	mov	r1, r0
   d559e:	4668      	mov	r0, sp
   d55a0:	f7ff ff63 	bl	d546a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55a4:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d55a6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55a8:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55aa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d55ac:	9202      	str	r2, [sp, #8]
   d55ae:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55b0:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d55b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d55b6:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d55b8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d55bc:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d55c0:	9b04      	ldr	r3, [sp, #16]
   d55c2:	9203      	str	r2, [sp, #12]
   d55c4:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d55c6:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55ca:	4b0e      	ldr	r3, [pc, #56]	; (d5604 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d55cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55ce:	4b0e      	ldr	r3, [pc, #56]	; (d5608 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55d0:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55d2:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d55d4:	9804      	ldr	r0, [sp, #16]
   d55d6:	f7ff fe67 	bl	d52a8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55da:	4668      	mov	r0, sp
   d55dc:	f7ff fb16 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55e0:	2200      	movs	r2, #0
   d55e2:	4629      	mov	r1, r5
   d55e4:	4809      	ldr	r0, [pc, #36]	; (d560c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d55e6:	f7ff fdab 	bl	d5140 <application_thread_invoke>
   d55ea:	4630      	mov	r0, r6
   d55ec:	f7ff fb0e 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d55f0:	2110      	movs	r1, #16
   d55f2:	4630      	mov	r0, r6
   d55f4:	f001 fde7 	bl	d71c6 <_ZdlPvj>
   d55f8:	4638      	mov	r0, r7
   d55fa:	f7ff fe55 	bl	d52a8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d55fe:	b006      	add	sp, #24
   d5600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5604:	000d549d 	.word	0x000d549d
   d5608:	000d56f9 	.word	0x000d56f9
   d560c:	000d531f 	.word	0x000d531f

000d5610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5614:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5616:	ad07      	add	r5, sp, #28
   d5618:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d561c:	4606      	mov	r6, r0
   d561e:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5620:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5622:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5624:	460f      	mov	r7, r1
   d5626:	4690      	mov	r8, r2
   d5628:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d562c:	f8c5 b004 	str.w	fp, [r5, #4]
   d5630:	f8c5 b008 	str.w	fp, [r5, #8]
   d5634:	9307      	str	r3, [sp, #28]
   d5636:	f7fe fd2e 	bl	d4096 <_Znwj>
   d563a:	4604      	mov	r4, r0
   d563c:	b138      	cbz	r0, d564e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d563e:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5642:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5646:	f8c0 b004 	str.w	fp, [r0, #4]
   d564a:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d564e:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5650:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5652:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5654:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5656:	f7fe fd1e 	bl	d4096 <_Znwj>
   d565a:	b128      	cbz	r0, d5668 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d565c:	2301      	movs	r3, #1
   d565e:	6043      	str	r3, [r0, #4]
   d5660:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5662:	4b23      	ldr	r3, [pc, #140]	; (d56f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5664:	6003      	str	r3, [r0, #0]
   d5666:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5668:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d566a:	4b22      	ldr	r3, [pc, #136]	; (d56f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d566c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d566e:	2008      	movs	r0, #8
   d5670:	f7fe fd11 	bl	d4096 <_Znwj>
   d5674:	4604      	mov	r4, r0
   d5676:	b128      	cbz	r0, d5684 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5678:	9b03      	ldr	r3, [sp, #12]
   d567a:	f840 3b04 	str.w	r3, [r0], #4
   d567e:	a904      	add	r1, sp, #16
   d5680:	f7ff fece 	bl	d5420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5684:	9500      	str	r5, [sp, #0]
   d5686:	fa5f f38a 	uxtb.w	r3, sl
   d568a:	464a      	mov	r2, r9
   d568c:	4641      	mov	r1, r8
   d568e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5690:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5692:	f7ff fd99 	bl	d51c8 <spark_send_event>
   d5696:	b9b8      	cbnz	r0, d56c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5698:	9b03      	ldr	r3, [sp, #12]
   d569a:	785b      	ldrb	r3, [r3, #1]
   d569c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d56a0:	b993      	cbnz	r3, d56c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d56a2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d56a6:	a905      	add	r1, sp, #20
   d56a8:	a803      	add	r0, sp, #12
   d56aa:	9205      	str	r2, [sp, #20]
   d56ac:	f8ad 3018 	strh.w	r3, [sp, #24]
   d56b0:	f7ff ff1a 	bl	d54e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d56b4:	9805      	ldr	r0, [sp, #20]
   d56b6:	f7ff fdf7 	bl	d52a8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d56ba:	a805      	add	r0, sp, #20
   d56bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d56be:	f7ff feb6 	bl	d542e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56c2:	a806      	add	r0, sp, #24
   d56c4:	f7fe fdb3 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56c8:	9b03      	ldr	r3, [sp, #12]
   d56ca:	9305      	str	r3, [sp, #20]
   d56cc:	a904      	add	r1, sp, #16
   d56ce:	a806      	add	r0, sp, #24
   d56d0:	f7ff fea6 	bl	d5420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d56d4:	a905      	add	r1, sp, #20
   d56d6:	4630      	mov	r0, r6
   d56d8:	f7ff fe91 	bl	d53fe <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56dc:	a806      	add	r0, sp, #24
   d56de:	f7fe fda6 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56e2:	a804      	add	r0, sp, #16
   d56e4:	f7fe fda3 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d56e8:	4630      	mov	r0, r6
   d56ea:	b00b      	add	sp, #44	; 0x2c
   d56ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d56f0:	000d87e0 	.word	0x000d87e0
   d56f4:	000d5865 	.word	0x000d5865

000d56f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d56f8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d56fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56fc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d56fe:	d006      	beq.n	d570e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5700:	2a03      	cmp	r2, #3
   d5702:	d017      	beq.n	d5734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5704:	2a01      	cmp	r2, #1
   d5706:	d121      	bne.n	d574c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5708:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d570a:	6003      	str	r3, [r0, #0]
	      break;
   d570c:	e01e      	b.n	d574c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d570e:	2018      	movs	r0, #24
   d5710:	680e      	ldr	r6, [r1, #0]
   d5712:	f7fe fcc0 	bl	d4096 <_Znwj>
   d5716:	4605      	mov	r5, r0
   d5718:	b150      	cbz	r0, d5730 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d571a:	4631      	mov	r1, r6
   d571c:	f7ff fed5 	bl	d54ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5720:	6930      	ldr	r0, [r6, #16]
   d5722:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5726:	b108      	cbz	r0, d572c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5728:	f002 fc08 	bl	d7f3c <strdup>
   d572c:	6128      	str	r0, [r5, #16]
   d572e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5730:	6025      	str	r5, [r4, #0]
   d5732:	e00b      	b.n	d574c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5734:	6804      	ldr	r4, [r0, #0]
   d5736:	b14c      	cbz	r4, d574c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5738:	6920      	ldr	r0, [r4, #16]
   d573a:	f7ff fdb5 	bl	d52a8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d573e:	4620      	mov	r0, r4
   d5740:	f7ff fa64 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5744:	2118      	movs	r1, #24
   d5746:	4620      	mov	r0, r4
   d5748:	f001 fd3d 	bl	d71c6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d574c:	2000      	movs	r0, #0
   d574e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5750 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5750:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5752:	2300      	movs	r3, #0
   d5754:	6083      	str	r3, [r0, #8]
   d5756:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5758:	4604      	mov	r4, r0
   d575a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d575c:	b12b      	cbz	r3, d576a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d575e:	2202      	movs	r2, #2
   d5760:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5762:	68eb      	ldr	r3, [r5, #12]
   d5764:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5766:	68ab      	ldr	r3, [r5, #8]
   d5768:	60a3      	str	r3, [r4, #8]
	}
    }
   d576a:	4620      	mov	r0, r4
   d576c:	bd38      	pop	{r3, r4, r5, pc}

000d576e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d576e:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5770:	b570      	push	{r4, r5, r6, lr}
   d5772:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5774:	d006      	beq.n	d5784 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5776:	2a03      	cmp	r2, #3
   d5778:	d011      	beq.n	d579e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d577a:	2a01      	cmp	r2, #1
   d577c:	d118      	bne.n	d57b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d577e:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5780:	6003      	str	r3, [r0, #0]
	      break;
   d5782:	e015      	b.n	d57b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5784:	2014      	movs	r0, #20
   d5786:	680e      	ldr	r6, [r1, #0]
   d5788:	f7fe fc85 	bl	d4096 <_Znwj>
   d578c:	4605      	mov	r5, r0
   d578e:	b120      	cbz	r0, d579a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5790:	4631      	mov	r1, r6
   d5792:	f7ff ffdd 	bl	d5750 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5796:	7c33      	ldrb	r3, [r6, #16]
   d5798:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d579a:	6025      	str	r5, [r4, #0]
   d579c:	e008      	b.n	d57b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d579e:	6804      	ldr	r4, [r0, #0]
   d57a0:	b134      	cbz	r4, d57b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57a2:	4620      	mov	r0, r4
   d57a4:	f7ff fa32 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d57a8:	2114      	movs	r1, #20
   d57aa:	4620      	mov	r0, r4
   d57ac:	f001 fd0b 	bl	d71c6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d57b0:	2000      	movs	r0, #0
   d57b2:	bd70      	pop	{r4, r5, r6, pc}

000d57b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d57b4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d57b6:	2300      	movs	r3, #0
   d57b8:	b087      	sub	sp, #28
   d57ba:	460c      	mov	r4, r1
   d57bc:	f3bf 8f5f 	dmb	sy
   d57c0:	e850 6f00 	ldrex	r6, [r0]
   d57c4:	e840 3200 	strex	r2, r3, [r0]
   d57c8:	2a00      	cmp	r2, #0
   d57ca:	d1f9      	bne.n	d57c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d57cc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d57d0:	2e00      	cmp	r6, #0
   d57d2:	d03f      	beq.n	d5854 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d57d4:	4618      	mov	r0, r3
   d57d6:	f7ff fcab 	bl	d5130 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d57da:	4607      	mov	r7, r0
   d57dc:	b120      	cbz	r0, d57e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d57de:	4621      	mov	r1, r4
   d57e0:	4630      	mov	r0, r6
   d57e2:	f7ff fe62 	bl	d54aa <_ZNKSt8functionIFvRKbEEclES1_>
   d57e6:	e02e      	b.n	d5846 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d57e8:	4631      	mov	r1, r6
   d57ea:	a801      	add	r0, sp, #4
   d57ec:	f7ff ffb0 	bl	d5750 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57f0:	7823      	ldrb	r3, [r4, #0]
   d57f2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d57f6:	2010      	movs	r0, #16
   d57f8:	f7fe fc4d 	bl	d4096 <_Znwj>
   d57fc:	4605      	mov	r5, r0
   d57fe:	b1d0      	cbz	r0, d5836 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5800:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5802:	2014      	movs	r0, #20
   d5804:	f7fe fc47 	bl	d4096 <_Znwj>
   d5808:	4604      	mov	r4, r0
   d580a:	b178      	cbz	r0, d582c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d580c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d580e:	4601      	mov	r1, r0
   d5810:	a801      	add	r0, sp, #4
   d5812:	f7ff fe2a 	bl	d546a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5816:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5818:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d581a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d581c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d581e:	9203      	str	r2, [sp, #12]
   d5820:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5822:	60e3      	str	r3, [r4, #12]
   d5824:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5828:	9204      	str	r2, [sp, #16]
   d582a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d582c:	4b0a      	ldr	r3, [pc, #40]	; (d5858 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d582e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5830:	4b0a      	ldr	r3, [pc, #40]	; (d585c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5832:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5834:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5836:	a801      	add	r0, sp, #4
   d5838:	f7ff f9e8 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d583c:	2200      	movs	r2, #0
   d583e:	4629      	mov	r1, r5
   d5840:	4807      	ldr	r0, [pc, #28]	; (d5860 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5842:	f7ff fc7d 	bl	d5140 <application_thread_invoke>
   d5846:	4630      	mov	r0, r6
   d5848:	f7ff f9e0 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d584c:	2110      	movs	r1, #16
   d584e:	4630      	mov	r0, r6
   d5850:	f001 fcb9 	bl	d71c6 <_ZdlPvj>
        }
    }
   d5854:	b007      	add	sp, #28
   d5856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5858:	000d54bd 	.word	0x000d54bd
   d585c:	000d576f 	.word	0x000d576f
   d5860:	000d531f 	.word	0x000d531f

000d5864 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5864:	b530      	push	{r4, r5, lr}
   d5866:	b085      	sub	sp, #20
   d5868:	4604      	mov	r4, r0
   d586a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d586c:	4668      	mov	r0, sp
   d586e:	4611      	mov	r1, r2
   d5870:	f7ff fddd 	bl	d542e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5874:	b17c      	cbz	r4, d5896 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5876:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5878:	4628      	mov	r0, r5
   d587a:	b10d      	cbz	r5, d5880 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d587c:	f002 fb5e 	bl	d7f3c <strdup>
   d5880:	9002      	str	r0, [sp, #8]
   d5882:	a902      	add	r1, sp, #8
   d5884:	4668      	mov	r0, sp
   d5886:	f8ad 400c 	strh.w	r4, [sp, #12]
   d588a:	f7ff fe2d 	bl	d54e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d588e:	9802      	ldr	r0, [sp, #8]
   d5890:	f7ff fd0a 	bl	d52a8 <free>
   d5894:	e01d      	b.n	d58d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5896:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5898:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d589c:	f04f 0201 	mov.w	r2, #1
   d58a0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d58a4:	42a3      	cmp	r3, r4
   d58a6:	d103      	bne.n	d58b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d58a8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d58ac:	2900      	cmp	r1, #0
   d58ae:	d1f7      	bne.n	d58a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d58b0:	d002      	beq.n	d58b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d58b2:	f88d 3008 	strb.w	r3, [sp, #8]
   d58b6:	e00c      	b.n	d58d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d58b8:	f110 010c 	adds.w	r1, r0, #12
   d58bc:	f04f 0301 	mov.w	r3, #1
   d58c0:	bf18      	it	ne
   d58c2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d58c4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d58c8:	3004      	adds	r0, #4
   d58ca:	f800 3c03 	strb.w	r3, [r0, #-3]
   d58ce:	f7ff ff71 	bl	d57b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d58d2:	a801      	add	r0, sp, #4
   d58d4:	f7fe fcab 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d58d8:	b005      	add	sp, #20
   d58da:	bd30      	pop	{r4, r5, pc}

000d58dc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58dc:	2200      	movs	r2, #0
   d58de:	4611      	mov	r1, r2
   d58e0:	6840      	ldr	r0, [r0, #4]
   d58e2:	f7ff bcc1 	b.w	d5268 <network_listening>

000d58e6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d58e6:	2200      	movs	r2, #0
   d58e8:	4611      	mov	r1, r2
   d58ea:	6840      	ldr	r0, [r0, #4]
   d58ec:	f7ff bccc 	b.w	d5288 <network_get_listen_timeout>

000d58f0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d58f0:	2200      	movs	r2, #0
   d58f2:	6840      	ldr	r0, [r0, #4]
   d58f4:	f7ff bcc0 	b.w	d5278 <network_set_listen_timeout>

000d58f8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58f8:	2200      	movs	r2, #0
   d58fa:	f081 0101 	eor.w	r1, r1, #1
   d58fe:	6840      	ldr	r0, [r0, #4]
   d5900:	f7ff bcaa 	b.w	d5258 <network_listen>

000d5904 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5904:	2300      	movs	r3, #0
   d5906:	461a      	mov	r2, r3
   d5908:	4619      	mov	r1, r3
   d590a:	6840      	ldr	r0, [r0, #4]
   d590c:	f7ff bc9c 	b.w	d5248 <network_off>

000d5910 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5910:	2300      	movs	r3, #0
   d5912:	461a      	mov	r2, r3
   d5914:	4619      	mov	r1, r3
   d5916:	6840      	ldr	r0, [r0, #4]
   d5918:	f7ff bc8e 	b.w	d5238 <network_on>

000d591c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d591c:	2200      	movs	r2, #0
   d591e:	4611      	mov	r1, r2
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	f7ff bc81 	b.w	d5228 <network_ready>

000d5926 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5926:	2200      	movs	r2, #0
   d5928:	4611      	mov	r1, r2
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	f7ff bc6c 	b.w	d5208 <network_connecting>

000d5930 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5930:	2200      	movs	r2, #0
   d5932:	2102      	movs	r1, #2
   d5934:	6840      	ldr	r0, [r0, #4]
   d5936:	f7ff bc6f 	b.w	d5218 <network_disconnect>

000d593a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d593a:	2300      	movs	r3, #0
   d593c:	461a      	mov	r2, r3
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	f7ff bc5a 	b.w	d51f8 <network_connect>

000d5944 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5944:	4b02      	ldr	r3, [pc, #8]	; (d5950 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5946:	2203      	movs	r2, #3
   d5948:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d594a:	4a02      	ldr	r2, [pc, #8]	; (d5954 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d594c:	601a      	str	r2, [r3, #0]
   d594e:	4770      	bx	lr
   d5950:	2003e378 	.word	0x2003e378
   d5954:	000d87fc 	.word	0x000d87fc

000d5958 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5958:	4770      	bx	lr

000d595a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d595a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d595c:	4606      	mov	r6, r0
   d595e:	4615      	mov	r5, r2
   d5960:	460c      	mov	r4, r1
   d5962:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5964:	42bc      	cmp	r4, r7
   d5966:	d006      	beq.n	d5976 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5968:	6833      	ldr	r3, [r6, #0]
   d596a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d596e:	689b      	ldr	r3, [r3, #8]
   d5970:	4630      	mov	r0, r6
   d5972:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5974:	e7f6      	b.n	d5964 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5976:	4628      	mov	r0, r5
   d5978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d597a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d597a:	2200      	movs	r2, #0
   d597c:	7c00      	ldrb	r0, [r0, #16]
   d597e:	f7ff ba6f 	b.w	d4e60 <HAL_I2C_Write_Data>

000d5982 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5982:	2100      	movs	r1, #0
   d5984:	7c00      	ldrb	r0, [r0, #16]
   d5986:	f7ff ba73 	b.w	d4e70 <HAL_I2C_Available_Data>

000d598a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d598a:	2100      	movs	r1, #0
   d598c:	7c00      	ldrb	r0, [r0, #16]
   d598e:	f7ff ba77 	b.w	d4e80 <HAL_I2C_Read_Data>

000d5992 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5992:	2100      	movs	r1, #0
   d5994:	7c00      	ldrb	r0, [r0, #16]
   d5996:	f7ff ba7b 	b.w	d4e90 <HAL_I2C_Peek_Data>

000d599a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d599a:	2100      	movs	r1, #0
   d599c:	7c00      	ldrb	r0, [r0, #16]
   d599e:	f7ff ba7f 	b.w	d4ea0 <HAL_I2C_Flush_Data>

000d59a2 <_ZN7TwoWireD0Ev>:
   d59a2:	b510      	push	{r4, lr}
   d59a4:	2114      	movs	r1, #20
   d59a6:	4604      	mov	r4, r0
   d59a8:	f001 fc0d 	bl	d71c6 <_ZdlPvj>
   d59ac:	4620      	mov	r0, r4
   d59ae:	bd10      	pop	{r4, pc}

000d59b0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d59b0:	b510      	push	{r4, lr}
   d59b2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d59b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59b8:	4608      	mov	r0, r1
   d59ba:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d59bc:	2100      	movs	r1, #0
   d59be:	4b04      	ldr	r3, [pc, #16]	; (d59d0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d59c0:	7420      	strb	r0, [r4, #16]
   d59c2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d59c4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d59c6:	f7ff fa7b 	bl	d4ec0 <HAL_I2C_Init>

}
   d59ca:	4620      	mov	r0, r4
   d59cc:	bd10      	pop	{r4, pc}
   d59ce:	bf00      	nop
   d59d0:	000d8830 	.word	0x000d8830

000d59d4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d59d4:	2100      	movs	r1, #0
   d59d6:	7c00      	ldrb	r0, [r0, #16]
   d59d8:	f7ff ba6a 	b.w	d4eb0 <HAL_I2C_Is_Enabled>

000d59dc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d59dc:	f7ff ba30 	b.w	d4e40 <HAL_Interrupts_Disable_All>

000d59e0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d59e0:	f7ff ba26 	b.w	d4e30 <HAL_Interrupts_Enable_All>

000d59e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d59e4:	4770      	bx	lr

000d59e6 <_ZN9IPAddressD0Ev>:
   d59e6:	b510      	push	{r4, lr}
   d59e8:	2118      	movs	r1, #24
   d59ea:	4604      	mov	r4, r0
   d59ec:	f001 fbeb 	bl	d71c6 <_ZdlPvj>
   d59f0:	4620      	mov	r0, r4
   d59f2:	bd10      	pop	{r4, pc}

000d59f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d59f6:	7d03      	ldrb	r3, [r0, #20]
   d59f8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d59fa:	b08d      	sub	sp, #52	; 0x34
   d59fc:	460e      	mov	r6, r1
   d59fe:	f100 0704 	add.w	r7, r0, #4
   d5a02:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5a06:	d002      	beq.n	d5a0e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5a08:	f100 0508 	add.w	r5, r0, #8
   d5a0c:	e018      	b.n	d5a40 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5a0e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a10:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5a12:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a16:	232f      	movs	r3, #47	; 0x2f
   d5a18:	462a      	mov	r2, r5
   d5a1a:	200a      	movs	r0, #10
   d5a1c:	f7ff fa60 	bl	d4ee0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a20:	4628      	mov	r0, r5
   d5a22:	f002 faa6 	bl	d7f72 <strlen>
   d5a26:	6833      	ldr	r3, [r6, #0]
   d5a28:	4602      	mov	r2, r0
   d5a2a:	68db      	ldr	r3, [r3, #12]
   d5a2c:	4629      	mov	r1, r5
   d5a2e:	4630      	mov	r0, r6
   d5a30:	4798      	blx	r3
   d5a32:	e00f      	b.n	d5a54 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5a34:	b124      	cbz	r4, d5a40 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5a36:	212e      	movs	r1, #46	; 0x2e
   d5a38:	4630      	mov	r0, r6
   d5a3a:	f000 f9d7 	bl	d5dec <_ZN5Print5printEc>
   d5a3e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5a40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5a44:	220a      	movs	r2, #10
   d5a46:	4630      	mov	r0, r6
   d5a48:	f000 fa00 	bl	d5e4c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a4c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a4e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a50:	d1f0      	bne.n	d5a34 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a52:	4620      	mov	r0, r4
    }
    return n;
}
   d5a54:	b00d      	add	sp, #52	; 0x34
   d5a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a58 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5a58:	b510      	push	{r4, lr}
   d5a5a:	4b05      	ldr	r3, [pc, #20]	; (d5a70 <_ZN9IPAddressC1Ev+0x18>)
   d5a5c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5a5e:	2211      	movs	r2, #17
   d5a60:	f840 3b04 	str.w	r3, [r0], #4
   d5a64:	2100      	movs	r1, #0
   d5a66:	f002 fa26 	bl	d7eb6 <memset>
{
    clear();
}
   d5a6a:	4620      	mov	r0, r4
   d5a6c:	bd10      	pop	{r4, pc}
   d5a6e:	bf00      	nop
   d5a70:	000d8858 	.word	0x000d8858

000d5a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5a74:	4603      	mov	r3, r0
   d5a76:	4a07      	ldr	r2, [pc, #28]	; (d5a94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5a78:	b510      	push	{r4, lr}
   d5a7a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5a7e:	f101 0210 	add.w	r2, r1, #16
   d5a82:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a86:	f843 4b04 	str.w	r4, [r3], #4
   d5a8a:	4291      	cmp	r1, r2
   d5a8c:	d1f9      	bne.n	d5a82 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5a8e:	780a      	ldrb	r2, [r1, #0]
   d5a90:	701a      	strb	r2, [r3, #0]
}
   d5a92:	bd10      	pop	{r4, pc}
   d5a94:	000d8858 	.word	0x000d8858

000d5a98 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5a98:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5a9a:	2b04      	cmp	r3, #4
   d5a9c:	d101      	bne.n	d5aa2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5a9e:	6840      	ldr	r0, [r0, #4]
   d5aa0:	e008      	b.n	d5ab4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5aa2:	2b06      	cmp	r3, #6
   d5aa4:	d10a      	bne.n	d5abc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5aa6:	6843      	ldr	r3, [r0, #4]
   d5aa8:	b153      	cbz	r3, d5ac0 <_ZNK9IPAddresscvbEv+0x28>
   d5aaa:	6883      	ldr	r3, [r0, #8]
   d5aac:	b143      	cbz	r3, d5ac0 <_ZNK9IPAddresscvbEv+0x28>
   d5aae:	68c3      	ldr	r3, [r0, #12]
   d5ab0:	b133      	cbz	r3, d5ac0 <_ZNK9IPAddresscvbEv+0x28>
   d5ab2:	6900      	ldr	r0, [r0, #16]
   d5ab4:	3000      	adds	r0, #0
   d5ab6:	bf18      	it	ne
   d5ab8:	2001      	movne	r0, #1
   d5aba:	4770      	bx	lr
   d5abc:	2000      	movs	r0, #0
   d5abe:	4770      	bx	lr
   d5ac0:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5ac2:	4770      	bx	lr

000d5ac4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5ac4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5ac6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5aca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5ace:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5ad2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5ad6:	2304      	movs	r3, #4
   d5ad8:	6041      	str	r1, [r0, #4]
   d5ada:	7503      	strb	r3, [r0, #20]
   d5adc:	bd10      	pop	{r4, pc}

000d5ade <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5ae0:	780d      	ldrb	r5, [r1, #0]
   d5ae2:	788b      	ldrb	r3, [r1, #2]
   d5ae4:	784a      	ldrb	r2, [r1, #1]
   d5ae6:	78c9      	ldrb	r1, [r1, #3]
   d5ae8:	9100      	str	r1, [sp, #0]
   d5aea:	4629      	mov	r1, r5
   d5aec:	f7ff ffea 	bl	d5ac4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5af0:	b003      	add	sp, #12
   d5af2:	bd30      	pop	{r4, r5, pc}

000d5af4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5af4:	4b01      	ldr	r3, [pc, #4]	; (d5afc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5af6:	4a02      	ldr	r2, [pc, #8]	; (d5b00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5af8:	601a      	str	r2, [r3, #0]
   d5afa:	4770      	bx	lr
   d5afc:	2003e380 	.word	0x2003e380
   d5b00:	000d8919 	.word	0x000d8919

000d5b04 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b04:	2200      	movs	r2, #0
   d5b06:	4611      	mov	r1, r2
   d5b08:	6840      	ldr	r0, [r0, #4]
   d5b0a:	f7ff bbad 	b.w	d5268 <network_listening>

000d5b0e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b0e:	2200      	movs	r2, #0
   d5b10:	4611      	mov	r1, r2
   d5b12:	6840      	ldr	r0, [r0, #4]
   d5b14:	f7ff bbb8 	b.w	d5288 <network_get_listen_timeout>

000d5b18 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b18:	2200      	movs	r2, #0
   d5b1a:	6840      	ldr	r0, [r0, #4]
   d5b1c:	f7ff bbac 	b.w	d5278 <network_set_listen_timeout>

000d5b20 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b20:	2200      	movs	r2, #0
   d5b22:	f081 0101 	eor.w	r1, r1, #1
   d5b26:	6840      	ldr	r0, [r0, #4]
   d5b28:	f7ff bb96 	b.w	d5258 <network_listen>

000d5b2c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b2c:	2300      	movs	r3, #0
   d5b2e:	461a      	mov	r2, r3
   d5b30:	4619      	mov	r1, r3
   d5b32:	6840      	ldr	r0, [r0, #4]
   d5b34:	f7ff bb88 	b.w	d5248 <network_off>

000d5b38 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b38:	2300      	movs	r3, #0
   d5b3a:	461a      	mov	r2, r3
   d5b3c:	4619      	mov	r1, r3
   d5b3e:	6840      	ldr	r0, [r0, #4]
   d5b40:	f7ff bb7a 	b.w	d5238 <network_on>

000d5b44 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b44:	2200      	movs	r2, #0
   d5b46:	4611      	mov	r1, r2
   d5b48:	6840      	ldr	r0, [r0, #4]
   d5b4a:	f7ff bb5d 	b.w	d5208 <network_connecting>

000d5b4e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b4e:	2200      	movs	r2, #0
   d5b50:	2102      	movs	r1, #2
   d5b52:	6840      	ldr	r0, [r0, #4]
   d5b54:	f7ff bb60 	b.w	d5218 <network_disconnect>

000d5b58 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b58:	2300      	movs	r3, #0
   d5b5a:	461a      	mov	r2, r3
   d5b5c:	6840      	ldr	r0, [r0, #4]
   d5b5e:	f7ff bb4b 	b.w	d51f8 <network_connect>

000d5b62 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5b62:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b64:	4605      	mov	r5, r0
   d5b66:	b188      	cbz	r0, d5b8c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b68:	6804      	ldr	r4, [r0, #0]
   d5b6a:	b14c      	cbz	r4, d5b80 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5b6c:	68a3      	ldr	r3, [r4, #8]
   d5b6e:	b11b      	cbz	r3, d5b78 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b70:	2203      	movs	r2, #3
   d5b72:	4621      	mov	r1, r4
   d5b74:	4620      	mov	r0, r4
   d5b76:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b78:	2110      	movs	r1, #16
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	f001 fb23 	bl	d71c6 <_ZdlPvj>
   d5b80:	4628      	mov	r0, r5
   d5b82:	2114      	movs	r1, #20
      }
   d5b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b88:	f001 bb1d 	b.w	d71c6 <_ZdlPvj>
   d5b8c:	bd38      	pop	{r3, r4, r5, pc}

000d5b8e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5b8e:	b110      	cbz	r0, d5b96 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5b90:	6803      	ldr	r3, [r0, #0]
   d5b92:	685b      	ldr	r3, [r3, #4]
   d5b94:	4718      	bx	r3
   d5b96:	4770      	bx	lr

000d5b98 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5b98:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b9a:	6803      	ldr	r3, [r0, #0]
   d5b9c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5b9e:	b1bb      	cbz	r3, d5bd0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5ba0:	6858      	ldr	r0, [r3, #4]
   d5ba2:	f7ff f8dd 	bl	d4d60 <os_thread_is_current>
   d5ba6:	b978      	cbnz	r0, d5bc8 <_ZN6ThreadD1Ev+0x30>
   d5ba8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5baa:	7c5a      	ldrb	r2, [r3, #17]
   d5bac:	b912      	cbnz	r2, d5bb4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5bae:	6858      	ldr	r0, [r3, #4]
   d5bb0:	f7ff f8de 	bl	d4d70 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5bb4:	6823      	ldr	r3, [r4, #0]
   d5bb6:	6858      	ldr	r0, [r3, #4]
   d5bb8:	f7ff f8e2 	bl	d4d80 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bbc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5bbe:	2300      	movs	r3, #0
   d5bc0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5bc2:	b128      	cbz	r0, d5bd0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5bc4:	f7ff ffcd 	bl	d5b62 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bc8:	6820      	ldr	r0, [r4, #0]
   d5bca:	b108      	cbz	r0, d5bd0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5bcc:	f7ff ffc9 	bl	d5b62 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	bd10      	pop	{r4, pc}

000d5bd4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5bd4:	b538      	push	{r3, r4, r5, lr}
   d5bd6:	4b0c      	ldr	r3, [pc, #48]	; (d5c08 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5bd8:	6003      	str	r3, [r0, #0]
   d5bda:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bdc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5be0:	b108      	cbz	r0, d5be6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5be2:	f7fe fa5e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5be6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5bea:	b135      	cbz	r5, d5bfa <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bec:	4628      	mov	r0, r5
   d5bee:	f7ff ffd3 	bl	d5b98 <_ZN6ThreadD1Ev>
   d5bf2:	2104      	movs	r1, #4
   d5bf4:	4628      	mov	r0, r5
   d5bf6:	f001 fae6 	bl	d71c6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bfa:	68a0      	ldr	r0, [r4, #8]
   d5bfc:	b108      	cbz	r0, d5c02 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5bfe:	f7ff ffc6 	bl	d5b8e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5c02:	4620      	mov	r0, r4
   d5c04:	bd38      	pop	{r3, r4, r5, pc}
   d5c06:	bf00      	nop
   d5c08:	000d894c 	.word	0x000d894c

000d5c0c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5c0c:	b538      	push	{r3, r4, r5, lr}
   d5c0e:	4c0d      	ldr	r4, [pc, #52]	; (d5c44 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5c10:	4b0d      	ldr	r3, [pc, #52]	; (d5c48 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5c12:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5c14:	2500      	movs	r5, #0
   d5c16:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5c18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5c1c:	6063      	str	r3, [r4, #4]
   d5c1e:	60a5      	str	r5, [r4, #8]
   d5c20:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c24:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5c28:	f7ff f8ba 	bl	d4da0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5c2c:	4b07      	ldr	r3, [pc, #28]	; (d5c4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5c2e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5c32:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5c34:	4620      	mov	r0, r4
   d5c36:	4a06      	ldr	r2, [pc, #24]	; (d5c50 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5c38:	4906      	ldr	r1, [pc, #24]	; (d5c54 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5c3e:	f001 babd 	b.w	d71bc <__aeabi_atexit>
   d5c42:	bf00      	nop
   d5c44:	2003e384 	.word	0x2003e384
   d5c48:	000d8980 	.word	0x000d8980
   d5c4c:	000d894c 	.word	0x000d894c
   d5c50:	2003e1ec 	.word	0x2003e1ec
   d5c54:	000d5bd5 	.word	0x000d5bd5

000d5c58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c58:	2300      	movs	r3, #0
   d5c5a:	461a      	mov	r2, r3
   d5c5c:	6840      	ldr	r0, [r0, #4]
   d5c5e:	f7ff bacb 	b.w	d51f8 <network_connect>

000d5c62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c62:	2200      	movs	r2, #0
   d5c64:	2102      	movs	r1, #2
   d5c66:	6840      	ldr	r0, [r0, #4]
   d5c68:	f7ff bad6 	b.w	d5218 <network_disconnect>

000d5c6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c6c:	2200      	movs	r2, #0
   d5c6e:	4611      	mov	r1, r2
   d5c70:	6840      	ldr	r0, [r0, #4]
   d5c72:	f7ff bac9 	b.w	d5208 <network_connecting>

000d5c76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c76:	2200      	movs	r2, #0
   d5c78:	4611      	mov	r1, r2
   d5c7a:	6840      	ldr	r0, [r0, #4]
   d5c7c:	f7ff bad4 	b.w	d5228 <network_ready>

000d5c80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c80:	2300      	movs	r3, #0
   d5c82:	461a      	mov	r2, r3
   d5c84:	4619      	mov	r1, r3
   d5c86:	6840      	ldr	r0, [r0, #4]
   d5c88:	f7ff bad6 	b.w	d5238 <network_on>

000d5c8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c8c:	2300      	movs	r3, #0
   d5c8e:	461a      	mov	r2, r3
   d5c90:	4619      	mov	r1, r3
   d5c92:	6840      	ldr	r0, [r0, #4]
   d5c94:	f7ff bad8 	b.w	d5248 <network_off>

000d5c98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c98:	2200      	movs	r2, #0
   d5c9a:	f081 0101 	eor.w	r1, r1, #1
   d5c9e:	6840      	ldr	r0, [r0, #4]
   d5ca0:	f7ff bada 	b.w	d5258 <network_listen>

000d5ca4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5ca4:	2200      	movs	r2, #0
   d5ca6:	6840      	ldr	r0, [r0, #4]
   d5ca8:	f7ff bae6 	b.w	d5278 <network_set_listen_timeout>

000d5cac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5cac:	2200      	movs	r2, #0
   d5cae:	4611      	mov	r1, r2
   d5cb0:	6840      	ldr	r0, [r0, #4]
   d5cb2:	f7ff bae9 	b.w	d5288 <network_get_listen_timeout>

000d5cb6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5cb6:	2200      	movs	r2, #0
   d5cb8:	4611      	mov	r1, r2
   d5cba:	6840      	ldr	r0, [r0, #4]
   d5cbc:	f7ff bad4 	b.w	d5268 <network_listening>

000d5cc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5cc4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5cc6:	b095      	sub	sp, #84	; 0x54
   d5cc8:	4616      	mov	r6, r2
   d5cca:	460d      	mov	r5, r1
   d5ccc:	4607      	mov	r7, r0
    IPAddress addr;
   d5cce:	f7ff fec3 	bl	d5a58 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5cd2:	4621      	mov	r1, r4
   d5cd4:	2220      	movs	r2, #32
   d5cd6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5cd8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5cda:	f002 f8ec 	bl	d7eb6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5cde:	2340      	movs	r3, #64	; 0x40
   d5ce0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5ce2:	4621      	mov	r1, r4
   d5ce4:	466b      	mov	r3, sp
   d5ce6:	aa0c      	add	r2, sp, #48	; 0x30
   d5ce8:	4630      	mov	r0, r6
   d5cea:	f7ff f921 	bl	d4f30 <netdb_getaddrinfo>
    if (!r) {
   d5cee:	4604      	mov	r4, r0
   d5cf0:	2800      	cmp	r0, #0
   d5cf2:	d144      	bne.n	d5d7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cf4:	4602      	mov	r2, r0
   d5cf6:	2101      	movs	r1, #1
   d5cf8:	6868      	ldr	r0, [r5, #4]
   d5cfa:	f7ff fa95 	bl	d5228 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cfe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d00:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d02:	4622      	mov	r2, r4
   d5d04:	6868      	ldr	r0, [r5, #4]
   d5d06:	f7ff fa8f 	bl	d5228 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d0a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d0c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5d0e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d10:	2e00      	cmp	r6, #0
   d5d12:	d034      	beq.n	d5d7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5d14:	2900      	cmp	r1, #0
   d5d16:	d132      	bne.n	d5d7e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5d18:	6873      	ldr	r3, [r6, #4]
   d5d1a:	2b02      	cmp	r3, #2
   d5d1c:	d002      	beq.n	d5d24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5d1e:	2b0a      	cmp	r3, #10
   d5d20:	d009      	beq.n	d5d36 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5d22:	e02a      	b.n	d5d7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5d24:	f1b8 0f00 	cmp.w	r8, #0
   d5d28:	d027      	beq.n	d5d7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d2a:	6971      	ldr	r1, [r6, #20]
   d5d2c:	4638      	mov	r0, r7
   d5d2e:	3104      	adds	r1, #4
   d5d30:	f7ff fed5 	bl	d5ade <_ZN9IPAddressaSEPKh>
   d5d34:	e020      	b.n	d5d78 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d36:	f1b9 0f00 	cmp.w	r9, #0
   d5d3a:	d01e      	beq.n	d5d7a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d3c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d3e:	2211      	movs	r2, #17
   d5d40:	a801      	add	r0, sp, #4
   d5d42:	f002 f8b8 	bl	d7eb6 <memset>
                    a.v = 6;
   d5d46:	2306      	movs	r3, #6
   d5d48:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d4c:	ad01      	add	r5, sp, #4
   d5d4e:	f104 0308 	add.w	r3, r4, #8
   d5d52:	3418      	adds	r4, #24
   d5d54:	6818      	ldr	r0, [r3, #0]
   d5d56:	6859      	ldr	r1, [r3, #4]
   d5d58:	462a      	mov	r2, r5
   d5d5a:	c203      	stmia	r2!, {r0, r1}
   d5d5c:	3308      	adds	r3, #8
   d5d5e:	42a3      	cmp	r3, r4
   d5d60:	4615      	mov	r5, r2
   d5d62:	d1f7      	bne.n	d5d54 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5d64:	a901      	add	r1, sp, #4
   d5d66:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5d68:	ad07      	add	r5, sp, #28
   d5d6a:	f7ff fe83 	bl	d5a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d70:	1d3c      	adds	r4, r7, #4
   d5d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d74:	682b      	ldr	r3, [r5, #0]
   d5d76:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5d78:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d7a:	69f6      	ldr	r6, [r6, #28]
   d5d7c:	e7c8      	b.n	d5d10 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d7e:	9800      	ldr	r0, [sp, #0]
   d5d80:	f7ff f8ce 	bl	d4f20 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d84:	4638      	mov	r0, r7
   d5d86:	b015      	add	sp, #84	; 0x54
   d5d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d8c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d8c:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d8e:	4a03      	ldr	r2, [pc, #12]	; (d5d9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d90:	601a      	str	r2, [r3, #0]
   d5d92:	2200      	movs	r2, #0
   d5d94:	605a      	str	r2, [r3, #4]
   d5d96:	4770      	bx	lr
   d5d98:	2003e554 	.word	0x2003e554
   d5d9c:	000d8980 	.word	0x000d8980

000d5da0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5da2:	4606      	mov	r6, r0
   d5da4:	460d      	mov	r5, r1
   d5da6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5da8:	2400      	movs	r4, #0
  while (size--) {
   d5daa:	42bd      	cmp	r5, r7
   d5dac:	d00c      	beq.n	d5dc8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5dae:	6833      	ldr	r3, [r6, #0]
   d5db0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5db4:	689b      	ldr	r3, [r3, #8]
   d5db6:	4630      	mov	r0, r6
   d5db8:	4798      	blx	r3
     if (chunk>=0)
   d5dba:	2800      	cmp	r0, #0
   d5dbc:	db01      	blt.n	d5dc2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5dbe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5dc0:	e7f3      	b.n	d5daa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5dc2:	2c00      	cmp	r4, #0
   d5dc4:	bf08      	it	eq
   d5dc6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5dc8:	4620      	mov	r0, r4
   d5dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dcc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5dcc:	b570      	push	{r4, r5, r6, lr}
   d5dce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5dd0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5dd2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5dd4:	b149      	cbz	r1, d5dea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5dd6:	f002 f8cc 	bl	d7f72 <strlen>
   d5dda:	682b      	ldr	r3, [r5, #0]
   d5ddc:	4602      	mov	r2, r0
   d5dde:	4621      	mov	r1, r4
   d5de0:	4628      	mov	r0, r5
   d5de2:	68db      	ldr	r3, [r3, #12]
    }
   d5de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5de8:	4718      	bx	r3
    }
   d5dea:	bd70      	pop	{r4, r5, r6, pc}

000d5dec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5dec:	6803      	ldr	r3, [r0, #0]
   d5dee:	689b      	ldr	r3, [r3, #8]
   d5df0:	4718      	bx	r3

000d5df2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5df2:	b530      	push	{r4, r5, lr}
   d5df4:	b08b      	sub	sp, #44	; 0x2c
   d5df6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5df8:	2100      	movs	r1, #0
   d5dfa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5dfe:	2a01      	cmp	r2, #1
   d5e00:	bf98      	it	ls
   d5e02:	220a      	movls	r2, #10
   d5e04:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5e08:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5e0c:	fb05 3312 	mls	r3, r5, r2, r3
   d5e10:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e14:	2b09      	cmp	r3, #9
   d5e16:	bf94      	ite	ls
   d5e18:	3330      	addls	r3, #48	; 0x30
   d5e1a:	3337      	addhi	r3, #55	; 0x37
   d5e1c:	b2db      	uxtb	r3, r3
   d5e1e:	4621      	mov	r1, r4
   d5e20:	f804 3901 	strb.w	r3, [r4], #-1
   d5e24:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5e26:	2d00      	cmp	r5, #0
   d5e28:	d1ee      	bne.n	d5e08 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5e2a:	f7ff ffcf 	bl	d5dcc <_ZN5Print5writeEPKc>
}
   d5e2e:	b00b      	add	sp, #44	; 0x2c
   d5e30:	bd30      	pop	{r4, r5, pc}

000d5e32 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5e32:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5e34:	b92a      	cbnz	r2, d5e42 <_ZN5Print5printEmi+0x10>
   d5e36:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5e38:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5e3c:	689b      	ldr	r3, [r3, #8]
   d5e3e:	b2c9      	uxtb	r1, r1
   d5e40:	4718      	bx	r3
  else return printNumber(n, base);
   d5e42:	b2d2      	uxtb	r2, r2
}
   d5e44:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5e48:	f7ff bfd3 	b.w	d5df2 <_ZN5Print11printNumberEmh>

000d5e4c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5e4c:	f7ff bff1 	b.w	d5e32 <_ZN5Print5printEmi>

000d5e50 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e50:	b510      	push	{r4, lr}
   d5e52:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e54:	f7fe feda 	bl	d4c0c <_ZNSt14_Function_baseD1Ev>
   d5e58:	4620      	mov	r0, r4
   d5e5a:	bd10      	pop	{r4, pc}

000d5e5c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e5c:	4803      	ldr	r0, [pc, #12]	; (d5e6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e5e:	4a04      	ldr	r2, [pc, #16]	; (d5e70 <_GLOBAL__sub_I_RGB+0x14>)
   d5e60:	4904      	ldr	r1, [pc, #16]	; (d5e74 <_GLOBAL__sub_I_RGB+0x18>)
   d5e62:	2300      	movs	r3, #0
   d5e64:	6083      	str	r3, [r0, #8]
   d5e66:	f001 b9a9 	b.w	d71bc <__aeabi_atexit>
   d5e6a:	bf00      	nop
   d5e6c:	2003e55c 	.word	0x2003e55c
   d5e70:	2003e1ec 	.word	0x2003e1ec
   d5e74:	000d5e51 	.word	0x000d5e51

000d5e78 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5e78:	4770      	bx	lr

000d5e7a <_ZN8SPIClassD0Ev>:
   d5e7a:	b510      	push	{r4, lr}
   d5e7c:	2110      	movs	r1, #16
   d5e7e:	4604      	mov	r4, r0
   d5e80:	f001 f9a1 	bl	d71c6 <_ZdlPvj>
   d5e84:	4620      	mov	r0, r4
   d5e86:	bd10      	pop	{r4, pc}

000d5e88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5e88:	b570      	push	{r4, r5, r6, lr}
   d5e8a:	4b08      	ldr	r3, [pc, #32]	; (d5eac <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5e8c:	6003      	str	r3, [r0, #0]
   d5e8e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5e90:	2500      	movs	r5, #0
   d5e92:	460e      	mov	r6, r1
   d5e94:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5e98:	f7fe ff7a 	bl	d4d90 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5e9c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5e9e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5ea0:	f7ff f896 	bl	d4fd0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5ea4:	60a5      	str	r5, [r4, #8]
}
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	bd70      	pop	{r4, r5, r6, pc}
   d5eaa:	bf00      	nop
   d5eac:	000d89b4 	.word	0x000d89b4

000d5eb0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5eb0:	7900      	ldrb	r0, [r0, #4]
   d5eb2:	f7ff b895 	b.w	d4fe0 <HAL_SPI_Is_Enabled>

000d5eb6 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5eb6:	2300      	movs	r3, #0
   d5eb8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5eba:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ebc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ebe:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d5ec0:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d5ec2:	680c      	ldr	r4, [r1, #0]
   d5ec4:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d5ec6:	684c      	ldr	r4, [r1, #4]
   d5ec8:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d5eca:	688c      	ldr	r4, [r1, #8]
   d5ecc:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d5ece:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d5ed0:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5ed2:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d5ed4:	bd10      	pop	{r4, pc}

000d5ed6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5ed6:	b510      	push	{r4, lr}
   d5ed8:	4604      	mov	r4, r0
{
	free(buffer);
   d5eda:	6800      	ldr	r0, [r0, #0]
   d5edc:	f7ff f9e4 	bl	d52a8 <free>
}
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	bd10      	pop	{r4, pc}

000d5ee4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5ee4:	b510      	push	{r4, lr}
   d5ee6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ee8:	6800      	ldr	r0, [r0, #0]
   d5eea:	b108      	cbz	r0, d5ef0 <_ZN6String10invalidateEv+0xc>
   d5eec:	f7ff f9dc 	bl	d52a8 <free>
	buffer = NULL;
   d5ef0:	2300      	movs	r3, #0
   d5ef2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5ef4:	60a3      	str	r3, [r4, #8]
   d5ef6:	6063      	str	r3, [r4, #4]
   d5ef8:	bd10      	pop	{r4, pc}

000d5efa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5efa:	b538      	push	{r3, r4, r5, lr}
   d5efc:	4604      	mov	r4, r0
   d5efe:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f00:	6800      	ldr	r0, [r0, #0]
   d5f02:	3101      	adds	r1, #1
   d5f04:	f7ff f9d8 	bl	d52b8 <realloc>
	if (newbuffer) {
   d5f08:	b110      	cbz	r0, d5f10 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f0a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5f0e:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f10:	bd38      	pop	{r3, r4, r5, pc}

000d5f12 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5f12:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f14:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5f16:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f18:	b113      	cbz	r3, d5f20 <_ZN6String7reserveEj+0xe>
   d5f1a:	6843      	ldr	r3, [r0, #4]
   d5f1c:	428b      	cmp	r3, r1
   d5f1e:	d207      	bcs.n	d5f30 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5f20:	4620      	mov	r0, r4
   d5f22:	f7ff ffea 	bl	d5efa <_ZN6String12changeBufferEj>
   d5f26:	b120      	cbz	r0, d5f32 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5f28:	68a3      	ldr	r3, [r4, #8]
   d5f2a:	b90b      	cbnz	r3, d5f30 <_ZN6String7reserveEj+0x1e>
   d5f2c:	6822      	ldr	r2, [r4, #0]
   d5f2e:	7013      	strb	r3, [r2, #0]
   d5f30:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5f32:	bd10      	pop	{r4, pc}

000d5f34 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f34:	b570      	push	{r4, r5, r6, lr}
   d5f36:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5f38:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f3a:	4604      	mov	r4, r0
   d5f3c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5f3e:	f7ff ffe8 	bl	d5f12 <_ZN6String7reserveEj>
   d5f42:	b918      	cbnz	r0, d5f4c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5f44:	4620      	mov	r0, r4
   d5f46:	f7ff ffcd 	bl	d5ee4 <_ZN6String10invalidateEv>
		return *this;
   d5f4a:	e009      	b.n	d5f60 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5f4c:	462a      	mov	r2, r5
   d5f4e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5f50:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f52:	6820      	ldr	r0, [r4, #0]
   d5f54:	f001 ffa4 	bl	d7ea0 <memcpy>
	buffer[len] = 0;
   d5f58:	6822      	ldr	r2, [r4, #0]
   d5f5a:	68a3      	ldr	r3, [r4, #8]
   d5f5c:	2100      	movs	r1, #0
   d5f5e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5f60:	4620      	mov	r0, r4
   d5f62:	bd70      	pop	{r4, r5, r6, pc}

000d5f64 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5f64:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f66:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5f68:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f6a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5f6c:	6043      	str	r3, [r0, #4]
	len = 0;
   d5f6e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f70:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5f72:	460d      	mov	r5, r1
   d5f74:	b139      	cbz	r1, d5f86 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5f76:	4608      	mov	r0, r1
   d5f78:	f001 fffb 	bl	d7f72 <strlen>
   d5f7c:	4629      	mov	r1, r5
   d5f7e:	4602      	mov	r2, r0
   d5f80:	4620      	mov	r0, r4
   d5f82:	f7ff ffd7 	bl	d5f34 <_ZN6String4copyEPKcj>
}
   d5f86:	4620      	mov	r0, r4
   d5f88:	bd38      	pop	{r3, r4, r5, pc}

000d5f8a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5f8a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5f8c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5f8e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5f90:	b912      	cbnz	r2, d5f98 <_ZNK6String6equalsEPKc+0xe>
   d5f92:	b919      	cbnz	r1, d5f9c <_ZNK6String6equalsEPKc+0x12>
   d5f94:	2001      	movs	r0, #1
   d5f96:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5f98:	b911      	cbnz	r1, d5fa0 <_ZNK6String6equalsEPKc+0x16>
   d5f9a:	6803      	ldr	r3, [r0, #0]
   d5f9c:	7818      	ldrb	r0, [r3, #0]
   d5f9e:	e002      	b.n	d5fa6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5fa0:	6800      	ldr	r0, [r0, #0]
   d5fa2:	f001 ffb9 	bl	d7f18 <strcmp>
   d5fa6:	fab0 f080 	clz	r0, r0
   d5faa:	0940      	lsrs	r0, r0, #5
}
   d5fac:	bd08      	pop	{r3, pc}
	...

000d5fb0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5fb0:	4b04      	ldr	r3, [pc, #16]	; (d5fc4 <_GLOBAL__sub_I_System+0x14>)
   d5fb2:	2000      	movs	r0, #0
   d5fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5fb8:	7018      	strb	r0, [r3, #0]
   d5fba:	8058      	strh	r0, [r3, #2]
   d5fbc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5fbe:	f7ff b8a7 	b.w	d5110 <set_system_mode>
   d5fc2:	bf00      	nop
   d5fc4:	2003e56c 	.word	0x2003e56c

000d5fc8 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fca:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fcc:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5fce:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fd2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5fd4:	2201      	movs	r2, #1
   d5fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5fda:	4621      	mov	r1, r4
   d5fdc:	47a8      	blx	r5
}
   d5fde:	b003      	add	sp, #12
   d5fe0:	bd30      	pop	{r4, r5, pc}

000d5fe2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5fe2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5fe4:	6803      	ldr	r3, [r0, #0]
   d5fe6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5fec:	46a4      	mov	ip, r4
}
   d5fee:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5ff2:	4760      	bx	ip

000d5ff4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ff6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5ff8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5ffa:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5ffe:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6000:	4621      	mov	r1, r4
   d6002:	4613      	mov	r3, r2
   d6004:	2201      	movs	r2, #1
   d6006:	47a8      	blx	r5
}
   d6008:	b003      	add	sp, #12
   d600a:	bd30      	pop	{r4, r5, pc}

000d600c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d600c:	4770      	bx	lr

000d600e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d600e:	b538      	push	{r3, r4, r5, lr}
   d6010:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6016:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6018:	da05      	bge.n	d6026 <_ZN9TCPClient9connectedEv+0x18>
   d601a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d601e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6022:	429a      	cmp	r2, r3
   d6024:	d001      	beq.n	d602a <_ZN9TCPClient9connectedEv+0x1c>
   d6026:	2501      	movs	r5, #1
   d6028:	e00b      	b.n	d6042 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d602a:	6803      	ldr	r3, [r0, #0]
   d602c:	691b      	ldr	r3, [r3, #16]
   d602e:	4798      	blx	r3
   d6030:	2800      	cmp	r0, #0
   d6032:	bf14      	ite	ne
   d6034:	2501      	movne	r5, #1
   d6036:	2500      	moveq	r5, #0
        if (!rv) {
   d6038:	d103      	bne.n	d6042 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d603a:	6823      	ldr	r3, [r4, #0]
   d603c:	4620      	mov	r0, r4
   d603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6040:	4798      	blx	r3
        }
    }
    return rv;
}
   d6042:	4628      	mov	r0, r5
   d6044:	bd38      	pop	{r3, r4, r5, pc}

000d6046 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6046:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6048:	6818      	ldr	r0, [r3, #0]
}
   d604a:	43c0      	mvns	r0, r0
   d604c:	0fc0      	lsrs	r0, r0, #31
   d604e:	4770      	bx	lr

000d6050 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6050:	4770      	bx	lr

000d6052 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6052:	2000      	movs	r0, #0
   d6054:	4770      	bx	lr

000d6056 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6056:	b510      	push	{r4, lr}
   d6058:	2114      	movs	r1, #20
   d605a:	4604      	mov	r4, r0
   d605c:	f001 f8b3 	bl	d71c6 <_ZdlPvj>
   d6060:	4620      	mov	r0, r4
   d6062:	bd10      	pop	{r4, pc}

000d6064 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6064:	f7fe b81b 	b.w	d409e <_ZdlPv>

000d6068 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d606c:	4698      	mov	r8, r3
    stop();
   d606e:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6070:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6074:	460c      	mov	r4, r1
   d6076:	4606      	mov	r6, r0
   d6078:	4617      	mov	r7, r2
    stop();
   d607a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d607c:	ab12      	add	r3, sp, #72	; 0x48
   d607e:	2500      	movs	r5, #0
   d6080:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6084:	462a      	mov	r2, r5
   d6086:	4629      	mov	r1, r5
   d6088:	4620      	mov	r0, r4
   d608a:	f7fe ff51 	bl	d4f30 <netdb_getaddrinfo>
   d608e:	2800      	cmp	r0, #0
   d6090:	db3a      	blt.n	d6108 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6092:	9b00      	ldr	r3, [sp, #0]
   d6094:	2b00      	cmp	r3, #0
   d6096:	d039      	beq.n	d610c <_ZN9TCPClient7connectEPKctm+0xa4>
   d6098:	695b      	ldr	r3, [r3, #20]
   d609a:	2b00      	cmp	r3, #0
   d609c:	d036      	beq.n	d610c <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d609e:	a806      	add	r0, sp, #24
   d60a0:	f7ff fcda 	bl	d5a58 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d60a4:	9b00      	ldr	r3, [sp, #0]
   d60a6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d60a8:	7863      	ldrb	r3, [r4, #1]
   d60aa:	2b02      	cmp	r3, #2
   d60ac:	d101      	bne.n	d60b2 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d60ae:	1d21      	adds	r1, r4, #4
   d60b0:	e013      	b.n	d60da <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d60b2:	2b0a      	cmp	r3, #10
   d60b4:	d114      	bne.n	d60e0 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d60b6:	2211      	movs	r2, #17
   d60b8:	4629      	mov	r1, r5
   d60ba:	a801      	add	r0, sp, #4
   d60bc:	f001 fefb 	bl	d7eb6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d60c0:	68a3      	ldr	r3, [r4, #8]
   d60c2:	bb33      	cbnz	r3, d6112 <_ZN9TCPClient7connectEPKctm+0xaa>
   d60c4:	68e3      	ldr	r3, [r4, #12]
   d60c6:	bb23      	cbnz	r3, d6112 <_ZN9TCPClient7connectEPKctm+0xaa>
   d60c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d60cc:	6925      	ldr	r5, [r4, #16]
   d60ce:	f7fe ff0f 	bl	d4ef0 <inet_htonl>
   d60d2:	4285      	cmp	r5, r0
   d60d4:	d11d      	bne.n	d6112 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d60d6:	f104 0114 	add.w	r1, r4, #20
   d60da:	a806      	add	r0, sp, #24
   d60dc:	f7ff fcff 	bl	d5ade <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d60e0:	a806      	add	r0, sp, #24
   d60e2:	f7ff fcd9 	bl	d5a98 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d60e6:	b188      	cbz	r0, d610c <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d60e8:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d60ea:	ad07      	add	r5, sp, #28
   d60ec:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d60f0:	4b18      	ldr	r3, [pc, #96]	; (d6154 <_ZN9TCPClient7connectEPKctm+0xec>)
   d60f2:	930c      	str	r3, [sp, #48]	; 0x30
   d60f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60f6:	ac0d      	add	r4, sp, #52	; 0x34
   d60f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60fa:	682b      	ldr	r3, [r5, #0]
   d60fc:	7023      	strb	r3, [r4, #0]
   d60fe:	463a      	mov	r2, r7
   d6100:	4643      	mov	r3, r8
   d6102:	a90c      	add	r1, sp, #48	; 0x30
   d6104:	4630      	mov	r0, r6
   d6106:	47c8      	blx	r9
   d6108:	4604      	mov	r4, r0
   d610a:	e01c      	b.n	d6146 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d610c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d6110:	e019      	b.n	d6146 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6112:	f104 0308 	add.w	r3, r4, #8
   d6116:	ad01      	add	r5, sp, #4
   d6118:	3418      	adds	r4, #24
   d611a:	6818      	ldr	r0, [r3, #0]
   d611c:	6859      	ldr	r1, [r3, #4]
   d611e:	462a      	mov	r2, r5
   d6120:	c203      	stmia	r2!, {r0, r1}
   d6122:	3308      	adds	r3, #8
   d6124:	42a3      	cmp	r3, r4
   d6126:	4615      	mov	r5, r2
   d6128:	d1f7      	bne.n	d611a <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d612a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d612c:	a901      	add	r1, sp, #4
   d612e:	a80c      	add	r0, sp, #48	; 0x30
   d6130:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6132:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6136:	f7ff fc9d 	bl	d5a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d613a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d613c:	ac07      	add	r4, sp, #28
   d613e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6140:	682b      	ldr	r3, [r5, #0]
   d6142:	7023      	strb	r3, [r4, #0]
   d6144:	e7cc      	b.n	d60e0 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6146:	9800      	ldr	r0, [sp, #0]
   d6148:	f7fe feea 	bl	d4f20 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d614c:	4620      	mov	r0, r4
   d614e:	b013      	add	sp, #76	; 0x4c
   d6150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6154:	000d8858 	.word	0x000d8858

000d6158 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d615a:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d615c:	2200      	movs	r2, #0
   d615e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6160:	9202      	str	r2, [sp, #8]
   d6162:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6164:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6166:	4604      	mov	r4, r0
   d6168:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d616a:	d008      	beq.n	d617e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d616c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6170:	fbb3 f1f2 	udiv	r1, r3, r2
   d6174:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6176:	fb02 3111 	mls	r1, r2, r1, r3
   d617a:	434a      	muls	r2, r1
   d617c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d617e:	6960      	ldr	r0, [r4, #20]
   d6180:	2308      	movs	r3, #8
   d6182:	9300      	str	r3, [sp, #0]
   d6184:	f241 0205 	movw	r2, #4101	; 0x1005
   d6188:	446b      	add	r3, sp
   d618a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d618e:	6800      	ldr	r0, [r0, #0]
   d6190:	f7fe fede 	bl	d4f50 <sock_setsockopt>
    if (ret < 0) {
   d6194:	2800      	cmp	r0, #0
   d6196:	db08      	blt.n	d61aa <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6198:	6960      	ldr	r0, [r4, #20]
   d619a:	2300      	movs	r3, #0
   d619c:	4632      	mov	r2, r6
   d619e:	4629      	mov	r1, r5
   d61a0:	6800      	ldr	r0, [r0, #0]
   d61a2:	f7fe fefd 	bl	d4fa0 <sock_send>
    if (ret < 0) {
   d61a6:	2800      	cmp	r0, #0
   d61a8:	da04      	bge.n	d61b4 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d61aa:	f7ff f8ad 	bl	d5308 <__errno>
   d61ae:	6803      	ldr	r3, [r0, #0]
   d61b0:	6063      	str	r3, [r4, #4]
   d61b2:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d61b4:	b004      	add	sp, #16
   d61b6:	bd70      	pop	{r4, r5, r6, pc}

000d61b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d61b8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d61ba:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d61bc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d61be:	689b      	ldr	r3, [r3, #8]
   d61c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d61c2:	68a3      	ldr	r3, [r4, #8]
   d61c4:	3b01      	subs	r3, #1
   d61c6:	60a3      	str	r3, [r4, #8]
   d61c8:	b92b      	cbnz	r3, d61d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d61ca:	6823      	ldr	r3, [r4, #0]
   d61cc:	4620      	mov	r0, r4
   d61ce:	68db      	ldr	r3, [r3, #12]
        }
    }
   d61d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d61d4:	4718      	bx	r3
   d61d6:	bd10      	pop	{r4, pc}

000d61d8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d61d8:	b570      	push	{r4, r5, r6, lr}
   d61da:	4604      	mov	r4, r0
   d61dc:	694d      	ldr	r5, [r1, #20]
   d61de:	4b05      	ldr	r3, [pc, #20]	; (d61f4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d61e0:	f844 3b04 	str.w	r3, [r4], #4
   d61e4:	358c      	adds	r5, #140	; 0x8c
   d61e6:	4606      	mov	r6, r0
   d61e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61ec:	682b      	ldr	r3, [r5, #0]
   d61ee:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d61f0:	4630      	mov	r0, r6
   d61f2:	bd70      	pop	{r4, r5, r6, pc}
   d61f4:	000d8858 	.word	0x000d8858

000d61f8 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d61f8:	b510      	push	{r4, lr}
   d61fa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d61fc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6200:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6204:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6206:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6208:	d005      	beq.n	d6216 <_ZN9TCPClient4peekEv+0x1e>
   d620a:	6962      	ldr	r2, [r4, #20]
   d620c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6210:	4413      	add	r3, r2
   d6212:	7918      	ldrb	r0, [r3, #4]
   d6214:	bd10      	pop	{r4, pc}
   d6216:	6803      	ldr	r3, [r0, #0]
   d6218:	691b      	ldr	r3, [r3, #16]
   d621a:	4798      	blx	r3
   d621c:	2800      	cmp	r0, #0
   d621e:	d1f4      	bne.n	d620a <_ZN9TCPClient4peekEv+0x12>
   d6220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6224:	bd10      	pop	{r4, pc}

000d6226 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6226:	b510      	push	{r4, lr}
   d6228:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d622a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d622e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6232:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6234:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6236:	d008      	beq.n	d624a <_ZN9TCPClient4readEv+0x24>
   d6238:	6962      	ldr	r2, [r4, #20]
   d623a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d623e:	1c59      	adds	r1, r3, #1
   d6240:	4413      	add	r3, r2
   d6242:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6246:	7918      	ldrb	r0, [r3, #4]
   d6248:	bd10      	pop	{r4, pc}
   d624a:	6803      	ldr	r3, [r0, #0]
   d624c:	691b      	ldr	r3, [r3, #16]
   d624e:	4798      	blx	r3
   d6250:	2800      	cmp	r0, #0
   d6252:	d1f1      	bne.n	d6238 <_ZN9TCPClient4readEv+0x12>
   d6254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6258:	bd10      	pop	{r4, pc}

000d625a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d625a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d625c:	6943      	ldr	r3, [r0, #20]
   d625e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6260:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6264:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6268:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d626a:	4605      	mov	r5, r0
   d626c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d626e:	d106      	bne.n	d627e <_ZN9TCPClient4readEPhj+0x24>
   d6270:	6803      	ldr	r3, [r0, #0]
   d6272:	691b      	ldr	r3, [r3, #16]
   d6274:	4798      	blx	r3
   d6276:	b910      	cbnz	r0, d627e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6278:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d627c:	e014      	b.n	d62a8 <_ZN9TCPClient4readEPhj+0x4e>
   d627e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6280:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6284:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6288:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d628a:	42bc      	cmp	r4, r7
   d628c:	bf28      	it	cs
   d628e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6290:	4419      	add	r1, r3
   d6292:	4622      	mov	r2, r4
   d6294:	3104      	adds	r1, #4
   d6296:	4630      	mov	r0, r6
   d6298:	f001 fe02 	bl	d7ea0 <memcpy>
   d629c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d629e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d62a2:	4423      	add	r3, r4
   d62a4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d62a8:	4620      	mov	r0, r4
   d62aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62ac <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d62ac:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d62ae:	2300      	movs	r3, #0
   d62b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d62b4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d62b6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d62ba:	4770      	bx	lr

000d62bc <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62c0:	4698      	mov	r8, r3
    stop();
   d62c2:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62c4:	460d      	mov	r5, r1
   d62c6:	b08a      	sub	sp, #40	; 0x28
    stop();
   d62c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62ca:	4606      	mov	r6, r0
   d62cc:	4617      	mov	r7, r2
    stop();
   d62ce:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d62d0:	7d2b      	ldrb	r3, [r5, #20]
   d62d2:	6974      	ldr	r4, [r6, #20]
   d62d4:	2b04      	cmp	r3, #4
   d62d6:	bf0c      	ite	eq
   d62d8:	2002      	moveq	r0, #2
   d62da:	200a      	movne	r0, #10
   d62dc:	2206      	movs	r2, #6
   d62de:	2101      	movs	r1, #1
   d62e0:	f7fe fe6e 	bl	d4fc0 <sock_socket>
   d62e4:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d62e6:	6973      	ldr	r3, [r6, #20]
   d62e8:	681c      	ldr	r4, [r3, #0]
   d62ea:	2c00      	cmp	r4, #0
   d62ec:	db5b      	blt.n	d63a6 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d62ee:	4630      	mov	r0, r6
   d62f0:	f7ff ffdc 	bl	d62ac <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d62f4:	f1b8 0f00 	cmp.w	r8, #0
   d62f8:	d017      	beq.n	d632a <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d62fa:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d62fc:	a903      	add	r1, sp, #12
   d62fe:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6302:	9303      	str	r3, [sp, #12]
   d6304:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d6308:	f7fe fde2 	bl	d4ed0 <if_index_to_name>
   d630c:	2800      	cmp	r0, #0
   d630e:	db49      	blt.n	d63a4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d6310:	6970      	ldr	r0, [r6, #20]
   d6312:	2306      	movs	r3, #6
   d6314:	9300      	str	r3, [sp, #0]
   d6316:	f241 020b 	movw	r2, #4107	; 0x100b
   d631a:	ab03      	add	r3, sp, #12
   d631c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6320:	6800      	ldr	r0, [r0, #0]
   d6322:	f7fe fe15 	bl	d4f50 <sock_setsockopt>
   d6326:	2800      	cmp	r0, #0
   d6328:	db3c      	blt.n	d63a4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d632a:	241c      	movs	r4, #28
   d632c:	4622      	mov	r2, r4
   d632e:	2100      	movs	r1, #0
   d6330:	a803      	add	r0, sp, #12
   d6332:	f001 fdc0 	bl	d7eb6 <memset>
    if (ip.version() == 4) {
   d6336:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6338:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d633c:	2b04      	cmp	r3, #4
   d633e:	d10c      	bne.n	d635a <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6340:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6342:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6344:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6348:	f7fe fde2 	bl	d4f10 <inet_htons>
   d634c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6350:	6868      	ldr	r0, [r5, #4]
   d6352:	f7fe fdcd 	bl	d4ef0 <inet_htonl>
   d6356:	9004      	str	r0, [sp, #16]
   d6358:	e013      	b.n	d6382 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d635a:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d635c:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d635e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6362:	f7fe fdd5 	bl	d4f10 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6366:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6368:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d636c:	1d2b      	adds	r3, r5, #4
   d636e:	f105 0714 	add.w	r7, r5, #20
   d6372:	6818      	ldr	r0, [r3, #0]
   d6374:	6859      	ldr	r1, [r3, #4]
   d6376:	4622      	mov	r2, r4
   d6378:	c203      	stmia	r2!, {r0, r1}
   d637a:	3308      	adds	r3, #8
   d637c:	42bb      	cmp	r3, r7
   d637e:	4614      	mov	r4, r2
   d6380:	d1f7      	bne.n	d6372 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d6382:	6973      	ldr	r3, [r6, #20]
   d6384:	221c      	movs	r2, #28
   d6386:	a903      	add	r1, sp, #12
   d6388:	6818      	ldr	r0, [r3, #0]
   d638a:	f7fe fdf1 	bl	d4f70 <sock_connect>
   d638e:	2800      	cmp	r0, #0
   d6390:	db08      	blt.n	d63a4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d6392:	1d2c      	adds	r4, r5, #4
   d6394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6396:	6976      	ldr	r6, [r6, #20]
   d6398:	368c      	adds	r6, #140	; 0x8c
   d639a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d639c:	6823      	ldr	r3, [r4, #0]
   d639e:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d63a0:	2401      	movs	r4, #1
   d63a2:	e004      	b.n	d63ae <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d63a4:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d63a6:	6833      	ldr	r3, [r6, #0]
   d63a8:	4630      	mov	r0, r6
   d63aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63ac:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d63ae:	4620      	mov	r0, r4
   d63b0:	b00a      	add	sp, #40	; 0x28
   d63b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d63b6 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d63b6:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d63b8:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d63ba:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d63bc:	6818      	ldr	r0, [r3, #0]
   d63be:	2800      	cmp	r0, #0
   d63c0:	db01      	blt.n	d63c6 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d63c2:	f7fe fdcd 	bl	d4f60 <sock_close>
   d63c6:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d63c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d63cc:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d63ce:	6960      	ldr	r0, [r4, #20]
   d63d0:	2211      	movs	r2, #17
   d63d2:	2100      	movs	r1, #0
   d63d4:	308c      	adds	r0, #140	; 0x8c
   d63d6:	f001 fd6e 	bl	d7eb6 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d63da:	4620      	mov	r0, r4
}
   d63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d63e0:	f7ff bf64 	b.w	d62ac <_ZN9TCPClient12flush_bufferEv>

000d63e4 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d63e4:	b530      	push	{r4, r5, lr}
   d63e6:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d63e8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d63ec:	b08b      	sub	sp, #44	; 0x2c
   d63ee:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d63f0:	b11b      	cbz	r3, d63fa <_ZN9TCPClient9availableEv+0x16>
   d63f2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d63f6:	429a      	cmp	r2, r3
   d63f8:	d040      	beq.n	d647c <_ZN9TCPClient9availableEv+0x98>
   d63fa:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d63fc:	6818      	ldr	r0, [r3, #0]
   d63fe:	2800      	cmp	r0, #0
   d6400:	db3f      	blt.n	d6482 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6402:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6406:	2d7f      	cmp	r5, #127	; 0x7f
   d6408:	d83b      	bhi.n	d6482 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d640a:	1d19      	adds	r1, r3, #4
   d640c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6410:	2308      	movs	r3, #8
   d6412:	4429      	add	r1, r5
   d6414:	f7fe fdb4 	bl	d4f80 <sock_recv>
            if (ret > 0) {
   d6418:	2800      	cmp	r0, #0
   d641a:	dd0c      	ble.n	d6436 <_ZN9TCPClient9availableEv+0x52>
   d641c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d641e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6422:	b90a      	cbnz	r2, d6428 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6424:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6428:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d642a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d642e:	4418      	add	r0, r3
   d6430:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6434:	e025      	b.n	d6482 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6436:	f7fe ff67 	bl	d5308 <__errno>
   d643a:	6803      	ldr	r3, [r0, #0]
   d643c:	2b0b      	cmp	r3, #11
   d643e:	d020      	beq.n	d6482 <_ZN9TCPClient9availableEv+0x9e>
   d6440:	f7fe ff62 	bl	d5308 <__errno>
   d6444:	6803      	ldr	r3, [r0, #0]
   d6446:	2b0b      	cmp	r3, #11
   d6448:	d01b      	beq.n	d6482 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d644a:	2320      	movs	r3, #32
   d644c:	2500      	movs	r5, #0
   d644e:	9302      	str	r3, [sp, #8]
   d6450:	9503      	str	r5, [sp, #12]
   d6452:	f7fe ff59 	bl	d5308 <__errno>
   d6456:	6803      	ldr	r3, [r0, #0]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	4b0e      	ldr	r3, [pc, #56]	; (d6494 <_ZN9TCPClient9availableEv+0xb0>)
   d645c:	9300      	str	r3, [sp, #0]
   d645e:	aa02      	add	r2, sp, #8
   d6460:	462b      	mov	r3, r5
   d6462:	490d      	ldr	r1, [pc, #52]	; (d6498 <_ZN9TCPClient9availableEv+0xb4>)
   d6464:	2032      	movs	r0, #50	; 0x32
   d6466:	f7fe fe43 	bl	d50f0 <log_message>
                    sock_close(d_->sock);
   d646a:	6963      	ldr	r3, [r4, #20]
   d646c:	6818      	ldr	r0, [r3, #0]
   d646e:	f7fe fd77 	bl	d4f60 <sock_close>
   d6472:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6478:	601a      	str	r2, [r3, #0]
   d647a:	e002      	b.n	d6482 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d647c:	f7ff ff16 	bl	d62ac <_ZN9TCPClient12flush_bufferEv>
   d6480:	e7bb      	b.n	d63fa <_ZN9TCPClient9availableEv+0x16>
   d6482:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6484:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6488:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d648c:	1a18      	subs	r0, r3, r0
}
   d648e:	b00b      	add	sp, #44	; 0x2c
   d6490:	bd30      	pop	{r4, r5, pc}
   d6492:	bf00      	nop
   d6494:	000d8a2b 	.word	0x000d8a2b
   d6498:	000d8a24 	.word	0x000d8a24

000d649c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d649c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d649e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d64a0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d64a2:	6001      	str	r1, [r0, #0]
   d64a4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d64a8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d64ac:	3088      	adds	r0, #136	; 0x88
   d64ae:	f7ff fad3 	bl	d5a58 <_ZN9IPAddressC1Ev>
}
   d64b2:	4620      	mov	r0, r4
   d64b4:	bd10      	pop	{r4, pc}
	...

000d64b8 <_ZN9TCPClientC1Ei>:
   d64b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d64bc:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d64be:	2300      	movs	r3, #0
   d64c0:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d64c2:	4a14      	ldr	r2, [pc, #80]	; (d6514 <_ZN9TCPClientC1Ei+0x5c>)
   d64c4:	6043      	str	r3, [r0, #4]
   d64c6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d64c8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d64ca:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d64cc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64ce:	20a0      	movs	r0, #160	; 0xa0
   d64d0:	460e      	mov	r6, r1
   d64d2:	f7fd fde0 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d64d6:	4605      	mov	r5, r0
   d64d8:	b110      	cbz	r0, d64e0 <_ZN9TCPClientC1Ei+0x28>
   d64da:	4631      	mov	r1, r6
   d64dc:	f7ff ffde 	bl	d649c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64e0:	2014      	movs	r0, #20
   d64e2:	f7fd fdd8 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d64e6:	4603      	mov	r3, r0
   d64e8:	b128      	cbz	r0, d64f6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d64ea:	2201      	movs	r2, #1
   d64ec:	6042      	str	r2, [r0, #4]
   d64ee:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d64f0:	4a09      	ldr	r2, [pc, #36]	; (d6518 <_ZN9TCPClientC1Ei+0x60>)
   d64f2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d64f4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d64f6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d64f8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64fa:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d64fc:	b128      	cbz	r0, d650a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d64fe:	6843      	ldr	r3, [r0, #4]
   d6500:	3b01      	subs	r3, #1
   d6502:	6043      	str	r3, [r0, #4]
   d6504:	b90b      	cbnz	r3, d650a <_ZN9TCPClientC1Ei+0x52>
   d6506:	f7ff fe57 	bl	d61b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d650a:	4620      	mov	r0, r4
   d650c:	f7ff fece 	bl	d62ac <_ZN9TCPClient12flush_bufferEv>
}
   d6510:	4620      	mov	r0, r4
   d6512:	bd70      	pop	{r4, r5, r6, pc}
   d6514:	000d89e0 	.word	0x000d89e0
   d6518:	000d89c4 	.word	0x000d89c4

000d651c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d651c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d651e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6522:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6524:	f7ff ffc8 	bl	d64b8 <_ZN9TCPClientC1Ei>
}
   d6528:	4620      	mov	r0, r4
   d652a:	bd10      	pop	{r4, pc}

000d652c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d652c:	b510      	push	{r4, lr}
   d652e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6530:	6800      	ldr	r0, [r0, #0]
   d6532:	2800      	cmp	r0, #0
   d6534:	db01      	blt.n	d653a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6536:	f7fe fd13 	bl	d4f60 <sock_close>
    }
}
   d653a:	4620      	mov	r0, r4
   d653c:	bd10      	pop	{r4, pc}

000d653e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d653e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6540:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6542:	4620      	mov	r0, r4
   d6544:	f7ff fff2 	bl	d652c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6548:	b124      	cbz	r4, d6554 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d654a:	4620      	mov	r0, r4
   d654c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6550:	f7fd bda5 	b.w	d409e <_ZdlPv>
   d6554:	bd10      	pop	{r4, pc}
	...

000d6558 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6558:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d655a:	4b14      	ldr	r3, [pc, #80]	; (d65ac <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d655c:	4f14      	ldr	r7, [pc, #80]	; (d65b0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d655e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6560:	4b14      	ldr	r3, [pc, #80]	; (d65b4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6562:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d6564:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d6566:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6568:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d656a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d656c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d656e:	d01b      	beq.n	d65a8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6570:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d6572:	ad01      	add	r5, sp, #4
   d6574:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6578:	f001 fb9a 	bl	d7cb0 <localtime>
	calendar_time->tm_year += 1900;
   d657c:	6943      	ldr	r3, [r0, #20]
   d657e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6582:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d6584:	4604      	mov	r4, r0
   d6586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d658a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d658c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d658e:	f8d4 e000 	ldr.w	lr, [r4]
   d6592:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6596:	ad01      	add	r5, sp, #4
   d6598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d659a:	4c07      	ldr	r4, [pc, #28]	; (d65b8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d659c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d659e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d65a2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d65a4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d65a8:	b00b      	add	sp, #44	; 0x2c
   d65aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65ac:	2003e5a4 	.word	0x2003e5a4
   d65b0:	2003e5a0 	.word	0x2003e5a0
   d65b4:	2003e59c 	.word	0x2003e59c
   d65b8:	2003e574 	.word	0x2003e574

000d65bc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d65bc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d65be:	2000      	movs	r0, #0
   d65c0:	f7fe fe0a 	bl	d51d8 <spark_sync_time_pending>
   d65c4:	b128      	cbz	r0, d65d2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d65c6:	f7fe fdf7 	bl	d51b8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d65ca:	f080 0001 	eor.w	r0, r0, #1
   d65ce:	b2c0      	uxtb	r0, r0
   d65d0:	bd08      	pop	{r3, pc}
   d65d2:	2001      	movs	r0, #1
    }
   d65d4:	bd08      	pop	{r3, pc}

000d65d6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d65d6:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d65d8:	2000      	movs	r0, #0
   d65da:	f7fe fc09 	bl	d4df0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d65de:	4604      	mov	r4, r0
   d65e0:	b968      	cbnz	r0, d65fe <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d65e2:	f7fe fd8d 	bl	d5100 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d65e6:	2801      	cmp	r0, #1
   d65e8:	d10b      	bne.n	d6602 <_ZN9TimeClass7isValidEv+0x2c>
   d65ea:	4620      	mov	r0, r4
   d65ec:	f7fe fdb0 	bl	d5150 <system_thread_get_state>
   d65f0:	b938      	cbnz	r0, d6602 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d65f2:	f7ff ffe3 	bl	d65bc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d65f6:	b930      	cbnz	r0, d6606 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d65f8:	f7fe fdd6 	bl	d51a8 <spark_process>
   d65fc:	e7f9      	b.n	d65f2 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d65fe:	2001      	movs	r0, #1
   d6600:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6602:	2000      	movs	r0, #0
   d6604:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6606:	f7ff ffd9 	bl	d65bc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d660a:	2000      	movs	r0, #0
   d660c:	f7fe fbf0 	bl	d4df0 <HAL_RTC_Time_Is_Valid>
   d6610:	3000      	adds	r0, #0
   d6612:	bf18      	it	ne
   d6614:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6616:	bd10      	pop	{r4, pc}

000d6618 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6618:	b508      	push	{r3, lr}
    (void)isValid();
   d661a:	f7ff ffdc 	bl	d65d6 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d661e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6622:	f7fe bbdd 	b.w	d4de0 <HAL_RTC_Get_UnixTime>
	...

000d6628 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d6628:	b508      	push	{r3, lr}
	return minute(now());
   d662a:	f7ff fff5 	bl	d6618 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d662e:	f7ff ff93 	bl	d6558 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d6632:	4b01      	ldr	r3, [pc, #4]	; (d6638 <_ZN9TimeClass6minuteEv+0x10>)
   d6634:	6858      	ldr	r0, [r3, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	2003e574 	.word	0x2003e574

000d663c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d663c:	4b02      	ldr	r3, [pc, #8]	; (d6648 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d663e:	681a      	ldr	r2, [r3, #0]
   d6640:	4b02      	ldr	r3, [pc, #8]	; (d664c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6642:	601a      	str	r2, [r3, #0]
   d6644:	4770      	bx	lr
   d6646:	bf00      	nop
   d6648:	2003e134 	.word	0x2003e134
   d664c:	2003e598 	.word	0x2003e598

000d6650 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6650:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6652:	6804      	ldr	r4, [r0, #0]
   d6654:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6656:	46a4      	mov	ip, r4
    }
   d6658:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d665c:	4760      	bx	ip

000d665e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d665e:	6803      	ldr	r3, [r0, #0]
   d6660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6662:	4718      	bx	r3

000d6664 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6664:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6666:	4770      	bx	lr

000d6668 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6668:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d666a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d666c:	1a10      	subs	r0, r2, r0
   d666e:	4770      	bx	lr

000d6670 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6670:	b513      	push	{r0, r1, r4, lr}
   d6672:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6674:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6676:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d667a:	68d4      	ldr	r4, [r2, #12]
   d667c:	4619      	mov	r1, r3
   d667e:	2201      	movs	r2, #1
   d6680:	47a0      	blx	r4
}
   d6682:	b002      	add	sp, #8
   d6684:	bd10      	pop	{r4, pc}

000d6686 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6686:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6688:	6803      	ldr	r3, [r0, #0]
   d668a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d668c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d668e:	4798      	blx	r3
   d6690:	b128      	cbz	r0, d669e <_ZN3UDP4readEv+0x18>
   d6692:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6694:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6696:	1c59      	adds	r1, r3, #1
   d6698:	86e1      	strh	r1, [r4, #54]	; 0x36
   d669a:	5cd0      	ldrb	r0, [r2, r3]
   d669c:	bd10      	pop	{r4, pc}
   d669e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d66a2:	bd10      	pop	{r4, pc}

000d66a4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d66a4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d66a6:	6803      	ldr	r3, [r0, #0]
   d66a8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d66aa:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d66ac:	4798      	blx	r3
   d66ae:	b118      	cbz	r0, d66b8 <_ZN3UDP4peekEv+0x14>
   d66b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d66b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d66b4:	5cd0      	ldrb	r0, [r2, r3]
   d66b6:	bd10      	pop	{r4, pc}
   d66b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d66bc:	bd10      	pop	{r4, pc}

000d66be <_ZN3UDP5flushEv>:

void UDP::flush() {
   d66be:	4770      	bx	lr

000d66c0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d66c0:	b410      	push	{r4}
   d66c2:	4603      	mov	r3, r0
   d66c4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d66c6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d66c8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d66ca:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d66cc:	6803      	ldr	r3, [r0, #0]
   d66ce:	1a52      	subs	r2, r2, r1
   d66d0:	68db      	ldr	r3, [r3, #12]
   d66d2:	4421      	add	r1, r4
}
   d66d4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d66d8:	4718      	bx	r3

000d66da <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d66da:	f1a0 0010 	sub.w	r0, r0, #16
   d66de:	f7ff bfef 	b.w	d66c0 <_ZNK3UDP7printToER5Print>

000d66e2 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d66e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d66e4:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d66e6:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d66e8:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d66ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d66ec:	4604      	mov	r4, r0
   d66ee:	460f      	mov	r7, r1
   d66f0:	4615      	mov	r5, r2
    stop();
   d66f2:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d66f4:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d66f6:	4632      	mov	r2, r6
   d66f8:	2100      	movs	r1, #0
   d66fa:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d66fc:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d66fe:	f001 fbda 	bl	d7eb6 <memset>
    saddr.sin6_len = sizeof(saddr);
   d6702:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6706:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d6708:	260a      	movs	r6, #10
   d670a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d670e:	f7fe fbff 	bl	d4f10 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6712:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6714:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6718:	2102      	movs	r1, #2
   d671a:	4630      	mov	r0, r6
   d671c:	f7fe fc50 	bl	d4fc0 <sock_socket>

    if (_sock < 0) {
   d6720:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6722:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6724:	db24      	blt.n	d6770 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d6726:	2204      	movs	r2, #4
   d6728:	9200      	str	r2, [sp, #0]
   d672a:	ab02      	add	r3, sp, #8
   d672c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6730:	f7fe fc0e 	bl	d4f50 <sock_setsockopt>
   d6734:	b9e0      	cbnz	r0, d6770 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6736:	b195      	cbz	r5, d675e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d6738:	9003      	str	r0, [sp, #12]
   d673a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d673e:	a903      	add	r1, sp, #12
   d6740:	b2e8      	uxtb	r0, r5
   d6742:	f7fe fbc5 	bl	d4ed0 <if_index_to_name>
   d6746:	b998      	cbnz	r0, d6770 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6748:	2306      	movs	r3, #6
   d674a:	9300      	str	r3, [sp, #0]
   d674c:	f241 020b 	movw	r2, #4107	; 0x100b
   d6750:	ab03      	add	r3, sp, #12
   d6752:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6756:	6960      	ldr	r0, [r4, #20]
   d6758:	f7fe fbfa 	bl	d4f50 <sock_setsockopt>
   d675c:	b940      	cbnz	r0, d6770 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d675e:	221c      	movs	r2, #28
   d6760:	a905      	add	r1, sp, #20
   d6762:	6960      	ldr	r0, [r4, #20]
   d6764:	f7fe fbec 	bl	d4f40 <sock_bind>
   d6768:	b910      	cbnz	r0, d6770 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d676a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d676c:	2001      	movs	r0, #1
   d676e:	e004      	b.n	d677a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6770:	6823      	ldr	r3, [r4, #0]
   d6772:	4620      	mov	r0, r4
   d6774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6776:	4798      	blx	r3
   d6778:	2000      	movs	r0, #0
    }
    return bound;
}
   d677a:	b00d      	add	sp, #52	; 0x34
   d677c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d677e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d677e:	b510      	push	{r4, lr}
   d6780:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6782:	6940      	ldr	r0, [r0, #20]
   d6784:	2800      	cmp	r0, #0
   d6786:	db01      	blt.n	d678c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6788:	f7fe fbea 	bl	d4f60 <sock_close>
    }

    _sock = -1;
   d678c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6790:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6792:	2300      	movs	r3, #0
   d6794:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6796:	8723      	strh	r3, [r4, #56]	; 0x38
   d6798:	bd10      	pop	{r4, pc}

000d679a <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d679a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d679c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d679e:	4605      	mov	r5, r0
   d67a0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d67a2:	b113      	cbz	r3, d67aa <_ZN3UDP5writeEPKhj+0x10>
   d67a4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d67a6:	1a24      	subs	r4, r4, r0
   d67a8:	e000      	b.n	d67ac <_ZN3UDP5writeEPKhj+0x12>
   d67aa:	461c      	mov	r4, r3
   d67ac:	4294      	cmp	r4, r2
   d67ae:	bf28      	it	cs
   d67b0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d67b2:	4622      	mov	r2, r4
   d67b4:	4418      	add	r0, r3
   d67b6:	f001 fb73 	bl	d7ea0 <memcpy>
    _offset += size;
   d67ba:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d67bc:	4423      	add	r3, r4
   d67be:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d67c0:	4620      	mov	r0, r4
   d67c2:	bd38      	pop	{r3, r4, r5, pc}

000d67c4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d67c4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d67c6:	6803      	ldr	r3, [r0, #0]
   d67c8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d67ca:	4604      	mov	r4, r0
   d67cc:	460e      	mov	r6, r1
   d67ce:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d67d0:	4798      	blx	r3
   d67d2:	b188      	cbz	r0, d67f8 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d67d4:	6823      	ldr	r3, [r4, #0]
   d67d6:	4620      	mov	r0, r4
   d67d8:	691b      	ldr	r3, [r3, #16]
   d67da:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d67dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d67de:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d67e0:	4285      	cmp	r5, r0
   d67e2:	bfa8      	it	ge
   d67e4:	4605      	movge	r5, r0
   d67e6:	4419      	add	r1, r3
   d67e8:	462a      	mov	r2, r5
   d67ea:	4630      	mov	r0, r6
   d67ec:	f001 fb58 	bl	d7ea0 <memcpy>
        _offset += read;
   d67f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d67f2:	442b      	add	r3, r5
   d67f4:	86e3      	strh	r3, [r4, #54]	; 0x36
   d67f6:	e001      	b.n	d67fc <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d67f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d67fc:	4628      	mov	r0, r5
   d67fe:	bd70      	pop	{r4, r5, r6, pc}

000d6800 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d6800:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6802:	4604      	mov	r4, r0
   d6804:	4b05      	ldr	r3, [pc, #20]	; (d681c <_ZN3UDP8remoteIPEv+0x1c>)
   d6806:	f844 3b04 	str.w	r3, [r4], #4
   d680a:	f101 0520 	add.w	r5, r1, #32
   d680e:	4606      	mov	r6, r0
   d6810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6814:	682b      	ldr	r3, [r5, #0]
   d6816:	7023      	strb	r3, [r4, #0]
   d6818:	4630      	mov	r0, r6
   d681a:	bd70      	pop	{r4, r5, r6, pc}
   d681c:	000d8858 	.word	0x000d8858

000d6820 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6820:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6822:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6824:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6826:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6828:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d682a:	4a0a      	ldr	r2, [pc, #40]	; (d6854 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d682c:	9202      	str	r2, [sp, #8]
   d682e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6830:	468e      	mov	lr, r1
   d6832:	4606      	mov	r6, r0
   d6834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6836:	ac03      	add	r4, sp, #12
   d6838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d683a:	682b      	ldr	r3, [r5, #0]
   d683c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d683e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6842:	9300      	str	r3, [sp, #0]
   d6844:	4662      	mov	r2, ip
   d6846:	ab02      	add	r3, sp, #8
   d6848:	4671      	mov	r1, lr
   d684a:	4630      	mov	r0, r6
   d684c:	47b8      	blx	r7
    }
   d684e:	b009      	add	sp, #36	; 0x24
   d6850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6852:	bf00      	nop
   d6854:	000d8858 	.word	0x000d8858

000d6858 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6858:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d685a:	6803      	ldr	r3, [r0, #0]
   d685c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6860:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6862:	4b0d      	ldr	r3, [pc, #52]	; (d6898 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6864:	b089      	sub	sp, #36	; 0x24
   d6866:	f100 0620 	add.w	r6, r0, #32
   d686a:	4604      	mov	r4, r0
   d686c:	9302      	str	r3, [sp, #8]
   d686e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6870:	ad03      	add	r5, sp, #12
   d6872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6874:	6833      	ldr	r3, [r6, #0]
   d6876:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6878:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d687a:	9300      	str	r3, [sp, #0]
   d687c:	4672      	mov	r2, lr
   d687e:	ab02      	add	r3, sp, #8
   d6880:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6882:	4620      	mov	r0, r4
   d6884:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6886:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6888:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d688a:	69db      	ldr	r3, [r3, #28]
   d688c:	4620      	mov	r0, r4
   d688e:	4798      	blx	r3
    return result;
}
   d6890:	4628      	mov	r0, r5
   d6892:	b009      	add	sp, #36	; 0x24
   d6894:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6896:	bf00      	nop
   d6898:	000d8858 	.word	0x000d8858

000d689c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d689c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d689e:	7843      	ldrb	r3, [r0, #1]
   d68a0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d68a2:	b08d      	sub	sp, #52	; 0x34
   d68a4:	4605      	mov	r5, r0
   d68a6:	460c      	mov	r4, r1
   d68a8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d68aa:	d101      	bne.n	d68b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d68ac:	1d01      	adds	r1, r0, #4
   d68ae:	e033      	b.n	d6918 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d68b0:	2b0a      	cmp	r3, #10
   d68b2:	d135      	bne.n	d6920 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d68b4:	2211      	movs	r2, #17
   d68b6:	2100      	movs	r1, #0
   d68b8:	a801      	add	r0, sp, #4
   d68ba:	f001 fafc 	bl	d7eb6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d68be:	68ab      	ldr	r3, [r5, #8]
   d68c0:	b943      	cbnz	r3, d68d4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d68c2:	68eb      	ldr	r3, [r5, #12]
   d68c4:	b933      	cbnz	r3, d68d4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d68c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d68ca:	692e      	ldr	r6, [r5, #16]
   d68cc:	f7fe fb10 	bl	d4ef0 <inet_htonl>
   d68d0:	4286      	cmp	r6, r0
   d68d2:	d01f      	beq.n	d6914 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d68d4:	f105 0308 	add.w	r3, r5, #8
   d68d8:	ae01      	add	r6, sp, #4
   d68da:	f105 0e18 	add.w	lr, r5, #24
   d68de:	6818      	ldr	r0, [r3, #0]
   d68e0:	6859      	ldr	r1, [r3, #4]
   d68e2:	4632      	mov	r2, r6
   d68e4:	c203      	stmia	r2!, {r0, r1}
   d68e6:	3308      	adds	r3, #8
   d68e8:	4573      	cmp	r3, lr
   d68ea:	4616      	mov	r6, r2
   d68ec:	d1f7      	bne.n	d68de <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d68ee:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d68f0:	a901      	add	r1, sp, #4
   d68f2:	a806      	add	r0, sp, #24
   d68f4:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d68f6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d68fa:	f7ff f8bb 	bl	d5a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d68fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6900:	3404      	adds	r4, #4
   d6902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6904:	6833      	ldr	r3, [r6, #0]
   d6906:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d6908:	b157      	cbz	r7, d6920 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d690a:	8868      	ldrh	r0, [r5, #2]
   d690c:	f7fe faf8 	bl	d4f00 <inet_ntohs>
   d6910:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6912:	e005      	b.n	d6920 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6914:	f105 0114 	add.w	r1, r5, #20
   d6918:	4620      	mov	r0, r4
   d691a:	f7ff f8e0 	bl	d5ade <_ZN9IPAddressaSEPKh>
   d691e:	e7f3      	b.n	d6908 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6920:	b00d      	add	sp, #52	; 0x34
   d6922:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6924 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6928:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d692a:	ab0e      	add	r3, sp, #56	; 0x38
   d692c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d692e:	4606      	mov	r6, r0
   d6930:	4617      	mov	r7, r2
   d6932:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6934:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6938:	462a      	mov	r2, r5
   d693a:	4629      	mov	r1, r5
   d693c:	f7fe faf8 	bl	d4f30 <netdb_getaddrinfo>
   d6940:	2800      	cmp	r0, #0
   d6942:	db1f      	blt.n	d6984 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6944:	9b01      	ldr	r3, [sp, #4]
   d6946:	b1fb      	cbz	r3, d6988 <_ZN3UDP11beginPacketEPKct+0x64>
   d6948:	695b      	ldr	r3, [r3, #20]
   d694a:	b1eb      	cbz	r3, d6988 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d694c:	a802      	add	r0, sp, #8
   d694e:	f7ff f883 	bl	d5a58 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6952:	9b01      	ldr	r3, [sp, #4]
   d6954:	462a      	mov	r2, r5
   d6956:	6958      	ldr	r0, [r3, #20]
   d6958:	a902      	add	r1, sp, #8
   d695a:	f7ff ff9f 	bl	d689c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d695e:	a802      	add	r0, sp, #8
   d6960:	f7ff f89a 	bl	d5a98 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6964:	b180      	cbz	r0, d6988 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d6966:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6968:	ad03      	add	r5, sp, #12
   d696a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d696e:	4b0b      	ldr	r3, [pc, #44]	; (d699c <_ZN3UDP11beginPacketEPKct+0x78>)
   d6970:	9308      	str	r3, [sp, #32]
   d6972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6974:	ac09      	add	r4, sp, #36	; 0x24
   d6976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6978:	682b      	ldr	r3, [r5, #0]
   d697a:	7023      	strb	r3, [r4, #0]
   d697c:	463a      	mov	r2, r7
   d697e:	a908      	add	r1, sp, #32
   d6980:	4630      	mov	r0, r6
   d6982:	47c0      	blx	r8
   d6984:	4604      	mov	r4, r0
   d6986:	e001      	b.n	d698c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d6988:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d698c:	9801      	ldr	r0, [sp, #4]
   d698e:	f7fe fac7 	bl	d4f20 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6992:	4620      	mov	r0, r4
   d6994:	b00e      	add	sp, #56	; 0x38
   d6996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d699a:	bf00      	nop
   d699c:	000d8858 	.word	0x000d8858

000d69a0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d69a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d69a4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d69a8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d69ac:	b08c      	sub	sp, #48	; 0x30
   d69ae:	4605      	mov	r5, r0
   d69b0:	460c      	mov	r4, r1
   d69b2:	4617      	mov	r7, r2
   d69b4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d69b6:	db00      	blt.n	d69ba <_ZN3UDP13receivePacketEPhjm+0x1a>
   d69b8:	b911      	cbnz	r1, d69c0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d69ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d69be:	e035      	b.n	d6a2c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d69c0:	f04f 0a1c 	mov.w	sl, #28
   d69c4:	ae05      	add	r6, sp, #20
   d69c6:	4652      	mov	r2, sl
   d69c8:	2100      	movs	r1, #0
   d69ca:	4630      	mov	r0, r6
   d69cc:	f001 fa73 	bl	d7eb6 <memset>
        socklen_t slen = sizeof(saddr);
   d69d0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d69d4:	f1b9 0f00 	cmp.w	r9, #0
   d69d8:	d014      	beq.n	d6a04 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d69da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69de:	fbb9 f1f2 	udiv	r1, r9, r2
   d69e2:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d69e4:	fb02 9111 	mls	r1, r2, r1, r9
   d69e8:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d69ea:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d69ec:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d69ee:	9300      	str	r3, [sp, #0]
   d69f0:	f241 0206 	movw	r2, #4102	; 0x1006
   d69f4:	ab03      	add	r3, sp, #12
   d69f6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d69fa:	4640      	mov	r0, r8
   d69fc:	f7fe faa8 	bl	d4f50 <sock_setsockopt>
            if (ret) {
   d6a00:	b108      	cbz	r0, d6a06 <_ZN3UDP13receivePacketEPhjm+0x66>
   d6a02:	e013      	b.n	d6a2c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d6a04:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6a06:	ab02      	add	r3, sp, #8
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	4621      	mov	r1, r4
   d6a0c:	4603      	mov	r3, r0
   d6a0e:	9600      	str	r6, [sp, #0]
   d6a10:	463a      	mov	r2, r7
   d6a12:	6968      	ldr	r0, [r5, #20]
   d6a14:	f7fe fabc 	bl	d4f90 <sock_recvfrom>
        if (ret >= 0) {
   d6a18:	1e04      	subs	r4, r0, #0
   d6a1a:	db06      	blt.n	d6a2a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6a1c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6a20:	f105 011c 	add.w	r1, r5, #28
   d6a24:	4630      	mov	r0, r6
   d6a26:	f7ff ff39 	bl	d689c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6a2a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6a2c:	b00c      	add	sp, #48	; 0x30
   d6a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6a32 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6a32:	b538      	push	{r3, r4, r5, lr}
   d6a34:	4605      	mov	r5, r0
   d6a36:	4614      	mov	r4, r2
   d6a38:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6a3a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6a3c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6a3e:	d111      	bne.n	d6a64 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6a40:	231c      	movs	r3, #28
   d6a42:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6a44:	230a      	movs	r3, #10
   d6a46:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d6a48:	f7fe fa62 	bl	d4f10 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6a4c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6a4e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6a52:	1d2b      	adds	r3, r5, #4
   d6a54:	3514      	adds	r5, #20
   d6a56:	f853 2b04 	ldr.w	r2, [r3], #4
   d6a5a:	f844 2b04 	str.w	r2, [r4], #4
   d6a5e:	42ab      	cmp	r3, r5
   d6a60:	d1f9      	bne.n	d6a56 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6a62:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6a64:	2b04      	cmp	r3, #4
   d6a66:	d10a      	bne.n	d6a7e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d6a68:	2310      	movs	r3, #16
   d6a6a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6a6c:	2302      	movs	r3, #2
   d6a6e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d6a70:	f7fe fa4e 	bl	d4f10 <inet_htons>
   d6a74:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6a76:	6868      	ldr	r0, [r5, #4]
   d6a78:	f7fe fa3a 	bl	d4ef0 <inet_htonl>
   d6a7c:	6060      	str	r0, [r4, #4]
   d6a7e:	bd38      	pop	{r3, r4, r5, pc}

000d6a80 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6a84:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6a86:	ac03      	add	r4, sp, #12
   d6a88:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6a8a:	4699      	mov	r9, r3
   d6a8c:	4606      	mov	r6, r0
   d6a8e:	460f      	mov	r7, r1
   d6a90:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6a92:	2100      	movs	r1, #0
   d6a94:	462a      	mov	r2, r5
   d6a96:	4620      	mov	r0, r4
   d6a98:	f001 fa0d 	bl	d7eb6 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6a9c:	4622      	mov	r2, r4
   d6a9e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d6aa2:	4648      	mov	r0, r9
   d6aa4:	f7ff ffc5 	bl	d6a32 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d6aa8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6aac:	b143      	cbz	r3, d6ac0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d6aae:	e88d 0030 	stmia.w	sp, {r4, r5}
   d6ab2:	2300      	movs	r3, #0
   d6ab4:	4642      	mov	r2, r8
   d6ab6:	4639      	mov	r1, r7
   d6ab8:	6970      	ldr	r0, [r6, #20]
   d6aba:	f7fe fa79 	bl	d4fb0 <sock_sendto>
   d6abe:	e001      	b.n	d6ac4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d6ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d6ac4:	b00b      	add	sp, #44	; 0x2c
   d6ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6acc <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   d6acc:	b538      	push	{r3, r4, r5, lr}
   d6ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ad2:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6ad4:	4b0b      	ldr	r3, [pc, #44]	; (d6b04 <_ZN3UDPC1Ev+0x38>)
   d6ad6:	f103 0208 	add.w	r2, r3, #8
   d6ada:	336c      	adds	r3, #108	; 0x6c
   d6adc:	2500      	movs	r5, #0
   d6ade:	6103      	str	r3, [r0, #16]
   d6ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d6ae4:	4604      	mov	r4, r0
   d6ae6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6ae8:	6002      	str	r2, [r0, #0]
   d6aea:	6143      	str	r3, [r0, #20]
   d6aec:	301c      	adds	r0, #28
   d6aee:	f7fe ffb3 	bl	d5a58 <_ZN9IPAddressC1Ev>
   d6af2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d6af6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d6af8:	8725      	strh	r5, [r4, #56]	; 0x38
   d6afa:	63e5      	str	r5, [r4, #60]	; 0x3c
   d6afc:	6423      	str	r3, [r4, #64]	; 0x40
   d6afe:	6465      	str	r5, [r4, #68]	; 0x44
}
   d6b00:	4620      	mov	r0, r4
   d6b02:	bd38      	pop	{r3, r4, r5, pc}
   d6b04:	000d8a64 	.word	0x000d8a64

000d6b08 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6b08:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d6b0a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6b0e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d6b10:	b123      	cbz	r3, d6b1c <_ZN3UDP13releaseBufferEv+0x14>
   d6b12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6b14:	b110      	cbz	r0, d6b1c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d6b16:	2101      	movs	r1, #1
   d6b18:	f000 fb55 	bl	d71c6 <_ZdlPvj>
    }
    _buffer = NULL;
   d6b1c:	2300      	movs	r3, #0
   d6b1e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d6b20:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d6b24:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6b26:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6b28:	8723      	strh	r3, [r4, #56]	; 0x38
   d6b2a:	bd10      	pop	{r4, pc}

000d6b2c <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d6b2c:	b570      	push	{r4, r5, r6, lr}
   d6b2e:	4604      	mov	r4, r0
   d6b30:	4616      	mov	r6, r2
   d6b32:	460d      	mov	r5, r1
    releaseBuffer();
   d6b34:	f7ff ffe8 	bl	d6b08 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d6b38:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d6b3a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d6b3c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d6b3e:	b93e      	cbnz	r6, d6b50 <_ZN3UDP9setBufferEjPh+0x24>
   d6b40:	b135      	cbz	r5, d6b50 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d6b42:	4628      	mov	r0, r5
   d6b44:	f7fd faa9 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d6b48:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6b4a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d6b4c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d6b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6b52:	b103      	cbz	r3, d6b56 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6b54:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6b56:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6b58:	3000      	adds	r0, #0
   d6b5a:	bf18      	it	ne
   d6b5c:	2001      	movne	r0, #1
   d6b5e:	bd70      	pop	{r4, r5, r6, pc}

000d6b60 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b62:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6b64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6b66:	4605      	mov	r5, r0
   d6b68:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6b6a:	b91a      	cbnz	r2, d6b74 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d6b6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6b6e:	b109      	cbz	r1, d6b74 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d6b70:	f7ff ffdc 	bl	d6b2c <_ZN3UDP9setBufferEjPh>
   d6b74:	3404      	adds	r4, #4
   d6b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6b78:	f105 0620 	add.w	r6, r5, #32
   d6b7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6b7e:	6823      	ldr	r3, [r4, #0]
   d6b80:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6b82:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6b84:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6b86:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6b88:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6b8a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d6b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b8e <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6b8e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d6b90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6b92:	4604      	mov	r4, r0
   d6b94:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d6b96:	b91a      	cbnz	r2, d6ba0 <_ZN3UDP11parsePacketEm+0x12>
   d6b98:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6b9a:	b109      	cbz	r1, d6ba0 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d6b9c:	f7ff ffc6 	bl	d6b2c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6ba0:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6ba2:	2200      	movs	r2, #0
   d6ba4:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d6ba6:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6ba8:	b149      	cbz	r1, d6bbe <_ZN3UDP11parsePacketEm+0x30>
   d6baa:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d6bac:	b13a      	cbz	r2, d6bbe <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d6bae:	6823      	ldr	r3, [r4, #0]
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d6bb4:	4633      	mov	r3, r6
   d6bb6:	47a8      	blx	r5
        if (result > 0) {
   d6bb8:	2800      	cmp	r0, #0
            _total = result;
   d6bba:	bfc8      	it	gt
   d6bbc:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d6bbe:	6823      	ldr	r3, [r4, #0]
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	691b      	ldr	r3, [r3, #16]
}
   d6bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d6bc8:	4718      	bx	r3

000d6bca <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6bca:	4770      	bx	lr

000d6bcc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bcc:	7441      	strb	r1, [r0, #17]
   d6bce:	4770      	bx	lr

000d6bd0 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6bd0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6bd2:	7c00      	ldrb	r0, [r0, #16]
   d6bd4:	f7fe fa44 	bl	d5060 <HAL_USART_Available_Data_For_Write>
}
   d6bd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bdc:	bd08      	pop	{r3, pc}

000d6bde <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6bde:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6be0:	7c00      	ldrb	r0, [r0, #16]
   d6be2:	f7fe fa15 	bl	d5010 <HAL_USART_Available_Data>
}
   d6be6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bea:	bd08      	pop	{r3, pc}

000d6bec <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6bec:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6bee:	7c00      	ldrb	r0, [r0, #16]
   d6bf0:	f7fe fa1e 	bl	d5030 <HAL_USART_Peek_Data>
}
   d6bf4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bf8:	bf28      	it	cs
   d6bfa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6bfe:	bd08      	pop	{r3, pc}

000d6c00 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6c00:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6c02:	7c00      	ldrb	r0, [r0, #16]
   d6c04:	f7fe fa0c 	bl	d5020 <HAL_USART_Read_Data>
}
   d6c08:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c0c:	bf28      	it	cs
   d6c0e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6c12:	bd08      	pop	{r3, pc}

000d6c14 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6c14:	7c00      	ldrb	r0, [r0, #16]
   d6c16:	f7fe ba13 	b.w	d5040 <HAL_USART_Flush_Data>

000d6c1a <_ZN11USARTSerialD0Ev>:
   d6c1a:	b510      	push	{r4, lr}
   d6c1c:	2114      	movs	r1, #20
   d6c1e:	4604      	mov	r4, r0
   d6c20:	f000 fad1 	bl	d71c6 <_ZdlPvj>
   d6c24:	4620      	mov	r0, r4
   d6c26:	bd10      	pop	{r4, pc}

000d6c28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c28:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c2a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c2c:	4604      	mov	r4, r0
   d6c2e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c30:	b925      	cbnz	r5, d6c3c <_ZN11USARTSerial5writeEh+0x14>
   d6c32:	7c00      	ldrb	r0, [r0, #16]
   d6c34:	f7fe fa14 	bl	d5060 <HAL_USART_Available_Data_For_Write>
   d6c38:	2800      	cmp	r0, #0
   d6c3a:	dd05      	ble.n	d6c48 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c3c:	4631      	mov	r1, r6
   d6c3e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c44:	f7fe b9dc 	b.w	d5000 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c48:	4628      	mov	r0, r5
   d6c4a:	bd70      	pop	{r4, r5, r6, pc}

000d6c4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6c4c:	b510      	push	{r4, lr}
   d6c4e:	4604      	mov	r4, r0
   d6c50:	4608      	mov	r0, r1
   d6c52:	4611      	mov	r1, r2
   d6c54:	2200      	movs	r2, #0
   d6c56:	6062      	str	r2, [r4, #4]
   d6c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c5c:	60a2      	str	r2, [r4, #8]
   d6c5e:	4a05      	ldr	r2, [pc, #20]	; (d6c74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6c60:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6c62:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6c64:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6c66:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6c68:	461a      	mov	r2, r3
   d6c6a:	f7fe f9c1 	bl	d4ff0 <HAL_USART_Init>
}
   d6c6e:	4620      	mov	r0, r4
   d6c70:	bd10      	pop	{r4, pc}
   d6c72:	bf00      	nop
   d6c74:	000d8adc 	.word	0x000d8adc

000d6c78 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6c78:	7c00      	ldrb	r0, [r0, #16]
   d6c7a:	f7fe b9e9 	b.w	d5050 <HAL_USART_Is_Enabled>
	...

000d6c80 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c80:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6c82:	4d0c      	ldr	r5, [pc, #48]	; (d6cb4 <_Z22__fetch_global_Serial1v+0x34>)
   d6c84:	6829      	ldr	r1, [r5, #0]
   d6c86:	f011 0401 	ands.w	r4, r1, #1
   d6c8a:	d111      	bne.n	d6cb0 <_Z22__fetch_global_Serial1v+0x30>
   d6c8c:	4628      	mov	r0, r5
   d6c8e:	f7fd fa0a 	bl	d40a6 <__cxa_guard_acquire>
   d6c92:	b168      	cbz	r0, d6cb0 <_Z22__fetch_global_Serial1v+0x30>
   d6c94:	4a08      	ldr	r2, [pc, #32]	; (d6cb8 <_Z22__fetch_global_Serial1v+0x38>)
   d6c96:	4b09      	ldr	r3, [pc, #36]	; (d6cbc <_Z22__fetch_global_Serial1v+0x3c>)
   d6c98:	4809      	ldr	r0, [pc, #36]	; (d6cc0 <_Z22__fetch_global_Serial1v+0x40>)
   d6c9a:	4621      	mov	r1, r4
   d6c9c:	f7ff ffd6 	bl	d6c4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6ca0:	4628      	mov	r0, r5
   d6ca2:	f7fd fa05 	bl	d40b0 <__cxa_guard_release>
   d6ca6:	4a07      	ldr	r2, [pc, #28]	; (d6cc4 <_Z22__fetch_global_Serial1v+0x44>)
   d6ca8:	4907      	ldr	r1, [pc, #28]	; (d6cc8 <_Z22__fetch_global_Serial1v+0x48>)
   d6caa:	4805      	ldr	r0, [pc, #20]	; (d6cc0 <_Z22__fetch_global_Serial1v+0x40>)
   d6cac:	f000 fa86 	bl	d71bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6cb0:	4803      	ldr	r0, [pc, #12]	; (d6cc0 <_Z22__fetch_global_Serial1v+0x40>)
   d6cb2:	bd38      	pop	{r3, r4, r5, pc}
   d6cb4:	2003e640 	.word	0x2003e640
   d6cb8:	2003e644 	.word	0x2003e644
   d6cbc:	2003e5bc 	.word	0x2003e5bc
   d6cc0:	2003e5a8 	.word	0x2003e5a8
   d6cc4:	2003e1ec 	.word	0x2003e1ec
   d6cc8:	000d6bcb 	.word	0x000d6bcb

000d6ccc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ccc:	7441      	strb	r1, [r0, #17]
   d6cce:	4770      	bx	lr

000d6cd0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6cd0:	4770      	bx	lr

000d6cd2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6cd2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6cd4:	2100      	movs	r1, #0
   d6cd6:	7c00      	ldrb	r0, [r0, #16]
   d6cd8:	f7fe f9e2 	bl	d50a0 <HAL_USB_USART_Receive_Data>
}
   d6cdc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ce0:	bf28      	it	cs
   d6ce2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ce6:	bd08      	pop	{r3, pc}

000d6ce8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6ce8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6cea:	2101      	movs	r1, #1
   d6cec:	7c00      	ldrb	r0, [r0, #16]
   d6cee:	f7fe f9d7 	bl	d50a0 <HAL_USB_USART_Receive_Data>
}
   d6cf2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6cf6:	bf28      	it	cs
   d6cf8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6cfc:	bd08      	pop	{r3, pc}

000d6cfe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6cfe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6d00:	7c00      	ldrb	r0, [r0, #16]
   d6d02:	f7fe f9c5 	bl	d5090 <HAL_USB_USART_Available_Data_For_Write>
}
   d6d06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d0a:	bd08      	pop	{r3, pc}

000d6d0c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6d0c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6d0e:	7c00      	ldrb	r0, [r0, #16]
   d6d10:	f7fe f9b6 	bl	d5080 <HAL_USB_USART_Available_Data>
}
   d6d14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d18:	bd08      	pop	{r3, pc}

000d6d1a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6d1a:	7c00      	ldrb	r0, [r0, #16]
   d6d1c:	f7fe b9d0 	b.w	d50c0 <HAL_USB_USART_Flush_Data>

000d6d20 <_ZN9USBSerialD0Ev>:
   d6d20:	b510      	push	{r4, lr}
   d6d22:	2114      	movs	r1, #20
   d6d24:	4604      	mov	r4, r0
   d6d26:	f000 fa4e 	bl	d71c6 <_ZdlPvj>
   d6d2a:	4620      	mov	r0, r4
   d6d2c:	bd10      	pop	{r4, pc}

000d6d2e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6d2e:	b538      	push	{r3, r4, r5, lr}
   d6d30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d32:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6d34:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d36:	f7fe f9ab 	bl	d5090 <HAL_USB_USART_Available_Data_For_Write>
   d6d3a:	2800      	cmp	r0, #0
   d6d3c:	dc01      	bgt.n	d6d42 <_ZN9USBSerial5writeEh+0x14>
   d6d3e:	7c60      	ldrb	r0, [r4, #17]
   d6d40:	b128      	cbz	r0, d6d4e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6d42:	4629      	mov	r1, r5
   d6d44:	7c20      	ldrb	r0, [r4, #16]
   d6d46:	f7fe f9b3 	bl	d50b0 <HAL_USB_USART_Send_Data>
   d6d4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6d4e:	bd38      	pop	{r3, r4, r5, pc}

000d6d50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d50:	b510      	push	{r4, lr}
   d6d52:	4604      	mov	r4, r0
   d6d54:	2300      	movs	r3, #0
   d6d56:	6063      	str	r3, [r4, #4]
   d6d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d5c:	60a3      	str	r3, [r4, #8]
   d6d5e:	4b05      	ldr	r3, [pc, #20]	; (d6d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6d60:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6d62:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d64:	4608      	mov	r0, r1
{
  _serial = serial;
   d6d66:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6d68:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6d6a:	4611      	mov	r1, r2
   d6d6c:	f7fe f980 	bl	d5070 <HAL_USB_USART_Init>
}
   d6d70:	4620      	mov	r0, r4
   d6d72:	bd10      	pop	{r4, pc}
   d6d74:	000d8b0c 	.word	0x000d8b0c

000d6d78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6d7a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d7c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d7e:	2100      	movs	r1, #0
   d6d80:	f001 f899 	bl	d7eb6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6d84:	4620      	mov	r0, r4
   d6d86:	bd10      	pop	{r4, pc}

000d6d88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6d88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d8a:	4d0e      	ldr	r5, [pc, #56]	; (d6dc4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6d8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6d8e:	a801      	add	r0, sp, #4
   d6d90:	f7ff fff2 	bl	d6d78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d94:	6829      	ldr	r1, [r5, #0]
   d6d96:	f011 0401 	ands.w	r4, r1, #1
   d6d9a:	d110      	bne.n	d6dbe <_Z16_fetch_usbserialv+0x36>
   d6d9c:	4628      	mov	r0, r5
   d6d9e:	f7fd f982 	bl	d40a6 <__cxa_guard_acquire>
   d6da2:	b160      	cbz	r0, d6dbe <_Z16_fetch_usbserialv+0x36>
   d6da4:	aa01      	add	r2, sp, #4
   d6da6:	4621      	mov	r1, r4
   d6da8:	4807      	ldr	r0, [pc, #28]	; (d6dc8 <_Z16_fetch_usbserialv+0x40>)
   d6daa:	f7ff ffd1 	bl	d6d50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6dae:	4628      	mov	r0, r5
   d6db0:	f7fd f97e 	bl	d40b0 <__cxa_guard_release>
   d6db4:	4a05      	ldr	r2, [pc, #20]	; (d6dcc <_Z16_fetch_usbserialv+0x44>)
   d6db6:	4906      	ldr	r1, [pc, #24]	; (d6dd0 <_Z16_fetch_usbserialv+0x48>)
   d6db8:	4803      	ldr	r0, [pc, #12]	; (d6dc8 <_Z16_fetch_usbserialv+0x40>)
   d6dba:	f000 f9ff 	bl	d71bc <__aeabi_atexit>
	return _usbserial;
}
   d6dbe:	4802      	ldr	r0, [pc, #8]	; (d6dc8 <_Z16_fetch_usbserialv+0x40>)
   d6dc0:	b007      	add	sp, #28
   d6dc2:	bd30      	pop	{r4, r5, pc}
   d6dc4:	2003e6c8 	.word	0x2003e6c8
   d6dc8:	2003e6cc 	.word	0x2003e6cc
   d6dcc:	2003e1ec 	.word	0x2003e1ec
   d6dd0:	000d6cd1 	.word	0x000d6cd1

000d6dd4 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6dd4:	4770      	bx	lr

000d6dd6 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d6dd6:	2001      	movs	r0, #1
   d6dd8:	4770      	bx	lr
	...

000d6ddc <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d6ddc:	8983      	ldrh	r3, [r0, #12]
   d6dde:	b11b      	cbz	r3, d6de8 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d6de0:	6903      	ldr	r3, [r0, #16]
   d6de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6de6:	d102      	bne.n	d6dee <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d6de8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6e00 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d6dec:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d6dee:	ee07 3a90 	vmov	s15, r3
   d6df2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6e04 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d6df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6dfa:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6dfe:	4770      	bx	lr
   d6e00:	00000000 	.word	0x00000000
   d6e04:	42c80000 	.word	0x42c80000

000d6e08 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d6e08:	8983      	ldrh	r3, [r0, #12]
   d6e0a:	b11b      	cbz	r3, d6e14 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d6e0c:	6983      	ldr	r3, [r0, #24]
   d6e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6e12:	d102      	bne.n	d6e1a <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d6e14:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6e2c <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d6e18:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d6e1a:	ee07 3a90 	vmov	s15, r3
   d6e1e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6e30 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d6e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6e26:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6e2a:	4770      	bx	lr
   d6e2c:	00000000 	.word	0x00000000
   d6e30:	42c80000 	.word	0x42c80000

000d6e34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6e34:	2200      	movs	r2, #0
   d6e36:	4611      	mov	r1, r2
   d6e38:	6840      	ldr	r0, [r0, #4]
   d6e3a:	f7fe b9f5 	b.w	d5228 <network_ready>

000d6e3e <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6e3e:	b510      	push	{r4, lr}
   d6e40:	2124      	movs	r1, #36	; 0x24
   d6e42:	4604      	mov	r4, r0
   d6e44:	f000 f9bf 	bl	d71c6 <_ZdlPvj>
   d6e48:	4620      	mov	r0, r4
   d6e4a:	bd10      	pop	{r4, pc}

000d6e4c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e4c:	2200      	movs	r2, #0
   d6e4e:	4611      	mov	r1, r2
   d6e50:	6840      	ldr	r0, [r0, #4]
   d6e52:	f7fe ba09 	b.w	d5268 <network_listening>

000d6e56 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e56:	2200      	movs	r2, #0
   d6e58:	4611      	mov	r1, r2
   d6e5a:	6840      	ldr	r0, [r0, #4]
   d6e5c:	f7fe ba14 	b.w	d5288 <network_get_listen_timeout>

000d6e60 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e60:	2200      	movs	r2, #0
   d6e62:	6840      	ldr	r0, [r0, #4]
   d6e64:	f7fe ba08 	b.w	d5278 <network_set_listen_timeout>

000d6e68 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e68:	2200      	movs	r2, #0
   d6e6a:	f081 0101 	eor.w	r1, r1, #1
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	f7fe b9f2 	b.w	d5258 <network_listen>

000d6e74 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6e74:	2300      	movs	r3, #0
   d6e76:	461a      	mov	r2, r3
   d6e78:	4619      	mov	r1, r3
   d6e7a:	6840      	ldr	r0, [r0, #4]
   d6e7c:	f7fe b9e4 	b.w	d5248 <network_off>

000d6e80 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6e80:	2300      	movs	r3, #0
   d6e82:	461a      	mov	r2, r3
   d6e84:	4619      	mov	r1, r3
   d6e86:	6840      	ldr	r0, [r0, #4]
   d6e88:	f7fe b9d6 	b.w	d5238 <network_on>

000d6e8c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e8c:	2200      	movs	r2, #0
   d6e8e:	4611      	mov	r1, r2
   d6e90:	6840      	ldr	r0, [r0, #4]
   d6e92:	f7fe b9b9 	b.w	d5208 <network_connecting>

000d6e96 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e96:	2200      	movs	r2, #0
   d6e98:	2102      	movs	r1, #2
   d6e9a:	6840      	ldr	r0, [r0, #4]
   d6e9c:	f7fe b9bc 	b.w	d5218 <network_disconnect>

000d6ea0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ea0:	2300      	movs	r3, #0
   d6ea2:	461a      	mov	r2, r3
   d6ea4:	6840      	ldr	r0, [r0, #4]
   d6ea6:	f7fe b9a7 	b.w	d51f8 <network_connect>
	...

000d6eac <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d6eac:	8983      	ldrh	r3, [r0, #12]
   d6eae:	b17b      	cbz	r3, d6ed0 <_ZNK10WiFiSignal10getQualityEv+0x24>
   d6eb0:	6a03      	ldr	r3, [r0, #32]
   d6eb2:	2b00      	cmp	r3, #0
   d6eb4:	db0c      	blt.n	d6ed0 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d6eb6:	ee07 3a90 	vmov	s15, r3
   d6eba:	eddf 6a07 	vldr	s13, [pc, #28]	; d6ed8 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d6ebe:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6edc <_ZNK10WiFiSignal10getQualityEv+0x30>
   d6ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6eca:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6ece:	4770      	bx	lr
    }
    return -1.0f;
   d6ed0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6ed4:	4770      	bx	lr
   d6ed6:	bf00      	nop
   d6ed8:	477fff00 	.word	0x477fff00
   d6edc:	42c80000 	.word	0x42c80000

000d6ee0 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d6ee0:	8983      	ldrh	r3, [r0, #12]
   d6ee2:	b17b      	cbz	r3, d6f04 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d6ee4:	6943      	ldr	r3, [r0, #20]
   d6ee6:	2b00      	cmp	r3, #0
   d6ee8:	db0c      	blt.n	d6f04 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d6eea:	ee07 3a90 	vmov	s15, r3
   d6eee:	eddf 6a07 	vldr	s13, [pc, #28]	; d6f0c <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d6ef2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6f10 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d6ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6efa:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6efe:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6f02:	4770      	bx	lr
    }
    return -1.0f;
   d6f04:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6f08:	4770      	bx	lr
   d6f0a:	bf00      	nop
   d6f0c:	477fff00 	.word	0x477fff00
   d6f10:	42c80000 	.word	0x42c80000

000d6f14 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6f14:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d6f16:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6f18:	4606      	mov	r6, r0
    inf_ = inf;
   d6f1a:	f100 040c 	add.w	r4, r0, #12
   d6f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f22:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6f26:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d6f2a:	6933      	ldr	r3, [r6, #16]
   d6f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6f30:	bf0e      	itee	eq
   d6f32:	2302      	moveq	r3, #2
   d6f34:	2264      	movne	r2, #100	; 0x64
   d6f36:	fb93 f3f2 	sdivne	r3, r3, r2
   d6f3a:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d6f3c:	69b3      	ldr	r3, [r6, #24]
   d6f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6f42:	bf0e      	itee	eq
   d6f44:	2300      	moveq	r3, #0
   d6f46:	2264      	movne	r2, #100	; 0x64
   d6f48:	fb93 f3f2 	sdivne	r3, r3, r2
   d6f4c:	60b3      	str	r3, [r6, #8]
    return true;
}
   d6f4e:	2001      	movs	r0, #1
   d6f50:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6f54 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d6f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d6f58:	4b16      	ldr	r3, [pc, #88]	; (d6fb4 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d6f5a:	6003      	str	r3, [r0, #0]
   d6f5c:	2500      	movs	r5, #0
   d6f5e:	4688      	mov	r8, r1
   d6f60:	2702      	movs	r7, #2
   d6f62:	2618      	movs	r6, #24
   d6f64:	b086      	sub	sp, #24
   d6f66:	6047      	str	r7, [r0, #4]
   d6f68:	6085      	str	r5, [r0, #8]
   d6f6a:	4632      	mov	r2, r6
   d6f6c:	4629      	mov	r1, r5
   d6f6e:	4604      	mov	r4, r0
   d6f70:	300c      	adds	r0, #12
   d6f72:	f000 ffa0 	bl	d7eb6 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6f76:	462a      	mov	r2, r5
   d6f78:	4629      	mov	r1, r5
   d6f7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d6f7e:	f7fe f953 	bl	d5228 <network_ready>
   d6f82:	b190      	cbz	r0, d6faa <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d6f84:	4632      	mov	r2, r6
   d6f86:	4629      	mov	r1, r5
   d6f88:	4668      	mov	r0, sp
   d6f8a:	f000 ff94 	bl	d7eb6 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d6f8e:	462a      	mov	r2, r5
   d6f90:	4669      	mov	r1, sp
   d6f92:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d6f94:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d6f98:	f7fe f89a 	bl	d50d0 <wlan_connected_info>
        if (r == 0) {
   d6f9c:	b920      	cbnz	r0, d6fa8 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d6f9e:	4669      	mov	r1, sp
   d6fa0:	4620      	mov	r0, r4
   d6fa2:	f7ff ffb7 	bl	d6f14 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d6fa6:	e000      	b.n	d6faa <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d6fa8:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d6faa:	4620      	mov	r0, r4
   d6fac:	b006      	add	sp, #24
   d6fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fb2:	bf00      	nop
   d6fb4:	000d8b70 	.word	0x000d8b70

000d6fb8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6fb8:	4b02      	ldr	r3, [pc, #8]	; (d6fc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6fba:	2204      	movs	r2, #4
   d6fbc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6fbe:	4a02      	ldr	r2, [pc, #8]	; (d6fc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6fc0:	601a      	str	r2, [r3, #0]
   d6fc2:	4770      	bx	lr
   d6fc4:	2003e6e0 	.word	0x2003e6e0
   d6fc8:	000d8b3c 	.word	0x000d8b3c

000d6fcc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6fcc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6fce:	4b0c      	ldr	r3, [pc, #48]	; (d7000 <serialEventRun+0x34>)
   d6fd0:	b133      	cbz	r3, d6fe0 <serialEventRun+0x14>
   d6fd2:	f7ff fed9 	bl	d6d88 <_Z16_fetch_usbserialv>
   d6fd6:	6803      	ldr	r3, [r0, #0]
   d6fd8:	691b      	ldr	r3, [r3, #16]
   d6fda:	4798      	blx	r3
   d6fdc:	2800      	cmp	r0, #0
   d6fde:	dc09      	bgt.n	d6ff4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6fe0:	4b08      	ldr	r3, [pc, #32]	; (d7004 <serialEventRun+0x38>)
   d6fe2:	b163      	cbz	r3, d6ffe <serialEventRun+0x32>
   d6fe4:	f7ff fe4c 	bl	d6c80 <_Z22__fetch_global_Serial1v>
   d6fe8:	6803      	ldr	r3, [r0, #0]
   d6fea:	691b      	ldr	r3, [r3, #16]
   d6fec:	4798      	blx	r3
   d6fee:	2800      	cmp	r0, #0
   d6ff0:	dc03      	bgt.n	d6ffa <serialEventRun+0x2e>
   d6ff2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6ff4:	f3af 8000 	nop.w
   d6ff8:	e7f2      	b.n	d6fe0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6ffa:	f3af 8000 	nop.w
   d6ffe:	bd08      	pop	{r3, pc}
	...

000d7008 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7008:	b508      	push	{r3, lr}
	serialEventRun();
   d700a:	f7ff ffdf 	bl	d6fcc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d700e:	f7fd fedf 	bl	d4dd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7012:	4b01      	ldr	r3, [pc, #4]	; (d7018 <_post_loop+0x10>)
   d7014:	6018      	str	r0, [r3, #0]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	2003e6ec 	.word	0x2003e6ec

000d701c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d701c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d701e:	2300      	movs	r3, #0
   d7020:	9300      	str	r3, [sp, #0]
   d7022:	461a      	mov	r2, r3
   d7024:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7028:	f7fe f8a4 	bl	d5174 <system_ctrl_set_result>
}
   d702c:	b003      	add	sp, #12
   d702e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7034 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7034:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7036:	8843      	ldrh	r3, [r0, #2]
   d7038:	2b0a      	cmp	r3, #10
   d703a:	d008      	beq.n	d704e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d703c:	2b50      	cmp	r3, #80	; 0x50
   d703e:	d109      	bne.n	d7054 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7040:	4b09      	ldr	r3, [pc, #36]	; (d7068 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7042:	681b      	ldr	r3, [r3, #0]
   d7044:	b13b      	cbz	r3, d7056 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7046:	b003      	add	sp, #12
   d7048:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d704c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d704e:	f7ff ffe5 	bl	d701c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7052:	e006      	b.n	d7062 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7054:	2300      	movs	r3, #0
   d7056:	9300      	str	r3, [sp, #0]
   d7058:	461a      	mov	r2, r3
   d705a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d705e:	f7fe f889 	bl	d5174 <system_ctrl_set_result>
        break;
    }
}
   d7062:	b003      	add	sp, #12
   d7064:	f85d fb04 	ldr.w	pc, [sp], #4
   d7068:	2003e6e8 	.word	0x2003e6e8

000d706c <module_user_init_hook>:

void module_user_init_hook()
{
   d706c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d706e:	f7fd fe9f 	bl	d4db0 <HAL_RNG_GetRandomNumber>
   d7072:	4604      	mov	r4, r0
    srand(seed);
   d7074:	f000 ff28 	bl	d7ec8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7078:	4b07      	ldr	r3, [pc, #28]	; (d7098 <module_user_init_hook+0x2c>)
   d707a:	b113      	cbz	r3, d7082 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d707c:	4620      	mov	r0, r4
   d707e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7082:	2100      	movs	r1, #0
   d7084:	4804      	ldr	r0, [pc, #16]	; (d7098 <module_user_init_hook+0x2c>)
   d7086:	f7fe f8af 	bl	d51e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d708a:	2100      	movs	r1, #0
   d708c:	4803      	ldr	r0, [pc, #12]	; (d709c <module_user_init_hook+0x30>)
}
   d708e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7092:	f7fe b865 	b.w	d5160 <system_ctrl_set_app_request_handler>
   d7096:	bf00      	nop
   d7098:	00000000 	.word	0x00000000
   d709c:	000d7035 	.word	0x000d7035

000d70a0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d70a0:	b510      	push	{r4, lr}
   d70a2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d70a4:	480f      	ldr	r0, [pc, #60]	; (d70e4 <pinAvailable+0x44>)
   d70a6:	f7fe ff03 	bl	d5eb0 <_ZN8SPIClass9isEnabledEv>
   d70aa:	b128      	cbz	r0, d70b8 <pinAvailable+0x18>
   d70ac:	f1a4 030b 	sub.w	r3, r4, #11
   d70b0:	2b02      	cmp	r3, #2
   d70b2:	d801      	bhi.n	d70b8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d70b4:	2000      	movs	r0, #0
   d70b6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d70b8:	f000 f83e 	bl	d7138 <_Z19__fetch_global_Wirev>
   d70bc:	f7fe fc8a 	bl	d59d4 <_ZN7TwoWire9isEnabledEv>
   d70c0:	b108      	cbz	r0, d70c6 <pinAvailable+0x26>
   d70c2:	2c01      	cmp	r4, #1
   d70c4:	d9f6      	bls.n	d70b4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d70c6:	f7ff fddb 	bl	d6c80 <_Z22__fetch_global_Serial1v>
   d70ca:	f7ff fdd5 	bl	d6c78 <_ZN11USARTSerial9isEnabledEv>
   d70ce:	b118      	cbz	r0, d70d8 <pinAvailable+0x38>
   d70d0:	f1a4 0309 	sub.w	r3, r4, #9
   d70d4:	2b01      	cmp	r3, #1
   d70d6:	d9ed      	bls.n	d70b4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d70d8:	2c23      	cmp	r4, #35	; 0x23
   d70da:	bf8c      	ite	hi
   d70dc:	2000      	movhi	r0, #0
   d70de:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d70e0:	bd10      	pop	{r4, pc}
   d70e2:	bf00      	nop
   d70e4:	2003e708 	.word	0x2003e708

000d70e8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70e8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d70ea:	b538      	push	{r3, r4, r5, lr}
   d70ec:	4604      	mov	r4, r0
   d70ee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70f0:	d80a      	bhi.n	d7108 <pinMode+0x20>
   d70f2:	29ff      	cmp	r1, #255	; 0xff
   d70f4:	d008      	beq.n	d7108 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d70f6:	f7ff ffd3 	bl	d70a0 <pinAvailable>
   d70fa:	b128      	cbz	r0, d7108 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d70fc:	4629      	mov	r1, r5
   d70fe:	4620      	mov	r0, r4
}
   d7100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7104:	f7fd be8c 	b.w	d4e20 <HAL_Pin_Mode>
   d7108:	bd38      	pop	{r3, r4, r5, pc}

000d710a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d710a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d710c:	b510      	push	{r4, lr}
   d710e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7110:	bf9c      	itt	ls
   d7112:	340e      	addls	r4, #14
   d7114:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7116:	4620      	mov	r0, r4
   d7118:	f7ff ffc2 	bl	d70a0 <pinAvailable>
   d711c:	b150      	cbz	r0, d7134 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d711e:	2103      	movs	r1, #3
   d7120:	4620      	mov	r0, r4
   d7122:	f7fd fe75 	bl	d4e10 <HAL_Validate_Pin_Function>
   d7126:	2803      	cmp	r0, #3
   d7128:	d104      	bne.n	d7134 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d712a:	4620      	mov	r0, r4
}
   d712c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7130:	f7fd be8e 	b.w	d4e50 <HAL_ADC_Read>
}
   d7134:	2000      	movs	r0, #0
   d7136:	bd10      	pop	{r4, pc}

000d7138 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7138:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d713a:	4d0b      	ldr	r5, [pc, #44]	; (d7168 <_Z19__fetch_global_Wirev+0x30>)
   d713c:	6829      	ldr	r1, [r5, #0]
   d713e:	f011 0401 	ands.w	r4, r1, #1
   d7142:	d10f      	bne.n	d7164 <_Z19__fetch_global_Wirev+0x2c>
   d7144:	4628      	mov	r0, r5
   d7146:	f7fc ffae 	bl	d40a6 <__cxa_guard_acquire>
   d714a:	b158      	cbz	r0, d7164 <_Z19__fetch_global_Wirev+0x2c>
   d714c:	4621      	mov	r1, r4
   d714e:	4807      	ldr	r0, [pc, #28]	; (d716c <_Z19__fetch_global_Wirev+0x34>)
   d7150:	f7fe fc2e 	bl	d59b0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7154:	4628      	mov	r0, r5
   d7156:	f7fc ffab 	bl	d40b0 <__cxa_guard_release>
   d715a:	4a05      	ldr	r2, [pc, #20]	; (d7170 <_Z19__fetch_global_Wirev+0x38>)
   d715c:	4905      	ldr	r1, [pc, #20]	; (d7174 <_Z19__fetch_global_Wirev+0x3c>)
   d715e:	4803      	ldr	r0, [pc, #12]	; (d716c <_Z19__fetch_global_Wirev+0x34>)
   d7160:	f000 f82c 	bl	d71bc <__aeabi_atexit>
	return wire;
}
   d7164:	4801      	ldr	r0, [pc, #4]	; (d716c <_Z19__fetch_global_Wirev+0x34>)
   d7166:	bd38      	pop	{r3, r4, r5, pc}
   d7168:	2003e6f0 	.word	0x2003e6f0
   d716c:	2003e6f4 	.word	0x2003e6f4
   d7170:	2003e1ec 	.word	0x2003e1ec
   d7174:	000d5959 	.word	0x000d5959

000d7178 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7178:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d717a:	4c0c      	ldr	r4, [pc, #48]	; (d71ac <_GLOBAL__sub_I_SPI+0x34>)
   d717c:	4e0c      	ldr	r6, [pc, #48]	; (d71b0 <_GLOBAL__sub_I_SPI+0x38>)
   d717e:	4d0d      	ldr	r5, [pc, #52]	; (d71b4 <_GLOBAL__sub_I_SPI+0x3c>)
   d7180:	2100      	movs	r1, #0
   d7182:	4620      	mov	r0, r4
   d7184:	f7fe fe80 	bl	d5e88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7188:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d718a:	4c0b      	ldr	r4, [pc, #44]	; (d71b8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d718c:	4632      	mov	r2, r6
   d718e:	4629      	mov	r1, r5
   d7190:	f000 f814 	bl	d71bc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7194:	2101      	movs	r1, #1
   d7196:	4620      	mov	r0, r4
   d7198:	f7fe fe76 	bl	d5e88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d719c:	4632      	mov	r2, r6
   d719e:	4629      	mov	r1, r5
   d71a0:	4620      	mov	r0, r4
   d71a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d71a6:	f000 b809 	b.w	d71bc <__aeabi_atexit>
   d71aa:	bf00      	nop
   d71ac:	2003e708 	.word	0x2003e708
   d71b0:	2003e1ec 	.word	0x2003e1ec
   d71b4:	000d5e79 	.word	0x000d5e79
   d71b8:	2003e718 	.word	0x2003e718

000d71bc <__aeabi_atexit>:
   d71bc:	460b      	mov	r3, r1
   d71be:	4601      	mov	r1, r0
   d71c0:	4618      	mov	r0, r3
   d71c2:	f000 bd67 	b.w	d7c94 <__cxa_atexit>

000d71c6 <_ZdlPvj>:
   d71c6:	f7fc bf6a 	b.w	d409e <_ZdlPv>

000d71ca <_ZSt25__throw_bad_function_callv>:
   d71ca:	b508      	push	{r3, lr}
   d71cc:	f7fe f88c 	bl	d52e8 <abort>

000d71d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d71d0:	4b24      	ldr	r3, [pc, #144]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d71d2:	681a      	ldr	r2, [r3, #0]
   d71d4:	07d0      	lsls	r0, r2, #31
   d71d6:	bf5c      	itt	pl
   d71d8:	2201      	movpl	r2, #1
   d71da:	601a      	strpl	r2, [r3, #0]
   d71dc:	4b22      	ldr	r3, [pc, #136]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d71de:	681a      	ldr	r2, [r3, #0]
   d71e0:	07d1      	lsls	r1, r2, #31
   d71e2:	bf5c      	itt	pl
   d71e4:	2201      	movpl	r2, #1
   d71e6:	601a      	strpl	r2, [r3, #0]
   d71e8:	4b20      	ldr	r3, [pc, #128]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d71ea:	681a      	ldr	r2, [r3, #0]
   d71ec:	07d2      	lsls	r2, r2, #31
   d71ee:	bf5c      	itt	pl
   d71f0:	2201      	movpl	r2, #1
   d71f2:	601a      	strpl	r2, [r3, #0]
   d71f4:	4b1e      	ldr	r3, [pc, #120]	; (d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d71f6:	681a      	ldr	r2, [r3, #0]
   d71f8:	07d0      	lsls	r0, r2, #31
   d71fa:	bf5c      	itt	pl
   d71fc:	2201      	movpl	r2, #1
   d71fe:	601a      	strpl	r2, [r3, #0]
   d7200:	4b1c      	ldr	r3, [pc, #112]	; (d7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7202:	681a      	ldr	r2, [r3, #0]
   d7204:	07d1      	lsls	r1, r2, #31
   d7206:	bf5c      	itt	pl
   d7208:	2201      	movpl	r2, #1
   d720a:	601a      	strpl	r2, [r3, #0]
   d720c:	4b1a      	ldr	r3, [pc, #104]	; (d7278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d720e:	681a      	ldr	r2, [r3, #0]
   d7210:	07d2      	lsls	r2, r2, #31
   d7212:	bf5c      	itt	pl
   d7214:	2201      	movpl	r2, #1
   d7216:	601a      	strpl	r2, [r3, #0]
   d7218:	4b18      	ldr	r3, [pc, #96]	; (d727c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d721a:	681a      	ldr	r2, [r3, #0]
   d721c:	07d0      	lsls	r0, r2, #31
   d721e:	bf5c      	itt	pl
   d7220:	2201      	movpl	r2, #1
   d7222:	601a      	strpl	r2, [r3, #0]
   d7224:	4b16      	ldr	r3, [pc, #88]	; (d7280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7226:	681a      	ldr	r2, [r3, #0]
   d7228:	07d1      	lsls	r1, r2, #31
   d722a:	bf5c      	itt	pl
   d722c:	2201      	movpl	r2, #1
   d722e:	601a      	strpl	r2, [r3, #0]
   d7230:	4b14      	ldr	r3, [pc, #80]	; (d7284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7232:	681a      	ldr	r2, [r3, #0]
   d7234:	07d2      	lsls	r2, r2, #31
   d7236:	bf5c      	itt	pl
   d7238:	2201      	movpl	r2, #1
   d723a:	601a      	strpl	r2, [r3, #0]
   d723c:	4b12      	ldr	r3, [pc, #72]	; (d7288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d723e:	681a      	ldr	r2, [r3, #0]
   d7240:	07d0      	lsls	r0, r2, #31
   d7242:	bf5c      	itt	pl
   d7244:	2201      	movpl	r2, #1
   d7246:	601a      	strpl	r2, [r3, #0]
   d7248:	4b10      	ldr	r3, [pc, #64]	; (d728c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d724a:	681a      	ldr	r2, [r3, #0]
   d724c:	07d1      	lsls	r1, r2, #31
   d724e:	bf5c      	itt	pl
   d7250:	2201      	movpl	r2, #1
   d7252:	601a      	strpl	r2, [r3, #0]
   d7254:	4b0e      	ldr	r3, [pc, #56]	; (d7290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7256:	681a      	ldr	r2, [r3, #0]
   d7258:	07d2      	lsls	r2, r2, #31
   d725a:	bf5c      	itt	pl
   d725c:	2201      	movpl	r2, #1
   d725e:	601a      	strpl	r2, [r3, #0]
   d7260:	4770      	bx	lr
   d7262:	bf00      	nop
   d7264:	2003e754 	.word	0x2003e754
   d7268:	2003e750 	.word	0x2003e750
   d726c:	2003e74c 	.word	0x2003e74c
   d7270:	2003e748 	.word	0x2003e748
   d7274:	2003e744 	.word	0x2003e744
   d7278:	2003e740 	.word	0x2003e740
   d727c:	2003e73c 	.word	0x2003e73c
   d7280:	2003e738 	.word	0x2003e738
   d7284:	2003e734 	.word	0x2003e734
   d7288:	2003e730 	.word	0x2003e730
   d728c:	2003e72c 	.word	0x2003e72c
   d7290:	2003e728 	.word	0x2003e728

000d7294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7294:	4b18      	ldr	r3, [pc, #96]	; (d72f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7296:	681a      	ldr	r2, [r3, #0]
   d7298:	07d1      	lsls	r1, r2, #31
   d729a:	bf5c      	itt	pl
   d729c:	2201      	movpl	r2, #1
   d729e:	601a      	strpl	r2, [r3, #0]
   d72a0:	4b16      	ldr	r3, [pc, #88]	; (d72fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d72a2:	681a      	ldr	r2, [r3, #0]
   d72a4:	07d2      	lsls	r2, r2, #31
   d72a6:	bf5c      	itt	pl
   d72a8:	2201      	movpl	r2, #1
   d72aa:	601a      	strpl	r2, [r3, #0]
   d72ac:	4b14      	ldr	r3, [pc, #80]	; (d7300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d72ae:	681a      	ldr	r2, [r3, #0]
   d72b0:	07d0      	lsls	r0, r2, #31
   d72b2:	bf5c      	itt	pl
   d72b4:	2201      	movpl	r2, #1
   d72b6:	601a      	strpl	r2, [r3, #0]
   d72b8:	4b12      	ldr	r3, [pc, #72]	; (d7304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d72ba:	681a      	ldr	r2, [r3, #0]
   d72bc:	07d1      	lsls	r1, r2, #31
   d72be:	bf5c      	itt	pl
   d72c0:	2201      	movpl	r2, #1
   d72c2:	601a      	strpl	r2, [r3, #0]
   d72c4:	4b10      	ldr	r3, [pc, #64]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d72c6:	681a      	ldr	r2, [r3, #0]
   d72c8:	07d2      	lsls	r2, r2, #31
   d72ca:	bf5c      	itt	pl
   d72cc:	2201      	movpl	r2, #1
   d72ce:	601a      	strpl	r2, [r3, #0]
   d72d0:	4b0e      	ldr	r3, [pc, #56]	; (d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d72d2:	681a      	ldr	r2, [r3, #0]
   d72d4:	07d0      	lsls	r0, r2, #31
   d72d6:	bf5c      	itt	pl
   d72d8:	2201      	movpl	r2, #1
   d72da:	601a      	strpl	r2, [r3, #0]
   d72dc:	4b0c      	ldr	r3, [pc, #48]	; (d7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d72de:	681a      	ldr	r2, [r3, #0]
   d72e0:	07d1      	lsls	r1, r2, #31
   d72e2:	bf5c      	itt	pl
   d72e4:	2201      	movpl	r2, #1
   d72e6:	601a      	strpl	r2, [r3, #0]
   d72e8:	4b0a      	ldr	r3, [pc, #40]	; (d7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d72ea:	681a      	ldr	r2, [r3, #0]
   d72ec:	07d2      	lsls	r2, r2, #31
   d72ee:	bf5c      	itt	pl
   d72f0:	2201      	movpl	r2, #1
   d72f2:	601a      	strpl	r2, [r3, #0]
   d72f4:	4770      	bx	lr
   d72f6:	bf00      	nop
   d72f8:	2003e774 	.word	0x2003e774
   d72fc:	2003e770 	.word	0x2003e770
   d7300:	2003e76c 	.word	0x2003e76c
   d7304:	2003e768 	.word	0x2003e768
   d7308:	2003e764 	.word	0x2003e764
   d730c:	2003e760 	.word	0x2003e760
   d7310:	2003e75c 	.word	0x2003e75c
   d7314:	2003e758 	.word	0x2003e758

000d7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7318:	4b18      	ldr	r3, [pc, #96]	; (d737c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d731a:	681a      	ldr	r2, [r3, #0]
   d731c:	07d1      	lsls	r1, r2, #31
   d731e:	bf5c      	itt	pl
   d7320:	2201      	movpl	r2, #1
   d7322:	601a      	strpl	r2, [r3, #0]
   d7324:	4b16      	ldr	r3, [pc, #88]	; (d7380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7326:	681a      	ldr	r2, [r3, #0]
   d7328:	07d2      	lsls	r2, r2, #31
   d732a:	bf5c      	itt	pl
   d732c:	2201      	movpl	r2, #1
   d732e:	601a      	strpl	r2, [r3, #0]
   d7330:	4b14      	ldr	r3, [pc, #80]	; (d7384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7332:	681a      	ldr	r2, [r3, #0]
   d7334:	07d0      	lsls	r0, r2, #31
   d7336:	bf5c      	itt	pl
   d7338:	2201      	movpl	r2, #1
   d733a:	601a      	strpl	r2, [r3, #0]
   d733c:	4b12      	ldr	r3, [pc, #72]	; (d7388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d733e:	681a      	ldr	r2, [r3, #0]
   d7340:	07d1      	lsls	r1, r2, #31
   d7342:	bf5c      	itt	pl
   d7344:	2201      	movpl	r2, #1
   d7346:	601a      	strpl	r2, [r3, #0]
   d7348:	4b10      	ldr	r3, [pc, #64]	; (d738c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d734a:	681a      	ldr	r2, [r3, #0]
   d734c:	07d2      	lsls	r2, r2, #31
   d734e:	bf5c      	itt	pl
   d7350:	2201      	movpl	r2, #1
   d7352:	601a      	strpl	r2, [r3, #0]
   d7354:	4b0e      	ldr	r3, [pc, #56]	; (d7390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7356:	681a      	ldr	r2, [r3, #0]
   d7358:	07d0      	lsls	r0, r2, #31
   d735a:	bf5c      	itt	pl
   d735c:	2201      	movpl	r2, #1
   d735e:	601a      	strpl	r2, [r3, #0]
   d7360:	4b0c      	ldr	r3, [pc, #48]	; (d7394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7362:	681a      	ldr	r2, [r3, #0]
   d7364:	07d1      	lsls	r1, r2, #31
   d7366:	bf5c      	itt	pl
   d7368:	2201      	movpl	r2, #1
   d736a:	601a      	strpl	r2, [r3, #0]
   d736c:	4b0a      	ldr	r3, [pc, #40]	; (d7398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d736e:	681a      	ldr	r2, [r3, #0]
   d7370:	07d2      	lsls	r2, r2, #31
   d7372:	bf5c      	itt	pl
   d7374:	2201      	movpl	r2, #1
   d7376:	601a      	strpl	r2, [r3, #0]
   d7378:	4770      	bx	lr
   d737a:	bf00      	nop
   d737c:	2003e794 	.word	0x2003e794
   d7380:	2003e790 	.word	0x2003e790
   d7384:	2003e78c 	.word	0x2003e78c
   d7388:	2003e788 	.word	0x2003e788
   d738c:	2003e784 	.word	0x2003e784
   d7390:	2003e780 	.word	0x2003e780
   d7394:	2003e77c 	.word	0x2003e77c
   d7398:	2003e778 	.word	0x2003e778

000d739c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d739c:	4b24      	ldr	r3, [pc, #144]	; (d7430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d739e:	681a      	ldr	r2, [r3, #0]
   d73a0:	07d0      	lsls	r0, r2, #31
   d73a2:	bf5c      	itt	pl
   d73a4:	2201      	movpl	r2, #1
   d73a6:	601a      	strpl	r2, [r3, #0]
   d73a8:	4b22      	ldr	r3, [pc, #136]	; (d7434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d73aa:	681a      	ldr	r2, [r3, #0]
   d73ac:	07d1      	lsls	r1, r2, #31
   d73ae:	bf5c      	itt	pl
   d73b0:	2201      	movpl	r2, #1
   d73b2:	601a      	strpl	r2, [r3, #0]
   d73b4:	4b20      	ldr	r3, [pc, #128]	; (d7438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	07d2      	lsls	r2, r2, #31
   d73ba:	bf5c      	itt	pl
   d73bc:	2201      	movpl	r2, #1
   d73be:	601a      	strpl	r2, [r3, #0]
   d73c0:	4b1e      	ldr	r3, [pc, #120]	; (d743c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d73c2:	681a      	ldr	r2, [r3, #0]
   d73c4:	07d0      	lsls	r0, r2, #31
   d73c6:	bf5c      	itt	pl
   d73c8:	2201      	movpl	r2, #1
   d73ca:	601a      	strpl	r2, [r3, #0]
   d73cc:	4b1c      	ldr	r3, [pc, #112]	; (d7440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d73ce:	681a      	ldr	r2, [r3, #0]
   d73d0:	07d1      	lsls	r1, r2, #31
   d73d2:	bf5c      	itt	pl
   d73d4:	2201      	movpl	r2, #1
   d73d6:	601a      	strpl	r2, [r3, #0]
   d73d8:	4b1a      	ldr	r3, [pc, #104]	; (d7444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d73da:	681a      	ldr	r2, [r3, #0]
   d73dc:	07d2      	lsls	r2, r2, #31
   d73de:	bf5c      	itt	pl
   d73e0:	2201      	movpl	r2, #1
   d73e2:	601a      	strpl	r2, [r3, #0]
   d73e4:	4b18      	ldr	r3, [pc, #96]	; (d7448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d73e6:	681a      	ldr	r2, [r3, #0]
   d73e8:	07d0      	lsls	r0, r2, #31
   d73ea:	bf5c      	itt	pl
   d73ec:	2201      	movpl	r2, #1
   d73ee:	601a      	strpl	r2, [r3, #0]
   d73f0:	4b16      	ldr	r3, [pc, #88]	; (d744c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d73f2:	681a      	ldr	r2, [r3, #0]
   d73f4:	07d1      	lsls	r1, r2, #31
   d73f6:	bf5c      	itt	pl
   d73f8:	2201      	movpl	r2, #1
   d73fa:	601a      	strpl	r2, [r3, #0]
   d73fc:	4b14      	ldr	r3, [pc, #80]	; (d7450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d73fe:	681a      	ldr	r2, [r3, #0]
   d7400:	07d2      	lsls	r2, r2, #31
   d7402:	bf5c      	itt	pl
   d7404:	2201      	movpl	r2, #1
   d7406:	601a      	strpl	r2, [r3, #0]
   d7408:	4b12      	ldr	r3, [pc, #72]	; (d7454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d740a:	681a      	ldr	r2, [r3, #0]
   d740c:	07d0      	lsls	r0, r2, #31
   d740e:	bf5c      	itt	pl
   d7410:	2201      	movpl	r2, #1
   d7412:	601a      	strpl	r2, [r3, #0]
   d7414:	4b10      	ldr	r3, [pc, #64]	; (d7458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7416:	681a      	ldr	r2, [r3, #0]
   d7418:	07d1      	lsls	r1, r2, #31
   d741a:	bf5c      	itt	pl
   d741c:	2201      	movpl	r2, #1
   d741e:	601a      	strpl	r2, [r3, #0]
   d7420:	4b0e      	ldr	r3, [pc, #56]	; (d745c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7422:	681a      	ldr	r2, [r3, #0]
   d7424:	07d2      	lsls	r2, r2, #31
   d7426:	bf5c      	itt	pl
   d7428:	2201      	movpl	r2, #1
   d742a:	601a      	strpl	r2, [r3, #0]
   d742c:	4770      	bx	lr
   d742e:	bf00      	nop
   d7430:	2003e7c4 	.word	0x2003e7c4
   d7434:	2003e7c0 	.word	0x2003e7c0
   d7438:	2003e7bc 	.word	0x2003e7bc
   d743c:	2003e7b8 	.word	0x2003e7b8
   d7440:	2003e7b4 	.word	0x2003e7b4
   d7444:	2003e7b0 	.word	0x2003e7b0
   d7448:	2003e7ac 	.word	0x2003e7ac
   d744c:	2003e7a8 	.word	0x2003e7a8
   d7450:	2003e7a4 	.word	0x2003e7a4
   d7454:	2003e7a0 	.word	0x2003e7a0
   d7458:	2003e79c 	.word	0x2003e79c
   d745c:	2003e798 	.word	0x2003e798

000d7460 <__aeabi_drsub>:
   d7460:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7464:	e002      	b.n	d746c <__adddf3>
   d7466:	bf00      	nop

000d7468 <__aeabi_dsub>:
   d7468:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d746c <__adddf3>:
   d746c:	b530      	push	{r4, r5, lr}
   d746e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7472:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7476:	ea94 0f05 	teq	r4, r5
   d747a:	bf08      	it	eq
   d747c:	ea90 0f02 	teqeq	r0, r2
   d7480:	bf1f      	itttt	ne
   d7482:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7486:	ea55 0c02 	orrsne.w	ip, r5, r2
   d748a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d748e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7492:	f000 80e2 	beq.w	d765a <__adddf3+0x1ee>
   d7496:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d749a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d749e:	bfb8      	it	lt
   d74a0:	426d      	neglt	r5, r5
   d74a2:	dd0c      	ble.n	d74be <__adddf3+0x52>
   d74a4:	442c      	add	r4, r5
   d74a6:	ea80 0202 	eor.w	r2, r0, r2
   d74aa:	ea81 0303 	eor.w	r3, r1, r3
   d74ae:	ea82 0000 	eor.w	r0, r2, r0
   d74b2:	ea83 0101 	eor.w	r1, r3, r1
   d74b6:	ea80 0202 	eor.w	r2, r0, r2
   d74ba:	ea81 0303 	eor.w	r3, r1, r3
   d74be:	2d36      	cmp	r5, #54	; 0x36
   d74c0:	bf88      	it	hi
   d74c2:	bd30      	pophi	{r4, r5, pc}
   d74c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d74c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d74cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d74d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d74d4:	d002      	beq.n	d74dc <__adddf3+0x70>
   d74d6:	4240      	negs	r0, r0
   d74d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d74dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d74e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d74e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d74e8:	d002      	beq.n	d74f0 <__adddf3+0x84>
   d74ea:	4252      	negs	r2, r2
   d74ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d74f0:	ea94 0f05 	teq	r4, r5
   d74f4:	f000 80a7 	beq.w	d7646 <__adddf3+0x1da>
   d74f8:	f1a4 0401 	sub.w	r4, r4, #1
   d74fc:	f1d5 0e20 	rsbs	lr, r5, #32
   d7500:	db0d      	blt.n	d751e <__adddf3+0xb2>
   d7502:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7506:	fa22 f205 	lsr.w	r2, r2, r5
   d750a:	1880      	adds	r0, r0, r2
   d750c:	f141 0100 	adc.w	r1, r1, #0
   d7510:	fa03 f20e 	lsl.w	r2, r3, lr
   d7514:	1880      	adds	r0, r0, r2
   d7516:	fa43 f305 	asr.w	r3, r3, r5
   d751a:	4159      	adcs	r1, r3
   d751c:	e00e      	b.n	d753c <__adddf3+0xd0>
   d751e:	f1a5 0520 	sub.w	r5, r5, #32
   d7522:	f10e 0e20 	add.w	lr, lr, #32
   d7526:	2a01      	cmp	r2, #1
   d7528:	fa03 fc0e 	lsl.w	ip, r3, lr
   d752c:	bf28      	it	cs
   d752e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7532:	fa43 f305 	asr.w	r3, r3, r5
   d7536:	18c0      	adds	r0, r0, r3
   d7538:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d753c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7540:	d507      	bpl.n	d7552 <__adddf3+0xe6>
   d7542:	f04f 0e00 	mov.w	lr, #0
   d7546:	f1dc 0c00 	rsbs	ip, ip, #0
   d754a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d754e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7552:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7556:	d31b      	bcc.n	d7590 <__adddf3+0x124>
   d7558:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d755c:	d30c      	bcc.n	d7578 <__adddf3+0x10c>
   d755e:	0849      	lsrs	r1, r1, #1
   d7560:	ea5f 0030 	movs.w	r0, r0, rrx
   d7564:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7568:	f104 0401 	add.w	r4, r4, #1
   d756c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7570:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7574:	f080 809a 	bcs.w	d76ac <__adddf3+0x240>
   d7578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d757c:	bf08      	it	eq
   d757e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7582:	f150 0000 	adcs.w	r0, r0, #0
   d7586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d758a:	ea41 0105 	orr.w	r1, r1, r5
   d758e:	bd30      	pop	{r4, r5, pc}
   d7590:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7594:	4140      	adcs	r0, r0
   d7596:	eb41 0101 	adc.w	r1, r1, r1
   d759a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d759e:	f1a4 0401 	sub.w	r4, r4, #1
   d75a2:	d1e9      	bne.n	d7578 <__adddf3+0x10c>
   d75a4:	f091 0f00 	teq	r1, #0
   d75a8:	bf04      	itt	eq
   d75aa:	4601      	moveq	r1, r0
   d75ac:	2000      	moveq	r0, #0
   d75ae:	fab1 f381 	clz	r3, r1
   d75b2:	bf08      	it	eq
   d75b4:	3320      	addeq	r3, #32
   d75b6:	f1a3 030b 	sub.w	r3, r3, #11
   d75ba:	f1b3 0220 	subs.w	r2, r3, #32
   d75be:	da0c      	bge.n	d75da <__adddf3+0x16e>
   d75c0:	320c      	adds	r2, #12
   d75c2:	dd08      	ble.n	d75d6 <__adddf3+0x16a>
   d75c4:	f102 0c14 	add.w	ip, r2, #20
   d75c8:	f1c2 020c 	rsb	r2, r2, #12
   d75cc:	fa01 f00c 	lsl.w	r0, r1, ip
   d75d0:	fa21 f102 	lsr.w	r1, r1, r2
   d75d4:	e00c      	b.n	d75f0 <__adddf3+0x184>
   d75d6:	f102 0214 	add.w	r2, r2, #20
   d75da:	bfd8      	it	le
   d75dc:	f1c2 0c20 	rsble	ip, r2, #32
   d75e0:	fa01 f102 	lsl.w	r1, r1, r2
   d75e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d75e8:	bfdc      	itt	le
   d75ea:	ea41 010c 	orrle.w	r1, r1, ip
   d75ee:	4090      	lslle	r0, r2
   d75f0:	1ae4      	subs	r4, r4, r3
   d75f2:	bfa2      	ittt	ge
   d75f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d75f8:	4329      	orrge	r1, r5
   d75fa:	bd30      	popge	{r4, r5, pc}
   d75fc:	ea6f 0404 	mvn.w	r4, r4
   d7600:	3c1f      	subs	r4, #31
   d7602:	da1c      	bge.n	d763e <__adddf3+0x1d2>
   d7604:	340c      	adds	r4, #12
   d7606:	dc0e      	bgt.n	d7626 <__adddf3+0x1ba>
   d7608:	f104 0414 	add.w	r4, r4, #20
   d760c:	f1c4 0220 	rsb	r2, r4, #32
   d7610:	fa20 f004 	lsr.w	r0, r0, r4
   d7614:	fa01 f302 	lsl.w	r3, r1, r2
   d7618:	ea40 0003 	orr.w	r0, r0, r3
   d761c:	fa21 f304 	lsr.w	r3, r1, r4
   d7620:	ea45 0103 	orr.w	r1, r5, r3
   d7624:	bd30      	pop	{r4, r5, pc}
   d7626:	f1c4 040c 	rsb	r4, r4, #12
   d762a:	f1c4 0220 	rsb	r2, r4, #32
   d762e:	fa20 f002 	lsr.w	r0, r0, r2
   d7632:	fa01 f304 	lsl.w	r3, r1, r4
   d7636:	ea40 0003 	orr.w	r0, r0, r3
   d763a:	4629      	mov	r1, r5
   d763c:	bd30      	pop	{r4, r5, pc}
   d763e:	fa21 f004 	lsr.w	r0, r1, r4
   d7642:	4629      	mov	r1, r5
   d7644:	bd30      	pop	{r4, r5, pc}
   d7646:	f094 0f00 	teq	r4, #0
   d764a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d764e:	bf06      	itte	eq
   d7650:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7654:	3401      	addeq	r4, #1
   d7656:	3d01      	subne	r5, #1
   d7658:	e74e      	b.n	d74f8 <__adddf3+0x8c>
   d765a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d765e:	bf18      	it	ne
   d7660:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7664:	d029      	beq.n	d76ba <__adddf3+0x24e>
   d7666:	ea94 0f05 	teq	r4, r5
   d766a:	bf08      	it	eq
   d766c:	ea90 0f02 	teqeq	r0, r2
   d7670:	d005      	beq.n	d767e <__adddf3+0x212>
   d7672:	ea54 0c00 	orrs.w	ip, r4, r0
   d7676:	bf04      	itt	eq
   d7678:	4619      	moveq	r1, r3
   d767a:	4610      	moveq	r0, r2
   d767c:	bd30      	pop	{r4, r5, pc}
   d767e:	ea91 0f03 	teq	r1, r3
   d7682:	bf1e      	ittt	ne
   d7684:	2100      	movne	r1, #0
   d7686:	2000      	movne	r0, #0
   d7688:	bd30      	popne	{r4, r5, pc}
   d768a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d768e:	d105      	bne.n	d769c <__adddf3+0x230>
   d7690:	0040      	lsls	r0, r0, #1
   d7692:	4149      	adcs	r1, r1
   d7694:	bf28      	it	cs
   d7696:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d769a:	bd30      	pop	{r4, r5, pc}
   d769c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d76a0:	bf3c      	itt	cc
   d76a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d76a6:	bd30      	popcc	{r4, r5, pc}
   d76a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d76ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d76b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d76b4:	f04f 0000 	mov.w	r0, #0
   d76b8:	bd30      	pop	{r4, r5, pc}
   d76ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d76be:	bf1a      	itte	ne
   d76c0:	4619      	movne	r1, r3
   d76c2:	4610      	movne	r0, r2
   d76c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d76c8:	bf1c      	itt	ne
   d76ca:	460b      	movne	r3, r1
   d76cc:	4602      	movne	r2, r0
   d76ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d76d2:	bf06      	itte	eq
   d76d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d76d8:	ea91 0f03 	teqeq	r1, r3
   d76dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d76e0:	bd30      	pop	{r4, r5, pc}
   d76e2:	bf00      	nop

000d76e4 <__aeabi_ui2d>:
   d76e4:	f090 0f00 	teq	r0, #0
   d76e8:	bf04      	itt	eq
   d76ea:	2100      	moveq	r1, #0
   d76ec:	4770      	bxeq	lr
   d76ee:	b530      	push	{r4, r5, lr}
   d76f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d76f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d76f8:	f04f 0500 	mov.w	r5, #0
   d76fc:	f04f 0100 	mov.w	r1, #0
   d7700:	e750      	b.n	d75a4 <__adddf3+0x138>
   d7702:	bf00      	nop

000d7704 <__aeabi_i2d>:
   d7704:	f090 0f00 	teq	r0, #0
   d7708:	bf04      	itt	eq
   d770a:	2100      	moveq	r1, #0
   d770c:	4770      	bxeq	lr
   d770e:	b530      	push	{r4, r5, lr}
   d7710:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7714:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7718:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d771c:	bf48      	it	mi
   d771e:	4240      	negmi	r0, r0
   d7720:	f04f 0100 	mov.w	r1, #0
   d7724:	e73e      	b.n	d75a4 <__adddf3+0x138>
   d7726:	bf00      	nop

000d7728 <__aeabi_f2d>:
   d7728:	0042      	lsls	r2, r0, #1
   d772a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d772e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7732:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7736:	bf1f      	itttt	ne
   d7738:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d773c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7740:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7744:	4770      	bxne	lr
   d7746:	f092 0f00 	teq	r2, #0
   d774a:	bf14      	ite	ne
   d774c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7750:	4770      	bxeq	lr
   d7752:	b530      	push	{r4, r5, lr}
   d7754:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d775c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7760:	e720      	b.n	d75a4 <__adddf3+0x138>
   d7762:	bf00      	nop

000d7764 <__aeabi_ul2d>:
   d7764:	ea50 0201 	orrs.w	r2, r0, r1
   d7768:	bf08      	it	eq
   d776a:	4770      	bxeq	lr
   d776c:	b530      	push	{r4, r5, lr}
   d776e:	f04f 0500 	mov.w	r5, #0
   d7772:	e00a      	b.n	d778a <__aeabi_l2d+0x16>

000d7774 <__aeabi_l2d>:
   d7774:	ea50 0201 	orrs.w	r2, r0, r1
   d7778:	bf08      	it	eq
   d777a:	4770      	bxeq	lr
   d777c:	b530      	push	{r4, r5, lr}
   d777e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7782:	d502      	bpl.n	d778a <__aeabi_l2d+0x16>
   d7784:	4240      	negs	r0, r0
   d7786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d778a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d778e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7796:	f43f aedc 	beq.w	d7552 <__adddf3+0xe6>
   d779a:	f04f 0203 	mov.w	r2, #3
   d779e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d77a2:	bf18      	it	ne
   d77a4:	3203      	addne	r2, #3
   d77a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d77aa:	bf18      	it	ne
   d77ac:	3203      	addne	r2, #3
   d77ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d77b2:	f1c2 0320 	rsb	r3, r2, #32
   d77b6:	fa00 fc03 	lsl.w	ip, r0, r3
   d77ba:	fa20 f002 	lsr.w	r0, r0, r2
   d77be:	fa01 fe03 	lsl.w	lr, r1, r3
   d77c2:	ea40 000e 	orr.w	r0, r0, lr
   d77c6:	fa21 f102 	lsr.w	r1, r1, r2
   d77ca:	4414      	add	r4, r2
   d77cc:	e6c1      	b.n	d7552 <__adddf3+0xe6>
   d77ce:	bf00      	nop

000d77d0 <__aeabi_dmul>:
   d77d0:	b570      	push	{r4, r5, r6, lr}
   d77d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d77d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d77da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d77de:	bf1d      	ittte	ne
   d77e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d77e4:	ea94 0f0c 	teqne	r4, ip
   d77e8:	ea95 0f0c 	teqne	r5, ip
   d77ec:	f000 f8de 	bleq	d79ac <__aeabi_dmul+0x1dc>
   d77f0:	442c      	add	r4, r5
   d77f2:	ea81 0603 	eor.w	r6, r1, r3
   d77f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d77fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d77fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7802:	bf18      	it	ne
   d7804:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d780c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7810:	d038      	beq.n	d7884 <__aeabi_dmul+0xb4>
   d7812:	fba0 ce02 	umull	ip, lr, r0, r2
   d7816:	f04f 0500 	mov.w	r5, #0
   d781a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d781e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7822:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7826:	f04f 0600 	mov.w	r6, #0
   d782a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d782e:	f09c 0f00 	teq	ip, #0
   d7832:	bf18      	it	ne
   d7834:	f04e 0e01 	orrne.w	lr, lr, #1
   d7838:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d783c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7840:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7844:	d204      	bcs.n	d7850 <__aeabi_dmul+0x80>
   d7846:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d784a:	416d      	adcs	r5, r5
   d784c:	eb46 0606 	adc.w	r6, r6, r6
   d7850:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7854:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7858:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d785c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7860:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7864:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7868:	bf88      	it	hi
   d786a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d786e:	d81e      	bhi.n	d78ae <__aeabi_dmul+0xde>
   d7870:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7874:	bf08      	it	eq
   d7876:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d787a:	f150 0000 	adcs.w	r0, r0, #0
   d787e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7882:	bd70      	pop	{r4, r5, r6, pc}
   d7884:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7888:	ea46 0101 	orr.w	r1, r6, r1
   d788c:	ea40 0002 	orr.w	r0, r0, r2
   d7890:	ea81 0103 	eor.w	r1, r1, r3
   d7894:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7898:	bfc2      	ittt	gt
   d789a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d789e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d78a2:	bd70      	popgt	{r4, r5, r6, pc}
   d78a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d78a8:	f04f 0e00 	mov.w	lr, #0
   d78ac:	3c01      	subs	r4, #1
   d78ae:	f300 80ab 	bgt.w	d7a08 <__aeabi_dmul+0x238>
   d78b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d78b6:	bfde      	ittt	le
   d78b8:	2000      	movle	r0, #0
   d78ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d78be:	bd70      	pople	{r4, r5, r6, pc}
   d78c0:	f1c4 0400 	rsb	r4, r4, #0
   d78c4:	3c20      	subs	r4, #32
   d78c6:	da35      	bge.n	d7934 <__aeabi_dmul+0x164>
   d78c8:	340c      	adds	r4, #12
   d78ca:	dc1b      	bgt.n	d7904 <__aeabi_dmul+0x134>
   d78cc:	f104 0414 	add.w	r4, r4, #20
   d78d0:	f1c4 0520 	rsb	r5, r4, #32
   d78d4:	fa00 f305 	lsl.w	r3, r0, r5
   d78d8:	fa20 f004 	lsr.w	r0, r0, r4
   d78dc:	fa01 f205 	lsl.w	r2, r1, r5
   d78e0:	ea40 0002 	orr.w	r0, r0, r2
   d78e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d78e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d78ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d78f0:	fa21 f604 	lsr.w	r6, r1, r4
   d78f4:	eb42 0106 	adc.w	r1, r2, r6
   d78f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d78fc:	bf08      	it	eq
   d78fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7902:	bd70      	pop	{r4, r5, r6, pc}
   d7904:	f1c4 040c 	rsb	r4, r4, #12
   d7908:	f1c4 0520 	rsb	r5, r4, #32
   d790c:	fa00 f304 	lsl.w	r3, r0, r4
   d7910:	fa20 f005 	lsr.w	r0, r0, r5
   d7914:	fa01 f204 	lsl.w	r2, r1, r4
   d7918:	ea40 0002 	orr.w	r0, r0, r2
   d791c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7920:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7924:	f141 0100 	adc.w	r1, r1, #0
   d7928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d792c:	bf08      	it	eq
   d792e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7932:	bd70      	pop	{r4, r5, r6, pc}
   d7934:	f1c4 0520 	rsb	r5, r4, #32
   d7938:	fa00 f205 	lsl.w	r2, r0, r5
   d793c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7940:	fa20 f304 	lsr.w	r3, r0, r4
   d7944:	fa01 f205 	lsl.w	r2, r1, r5
   d7948:	ea43 0302 	orr.w	r3, r3, r2
   d794c:	fa21 f004 	lsr.w	r0, r1, r4
   d7950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7954:	fa21 f204 	lsr.w	r2, r1, r4
   d7958:	ea20 0002 	bic.w	r0, r0, r2
   d795c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7960:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7964:	bf08      	it	eq
   d7966:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d796a:	bd70      	pop	{r4, r5, r6, pc}
   d796c:	f094 0f00 	teq	r4, #0
   d7970:	d10f      	bne.n	d7992 <__aeabi_dmul+0x1c2>
   d7972:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7976:	0040      	lsls	r0, r0, #1
   d7978:	eb41 0101 	adc.w	r1, r1, r1
   d797c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7980:	bf08      	it	eq
   d7982:	3c01      	subeq	r4, #1
   d7984:	d0f7      	beq.n	d7976 <__aeabi_dmul+0x1a6>
   d7986:	ea41 0106 	orr.w	r1, r1, r6
   d798a:	f095 0f00 	teq	r5, #0
   d798e:	bf18      	it	ne
   d7990:	4770      	bxne	lr
   d7992:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7996:	0052      	lsls	r2, r2, #1
   d7998:	eb43 0303 	adc.w	r3, r3, r3
   d799c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d79a0:	bf08      	it	eq
   d79a2:	3d01      	subeq	r5, #1
   d79a4:	d0f7      	beq.n	d7996 <__aeabi_dmul+0x1c6>
   d79a6:	ea43 0306 	orr.w	r3, r3, r6
   d79aa:	4770      	bx	lr
   d79ac:	ea94 0f0c 	teq	r4, ip
   d79b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d79b4:	bf18      	it	ne
   d79b6:	ea95 0f0c 	teqne	r5, ip
   d79ba:	d00c      	beq.n	d79d6 <__aeabi_dmul+0x206>
   d79bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d79c0:	bf18      	it	ne
   d79c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d79c6:	d1d1      	bne.n	d796c <__aeabi_dmul+0x19c>
   d79c8:	ea81 0103 	eor.w	r1, r1, r3
   d79cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d79d0:	f04f 0000 	mov.w	r0, #0
   d79d4:	bd70      	pop	{r4, r5, r6, pc}
   d79d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d79da:	bf06      	itte	eq
   d79dc:	4610      	moveq	r0, r2
   d79de:	4619      	moveq	r1, r3
   d79e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d79e4:	d019      	beq.n	d7a1a <__aeabi_dmul+0x24a>
   d79e6:	ea94 0f0c 	teq	r4, ip
   d79ea:	d102      	bne.n	d79f2 <__aeabi_dmul+0x222>
   d79ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d79f0:	d113      	bne.n	d7a1a <__aeabi_dmul+0x24a>
   d79f2:	ea95 0f0c 	teq	r5, ip
   d79f6:	d105      	bne.n	d7a04 <__aeabi_dmul+0x234>
   d79f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d79fc:	bf1c      	itt	ne
   d79fe:	4610      	movne	r0, r2
   d7a00:	4619      	movne	r1, r3
   d7a02:	d10a      	bne.n	d7a1a <__aeabi_dmul+0x24a>
   d7a04:	ea81 0103 	eor.w	r1, r1, r3
   d7a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7a10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7a14:	f04f 0000 	mov.w	r0, #0
   d7a18:	bd70      	pop	{r4, r5, r6, pc}
   d7a1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7a1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7a22:	bd70      	pop	{r4, r5, r6, pc}

000d7a24 <__aeabi_ddiv>:
   d7a24:	b570      	push	{r4, r5, r6, lr}
   d7a26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7a2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7a2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7a32:	bf1d      	ittte	ne
   d7a34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7a38:	ea94 0f0c 	teqne	r4, ip
   d7a3c:	ea95 0f0c 	teqne	r5, ip
   d7a40:	f000 f8a7 	bleq	d7b92 <__aeabi_ddiv+0x16e>
   d7a44:	eba4 0405 	sub.w	r4, r4, r5
   d7a48:	ea81 0e03 	eor.w	lr, r1, r3
   d7a4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7a50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7a54:	f000 8088 	beq.w	d7b68 <__aeabi_ddiv+0x144>
   d7a58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7a60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7a64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7a68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7a6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7a70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7a74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7a78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7a7c:	429d      	cmp	r5, r3
   d7a7e:	bf08      	it	eq
   d7a80:	4296      	cmpeq	r6, r2
   d7a82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7a86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7a8a:	d202      	bcs.n	d7a92 <__aeabi_ddiv+0x6e>
   d7a8c:	085b      	lsrs	r3, r3, #1
   d7a8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a92:	1ab6      	subs	r6, r6, r2
   d7a94:	eb65 0503 	sbc.w	r5, r5, r3
   d7a98:	085b      	lsrs	r3, r3, #1
   d7a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7aa2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7aa6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7aae:	bf22      	ittt	cs
   d7ab0:	1ab6      	subcs	r6, r6, r2
   d7ab2:	4675      	movcs	r5, lr
   d7ab4:	ea40 000c 	orrcs.w	r0, r0, ip
   d7ab8:	085b      	lsrs	r3, r3, #1
   d7aba:	ea4f 0232 	mov.w	r2, r2, rrx
   d7abe:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ac6:	bf22      	ittt	cs
   d7ac8:	1ab6      	subcs	r6, r6, r2
   d7aca:	4675      	movcs	r5, lr
   d7acc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7ad0:	085b      	lsrs	r3, r3, #1
   d7ad2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ad6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ada:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ade:	bf22      	ittt	cs
   d7ae0:	1ab6      	subcs	r6, r6, r2
   d7ae2:	4675      	movcs	r5, lr
   d7ae4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7ae8:	085b      	lsrs	r3, r3, #1
   d7aea:	ea4f 0232 	mov.w	r2, r2, rrx
   d7aee:	ebb6 0e02 	subs.w	lr, r6, r2
   d7af2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7af6:	bf22      	ittt	cs
   d7af8:	1ab6      	subcs	r6, r6, r2
   d7afa:	4675      	movcs	r5, lr
   d7afc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7b00:	ea55 0e06 	orrs.w	lr, r5, r6
   d7b04:	d018      	beq.n	d7b38 <__aeabi_ddiv+0x114>
   d7b06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7b0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7b0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7b12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7b16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7b1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7b1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7b22:	d1c0      	bne.n	d7aa6 <__aeabi_ddiv+0x82>
   d7b24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b28:	d10b      	bne.n	d7b42 <__aeabi_ddiv+0x11e>
   d7b2a:	ea41 0100 	orr.w	r1, r1, r0
   d7b2e:	f04f 0000 	mov.w	r0, #0
   d7b32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7b36:	e7b6      	b.n	d7aa6 <__aeabi_ddiv+0x82>
   d7b38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b3c:	bf04      	itt	eq
   d7b3e:	4301      	orreq	r1, r0
   d7b40:	2000      	moveq	r0, #0
   d7b42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7b46:	bf88      	it	hi
   d7b48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7b4c:	f63f aeaf 	bhi.w	d78ae <__aeabi_dmul+0xde>
   d7b50:	ebb5 0c03 	subs.w	ip, r5, r3
   d7b54:	bf04      	itt	eq
   d7b56:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7b5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7b5e:	f150 0000 	adcs.w	r0, r0, #0
   d7b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b66:	bd70      	pop	{r4, r5, r6, pc}
   d7b68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7b6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7b70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7b74:	bfc2      	ittt	gt
   d7b76:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7b7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7b7e:	bd70      	popgt	{r4, r5, r6, pc}
   d7b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b84:	f04f 0e00 	mov.w	lr, #0
   d7b88:	3c01      	subs	r4, #1
   d7b8a:	e690      	b.n	d78ae <__aeabi_dmul+0xde>
   d7b8c:	ea45 0e06 	orr.w	lr, r5, r6
   d7b90:	e68d      	b.n	d78ae <__aeabi_dmul+0xde>
   d7b92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7b96:	ea94 0f0c 	teq	r4, ip
   d7b9a:	bf08      	it	eq
   d7b9c:	ea95 0f0c 	teqeq	r5, ip
   d7ba0:	f43f af3b 	beq.w	d7a1a <__aeabi_dmul+0x24a>
   d7ba4:	ea94 0f0c 	teq	r4, ip
   d7ba8:	d10a      	bne.n	d7bc0 <__aeabi_ddiv+0x19c>
   d7baa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7bae:	f47f af34 	bne.w	d7a1a <__aeabi_dmul+0x24a>
   d7bb2:	ea95 0f0c 	teq	r5, ip
   d7bb6:	f47f af25 	bne.w	d7a04 <__aeabi_dmul+0x234>
   d7bba:	4610      	mov	r0, r2
   d7bbc:	4619      	mov	r1, r3
   d7bbe:	e72c      	b.n	d7a1a <__aeabi_dmul+0x24a>
   d7bc0:	ea95 0f0c 	teq	r5, ip
   d7bc4:	d106      	bne.n	d7bd4 <__aeabi_ddiv+0x1b0>
   d7bc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7bca:	f43f aefd 	beq.w	d79c8 <__aeabi_dmul+0x1f8>
   d7bce:	4610      	mov	r0, r2
   d7bd0:	4619      	mov	r1, r3
   d7bd2:	e722      	b.n	d7a1a <__aeabi_dmul+0x24a>
   d7bd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7bd8:	bf18      	it	ne
   d7bda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7bde:	f47f aec5 	bne.w	d796c <__aeabi_dmul+0x19c>
   d7be2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7be6:	f47f af0d 	bne.w	d7a04 <__aeabi_dmul+0x234>
   d7bea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7bee:	f47f aeeb 	bne.w	d79c8 <__aeabi_dmul+0x1f8>
   d7bf2:	e712      	b.n	d7a1a <__aeabi_dmul+0x24a>

000d7bf4 <__aeabi_d2f>:
   d7bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7bfc:	bf24      	itt	cs
   d7bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7c06:	d90d      	bls.n	d7c24 <__aeabi_d2f+0x30>
   d7c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7c1c:	bf08      	it	eq
   d7c1e:	f020 0001 	biceq.w	r0, r0, #1
   d7c22:	4770      	bx	lr
   d7c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7c28:	d121      	bne.n	d7c6e <__aeabi_d2f+0x7a>
   d7c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7c2e:	bfbc      	itt	lt
   d7c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7c34:	4770      	bxlt	lr
   d7c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7c3e:	f1c2 0218 	rsb	r2, r2, #24
   d7c42:	f1c2 0c20 	rsb	ip, r2, #32
   d7c46:	fa10 f30c 	lsls.w	r3, r0, ip
   d7c4a:	fa20 f002 	lsr.w	r0, r0, r2
   d7c4e:	bf18      	it	ne
   d7c50:	f040 0001 	orrne.w	r0, r0, #1
   d7c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7c60:	ea40 000c 	orr.w	r0, r0, ip
   d7c64:	fa23 f302 	lsr.w	r3, r3, r2
   d7c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7c6c:	e7cc      	b.n	d7c08 <__aeabi_d2f+0x14>
   d7c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7c72:	d107      	bne.n	d7c84 <__aeabi_d2f+0x90>
   d7c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7c78:	bf1e      	ittt	ne
   d7c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7c82:	4770      	bxne	lr
   d7c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7c90:	4770      	bx	lr
   d7c92:	bf00      	nop

000d7c94 <__cxa_atexit>:
   d7c94:	b510      	push	{r4, lr}
   d7c96:	4c05      	ldr	r4, [pc, #20]	; (d7cac <__cxa_atexit+0x18>)
   d7c98:	4613      	mov	r3, r2
   d7c9a:	b12c      	cbz	r4, d7ca8 <__cxa_atexit+0x14>
   d7c9c:	460a      	mov	r2, r1
   d7c9e:	4601      	mov	r1, r0
   d7ca0:	2002      	movs	r0, #2
   d7ca2:	f3af 8000 	nop.w
   d7ca6:	bd10      	pop	{r4, pc}
   d7ca8:	4620      	mov	r0, r4
   d7caa:	bd10      	pop	{r4, pc}
   d7cac:	00000000 	.word	0x00000000

000d7cb0 <localtime>:
   d7cb0:	b538      	push	{r3, r4, r5, lr}
   d7cb2:	4b07      	ldr	r3, [pc, #28]	; (d7cd0 <localtime+0x20>)
   d7cb4:	681c      	ldr	r4, [r3, #0]
   d7cb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7cb8:	4605      	mov	r5, r0
   d7cba:	b91b      	cbnz	r3, d7cc4 <localtime+0x14>
   d7cbc:	2024      	movs	r0, #36	; 0x24
   d7cbe:	f7fd faeb 	bl	d5298 <malloc>
   d7cc2:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7cc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7cc6:	4628      	mov	r0, r5
   d7cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7ccc:	f000 b802 	b.w	d7cd4 <localtime_r>
   d7cd0:	2003e19c 	.word	0x2003e19c

000d7cd4 <localtime_r>:
   d7cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7cd8:	460c      	mov	r4, r1
   d7cda:	4680      	mov	r8, r0
   d7cdc:	f000 fc62 	bl	d85a4 <__gettzinfo>
   d7ce0:	4621      	mov	r1, r4
   d7ce2:	4607      	mov	r7, r0
   d7ce4:	4640      	mov	r0, r8
   d7ce6:	f000 fc61 	bl	d85ac <gmtime_r>
   d7cea:	6946      	ldr	r6, [r0, #20]
   d7cec:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7cf0:	07b3      	lsls	r3, r6, #30
   d7cf2:	4604      	mov	r4, r0
   d7cf4:	d105      	bne.n	d7d02 <localtime_r+0x2e>
   d7cf6:	2264      	movs	r2, #100	; 0x64
   d7cf8:	fb96 f3f2 	sdiv	r3, r6, r2
   d7cfc:	fb02 6313 	mls	r3, r2, r3, r6
   d7d00:	b94b      	cbnz	r3, d7d16 <localtime_r+0x42>
   d7d02:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d7d06:	fb96 f3f5 	sdiv	r3, r6, r5
   d7d0a:	fb05 6513 	mls	r5, r5, r3, r6
   d7d0e:	fab5 f385 	clz	r3, r5
   d7d12:	095b      	lsrs	r3, r3, #5
   d7d14:	e000      	b.n	d7d18 <localtime_r+0x44>
   d7d16:	2301      	movs	r3, #1
   d7d18:	4a5f      	ldr	r2, [pc, #380]	; (d7e98 <localtime_r+0x1c4>)
   d7d1a:	2530      	movs	r5, #48	; 0x30
   d7d1c:	fb05 2503 	mla	r5, r5, r3, r2
   d7d20:	f000 fa74 	bl	d820c <__tz_lock>
   d7d24:	f000 fa74 	bl	d8210 <_tzset_unlocked>
   d7d28:	4b5c      	ldr	r3, [pc, #368]	; (d7e9c <localtime_r+0x1c8>)
   d7d2a:	681b      	ldr	r3, [r3, #0]
   d7d2c:	b1f3      	cbz	r3, d7d6c <localtime_r+0x98>
   d7d2e:	687b      	ldr	r3, [r7, #4]
   d7d30:	429e      	cmp	r6, r3
   d7d32:	d105      	bne.n	d7d40 <localtime_r+0x6c>
   d7d34:	6839      	ldr	r1, [r7, #0]
   d7d36:	f8d8 3000 	ldr.w	r3, [r8]
   d7d3a:	69fa      	ldr	r2, [r7, #28]
   d7d3c:	b941      	cbnz	r1, d7d50 <localtime_r+0x7c>
   d7d3e:	e00a      	b.n	d7d56 <localtime_r+0x82>
   d7d40:	4630      	mov	r0, r6
   d7d42:	f000 f9bb 	bl	d80bc <__tzcalc_limits>
   d7d46:	2800      	cmp	r0, #0
   d7d48:	d1f4      	bne.n	d7d34 <localtime_r+0x60>
   d7d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7d4e:	e00d      	b.n	d7d6c <localtime_r+0x98>
   d7d50:	4293      	cmp	r3, r2
   d7d52:	db08      	blt.n	d7d66 <localtime_r+0x92>
   d7d54:	e001      	b.n	d7d5a <localtime_r+0x86>
   d7d56:	4293      	cmp	r3, r2
   d7d58:	da07      	bge.n	d7d6a <localtime_r+0x96>
   d7d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7d5c:	4293      	cmp	r3, r2
   d7d5e:	bfac      	ite	ge
   d7d60:	2300      	movge	r3, #0
   d7d62:	2301      	movlt	r3, #1
   d7d64:	e002      	b.n	d7d6c <localtime_r+0x98>
   d7d66:	2300      	movs	r3, #0
   d7d68:	e000      	b.n	d7d6c <localtime_r+0x98>
   d7d6a:	2301      	movs	r3, #1
   d7d6c:	6223      	str	r3, [r4, #32]
   d7d6e:	6a23      	ldr	r3, [r4, #32]
   d7d70:	2b01      	cmp	r3, #1
   d7d72:	bf0c      	ite	eq
   d7d74:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d7d76:	6a39      	ldrne	r1, [r7, #32]
   d7d78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7d7c:	203c      	movs	r0, #60	; 0x3c
   d7d7e:	fb91 f6f3 	sdiv	r6, r1, r3
   d7d82:	fb03 1316 	mls	r3, r3, r6, r1
   d7d86:	6861      	ldr	r1, [r4, #4]
   d7d88:	fb93 f2f0 	sdiv	r2, r3, r0
   d7d8c:	fb00 3012 	mls	r0, r0, r2, r3
   d7d90:	6823      	ldr	r3, [r4, #0]
   d7d92:	1a89      	subs	r1, r1, r2
   d7d94:	68a2      	ldr	r2, [r4, #8]
   d7d96:	6061      	str	r1, [r4, #4]
   d7d98:	1a1b      	subs	r3, r3, r0
   d7d9a:	1b92      	subs	r2, r2, r6
   d7d9c:	2b3b      	cmp	r3, #59	; 0x3b
   d7d9e:	6023      	str	r3, [r4, #0]
   d7da0:	60a2      	str	r2, [r4, #8]
   d7da2:	dd03      	ble.n	d7dac <localtime_r+0xd8>
   d7da4:	3101      	adds	r1, #1
   d7da6:	6061      	str	r1, [r4, #4]
   d7da8:	3b3c      	subs	r3, #60	; 0x3c
   d7daa:	e004      	b.n	d7db6 <localtime_r+0xe2>
   d7dac:	2b00      	cmp	r3, #0
   d7dae:	da03      	bge.n	d7db8 <localtime_r+0xe4>
   d7db0:	3901      	subs	r1, #1
   d7db2:	6061      	str	r1, [r4, #4]
   d7db4:	333c      	adds	r3, #60	; 0x3c
   d7db6:	6023      	str	r3, [r4, #0]
   d7db8:	6863      	ldr	r3, [r4, #4]
   d7dba:	2b3b      	cmp	r3, #59	; 0x3b
   d7dbc:	dd03      	ble.n	d7dc6 <localtime_r+0xf2>
   d7dbe:	3201      	adds	r2, #1
   d7dc0:	60a2      	str	r2, [r4, #8]
   d7dc2:	3b3c      	subs	r3, #60	; 0x3c
   d7dc4:	e004      	b.n	d7dd0 <localtime_r+0xfc>
   d7dc6:	2b00      	cmp	r3, #0
   d7dc8:	da03      	bge.n	d7dd2 <localtime_r+0xfe>
   d7dca:	3a01      	subs	r2, #1
   d7dcc:	60a2      	str	r2, [r4, #8]
   d7dce:	333c      	adds	r3, #60	; 0x3c
   d7dd0:	6063      	str	r3, [r4, #4]
   d7dd2:	68a3      	ldr	r3, [r4, #8]
   d7dd4:	2b17      	cmp	r3, #23
   d7dd6:	dd22      	ble.n	d7e1e <localtime_r+0x14a>
   d7dd8:	69e2      	ldr	r2, [r4, #28]
   d7dda:	3201      	adds	r2, #1
   d7ddc:	61e2      	str	r2, [r4, #28]
   d7dde:	69a2      	ldr	r2, [r4, #24]
   d7de0:	3201      	adds	r2, #1
   d7de2:	2a06      	cmp	r2, #6
   d7de4:	bfc8      	it	gt
   d7de6:	2200      	movgt	r2, #0
   d7de8:	61a2      	str	r2, [r4, #24]
   d7dea:	68e2      	ldr	r2, [r4, #12]
   d7dec:	3b18      	subs	r3, #24
   d7dee:	3201      	adds	r2, #1
   d7df0:	60a3      	str	r3, [r4, #8]
   d7df2:	6923      	ldr	r3, [r4, #16]
   d7df4:	60e2      	str	r2, [r4, #12]
   d7df6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7dfa:	428a      	cmp	r2, r1
   d7dfc:	dd46      	ble.n	d7e8c <localtime_r+0x1b8>
   d7dfe:	3301      	adds	r3, #1
   d7e00:	2b0c      	cmp	r3, #12
   d7e02:	bf0c      	ite	eq
   d7e04:	6963      	ldreq	r3, [r4, #20]
   d7e06:	6123      	strne	r3, [r4, #16]
   d7e08:	eba2 0201 	sub.w	r2, r2, r1
   d7e0c:	60e2      	str	r2, [r4, #12]
   d7e0e:	bf01      	itttt	eq
   d7e10:	3301      	addeq	r3, #1
   d7e12:	2200      	moveq	r2, #0
   d7e14:	6122      	streq	r2, [r4, #16]
   d7e16:	6163      	streq	r3, [r4, #20]
   d7e18:	bf08      	it	eq
   d7e1a:	61e2      	streq	r2, [r4, #28]
   d7e1c:	e036      	b.n	d7e8c <localtime_r+0x1b8>
   d7e1e:	2b00      	cmp	r3, #0
   d7e20:	da34      	bge.n	d7e8c <localtime_r+0x1b8>
   d7e22:	69e2      	ldr	r2, [r4, #28]
   d7e24:	3a01      	subs	r2, #1
   d7e26:	61e2      	str	r2, [r4, #28]
   d7e28:	69a2      	ldr	r2, [r4, #24]
   d7e2a:	3a01      	subs	r2, #1
   d7e2c:	bf48      	it	mi
   d7e2e:	2206      	movmi	r2, #6
   d7e30:	61a2      	str	r2, [r4, #24]
   d7e32:	68e2      	ldr	r2, [r4, #12]
   d7e34:	3318      	adds	r3, #24
   d7e36:	3a01      	subs	r2, #1
   d7e38:	60e2      	str	r2, [r4, #12]
   d7e3a:	60a3      	str	r3, [r4, #8]
   d7e3c:	bb32      	cbnz	r2, d7e8c <localtime_r+0x1b8>
   d7e3e:	6923      	ldr	r3, [r4, #16]
   d7e40:	3b01      	subs	r3, #1
   d7e42:	d401      	bmi.n	d7e48 <localtime_r+0x174>
   d7e44:	6123      	str	r3, [r4, #16]
   d7e46:	e01d      	b.n	d7e84 <localtime_r+0x1b0>
   d7e48:	230b      	movs	r3, #11
   d7e4a:	6123      	str	r3, [r4, #16]
   d7e4c:	6963      	ldr	r3, [r4, #20]
   d7e4e:	1e5a      	subs	r2, r3, #1
   d7e50:	f012 0f03 	tst.w	r2, #3
   d7e54:	6162      	str	r2, [r4, #20]
   d7e56:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7e5a:	d105      	bne.n	d7e68 <localtime_r+0x194>
   d7e5c:	2164      	movs	r1, #100	; 0x64
   d7e5e:	fb93 f2f1 	sdiv	r2, r3, r1
   d7e62:	fb01 3212 	mls	r2, r1, r2, r3
   d7e66:	b94a      	cbnz	r2, d7e7c <localtime_r+0x1a8>
   d7e68:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7e6c:	fb93 f2f1 	sdiv	r2, r3, r1
   d7e70:	fb01 3312 	mls	r3, r1, r2, r3
   d7e74:	fab3 f383 	clz	r3, r3
   d7e78:	095b      	lsrs	r3, r3, #5
   d7e7a:	e000      	b.n	d7e7e <localtime_r+0x1aa>
   d7e7c:	2301      	movs	r3, #1
   d7e7e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d7e82:	61e3      	str	r3, [r4, #28]
   d7e84:	6923      	ldr	r3, [r4, #16]
   d7e86:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7e8a:	60e3      	str	r3, [r4, #12]
   d7e8c:	f000 f9bf 	bl	d820e <__tz_unlock>
   d7e90:	4620      	mov	r0, r4
   d7e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7e96:	bf00      	nop
   d7e98:	000d8cf0 	.word	0x000d8cf0
   d7e9c:	2003e7e4 	.word	0x2003e7e4

000d7ea0 <memcpy>:
   d7ea0:	b510      	push	{r4, lr}
   d7ea2:	1e43      	subs	r3, r0, #1
   d7ea4:	440a      	add	r2, r1
   d7ea6:	4291      	cmp	r1, r2
   d7ea8:	d004      	beq.n	d7eb4 <memcpy+0x14>
   d7eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7eae:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7eb2:	e7f8      	b.n	d7ea6 <memcpy+0x6>
   d7eb4:	bd10      	pop	{r4, pc}

000d7eb6 <memset>:
   d7eb6:	4402      	add	r2, r0
   d7eb8:	4603      	mov	r3, r0
   d7eba:	4293      	cmp	r3, r2
   d7ebc:	d002      	beq.n	d7ec4 <memset+0xe>
   d7ebe:	f803 1b01 	strb.w	r1, [r3], #1
   d7ec2:	e7fa      	b.n	d7eba <memset+0x4>
   d7ec4:	4770      	bx	lr
	...

000d7ec8 <srand>:
   d7ec8:	b538      	push	{r3, r4, r5, lr}
   d7eca:	4b12      	ldr	r3, [pc, #72]	; (d7f14 <srand+0x4c>)
   d7ecc:	681c      	ldr	r4, [r3, #0]
   d7ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ed0:	4605      	mov	r5, r0
   d7ed2:	b9d3      	cbnz	r3, d7f0a <srand+0x42>
   d7ed4:	2018      	movs	r0, #24
   d7ed6:	f7fd f9df 	bl	d5298 <malloc>
   d7eda:	f243 330e 	movw	r3, #13070	; 0x330e
   d7ede:	63a0      	str	r0, [r4, #56]	; 0x38
   d7ee0:	8003      	strh	r3, [r0, #0]
   d7ee2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7ee6:	8043      	strh	r3, [r0, #2]
   d7ee8:	f241 2334 	movw	r3, #4660	; 0x1234
   d7eec:	8083      	strh	r3, [r0, #4]
   d7eee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7ef2:	80c3      	strh	r3, [r0, #6]
   d7ef4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7ef8:	8103      	strh	r3, [r0, #8]
   d7efa:	2305      	movs	r3, #5
   d7efc:	8143      	strh	r3, [r0, #10]
   d7efe:	230b      	movs	r3, #11
   d7f00:	8183      	strh	r3, [r0, #12]
   d7f02:	2201      	movs	r2, #1
   d7f04:	2300      	movs	r3, #0
   d7f06:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7f0c:	2200      	movs	r2, #0
   d7f0e:	611d      	str	r5, [r3, #16]
   d7f10:	615a      	str	r2, [r3, #20]
   d7f12:	bd38      	pop	{r3, r4, r5, pc}
   d7f14:	2003e19c 	.word	0x2003e19c

000d7f18 <strcmp>:
   d7f18:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7f20:	2a01      	cmp	r2, #1
   d7f22:	bf28      	it	cs
   d7f24:	429a      	cmpcs	r2, r3
   d7f26:	d0f7      	beq.n	d7f18 <strcmp>
   d7f28:	1ad0      	subs	r0, r2, r3
   d7f2a:	4770      	bx	lr

000d7f2c <strcpy>:
   d7f2c:	4603      	mov	r3, r0
   d7f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7f32:	f803 2b01 	strb.w	r2, [r3], #1
   d7f36:	2a00      	cmp	r2, #0
   d7f38:	d1f9      	bne.n	d7f2e <strcpy+0x2>
   d7f3a:	4770      	bx	lr

000d7f3c <strdup>:
   d7f3c:	4b02      	ldr	r3, [pc, #8]	; (d7f48 <strdup+0xc>)
   d7f3e:	4601      	mov	r1, r0
   d7f40:	6818      	ldr	r0, [r3, #0]
   d7f42:	f000 b803 	b.w	d7f4c <_strdup_r>
   d7f46:	bf00      	nop
   d7f48:	2003e19c 	.word	0x2003e19c

000d7f4c <_strdup_r>:
   d7f4c:	b570      	push	{r4, r5, r6, lr}
   d7f4e:	4606      	mov	r6, r0
   d7f50:	4608      	mov	r0, r1
   d7f52:	460c      	mov	r4, r1
   d7f54:	f000 f80d 	bl	d7f72 <strlen>
   d7f58:	1c45      	adds	r5, r0, #1
   d7f5a:	4629      	mov	r1, r5
   d7f5c:	4630      	mov	r0, r6
   d7f5e:	f7fd f9cb 	bl	d52f8 <_malloc_r>
   d7f62:	4606      	mov	r6, r0
   d7f64:	b118      	cbz	r0, d7f6e <_strdup_r+0x22>
   d7f66:	462a      	mov	r2, r5
   d7f68:	4621      	mov	r1, r4
   d7f6a:	f7ff ff99 	bl	d7ea0 <memcpy>
   d7f6e:	4630      	mov	r0, r6
   d7f70:	bd70      	pop	{r4, r5, r6, pc}

000d7f72 <strlen>:
   d7f72:	4603      	mov	r3, r0
   d7f74:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f78:	2a00      	cmp	r2, #0
   d7f7a:	d1fb      	bne.n	d7f74 <strlen+0x2>
   d7f7c:	1a18      	subs	r0, r3, r0
   d7f7e:	3801      	subs	r0, #1
   d7f80:	4770      	bx	lr

000d7f82 <strncmp>:
   d7f82:	b530      	push	{r4, r5, lr}
   d7f84:	b182      	cbz	r2, d7fa8 <strncmp+0x26>
   d7f86:	1e45      	subs	r5, r0, #1
   d7f88:	3901      	subs	r1, #1
   d7f8a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7f8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7f92:	42a3      	cmp	r3, r4
   d7f94:	d106      	bne.n	d7fa4 <strncmp+0x22>
   d7f96:	43ec      	mvns	r4, r5
   d7f98:	4414      	add	r4, r2
   d7f9a:	42e0      	cmn	r0, r4
   d7f9c:	d001      	beq.n	d7fa2 <strncmp+0x20>
   d7f9e:	2b00      	cmp	r3, #0
   d7fa0:	d1f3      	bne.n	d7f8a <strncmp+0x8>
   d7fa2:	461c      	mov	r4, r3
   d7fa4:	1b18      	subs	r0, r3, r4
   d7fa6:	bd30      	pop	{r4, r5, pc}
   d7fa8:	4610      	mov	r0, r2
   d7faa:	bd30      	pop	{r4, r5, pc}

000d7fac <_strtoul_r>:
   d7fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7fb0:	4680      	mov	r8, r0
   d7fb2:	483c      	ldr	r0, [pc, #240]	; (d80a4 <_strtoul_r+0xf8>)
   d7fb4:	f8d0 9000 	ldr.w	r9, [r0]
   d7fb8:	460e      	mov	r6, r1
   d7fba:	4635      	mov	r5, r6
   d7fbc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7fc0:	eb09 0004 	add.w	r0, r9, r4
   d7fc4:	7840      	ldrb	r0, [r0, #1]
   d7fc6:	f000 0008 	and.w	r0, r0, #8
   d7fca:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7fce:	b108      	cbz	r0, d7fd4 <_strtoul_r+0x28>
   d7fd0:	462e      	mov	r6, r5
   d7fd2:	e7f2      	b.n	d7fba <_strtoul_r+0xe>
   d7fd4:	2c2d      	cmp	r4, #45	; 0x2d
   d7fd6:	d103      	bne.n	d7fe0 <_strtoul_r+0x34>
   d7fd8:	1cb5      	adds	r5, r6, #2
   d7fda:	7874      	ldrb	r4, [r6, #1]
   d7fdc:	2701      	movs	r7, #1
   d7fde:	e003      	b.n	d7fe8 <_strtoul_r+0x3c>
   d7fe0:	2c2b      	cmp	r4, #43	; 0x2b
   d7fe2:	bf04      	itt	eq
   d7fe4:	7874      	ldrbeq	r4, [r6, #1]
   d7fe6:	1cb5      	addeq	r5, r6, #2
   d7fe8:	b113      	cbz	r3, d7ff0 <_strtoul_r+0x44>
   d7fea:	2b10      	cmp	r3, #16
   d7fec:	d10a      	bne.n	d8004 <_strtoul_r+0x58>
   d7fee:	e053      	b.n	d8098 <_strtoul_r+0xec>
   d7ff0:	2c30      	cmp	r4, #48	; 0x30
   d7ff2:	d14f      	bne.n	d8094 <_strtoul_r+0xe8>
   d7ff4:	7828      	ldrb	r0, [r5, #0]
   d7ff6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7ffa:	2858      	cmp	r0, #88	; 0x58
   d7ffc:	d145      	bne.n	d808a <_strtoul_r+0xde>
   d7ffe:	786c      	ldrb	r4, [r5, #1]
   d8000:	2310      	movs	r3, #16
   d8002:	3502      	adds	r5, #2
   d8004:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8008:	2600      	movs	r6, #0
   d800a:	fbbc fcf3 	udiv	ip, ip, r3
   d800e:	fb03 fa0c 	mul.w	sl, r3, ip
   d8012:	ea6f 0a0a 	mvn.w	sl, sl
   d8016:	4630      	mov	r0, r6
   d8018:	eb09 0e04 	add.w	lr, r9, r4
   d801c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8020:	f01e 0f04 	tst.w	lr, #4
   d8024:	d001      	beq.n	d802a <_strtoul_r+0x7e>
   d8026:	3c30      	subs	r4, #48	; 0x30
   d8028:	e00b      	b.n	d8042 <_strtoul_r+0x96>
   d802a:	f01e 0e03 	ands.w	lr, lr, #3
   d802e:	d01a      	beq.n	d8066 <_strtoul_r+0xba>
   d8030:	f1be 0f01 	cmp.w	lr, #1
   d8034:	bf0c      	ite	eq
   d8036:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d803a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d803e:	ebce 0404 	rsb	r4, lr, r4
   d8042:	42a3      	cmp	r3, r4
   d8044:	dd0f      	ble.n	d8066 <_strtoul_r+0xba>
   d8046:	2e00      	cmp	r6, #0
   d8048:	db08      	blt.n	d805c <_strtoul_r+0xb0>
   d804a:	4560      	cmp	r0, ip
   d804c:	d806      	bhi.n	d805c <_strtoul_r+0xb0>
   d804e:	d101      	bne.n	d8054 <_strtoul_r+0xa8>
   d8050:	4554      	cmp	r4, sl
   d8052:	dc03      	bgt.n	d805c <_strtoul_r+0xb0>
   d8054:	fb03 4000 	mla	r0, r3, r0, r4
   d8058:	2601      	movs	r6, #1
   d805a:	e001      	b.n	d8060 <_strtoul_r+0xb4>
   d805c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8060:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8064:	e7d8      	b.n	d8018 <_strtoul_r+0x6c>
   d8066:	2e00      	cmp	r6, #0
   d8068:	da07      	bge.n	d807a <_strtoul_r+0xce>
   d806a:	2322      	movs	r3, #34	; 0x22
   d806c:	f8c8 3000 	str.w	r3, [r8]
   d8070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8074:	b92a      	cbnz	r2, d8082 <_strtoul_r+0xd6>
   d8076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d807a:	b107      	cbz	r7, d807e <_strtoul_r+0xd2>
   d807c:	4240      	negs	r0, r0
   d807e:	b172      	cbz	r2, d809e <_strtoul_r+0xf2>
   d8080:	b106      	cbz	r6, d8084 <_strtoul_r+0xd8>
   d8082:	1e69      	subs	r1, r5, #1
   d8084:	6011      	str	r1, [r2, #0]
   d8086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d808a:	2430      	movs	r4, #48	; 0x30
   d808c:	2b00      	cmp	r3, #0
   d808e:	d1b9      	bne.n	d8004 <_strtoul_r+0x58>
   d8090:	2308      	movs	r3, #8
   d8092:	e7b7      	b.n	d8004 <_strtoul_r+0x58>
   d8094:	230a      	movs	r3, #10
   d8096:	e7b5      	b.n	d8004 <_strtoul_r+0x58>
   d8098:	2c30      	cmp	r4, #48	; 0x30
   d809a:	d0ab      	beq.n	d7ff4 <_strtoul_r+0x48>
   d809c:	e7b2      	b.n	d8004 <_strtoul_r+0x58>
   d809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80a2:	bf00      	nop
   d80a4:	2003e138 	.word	0x2003e138

000d80a8 <strtoul>:
   d80a8:	4613      	mov	r3, r2
   d80aa:	460a      	mov	r2, r1
   d80ac:	4601      	mov	r1, r0
   d80ae:	4802      	ldr	r0, [pc, #8]	; (d80b8 <strtoul+0x10>)
   d80b0:	6800      	ldr	r0, [r0, #0]
   d80b2:	f7ff bf7b 	b.w	d7fac <_strtoul_r>
   d80b6:	bf00      	nop
   d80b8:	2003e19c 	.word	0x2003e19c

000d80bc <__tzcalc_limits>:
   d80bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80c0:	4604      	mov	r4, r0
   d80c2:	f000 fa6f 	bl	d85a4 <__gettzinfo>
   d80c6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d80ca:	429c      	cmp	r4, r3
   d80cc:	f340 8096 	ble.w	d81fc <__tzcalc_limits+0x140>
   d80d0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d80d4:	18e3      	adds	r3, r4, r3
   d80d6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d80da:	109b      	asrs	r3, r3, #2
   d80dc:	f240 156d 	movw	r5, #365	; 0x16d
   d80e0:	fb05 3502 	mla	r5, r5, r2, r3
   d80e4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d80e8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d80ec:	fb92 f3f3 	sdiv	r3, r2, r3
   d80f0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d80f4:	442b      	add	r3, r5
   d80f6:	18a5      	adds	r5, r4, r2
   d80f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d80fc:	fb95 f5f2 	sdiv	r5, r5, r2
   d8100:	441d      	add	r5, r3
   d8102:	2364      	movs	r3, #100	; 0x64
   d8104:	fb94 f7f2 	sdiv	r7, r4, r2
   d8108:	fb94 f6f3 	sdiv	r6, r4, r3
   d810c:	fb02 4717 	mls	r7, r2, r7, r4
   d8110:	fb03 4616 	mls	r6, r3, r6, r4
   d8114:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8118:	fab7 fe87 	clz	lr, r7
   d811c:	9301      	str	r3, [sp, #4]
   d811e:	f004 0303 	and.w	r3, r4, #3
   d8122:	6044      	str	r4, [r0, #4]
   d8124:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8128:	4601      	mov	r1, r0
   d812a:	9300      	str	r3, [sp, #0]
   d812c:	f04f 0c07 	mov.w	ip, #7
   d8130:	7a0b      	ldrb	r3, [r1, #8]
   d8132:	2b4a      	cmp	r3, #74	; 0x4a
   d8134:	d10e      	bne.n	d8154 <__tzcalc_limits+0x98>
   d8136:	694b      	ldr	r3, [r1, #20]
   d8138:	9a00      	ldr	r2, [sp, #0]
   d813a:	18ec      	adds	r4, r5, r3
   d813c:	b902      	cbnz	r2, d8140 <__tzcalc_limits+0x84>
   d813e:	b906      	cbnz	r6, d8142 <__tzcalc_limits+0x86>
   d8140:	b927      	cbnz	r7, d814c <__tzcalc_limits+0x90>
   d8142:	2b3b      	cmp	r3, #59	; 0x3b
   d8144:	bfd4      	ite	le
   d8146:	2300      	movle	r3, #0
   d8148:	2301      	movgt	r3, #1
   d814a:	e000      	b.n	d814e <__tzcalc_limits+0x92>
   d814c:	2300      	movs	r3, #0
   d814e:	4423      	add	r3, r4
   d8150:	3b01      	subs	r3, #1
   d8152:	e03f      	b.n	d81d4 <__tzcalc_limits+0x118>
   d8154:	2b44      	cmp	r3, #68	; 0x44
   d8156:	d102      	bne.n	d815e <__tzcalc_limits+0xa2>
   d8158:	694b      	ldr	r3, [r1, #20]
   d815a:	442b      	add	r3, r5
   d815c:	e03a      	b.n	d81d4 <__tzcalc_limits+0x118>
   d815e:	9b00      	ldr	r3, [sp, #0]
   d8160:	b92b      	cbnz	r3, d816e <__tzcalc_limits+0xb2>
   d8162:	2e00      	cmp	r6, #0
   d8164:	bf0c      	ite	eq
   d8166:	46f0      	moveq	r8, lr
   d8168:	f04f 0801 	movne.w	r8, #1
   d816c:	e000      	b.n	d8170 <__tzcalc_limits+0xb4>
   d816e:	46f0      	mov	r8, lr
   d8170:	4b24      	ldr	r3, [pc, #144]	; (d8204 <__tzcalc_limits+0x148>)
   d8172:	68cc      	ldr	r4, [r1, #12]
   d8174:	2230      	movs	r2, #48	; 0x30
   d8176:	fb02 3808 	mla	r8, r2, r8, r3
   d817a:	f1a8 0a04 	sub.w	sl, r8, #4
   d817e:	46a9      	mov	r9, r5
   d8180:	2301      	movs	r3, #1
   d8182:	42a3      	cmp	r3, r4
   d8184:	da04      	bge.n	d8190 <__tzcalc_limits+0xd4>
   d8186:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d818a:	3301      	adds	r3, #1
   d818c:	44d9      	add	r9, fp
   d818e:	e7f8      	b.n	d8182 <__tzcalc_limits+0xc6>
   d8190:	f109 0304 	add.w	r3, r9, #4
   d8194:	fb93 fbfc 	sdiv	fp, r3, ip
   d8198:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d819c:	2c01      	cmp	r4, #1
   d819e:	ebca 0a03 	rsb	sl, sl, r3
   d81a2:	694b      	ldr	r3, [r1, #20]
   d81a4:	bfb8      	it	lt
   d81a6:	2401      	movlt	r4, #1
   d81a8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d81ac:	ebb3 0a0a 	subs.w	sl, r3, sl
   d81b0:	690b      	ldr	r3, [r1, #16]
   d81b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d81b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d81ba:	bf48      	it	mi
   d81bc:	f10a 0a07 	addmi.w	sl, sl, #7
   d81c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d81c4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d81c8:	4453      	add	r3, sl
   d81ca:	42a3      	cmp	r3, r4
   d81cc:	db01      	blt.n	d81d2 <__tzcalc_limits+0x116>
   d81ce:	3b07      	subs	r3, #7
   d81d0:	e7fb      	b.n	d81ca <__tzcalc_limits+0x10e>
   d81d2:	444b      	add	r3, r9
   d81d4:	698c      	ldr	r4, [r1, #24]
   d81d6:	4a0c      	ldr	r2, [pc, #48]	; (d8208 <__tzcalc_limits+0x14c>)
   d81d8:	fb02 4303 	mla	r3, r2, r3, r4
   d81dc:	6a0c      	ldr	r4, [r1, #32]
   d81de:	4423      	add	r3, r4
   d81e0:	f841 3f1c 	str.w	r3, [r1, #28]!
   d81e4:	9b01      	ldr	r3, [sp, #4]
   d81e6:	4299      	cmp	r1, r3
   d81e8:	d1a2      	bne.n	d8130 <__tzcalc_limits+0x74>
   d81ea:	69c3      	ldr	r3, [r0, #28]
   d81ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d81ee:	4293      	cmp	r3, r2
   d81f0:	bfac      	ite	ge
   d81f2:	2300      	movge	r3, #0
   d81f4:	2301      	movlt	r3, #1
   d81f6:	6003      	str	r3, [r0, #0]
   d81f8:	2001      	movs	r0, #1
   d81fa:	e000      	b.n	d81fe <__tzcalc_limits+0x142>
   d81fc:	2000      	movs	r0, #0
   d81fe:	b003      	add	sp, #12
   d8200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8204:	000d8cf0 	.word	0x000d8cf0
   d8208:	00015180 	.word	0x00015180

000d820c <__tz_lock>:
   d820c:	4770      	bx	lr

000d820e <__tz_unlock>:
   d820e:	4770      	bx	lr

000d8210 <_tzset_unlocked>:
   d8210:	4b01      	ldr	r3, [pc, #4]	; (d8218 <_tzset_unlocked+0x8>)
   d8212:	6818      	ldr	r0, [r3, #0]
   d8214:	f000 b802 	b.w	d821c <_tzset_unlocked_r>
   d8218:	2003e19c 	.word	0x2003e19c

000d821c <_tzset_unlocked_r>:
   d821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8220:	b08d      	sub	sp, #52	; 0x34
   d8222:	4607      	mov	r7, r0
   d8224:	f000 f9be 	bl	d85a4 <__gettzinfo>
   d8228:	49b0      	ldr	r1, [pc, #704]	; (d84ec <_tzset_unlocked_r+0x2d0>)
   d822a:	4eb1      	ldr	r6, [pc, #708]	; (d84f0 <_tzset_unlocked_r+0x2d4>)
   d822c:	4604      	mov	r4, r0
   d822e:	4638      	mov	r0, r7
   d8230:	f000 f9b0 	bl	d8594 <_getenv_r>
   d8234:	4605      	mov	r5, r0
   d8236:	b960      	cbnz	r0, d8252 <_tzset_unlocked_r+0x36>
   d8238:	4bae      	ldr	r3, [pc, #696]	; (d84f4 <_tzset_unlocked_r+0x2d8>)
   d823a:	4aaf      	ldr	r2, [pc, #700]	; (d84f8 <_tzset_unlocked_r+0x2dc>)
   d823c:	6018      	str	r0, [r3, #0]
   d823e:	4baf      	ldr	r3, [pc, #700]	; (d84fc <_tzset_unlocked_r+0x2e0>)
   d8240:	6018      	str	r0, [r3, #0]
   d8242:	4baf      	ldr	r3, [pc, #700]	; (d8500 <_tzset_unlocked_r+0x2e4>)
   d8244:	6830      	ldr	r0, [r6, #0]
   d8246:	601a      	str	r2, [r3, #0]
   d8248:	605a      	str	r2, [r3, #4]
   d824a:	f7fd f82d 	bl	d52a8 <free>
   d824e:	6035      	str	r5, [r6, #0]
   d8250:	e148      	b.n	d84e4 <_tzset_unlocked_r+0x2c8>
   d8252:	6831      	ldr	r1, [r6, #0]
   d8254:	b979      	cbnz	r1, d8276 <_tzset_unlocked_r+0x5a>
   d8256:	6830      	ldr	r0, [r6, #0]
   d8258:	f7fd f826 	bl	d52a8 <free>
   d825c:	4628      	mov	r0, r5
   d825e:	f7ff fe88 	bl	d7f72 <strlen>
   d8262:	1c41      	adds	r1, r0, #1
   d8264:	4638      	mov	r0, r7
   d8266:	f7fd f847 	bl	d52f8 <_malloc_r>
   d826a:	6030      	str	r0, [r6, #0]
   d826c:	b148      	cbz	r0, d8282 <_tzset_unlocked_r+0x66>
   d826e:	4629      	mov	r1, r5
   d8270:	f7ff fe5c 	bl	d7f2c <strcpy>
   d8274:	e005      	b.n	d8282 <_tzset_unlocked_r+0x66>
   d8276:	f7ff fe4f 	bl	d7f18 <strcmp>
   d827a:	2800      	cmp	r0, #0
   d827c:	f000 8132 	beq.w	d84e4 <_tzset_unlocked_r+0x2c8>
   d8280:	e7e9      	b.n	d8256 <_tzset_unlocked_r+0x3a>
   d8282:	782b      	ldrb	r3, [r5, #0]
   d8284:	4a9f      	ldr	r2, [pc, #636]	; (d8504 <_tzset_unlocked_r+0x2e8>)
   d8286:	49a0      	ldr	r1, [pc, #640]	; (d8508 <_tzset_unlocked_r+0x2ec>)
   d8288:	2b3a      	cmp	r3, #58	; 0x3a
   d828a:	bf08      	it	eq
   d828c:	3501      	addeq	r5, #1
   d828e:	ae0a      	add	r6, sp, #40	; 0x28
   d8290:	4633      	mov	r3, r6
   d8292:	4628      	mov	r0, r5
   d8294:	f7fd f818 	bl	d52c8 <siscanf>
   d8298:	2800      	cmp	r0, #0
   d829a:	f340 8123 	ble.w	d84e4 <_tzset_unlocked_r+0x2c8>
   d829e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d82a0:	18ef      	adds	r7, r5, r3
   d82a2:	5ceb      	ldrb	r3, [r5, r3]
   d82a4:	2b2d      	cmp	r3, #45	; 0x2d
   d82a6:	d103      	bne.n	d82b0 <_tzset_unlocked_r+0x94>
   d82a8:	3701      	adds	r7, #1
   d82aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d82ae:	e003      	b.n	d82b8 <_tzset_unlocked_r+0x9c>
   d82b0:	2b2b      	cmp	r3, #43	; 0x2b
   d82b2:	bf08      	it	eq
   d82b4:	3701      	addeq	r7, #1
   d82b6:	2501      	movs	r5, #1
   d82b8:	f10d 0a20 	add.w	sl, sp, #32
   d82bc:	f10d 0b1e 	add.w	fp, sp, #30
   d82c0:	f04f 0800 	mov.w	r8, #0
   d82c4:	9603      	str	r6, [sp, #12]
   d82c6:	f8cd a008 	str.w	sl, [sp, #8]
   d82ca:	9601      	str	r6, [sp, #4]
   d82cc:	f8cd b000 	str.w	fp, [sp]
   d82d0:	4633      	mov	r3, r6
   d82d2:	aa07      	add	r2, sp, #28
   d82d4:	498d      	ldr	r1, [pc, #564]	; (d850c <_tzset_unlocked_r+0x2f0>)
   d82d6:	f8ad 801e 	strh.w	r8, [sp, #30]
   d82da:	4638      	mov	r0, r7
   d82dc:	f8ad 8020 	strh.w	r8, [sp, #32]
   d82e0:	f7fc fff2 	bl	d52c8 <siscanf>
   d82e4:	4540      	cmp	r0, r8
   d82e6:	f340 80fd 	ble.w	d84e4 <_tzset_unlocked_r+0x2c8>
   d82ea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d82ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d82f2:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8518 <_tzset_unlocked_r+0x2fc>
   d82f6:	213c      	movs	r1, #60	; 0x3c
   d82f8:	fb01 3302 	mla	r3, r1, r2, r3
   d82fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8300:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8304:	fb01 3302 	mla	r3, r1, r2, r3
   d8308:	435d      	muls	r5, r3
   d830a:	6225      	str	r5, [r4, #32]
   d830c:	4d7c      	ldr	r5, [pc, #496]	; (d8500 <_tzset_unlocked_r+0x2e4>)
   d830e:	4b7d      	ldr	r3, [pc, #500]	; (d8504 <_tzset_unlocked_r+0x2e8>)
   d8310:	602b      	str	r3, [r5, #0]
   d8312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8314:	497c      	ldr	r1, [pc, #496]	; (d8508 <_tzset_unlocked_r+0x2ec>)
   d8316:	441f      	add	r7, r3
   d8318:	464a      	mov	r2, r9
   d831a:	4633      	mov	r3, r6
   d831c:	4638      	mov	r0, r7
   d831e:	f7fc ffd3 	bl	d52c8 <siscanf>
   d8322:	4540      	cmp	r0, r8
   d8324:	dc08      	bgt.n	d8338 <_tzset_unlocked_r+0x11c>
   d8326:	682b      	ldr	r3, [r5, #0]
   d8328:	606b      	str	r3, [r5, #4]
   d832a:	4b72      	ldr	r3, [pc, #456]	; (d84f4 <_tzset_unlocked_r+0x2d8>)
   d832c:	6a22      	ldr	r2, [r4, #32]
   d832e:	601a      	str	r2, [r3, #0]
   d8330:	4b72      	ldr	r3, [pc, #456]	; (d84fc <_tzset_unlocked_r+0x2e0>)
   d8332:	f8c3 8000 	str.w	r8, [r3]
   d8336:	e0d5      	b.n	d84e4 <_tzset_unlocked_r+0x2c8>
   d8338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d833a:	f8c5 9004 	str.w	r9, [r5, #4]
   d833e:	18fd      	adds	r5, r7, r3
   d8340:	5cfb      	ldrb	r3, [r7, r3]
   d8342:	2b2d      	cmp	r3, #45	; 0x2d
   d8344:	d103      	bne.n	d834e <_tzset_unlocked_r+0x132>
   d8346:	3501      	adds	r5, #1
   d8348:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d834c:	e003      	b.n	d8356 <_tzset_unlocked_r+0x13a>
   d834e:	2b2b      	cmp	r3, #43	; 0x2b
   d8350:	bf08      	it	eq
   d8352:	3501      	addeq	r5, #1
   d8354:	2701      	movs	r7, #1
   d8356:	2300      	movs	r3, #0
   d8358:	f8ad 301c 	strh.w	r3, [sp, #28]
   d835c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8360:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8364:	930a      	str	r3, [sp, #40]	; 0x28
   d8366:	9603      	str	r6, [sp, #12]
   d8368:	f8cd a008 	str.w	sl, [sp, #8]
   d836c:	9601      	str	r6, [sp, #4]
   d836e:	f8cd b000 	str.w	fp, [sp]
   d8372:	4633      	mov	r3, r6
   d8374:	aa07      	add	r2, sp, #28
   d8376:	4965      	ldr	r1, [pc, #404]	; (d850c <_tzset_unlocked_r+0x2f0>)
   d8378:	4628      	mov	r0, r5
   d837a:	f7fc ffa5 	bl	d52c8 <siscanf>
   d837e:	2800      	cmp	r0, #0
   d8380:	dc04      	bgt.n	d838c <_tzset_unlocked_r+0x170>
   d8382:	6a23      	ldr	r3, [r4, #32]
   d8384:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8388:	63e3      	str	r3, [r4, #60]	; 0x3c
   d838a:	e00e      	b.n	d83aa <_tzset_unlocked_r+0x18e>
   d838c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8390:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8394:	213c      	movs	r1, #60	; 0x3c
   d8396:	fb01 3302 	mla	r3, r1, r2, r3
   d839a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d839e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d83a2:	fb01 3302 	mla	r3, r1, r2, r3
   d83a6:	435f      	muls	r7, r3
   d83a8:	63e7      	str	r7, [r4, #60]	; 0x3c
   d83aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d83ac:	4627      	mov	r7, r4
   d83ae:	441d      	add	r5, r3
   d83b0:	f04f 0900 	mov.w	r9, #0
   d83b4:	782b      	ldrb	r3, [r5, #0]
   d83b6:	2b2c      	cmp	r3, #44	; 0x2c
   d83b8:	bf08      	it	eq
   d83ba:	3501      	addeq	r5, #1
   d83bc:	f895 8000 	ldrb.w	r8, [r5]
   d83c0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d83c4:	d126      	bne.n	d8414 <_tzset_unlocked_r+0x1f8>
   d83c6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d83ca:	9302      	str	r3, [sp, #8]
   d83cc:	ab09      	add	r3, sp, #36	; 0x24
   d83ce:	9300      	str	r3, [sp, #0]
   d83d0:	9603      	str	r6, [sp, #12]
   d83d2:	9601      	str	r6, [sp, #4]
   d83d4:	4633      	mov	r3, r6
   d83d6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d83da:	494d      	ldr	r1, [pc, #308]	; (d8510 <_tzset_unlocked_r+0x2f4>)
   d83dc:	4628      	mov	r0, r5
   d83de:	f7fc ff73 	bl	d52c8 <siscanf>
   d83e2:	2803      	cmp	r0, #3
   d83e4:	d17e      	bne.n	d84e4 <_tzset_unlocked_r+0x2c8>
   d83e6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d83ea:	1e4b      	subs	r3, r1, #1
   d83ec:	2b0b      	cmp	r3, #11
   d83ee:	d879      	bhi.n	d84e4 <_tzset_unlocked_r+0x2c8>
   d83f0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d83f4:	1e53      	subs	r3, r2, #1
   d83f6:	2b04      	cmp	r3, #4
   d83f8:	d874      	bhi.n	d84e4 <_tzset_unlocked_r+0x2c8>
   d83fa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d83fe:	2b06      	cmp	r3, #6
   d8400:	d870      	bhi.n	d84e4 <_tzset_unlocked_r+0x2c8>
   d8402:	f887 8008 	strb.w	r8, [r7, #8]
   d8406:	60f9      	str	r1, [r7, #12]
   d8408:	613a      	str	r2, [r7, #16]
   d840a:	617b      	str	r3, [r7, #20]
   d840c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d840e:	eb05 0803 	add.w	r8, r5, r3
   d8412:	e02a      	b.n	d846a <_tzset_unlocked_r+0x24e>
   d8414:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8418:	bf06      	itte	eq
   d841a:	3501      	addeq	r5, #1
   d841c:	4643      	moveq	r3, r8
   d841e:	2344      	movne	r3, #68	; 0x44
   d8420:	220a      	movs	r2, #10
   d8422:	a90b      	add	r1, sp, #44	; 0x2c
   d8424:	4628      	mov	r0, r5
   d8426:	9305      	str	r3, [sp, #20]
   d8428:	f7ff fe3e 	bl	d80a8 <strtoul>
   d842c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8430:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8434:	4545      	cmp	r5, r8
   d8436:	9b05      	ldr	r3, [sp, #20]
   d8438:	d114      	bne.n	d8464 <_tzset_unlocked_r+0x248>
   d843a:	234d      	movs	r3, #77	; 0x4d
   d843c:	f1b9 0f00 	cmp.w	r9, #0
   d8440:	d107      	bne.n	d8452 <_tzset_unlocked_r+0x236>
   d8442:	7223      	strb	r3, [r4, #8]
   d8444:	2303      	movs	r3, #3
   d8446:	60e3      	str	r3, [r4, #12]
   d8448:	2302      	movs	r3, #2
   d844a:	6123      	str	r3, [r4, #16]
   d844c:	f8c4 9014 	str.w	r9, [r4, #20]
   d8450:	e00b      	b.n	d846a <_tzset_unlocked_r+0x24e>
   d8452:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8456:	230b      	movs	r3, #11
   d8458:	62a3      	str	r3, [r4, #40]	; 0x28
   d845a:	2301      	movs	r3, #1
   d845c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d845e:	2300      	movs	r3, #0
   d8460:	6323      	str	r3, [r4, #48]	; 0x30
   d8462:	e002      	b.n	d846a <_tzset_unlocked_r+0x24e>
   d8464:	b280      	uxth	r0, r0
   d8466:	723b      	strb	r3, [r7, #8]
   d8468:	6178      	str	r0, [r7, #20]
   d846a:	2302      	movs	r3, #2
   d846c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8470:	2300      	movs	r3, #0
   d8472:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8476:	f8ad 3020 	strh.w	r3, [sp, #32]
   d847a:	930a      	str	r3, [sp, #40]	; 0x28
   d847c:	f898 3000 	ldrb.w	r3, [r8]
   d8480:	2b2f      	cmp	r3, #47	; 0x2f
   d8482:	d10b      	bne.n	d849c <_tzset_unlocked_r+0x280>
   d8484:	9603      	str	r6, [sp, #12]
   d8486:	f8cd a008 	str.w	sl, [sp, #8]
   d848a:	9601      	str	r6, [sp, #4]
   d848c:	f8cd b000 	str.w	fp, [sp]
   d8490:	4633      	mov	r3, r6
   d8492:	aa07      	add	r2, sp, #28
   d8494:	491f      	ldr	r1, [pc, #124]	; (d8514 <_tzset_unlocked_r+0x2f8>)
   d8496:	4640      	mov	r0, r8
   d8498:	f7fc ff16 	bl	d52c8 <siscanf>
   d849c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d84a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d84a4:	213c      	movs	r1, #60	; 0x3c
   d84a6:	fb01 3302 	mla	r3, r1, r2, r3
   d84aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d84ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d84b2:	fb01 3302 	mla	r3, r1, r2, r3
   d84b6:	61bb      	str	r3, [r7, #24]
   d84b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d84ba:	f109 0901 	add.w	r9, r9, #1
   d84be:	f1b9 0f02 	cmp.w	r9, #2
   d84c2:	4445      	add	r5, r8
   d84c4:	f107 071c 	add.w	r7, r7, #28
   d84c8:	f47f af74 	bne.w	d83b4 <_tzset_unlocked_r+0x198>
   d84cc:	6860      	ldr	r0, [r4, #4]
   d84ce:	f7ff fdf5 	bl	d80bc <__tzcalc_limits>
   d84d2:	4b08      	ldr	r3, [pc, #32]	; (d84f4 <_tzset_unlocked_r+0x2d8>)
   d84d4:	6a22      	ldr	r2, [r4, #32]
   d84d6:	601a      	str	r2, [r3, #0]
   d84d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d84da:	1a9b      	subs	r3, r3, r2
   d84dc:	4a07      	ldr	r2, [pc, #28]	; (d84fc <_tzset_unlocked_r+0x2e0>)
   d84de:	bf18      	it	ne
   d84e0:	2301      	movne	r3, #1
   d84e2:	6013      	str	r3, [r2, #0]
   d84e4:	b00d      	add	sp, #52	; 0x34
   d84e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84ea:	bf00      	nop
   d84ec:	000d8d50 	.word	0x000d8d50
   d84f0:	2003e7e0 	.word	0x2003e7e0
   d84f4:	2003e7e8 	.word	0x2003e7e8
   d84f8:	000d8d53 	.word	0x000d8d53
   d84fc:	2003e7e4 	.word	0x2003e7e4
   d8500:	2003e1a0 	.word	0x2003e1a0
   d8504:	2003e7d3 	.word	0x2003e7d3
   d8508:	000d8d57 	.word	0x000d8d57
   d850c:	000d8d7a 	.word	0x000d8d7a
   d8510:	000d8d66 	.word	0x000d8d66
   d8514:	000d8d79 	.word	0x000d8d79
   d8518:	2003e7c8 	.word	0x2003e7c8

000d851c <_findenv_r>:
   d851c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8520:	4607      	mov	r7, r0
   d8522:	468b      	mov	fp, r1
   d8524:	4690      	mov	r8, r2
   d8526:	f000 f8d9 	bl	d86dc <__env_lock>
   d852a:	4b19      	ldr	r3, [pc, #100]	; (d8590 <_findenv_r+0x74>)
   d852c:	681d      	ldr	r5, [r3, #0]
   d852e:	469a      	mov	sl, r3
   d8530:	b13d      	cbz	r5, d8542 <_findenv_r+0x26>
   d8532:	465c      	mov	r4, fp
   d8534:	4623      	mov	r3, r4
   d8536:	f813 2b01 	ldrb.w	r2, [r3], #1
   d853a:	b142      	cbz	r2, d854e <_findenv_r+0x32>
   d853c:	2a3d      	cmp	r2, #61	; 0x3d
   d853e:	461c      	mov	r4, r3
   d8540:	d1f8      	bne.n	d8534 <_findenv_r+0x18>
   d8542:	4638      	mov	r0, r7
   d8544:	f000 f8cb 	bl	d86de <__env_unlock>
   d8548:	2000      	movs	r0, #0
   d854a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d854e:	ebcb 0404 	rsb	r4, fp, r4
   d8552:	46a9      	mov	r9, r5
   d8554:	f859 0b04 	ldr.w	r0, [r9], #4
   d8558:	2800      	cmp	r0, #0
   d855a:	d0f2      	beq.n	d8542 <_findenv_r+0x26>
   d855c:	4622      	mov	r2, r4
   d855e:	4659      	mov	r1, fp
   d8560:	f7ff fd0f 	bl	d7f82 <strncmp>
   d8564:	b988      	cbnz	r0, d858a <_findenv_r+0x6e>
   d8566:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d856a:	191e      	adds	r6, r3, r4
   d856c:	5d1b      	ldrb	r3, [r3, r4]
   d856e:	2b3d      	cmp	r3, #61	; 0x3d
   d8570:	d10b      	bne.n	d858a <_findenv_r+0x6e>
   d8572:	f8da 3000 	ldr.w	r3, [sl]
   d8576:	1aed      	subs	r5, r5, r3
   d8578:	10ad      	asrs	r5, r5, #2
   d857a:	4638      	mov	r0, r7
   d857c:	f8c8 5000 	str.w	r5, [r8]
   d8580:	f000 f8ad 	bl	d86de <__env_unlock>
   d8584:	1c70      	adds	r0, r6, #1
   d8586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d858a:	464d      	mov	r5, r9
   d858c:	e7e1      	b.n	d8552 <_findenv_r+0x36>
   d858e:	bf00      	nop
   d8590:	2003e1e8 	.word	0x2003e1e8

000d8594 <_getenv_r>:
   d8594:	b507      	push	{r0, r1, r2, lr}
   d8596:	aa01      	add	r2, sp, #4
   d8598:	f7ff ffc0 	bl	d851c <_findenv_r>
   d859c:	b003      	add	sp, #12
   d859e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85a4 <__gettzinfo>:
   d85a4:	4800      	ldr	r0, [pc, #0]	; (d85a8 <__gettzinfo+0x4>)
   d85a6:	4770      	bx	lr
   d85a8:	2003e1a8 	.word	0x2003e1a8

000d85ac <gmtime_r>:
   d85ac:	6802      	ldr	r2, [r0, #0]
   d85ae:	4b47      	ldr	r3, [pc, #284]	; (d86cc <gmtime_r+0x120>)
   d85b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d85b2:	fb92 f4f3 	sdiv	r4, r2, r3
   d85b6:	fb03 2214 	mls	r2, r3, r4, r2
   d85ba:	2a00      	cmp	r2, #0
   d85bc:	bfbc      	itt	lt
   d85be:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d85c2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d85c6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d85ca:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d85ce:	fb92 f3f0 	sdiv	r3, r2, r0
   d85d2:	fb00 2213 	mls	r2, r0, r3, r2
   d85d6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d85da:	bfac      	ite	ge
   d85dc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d85e0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d85e4:	608b      	str	r3, [r1, #8]
   d85e6:	fb92 f3f0 	sdiv	r3, r2, r0
   d85ea:	fb00 2213 	mls	r2, r0, r3, r2
   d85ee:	604b      	str	r3, [r1, #4]
   d85f0:	600a      	str	r2, [r1, #0]
   d85f2:	2307      	movs	r3, #7
   d85f4:	1ce2      	adds	r2, r4, #3
   d85f6:	fb92 f3f3 	sdiv	r3, r2, r3
   d85fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d85fe:	1ad3      	subs	r3, r2, r3
   d8600:	618b      	str	r3, [r1, #24]
   d8602:	4b33      	ldr	r3, [pc, #204]	; (d86d0 <gmtime_r+0x124>)
   d8604:	4d33      	ldr	r5, [pc, #204]	; (d86d4 <gmtime_r+0x128>)
   d8606:	fb94 f5f5 	sdiv	r5, r4, r5
   d860a:	fb03 4405 	mla	r4, r3, r5, r4
   d860e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8612:	fbb4 f2f2 	udiv	r2, r4, r2
   d8616:	4422      	add	r2, r4
   d8618:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d861c:	fbb4 f3f7 	udiv	r3, r4, r7
   d8620:	1ad2      	subs	r2, r2, r3
   d8622:	482d      	ldr	r0, [pc, #180]	; (d86d8 <gmtime_r+0x12c>)
   d8624:	fbb4 f0f0 	udiv	r0, r4, r0
   d8628:	f648 6694 	movw	r6, #36500	; 0x8e94
   d862c:	1a13      	subs	r3, r2, r0
   d862e:	fbb3 f6f6 	udiv	r6, r3, r6
   d8632:	4434      	add	r4, r6
   d8634:	f240 126d 	movw	r2, #365	; 0x16d
   d8638:	fbb3 f0f2 	udiv	r0, r3, r2
   d863c:	fbb3 f3f7 	udiv	r3, r3, r7
   d8640:	1ae3      	subs	r3, r4, r3
   d8642:	fb02 3310 	mls	r3, r2, r0, r3
   d8646:	2499      	movs	r4, #153	; 0x99
   d8648:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d864c:	3202      	adds	r2, #2
   d864e:	fbb2 f2f4 	udiv	r2, r2, r4
   d8652:	2a0a      	cmp	r2, #10
   d8654:	fb04 f402 	mul.w	r4, r4, r2
   d8658:	f104 0602 	add.w	r6, r4, #2
   d865c:	f04f 0405 	mov.w	r4, #5
   d8660:	fbb6 f4f4 	udiv	r4, r6, r4
   d8664:	bf34      	ite	cc
   d8666:	2602      	movcc	r6, #2
   d8668:	f06f 0609 	mvncs.w	r6, #9
   d866c:	4416      	add	r6, r2
   d866e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8672:	fb02 0505 	mla	r5, r2, r5, r0
   d8676:	1c5f      	adds	r7, r3, #1
   d8678:	2e01      	cmp	r6, #1
   d867a:	bf98      	it	ls
   d867c:	3501      	addls	r5, #1
   d867e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8682:	eba7 0704 	sub.w	r7, r7, r4
   d8686:	d302      	bcc.n	d868e <gmtime_r+0xe2>
   d8688:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d868c:	e014      	b.n	d86b8 <gmtime_r+0x10c>
   d868e:	0782      	lsls	r2, r0, #30
   d8690:	d105      	bne.n	d869e <gmtime_r+0xf2>
   d8692:	2464      	movs	r4, #100	; 0x64
   d8694:	fbb0 f2f4 	udiv	r2, r0, r4
   d8698:	fb04 0212 	mls	r2, r4, r2, r0
   d869c:	b94a      	cbnz	r2, d86b2 <gmtime_r+0x106>
   d869e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d86a2:	fbb0 f4f2 	udiv	r4, r0, r2
   d86a6:	fb02 0014 	mls	r0, r2, r4, r0
   d86aa:	fab0 f280 	clz	r2, r0
   d86ae:	0952      	lsrs	r2, r2, #5
   d86b0:	e000      	b.n	d86b4 <gmtime_r+0x108>
   d86b2:	2201      	movs	r2, #1
   d86b4:	333b      	adds	r3, #59	; 0x3b
   d86b6:	441a      	add	r2, r3
   d86b8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d86bc:	2300      	movs	r3, #0
   d86be:	61ca      	str	r2, [r1, #28]
   d86c0:	614d      	str	r5, [r1, #20]
   d86c2:	610e      	str	r6, [r1, #16]
   d86c4:	60cf      	str	r7, [r1, #12]
   d86c6:	620b      	str	r3, [r1, #32]
   d86c8:	4608      	mov	r0, r1
   d86ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d86cc:	00015180 	.word	0x00015180
   d86d0:	fffdc54f 	.word	0xfffdc54f
   d86d4:	00023ab1 	.word	0x00023ab1
   d86d8:	00023ab0 	.word	0x00023ab0

000d86dc <__env_lock>:
   d86dc:	4770      	bx	lr

000d86de <__env_unlock>:
   d86de:	4770      	bx	lr

000d86e0 <dynalib_user>:
   d86e0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d86f0:	0000 0000 2e25 6630 2525 2500 2e33 6631     ....%.0f%%.%3.1f
   d8700:	5620 2500 2e33 6631 4420 6765 6572 7365      V.%3.1f Degrees
   d8710:	4320 5600 7265 6f62 6573 4d20 646f 2065      C.Verbose Mode 
   d8720:	7453 7261 6574 2e64 3000 5600 7265 6f62     Started..0.Verbo
   d8730:	6573 4d20 646f 2065 7453 706f 6570 2e64     se Mode Stopped.
   d8740:	7b00 5422 6d65 6570 6172 7574 6572 3a22     .{"Temperature":
   d8750:	3325 312e 2c66 2220 6142 7474 7265 2279     %3.1f, "Battery"
   d8760:	253a 2e33 6631 007d 6941 2d72 7551 6c61     :%3.1f}.Air-Qual
   d8770:	7469 2d79 6f48 6b6f 4d00 4145 5553 4952     ity-Hook.MEASURI
   d8780:	474e 5300 6174 6574 5200 5045 524f 4954     NG.State.REPORTI
   d8790:	474e 5400 6d65 6570 6172 7574 6572 4900     NG.Temperature.I
   d87a0:	4c44 0045 6563 736c 7569 0073 6552 656c     DLE.celsius.Rele
   d87b0:	7361 0065 6953 6e67 6c61 4200 7461 6574     ase.Signal.Batte
   d87c0:	7972 7600 7265 6f62 6573 6f4d 6564 3100          ry.verboseMode.

000d87cf <_ZL13releaseNumber>:
   d87cf:	2e31 3830 0000 0000 0000                         1.08.....

000d87d8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d87e0:	5347 000d 534d 000d 5365 000d 535b 000d     GS..MS..eS..[S..
   d87f0:	5349 000d                                   IS..

000d87f4 <_ZTVN5spark13EthernetClassE>:
	...
   d87fc:	593b 000d 5931 000d 5927 000d 591d 000d     ;Y..1Y..'Y...Y..
   d880c:	5911 000d 5905 000d 58f9 000d 58f1 000d     .Y...Y...X...X..
   d881c:	58e7 000d 58dd 000d 5cc1 000d               .X...X...\..

000d8828 <_ZTV7TwoWire>:
	...
   d8830:	5959 000d 59a3 000d 597b 000d 595b 000d     YY...Y..{Y..[Y..
   d8840:	5983 000d 598b 000d 5993 000d 599b 000d     .Y...Y...Y...Y..

000d8850 <_ZTV9IPAddress>:
	...
   d8858:	59f5 000d 59e5 000d 59e7 000d 0066 6e6c     .Y...Y...Y..f.ln
   d8868:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d8878:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d8888:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d8898:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d88a8:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d88b8:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d88c8:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d88d8:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d88e8:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d88f8:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d8908:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d8918:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d8928:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d8938:	6170 696e 0063 6c61 006c 0000               panic.all...

000d8944 <_ZTVN5spark9MeshClassE>:
	...
   d894c:	5b59 000d 5b4f 000d 5b45 000d 4ccd 000d     Y[..O[..E[...L..
   d895c:	5b39 000d 5b2d 000d 5b21 000d 5b19 000d     9[..-[..![...[..
   d896c:	5b0f 000d 5b05 000d 5cc1 000d               .[...[...\..

000d8978 <_ZTVN5spark12NetworkClassE>:
	...
   d8980:	5c59 000d 5c63 000d 5c6d 000d 5c77 000d     Y\..c\..m\..w\..
   d8990:	5c81 000d 5c8d 000d 5c99 000d 5ca5 000d     .\...\...\...\..
   d89a0:	5cad 000d 5cb7 000d 5cc1 000d               .\...\...\..

000d89ac <_ZTV8SPIClass>:
	...
   d89b4:	5e79 000d 5e7b 000d                         y^..{^..

000d89bc <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d89c4:	6051 000d 6057 000d 653f 000d 6065 000d     Q`..W`..?e..e`..
   d89d4:	6053 000d                                   S`..

000d89d8 <_ZTV9TCPClient>:
	...
   d89e0:	4bd9 000d 4c33 000d 5fc9 000d 5fe3 000d     .K..3L..._..._..
   d89f0:	63e5 000d 6227 000d 61f9 000d 600d 000d     .c..'b...a...`..
   d8a00:	62bd 000d 6069 000d 625b 000d 63b7 000d     .b..i`..[b...c..
   d8a10:	600f 000d 6047 000d 5ff5 000d 6159 000d     .`..G`..._..Ya..
   d8a20:	61d9 000d 6977 6972 676e 7200 6365 2076     .a..wiring.recv 
   d8a30:	7265 6f72 2072 203d 6425 2500 302b 6433     error = %d.%+03d
   d8a40:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d8a50:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d8a60:	0065 0000                                   e...

000d8a64 <_ZTV3UDP>:
	...
   d8a6c:	4bb9 000d 4c1f 000d 6671 000d 679b 000d     .K...L..qf...g..
   d8a7c:	6669 000d 6687 000d 66a5 000d 66bf 000d     if...f...f...f..
   d8a8c:	66e3 000d 677f 000d 6a81 000d 6821 000d     .f...g...j..!h..
   d8a9c:	69a1 000d 6651 000d 6b61 000d 6925 000d     .i..Qf..ak..%i..
   d8aac:	6859 000d 6b8f 000d 67c5 000d 665f 000d     Yh...k...g.._f..
   d8abc:	6801 000d 6665 000d 66c1 000d fff0 ffff     .h..ef...f......
   d8acc:	0000 0000 66db 000d                         .....f..

000d8ad4 <_ZTV11USARTSerial>:
	...
   d8adc:	6bcb 000d 6c1b 000d 6c29 000d 5da1 000d     .k...l..)l...]..
   d8aec:	6bdf 000d 6c01 000d 6bed 000d 6c15 000d     .k...l...k...l..
   d8afc:	6bcd 000d 6bd1 000d                         .k...k..

000d8b04 <_ZTV9USBSerial>:
	...
   d8b0c:	6cd1 000d 6d21 000d 6d2f 000d 5da1 000d     .l..!m../m...]..
   d8b1c:	6d0d 000d 6cd3 000d 6ce9 000d 6d1b 000d     .m...l...l...m..
   d8b2c:	6cff 000d 6ccd 000d                         .l...l..

000d8b34 <_ZTVN5spark9WiFiClassE>:
	...
   d8b3c:	6ea1 000d 6e97 000d 6e8d 000d 6e35 000d     .n...n...n..5n..
   d8b4c:	6e81 000d 6e75 000d 6e69 000d 6e61 000d     .n..un..in..an..
   d8b5c:	6e57 000d 6e4d 000d 5cc1 000d               Wn..Mn...\..

000d8b68 <_ZTV10WiFiSignal>:
	...
   d8b70:	6dd5 000d 6e3f 000d 6dd7 000d 6ee1 000d     .m..?n...m...n..
   d8b80:	6ddd 000d 6ead 000d 6e09 000d               .m...n...n..

000d8b8c <_ctype_>:
   d8b8c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8b9c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8bac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8bbc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8bcc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8bdc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8bec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8bfc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8c0c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8c90 <__sf_fake_stdin>:
	...

000d8cb0 <__sf_fake_stdout>:
	...

000d8cd0 <__sf_fake_stderr>:
	...

000d8cf0 <__month_lengths>:
   d8cf0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d8d00:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8d10:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8d20:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8d30:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8d40:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8d50:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8d60:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8d70:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d8d80:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d8d8c <link_const_variable_data_end>:
   d8d8c:	000d4531 	.word	0x000d4531
   d8d90:	000d47c7 	.word	0x000d47c7
   d8d94:	000d4ba9 	.word	0x000d4ba9
   d8d98:	000d4c49 	.word	0x000d4c49
   d8d9c:	000d4ca5 	.word	0x000d4ca5
   d8da0:	000d4cd9 	.word	0x000d4cd9
   d8da4:	000d4ced 	.word	0x000d4ced
   d8da8:	000d4cf1 	.word	0x000d4cf1
   d8dac:	000d4d01 	.word	0x000d4d01
   d8db0:	000d4d29 	.word	0x000d4d29
   d8db4:	000d4d51 	.word	0x000d4d51
   d8db8:	000d5945 	.word	0x000d5945
   d8dbc:	000d5af5 	.word	0x000d5af5
   d8dc0:	000d5c0d 	.word	0x000d5c0d
   d8dc4:	000d5d8d 	.word	0x000d5d8d
   d8dc8:	000d5e5d 	.word	0x000d5e5d
   d8dcc:	000d5fb1 	.word	0x000d5fb1
   d8dd0:	000d663d 	.word	0x000d663d
   d8dd4:	000d6fb9 	.word	0x000d6fb9
   d8dd8:	000d7179 	.word	0x000d7179
   d8ddc:	000d71d1 	.word	0x000d71d1
   d8de0:	000d7295 	.word	0x000d7295
   d8de4:	000d7319 	.word	0x000d7319
   d8de8:	000d739d 	.word	0x000d739d

000d8dec <link_constructors_end>:
   d8dec:	00000000 	.word	0x00000000
