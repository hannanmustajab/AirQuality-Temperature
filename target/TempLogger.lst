
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/TempLogger/target/TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017da4  2**0
                  CONTENTS
  3 .data         000000b8  2003e254  000d7cc0  0000e254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004e4  2003e30c  2003e30c  0001e30c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d7d78  000d7d78  00017d78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7da0  000d7da0  00017da0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000cc0ae  00000000  00000000  00017da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000121b1  00000000  00000000  000e3e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015f14  00000000  00000000  000f6003  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002248  00000000  00000000  0010bf17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003708  00000000  00000000  0010e15f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036567  00000000  00000000  00111867  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002b70f  00000000  00000000  00147dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e2710  00000000  00000000  001734dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c34c  00000000  00000000  00255bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	3c 77 0d 00                                         <w..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ff65 	bl	d6efc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff6a 	bl	d6f12 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e254 	.word	0x2003e254
   d4048:	000d7cc0 	.word	0x000d7cc0
   d404c:	2003e30c 	.word	0x2003e30c
   d4050:	2003e30c 	.word	0x2003e30c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f835 	bl	d60c8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7cb8 	.word	0x000d7cb8
   d4080:	000d7c78 	.word	0x000d7c78

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ec 	b.w	d4260 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f89f 	bl	d41cc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bfe7 	b.w	d6064 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bea9 	b.w	d4dec <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 beaf 	b.w	d4dfc <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bead 	b.w	d4dfc <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d002      	beq.n	d40bc <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40ba:	e004      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40bc:	6001      	str	r1, [r0, #0]
	      break;
   d40be:	e002      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c0:	680b      	ldr	r3, [r1, #0]
   d40c2:	b100      	cbz	r0, d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c6:	2000      	movs	r0, #0
   d40c8:	4770      	bx	lr

000d40ca <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40cc:	6804      	ldr	r4, [r0, #0]
   d40ce:	4668      	mov	r0, sp
   d40d0:	f001 fca3 	bl	d5a1a <_ZN6StringC1EOS_>
   d40d4:	4668      	mov	r0, sp
   d40d6:	47a0      	blx	r4
   d40d8:	4604      	mov	r4, r0
   d40da:	4668      	mov	r0, sp
   d40dc:	f001 fcad 	bl	d5a3a <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e0:	4620      	mov	r0, r4
   d40e2:	b004      	add	sp, #16
   d40e4:	bd10      	pop	{r4, pc}
	...

000d40e8 <_Z11verboseMode6String>:
  getTemperature(); // Read Temperature from Sensor.
  
}

bool verboseMode(String toggleSensor)
{
   d40e8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ea:	4903      	ldr	r1, [pc, #12]	; (d40f8 <_Z11verboseMode6String+0x10>)
   d40ec:	f001 fcff 	bl	d5aee <_ZNK6String6equalsEPKc>
  }
  else 
  {
    return 0;
  }
}
   d40f0:	3000      	adds	r0, #0
   d40f2:	bf18      	it	ne
   d40f4:	2001      	movne	r0, #1
   d40f6:	bd08      	pop	{r3, pc}
   d40f8:	000d7750 	.word	0x000d7750

000d40fc <_Z17getSignalStrengthv>:
  Then back to the idle state for the next samples
  Give it a shot and let me know if you get stuck.  Your main loop should only be the Switch case statement on "state"
  */

void getSignalStrength()
{
   d40fc:	b500      	push	{lr}
   d40fe:	b08d      	sub	sp, #52	; 0x34
  WiFiSignal sig = WiFi.RSSI();
   d4100:	490a      	ldr	r1, [pc, #40]	; (d412c <_Z17getSignalStrengthv+0x30>)
   d4102:	a803      	add	r0, sp, #12
   d4104:	f001 ff54 	bl	d5fb0 <_ZN5spark9WiFiClass4RSSIEv>

  float rssi = sig.getStrength();
   d4108:	a803      	add	r0, sp, #12
   d410a:	f001 ff17 	bl	d5f3c <_ZNK10WiFiSignal11getStrengthEv>

  snprintf(signalString, sizeof(signalString), "%.0f%%", rssi);
   d410e:	ee10 0a10 	vmov	r0, s0
   d4112:	f002 fb37 	bl	d6784 <__aeabi_f2d>
   d4116:	4a06      	ldr	r2, [pc, #24]	; (d4130 <_Z17getSignalStrengthv+0x34>)
   d4118:	e9cd 0100 	strd	r0, r1, [sp]
   d411c:	2110      	movs	r1, #16
   d411e:	4805      	ldr	r0, [pc, #20]	; (d4134 <_Z17getSignalStrengthv+0x38>)
   d4120:	f000 fe84 	bl	d4e2c <snprintf>
}
   d4124:	b00d      	add	sp, #52	; 0x34
   d4126:	f85d fb04 	ldr.w	pc, [sp], #4
   d412a:	bf00      	nop
   d412c:	2003e6e0 	.word	0x2003e6e0
   d4130:	000d7753 	.word	0x000d7753
   d4134:	2003e364 	.word	0x2003e364

000d4138 <_Z16getBatteryChargev>:

void getBatteryCharge()
{
   d4138:	b507      	push	{r0, r1, r2, lr}
  float voltage = analogRead(BATT) * 0.0011224;
   d413a:	2021      	movs	r0, #33	; 0x21
   d413c:	f002 f813 	bl	d6166 <analogRead>

  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d4140:	f002 fb0e 	bl	d6760 <__aeabi_i2d>
   d4144:	a30c      	add	r3, pc, #48	; (adr r3, d4178 <_Z16getBatteryChargev+0x40>)
   d4146:	e9d3 2300 	ldrd	r2, r3, [r3]
   d414a:	f002 fb6f 	bl	d682c <__aeabi_dmul>
   d414e:	f002 fd7f 	bl	d6c50 <__aeabi_d2f>
   d4152:	f002 fb17 	bl	d6784 <__aeabi_f2d>
   d4156:	4a06      	ldr	r2, [pc, #24]	; (d4170 <_Z16getBatteryChargev+0x38>)
   d4158:	e9cd 0100 	strd	r0, r1, [sp]
   d415c:	2110      	movs	r1, #16
   d415e:	4805      	ldr	r0, [pc, #20]	; (d4174 <_Z16getBatteryChargev+0x3c>)
   d4160:	f000 fe64 	bl	d4e2c <snprintf>
}
   d4164:	b003      	add	sp, #12
   d4166:	f85d fb04 	ldr.w	pc, [sp], #4
   d416a:	bf00      	nop
   d416c:	f3af 8000 	nop.w
   d4170:	000d775a 	.word	0x000d775a
   d4174:	2003e34e 	.word	0x2003e34e
   d4178:	d2c10294 	.word	0xd2c10294
   d417c:	3f5263af 	.word	0x3f5263af

000d4180 <_Z14getTemperaturev>:

void getTemperature()
{
   d4180:	b507      	push	{r0, r1, r2, lr}
  if (sensor.read())
   d4182:	480a      	ldr	r0, [pc, #40]	; (d41ac <_Z14getTemperaturev+0x2c>)
   d4184:	f000 f9e6 	bl	d4554 <_ZN4DS184readEv>
   d4188:	b168      	cbz	r0, d41a6 <_Z14getTemperaturev+0x26>
  {
    snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", sensor.celsius()); 
   d418a:	4808      	ldr	r0, [pc, #32]	; (d41ac <_Z14getTemperaturev+0x2c>)
   d418c:	f000 fa06 	bl	d459c <_ZN4DS187celsiusEv>
   d4190:	ee10 0a10 	vmov	r0, s0
   d4194:	f002 faf6 	bl	d6784 <__aeabi_f2d>
   d4198:	4a05      	ldr	r2, [pc, #20]	; (d41b0 <_Z14getTemperaturev+0x30>)
   d419a:	e9cd 0100 	strd	r0, r1, [sp]
   d419e:	2110      	movs	r1, #16
   d41a0:	4804      	ldr	r0, [pc, #16]	; (d41b4 <_Z14getTemperaturev+0x34>)
   d41a2:	f000 fe43 	bl	d4e2c <snprintf>
  }
  
}
   d41a6:	b003      	add	sp, #12
   d41a8:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ac:	2003e320 	.word	0x2003e320
   d41b0:	000d7762 	.word	0x000d7762
   d41b4:	2003e310 	.word	0x2003e310

000d41b8 <_Z15getMeasurementsv>:

void getMeasurements()
{
   d41b8:	b508      	push	{r3, lr}

  getSignalStrength(); // Get Signal Strength
   d41ba:	f7ff ff9f 	bl	d40fc <_Z17getSignalStrengthv>

  getBatteryCharge(); // Get Battery Charge Percentage
   d41be:	f7ff ffbb 	bl	d4138 <_Z16getBatteryChargev>

  getTemperature(); // Read Temperature from Sensor.
  
}
   d41c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  getSignalStrength(); // Get Signal Strength

  getBatteryCharge(); // Get Battery Charge Percentage

  getTemperature(); // Read Temperature from Sensor.
   d41c6:	f7ff bfdb 	b.w	d4180 <_Z14getTemperaturev>
	...

000d41cc <loop>:
  state = IDLE_STATE;
  
}

void loop()
{
   d41cc:	b530      	push	{r4, r5, lr}

  switch (state)
   d41ce:	4c1d      	ldr	r4, [pc, #116]	; (d4244 <loop+0x78>)
   d41d0:	7823      	ldrb	r3, [r4, #0]
   d41d2:	2b02      	cmp	r3, #2
  state = IDLE_STATE;
  
}

void loop()
{
   d41d4:	b085      	sub	sp, #20
   d41d6:	4625      	mov	r5, r4

  switch (state)
   d41d8:	d00f      	beq.n	d41fa <loop+0x2e>
   d41da:	2b03      	cmp	r3, #3
   d41dc:	d012      	beq.n	d4204 <loop+0x38>
   d41de:	2b01      	cmp	r3, #1
   d41e0:	d12e      	bne.n	d4240 <loop+0x74>
    // Idle state should be where the Particle spends its time waiting to do something
    // Bring back the code you had before that checks to see if 5 minutes have passed
    // Once they have, change the state to MEASURING_STATE

    static unsigned long TimePassed = 0;        // If you define a variable in a case - then you need to enclose that case in brackets to define scope 
    if (Time.minute() - TimePassed >= refreshRate ) {
   d41e2:	4d19      	ldr	r5, [pc, #100]	; (d4248 <loop+0x7c>)
   d41e4:	f001 fd0a 	bl	d5bfc <_ZN9TimeClass6minuteEv>
   d41e8:	682b      	ldr	r3, [r5, #0]
   d41ea:	4298      	cmp	r0, r3
   d41ec:	d028      	beq.n	d4240 <loop+0x74>
    state = MEASURING_STATE;
   d41ee:	2302      	movs	r3, #2
   d41f0:	7023      	strb	r3, [r4, #0]
    TimePassed = Time.minute();                     // This will work - but only if we never put the device to sleep
   d41f2:	f001 fd03 	bl	d5bfc <_ZN9TimeClass6minuteEv>
   d41f6:	6028      	str	r0, [r5, #0]
   d41f8:	e022      	b.n	d4240 <loop+0x74>
                                                // always be minutes if not hours.  Also, millis() stops counting when you sleep
    break;

  case MEASURING_STATE: // Excellent, you nailed this state

    getMeasurements();
   d41fa:	f7ff ffdd 	bl	d41b8 <_Z15getMeasurementsv>

    state = REPORTING_STATE;
   d41fe:	2303      	movs	r3, #3
   d4200:	7023      	strb	r3, [r4, #0]
    break;
   d4202:	e01d      	b.n	d4240 <loop+0x74>
   d4204:	4b11      	ldr	r3, [pc, #68]	; (d424c <loop+0x80>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4206:	4a12      	ldr	r2, [pc, #72]	; (d4250 <loop+0x84>)
   d4208:	781b      	ldrb	r3, [r3, #0]
   d420a:	f88d 3000 	strb.w	r3, [sp]
   d420e:	4911      	ldr	r1, [pc, #68]	; (d4254 <loop+0x88>)
   d4210:	233c      	movs	r3, #60	; 0x3c
   d4212:	a802      	add	r0, sp, #8
   d4214:	f000 ffbe 	bl	d5194 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4218:	9c03      	ldr	r4, [sp, #12]
   d421a:	b17c      	cbz	r4, d423c <loop+0x70>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d421c:	6863      	ldr	r3, [r4, #4]
   d421e:	3b01      	subs	r3, #1
   d4220:	6063      	str	r3, [r4, #4]
   d4222:	b95b      	cbnz	r3, d423c <loop+0x70>
        {
          _M_dispose();
   d4224:	6823      	ldr	r3, [r4, #0]
   d4226:	4620      	mov	r0, r4
   d4228:	689b      	ldr	r3, [r3, #8]
   d422a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d422c:	68a3      	ldr	r3, [r4, #8]
   d422e:	3b01      	subs	r3, #1
   d4230:	60a3      	str	r3, [r4, #8]
   d4232:	b91b      	cbnz	r3, d423c <loop+0x70>
            _M_destroy();
   d4234:	6823      	ldr	r3, [r4, #0]
   d4236:	4620      	mov	r0, r4
   d4238:	68db      	ldr	r3, [r3, #12]
   d423a:	4798      	blx	r3

  case REPORTING_STATE: // Remember that you are in a finite state machine - you know exactly what the Electron
                        // has done up to this point.  You don't have to waitUntil here because there is no issues with rate limiteing
                        // Otherwise, you nailed this state as well
    if (verboseMode) Particle.publish("Temperature", temperatureString, PRIVATE);
    state = IDLE_STATE;
   d423c:	2301      	movs	r3, #1
   d423e:	702b      	strb	r3, [r5, #0]
    break;
  }
}
   d4240:	b005      	add	sp, #20
   d4242:	bd30      	pop	{r4, r5, pc}
   d4244:	2003e34c 	.word	0x2003e34c
   d4248:	2003e360 	.word	0x2003e360
   d424c:	2003e34d 	.word	0x2003e34d
   d4250:	2003e310 	.word	0x2003e310
   d4254:	000d7772 	.word	0x000d7772

000d4258 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4258:	2300      	movs	r3, #0
   d425a:	2204      	movs	r2, #4
   d425c:	f000 bd3e 	b.w	d4cdc <spark_variable>

000d4260 <setup>:




void setup()
{
   d4260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  getTemperature();
   d4262:	f7ff ff8d 	bl	d4180 <_Z14getTemperaturev>
  Particle.variable("celsius", temperatureString); // Setup Particle Variable
   d4266:	491b      	ldr	r1, [pc, #108]	; (d42d4 <setup+0x74>)
   d4268:	481b      	ldr	r0, [pc, #108]	; (d42d8 <setup+0x78>)
   d426a:	f7ff fff5 	bl	d4258 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);
   d426e:	491b      	ldr	r1, [pc, #108]	; (d42dc <setup+0x7c>)
   d4270:	481b      	ldr	r0, [pc, #108]	; (d42e0 <setup+0x80>)
   d4272:	f7ff fff1 	bl	d4258 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString); // Particle variables that enable monitoring using the mobile app
   d4276:	491b      	ldr	r1, [pc, #108]	; (d42e4 <setup+0x84>)
   d4278:	481b      	ldr	r0, [pc, #108]	; (d42e8 <setup+0x88>)
   d427a:	f7ff ffed 	bl	d4258 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);
   d427e:	491b      	ldr	r1, [pc, #108]	; (d42ec <setup+0x8c>)
   d4280:	481b      	ldr	r0, [pc, #108]	; (d42f0 <setup+0x90>)
   d4282:	f7ff ffe9 	bl	d4258 <_ZN10CloudClass8variableIA7_cIA16_cEEEbRKT_DpRKT0_>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4286:	4b1b      	ldr	r3, [pc, #108]	; (d42f4 <setup+0x94>)
   d4288:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d428a:	4b1b      	ldr	r3, [pc, #108]	; (d42f8 <setup+0x98>)
   d428c:	9303      	str	r3, [sp, #12]
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d428e:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   d4290:	4b1a      	ldr	r3, [pc, #104]	; (d42fc <setup+0x9c>)
   d4292:	9302      	str	r3, [sp, #8]
   d4294:	f7ff feff 	bl	d4096 <_Znwj>
   d4298:	4604      	mov	r4, r0
   d429a:	b178      	cbz	r0, d42bc <setup+0x5c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d429c:	2300      	movs	r3, #0
   d429e:	6083      	str	r3, [r0, #8]
   d42a0:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d42a2:	b133      	cbz	r3, d42b2 <setup+0x52>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d42a4:	2202      	movs	r2, #2
   d42a6:	4669      	mov	r1, sp
   d42a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d42aa:	9b03      	ldr	r3, [sp, #12]
   d42ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d42ae:	9b02      	ldr	r3, [sp, #8]
   d42b0:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d42b2:	4a13      	ldr	r2, [pc, #76]	; (d4300 <setup+0xa0>)
   d42b4:	4813      	ldr	r0, [pc, #76]	; (d4304 <setup+0xa4>)
   d42b6:	4621      	mov	r1, r4
   d42b8:	f000 fe35 	bl	d4f26 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d42bc:	9b02      	ldr	r3, [sp, #8]
   d42be:	b11b      	cbz	r3, d42c8 <setup+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42c0:	2203      	movs	r2, #3
   d42c2:	4669      	mov	r1, sp
   d42c4:	4668      	mov	r0, sp
   d42c6:	4798      	blx	r3
  Particle.function("verboseMode", verboseMode);  // Added Particle Function For VerboseMode. 
  
  state = IDLE_STATE;
   d42c8:	4b0f      	ldr	r3, [pc, #60]	; (d4308 <setup+0xa8>)
   d42ca:	2201      	movs	r2, #1
   d42cc:	701a      	strb	r2, [r3, #0]
  
}
   d42ce:	b004      	add	sp, #16
   d42d0:	bd10      	pop	{r4, pc}
   d42d2:	bf00      	nop
   d42d4:	2003e310 	.word	0x2003e310
   d42d8:	000d777e 	.word	0x000d777e
   d42dc:	000d77a9 	.word	0x000d77a9
   d42e0:	000d7786 	.word	0x000d7786
   d42e4:	2003e364 	.word	0x2003e364
   d42e8:	000d778e 	.word	0x000d778e
   d42ec:	2003e34e 	.word	0x2003e34e
   d42f0:	000d7795 	.word	0x000d7795
   d42f4:	000d40e9 	.word	0x000d40e9
   d42f8:	000d40cb 	.word	0x000d40cb
   d42fc:	000d40b3 	.word	0x000d40b3
   d4300:	000d779d 	.word	0x000d779d
   d4304:	000d4eff 	.word	0x000d4eff
   d4308:	2003e34c 	.word	0x2003e34c

000d430c <_GLOBAL__sub_I_sensor>:
  }
  else 
  {
    return 0;
  }
}
   d430c:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d430e:	4b06      	ldr	r3, [pc, #24]	; (d4328 <_GLOBAL__sub_I_sensor+0x1c>)
   d4310:	2201      	movs	r2, #1
   d4312:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4314:	f000 fb8e 	bl	d4a34 <HAL_Pin_Map>
const char releaseNumber[6] = "1.06"; // Displays the release on the menu ****  this is not a production release ****

#include "DS18.h"

// Initialize modules here
DS18 sensor(D3); // Initialize sensor object
   d4318:	2200      	movs	r2, #0
   d431a:	2103      	movs	r1, #3
   d431c:	4803      	ldr	r0, [pc, #12]	; (d432c <_GLOBAL__sub_I_sensor+0x20>)
  }
  else 
  {
    return 0;
  }
}
   d431e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const char releaseNumber[6] = "1.06"; // Displays the release on the menu ****  this is not a production release ****

#include "DS18.h"

// Initialize modules here
DS18 sensor(D3); // Initialize sensor object
   d4322:	f000 b816 	b.w	d4352 <_ZN4DS18C1Etb>
   d4326:	bf00      	nop
   d4328:	2003e34d 	.word	0x2003e34d
   d432c:	2003e320 	.word	0x2003e320

000d4330 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4330:	2300      	movs	r3, #0
  _celsius = 0;
   d4332:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4334:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d4336:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d4338:	6183      	str	r3, [r0, #24]
   d433a:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d433c:	6203      	str	r3, [r0, #32]
   d433e:	6243      	str	r3, [r0, #36]	; 0x24
   d4340:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d4344:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d4348:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d434c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d4350:	4770      	bx	lr

000d4352 <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d4352:	b538      	push	{r3, r4, r5, lr}
   d4354:	4604      	mov	r4, r0
   d4356:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4358:	f000 f994 	bl	d4684 <_ZN7OneWireC1Et>
   d435c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d4360:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4362:	73a5      	strb	r5, [r4, #14]
   d4364:	8223      	strh	r3, [r4, #16]
{
  init();
   d4366:	f7ff ffe3 	bl	d4330 <_ZN4DS184initEv>
}
   d436a:	4620      	mov	r0, r4
   d436c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4370 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4372:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d4376:	680b      	ldr	r3, [r1, #0]
   d4378:	6183      	str	r3, [r0, #24]
   d437a:	f100 0518 	add.w	r5, r0, #24
   d437e:	684b      	ldr	r3, [r1, #4]
   d4380:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4382:	780b      	ldrb	r3, [r1, #0]
   d4384:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4386:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4388:	d00a      	beq.n	d43a0 <_ZN4DS184readEPh+0x30>
   d438a:	d803      	bhi.n	d4394 <_ZN4DS184readEPh+0x24>
   d438c:	2b10      	cmp	r3, #16
   d438e:	d142      	bne.n	d4416 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d4390:	2301      	movs	r3, #1
   d4392:	e008      	b.n	d43a6 <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4394:	2b26      	cmp	r3, #38	; 0x26
   d4396:	d005      	beq.n	d43a4 <_ZN4DS184readEPh+0x34>
   d4398:	2b28      	cmp	r3, #40	; 0x28
   d439a:	d13c      	bne.n	d4416 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d439c:	2302      	movs	r3, #2
   d439e:	e002      	b.n	d43a6 <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d43a0:	2303      	movs	r3, #3
   d43a2:	e000      	b.n	d43a6 <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d43a4:	2304      	movs	r3, #4
   d43a6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d43aa:	4620      	mov	r0, r4
   d43ac:	f000 f974 	bl	d4698 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d43b0:	4629      	mov	r1, r5
   d43b2:	4620      	mov	r0, r4
   d43b4:	f000 fa30 	bl	d4818 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d43b8:	7ba2      	ldrb	r2, [r4, #14]
   d43ba:	2144      	movs	r1, #68	; 0x44
   d43bc:	4620      	mov	r0, r4
   d43be:	f000 f9f8 	bl	d47b2 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d43c2:	8a20      	ldrh	r0, [r4, #16]
   d43c4:	f000 fd4a 	bl	d4e5c <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d43c8:	4620      	mov	r0, r4
   d43ca:	f000 f965 	bl	d4698 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d43ce:	4629      	mov	r1, r5
   d43d0:	4620      	mov	r0, r4
   d43d2:	f000 fa21 	bl	d4818 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d43d6:	2200      	movs	r2, #0
   d43d8:	21b8      	movs	r1, #184	; 0xb8
   d43da:	4620      	mov	r0, r4
   d43dc:	f000 f9e9 	bl	d47b2 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d43e0:	2200      	movs	r2, #0
   d43e2:	4611      	mov	r1, r2
   d43e4:	4620      	mov	r0, r4
   d43e6:	f000 f9e4 	bl	d47b2 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d43ea:	4620      	mov	r0, r4
   d43ec:	f000 f954 	bl	d4698 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d43f0:	4629      	mov	r1, r5
   d43f2:	4620      	mov	r0, r4
   d43f4:	f000 fa10 	bl	d4818 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d43f8:	2200      	movs	r2, #0
   d43fa:	21be      	movs	r1, #190	; 0xbe
   d43fc:	4620      	mov	r0, r4
   d43fe:	f000 f9d8 	bl	d47b2 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d4402:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d4406:	2b04      	cmp	r3, #4
   d4408:	d109      	bne.n	d441e <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d440a:	2200      	movs	r2, #0
   d440c:	4611      	mov	r1, r2
   d440e:	4620      	mov	r0, r4
   d4410:	f000 f9cf 	bl	d47b2 <_ZN7OneWire5writeEhh>
   d4414:	e003      	b.n	d441e <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d4416:	2000      	movs	r0, #0
   d4418:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d441c:	e094      	b.n	d4548 <_ZN4DS184readEPh+0x1d8>
   d441e:	f104 051f 	add.w	r5, r4, #31
   d4422:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d4426:	4620      	mov	r0, r4
   d4428:	f000 f9e6 	bl	d47f8 <_ZN7OneWire4readEv>
   d442c:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d4430:	42ae      	cmp	r6, r5
   d4432:	d1f8      	bne.n	d4426 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d4434:	2108      	movs	r1, #8
   d4436:	f104 0020 	add.w	r0, r4, #32
   d443a:	f000 fa86 	bl	d494a <_ZN7OneWire4crc8EPhh>
   d443e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d4442:	4283      	cmp	r3, r0
   d4444:	d004      	beq.n	d4450 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d4446:	2301      	movs	r3, #1
   d4448:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d444c:	2000      	movs	r0, #0
   d444e:	e07b      	b.n	d4548 <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4450:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d4454:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d4458:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d445c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d4460:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4462:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d4464:	d127      	bne.n	d44b6 <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d4466:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d446a:	ee07 3a90 	vmov	s15, r3
   d446e:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4472:	08d2      	lsrs	r2, r2, #3
   d4474:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d4478:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d447c:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d4480:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4482:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d4486:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d448a:	d045      	beq.n	d4518 <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d448c:	ee18 0a90 	vmov	r0, s17
   d4490:	f002 f978 	bl	d6784 <__aeabi_f2d>
   d4494:	4606      	mov	r6, r0
   d4496:	ee18 0a10 	vmov	r0, s16
   d449a:	460f      	mov	r7, r1
   d449c:	f002 f972 	bl	d6784 <__aeabi_f2d>
   d44a0:	2200      	movs	r2, #0
   d44a2:	4b2b      	ldr	r3, [pc, #172]	; (d4550 <_ZN4DS184readEPh+0x1e0>)
   d44a4:	f002 f9c2 	bl	d682c <__aeabi_dmul>
   d44a8:	4602      	mov	r2, r0
   d44aa:	460b      	mov	r3, r1
   d44ac:	4630      	mov	r0, r6
   d44ae:	4639      	mov	r1, r7
   d44b0:	f002 f808 	bl	d64c4 <__aeabi_dsub>
   d44b4:	e044      	b.n	d4540 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d44b6:	2901      	cmp	r1, #1
   d44b8:	d003      	beq.n	d44c2 <_ZN4DS184readEPh+0x152>
   d44ba:	d344      	bcc.n	d4546 <_ZN4DS184readEPh+0x1d6>
   d44bc:	2903      	cmp	r1, #3
   d44be:	d910      	bls.n	d44e2 <_ZN4DS184readEPh+0x172>
   d44c0:	e041      	b.n	d4546 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d44c2:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d44c6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d44ca:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d44cc:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d44ce:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d44d0:	d119      	bne.n	d4506 <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d44d2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d44d6:	f023 030f 	bic.w	r3, r3, #15
   d44da:	f1c2 020c 	rsb	r2, r2, #12
   d44de:	4413      	add	r3, r2
   d44e0:	e010      	b.n	d4504 <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d44e2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d44e6:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d44ea:	d102      	bne.n	d44f2 <_ZN4DS184readEPh+0x182>
   d44ec:	f023 0307 	bic.w	r3, r3, #7
   d44f0:	e008      	b.n	d4504 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d44f2:	2a20      	cmp	r2, #32
   d44f4:	d102      	bne.n	d44fc <_ZN4DS184readEPh+0x18c>
   d44f6:	f023 0303 	bic.w	r3, r3, #3
   d44fa:	e003      	b.n	d4504 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d44fc:	2a40      	cmp	r2, #64	; 0x40
   d44fe:	d102      	bne.n	d4506 <_ZN4DS184readEPh+0x196>
   d4500:	f023 0301 	bic.w	r3, r3, #1
   d4504:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d4506:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d450a:	ee07 3a90 	vmov	s15, r3
   d450e:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d4512:	edc4 7a05 	vstr	s15, [r4, #20]
   d4516:	e016      	b.n	d4546 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4518:	ee18 0a10 	vmov	r0, s16
   d451c:	f002 f932 	bl	d6784 <__aeabi_f2d>
   d4520:	2200      	movs	r2, #0
   d4522:	4b0b      	ldr	r3, [pc, #44]	; (d4550 <_ZN4DS184readEPh+0x1e0>)
   d4524:	f002 f982 	bl	d682c <__aeabi_dmul>
   d4528:	4606      	mov	r6, r0
   d452a:	ee18 0a90 	vmov	r0, s17
   d452e:	460f      	mov	r7, r1
   d4530:	f002 f928 	bl	d6784 <__aeabi_f2d>
   d4534:	4602      	mov	r2, r0
   d4536:	460b      	mov	r3, r1
   d4538:	4630      	mov	r0, r6
   d453a:	4639      	mov	r1, r7
   d453c:	f001 ffc4 	bl	d64c8 <__adddf3>
   d4540:	f002 fb86 	bl	d6c50 <__aeabi_d2f>
   d4544:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d4546:	2001      	movs	r0, #1
}
   d4548:	ecbd 8b02 	vpop	{d8}
   d454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d454e:	bf00      	nop
   d4550:	3fa00000 	.word	0x3fa00000

000d4554 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d4554:	b538      	push	{r3, r4, r5, lr}
   d4556:	4604      	mov	r4, r0
  init();
   d4558:	f7ff feea 	bl	d4330 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d455c:	f100 0518 	add.w	r5, r0, #24
   d4560:	4629      	mov	r1, r5
   d4562:	f000 f977 	bl	d4854 <_ZN7OneWire6searchEPh>
   d4566:	b930      	cbnz	r0, d4576 <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d4568:	2301      	movs	r3, #1
   d456a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d456e:	4620      	mov	r0, r4
   d4570:	f000 f964 	bl	d483c <_ZN7OneWire12reset_searchEv>
    return false;
   d4574:	e010      	b.n	d4598 <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d4576:	2107      	movs	r1, #7
   d4578:	4628      	mov	r0, r5
   d457a:	f000 f9e6 	bl	d494a <_ZN7OneWire4crc8EPhh>
   d457e:	7fe3      	ldrb	r3, [r4, #31]
   d4580:	4283      	cmp	r3, r0
   d4582:	d003      	beq.n	d458c <_ZN4DS184readEv+0x38>
    _crcError = true;
   d4584:	2301      	movs	r3, #1
   d4586:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d458a:	e005      	b.n	d4598 <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d458c:	4629      	mov	r1, r5
   d458e:	4620      	mov	r0, r4
}
   d4590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d4594:	f7ff beec 	b.w	d4370 <_ZN4DS184readEPh>
}
   d4598:	2000      	movs	r0, #0
   d459a:	bd38      	pop	{r3, r4, r5, pc}

000d459c <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d459c:	ed90 0a05 	vldr	s0, [r0, #20]
   d45a0:	4770      	bx	lr

000d45a2 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d45a2:	f000 ba47 	b.w	d4a34 <HAL_Pin_Map>
	...

000d45a8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d45a8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45aa:	6803      	ldr	r3, [r0, #0]
   d45ac:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d45ae:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45b0:	d904      	bls.n	d45bc <nrf_gpio_pin_port_decode+0x14>
   d45b2:	4a07      	ldr	r2, [pc, #28]	; (d45d0 <nrf_gpio_pin_port_decode+0x28>)
   d45b4:	2100      	movs	r1, #0
   d45b6:	200a      	movs	r0, #10
   d45b8:	f000 fb44 	bl	d4c44 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d45bc:	6823      	ldr	r3, [r4, #0]
   d45be:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d45c0:	bf83      	ittte	hi
   d45c2:	f003 031f 	andhi.w	r3, r3, #31
   d45c6:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d45c8:	4802      	ldrhi	r0, [pc, #8]	; (d45d4 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d45ca:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d45ce:	bd10      	pop	{r4, pc}
   d45d0:	000d49f5 	.word	0x000d49f5
   d45d4:	50000300 	.word	0x50000300

000d45d8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d45d8:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d45da:	4b0b      	ldr	r3, [pc, #44]	; (d4608 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	0100      	lsls	r0, r0, #4
   d45e0:	1819      	adds	r1, r3, r0
   d45e2:	5c1a      	ldrb	r2, [r3, r0]
   d45e4:	784b      	ldrb	r3, [r1, #1]
   d45e6:	a802      	add	r0, sp, #8
   d45e8:	f003 031f 	and.w	r3, r3, #31
   d45ec:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d45f0:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45f4:	f7ff ffd8 	bl	d45a8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d45f8:	9a01      	ldr	r2, [sp, #4]
   d45fa:	2301      	movs	r3, #1
   d45fc:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d45fe:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4602:	b003      	add	sp, #12
   d4604:	f85d fb04 	ldr.w	pc, [sp], #4
   d4608:	2003e374 	.word	0x2003e374

000d460c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d460c:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d460e:	4b0b      	ldr	r3, [pc, #44]	; (d463c <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	0100      	lsls	r0, r0, #4
   d4614:	1819      	adds	r1, r3, r0
   d4616:	5c1a      	ldrb	r2, [r3, r0]
   d4618:	784b      	ldrb	r3, [r1, #1]
   d461a:	a802      	add	r0, sp, #8
   d461c:	f003 031f 	and.w	r3, r3, #31
   d4620:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4624:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4628:	f7ff ffbe 	bl	d45a8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d462c:	9a01      	ldr	r2, [sp, #4]
   d462e:	2301      	movs	r3, #1
   d4630:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4632:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d4636:	b003      	add	sp, #12
   d4638:	f85d fb04 	ldr.w	pc, [sp], #4
   d463c:	2003e374 	.word	0x2003e374

000d4640 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4640:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4642:	4b0f      	ldr	r3, [pc, #60]	; (d4680 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	0100      	lsls	r0, r0, #4
   d4648:	181a      	adds	r2, r3, r0
   d464a:	5c1c      	ldrb	r4, [r3, r0]
   d464c:	7853      	ldrb	r3, [r2, #1]
   d464e:	a802      	add	r0, sp, #8
   d4650:	f003 031f 	and.w	r3, r3, #31
   d4654:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4658:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d465c:	f7ff ffa4 	bl	d45a8 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4660:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4664:	a802      	add	r0, sp, #8
   d4666:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d466a:	f7ff ff9d 	bl	d45a8 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d466e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d4672:	9800      	ldr	r0, [sp, #0]
   d4674:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4678:	f000 0001 	and.w	r0, r0, #1
   d467c:	b002      	add	sp, #8
   d467e:	bd10      	pop	{r4, pc}
   d4680:	2003e374 	.word	0x2003e374

000d4684 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d4684:	b538      	push	{r3, r4, r5, lr}
   d4686:	4604      	mov	r4, r0
   d4688:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d468a:	4628      	mov	r0, r5
   d468c:	2100      	movs	r1, #0
   d468e:	f001 fd59 	bl	d6144 <pinMode>
    _pin = pin;
   d4692:	8025      	strh	r5, [r4, #0]
}
   d4694:	4620      	mov	r0, r4
   d4696:	bd38      	pop	{r3, r4, r5, pc}

000d4698 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d4698:	b538      	push	{r3, r4, r5, lr}
   d469a:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d469c:	f000 ff60 	bl	d5560 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d46a0:	2100      	movs	r1, #0
   d46a2:	8828      	ldrh	r0, [r5, #0]
   d46a4:	f000 f9d6 	bl	d4a54 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d46a8:	f000 ff5c 	bl	d5564 <_Z10interruptsv>
   d46ac:	247d      	movs	r4, #125	; 0x7d
   d46ae:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d46b0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d46b4:	d02b      	beq.n	d470e <_ZN7OneWire5resetEv+0x76>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d46b6:	2002      	movs	r0, #2
   d46b8:	f000 f99c 	bl	d49f4 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d46bc:	8828      	ldrh	r0, [r5, #0]
   d46be:	f7ff ffbf 	bl	d4640 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d46c2:	2800      	cmp	r0, #0
   d46c4:	d0f3      	beq.n	d46ae <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d46c6:	f000 ff4b 	bl	d5560 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d46ca:	8828      	ldrh	r0, [r5, #0]
   d46cc:	f7ff ff84 	bl	d45d8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d46d0:	2101      	movs	r1, #1
   d46d2:	8828      	ldrh	r0, [r5, #0]
   d46d4:	f000 f9be 	bl	d4a54 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d46d8:	f000 ff44 	bl	d5564 <_Z10interruptsv>
   d46dc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d46e0:	f000 f988 	bl	d49f4 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d46e4:	f000 ff3c 	bl	d5560 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d46e8:	2100      	movs	r1, #0
   d46ea:	8828      	ldrh	r0, [r5, #0]
   d46ec:	f000 f9b2 	bl	d4a54 <HAL_Pin_Mode>
   d46f0:	2046      	movs	r0, #70	; 0x46
   d46f2:	f000 f97f 	bl	d49f4 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d46f6:	8828      	ldrh	r0, [r5, #0]
   d46f8:	f7ff ffa2 	bl	d4640 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d46fc:	fab0 f480 	clz	r4, r0

    interrupts();
   d4700:	f000 ff30 	bl	d5564 <_Z10interruptsv>
   d4704:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4708:	0964      	lsrs	r4, r4, #5
   d470a:	f000 f973 	bl	d49f4 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d470e:	4620      	mov	r0, r4
   d4710:	bd38      	pop	{r3, r4, r5, pc}

000d4712 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d4712:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4714:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d4718:	4604      	mov	r4, r0
    if (v & 1) {
   d471a:	d013      	beq.n	d4744 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d471c:	f000 ff20 	bl	d5560 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4720:	8820      	ldrh	r0, [r4, #0]
   d4722:	f7ff ff59 	bl	d45d8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4726:	2101      	movs	r1, #1
   d4728:	8820      	ldrh	r0, [r4, #0]
   d472a:	f000 f993 	bl	d4a54 <HAL_Pin_Mode>
   d472e:	200a      	movs	r0, #10
   d4730:	f000 f960 	bl	d49f4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4734:	8820      	ldrh	r0, [r4, #0]
   d4736:	2100      	movs	r1, #0
   d4738:	f000 f98c 	bl	d4a54 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d473c:	f000 ff12 	bl	d5564 <_Z10interruptsv>
   d4740:	2037      	movs	r0, #55	; 0x37
   d4742:	e012      	b.n	d476a <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4744:	f000 ff0c 	bl	d5560 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4748:	8820      	ldrh	r0, [r4, #0]
   d474a:	f7ff ff45 	bl	d45d8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d474e:	2101      	movs	r1, #1
   d4750:	8820      	ldrh	r0, [r4, #0]
   d4752:	f000 f97f 	bl	d4a54 <HAL_Pin_Mode>
   d4756:	2041      	movs	r0, #65	; 0x41
   d4758:	f000 f94c 	bl	d49f4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d475c:	8820      	ldrh	r0, [r4, #0]
   d475e:	4629      	mov	r1, r5
   d4760:	f000 f978 	bl	d4a54 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d4764:	f000 fefe 	bl	d5564 <_Z10interruptsv>
   d4768:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d476a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d476e:	f000 b941 	b.w	d49f4 <HAL_Delay_Microseconds>

000d4772 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d4772:	b510      	push	{r4, lr}
   d4774:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d4776:	f000 fef3 	bl	d5560 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d477a:	8820      	ldrh	r0, [r4, #0]
   d477c:	f7ff ff2c 	bl	d45d8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4780:	2101      	movs	r1, #1
   d4782:	8820      	ldrh	r0, [r4, #0]
   d4784:	f000 f966 	bl	d4a54 <HAL_Pin_Mode>
   d4788:	2003      	movs	r0, #3
   d478a:	f000 f933 	bl	d49f4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d478e:	2100      	movs	r1, #0
   d4790:	8820      	ldrh	r0, [r4, #0]
   d4792:	f000 f95f 	bl	d4a54 <HAL_Pin_Mode>
   d4796:	200a      	movs	r0, #10
   d4798:	f000 f92c 	bl	d49f4 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d479c:	8820      	ldrh	r0, [r4, #0]
   d479e:	f7ff ff4f 	bl	d4640 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d47a2:	4604      	mov	r4, r0

    interrupts();
   d47a4:	f000 fede 	bl	d5564 <_Z10interruptsv>
   d47a8:	2035      	movs	r0, #53	; 0x35
   d47aa:	f000 f923 	bl	d49f4 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d47ae:	4620      	mov	r0, r4
   d47b0:	bd10      	pop	{r4, pc}

000d47b2 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d47b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47b6:	4605      	mov	r5, r0
   d47b8:	4688      	mov	r8, r1
   d47ba:	4617      	mov	r7, r2
   d47bc:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d47be:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d47c0:	ea18 0f04 	tst.w	r8, r4
   d47c4:	bf14      	ite	ne
   d47c6:	2101      	movne	r1, #1
   d47c8:	2100      	moveq	r1, #0
   d47ca:	4628      	mov	r0, r5
   d47cc:	f7ff ffa1 	bl	d4712 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d47d0:	0064      	lsls	r4, r4, #1
   d47d2:	3e01      	subs	r6, #1
   d47d4:	b2e4      	uxtb	r4, r4
   d47d6:	d1f3      	bne.n	d47c0 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d47d8:	b167      	cbz	r7, d47f4 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d47da:	f000 fec1 	bl	d5560 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d47de:	8828      	ldrh	r0, [r5, #0]
   d47e0:	f7ff ff14 	bl	d460c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d47e4:	8828      	ldrh	r0, [r5, #0]
   d47e6:	2101      	movs	r1, #1
   d47e8:	f000 f934 	bl	d4a54 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d47ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d47f0:	f000 beb8 	b.w	d5564 <_Z10interruptsv>
   d47f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d47f8 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d47f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47fa:	4607      	mov	r7, r0
   d47fc:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d47fe:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4800:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4802:	4638      	mov	r0, r7
   d4804:	f7ff ffb5 	bl	d4772 <_ZN7OneWire8read_bitEv>
   d4808:	b100      	cbz	r0, d480c <_ZN7OneWire4readEv+0x14>
   d480a:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d480c:	0064      	lsls	r4, r4, #1
   d480e:	3e01      	subs	r6, #1
   d4810:	b2e4      	uxtb	r4, r4
   d4812:	d1f6      	bne.n	d4802 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4814:	4628      	mov	r0, r5
   d4816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4818 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4818:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d481a:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d481c:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d481e:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4820:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4822:	f7ff ffc6 	bl	d47b2 <_ZN7OneWire5writeEhh>
   d4826:	1e65      	subs	r5, r4, #1
   d4828:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d482a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d482e:	2200      	movs	r2, #0
   d4830:	4630      	mov	r0, r6
   d4832:	f7ff ffbe 	bl	d47b2 <_ZN7OneWire5writeEhh>
   d4836:	42a5      	cmp	r5, r4
   d4838:	d1f7      	bne.n	d482a <_ZN7OneWire6selectEPKh+0x12>
}
   d483a:	bd70      	pop	{r4, r5, r6, pc}

000d483c <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d483c:	2300      	movs	r3, #0
   d483e:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4840:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4842:	72c3      	strb	r3, [r0, #11]
   d4844:	f100 020a 	add.w	r2, r0, #10
   d4848:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d484a:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d484e:	4282      	cmp	r2, r0
   d4850:	d1fb      	bne.n	d484a <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d4852:	4770      	bx	lr

000d4854 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4858:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d485a:	4604      	mov	r4, r0
   d485c:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d485e:	2d00      	cmp	r5, #0
   d4860:	d15e      	bne.n	d4920 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d4862:	f7ff ff19 	bl	d4698 <_ZN7OneWire5resetEv>
   d4866:	b920      	cbnz	r0, d4872 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4868:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d486a:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d486c:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4872:	462a      	mov	r2, r5
   d4874:	21f0      	movs	r1, #240	; 0xf0
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff ff9b 	bl	d47b2 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d487c:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d487e:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4880:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4882:	4620      	mov	r0, r4
   d4884:	f7ff ff75 	bl	d4772 <_ZN7OneWire8read_bitEv>
   d4888:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d488a:	4620      	mov	r0, r4
   d488c:	f7ff ff71 	bl	d4772 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4890:	f1b9 0f01 	cmp.w	r9, #1
   d4894:	d102      	bne.n	d489c <_ZN7OneWire6searchEPh+0x48>
   d4896:	2801      	cmp	r0, #1
   d4898:	d11b      	bne.n	d48d2 <_ZN7OneWire6searchEPh+0x7e>
   d489a:	e037      	b.n	d490c <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d489c:	4581      	cmp	r9, r0
   d489e:	eb04 0305 	add.w	r3, r4, r5
   d48a2:	d11e      	bne.n	d48e2 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d48a4:	7aa2      	ldrb	r2, [r4, #10]
   d48a6:	4297      	cmp	r7, r2
   d48a8:	d207      	bcs.n	d48ba <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d48aa:	789a      	ldrb	r2, [r3, #2]
   d48ac:	4216      	tst	r6, r2
   d48ae:	bf14      	ite	ne
   d48b0:	f04f 0901 	movne.w	r9, #1
   d48b4:	f04f 0900 	moveq.w	r9, #0
   d48b8:	e004      	b.n	d48c4 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d48ba:	bf0c      	ite	eq
   d48bc:	f04f 0901 	moveq.w	r9, #1
   d48c0:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d48c4:	f1b9 0f00 	cmp.w	r9, #0
   d48c8:	d103      	bne.n	d48d2 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d48ca:	2f08      	cmp	r7, #8
   d48cc:	d808      	bhi.n	d48e0 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d48ce:	72e7      	strb	r7, [r4, #11]
   d48d0:	e006      	b.n	d48e0 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d48d2:	1962      	adds	r2, r4, r5
   d48d4:	f04f 0901 	mov.w	r9, #1
   d48d8:	7893      	ldrb	r3, [r2, #2]
   d48da:	4333      	orrs	r3, r6
   d48dc:	7093      	strb	r3, [r2, #2]
   d48de:	e004      	b.n	d48ea <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d48e0:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d48e2:	789a      	ldrb	r2, [r3, #2]
   d48e4:	ea22 0206 	bic.w	r2, r2, r6
   d48e8:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d48ea:	4649      	mov	r1, r9
   d48ec:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d48ee:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d48f0:	f7ff ff0f 	bl	d4712 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d48f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d48f8:	bf04      	itt	eq
   d48fa:	3501      	addeq	r5, #1
   d48fc:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d48fe:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4902:	bf08      	it	eq
   d4904:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4906:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4908:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d490a:	d9ba      	bls.n	d4882 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d490c:	2f40      	cmp	r7, #64	; 0x40
   d490e:	d907      	bls.n	d4920 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4910:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4914:	f1ba 0f00 	cmp.w	sl, #0
   d4918:	d112      	bne.n	d4940 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d491a:	2301      	movs	r3, #1
   d491c:	7323      	strb	r3, [r4, #12]
   d491e:	e00f      	b.n	d4940 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d4920:	2000      	movs	r0, #0
   d4922:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4924:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4926:	72e0      	strb	r0, [r4, #11]
   d4928:	1c63      	adds	r3, r4, #1
   d492a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d492e:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d4930:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4934:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4938:	42a3      	cmp	r3, r4
   d493a:	d1f9      	bne.n	d4930 <_ZN7OneWire6searchEPh+0xdc>
   d493c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d4940:	78a3      	ldrb	r3, [r4, #2]
   d4942:	2b00      	cmp	r3, #0
   d4944:	d0ec      	beq.n	d4920 <_ZN7OneWire6searchEPh+0xcc>
   d4946:	2001      	movs	r0, #1
   d4948:	e7ee      	b.n	d4928 <_ZN7OneWire6searchEPh+0xd4>

000d494a <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d494a:	b530      	push	{r4, r5, lr}
   d494c:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d494e:	2000      	movs	r0, #0

    while (len--) {
   d4950:	3901      	subs	r1, #1
   d4952:	b2c9      	uxtb	r1, r1
   d4954:	29ff      	cmp	r1, #255	; 0xff
   d4956:	d013      	beq.n	d4980 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4958:	f815 4b01 	ldrb.w	r4, [r5], #1
   d495c:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d495e:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d4962:	f013 0f01 	tst.w	r3, #1
   d4966:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d496a:	bf1c      	itt	ne
   d496c:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4970:	b2d8      	uxtbne	r0, r3
   d4972:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4974:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d4978:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d497c:	d1ef      	bne.n	d495e <_ZN7OneWire4crc8EPhh+0x14>
   d497e:	e7e7      	b.n	d4950 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d4980:	bd30      	pop	{r4, r5, pc}
	...

000d4984 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4984:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4986:	f000 f855 	bl	d4a34 <HAL_Pin_Map>
   d498a:	4b01      	ldr	r3, [pc, #4]	; (d4990 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d498c:	6018      	str	r0, [r3, #0]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	2003e374 	.word	0x2003e374

000d4994 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <os_thread_is_current+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	689b      	ldr	r3, [r3, #8]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030248 	.word	0x00030248

000d49a4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <os_thread_join+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	691b      	ldr	r3, [r3, #16]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030248 	.word	0x00030248

000d49b4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <os_thread_cleanup+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	695b      	ldr	r3, [r3, #20]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030248 	.word	0x00030248

000d49c4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <os_mutex_create+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030248 	.word	0x00030248

000d49d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <os_mutex_recursive_create+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030248 	.word	0x00030248

000d49e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <HAL_RNG_GetRandomNumber+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	685b      	ldr	r3, [r3, #4]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030218 	.word	0x00030218

000d49f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <HAL_Delay_Microseconds+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	68db      	ldr	r3, [r3, #12]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030218 	.word	0x00030218

000d4a04 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	695b      	ldr	r3, [r3, #20]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030218 	.word	0x00030218

000d4a14 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <HAL_RTC_Get_UnixTime+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	69db      	ldr	r3, [r3, #28]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030218 	.word	0x00030218

000d4a24 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_RTC_Time_Is_Valid+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030218 	.word	0x00030218

000d4a34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_Pin_Map+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	681b      	ldr	r3, [r3, #0]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003022c 	.word	0x0003022c

000d4a44 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_Validate_Pin_Function+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	685b      	ldr	r3, [r3, #4]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003022c 	.word	0x0003022c

000d4a54 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_Pin_Mode+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	689b      	ldr	r3, [r3, #8]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003022c 	.word	0x0003022c

000d4a64 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_Interrupts_Enable_All+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6a1b      	ldr	r3, [r3, #32]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003022c 	.word	0x0003022c

000d4a74 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_Interrupts_Disable_All+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003022c 	.word	0x0003022c

000d4a84 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_ADC_Read+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003022c 	.word	0x0003022c

000d4a94 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_I2C_Write_Data+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6a1b      	ldr	r3, [r3, #32]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030228 	.word	0x00030228

000d4aa4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_I2C_Available_Data+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030228 	.word	0x00030228

000d4ab4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_I2C_Read_Data+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030228 	.word	0x00030228

000d4ac4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_I2C_Peek_Data+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030228 	.word	0x00030228

000d4ad4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_I2C_Flush_Data+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030228 	.word	0x00030228

000d4ae4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_I2C_Is_Enabled+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030228 	.word	0x00030228

000d4af4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_I2C_Init+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030228 	.word	0x00030228

000d4b04 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <inet_inet_ntop+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	695b      	ldr	r3, [r3, #20]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030264 	.word	0x00030264

000d4b14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <netdb_freeaddrinfo+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	689b      	ldr	r3, [r3, #8]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030268 	.word	0x00030268

000d4b24 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <netdb_getaddrinfo+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	68db      	ldr	r3, [r3, #12]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030268 	.word	0x00030268

000d4b34 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_SPI_Init+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	69db      	ldr	r3, [r3, #28]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030230 	.word	0x00030230

000d4b44 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_SPI_Is_Enabled+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6a1b      	ldr	r3, [r3, #32]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030230 	.word	0x00030230

000d4b54 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_USART_Init+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	681b      	ldr	r3, [r3, #0]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003023c 	.word	0x0003023c

000d4b64 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USART_Write_Data+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	68db      	ldr	r3, [r3, #12]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003023c 	.word	0x0003023c

000d4b74 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USART_Available_Data+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	691b      	ldr	r3, [r3, #16]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003023c 	.word	0x0003023c

000d4b84 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_USART_Read_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	695b      	ldr	r3, [r3, #20]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003023c 	.word	0x0003023c

000d4b94 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_USART_Peek_Data+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	699b      	ldr	r3, [r3, #24]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003023c 	.word	0x0003023c

000d4ba4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_USART_Flush_Data+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	69db      	ldr	r3, [r3, #28]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003023c 	.word	0x0003023c

000d4bb4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_USART_Is_Enabled+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6a1b      	ldr	r3, [r3, #32]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003023c 	.word	0x0003023c

000d4bc4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003023c 	.word	0x0003023c

000d4bd4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_USB_USART_Init+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	681b      	ldr	r3, [r3, #0]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	0003024c 	.word	0x0003024c

000d4be4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_USB_USART_Available_Data+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	691b      	ldr	r3, [r3, #16]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003024c 	.word	0x0003024c

000d4bf4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	695b      	ldr	r3, [r3, #20]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003024c 	.word	0x0003024c

000d4c04 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USB_USART_Receive_Data+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	699b      	ldr	r3, [r3, #24]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003024c 	.word	0x0003024c

000d4c14 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_USB_USART_Send_Data+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	69db      	ldr	r3, [r3, #28]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	0003024c 	.word	0x0003024c

000d4c24 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_USB_USART_Flush_Data+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	6a1b      	ldr	r3, [r3, #32]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	0003024c 	.word	0x0003024c

000d4c34 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <wlan_connected_info+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	00030274 	.word	0x00030274

000d4c44 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <panic_+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	00030260 	.word	0x00030260

000d4c54 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <system_mode+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	681b      	ldr	r3, [r3, #0]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030220 	.word	0x00030220

000d4c64 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <set_system_mode+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	685b      	ldr	r3, [r3, #4]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030220 	.word	0x00030220

000d4c74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <system_delay_ms+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	695b      	ldr	r3, [r3, #20]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030220 	.word	0x00030220

000d4c84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <application_thread_current+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030220 	.word	0x00030220

000d4c94 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <application_thread_invoke+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030220 	.word	0x00030220

000d4ca4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <system_thread_get_state+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030220 	.word	0x00030220

000d4cb4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b03      	ldr	r3, [pc, #12]	; (d4cc4 <system_ctrl_set_app_request_handler+0x10>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cbe:	9301      	str	r3, [sp, #4]
   d4cc0:	bd08      	pop	{r3, pc}
   d4cc2:	0000      	.short	0x0000
   d4cc4:	00030220 	.word	0x00030220

000d4cc8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b03      	ldr	r3, [pc, #12]	; (d4cd8 <system_ctrl_set_result+0x10>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cd2:	9301      	str	r3, [sp, #4]
   d4cd4:	bd08      	pop	{r3, pc}
   d4cd6:	0000      	.short	0x0000
   d4cd8:	00030220 	.word	0x00030220

000d4cdc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <spark_variable+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	681b      	ldr	r3, [r3, #0]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030244 	.word	0x00030244

000d4cec <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <spark_function+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	685b      	ldr	r3, [r3, #4]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030244 	.word	0x00030244

000d4cfc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <spark_process+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	689b      	ldr	r3, [r3, #8]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030244 	.word	0x00030244

000d4d0c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <spark_cloud_flag_connected+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	695b      	ldr	r3, [r3, #20]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030244 	.word	0x00030244

000d4d1c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <spark_send_event+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6a1b      	ldr	r3, [r3, #32]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030244 	.word	0x00030244

000d4d2c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <spark_sync_time_pending+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030244 	.word	0x00030244

000d4d3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030244 	.word	0x00030244

000d4d4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <network_connect+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	685b      	ldr	r3, [r3, #4]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030240 	.word	0x00030240

000d4d5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <network_connecting+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	689b      	ldr	r3, [r3, #8]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030240 	.word	0x00030240

000d4d6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <network_disconnect+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	68db      	ldr	r3, [r3, #12]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030240 	.word	0x00030240

000d4d7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <network_ready+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	691b      	ldr	r3, [r3, #16]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030240 	.word	0x00030240

000d4d8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <network_on+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	695b      	ldr	r3, [r3, #20]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030240 	.word	0x00030240

000d4d9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <network_off+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	699b      	ldr	r3, [r3, #24]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030240 	.word	0x00030240

000d4dac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <network_listen+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	69db      	ldr	r3, [r3, #28]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030240 	.word	0x00030240

000d4dbc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <network_listening+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	6a1b      	ldr	r3, [r3, #32]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030240 	.word	0x00030240

000d4dcc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <network_set_listen_timeout+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030240 	.word	0x00030240

000d4ddc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <network_get_listen_timeout+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030240 	.word	0x00030240

000d4dec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <malloc+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	681b      	ldr	r3, [r3, #0]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	0003021c 	.word	0x0003021c

000d4dfc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <free+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	685b      	ldr	r3, [r3, #4]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003021c 	.word	0x0003021c

000d4e0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <realloc+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	689b      	ldr	r3, [r3, #8]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003021c 	.word	0x0003021c

000d4e1c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <siscanf+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	699b      	ldr	r3, [r3, #24]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003021c 	.word	0x0003021c

000d4e2c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <snprintf+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	69db      	ldr	r3, [r3, #28]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003021c 	.word	0x0003021c

000d4e3c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <abort+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003021c 	.word	0x0003021c

000d4e4c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <_malloc_r+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003021c 	.word	0x0003021c

000d4e5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e5c:	2100      	movs	r1, #0
   d4e5e:	f7ff bf09 	b.w	d4c74 <system_delay_ms>

000d4e62 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4e62:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e64:	6883      	ldr	r3, [r0, #8]
   d4e66:	4604      	mov	r4, r0
   d4e68:	b90b      	cbnz	r3, d4e6e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4e6a:	f001 f9dc 	bl	d6226 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e6e:	68c3      	ldr	r3, [r0, #12]
   d4e70:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4e72:	68a3      	ldr	r3, [r4, #8]
   d4e74:	b11b      	cbz	r3, d4e7e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e76:	2203      	movs	r2, #3
   d4e78:	4621      	mov	r1, r4
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e7e:	4620      	mov	r0, r4
   d4e80:	2110      	movs	r1, #16
}
   d4e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e86:	f001 b9cc 	b.w	d6222 <_ZdlPvj>

000d4e8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e8a:	4770      	bx	lr

000d4e8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4e8c:	2000      	movs	r0, #0
   d4e8e:	4770      	bx	lr

000d4e90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e90:	b510      	push	{r4, lr}
   d4e92:	2110      	movs	r1, #16
   d4e94:	4604      	mov	r4, r0
   d4e96:	f001 f9c4 	bl	d6222 <_ZdlPvj>
   d4e9a:	4620      	mov	r0, r4
   d4e9c:	bd10      	pop	{r4, pc}

000d4e9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4e9e:	b508      	push	{r3, lr}
      { delete this; }
   d4ea0:	b108      	cbz	r0, d4ea6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4ea2:	f7ff fff5 	bl	d4e90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ea6:	bd08      	pop	{r3, pc}

000d4ea8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ea8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4eaa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4eac:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4eae:	b113      	cbz	r3, d4eb6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4eb0:	2203      	movs	r2, #3
   d4eb2:	4601      	mov	r1, r0
   d4eb4:	4798      	blx	r3
    }
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	bd10      	pop	{r4, pc}

000d4eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4eba:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4ebc:	68c4      	ldr	r4, [r0, #12]
   d4ebe:	b1ec      	cbz	r4, d4efc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4ec0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4ec2:	2b02      	cmp	r3, #2
   d4ec4:	d102      	bne.n	d4ecc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4ec6:	68e0      	ldr	r0, [r4, #12]
   d4ec8:	f7ff ff98 	bl	d4dfc <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4ecc:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4ece:	b135      	cbz	r5, d4ede <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ed0:	4628      	mov	r0, r5
   d4ed2:	f7ff ffe9 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>
   d4ed6:	2110      	movs	r1, #16
   d4ed8:	4628      	mov	r0, r5
   d4eda:	f001 f9a2 	bl	d6222 <_ZdlPvj>
   d4ede:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ee0:	b135      	cbz	r5, d4ef0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d4ee2:	4628      	mov	r0, r5
   d4ee4:	f7ff ffe0 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>
   d4ee8:	2110      	movs	r1, #16
   d4eea:	4628      	mov	r0, r5
   d4eec:	f001 f999 	bl	d6222 <_ZdlPvj>
   d4ef0:	4620      	mov	r0, r4
   d4ef2:	2114      	movs	r1, #20
   d4ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ef8:	f001 b993 	b.w	d6222 <_ZdlPvj>
   d4efc:	bd38      	pop	{r3, r4, r5, pc}

000d4efe <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d4efe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4f00:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d4f02:	4668      	mov	r0, sp
   d4f04:	f000 fde0 	bl	d5ac8 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f08:	68a3      	ldr	r3, [r4, #8]
   d4f0a:	b90b      	cbnz	r3, d4f10 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d4f0c:	f001 f98b 	bl	d6226 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f10:	68e3      	ldr	r3, [r4, #12]
   d4f12:	4669      	mov	r1, sp
   d4f14:	4620      	mov	r0, r4
   d4f16:	4798      	blx	r3
   d4f18:	4604      	mov	r4, r0
   d4f1a:	4668      	mov	r0, sp
   d4f1c:	f000 fd8d 	bl	d5a3a <_ZN6StringD1Ev>
}
   d4f20:	4620      	mov	r0, r4
   d4f22:	b004      	add	sp, #16
   d4f24:	bd10      	pop	{r4, pc}

000d4f26 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4f26:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4f28:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4f2a:	b085      	sub	sp, #20
   d4f2c:	4607      	mov	r7, r0
   d4f2e:	460e      	mov	r6, r1
   d4f30:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4f32:	2100      	movs	r1, #0
   d4f34:	4622      	mov	r2, r4
   d4f36:	4668      	mov	r0, sp
   d4f38:	f001 ffeb 	bl	d6f12 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f3c:	2200      	movs	r2, #0
   d4f3e:	4669      	mov	r1, sp
   d4f40:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d4f42:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d4f46:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4f48:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4f4a:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f4c:	f7ff fece 	bl	d4cec <spark_function>
}
   d4f50:	b005      	add	sp, #20
   d4f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4f54:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4f56:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4f58:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4f5a:	b17c      	cbz	r4, d4f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4f5c:	6863      	ldr	r3, [r4, #4]
   d4f5e:	3b01      	subs	r3, #1
   d4f60:	6063      	str	r3, [r4, #4]
   d4f62:	b95b      	cbnz	r3, d4f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4f64:	6823      	ldr	r3, [r4, #0]
   d4f66:	4620      	mov	r0, r4
   d4f68:	689b      	ldr	r3, [r3, #8]
   d4f6a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f6c:	68a3      	ldr	r3, [r4, #8]
   d4f6e:	3b01      	subs	r3, #1
   d4f70:	60a3      	str	r3, [r4, #8]
   d4f72:	b91b      	cbnz	r3, d4f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4f74:	6823      	ldr	r3, [r4, #0]
   d4f76:	4620      	mov	r0, r4
   d4f78:	68db      	ldr	r3, [r3, #12]
   d4f7a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4f7c:	4628      	mov	r0, r5
   d4f7e:	bd38      	pop	{r3, r4, r5, pc}

000d4f80 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4f80:	b513      	push	{r0, r1, r4, lr}
   d4f82:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f84:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4f88:	2300      	movs	r3, #0
   d4f8a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f8c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f8e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4f90:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f92:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4f94:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f96:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f98:	f7ff ffdc 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	b002      	add	sp, #8
   d4fa0:	bd10      	pop	{r4, pc}

000d4fa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4fa2:	680b      	ldr	r3, [r1, #0]
   d4fa4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4fa6:	b113      	cbz	r3, d4fae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4fa8:	685a      	ldr	r2, [r3, #4]
   d4faa:	3201      	adds	r2, #1
   d4fac:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4fae:	4770      	bx	lr

000d4fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fb2:	460c      	mov	r4, r1
   d4fb4:	ad02      	add	r5, sp, #8
   d4fb6:	f854 3b04 	ldr.w	r3, [r4], #4
   d4fba:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4fbe:	4606      	mov	r6, r0
   d4fc0:	460f      	mov	r7, r1
   d4fc2:	a801      	add	r0, sp, #4
   d4fc4:	4621      	mov	r1, r4
   d4fc6:	f7ff ffec 	bl	d4fa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4fca:	4629      	mov	r1, r5
   d4fcc:	4630      	mov	r0, r6
   d4fce:	f7ff ffd7 	bl	d4f80 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fd2:	a801      	add	r0, sp, #4
   d4fd4:	f7ff ffbe 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f7ff ffbb 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4fde:	4638      	mov	r0, r7
   d4fe0:	2108      	movs	r1, #8
   d4fe2:	f001 f91e 	bl	d6222 <_ZdlPvj>
        return p;
    }
   d4fe6:	4630      	mov	r0, r6
   d4fe8:	b003      	add	sp, #12
   d4fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fec <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4fec:	b513      	push	{r0, r1, r4, lr}
   d4fee:	460b      	mov	r3, r1
   d4ff0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ff2:	c803      	ldmia	r0, {r0, r1}
   d4ff4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ff8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ffc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5000:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5004:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5008:	b002      	add	sp, #8
   d500a:	bd10      	pop	{r4, pc}

000d500c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d500c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d500e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5010:	b90a      	cbnz	r2, d5016 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5012:	f001 f908 	bl	d6226 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5016:	68c3      	ldr	r3, [r0, #12]
    }
   d5018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d501c:	4718      	bx	r3

000d501e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d501e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5020:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5022:	f100 0110 	add.w	r1, r0, #16
   d5026:	f7ff fff1 	bl	d500c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d502a:	bd08      	pop	{r3, pc}

000d502c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d502c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d502e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5030:	b90a      	cbnz	r2, d5036 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5032:	f001 f8f8 	bl	d6226 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5036:	68c3      	ldr	r3, [r0, #12]
    }
   d5038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d503c:	4718      	bx	r3

000d503e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d503e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5040:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5042:	f100 0110 	add.w	r1, r0, #16
   d5046:	f7ff fff1 	bl	d502c <_ZNKSt8functionIFvRKbEEclES1_>
   d504a:	bd08      	pop	{r3, pc}

000d504c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d504c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d504e:	2300      	movs	r3, #0
   d5050:	6083      	str	r3, [r0, #8]
   d5052:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5054:	4604      	mov	r4, r0
   d5056:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5058:	b12b      	cbz	r3, d5066 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d505a:	2202      	movs	r2, #2
   d505c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d505e:	68eb      	ldr	r3, [r5, #12]
   d5060:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5062:	68ab      	ldr	r3, [r5, #8]
   d5064:	60a3      	str	r3, [r4, #8]
	}
    }
   d5066:	4620      	mov	r0, r4
   d5068:	bd38      	pop	{r3, r4, r5, pc}
	...

000d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5070:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5074:	b086      	sub	sp, #24
   d5076:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5078:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d507c:	808b      	strh	r3, [r1, #4]
   d507e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5080:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5082:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d5086:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5088:	f04f 0002 	mov.w	r0, #2
   d508c:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5090:	4299      	cmp	r1, r3
   d5092:	d103      	bne.n	d509c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5094:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5098:	2d00      	cmp	r5, #0
   d509a:	d1f7      	bne.n	d508c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d509c:	d002      	beq.n	d50a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d509e:	f88d 1000 	strb.w	r1, [sp]
   d50a2:	e06b      	b.n	d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d50a4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50a8:	bf1e      	ittt	ne
   d50aa:	60e7      	strne	r7, [r4, #12]
   d50ac:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d50ae:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50b0:	2301      	movs	r3, #1
   d50b2:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50b6:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50b8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50ba:	f104 0308 	add.w	r3, r4, #8
   d50be:	f3bf 8f5f 	dmb	sy
   d50c2:	e853 6f00 	ldrex	r6, [r3]
   d50c6:	e843 0200 	strex	r2, r0, [r3]
   d50ca:	2a00      	cmp	r2, #0
   d50cc:	d1f9      	bne.n	d50c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d50ce:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50d2:	2e00      	cmp	r6, #0
   d50d4:	d052      	beq.n	d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50d6:	f7ff fdd5 	bl	d4c84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50da:	b120      	cbz	r0, d50e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50dc:	4629      	mov	r1, r5
   d50de:	4630      	mov	r0, r6
   d50e0:	f7ff ff94 	bl	d500c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d50e4:	e043      	b.n	d516e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50e6:	4631      	mov	r1, r6
   d50e8:	4668      	mov	r0, sp
   d50ea:	f7ff ffaf 	bl	d504c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50ee:	68e0      	ldr	r0, [r4, #12]
   d50f0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50f4:	b108      	cbz	r0, d50fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d50f6:	f001 ff4f 	bl	d6f98 <strdup>
   d50fa:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50fc:	2010      	movs	r0, #16
   d50fe:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5102:	f7fe ffc8 	bl	d4096 <_Znwj>
   d5106:	4605      	mov	r5, r0
   d5108:	b330      	cbz	r0, d5158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d510a:	f04f 0800 	mov.w	r8, #0
   d510e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5112:	2018      	movs	r0, #24
   d5114:	f7fe ffbf 	bl	d4096 <_Znwj>
   d5118:	4604      	mov	r4, r0
   d511a:	b1c0      	cbz	r0, d514e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d511c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5120:	4601      	mov	r1, r0
   d5122:	4668      	mov	r0, sp
   d5124:	f7ff ff62 	bl	d4fec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5128:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d512a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d512c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d512e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5130:	9202      	str	r2, [sp, #8]
   d5132:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5134:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5136:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d513a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d513c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5140:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5144:	9b04      	ldr	r3, [sp, #16]
   d5146:	9203      	str	r2, [sp, #12]
   d5148:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d514a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d514e:	4b0e      	ldr	r3, [pc, #56]	; (d5188 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5150:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5152:	4b0e      	ldr	r3, [pc, #56]	; (d518c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5154:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5156:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5158:	9804      	ldr	r0, [sp, #16]
   d515a:	f7ff fe4f 	bl	d4dfc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d515e:	4668      	mov	r0, sp
   d5160:	f7ff fea2 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5164:	2200      	movs	r2, #0
   d5166:	4629      	mov	r1, r5
   d5168:	4809      	ldr	r0, [pc, #36]	; (d5190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d516a:	f7ff fd93 	bl	d4c94 <application_thread_invoke>
   d516e:	4630      	mov	r0, r6
   d5170:	f7ff fe9a 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5174:	2110      	movs	r1, #16
   d5176:	4630      	mov	r0, r6
   d5178:	f001 f853 	bl	d6222 <_ZdlPvj>
   d517c:	4638      	mov	r0, r7
   d517e:	f7ff fe3d 	bl	d4dfc <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5182:	b006      	add	sp, #24
   d5184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5188:	000d501f 	.word	0x000d501f
   d518c:	000d527d 	.word	0x000d527d
   d5190:	000d4e63 	.word	0x000d4e63

000d5194 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5198:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d519a:	ad07      	add	r5, sp, #28
   d519c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51a0:	4606      	mov	r6, r0
   d51a2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d51a4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51a6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51a8:	460f      	mov	r7, r1
   d51aa:	4690      	mov	r8, r2
   d51ac:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51b0:	f8c5 b004 	str.w	fp, [r5, #4]
   d51b4:	f8c5 b008 	str.w	fp, [r5, #8]
   d51b8:	9307      	str	r3, [sp, #28]
   d51ba:	f7fe ff6c 	bl	d4096 <_Znwj>
   d51be:	4604      	mov	r4, r0
   d51c0:	b138      	cbz	r0, d51d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51c2:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51c6:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51ca:	f8c0 b004 	str.w	fp, [r0, #4]
   d51ce:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51d2:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51d4:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d51d6:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51d8:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51da:	f7fe ff5c 	bl	d4096 <_Znwj>
   d51de:	b128      	cbz	r0, d51ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d51e0:	2301      	movs	r3, #1
   d51e2:	6043      	str	r3, [r0, #4]
   d51e4:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d51e6:	4b23      	ldr	r3, [pc, #140]	; (d5274 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d51e8:	6003      	str	r3, [r0, #0]
   d51ea:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51ec:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d51ee:	4b22      	ldr	r3, [pc, #136]	; (d5278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d51f0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d51f2:	2008      	movs	r0, #8
   d51f4:	f7fe ff4f 	bl	d4096 <_Znwj>
   d51f8:	4604      	mov	r4, r0
   d51fa:	b128      	cbz	r0, d5208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51fc:	9b03      	ldr	r3, [sp, #12]
   d51fe:	f840 3b04 	str.w	r3, [r0], #4
   d5202:	a904      	add	r1, sp, #16
   d5204:	f7ff fecd 	bl	d4fa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5208:	9500      	str	r5, [sp, #0]
   d520a:	fa5f f38a 	uxtb.w	r3, sl
   d520e:	464a      	mov	r2, r9
   d5210:	4641      	mov	r1, r8
   d5212:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5214:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5216:	f7ff fd81 	bl	d4d1c <spark_send_event>
   d521a:	b9b8      	cbnz	r0, d524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d521c:	9b03      	ldr	r3, [sp, #12]
   d521e:	785b      	ldrb	r3, [r3, #1]
   d5220:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5224:	b993      	cbnz	r3, d524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5226:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d522a:	a905      	add	r1, sp, #20
   d522c:	a803      	add	r0, sp, #12
   d522e:	9205      	str	r2, [sp, #20]
   d5230:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5234:	f7ff ff1a 	bl	d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5238:	9805      	ldr	r0, [sp, #20]
   d523a:	f7ff fddf 	bl	d4dfc <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d523e:	a805      	add	r0, sp, #20
   d5240:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5242:	f7ff feb5 	bl	d4fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5246:	a806      	add	r0, sp, #24
   d5248:	f7ff fe84 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d524c:	9b03      	ldr	r3, [sp, #12]
   d524e:	9305      	str	r3, [sp, #20]
   d5250:	a904      	add	r1, sp, #16
   d5252:	a806      	add	r0, sp, #24
   d5254:	f7ff fea5 	bl	d4fa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5258:	a905      	add	r1, sp, #20
   d525a:	4630      	mov	r0, r6
   d525c:	f7ff fe90 	bl	d4f80 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5260:	a806      	add	r0, sp, #24
   d5262:	f7ff fe77 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5266:	a804      	add	r0, sp, #16
   d5268:	f7ff fe74 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d526c:	4630      	mov	r0, r6
   d526e:	b00b      	add	sp, #44	; 0x2c
   d5270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5274:	000d77b8 	.word	0x000d77b8
   d5278:	000d53e9 	.word	0x000d53e9

000d527c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d527c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d527e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5280:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5282:	d006      	beq.n	d5292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5284:	2a03      	cmp	r2, #3
   d5286:	d017      	beq.n	d52b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5288:	2a01      	cmp	r2, #1
   d528a:	d121      	bne.n	d52d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d528c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d528e:	6003      	str	r3, [r0, #0]
	      break;
   d5290:	e01e      	b.n	d52d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5292:	2018      	movs	r0, #24
   d5294:	680e      	ldr	r6, [r1, #0]
   d5296:	f7fe fefe 	bl	d4096 <_Znwj>
   d529a:	4605      	mov	r5, r0
   d529c:	b150      	cbz	r0, d52b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d529e:	4631      	mov	r1, r6
   d52a0:	f7ff fed4 	bl	d504c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52a4:	6930      	ldr	r0, [r6, #16]
   d52a6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52aa:	b108      	cbz	r0, d52b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d52ac:	f001 fe74 	bl	d6f98 <strdup>
   d52b0:	6128      	str	r0, [r5, #16]
   d52b2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52b4:	6025      	str	r5, [r4, #0]
   d52b6:	e00b      	b.n	d52d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52b8:	6804      	ldr	r4, [r0, #0]
   d52ba:	b14c      	cbz	r4, d52d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d52bc:	6920      	ldr	r0, [r4, #16]
   d52be:	f7ff fd9d 	bl	d4dfc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52c2:	4620      	mov	r0, r4
   d52c4:	f7ff fdf0 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52c8:	2118      	movs	r1, #24
   d52ca:	4620      	mov	r0, r4
   d52cc:	f000 ffa9 	bl	d6222 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52d0:	2000      	movs	r0, #0
   d52d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52d4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52d6:	2300      	movs	r3, #0
   d52d8:	6083      	str	r3, [r0, #8]
   d52da:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52dc:	4604      	mov	r4, r0
   d52de:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d52e0:	b12b      	cbz	r3, d52ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52e2:	2202      	movs	r2, #2
   d52e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52e6:	68eb      	ldr	r3, [r5, #12]
   d52e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52ea:	68ab      	ldr	r3, [r5, #8]
   d52ec:	60a3      	str	r3, [r4, #8]
	}
    }
   d52ee:	4620      	mov	r0, r4
   d52f0:	bd38      	pop	{r3, r4, r5, pc}

000d52f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52f2:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52f4:	b570      	push	{r4, r5, r6, lr}
   d52f6:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52f8:	d006      	beq.n	d5308 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d52fa:	2a03      	cmp	r2, #3
   d52fc:	d011      	beq.n	d5322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d52fe:	2a01      	cmp	r2, #1
   d5300:	d118      	bne.n	d5334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5302:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5304:	6003      	str	r3, [r0, #0]
	      break;
   d5306:	e015      	b.n	d5334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5308:	2014      	movs	r0, #20
   d530a:	680e      	ldr	r6, [r1, #0]
   d530c:	f7fe fec3 	bl	d4096 <_Znwj>
   d5310:	4605      	mov	r5, r0
   d5312:	b120      	cbz	r0, d531e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5314:	4631      	mov	r1, r6
   d5316:	f7ff ffdd 	bl	d52d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d531a:	7c33      	ldrb	r3, [r6, #16]
   d531c:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d531e:	6025      	str	r5, [r4, #0]
   d5320:	e008      	b.n	d5334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5322:	6804      	ldr	r4, [r0, #0]
   d5324:	b134      	cbz	r4, d5334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5326:	4620      	mov	r0, r4
   d5328:	f7ff fdbe 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d532c:	2114      	movs	r1, #20
   d532e:	4620      	mov	r0, r4
   d5330:	f000 ff77 	bl	d6222 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5334:	2000      	movs	r0, #0
   d5336:	bd70      	pop	{r4, r5, r6, pc}

000d5338 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5338:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d533a:	2300      	movs	r3, #0
   d533c:	b087      	sub	sp, #28
   d533e:	460c      	mov	r4, r1
   d5340:	f3bf 8f5f 	dmb	sy
   d5344:	e850 6f00 	ldrex	r6, [r0]
   d5348:	e840 3200 	strex	r2, r3, [r0]
   d534c:	2a00      	cmp	r2, #0
   d534e:	d1f9      	bne.n	d5344 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5350:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5354:	2e00      	cmp	r6, #0
   d5356:	d03f      	beq.n	d53d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5358:	4618      	mov	r0, r3
   d535a:	f7ff fc93 	bl	d4c84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d535e:	4607      	mov	r7, r0
   d5360:	b120      	cbz	r0, d536c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5362:	4621      	mov	r1, r4
   d5364:	4630      	mov	r0, r6
   d5366:	f7ff fe61 	bl	d502c <_ZNKSt8functionIFvRKbEEclES1_>
   d536a:	e02e      	b.n	d53ca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d536c:	4631      	mov	r1, r6
   d536e:	a801      	add	r0, sp, #4
   d5370:	f7ff ffb0 	bl	d52d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5374:	7823      	ldrb	r3, [r4, #0]
   d5376:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d537a:	2010      	movs	r0, #16
   d537c:	f7fe fe8b 	bl	d4096 <_Znwj>
   d5380:	4605      	mov	r5, r0
   d5382:	b1d0      	cbz	r0, d53ba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5384:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5386:	2014      	movs	r0, #20
   d5388:	f7fe fe85 	bl	d4096 <_Znwj>
   d538c:	4604      	mov	r4, r0
   d538e:	b178      	cbz	r0, d53b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5390:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5392:	4601      	mov	r1, r0
   d5394:	a801      	add	r0, sp, #4
   d5396:	f7ff fe29 	bl	d4fec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d539a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d539c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d539e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53a0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53a2:	9203      	str	r2, [sp, #12]
   d53a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53a6:	60e3      	str	r3, [r4, #12]
   d53a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d53ac:	9204      	str	r2, [sp, #16]
   d53ae:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53b0:	4b0a      	ldr	r3, [pc, #40]	; (d53dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d53b2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53b4:	4b0a      	ldr	r3, [pc, #40]	; (d53e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53b6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53b8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53ba:	a801      	add	r0, sp, #4
   d53bc:	f7ff fd74 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53c0:	2200      	movs	r2, #0
   d53c2:	4629      	mov	r1, r5
   d53c4:	4807      	ldr	r0, [pc, #28]	; (d53e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d53c6:	f7ff fc65 	bl	d4c94 <application_thread_invoke>
   d53ca:	4630      	mov	r0, r6
   d53cc:	f7ff fd6c 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d53d0:	2110      	movs	r1, #16
   d53d2:	4630      	mov	r0, r6
   d53d4:	f000 ff25 	bl	d6222 <_ZdlPvj>
        }
    }
   d53d8:	b007      	add	sp, #28
   d53da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53dc:	000d503f 	.word	0x000d503f
   d53e0:	000d52f3 	.word	0x000d52f3
   d53e4:	000d4e63 	.word	0x000d4e63

000d53e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d53e8:	b530      	push	{r4, r5, lr}
   d53ea:	b085      	sub	sp, #20
   d53ec:	4604      	mov	r4, r0
   d53ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d53f0:	4668      	mov	r0, sp
   d53f2:	4611      	mov	r1, r2
   d53f4:	f7ff fddc 	bl	d4fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d53f8:	b17c      	cbz	r4, d541a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d53fa:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d53fc:	4628      	mov	r0, r5
   d53fe:	b10d      	cbz	r5, d5404 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5400:	f001 fdca 	bl	d6f98 <strdup>
   d5404:	9002      	str	r0, [sp, #8]
   d5406:	a902      	add	r1, sp, #8
   d5408:	4668      	mov	r0, sp
   d540a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d540e:	f7ff fe2d 	bl	d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5412:	9802      	ldr	r0, [sp, #8]
   d5414:	f7ff fcf2 	bl	d4dfc <free>
   d5418:	e01d      	b.n	d5456 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d541a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d541c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5420:	f04f 0201 	mov.w	r2, #1
   d5424:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5428:	42a3      	cmp	r3, r4
   d542a:	d103      	bne.n	d5434 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d542c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5430:	2900      	cmp	r1, #0
   d5432:	d1f7      	bne.n	d5424 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5434:	d002      	beq.n	d543c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5436:	f88d 3008 	strb.w	r3, [sp, #8]
   d543a:	e00c      	b.n	d5456 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d543c:	f110 010c 	adds.w	r1, r0, #12
   d5440:	f04f 0301 	mov.w	r3, #1
   d5444:	bf18      	it	ne
   d5446:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5448:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d544c:	3004      	adds	r0, #4
   d544e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5452:	f7ff ff71 	bl	d5338 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5456:	a801      	add	r0, sp, #4
   d5458:	f7ff fd7c 	bl	d4f54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d545c:	b005      	add	sp, #20
   d545e:	bd30      	pop	{r4, r5, pc}

000d5460 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5460:	2200      	movs	r2, #0
   d5462:	4611      	mov	r1, r2
   d5464:	6840      	ldr	r0, [r0, #4]
   d5466:	f7ff bca9 	b.w	d4dbc <network_listening>

000d546a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d546a:	2200      	movs	r2, #0
   d546c:	4611      	mov	r1, r2
   d546e:	6840      	ldr	r0, [r0, #4]
   d5470:	f7ff bcb4 	b.w	d4ddc <network_get_listen_timeout>

000d5474 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5474:	2200      	movs	r2, #0
   d5476:	6840      	ldr	r0, [r0, #4]
   d5478:	f7ff bca8 	b.w	d4dcc <network_set_listen_timeout>

000d547c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d547c:	2200      	movs	r2, #0
   d547e:	f081 0101 	eor.w	r1, r1, #1
   d5482:	6840      	ldr	r0, [r0, #4]
   d5484:	f7ff bc92 	b.w	d4dac <network_listen>

000d5488 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5488:	2300      	movs	r3, #0
   d548a:	461a      	mov	r2, r3
   d548c:	4619      	mov	r1, r3
   d548e:	6840      	ldr	r0, [r0, #4]
   d5490:	f7ff bc84 	b.w	d4d9c <network_off>

000d5494 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5494:	2300      	movs	r3, #0
   d5496:	461a      	mov	r2, r3
   d5498:	4619      	mov	r1, r3
   d549a:	6840      	ldr	r0, [r0, #4]
   d549c:	f7ff bc76 	b.w	d4d8c <network_on>

000d54a0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54a0:	2200      	movs	r2, #0
   d54a2:	4611      	mov	r1, r2
   d54a4:	6840      	ldr	r0, [r0, #4]
   d54a6:	f7ff bc69 	b.w	d4d7c <network_ready>

000d54aa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54aa:	2200      	movs	r2, #0
   d54ac:	4611      	mov	r1, r2
   d54ae:	6840      	ldr	r0, [r0, #4]
   d54b0:	f7ff bc54 	b.w	d4d5c <network_connecting>

000d54b4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54b4:	2200      	movs	r2, #0
   d54b6:	2102      	movs	r1, #2
   d54b8:	6840      	ldr	r0, [r0, #4]
   d54ba:	f7ff bc57 	b.w	d4d6c <network_disconnect>

000d54be <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54be:	2300      	movs	r3, #0
   d54c0:	461a      	mov	r2, r3
   d54c2:	6840      	ldr	r0, [r0, #4]
   d54c4:	f7ff bc42 	b.w	d4d4c <network_connect>

000d54c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d54c8:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54ca:	2203      	movs	r2, #3
   d54cc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54ce:	4a02      	ldr	r2, [pc, #8]	; (d54d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54d0:	601a      	str	r2, [r3, #0]
   d54d2:	4770      	bx	lr
   d54d4:	2003e378 	.word	0x2003e378
   d54d8:	000d77d4 	.word	0x000d77d4

000d54dc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d54dc:	4770      	bx	lr

000d54de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d54de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54e0:	4606      	mov	r6, r0
   d54e2:	4615      	mov	r5, r2
   d54e4:	460c      	mov	r4, r1
   d54e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54e8:	42bc      	cmp	r4, r7
   d54ea:	d006      	beq.n	d54fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d54ec:	6833      	ldr	r3, [r6, #0]
   d54ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d54f2:	689b      	ldr	r3, [r3, #8]
   d54f4:	4630      	mov	r0, r6
   d54f6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54f8:	e7f6      	b.n	d54e8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d54fa:	4628      	mov	r0, r5
   d54fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54fe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d54fe:	2200      	movs	r2, #0
   d5500:	7c00      	ldrb	r0, [r0, #16]
   d5502:	f7ff bac7 	b.w	d4a94 <HAL_I2C_Write_Data>

000d5506 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5506:	2100      	movs	r1, #0
   d5508:	7c00      	ldrb	r0, [r0, #16]
   d550a:	f7ff bacb 	b.w	d4aa4 <HAL_I2C_Available_Data>

000d550e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d550e:	2100      	movs	r1, #0
   d5510:	7c00      	ldrb	r0, [r0, #16]
   d5512:	f7ff bacf 	b.w	d4ab4 <HAL_I2C_Read_Data>

000d5516 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5516:	2100      	movs	r1, #0
   d5518:	7c00      	ldrb	r0, [r0, #16]
   d551a:	f7ff bad3 	b.w	d4ac4 <HAL_I2C_Peek_Data>

000d551e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d551e:	2100      	movs	r1, #0
   d5520:	7c00      	ldrb	r0, [r0, #16]
   d5522:	f7ff bad7 	b.w	d4ad4 <HAL_I2C_Flush_Data>

000d5526 <_ZN7TwoWireD0Ev>:
   d5526:	b510      	push	{r4, lr}
   d5528:	2114      	movs	r1, #20
   d552a:	4604      	mov	r4, r0
   d552c:	f000 fe79 	bl	d6222 <_ZdlPvj>
   d5530:	4620      	mov	r0, r4
   d5532:	bd10      	pop	{r4, pc}

000d5534 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5534:	b510      	push	{r4, lr}
   d5536:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d553c:	4608      	mov	r0, r1
   d553e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5540:	2100      	movs	r1, #0
   d5542:	4b04      	ldr	r3, [pc, #16]	; (d5554 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5544:	7420      	strb	r0, [r4, #16]
   d5546:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5548:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d554a:	f7ff fad3 	bl	d4af4 <HAL_I2C_Init>

}
   d554e:	4620      	mov	r0, r4
   d5550:	bd10      	pop	{r4, pc}
   d5552:	bf00      	nop
   d5554:	000d7808 	.word	0x000d7808

000d5558 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5558:	2100      	movs	r1, #0
   d555a:	7c00      	ldrb	r0, [r0, #16]
   d555c:	f7ff bac2 	b.w	d4ae4 <HAL_I2C_Is_Enabled>

000d5560 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5560:	f7ff ba88 	b.w	d4a74 <HAL_Interrupts_Disable_All>

000d5564 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5564:	f7ff ba7e 	b.w	d4a64 <HAL_Interrupts_Enable_All>

000d5568 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5568:	4770      	bx	lr

000d556a <_ZN9IPAddressD0Ev>:
   d556a:	b510      	push	{r4, lr}
   d556c:	2118      	movs	r1, #24
   d556e:	4604      	mov	r4, r0
   d5570:	f000 fe57 	bl	d6222 <_ZdlPvj>
   d5574:	4620      	mov	r0, r4
   d5576:	bd10      	pop	{r4, pc}

000d5578 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5578:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d557a:	7d03      	ldrb	r3, [r0, #20]
   d557c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d557e:	b08d      	sub	sp, #52	; 0x34
   d5580:	460e      	mov	r6, r1
   d5582:	f100 0704 	add.w	r7, r0, #4
   d5586:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d558a:	d002      	beq.n	d5592 <_ZNK9IPAddress7printToER5Print+0x1a>
   d558c:	f100 0508 	add.w	r5, r0, #8
   d5590:	e018      	b.n	d55c4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5592:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5594:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5596:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d559a:	232f      	movs	r3, #47	; 0x2f
   d559c:	462a      	mov	r2, r5
   d559e:	200a      	movs	r0, #10
   d55a0:	f7ff fab0 	bl	d4b04 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55a4:	4628      	mov	r0, r5
   d55a6:	f001 fd12 	bl	d6fce <strlen>
   d55aa:	6833      	ldr	r3, [r6, #0]
   d55ac:	4602      	mov	r2, r0
   d55ae:	68db      	ldr	r3, [r3, #12]
   d55b0:	4629      	mov	r1, r5
   d55b2:	4630      	mov	r0, r6
   d55b4:	4798      	blx	r3
   d55b6:	e00f      	b.n	d55d8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d55b8:	b124      	cbz	r4, d55c4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d55ba:	212e      	movs	r1, #46	; 0x2e
   d55bc:	4630      	mov	r0, r6
   d55be:	f000 f9c7 	bl	d5950 <_ZN5Print5printEc>
   d55c2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d55c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d55c8:	220a      	movs	r2, #10
   d55ca:	4630      	mov	r0, r6
   d55cc:	f000 f9f0 	bl	d59b0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d55d0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d55d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d55d4:	d1f0      	bne.n	d55b8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d55d6:	4620      	mov	r0, r4
    }
    return n;
}
   d55d8:	b00d      	add	sp, #52	; 0x34
   d55da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55dc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d55dc:	b510      	push	{r4, lr}
   d55de:	4b05      	ldr	r3, [pc, #20]	; (d55f4 <_ZN9IPAddressC1Ev+0x18>)
   d55e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d55e2:	2211      	movs	r2, #17
   d55e4:	f840 3b04 	str.w	r3, [r0], #4
   d55e8:	2100      	movs	r1, #0
   d55ea:	f001 fc92 	bl	d6f12 <memset>
{
    clear();
}
   d55ee:	4620      	mov	r0, r4
   d55f0:	bd10      	pop	{r4, pc}
   d55f2:	bf00      	nop
   d55f4:	000d7830 	.word	0x000d7830

000d55f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d55f8:	4603      	mov	r3, r0
   d55fa:	4a07      	ldr	r2, [pc, #28]	; (d5618 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d55fc:	b510      	push	{r4, lr}
   d55fe:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5602:	f101 0210 	add.w	r2, r1, #16
   d5606:	f851 4b04 	ldr.w	r4, [r1], #4
   d560a:	f843 4b04 	str.w	r4, [r3], #4
   d560e:	4291      	cmp	r1, r2
   d5610:	d1f9      	bne.n	d5606 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5612:	780a      	ldrb	r2, [r1, #0]
   d5614:	701a      	strb	r2, [r3, #0]
}
   d5616:	bd10      	pop	{r4, pc}
   d5618:	000d7830 	.word	0x000d7830

000d561c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d561c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d561e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5622:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5626:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d562a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d562e:	2304      	movs	r3, #4
   d5630:	6041      	str	r1, [r0, #4]
   d5632:	7503      	strb	r3, [r0, #20]
   d5634:	bd10      	pop	{r4, pc}

000d5636 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5636:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5638:	780d      	ldrb	r5, [r1, #0]
   d563a:	788b      	ldrb	r3, [r1, #2]
   d563c:	784a      	ldrb	r2, [r1, #1]
   d563e:	78c9      	ldrb	r1, [r1, #3]
   d5640:	9100      	str	r1, [sp, #0]
   d5642:	4629      	mov	r1, r5
   d5644:	f7ff ffea 	bl	d561c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5648:	b003      	add	sp, #12
   d564a:	bd30      	pop	{r4, r5, pc}

000d564c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d564c:	4b01      	ldr	r3, [pc, #4]	; (d5654 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d564e:	4a02      	ldr	r2, [pc, #8]	; (d5658 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5650:	601a      	str	r2, [r3, #0]
   d5652:	4770      	bx	lr
   d5654:	2003e380 	.word	0x2003e380
   d5658:	000d78f4 	.word	0x000d78f4

000d565c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d565c:	2200      	movs	r2, #0
   d565e:	4611      	mov	r1, r2
   d5660:	6840      	ldr	r0, [r0, #4]
   d5662:	f7ff bbab 	b.w	d4dbc <network_listening>

000d5666 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5666:	2200      	movs	r2, #0
   d5668:	4611      	mov	r1, r2
   d566a:	6840      	ldr	r0, [r0, #4]
   d566c:	f7ff bbb6 	b.w	d4ddc <network_get_listen_timeout>

000d5670 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5670:	2200      	movs	r2, #0
   d5672:	6840      	ldr	r0, [r0, #4]
   d5674:	f7ff bbaa 	b.w	d4dcc <network_set_listen_timeout>

000d5678 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5678:	2200      	movs	r2, #0
   d567a:	f081 0101 	eor.w	r1, r1, #1
   d567e:	6840      	ldr	r0, [r0, #4]
   d5680:	f7ff bb94 	b.w	d4dac <network_listen>

000d5684 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5684:	2300      	movs	r3, #0
   d5686:	461a      	mov	r2, r3
   d5688:	4619      	mov	r1, r3
   d568a:	6840      	ldr	r0, [r0, #4]
   d568c:	f7ff bb86 	b.w	d4d9c <network_off>

000d5690 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5690:	2300      	movs	r3, #0
   d5692:	461a      	mov	r2, r3
   d5694:	4619      	mov	r1, r3
   d5696:	6840      	ldr	r0, [r0, #4]
   d5698:	f7ff bb78 	b.w	d4d8c <network_on>

000d569c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d569c:	2200      	movs	r2, #0
   d569e:	4611      	mov	r1, r2
   d56a0:	6840      	ldr	r0, [r0, #4]
   d56a2:	f7ff bb6b 	b.w	d4d7c <network_ready>

000d56a6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56a6:	2200      	movs	r2, #0
   d56a8:	4611      	mov	r1, r2
   d56aa:	6840      	ldr	r0, [r0, #4]
   d56ac:	f7ff bb56 	b.w	d4d5c <network_connecting>

000d56b0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56b0:	2200      	movs	r2, #0
   d56b2:	2102      	movs	r1, #2
   d56b4:	6840      	ldr	r0, [r0, #4]
   d56b6:	f7ff bb59 	b.w	d4d6c <network_disconnect>

000d56ba <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56ba:	2300      	movs	r3, #0
   d56bc:	461a      	mov	r2, r3
   d56be:	6840      	ldr	r0, [r0, #4]
   d56c0:	f7ff bb44 	b.w	d4d4c <network_connect>

000d56c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d56c4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56c6:	4605      	mov	r5, r0
   d56c8:	b188      	cbz	r0, d56ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56ca:	6804      	ldr	r4, [r0, #0]
   d56cc:	b14c      	cbz	r4, d56e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d56ce:	68a3      	ldr	r3, [r4, #8]
   d56d0:	b11b      	cbz	r3, d56da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56d2:	2203      	movs	r2, #3
   d56d4:	4621      	mov	r1, r4
   d56d6:	4620      	mov	r0, r4
   d56d8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56da:	2110      	movs	r1, #16
   d56dc:	4620      	mov	r0, r4
   d56de:	f000 fda0 	bl	d6222 <_ZdlPvj>
   d56e2:	4628      	mov	r0, r5
   d56e4:	2114      	movs	r1, #20
      }
   d56e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56ea:	f000 bd9a 	b.w	d6222 <_ZdlPvj>
   d56ee:	bd38      	pop	{r3, r4, r5, pc}

000d56f0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d56f0:	b110      	cbz	r0, d56f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d56f2:	6803      	ldr	r3, [r0, #0]
   d56f4:	685b      	ldr	r3, [r3, #4]
   d56f6:	4718      	bx	r3
   d56f8:	4770      	bx	lr

000d56fa <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d56fa:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d56fc:	6803      	ldr	r3, [r0, #0]
   d56fe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5700:	b1bb      	cbz	r3, d5732 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5702:	6858      	ldr	r0, [r3, #4]
   d5704:	f7ff f946 	bl	d4994 <os_thread_is_current>
   d5708:	b978      	cbnz	r0, d572a <_ZN6ThreadD1Ev+0x30>
   d570a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d570c:	7c5a      	ldrb	r2, [r3, #17]
   d570e:	b912      	cbnz	r2, d5716 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5710:	6858      	ldr	r0, [r3, #4]
   d5712:	f7ff f947 	bl	d49a4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5716:	6823      	ldr	r3, [r4, #0]
   d5718:	6858      	ldr	r0, [r3, #4]
   d571a:	f7ff f94b 	bl	d49b4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d571e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5720:	2300      	movs	r3, #0
   d5722:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5724:	b128      	cbz	r0, d5732 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5726:	f7ff ffcd 	bl	d56c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d572a:	6820      	ldr	r0, [r4, #0]
   d572c:	b108      	cbz	r0, d5732 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d572e:	f7ff ffc9 	bl	d56c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5732:	4620      	mov	r0, r4
   d5734:	bd10      	pop	{r4, pc}
	...

000d5738 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5738:	b538      	push	{r3, r4, r5, lr}
   d573a:	4b0c      	ldr	r3, [pc, #48]	; (d576c <_ZN5spark9MeshClassD1Ev+0x34>)
   d573c:	6003      	str	r3, [r0, #0]
   d573e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5740:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5744:	b108      	cbz	r0, d574a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5746:	f7fe fcaa 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d574a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d574e:	b135      	cbz	r5, d575e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5750:	4628      	mov	r0, r5
   d5752:	f7ff ffd2 	bl	d56fa <_ZN6ThreadD1Ev>
   d5756:	2104      	movs	r1, #4
   d5758:	4628      	mov	r0, r5
   d575a:	f000 fd62 	bl	d6222 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d575e:	68a0      	ldr	r0, [r4, #8]
   d5760:	b108      	cbz	r0, d5766 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5762:	f7ff ffc5 	bl	d56f0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5766:	4620      	mov	r0, r4
   d5768:	bd38      	pop	{r3, r4, r5, pc}
   d576a:	bf00      	nop
   d576c:	000d7928 	.word	0x000d7928

000d5770 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5770:	b538      	push	{r3, r4, r5, lr}
   d5772:	4c0d      	ldr	r4, [pc, #52]	; (d57a8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5774:	4b0d      	ldr	r3, [pc, #52]	; (d57ac <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5776:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5778:	2500      	movs	r5, #0
   d577a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d577c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5780:	6063      	str	r3, [r4, #4]
   d5782:	60a5      	str	r5, [r4, #8]
   d5784:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5788:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d578c:	f7ff f922 	bl	d49d4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5790:	4b07      	ldr	r3, [pc, #28]	; (d57b0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5792:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5796:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5798:	4620      	mov	r0, r4
   d579a:	4a06      	ldr	r2, [pc, #24]	; (d57b4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d579c:	4906      	ldr	r1, [pc, #24]	; (d57b8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d579e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d57a2:	f000 bd39 	b.w	d6218 <__aeabi_atexit>
   d57a6:	bf00      	nop
   d57a8:	2003e384 	.word	0x2003e384
   d57ac:	000d795c 	.word	0x000d795c
   d57b0:	000d7928 	.word	0x000d7928
   d57b4:	2003e30c 	.word	0x2003e30c
   d57b8:	000d5739 	.word	0x000d5739

000d57bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57bc:	2300      	movs	r3, #0
   d57be:	461a      	mov	r2, r3
   d57c0:	6840      	ldr	r0, [r0, #4]
   d57c2:	f7ff bac3 	b.w	d4d4c <network_connect>

000d57c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57c6:	2200      	movs	r2, #0
   d57c8:	2102      	movs	r1, #2
   d57ca:	6840      	ldr	r0, [r0, #4]
   d57cc:	f7ff bace 	b.w	d4d6c <network_disconnect>

000d57d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57d0:	2200      	movs	r2, #0
   d57d2:	4611      	mov	r1, r2
   d57d4:	6840      	ldr	r0, [r0, #4]
   d57d6:	f7ff bac1 	b.w	d4d5c <network_connecting>

000d57da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57da:	2200      	movs	r2, #0
   d57dc:	4611      	mov	r1, r2
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	f7ff bacc 	b.w	d4d7c <network_ready>

000d57e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d57e4:	2300      	movs	r3, #0
   d57e6:	461a      	mov	r2, r3
   d57e8:	4619      	mov	r1, r3
   d57ea:	6840      	ldr	r0, [r0, #4]
   d57ec:	f7ff bace 	b.w	d4d8c <network_on>

000d57f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d57f0:	2300      	movs	r3, #0
   d57f2:	461a      	mov	r2, r3
   d57f4:	4619      	mov	r1, r3
   d57f6:	6840      	ldr	r0, [r0, #4]
   d57f8:	f7ff bad0 	b.w	d4d9c <network_off>

000d57fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d57fc:	2200      	movs	r2, #0
   d57fe:	f081 0101 	eor.w	r1, r1, #1
   d5802:	6840      	ldr	r0, [r0, #4]
   d5804:	f7ff bad2 	b.w	d4dac <network_listen>

000d5808 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5808:	2200      	movs	r2, #0
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	f7ff bade 	b.w	d4dcc <network_set_listen_timeout>

000d5810 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5810:	2200      	movs	r2, #0
   d5812:	4611      	mov	r1, r2
   d5814:	6840      	ldr	r0, [r0, #4]
   d5816:	f7ff bae1 	b.w	d4ddc <network_get_listen_timeout>

000d581a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d581a:	2200      	movs	r2, #0
   d581c:	4611      	mov	r1, r2
   d581e:	6840      	ldr	r0, [r0, #4]
   d5820:	f7ff bacc 	b.w	d4dbc <network_listening>

000d5824 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5828:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d582a:	b095      	sub	sp, #84	; 0x54
   d582c:	4616      	mov	r6, r2
   d582e:	460d      	mov	r5, r1
   d5830:	4607      	mov	r7, r0
    IPAddress addr;
   d5832:	f7ff fed3 	bl	d55dc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5836:	4621      	mov	r1, r4
   d5838:	2220      	movs	r2, #32
   d583a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d583c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d583e:	f001 fb68 	bl	d6f12 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5842:	2340      	movs	r3, #64	; 0x40
   d5844:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5846:	4621      	mov	r1, r4
   d5848:	466b      	mov	r3, sp
   d584a:	aa0c      	add	r2, sp, #48	; 0x30
   d584c:	4630      	mov	r0, r6
   d584e:	f7ff f969 	bl	d4b24 <netdb_getaddrinfo>
    if (!r) {
   d5852:	4604      	mov	r4, r0
   d5854:	2800      	cmp	r0, #0
   d5856:	d144      	bne.n	d58e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5858:	4602      	mov	r2, r0
   d585a:	2101      	movs	r1, #1
   d585c:	6868      	ldr	r0, [r5, #4]
   d585e:	f7ff fa8d 	bl	d4d7c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5862:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5864:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5866:	4622      	mov	r2, r4
   d5868:	6868      	ldr	r0, [r5, #4]
   d586a:	f7ff fa87 	bl	d4d7c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d586e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5870:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5872:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5874:	2e00      	cmp	r6, #0
   d5876:	d034      	beq.n	d58e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5878:	2900      	cmp	r1, #0
   d587a:	d132      	bne.n	d58e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d587c:	6873      	ldr	r3, [r6, #4]
   d587e:	2b02      	cmp	r3, #2
   d5880:	d002      	beq.n	d5888 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5882:	2b0a      	cmp	r3, #10
   d5884:	d009      	beq.n	d589a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5886:	e02a      	b.n	d58de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5888:	f1b8 0f00 	cmp.w	r8, #0
   d588c:	d027      	beq.n	d58de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d588e:	6971      	ldr	r1, [r6, #20]
   d5890:	4638      	mov	r0, r7
   d5892:	3104      	adds	r1, #4
   d5894:	f7ff fecf 	bl	d5636 <_ZN9IPAddressaSEPKh>
   d5898:	e020      	b.n	d58dc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d589a:	f1b9 0f00 	cmp.w	r9, #0
   d589e:	d01e      	beq.n	d58de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58a0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58a2:	2211      	movs	r2, #17
   d58a4:	a801      	add	r0, sp, #4
   d58a6:	f001 fb34 	bl	d6f12 <memset>
                    a.v = 6;
   d58aa:	2306      	movs	r3, #6
   d58ac:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58b0:	ad01      	add	r5, sp, #4
   d58b2:	f104 0308 	add.w	r3, r4, #8
   d58b6:	3418      	adds	r4, #24
   d58b8:	6818      	ldr	r0, [r3, #0]
   d58ba:	6859      	ldr	r1, [r3, #4]
   d58bc:	462a      	mov	r2, r5
   d58be:	c203      	stmia	r2!, {r0, r1}
   d58c0:	3308      	adds	r3, #8
   d58c2:	42a3      	cmp	r3, r4
   d58c4:	4615      	mov	r5, r2
   d58c6:	d1f7      	bne.n	d58b8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d58c8:	a901      	add	r1, sp, #4
   d58ca:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d58cc:	ad07      	add	r5, sp, #28
   d58ce:	f7ff fe93 	bl	d55f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d58d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58d4:	1d3c      	adds	r4, r7, #4
   d58d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58d8:	682b      	ldr	r3, [r5, #0]
   d58da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d58dc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58de:	69f6      	ldr	r6, [r6, #28]
   d58e0:	e7c8      	b.n	d5874 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d58e2:	9800      	ldr	r0, [sp, #0]
   d58e4:	f7ff f916 	bl	d4b14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d58e8:	4638      	mov	r0, r7
   d58ea:	b015      	add	sp, #84	; 0x54
   d58ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d58f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d58f0:	4b02      	ldr	r3, [pc, #8]	; (d58fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d58f2:	4a03      	ldr	r2, [pc, #12]	; (d5900 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d58f4:	601a      	str	r2, [r3, #0]
   d58f6:	2200      	movs	r2, #0
   d58f8:	605a      	str	r2, [r3, #4]
   d58fa:	4770      	bx	lr
   d58fc:	2003e554 	.word	0x2003e554
   d5900:	000d795c 	.word	0x000d795c

000d5904 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5906:	4606      	mov	r6, r0
   d5908:	460d      	mov	r5, r1
   d590a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d590c:	2400      	movs	r4, #0
  while (size--) {
   d590e:	42bd      	cmp	r5, r7
   d5910:	d00c      	beq.n	d592c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5912:	6833      	ldr	r3, [r6, #0]
   d5914:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5918:	689b      	ldr	r3, [r3, #8]
   d591a:	4630      	mov	r0, r6
   d591c:	4798      	blx	r3
     if (chunk>=0)
   d591e:	2800      	cmp	r0, #0
   d5920:	db01      	blt.n	d5926 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5922:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5924:	e7f3      	b.n	d590e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5926:	2c00      	cmp	r4, #0
   d5928:	bf08      	it	eq
   d592a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d592c:	4620      	mov	r0, r4
   d592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5930 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5930:	b570      	push	{r4, r5, r6, lr}
   d5932:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5934:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5936:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5938:	b149      	cbz	r1, d594e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d593a:	f001 fb48 	bl	d6fce <strlen>
   d593e:	682b      	ldr	r3, [r5, #0]
   d5940:	4602      	mov	r2, r0
   d5942:	4621      	mov	r1, r4
   d5944:	4628      	mov	r0, r5
   d5946:	68db      	ldr	r3, [r3, #12]
    }
   d5948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d594c:	4718      	bx	r3
    }
   d594e:	bd70      	pop	{r4, r5, r6, pc}

000d5950 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5950:	6803      	ldr	r3, [r0, #0]
   d5952:	689b      	ldr	r3, [r3, #8]
   d5954:	4718      	bx	r3

000d5956 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5956:	b530      	push	{r4, r5, lr}
   d5958:	b08b      	sub	sp, #44	; 0x2c
   d595a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d595c:	2100      	movs	r1, #0
   d595e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5962:	2a01      	cmp	r2, #1
   d5964:	bf98      	it	ls
   d5966:	220a      	movls	r2, #10
   d5968:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d596c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5970:	fb05 3312 	mls	r3, r5, r2, r3
   d5974:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5978:	2b09      	cmp	r3, #9
   d597a:	bf94      	ite	ls
   d597c:	3330      	addls	r3, #48	; 0x30
   d597e:	3337      	addhi	r3, #55	; 0x37
   d5980:	b2db      	uxtb	r3, r3
   d5982:	4621      	mov	r1, r4
   d5984:	f804 3901 	strb.w	r3, [r4], #-1
   d5988:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d598a:	2d00      	cmp	r5, #0
   d598c:	d1ee      	bne.n	d596c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d598e:	f7ff ffcf 	bl	d5930 <_ZN5Print5writeEPKc>
}
   d5992:	b00b      	add	sp, #44	; 0x2c
   d5994:	bd30      	pop	{r4, r5, pc}

000d5996 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5996:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5998:	b92a      	cbnz	r2, d59a6 <_ZN5Print5printEmi+0x10>
   d599a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d599c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d59a0:	689b      	ldr	r3, [r3, #8]
   d59a2:	b2c9      	uxtb	r1, r1
   d59a4:	4718      	bx	r3
  else return printNumber(n, base);
   d59a6:	b2d2      	uxtb	r2, r2
}
   d59a8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d59ac:	f7ff bfd3 	b.w	d5956 <_ZN5Print11printNumberEmh>

000d59b0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d59b0:	f7ff bff1 	b.w	d5996 <_ZN5Print5printEmi>

000d59b4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d59b4:	b510      	push	{r4, lr}
   d59b6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59b8:	f7ff fa76 	bl	d4ea8 <_ZNSt14_Function_baseD1Ev>
   d59bc:	4620      	mov	r0, r4
   d59be:	bd10      	pop	{r4, pc}

000d59c0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59c0:	4803      	ldr	r0, [pc, #12]	; (d59d0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d59c2:	4a04      	ldr	r2, [pc, #16]	; (d59d4 <_GLOBAL__sub_I_RGB+0x14>)
   d59c4:	4904      	ldr	r1, [pc, #16]	; (d59d8 <_GLOBAL__sub_I_RGB+0x18>)
   d59c6:	2300      	movs	r3, #0
   d59c8:	6083      	str	r3, [r0, #8]
   d59ca:	f000 bc25 	b.w	d6218 <__aeabi_atexit>
   d59ce:	bf00      	nop
   d59d0:	2003e55c 	.word	0x2003e55c
   d59d4:	2003e30c 	.word	0x2003e30c
   d59d8:	000d59b5 	.word	0x000d59b5

000d59dc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d59dc:	4770      	bx	lr

000d59de <_ZN8SPIClassD0Ev>:
   d59de:	b510      	push	{r4, lr}
   d59e0:	2110      	movs	r1, #16
   d59e2:	4604      	mov	r4, r0
   d59e4:	f000 fc1d 	bl	d6222 <_ZdlPvj>
   d59e8:	4620      	mov	r0, r4
   d59ea:	bd10      	pop	{r4, pc}

000d59ec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d59ec:	b570      	push	{r4, r5, r6, lr}
   d59ee:	4b08      	ldr	r3, [pc, #32]	; (d5a10 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d59f0:	6003      	str	r3, [r0, #0]
   d59f2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d59f4:	2500      	movs	r5, #0
   d59f6:	460e      	mov	r6, r1
   d59f8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d59fc:	f7fe ffe2 	bl	d49c4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5a00:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5a02:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5a04:	f7ff f896 	bl	d4b34 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5a08:	60a5      	str	r5, [r4, #8]
}
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	bd70      	pop	{r4, r5, r6, pc}
   d5a0e:	bf00      	nop
   d5a10:	000d7990 	.word	0x000d7990

000d5a14 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5a14:	7900      	ldrb	r0, [r0, #4]
   d5a16:	f7ff b895 	b.w	d4b44 <HAL_SPI_Is_Enabled>

000d5a1a <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a1a:	2300      	movs	r3, #0
   d5a1c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5a1e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5a20:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5a22:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d5a24:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d5a26:	680c      	ldr	r4, [r1, #0]
   d5a28:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d5a2a:	684c      	ldr	r4, [r1, #4]
   d5a2c:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d5a2e:	688c      	ldr	r4, [r1, #8]
   d5a30:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d5a32:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d5a34:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5a36:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d5a38:	bd10      	pop	{r4, pc}

000d5a3a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	4604      	mov	r4, r0
{
	free(buffer);
   d5a3e:	6800      	ldr	r0, [r0, #0]
   d5a40:	f7ff f9dc 	bl	d4dfc <free>
}
   d5a44:	4620      	mov	r0, r4
   d5a46:	bd10      	pop	{r4, pc}

000d5a48 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5a48:	b510      	push	{r4, lr}
   d5a4a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5a4c:	6800      	ldr	r0, [r0, #0]
   d5a4e:	b108      	cbz	r0, d5a54 <_ZN6String10invalidateEv+0xc>
   d5a50:	f7ff f9d4 	bl	d4dfc <free>
	buffer = NULL;
   d5a54:	2300      	movs	r3, #0
   d5a56:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5a58:	60a3      	str	r3, [r4, #8]
   d5a5a:	6063      	str	r3, [r4, #4]
   d5a5c:	bd10      	pop	{r4, pc}

000d5a5e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5a5e:	b538      	push	{r3, r4, r5, lr}
   d5a60:	4604      	mov	r4, r0
   d5a62:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5a64:	6800      	ldr	r0, [r0, #0]
   d5a66:	3101      	adds	r1, #1
   d5a68:	f7ff f9d0 	bl	d4e0c <realloc>
	if (newbuffer) {
   d5a6c:	b110      	cbz	r0, d5a74 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5a6e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5a72:	2001      	movs	r0, #1
	}
	return 0;
}
   d5a74:	bd38      	pop	{r3, r4, r5, pc}

000d5a76 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5a76:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5a78:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5a7a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5a7c:	b113      	cbz	r3, d5a84 <_ZN6String7reserveEj+0xe>
   d5a7e:	6843      	ldr	r3, [r0, #4]
   d5a80:	428b      	cmp	r3, r1
   d5a82:	d207      	bcs.n	d5a94 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5a84:	4620      	mov	r0, r4
   d5a86:	f7ff ffea 	bl	d5a5e <_ZN6String12changeBufferEj>
   d5a8a:	b120      	cbz	r0, d5a96 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5a8c:	68a3      	ldr	r3, [r4, #8]
   d5a8e:	b90b      	cbnz	r3, d5a94 <_ZN6String7reserveEj+0x1e>
   d5a90:	6822      	ldr	r2, [r4, #0]
   d5a92:	7013      	strb	r3, [r2, #0]
   d5a94:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5a96:	bd10      	pop	{r4, pc}

000d5a98 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5a98:	b570      	push	{r4, r5, r6, lr}
   d5a9a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5a9c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5a9e:	4604      	mov	r4, r0
   d5aa0:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5aa2:	f7ff ffe8 	bl	d5a76 <_ZN6String7reserveEj>
   d5aa6:	b918      	cbnz	r0, d5ab0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	f7ff ffcd 	bl	d5a48 <_ZN6String10invalidateEv>
		return *this;
   d5aae:	e009      	b.n	d5ac4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5ab0:	462a      	mov	r2, r5
   d5ab2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5ab4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5ab6:	6820      	ldr	r0, [r4, #0]
   d5ab8:	f001 fa20 	bl	d6efc <memcpy>
	buffer[len] = 0;
   d5abc:	6822      	ldr	r2, [r4, #0]
   d5abe:	68a3      	ldr	r3, [r4, #8]
   d5ac0:	2100      	movs	r1, #0
   d5ac2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	bd70      	pop	{r4, r5, r6, pc}

000d5ac8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5ac8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5aca:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5acc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ace:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5ad0:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ad2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ad4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5ad6:	460d      	mov	r5, r1
   d5ad8:	b139      	cbz	r1, d5aea <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5ada:	4608      	mov	r0, r1
   d5adc:	f001 fa77 	bl	d6fce <strlen>
   d5ae0:	4629      	mov	r1, r5
   d5ae2:	4602      	mov	r2, r0
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	f7ff ffd7 	bl	d5a98 <_ZN6String4copyEPKcj>
}
   d5aea:	4620      	mov	r0, r4
   d5aec:	bd38      	pop	{r3, r4, r5, pc}

000d5aee <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5aee:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5af0:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5af2:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5af4:	b912      	cbnz	r2, d5afc <_ZNK6String6equalsEPKc+0xe>
   d5af6:	b919      	cbnz	r1, d5b00 <_ZNK6String6equalsEPKc+0x12>
   d5af8:	2001      	movs	r0, #1
   d5afa:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5afc:	b911      	cbnz	r1, d5b04 <_ZNK6String6equalsEPKc+0x16>
   d5afe:	6803      	ldr	r3, [r0, #0]
   d5b00:	7818      	ldrb	r0, [r3, #0]
   d5b02:	e002      	b.n	d5b0a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5b04:	6800      	ldr	r0, [r0, #0]
   d5b06:	f001 fa35 	bl	d6f74 <strcmp>
   d5b0a:	fab0 f080 	clz	r0, r0
   d5b0e:	0940      	lsrs	r0, r0, #5
}
   d5b10:	bd08      	pop	{r3, pc}
	...

000d5b14 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5b14:	4b04      	ldr	r3, [pc, #16]	; (d5b28 <_GLOBAL__sub_I_System+0x14>)
   d5b16:	2000      	movs	r0, #0
   d5b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b1c:	7018      	strb	r0, [r3, #0]
   d5b1e:	8058      	strh	r0, [r3, #2]
   d5b20:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b22:	f7ff b89f 	b.w	d4c64 <set_system_mode>
   d5b26:	bf00      	nop
   d5b28:	2003e56c 	.word	0x2003e56c

000d5b2c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d5b2e:	4b14      	ldr	r3, [pc, #80]	; (d5b80 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5b30:	4f14      	ldr	r7, [pc, #80]	; (d5b84 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5b32:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5b34:	4b14      	ldr	r3, [pc, #80]	; (d5b88 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5b36:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5b38:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d5b3a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d5b3c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d5b3e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5b40:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5b42:	d01b      	beq.n	d5b7c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5b44:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5b46:	ad01      	add	r5, sp, #4
   d5b48:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d5b4c:	f001 f8de 	bl	d6d0c <localtime>
	calendar_time->tm_year += 1900;
   d5b50:	6943      	ldr	r3, [r0, #20]
   d5b52:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5b56:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5b58:	4604      	mov	r4, r0
   d5b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b62:	f8d4 e000 	ldr.w	lr, [r4]
   d5b66:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5b6a:	ad01      	add	r5, sp, #4
   d5b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b6e:	4c07      	ldr	r4, [pc, #28]	; (d5b8c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d5b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5b76:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5b78:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d5b7c:	b00b      	add	sp, #44	; 0x2c
   d5b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b80:	2003e5a4 	.word	0x2003e5a4
   d5b84:	2003e5a0 	.word	0x2003e5a0
   d5b88:	2003e59c 	.word	0x2003e59c
   d5b8c:	2003e574 	.word	0x2003e574

000d5b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5b90:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5b92:	2000      	movs	r0, #0
   d5b94:	f7ff f8ca 	bl	d4d2c <spark_sync_time_pending>
   d5b98:	b128      	cbz	r0, d5ba6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5b9a:	f7ff f8b7 	bl	d4d0c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5b9e:	f080 0001 	eor.w	r0, r0, #1
   d5ba2:	b2c0      	uxtb	r0, r0
   d5ba4:	bd08      	pop	{r3, pc}
   d5ba6:	2001      	movs	r0, #1
    }
   d5ba8:	bd08      	pop	{r3, pc}

000d5baa <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5baa:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5bac:	2000      	movs	r0, #0
   d5bae:	f7fe ff39 	bl	d4a24 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5bb2:	4604      	mov	r4, r0
   d5bb4:	b968      	cbnz	r0, d5bd2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5bb6:	f7ff f84d 	bl	d4c54 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5bba:	2801      	cmp	r0, #1
   d5bbc:	d10b      	bne.n	d5bd6 <_ZN9TimeClass7isValidEv+0x2c>
   d5bbe:	4620      	mov	r0, r4
   d5bc0:	f7ff f870 	bl	d4ca4 <system_thread_get_state>
   d5bc4:	b938      	cbnz	r0, d5bd6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5bc6:	f7ff ffe3 	bl	d5b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5bca:	b930      	cbnz	r0, d5bda <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5bcc:	f7ff f896 	bl	d4cfc <spark_process>
   d5bd0:	e7f9      	b.n	d5bc6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5bd2:	2001      	movs	r0, #1
   d5bd4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5bd6:	2000      	movs	r0, #0
   d5bd8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5bda:	f7ff ffd9 	bl	d5b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5bde:	2000      	movs	r0, #0
   d5be0:	f7fe ff20 	bl	d4a24 <HAL_RTC_Time_Is_Valid>
   d5be4:	3000      	adds	r0, #0
   d5be6:	bf18      	it	ne
   d5be8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5bea:	bd10      	pop	{r4, pc}

000d5bec <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5bec:	b508      	push	{r3, lr}
    (void)isValid();
   d5bee:	f7ff ffdc 	bl	d5baa <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5bf6:	f7fe bf0d 	b.w	d4a14 <HAL_RTC_Get_UnixTime>
	...

000d5bfc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d5bfc:	b508      	push	{r3, lr}
	return minute(now());
   d5bfe:	f7ff fff5 	bl	d5bec <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5c02:	f7ff ff93 	bl	d5b2c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d5c06:	4b01      	ldr	r3, [pc, #4]	; (d5c0c <_ZN9TimeClass6minuteEv+0x10>)
   d5c08:	6858      	ldr	r0, [r3, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	2003e574 	.word	0x2003e574

000d5c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c10:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c12:	681a      	ldr	r2, [r3, #0]
   d5c14:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c16:	601a      	str	r2, [r3, #0]
   d5c18:	4770      	bx	lr
   d5c1a:	bf00      	nop
   d5c1c:	2003e254 	.word	0x2003e254
   d5c20:	2003e598 	.word	0x2003e598

000d5c24 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5c24:	4770      	bx	lr

000d5c26 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c26:	7441      	strb	r1, [r0, #17]
   d5c28:	4770      	bx	lr

000d5c2a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5c2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5c2c:	7c00      	ldrb	r0, [r0, #16]
   d5c2e:	f7fe ffc9 	bl	d4bc4 <HAL_USART_Available_Data_For_Write>
}
   d5c32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c36:	bd08      	pop	{r3, pc}

000d5c38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5c38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5c3a:	7c00      	ldrb	r0, [r0, #16]
   d5c3c:	f7fe ff9a 	bl	d4b74 <HAL_USART_Available_Data>
}
   d5c40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c44:	bd08      	pop	{r3, pc}

000d5c46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5c46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5c48:	7c00      	ldrb	r0, [r0, #16]
   d5c4a:	f7fe ffa3 	bl	d4b94 <HAL_USART_Peek_Data>
}
   d5c4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c52:	bf28      	it	cs
   d5c54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c58:	bd08      	pop	{r3, pc}

000d5c5a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5c5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5c5c:	7c00      	ldrb	r0, [r0, #16]
   d5c5e:	f7fe ff91 	bl	d4b84 <HAL_USART_Read_Data>
}
   d5c62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c66:	bf28      	it	cs
   d5c68:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c6c:	bd08      	pop	{r3, pc}

000d5c6e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5c6e:	7c00      	ldrb	r0, [r0, #16]
   d5c70:	f7fe bf98 	b.w	d4ba4 <HAL_USART_Flush_Data>

000d5c74 <_ZN11USARTSerialD0Ev>:
   d5c74:	b510      	push	{r4, lr}
   d5c76:	2114      	movs	r1, #20
   d5c78:	4604      	mov	r4, r0
   d5c7a:	f000 fad2 	bl	d6222 <_ZdlPvj>
   d5c7e:	4620      	mov	r0, r4
   d5c80:	bd10      	pop	{r4, pc}

000d5c82 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5c82:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c84:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5c86:	4604      	mov	r4, r0
   d5c88:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c8a:	b925      	cbnz	r5, d5c96 <_ZN11USARTSerial5writeEh+0x14>
   d5c8c:	7c00      	ldrb	r0, [r0, #16]
   d5c8e:	f7fe ff99 	bl	d4bc4 <HAL_USART_Available_Data_For_Write>
   d5c92:	2800      	cmp	r0, #0
   d5c94:	dd05      	ble.n	d5ca2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c96:	4631      	mov	r1, r6
   d5c98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c9e:	f7fe bf61 	b.w	d4b64 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5ca2:	4628      	mov	r0, r5
   d5ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5ca8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5ca8:	b510      	push	{r4, lr}
   d5caa:	4604      	mov	r4, r0
   d5cac:	4608      	mov	r0, r1
   d5cae:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5cb0:	2200      	movs	r2, #0
   d5cb2:	6062      	str	r2, [r4, #4]
   d5cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5cb8:	60a2      	str	r2, [r4, #8]
   d5cba:	4a05      	ldr	r2, [pc, #20]	; (d5cd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5cbc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5cbe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5cc0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5cc2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5cc4:	461a      	mov	r2, r3
   d5cc6:	f7fe ff45 	bl	d4b54 <HAL_USART_Init>
}
   d5cca:	4620      	mov	r0, r4
   d5ccc:	bd10      	pop	{r4, pc}
   d5cce:	bf00      	nop
   d5cd0:	000d79c8 	.word	0x000d79c8

000d5cd4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5cd4:	7c00      	ldrb	r0, [r0, #16]
   d5cd6:	f7fe bf6d 	b.w	d4bb4 <HAL_USART_Is_Enabled>
	...

000d5cdc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5cdc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5cde:	4d0c      	ldr	r5, [pc, #48]	; (d5d10 <_Z22__fetch_global_Serial1v+0x34>)
   d5ce0:	6829      	ldr	r1, [r5, #0]
   d5ce2:	f011 0401 	ands.w	r4, r1, #1
   d5ce6:	d111      	bne.n	d5d0c <_Z22__fetch_global_Serial1v+0x30>
   d5ce8:	4628      	mov	r0, r5
   d5cea:	f7fe f9da 	bl	d40a2 <__cxa_guard_acquire>
   d5cee:	b168      	cbz	r0, d5d0c <_Z22__fetch_global_Serial1v+0x30>
   d5cf0:	4a08      	ldr	r2, [pc, #32]	; (d5d14 <_Z22__fetch_global_Serial1v+0x38>)
   d5cf2:	4b09      	ldr	r3, [pc, #36]	; (d5d18 <_Z22__fetch_global_Serial1v+0x3c>)
   d5cf4:	4809      	ldr	r0, [pc, #36]	; (d5d1c <_Z22__fetch_global_Serial1v+0x40>)
   d5cf6:	4621      	mov	r1, r4
   d5cf8:	f7ff ffd6 	bl	d5ca8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5cfc:	4628      	mov	r0, r5
   d5cfe:	f7fe f9d5 	bl	d40ac <__cxa_guard_release>
   d5d02:	4a07      	ldr	r2, [pc, #28]	; (d5d20 <_Z22__fetch_global_Serial1v+0x44>)
   d5d04:	4907      	ldr	r1, [pc, #28]	; (d5d24 <_Z22__fetch_global_Serial1v+0x48>)
   d5d06:	4805      	ldr	r0, [pc, #20]	; (d5d1c <_Z22__fetch_global_Serial1v+0x40>)
   d5d08:	f000 fa86 	bl	d6218 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d0c:	4803      	ldr	r0, [pc, #12]	; (d5d1c <_Z22__fetch_global_Serial1v+0x40>)
   d5d0e:	bd38      	pop	{r3, r4, r5, pc}
   d5d10:	2003e640 	.word	0x2003e640
   d5d14:	2003e644 	.word	0x2003e644
   d5d18:	2003e5bc 	.word	0x2003e5bc
   d5d1c:	2003e5a8 	.word	0x2003e5a8
   d5d20:	2003e30c 	.word	0x2003e30c
   d5d24:	000d5c25 	.word	0x000d5c25

000d5d28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d28:	7441      	strb	r1, [r0, #17]
   d5d2a:	4770      	bx	lr

000d5d2c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5d2c:	4770      	bx	lr

000d5d2e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5d2e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5d30:	2100      	movs	r1, #0
   d5d32:	7c00      	ldrb	r0, [r0, #16]
   d5d34:	f7fe ff66 	bl	d4c04 <HAL_USB_USART_Receive_Data>
}
   d5d38:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d3c:	bf28      	it	cs
   d5d3e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d42:	bd08      	pop	{r3, pc}

000d5d44 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5d44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5d46:	2101      	movs	r1, #1
   d5d48:	7c00      	ldrb	r0, [r0, #16]
   d5d4a:	f7fe ff5b 	bl	d4c04 <HAL_USB_USART_Receive_Data>
}
   d5d4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d52:	bf28      	it	cs
   d5d54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d58:	bd08      	pop	{r3, pc}

000d5d5a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5d5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5d5c:	7c00      	ldrb	r0, [r0, #16]
   d5d5e:	f7fe ff49 	bl	d4bf4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d66:	bd08      	pop	{r3, pc}

000d5d68 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5d68:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5d6a:	7c00      	ldrb	r0, [r0, #16]
   d5d6c:	f7fe ff3a 	bl	d4be4 <HAL_USB_USART_Available_Data>
}
   d5d70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d74:	bd08      	pop	{r3, pc}

000d5d76 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5d76:	7c00      	ldrb	r0, [r0, #16]
   d5d78:	f7fe bf54 	b.w	d4c24 <HAL_USB_USART_Flush_Data>

000d5d7c <_ZN9USBSerialD0Ev>:
   d5d7c:	b510      	push	{r4, lr}
   d5d7e:	2114      	movs	r1, #20
   d5d80:	4604      	mov	r4, r0
   d5d82:	f000 fa4e 	bl	d6222 <_ZdlPvj>
   d5d86:	4620      	mov	r0, r4
   d5d88:	bd10      	pop	{r4, pc}

000d5d8a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d8a:	b538      	push	{r3, r4, r5, lr}
   d5d8c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d8e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d90:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d92:	f7fe ff2f 	bl	d4bf4 <HAL_USB_USART_Available_Data_For_Write>
   d5d96:	2800      	cmp	r0, #0
   d5d98:	dc01      	bgt.n	d5d9e <_ZN9USBSerial5writeEh+0x14>
   d5d9a:	7c60      	ldrb	r0, [r4, #17]
   d5d9c:	b128      	cbz	r0, d5daa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5d9e:	4629      	mov	r1, r5
   d5da0:	7c20      	ldrb	r0, [r4, #16]
   d5da2:	f7fe ff37 	bl	d4c14 <HAL_USB_USART_Send_Data>
   d5da6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5daa:	bd38      	pop	{r3, r4, r5, pc}

000d5dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5dac:	b510      	push	{r4, lr}
   d5dae:	4604      	mov	r4, r0
   d5db0:	2300      	movs	r3, #0
   d5db2:	6063      	str	r3, [r4, #4]
   d5db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5db8:	60a3      	str	r3, [r4, #8]
   d5dba:	4b05      	ldr	r3, [pc, #20]	; (d5dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5dbc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5dbe:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5dc0:	4608      	mov	r0, r1
{
  _serial = serial;
   d5dc2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5dc4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5dc6:	4611      	mov	r1, r2
   d5dc8:	f7fe ff04 	bl	d4bd4 <HAL_USB_USART_Init>
}
   d5dcc:	4620      	mov	r0, r4
   d5dce:	bd10      	pop	{r4, pc}
   d5dd0:	000d79f8 	.word	0x000d79f8

000d5dd4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5dd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5dd6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5dd8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5dda:	2100      	movs	r1, #0
   d5ddc:	f001 f899 	bl	d6f12 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5de0:	4620      	mov	r0, r4
   d5de2:	bd10      	pop	{r4, pc}

000d5de4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5de4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5de6:	4d0e      	ldr	r5, [pc, #56]	; (d5e20 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5de8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5dea:	a801      	add	r0, sp, #4
   d5dec:	f7ff fff2 	bl	d5dd4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5df0:	6829      	ldr	r1, [r5, #0]
   d5df2:	f011 0401 	ands.w	r4, r1, #1
   d5df6:	d110      	bne.n	d5e1a <_Z16_fetch_usbserialv+0x36>
   d5df8:	4628      	mov	r0, r5
   d5dfa:	f7fe f952 	bl	d40a2 <__cxa_guard_acquire>
   d5dfe:	b160      	cbz	r0, d5e1a <_Z16_fetch_usbserialv+0x36>
   d5e00:	aa01      	add	r2, sp, #4
   d5e02:	4621      	mov	r1, r4
   d5e04:	4807      	ldr	r0, [pc, #28]	; (d5e24 <_Z16_fetch_usbserialv+0x40>)
   d5e06:	f7ff ffd1 	bl	d5dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5e0a:	4628      	mov	r0, r5
   d5e0c:	f7fe f94e 	bl	d40ac <__cxa_guard_release>
   d5e10:	4a05      	ldr	r2, [pc, #20]	; (d5e28 <_Z16_fetch_usbserialv+0x44>)
   d5e12:	4906      	ldr	r1, [pc, #24]	; (d5e2c <_Z16_fetch_usbserialv+0x48>)
   d5e14:	4803      	ldr	r0, [pc, #12]	; (d5e24 <_Z16_fetch_usbserialv+0x40>)
   d5e16:	f000 f9ff 	bl	d6218 <__aeabi_atexit>
	return _usbserial;
}
   d5e1a:	4802      	ldr	r0, [pc, #8]	; (d5e24 <_Z16_fetch_usbserialv+0x40>)
   d5e1c:	b007      	add	sp, #28
   d5e1e:	bd30      	pop	{r4, r5, pc}
   d5e20:	2003e6c8 	.word	0x2003e6c8
   d5e24:	2003e6cc 	.word	0x2003e6cc
   d5e28:	2003e30c 	.word	0x2003e30c
   d5e2c:	000d5d2d 	.word	0x000d5d2d

000d5e30 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d5e30:	4770      	bx	lr

000d5e32 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d5e32:	2001      	movs	r0, #1
   d5e34:	4770      	bx	lr
	...

000d5e38 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d5e38:	8983      	ldrh	r3, [r0, #12]
   d5e3a:	b11b      	cbz	r3, d5e44 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d5e3c:	6903      	ldr	r3, [r0, #16]
   d5e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5e42:	d102      	bne.n	d5e4a <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d5e44:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5e5c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d5e48:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d5e4a:	ee07 3a90 	vmov	s15, r3
   d5e4e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5e60 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d5e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5e56:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d5e5a:	4770      	bx	lr
   d5e5c:	00000000 	.word	0x00000000
   d5e60:	42c80000 	.word	0x42c80000

000d5e64 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d5e64:	8983      	ldrh	r3, [r0, #12]
   d5e66:	b11b      	cbz	r3, d5e70 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d5e68:	6983      	ldr	r3, [r0, #24]
   d5e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5e6e:	d102      	bne.n	d5e76 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d5e70:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5e88 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d5e74:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d5e76:	ee07 3a90 	vmov	s15, r3
   d5e7a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5e8c <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d5e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5e82:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d5e86:	4770      	bx	lr
   d5e88:	00000000 	.word	0x00000000
   d5e8c:	42c80000 	.word	0x42c80000

000d5e90 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5e90:	2200      	movs	r2, #0
   d5e92:	4611      	mov	r1, r2
   d5e94:	6840      	ldr	r0, [r0, #4]
   d5e96:	f7fe bf71 	b.w	d4d7c <network_ready>

000d5e9a <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d5e9a:	b510      	push	{r4, lr}
   d5e9c:	2124      	movs	r1, #36	; 0x24
   d5e9e:	4604      	mov	r4, r0
   d5ea0:	f000 f9bf 	bl	d6222 <_ZdlPvj>
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	bd10      	pop	{r4, pc}

000d5ea8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ea8:	2200      	movs	r2, #0
   d5eaa:	4611      	mov	r1, r2
   d5eac:	6840      	ldr	r0, [r0, #4]
   d5eae:	f7fe bf85 	b.w	d4dbc <network_listening>

000d5eb2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5eb2:	2200      	movs	r2, #0
   d5eb4:	4611      	mov	r1, r2
   d5eb6:	6840      	ldr	r0, [r0, #4]
   d5eb8:	f7fe bf90 	b.w	d4ddc <network_get_listen_timeout>

000d5ebc <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ebc:	2200      	movs	r2, #0
   d5ebe:	6840      	ldr	r0, [r0, #4]
   d5ec0:	f7fe bf84 	b.w	d4dcc <network_set_listen_timeout>

000d5ec4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ec4:	2200      	movs	r2, #0
   d5ec6:	f081 0101 	eor.w	r1, r1, #1
   d5eca:	6840      	ldr	r0, [r0, #4]
   d5ecc:	f7fe bf6e 	b.w	d4dac <network_listen>

000d5ed0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5ed0:	2300      	movs	r3, #0
   d5ed2:	461a      	mov	r2, r3
   d5ed4:	4619      	mov	r1, r3
   d5ed6:	6840      	ldr	r0, [r0, #4]
   d5ed8:	f7fe bf60 	b.w	d4d9c <network_off>

000d5edc <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5edc:	2300      	movs	r3, #0
   d5ede:	461a      	mov	r2, r3
   d5ee0:	4619      	mov	r1, r3
   d5ee2:	6840      	ldr	r0, [r0, #4]
   d5ee4:	f7fe bf52 	b.w	d4d8c <network_on>

000d5ee8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ee8:	2200      	movs	r2, #0
   d5eea:	4611      	mov	r1, r2
   d5eec:	6840      	ldr	r0, [r0, #4]
   d5eee:	f7fe bf35 	b.w	d4d5c <network_connecting>

000d5ef2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ef2:	2200      	movs	r2, #0
   d5ef4:	2102      	movs	r1, #2
   d5ef6:	6840      	ldr	r0, [r0, #4]
   d5ef8:	f7fe bf38 	b.w	d4d6c <network_disconnect>

000d5efc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5efc:	2300      	movs	r3, #0
   d5efe:	461a      	mov	r2, r3
   d5f00:	6840      	ldr	r0, [r0, #4]
   d5f02:	f7fe bf23 	b.w	d4d4c <network_connect>
	...

000d5f08 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d5f08:	8983      	ldrh	r3, [r0, #12]
   d5f0a:	b17b      	cbz	r3, d5f2c <_ZNK10WiFiSignal10getQualityEv+0x24>
   d5f0c:	6a03      	ldr	r3, [r0, #32]
   d5f0e:	2b00      	cmp	r3, #0
   d5f10:	db0c      	blt.n	d5f2c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d5f12:	ee07 3a90 	vmov	s15, r3
   d5f16:	eddf 6a07 	vldr	s13, [pc, #28]	; d5f34 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d5f1a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5f38 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d5f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5f26:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5f2a:	4770      	bx	lr
    }
    return -1.0f;
   d5f2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5f30:	4770      	bx	lr
   d5f32:	bf00      	nop
   d5f34:	477fff00 	.word	0x477fff00
   d5f38:	42c80000 	.word	0x42c80000

000d5f3c <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d5f3c:	8983      	ldrh	r3, [r0, #12]
   d5f3e:	b17b      	cbz	r3, d5f60 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d5f40:	6943      	ldr	r3, [r0, #20]
   d5f42:	2b00      	cmp	r3, #0
   d5f44:	db0c      	blt.n	d5f60 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d5f46:	ee07 3a90 	vmov	s15, r3
   d5f4a:	eddf 6a07 	vldr	s13, [pc, #28]	; d5f68 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d5f4e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5f6c <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d5f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5f5a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5f5e:	4770      	bx	lr
    }
    return -1.0f;
   d5f60:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5f64:	4770      	bx	lr
   d5f66:	bf00      	nop
   d5f68:	477fff00 	.word	0x477fff00
   d5f6c:	42c80000 	.word	0x42c80000

000d5f70 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d5f70:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d5f72:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d5f74:	4606      	mov	r6, r0
    inf_ = inf;
   d5f76:	f100 040c 	add.w	r4, r0, #12
   d5f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f7e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5f82:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d5f86:	6933      	ldr	r3, [r6, #16]
   d5f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5f8c:	bf0e      	itee	eq
   d5f8e:	2302      	moveq	r3, #2
   d5f90:	2264      	movne	r2, #100	; 0x64
   d5f92:	fb93 f3f2 	sdivne	r3, r3, r2
   d5f96:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d5f98:	69b3      	ldr	r3, [r6, #24]
   d5f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5f9e:	bf0e      	itee	eq
   d5fa0:	2300      	moveq	r3, #0
   d5fa2:	2264      	movne	r2, #100	; 0x64
   d5fa4:	fb93 f3f2 	sdivne	r3, r3, r2
   d5fa8:	60b3      	str	r3, [r6, #8]
    return true;
}
   d5faa:	2001      	movs	r0, #1
   d5fac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5fb0 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d5fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d5fb4:	4b16      	ldr	r3, [pc, #88]	; (d6010 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d5fb6:	6003      	str	r3, [r0, #0]
   d5fb8:	2500      	movs	r5, #0
   d5fba:	4688      	mov	r8, r1
   d5fbc:	2702      	movs	r7, #2
   d5fbe:	2618      	movs	r6, #24
   d5fc0:	b086      	sub	sp, #24
   d5fc2:	6047      	str	r7, [r0, #4]
   d5fc4:	6085      	str	r5, [r0, #8]
   d5fc6:	4632      	mov	r2, r6
   d5fc8:	4629      	mov	r1, r5
   d5fca:	4604      	mov	r4, r0
   d5fcc:	300c      	adds	r0, #12
   d5fce:	f000 ffa0 	bl	d6f12 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5fd2:	462a      	mov	r2, r5
   d5fd4:	4629      	mov	r1, r5
   d5fd6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d5fda:	f7fe fecf 	bl	d4d7c <network_ready>
   d5fde:	b190      	cbz	r0, d6006 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d5fe0:	4632      	mov	r2, r6
   d5fe2:	4629      	mov	r1, r5
   d5fe4:	4668      	mov	r0, sp
   d5fe6:	f000 ff94 	bl	d6f12 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d5fea:	462a      	mov	r2, r5
   d5fec:	4669      	mov	r1, sp
   d5fee:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d5ff0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d5ff4:	f7fe fe1e 	bl	d4c34 <wlan_connected_info>
        if (r == 0) {
   d5ff8:	b920      	cbnz	r0, d6004 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d5ffa:	4669      	mov	r1, sp
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	f7ff ffb7 	bl	d5f70 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d6002:	e000      	b.n	d6006 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d6004:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d6006:	4620      	mov	r0, r4
   d6008:	b006      	add	sp, #24
   d600a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d600e:	bf00      	nop
   d6010:	000d7a5c 	.word	0x000d7a5c

000d6014 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6014:	4b02      	ldr	r3, [pc, #8]	; (d6020 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6016:	2204      	movs	r2, #4
   d6018:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d601a:	4a02      	ldr	r2, [pc, #8]	; (d6024 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d601c:	601a      	str	r2, [r3, #0]
   d601e:	4770      	bx	lr
   d6020:	2003e6e0 	.word	0x2003e6e0
   d6024:	000d7a28 	.word	0x000d7a28

000d6028 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6028:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d602a:	4b0c      	ldr	r3, [pc, #48]	; (d605c <serialEventRun+0x34>)
   d602c:	b133      	cbz	r3, d603c <serialEventRun+0x14>
   d602e:	f7ff fed9 	bl	d5de4 <_Z16_fetch_usbserialv>
   d6032:	6803      	ldr	r3, [r0, #0]
   d6034:	691b      	ldr	r3, [r3, #16]
   d6036:	4798      	blx	r3
   d6038:	2800      	cmp	r0, #0
   d603a:	dc09      	bgt.n	d6050 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d603c:	4b08      	ldr	r3, [pc, #32]	; (d6060 <serialEventRun+0x38>)
   d603e:	b163      	cbz	r3, d605a <serialEventRun+0x32>
   d6040:	f7ff fe4c 	bl	d5cdc <_Z22__fetch_global_Serial1v>
   d6044:	6803      	ldr	r3, [r0, #0]
   d6046:	691b      	ldr	r3, [r3, #16]
   d6048:	4798      	blx	r3
   d604a:	2800      	cmp	r0, #0
   d604c:	dc03      	bgt.n	d6056 <serialEventRun+0x2e>
   d604e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6050:	f3af 8000 	nop.w
   d6054:	e7f2      	b.n	d603c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6056:	f3af 8000 	nop.w
   d605a:	bd08      	pop	{r3, pc}
	...

000d6064 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6064:	b508      	push	{r3, lr}
	serialEventRun();
   d6066:	f7ff ffdf 	bl	d6028 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d606a:	f7fe fccb 	bl	d4a04 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d606e:	4b01      	ldr	r3, [pc, #4]	; (d6074 <_post_loop+0x10>)
   d6070:	6018      	str	r0, [r3, #0]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	2003e6ec 	.word	0x2003e6ec

000d6078 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6078:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d607a:	2300      	movs	r3, #0
   d607c:	9300      	str	r3, [sp, #0]
   d607e:	461a      	mov	r2, r3
   d6080:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6084:	f7fe fe20 	bl	d4cc8 <system_ctrl_set_result>
}
   d6088:	b003      	add	sp, #12
   d608a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6090 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6090:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6092:	8843      	ldrh	r3, [r0, #2]
   d6094:	2b0a      	cmp	r3, #10
   d6096:	d008      	beq.n	d60aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6098:	2b50      	cmp	r3, #80	; 0x50
   d609a:	d109      	bne.n	d60b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d609c:	4b09      	ldr	r3, [pc, #36]	; (d60c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d609e:	681b      	ldr	r3, [r3, #0]
   d60a0:	b13b      	cbz	r3, d60b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d60a2:	b003      	add	sp, #12
   d60a4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d60a8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d60aa:	f7ff ffe5 	bl	d6078 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d60ae:	e006      	b.n	d60be <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d60b0:	2300      	movs	r3, #0
   d60b2:	9300      	str	r3, [sp, #0]
   d60b4:	461a      	mov	r2, r3
   d60b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d60ba:	f7fe fe05 	bl	d4cc8 <system_ctrl_set_result>
        break;
    }
}
   d60be:	b003      	add	sp, #12
   d60c0:	f85d fb04 	ldr.w	pc, [sp], #4
   d60c4:	2003e6e8 	.word	0x2003e6e8

000d60c8 <module_user_init_hook>:

void module_user_init_hook()
{
   d60c8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d60ca:	f7fe fc8b 	bl	d49e4 <HAL_RNG_GetRandomNumber>
   d60ce:	4604      	mov	r4, r0
    srand(seed);
   d60d0:	f000 ff28 	bl	d6f24 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d60d4:	4b07      	ldr	r3, [pc, #28]	; (d60f4 <module_user_init_hook+0x2c>)
   d60d6:	b113      	cbz	r3, d60de <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d60d8:	4620      	mov	r0, r4
   d60da:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d60de:	2100      	movs	r1, #0
   d60e0:	4804      	ldr	r0, [pc, #16]	; (d60f4 <module_user_init_hook+0x2c>)
   d60e2:	f7fe fe2b 	bl	d4d3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60e6:	2100      	movs	r1, #0
   d60e8:	4803      	ldr	r0, [pc, #12]	; (d60f8 <module_user_init_hook+0x30>)
}
   d60ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60ee:	f7fe bde1 	b.w	d4cb4 <system_ctrl_set_app_request_handler>
   d60f2:	bf00      	nop
   d60f4:	00000000 	.word	0x00000000
   d60f8:	000d6091 	.word	0x000d6091

000d60fc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d60fc:	b510      	push	{r4, lr}
   d60fe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6100:	480f      	ldr	r0, [pc, #60]	; (d6140 <pinAvailable+0x44>)
   d6102:	f7ff fc87 	bl	d5a14 <_ZN8SPIClass9isEnabledEv>
   d6106:	b128      	cbz	r0, d6114 <pinAvailable+0x18>
   d6108:	f1a4 030b 	sub.w	r3, r4, #11
   d610c:	2b02      	cmp	r3, #2
   d610e:	d801      	bhi.n	d6114 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6110:	2000      	movs	r0, #0
   d6112:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6114:	f000 f83e 	bl	d6194 <_Z19__fetch_global_Wirev>
   d6118:	f7ff fa1e 	bl	d5558 <_ZN7TwoWire9isEnabledEv>
   d611c:	b108      	cbz	r0, d6122 <pinAvailable+0x26>
   d611e:	2c01      	cmp	r4, #1
   d6120:	d9f6      	bls.n	d6110 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6122:	f7ff fddb 	bl	d5cdc <_Z22__fetch_global_Serial1v>
   d6126:	f7ff fdd5 	bl	d5cd4 <_ZN11USARTSerial9isEnabledEv>
   d612a:	b118      	cbz	r0, d6134 <pinAvailable+0x38>
   d612c:	f1a4 0309 	sub.w	r3, r4, #9
   d6130:	2b01      	cmp	r3, #1
   d6132:	d9ed      	bls.n	d6110 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6134:	2c23      	cmp	r4, #35	; 0x23
   d6136:	bf8c      	ite	hi
   d6138:	2000      	movhi	r0, #0
   d613a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d613c:	bd10      	pop	{r4, pc}
   d613e:	bf00      	nop
   d6140:	2003e708 	.word	0x2003e708

000d6144 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6144:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6146:	b538      	push	{r3, r4, r5, lr}
   d6148:	4604      	mov	r4, r0
   d614a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d614c:	d80a      	bhi.n	d6164 <pinMode+0x20>
   d614e:	29ff      	cmp	r1, #255	; 0xff
   d6150:	d008      	beq.n	d6164 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6152:	f7ff ffd3 	bl	d60fc <pinAvailable>
   d6156:	b128      	cbz	r0, d6164 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6158:	4629      	mov	r1, r5
   d615a:	4620      	mov	r0, r4
}
   d615c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6160:	f7fe bc78 	b.w	d4a54 <HAL_Pin_Mode>
   d6164:	bd38      	pop	{r3, r4, r5, pc}

000d6166 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6166:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6168:	b510      	push	{r4, lr}
   d616a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d616c:	bf9c      	itt	ls
   d616e:	340e      	addls	r4, #14
   d6170:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6172:	4620      	mov	r0, r4
   d6174:	f7ff ffc2 	bl	d60fc <pinAvailable>
   d6178:	b150      	cbz	r0, d6190 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d617a:	2103      	movs	r1, #3
   d617c:	4620      	mov	r0, r4
   d617e:	f7fe fc61 	bl	d4a44 <HAL_Validate_Pin_Function>
   d6182:	2803      	cmp	r0, #3
   d6184:	d104      	bne.n	d6190 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6186:	4620      	mov	r0, r4
}
   d6188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d618c:	f7fe bc7a 	b.w	d4a84 <HAL_ADC_Read>
}
   d6190:	2000      	movs	r0, #0
   d6192:	bd10      	pop	{r4, pc}

000d6194 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6194:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6196:	4d0b      	ldr	r5, [pc, #44]	; (d61c4 <_Z19__fetch_global_Wirev+0x30>)
   d6198:	6829      	ldr	r1, [r5, #0]
   d619a:	f011 0401 	ands.w	r4, r1, #1
   d619e:	d10f      	bne.n	d61c0 <_Z19__fetch_global_Wirev+0x2c>
   d61a0:	4628      	mov	r0, r5
   d61a2:	f7fd ff7e 	bl	d40a2 <__cxa_guard_acquire>
   d61a6:	b158      	cbz	r0, d61c0 <_Z19__fetch_global_Wirev+0x2c>
   d61a8:	4621      	mov	r1, r4
   d61aa:	4807      	ldr	r0, [pc, #28]	; (d61c8 <_Z19__fetch_global_Wirev+0x34>)
   d61ac:	f7ff f9c2 	bl	d5534 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d61b0:	4628      	mov	r0, r5
   d61b2:	f7fd ff7b 	bl	d40ac <__cxa_guard_release>
   d61b6:	4a05      	ldr	r2, [pc, #20]	; (d61cc <_Z19__fetch_global_Wirev+0x38>)
   d61b8:	4905      	ldr	r1, [pc, #20]	; (d61d0 <_Z19__fetch_global_Wirev+0x3c>)
   d61ba:	4803      	ldr	r0, [pc, #12]	; (d61c8 <_Z19__fetch_global_Wirev+0x34>)
   d61bc:	f000 f82c 	bl	d6218 <__aeabi_atexit>
	return wire;
}
   d61c0:	4801      	ldr	r0, [pc, #4]	; (d61c8 <_Z19__fetch_global_Wirev+0x34>)
   d61c2:	bd38      	pop	{r3, r4, r5, pc}
   d61c4:	2003e6f0 	.word	0x2003e6f0
   d61c8:	2003e6f4 	.word	0x2003e6f4
   d61cc:	2003e30c 	.word	0x2003e30c
   d61d0:	000d54dd 	.word	0x000d54dd

000d61d4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61d4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d61d6:	4c0c      	ldr	r4, [pc, #48]	; (d6208 <_GLOBAL__sub_I_SPI+0x34>)
   d61d8:	4e0c      	ldr	r6, [pc, #48]	; (d620c <_GLOBAL__sub_I_SPI+0x38>)
   d61da:	4d0d      	ldr	r5, [pc, #52]	; (d6210 <_GLOBAL__sub_I_SPI+0x3c>)
   d61dc:	2100      	movs	r1, #0
   d61de:	4620      	mov	r0, r4
   d61e0:	f7ff fc04 	bl	d59ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61e4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61e6:	4c0b      	ldr	r4, [pc, #44]	; (d6214 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d61e8:	4632      	mov	r2, r6
   d61ea:	4629      	mov	r1, r5
   d61ec:	f000 f814 	bl	d6218 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61f0:	2101      	movs	r1, #1
   d61f2:	4620      	mov	r0, r4
   d61f4:	f7ff fbfa 	bl	d59ec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61f8:	4632      	mov	r2, r6
   d61fa:	4629      	mov	r1, r5
   d61fc:	4620      	mov	r0, r4
   d61fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6202:	f000 b809 	b.w	d6218 <__aeabi_atexit>
   d6206:	bf00      	nop
   d6208:	2003e708 	.word	0x2003e708
   d620c:	2003e30c 	.word	0x2003e30c
   d6210:	000d59dd 	.word	0x000d59dd
   d6214:	2003e718 	.word	0x2003e718

000d6218 <__aeabi_atexit>:
   d6218:	460b      	mov	r3, r1
   d621a:	4601      	mov	r1, r0
   d621c:	4618      	mov	r0, r3
   d621e:	f000 bd67 	b.w	d6cf0 <__cxa_atexit>

000d6222 <_ZdlPvj>:
   d6222:	f7fd bf3a 	b.w	d409a <_ZdlPv>

000d6226 <_ZSt25__throw_bad_function_callv>:
   d6226:	b508      	push	{r3, lr}
   d6228:	f7fe fe08 	bl	d4e3c <abort>

000d622c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d622c:	4b24      	ldr	r3, [pc, #144]	; (d62c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d622e:	681a      	ldr	r2, [r3, #0]
   d6230:	07d0      	lsls	r0, r2, #31
   d6232:	bf5c      	itt	pl
   d6234:	2201      	movpl	r2, #1
   d6236:	601a      	strpl	r2, [r3, #0]
   d6238:	4b22      	ldr	r3, [pc, #136]	; (d62c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d623a:	681a      	ldr	r2, [r3, #0]
   d623c:	07d1      	lsls	r1, r2, #31
   d623e:	bf5c      	itt	pl
   d6240:	2201      	movpl	r2, #1
   d6242:	601a      	strpl	r2, [r3, #0]
   d6244:	4b20      	ldr	r3, [pc, #128]	; (d62c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6246:	681a      	ldr	r2, [r3, #0]
   d6248:	07d2      	lsls	r2, r2, #31
   d624a:	bf5c      	itt	pl
   d624c:	2201      	movpl	r2, #1
   d624e:	601a      	strpl	r2, [r3, #0]
   d6250:	4b1e      	ldr	r3, [pc, #120]	; (d62cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d0      	lsls	r0, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b1c      	ldr	r3, [pc, #112]	; (d62d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d1      	lsls	r1, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b1a      	ldr	r3, [pc, #104]	; (d62d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d2      	lsls	r2, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b18      	ldr	r3, [pc, #96]	; (d62d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d0      	lsls	r0, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b16      	ldr	r3, [pc, #88]	; (d62dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d1      	lsls	r1, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b14      	ldr	r3, [pc, #80]	; (d62e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d2      	lsls	r2, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b12      	ldr	r3, [pc, #72]	; (d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d0      	lsls	r0, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b10      	ldr	r3, [pc, #64]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d1      	lsls	r1, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b0e      	ldr	r3, [pc, #56]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d2      	lsls	r2, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4770      	bx	lr
   d62be:	bf00      	nop
   d62c0:	2003e754 	.word	0x2003e754
   d62c4:	2003e750 	.word	0x2003e750
   d62c8:	2003e74c 	.word	0x2003e74c
   d62cc:	2003e748 	.word	0x2003e748
   d62d0:	2003e744 	.word	0x2003e744
   d62d4:	2003e740 	.word	0x2003e740
   d62d8:	2003e73c 	.word	0x2003e73c
   d62dc:	2003e738 	.word	0x2003e738
   d62e0:	2003e734 	.word	0x2003e734
   d62e4:	2003e730 	.word	0x2003e730
   d62e8:	2003e72c 	.word	0x2003e72c
   d62ec:	2003e728 	.word	0x2003e728

000d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d62f0:	4b18      	ldr	r3, [pc, #96]	; (d6354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d62f2:	681a      	ldr	r2, [r3, #0]
   d62f4:	07d1      	lsls	r1, r2, #31
   d62f6:	bf5c      	itt	pl
   d62f8:	2201      	movpl	r2, #1
   d62fa:	601a      	strpl	r2, [r3, #0]
   d62fc:	4b16      	ldr	r3, [pc, #88]	; (d6358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d62fe:	681a      	ldr	r2, [r3, #0]
   d6300:	07d2      	lsls	r2, r2, #31
   d6302:	bf5c      	itt	pl
   d6304:	2201      	movpl	r2, #1
   d6306:	601a      	strpl	r2, [r3, #0]
   d6308:	4b14      	ldr	r3, [pc, #80]	; (d635c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d630a:	681a      	ldr	r2, [r3, #0]
   d630c:	07d0      	lsls	r0, r2, #31
   d630e:	bf5c      	itt	pl
   d6310:	2201      	movpl	r2, #1
   d6312:	601a      	strpl	r2, [r3, #0]
   d6314:	4b12      	ldr	r3, [pc, #72]	; (d6360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6316:	681a      	ldr	r2, [r3, #0]
   d6318:	07d1      	lsls	r1, r2, #31
   d631a:	bf5c      	itt	pl
   d631c:	2201      	movpl	r2, #1
   d631e:	601a      	strpl	r2, [r3, #0]
   d6320:	4b10      	ldr	r3, [pc, #64]	; (d6364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6322:	681a      	ldr	r2, [r3, #0]
   d6324:	07d2      	lsls	r2, r2, #31
   d6326:	bf5c      	itt	pl
   d6328:	2201      	movpl	r2, #1
   d632a:	601a      	strpl	r2, [r3, #0]
   d632c:	4b0e      	ldr	r3, [pc, #56]	; (d6368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d632e:	681a      	ldr	r2, [r3, #0]
   d6330:	07d0      	lsls	r0, r2, #31
   d6332:	bf5c      	itt	pl
   d6334:	2201      	movpl	r2, #1
   d6336:	601a      	strpl	r2, [r3, #0]
   d6338:	4b0c      	ldr	r3, [pc, #48]	; (d636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d1      	lsls	r1, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b0a      	ldr	r3, [pc, #40]	; (d6370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d2      	lsls	r2, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4770      	bx	lr
   d6352:	bf00      	nop
   d6354:	2003e774 	.word	0x2003e774
   d6358:	2003e770 	.word	0x2003e770
   d635c:	2003e76c 	.word	0x2003e76c
   d6360:	2003e768 	.word	0x2003e768
   d6364:	2003e764 	.word	0x2003e764
   d6368:	2003e760 	.word	0x2003e760
   d636c:	2003e75c 	.word	0x2003e75c
   d6370:	2003e758 	.word	0x2003e758

000d6374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6374:	4b18      	ldr	r3, [pc, #96]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6376:	681a      	ldr	r2, [r3, #0]
   d6378:	07d1      	lsls	r1, r2, #31
   d637a:	bf5c      	itt	pl
   d637c:	2201      	movpl	r2, #1
   d637e:	601a      	strpl	r2, [r3, #0]
   d6380:	4b16      	ldr	r3, [pc, #88]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6382:	681a      	ldr	r2, [r3, #0]
   d6384:	07d2      	lsls	r2, r2, #31
   d6386:	bf5c      	itt	pl
   d6388:	2201      	movpl	r2, #1
   d638a:	601a      	strpl	r2, [r3, #0]
   d638c:	4b14      	ldr	r3, [pc, #80]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d638e:	681a      	ldr	r2, [r3, #0]
   d6390:	07d0      	lsls	r0, r2, #31
   d6392:	bf5c      	itt	pl
   d6394:	2201      	movpl	r2, #1
   d6396:	601a      	strpl	r2, [r3, #0]
   d6398:	4b12      	ldr	r3, [pc, #72]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d639a:	681a      	ldr	r2, [r3, #0]
   d639c:	07d1      	lsls	r1, r2, #31
   d639e:	bf5c      	itt	pl
   d63a0:	2201      	movpl	r2, #1
   d63a2:	601a      	strpl	r2, [r3, #0]
   d63a4:	4b10      	ldr	r3, [pc, #64]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	07d2      	lsls	r2, r2, #31
   d63aa:	bf5c      	itt	pl
   d63ac:	2201      	movpl	r2, #1
   d63ae:	601a      	strpl	r2, [r3, #0]
   d63b0:	4b0e      	ldr	r3, [pc, #56]	; (d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63b2:	681a      	ldr	r2, [r3, #0]
   d63b4:	07d0      	lsls	r0, r2, #31
   d63b6:	bf5c      	itt	pl
   d63b8:	2201      	movpl	r2, #1
   d63ba:	601a      	strpl	r2, [r3, #0]
   d63bc:	4b0c      	ldr	r3, [pc, #48]	; (d63f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d1      	lsls	r1, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4b0a      	ldr	r3, [pc, #40]	; (d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63ca:	681a      	ldr	r2, [r3, #0]
   d63cc:	07d2      	lsls	r2, r2, #31
   d63ce:	bf5c      	itt	pl
   d63d0:	2201      	movpl	r2, #1
   d63d2:	601a      	strpl	r2, [r3, #0]
   d63d4:	4770      	bx	lr
   d63d6:	bf00      	nop
   d63d8:	2003e794 	.word	0x2003e794
   d63dc:	2003e790 	.word	0x2003e790
   d63e0:	2003e78c 	.word	0x2003e78c
   d63e4:	2003e788 	.word	0x2003e788
   d63e8:	2003e784 	.word	0x2003e784
   d63ec:	2003e780 	.word	0x2003e780
   d63f0:	2003e77c 	.word	0x2003e77c
   d63f4:	2003e778 	.word	0x2003e778

000d63f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d63f8:	4b24      	ldr	r3, [pc, #144]	; (d648c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	07d0      	lsls	r0, r2, #31
   d63fe:	bf5c      	itt	pl
   d6400:	2201      	movpl	r2, #1
   d6402:	601a      	strpl	r2, [r3, #0]
   d6404:	4b22      	ldr	r3, [pc, #136]	; (d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6406:	681a      	ldr	r2, [r3, #0]
   d6408:	07d1      	lsls	r1, r2, #31
   d640a:	bf5c      	itt	pl
   d640c:	2201      	movpl	r2, #1
   d640e:	601a      	strpl	r2, [r3, #0]
   d6410:	4b20      	ldr	r3, [pc, #128]	; (d6494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6412:	681a      	ldr	r2, [r3, #0]
   d6414:	07d2      	lsls	r2, r2, #31
   d6416:	bf5c      	itt	pl
   d6418:	2201      	movpl	r2, #1
   d641a:	601a      	strpl	r2, [r3, #0]
   d641c:	4b1e      	ldr	r3, [pc, #120]	; (d6498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d0      	lsls	r0, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b1c      	ldr	r3, [pc, #112]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d1      	lsls	r1, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b1a      	ldr	r3, [pc, #104]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d2      	lsls	r2, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b18      	ldr	r3, [pc, #96]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d0      	lsls	r0, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4b16      	ldr	r3, [pc, #88]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d644e:	681a      	ldr	r2, [r3, #0]
   d6450:	07d1      	lsls	r1, r2, #31
   d6452:	bf5c      	itt	pl
   d6454:	2201      	movpl	r2, #1
   d6456:	601a      	strpl	r2, [r3, #0]
   d6458:	4b14      	ldr	r3, [pc, #80]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d645a:	681a      	ldr	r2, [r3, #0]
   d645c:	07d2      	lsls	r2, r2, #31
   d645e:	bf5c      	itt	pl
   d6460:	2201      	movpl	r2, #1
   d6462:	601a      	strpl	r2, [r3, #0]
   d6464:	4b12      	ldr	r3, [pc, #72]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6466:	681a      	ldr	r2, [r3, #0]
   d6468:	07d0      	lsls	r0, r2, #31
   d646a:	bf5c      	itt	pl
   d646c:	2201      	movpl	r2, #1
   d646e:	601a      	strpl	r2, [r3, #0]
   d6470:	4b10      	ldr	r3, [pc, #64]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6472:	681a      	ldr	r2, [r3, #0]
   d6474:	07d1      	lsls	r1, r2, #31
   d6476:	bf5c      	itt	pl
   d6478:	2201      	movpl	r2, #1
   d647a:	601a      	strpl	r2, [r3, #0]
   d647c:	4b0e      	ldr	r3, [pc, #56]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d647e:	681a      	ldr	r2, [r3, #0]
   d6480:	07d2      	lsls	r2, r2, #31
   d6482:	bf5c      	itt	pl
   d6484:	2201      	movpl	r2, #1
   d6486:	601a      	strpl	r2, [r3, #0]
   d6488:	4770      	bx	lr
   d648a:	bf00      	nop
   d648c:	2003e7c4 	.word	0x2003e7c4
   d6490:	2003e7c0 	.word	0x2003e7c0
   d6494:	2003e7bc 	.word	0x2003e7bc
   d6498:	2003e7b8 	.word	0x2003e7b8
   d649c:	2003e7b4 	.word	0x2003e7b4
   d64a0:	2003e7b0 	.word	0x2003e7b0
   d64a4:	2003e7ac 	.word	0x2003e7ac
   d64a8:	2003e7a8 	.word	0x2003e7a8
   d64ac:	2003e7a4 	.word	0x2003e7a4
   d64b0:	2003e7a0 	.word	0x2003e7a0
   d64b4:	2003e79c 	.word	0x2003e79c
   d64b8:	2003e798 	.word	0x2003e798

000d64bc <__aeabi_drsub>:
   d64bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d64c0:	e002      	b.n	d64c8 <__adddf3>
   d64c2:	bf00      	nop

000d64c4 <__aeabi_dsub>:
   d64c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d64c8 <__adddf3>:
   d64c8:	b530      	push	{r4, r5, lr}
   d64ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d64ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d64d2:	ea94 0f05 	teq	r4, r5
   d64d6:	bf08      	it	eq
   d64d8:	ea90 0f02 	teqeq	r0, r2
   d64dc:	bf1f      	itttt	ne
   d64de:	ea54 0c00 	orrsne.w	ip, r4, r0
   d64e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d64e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d64ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d64ee:	f000 80e2 	beq.w	d66b6 <__adddf3+0x1ee>
   d64f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d64f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d64fa:	bfb8      	it	lt
   d64fc:	426d      	neglt	r5, r5
   d64fe:	dd0c      	ble.n	d651a <__adddf3+0x52>
   d6500:	442c      	add	r4, r5
   d6502:	ea80 0202 	eor.w	r2, r0, r2
   d6506:	ea81 0303 	eor.w	r3, r1, r3
   d650a:	ea82 0000 	eor.w	r0, r2, r0
   d650e:	ea83 0101 	eor.w	r1, r3, r1
   d6512:	ea80 0202 	eor.w	r2, r0, r2
   d6516:	ea81 0303 	eor.w	r3, r1, r3
   d651a:	2d36      	cmp	r5, #54	; 0x36
   d651c:	bf88      	it	hi
   d651e:	bd30      	pophi	{r4, r5, pc}
   d6520:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6524:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6528:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d652c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6530:	d002      	beq.n	d6538 <__adddf3+0x70>
   d6532:	4240      	negs	r0, r0
   d6534:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6538:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d653c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6540:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6544:	d002      	beq.n	d654c <__adddf3+0x84>
   d6546:	4252      	negs	r2, r2
   d6548:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d654c:	ea94 0f05 	teq	r4, r5
   d6550:	f000 80a7 	beq.w	d66a2 <__adddf3+0x1da>
   d6554:	f1a4 0401 	sub.w	r4, r4, #1
   d6558:	f1d5 0e20 	rsbs	lr, r5, #32
   d655c:	db0d      	blt.n	d657a <__adddf3+0xb2>
   d655e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6562:	fa22 f205 	lsr.w	r2, r2, r5
   d6566:	1880      	adds	r0, r0, r2
   d6568:	f141 0100 	adc.w	r1, r1, #0
   d656c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6570:	1880      	adds	r0, r0, r2
   d6572:	fa43 f305 	asr.w	r3, r3, r5
   d6576:	4159      	adcs	r1, r3
   d6578:	e00e      	b.n	d6598 <__adddf3+0xd0>
   d657a:	f1a5 0520 	sub.w	r5, r5, #32
   d657e:	f10e 0e20 	add.w	lr, lr, #32
   d6582:	2a01      	cmp	r2, #1
   d6584:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6588:	bf28      	it	cs
   d658a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d658e:	fa43 f305 	asr.w	r3, r3, r5
   d6592:	18c0      	adds	r0, r0, r3
   d6594:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d659c:	d507      	bpl.n	d65ae <__adddf3+0xe6>
   d659e:	f04f 0e00 	mov.w	lr, #0
   d65a2:	f1dc 0c00 	rsbs	ip, ip, #0
   d65a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d65aa:	eb6e 0101 	sbc.w	r1, lr, r1
   d65ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d65b2:	d31b      	bcc.n	d65ec <__adddf3+0x124>
   d65b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d65b8:	d30c      	bcc.n	d65d4 <__adddf3+0x10c>
   d65ba:	0849      	lsrs	r1, r1, #1
   d65bc:	ea5f 0030 	movs.w	r0, r0, rrx
   d65c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d65c4:	f104 0401 	add.w	r4, r4, #1
   d65c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d65cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d65d0:	f080 809a 	bcs.w	d6708 <__adddf3+0x240>
   d65d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d65d8:	bf08      	it	eq
   d65da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d65de:	f150 0000 	adcs.w	r0, r0, #0
   d65e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d65e6:	ea41 0105 	orr.w	r1, r1, r5
   d65ea:	bd30      	pop	{r4, r5, pc}
   d65ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d65f0:	4140      	adcs	r0, r0
   d65f2:	eb41 0101 	adc.w	r1, r1, r1
   d65f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d65fa:	f1a4 0401 	sub.w	r4, r4, #1
   d65fe:	d1e9      	bne.n	d65d4 <__adddf3+0x10c>
   d6600:	f091 0f00 	teq	r1, #0
   d6604:	bf04      	itt	eq
   d6606:	4601      	moveq	r1, r0
   d6608:	2000      	moveq	r0, #0
   d660a:	fab1 f381 	clz	r3, r1
   d660e:	bf08      	it	eq
   d6610:	3320      	addeq	r3, #32
   d6612:	f1a3 030b 	sub.w	r3, r3, #11
   d6616:	f1b3 0220 	subs.w	r2, r3, #32
   d661a:	da0c      	bge.n	d6636 <__adddf3+0x16e>
   d661c:	320c      	adds	r2, #12
   d661e:	dd08      	ble.n	d6632 <__adddf3+0x16a>
   d6620:	f102 0c14 	add.w	ip, r2, #20
   d6624:	f1c2 020c 	rsb	r2, r2, #12
   d6628:	fa01 f00c 	lsl.w	r0, r1, ip
   d662c:	fa21 f102 	lsr.w	r1, r1, r2
   d6630:	e00c      	b.n	d664c <__adddf3+0x184>
   d6632:	f102 0214 	add.w	r2, r2, #20
   d6636:	bfd8      	it	le
   d6638:	f1c2 0c20 	rsble	ip, r2, #32
   d663c:	fa01 f102 	lsl.w	r1, r1, r2
   d6640:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6644:	bfdc      	itt	le
   d6646:	ea41 010c 	orrle.w	r1, r1, ip
   d664a:	4090      	lslle	r0, r2
   d664c:	1ae4      	subs	r4, r4, r3
   d664e:	bfa2      	ittt	ge
   d6650:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6654:	4329      	orrge	r1, r5
   d6656:	bd30      	popge	{r4, r5, pc}
   d6658:	ea6f 0404 	mvn.w	r4, r4
   d665c:	3c1f      	subs	r4, #31
   d665e:	da1c      	bge.n	d669a <__adddf3+0x1d2>
   d6660:	340c      	adds	r4, #12
   d6662:	dc0e      	bgt.n	d6682 <__adddf3+0x1ba>
   d6664:	f104 0414 	add.w	r4, r4, #20
   d6668:	f1c4 0220 	rsb	r2, r4, #32
   d666c:	fa20 f004 	lsr.w	r0, r0, r4
   d6670:	fa01 f302 	lsl.w	r3, r1, r2
   d6674:	ea40 0003 	orr.w	r0, r0, r3
   d6678:	fa21 f304 	lsr.w	r3, r1, r4
   d667c:	ea45 0103 	orr.w	r1, r5, r3
   d6680:	bd30      	pop	{r4, r5, pc}
   d6682:	f1c4 040c 	rsb	r4, r4, #12
   d6686:	f1c4 0220 	rsb	r2, r4, #32
   d668a:	fa20 f002 	lsr.w	r0, r0, r2
   d668e:	fa01 f304 	lsl.w	r3, r1, r4
   d6692:	ea40 0003 	orr.w	r0, r0, r3
   d6696:	4629      	mov	r1, r5
   d6698:	bd30      	pop	{r4, r5, pc}
   d669a:	fa21 f004 	lsr.w	r0, r1, r4
   d669e:	4629      	mov	r1, r5
   d66a0:	bd30      	pop	{r4, r5, pc}
   d66a2:	f094 0f00 	teq	r4, #0
   d66a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d66aa:	bf06      	itte	eq
   d66ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d66b0:	3401      	addeq	r4, #1
   d66b2:	3d01      	subne	r5, #1
   d66b4:	e74e      	b.n	d6554 <__adddf3+0x8c>
   d66b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d66ba:	bf18      	it	ne
   d66bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d66c0:	d029      	beq.n	d6716 <__adddf3+0x24e>
   d66c2:	ea94 0f05 	teq	r4, r5
   d66c6:	bf08      	it	eq
   d66c8:	ea90 0f02 	teqeq	r0, r2
   d66cc:	d005      	beq.n	d66da <__adddf3+0x212>
   d66ce:	ea54 0c00 	orrs.w	ip, r4, r0
   d66d2:	bf04      	itt	eq
   d66d4:	4619      	moveq	r1, r3
   d66d6:	4610      	moveq	r0, r2
   d66d8:	bd30      	pop	{r4, r5, pc}
   d66da:	ea91 0f03 	teq	r1, r3
   d66de:	bf1e      	ittt	ne
   d66e0:	2100      	movne	r1, #0
   d66e2:	2000      	movne	r0, #0
   d66e4:	bd30      	popne	{r4, r5, pc}
   d66e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d66ea:	d105      	bne.n	d66f8 <__adddf3+0x230>
   d66ec:	0040      	lsls	r0, r0, #1
   d66ee:	4149      	adcs	r1, r1
   d66f0:	bf28      	it	cs
   d66f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d66f6:	bd30      	pop	{r4, r5, pc}
   d66f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d66fc:	bf3c      	itt	cc
   d66fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6702:	bd30      	popcc	{r4, r5, pc}
   d6704:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6708:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d670c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6710:	f04f 0000 	mov.w	r0, #0
   d6714:	bd30      	pop	{r4, r5, pc}
   d6716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d671a:	bf1a      	itte	ne
   d671c:	4619      	movne	r1, r3
   d671e:	4610      	movne	r0, r2
   d6720:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6724:	bf1c      	itt	ne
   d6726:	460b      	movne	r3, r1
   d6728:	4602      	movne	r2, r0
   d672a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d672e:	bf06      	itte	eq
   d6730:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6734:	ea91 0f03 	teqeq	r1, r3
   d6738:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d673c:	bd30      	pop	{r4, r5, pc}
   d673e:	bf00      	nop

000d6740 <__aeabi_ui2d>:
   d6740:	f090 0f00 	teq	r0, #0
   d6744:	bf04      	itt	eq
   d6746:	2100      	moveq	r1, #0
   d6748:	4770      	bxeq	lr
   d674a:	b530      	push	{r4, r5, lr}
   d674c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6750:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6754:	f04f 0500 	mov.w	r5, #0
   d6758:	f04f 0100 	mov.w	r1, #0
   d675c:	e750      	b.n	d6600 <__adddf3+0x138>
   d675e:	bf00      	nop

000d6760 <__aeabi_i2d>:
   d6760:	f090 0f00 	teq	r0, #0
   d6764:	bf04      	itt	eq
   d6766:	2100      	moveq	r1, #0
   d6768:	4770      	bxeq	lr
   d676a:	b530      	push	{r4, r5, lr}
   d676c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6770:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6774:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6778:	bf48      	it	mi
   d677a:	4240      	negmi	r0, r0
   d677c:	f04f 0100 	mov.w	r1, #0
   d6780:	e73e      	b.n	d6600 <__adddf3+0x138>
   d6782:	bf00      	nop

000d6784 <__aeabi_f2d>:
   d6784:	0042      	lsls	r2, r0, #1
   d6786:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d678a:	ea4f 0131 	mov.w	r1, r1, rrx
   d678e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6792:	bf1f      	itttt	ne
   d6794:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6798:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d679c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d67a0:	4770      	bxne	lr
   d67a2:	f092 0f00 	teq	r2, #0
   d67a6:	bf14      	ite	ne
   d67a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67ac:	4770      	bxeq	lr
   d67ae:	b530      	push	{r4, r5, lr}
   d67b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d67b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d67b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d67bc:	e720      	b.n	d6600 <__adddf3+0x138>
   d67be:	bf00      	nop

000d67c0 <__aeabi_ul2d>:
   d67c0:	ea50 0201 	orrs.w	r2, r0, r1
   d67c4:	bf08      	it	eq
   d67c6:	4770      	bxeq	lr
   d67c8:	b530      	push	{r4, r5, lr}
   d67ca:	f04f 0500 	mov.w	r5, #0
   d67ce:	e00a      	b.n	d67e6 <__aeabi_l2d+0x16>

000d67d0 <__aeabi_l2d>:
   d67d0:	ea50 0201 	orrs.w	r2, r0, r1
   d67d4:	bf08      	it	eq
   d67d6:	4770      	bxeq	lr
   d67d8:	b530      	push	{r4, r5, lr}
   d67da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d67de:	d502      	bpl.n	d67e6 <__aeabi_l2d+0x16>
   d67e0:	4240      	negs	r0, r0
   d67e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d67e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d67f2:	f43f aedc 	beq.w	d65ae <__adddf3+0xe6>
   d67f6:	f04f 0203 	mov.w	r2, #3
   d67fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d67fe:	bf18      	it	ne
   d6800:	3203      	addne	r2, #3
   d6802:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6806:	bf18      	it	ne
   d6808:	3203      	addne	r2, #3
   d680a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d680e:	f1c2 0320 	rsb	r3, r2, #32
   d6812:	fa00 fc03 	lsl.w	ip, r0, r3
   d6816:	fa20 f002 	lsr.w	r0, r0, r2
   d681a:	fa01 fe03 	lsl.w	lr, r1, r3
   d681e:	ea40 000e 	orr.w	r0, r0, lr
   d6822:	fa21 f102 	lsr.w	r1, r1, r2
   d6826:	4414      	add	r4, r2
   d6828:	e6c1      	b.n	d65ae <__adddf3+0xe6>
   d682a:	bf00      	nop

000d682c <__aeabi_dmul>:
   d682c:	b570      	push	{r4, r5, r6, lr}
   d682e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d683a:	bf1d      	ittte	ne
   d683c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6840:	ea94 0f0c 	teqne	r4, ip
   d6844:	ea95 0f0c 	teqne	r5, ip
   d6848:	f000 f8de 	bleq	d6a08 <__aeabi_dmul+0x1dc>
   d684c:	442c      	add	r4, r5
   d684e:	ea81 0603 	eor.w	r6, r1, r3
   d6852:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6856:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d685a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d685e:	bf18      	it	ne
   d6860:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d686c:	d038      	beq.n	d68e0 <__aeabi_dmul+0xb4>
   d686e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6872:	f04f 0500 	mov.w	r5, #0
   d6876:	fbe1 e502 	umlal	lr, r5, r1, r2
   d687a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d687e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6882:	f04f 0600 	mov.w	r6, #0
   d6886:	fbe1 5603 	umlal	r5, r6, r1, r3
   d688a:	f09c 0f00 	teq	ip, #0
   d688e:	bf18      	it	ne
   d6890:	f04e 0e01 	orrne.w	lr, lr, #1
   d6894:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6898:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d689c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d68a0:	d204      	bcs.n	d68ac <__aeabi_dmul+0x80>
   d68a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d68a6:	416d      	adcs	r5, r5
   d68a8:	eb46 0606 	adc.w	r6, r6, r6
   d68ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d68b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d68b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d68b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d68bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d68c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d68c4:	bf88      	it	hi
   d68c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68ca:	d81e      	bhi.n	d690a <__aeabi_dmul+0xde>
   d68cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d68d0:	bf08      	it	eq
   d68d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d68d6:	f150 0000 	adcs.w	r0, r0, #0
   d68da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68de:	bd70      	pop	{r4, r5, r6, pc}
   d68e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d68e4:	ea46 0101 	orr.w	r1, r6, r1
   d68e8:	ea40 0002 	orr.w	r0, r0, r2
   d68ec:	ea81 0103 	eor.w	r1, r1, r3
   d68f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d68f4:	bfc2      	ittt	gt
   d68f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d68fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d68fe:	bd70      	popgt	{r4, r5, r6, pc}
   d6900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6904:	f04f 0e00 	mov.w	lr, #0
   d6908:	3c01      	subs	r4, #1
   d690a:	f300 80ab 	bgt.w	d6a64 <__aeabi_dmul+0x238>
   d690e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6912:	bfde      	ittt	le
   d6914:	2000      	movle	r0, #0
   d6916:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d691a:	bd70      	pople	{r4, r5, r6, pc}
   d691c:	f1c4 0400 	rsb	r4, r4, #0
   d6920:	3c20      	subs	r4, #32
   d6922:	da35      	bge.n	d6990 <__aeabi_dmul+0x164>
   d6924:	340c      	adds	r4, #12
   d6926:	dc1b      	bgt.n	d6960 <__aeabi_dmul+0x134>
   d6928:	f104 0414 	add.w	r4, r4, #20
   d692c:	f1c4 0520 	rsb	r5, r4, #32
   d6930:	fa00 f305 	lsl.w	r3, r0, r5
   d6934:	fa20 f004 	lsr.w	r0, r0, r4
   d6938:	fa01 f205 	lsl.w	r2, r1, r5
   d693c:	ea40 0002 	orr.w	r0, r0, r2
   d6940:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6948:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d694c:	fa21 f604 	lsr.w	r6, r1, r4
   d6950:	eb42 0106 	adc.w	r1, r2, r6
   d6954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6958:	bf08      	it	eq
   d695a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d695e:	bd70      	pop	{r4, r5, r6, pc}
   d6960:	f1c4 040c 	rsb	r4, r4, #12
   d6964:	f1c4 0520 	rsb	r5, r4, #32
   d6968:	fa00 f304 	lsl.w	r3, r0, r4
   d696c:	fa20 f005 	lsr.w	r0, r0, r5
   d6970:	fa01 f204 	lsl.w	r2, r1, r4
   d6974:	ea40 0002 	orr.w	r0, r0, r2
   d6978:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d697c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6980:	f141 0100 	adc.w	r1, r1, #0
   d6984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6988:	bf08      	it	eq
   d698a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d698e:	bd70      	pop	{r4, r5, r6, pc}
   d6990:	f1c4 0520 	rsb	r5, r4, #32
   d6994:	fa00 f205 	lsl.w	r2, r0, r5
   d6998:	ea4e 0e02 	orr.w	lr, lr, r2
   d699c:	fa20 f304 	lsr.w	r3, r0, r4
   d69a0:	fa01 f205 	lsl.w	r2, r1, r5
   d69a4:	ea43 0302 	orr.w	r3, r3, r2
   d69a8:	fa21 f004 	lsr.w	r0, r1, r4
   d69ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69b0:	fa21 f204 	lsr.w	r2, r1, r4
   d69b4:	ea20 0002 	bic.w	r0, r0, r2
   d69b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d69bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69c0:	bf08      	it	eq
   d69c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69c6:	bd70      	pop	{r4, r5, r6, pc}
   d69c8:	f094 0f00 	teq	r4, #0
   d69cc:	d10f      	bne.n	d69ee <__aeabi_dmul+0x1c2>
   d69ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d69d2:	0040      	lsls	r0, r0, #1
   d69d4:	eb41 0101 	adc.w	r1, r1, r1
   d69d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69dc:	bf08      	it	eq
   d69de:	3c01      	subeq	r4, #1
   d69e0:	d0f7      	beq.n	d69d2 <__aeabi_dmul+0x1a6>
   d69e2:	ea41 0106 	orr.w	r1, r1, r6
   d69e6:	f095 0f00 	teq	r5, #0
   d69ea:	bf18      	it	ne
   d69ec:	4770      	bxne	lr
   d69ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d69f2:	0052      	lsls	r2, r2, #1
   d69f4:	eb43 0303 	adc.w	r3, r3, r3
   d69f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d69fc:	bf08      	it	eq
   d69fe:	3d01      	subeq	r5, #1
   d6a00:	d0f7      	beq.n	d69f2 <__aeabi_dmul+0x1c6>
   d6a02:	ea43 0306 	orr.w	r3, r3, r6
   d6a06:	4770      	bx	lr
   d6a08:	ea94 0f0c 	teq	r4, ip
   d6a0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a10:	bf18      	it	ne
   d6a12:	ea95 0f0c 	teqne	r5, ip
   d6a16:	d00c      	beq.n	d6a32 <__aeabi_dmul+0x206>
   d6a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a1c:	bf18      	it	ne
   d6a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a22:	d1d1      	bne.n	d69c8 <__aeabi_dmul+0x19c>
   d6a24:	ea81 0103 	eor.w	r1, r1, r3
   d6a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a2c:	f04f 0000 	mov.w	r0, #0
   d6a30:	bd70      	pop	{r4, r5, r6, pc}
   d6a32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a36:	bf06      	itte	eq
   d6a38:	4610      	moveq	r0, r2
   d6a3a:	4619      	moveq	r1, r3
   d6a3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a40:	d019      	beq.n	d6a76 <__aeabi_dmul+0x24a>
   d6a42:	ea94 0f0c 	teq	r4, ip
   d6a46:	d102      	bne.n	d6a4e <__aeabi_dmul+0x222>
   d6a48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6a4c:	d113      	bne.n	d6a76 <__aeabi_dmul+0x24a>
   d6a4e:	ea95 0f0c 	teq	r5, ip
   d6a52:	d105      	bne.n	d6a60 <__aeabi_dmul+0x234>
   d6a54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6a58:	bf1c      	itt	ne
   d6a5a:	4610      	movne	r0, r2
   d6a5c:	4619      	movne	r1, r3
   d6a5e:	d10a      	bne.n	d6a76 <__aeabi_dmul+0x24a>
   d6a60:	ea81 0103 	eor.w	r1, r1, r3
   d6a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6a6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6a70:	f04f 0000 	mov.w	r0, #0
   d6a74:	bd70      	pop	{r4, r5, r6, pc}
   d6a76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6a7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6a7e:	bd70      	pop	{r4, r5, r6, pc}

000d6a80 <__aeabi_ddiv>:
   d6a80:	b570      	push	{r4, r5, r6, lr}
   d6a82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6a86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6a8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6a8e:	bf1d      	ittte	ne
   d6a90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6a94:	ea94 0f0c 	teqne	r4, ip
   d6a98:	ea95 0f0c 	teqne	r5, ip
   d6a9c:	f000 f8a7 	bleq	d6bee <__aeabi_ddiv+0x16e>
   d6aa0:	eba4 0405 	sub.w	r4, r4, r5
   d6aa4:	ea81 0e03 	eor.w	lr, r1, r3
   d6aa8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6aac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6ab0:	f000 8088 	beq.w	d6bc4 <__aeabi_ddiv+0x144>
   d6ab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ab8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6abc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6ac0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6ac4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6ac8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6acc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6ad0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6ad4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6ad8:	429d      	cmp	r5, r3
   d6ada:	bf08      	it	eq
   d6adc:	4296      	cmpeq	r6, r2
   d6ade:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6ae2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6ae6:	d202      	bcs.n	d6aee <__aeabi_ddiv+0x6e>
   d6ae8:	085b      	lsrs	r3, r3, #1
   d6aea:	ea4f 0232 	mov.w	r2, r2, rrx
   d6aee:	1ab6      	subs	r6, r6, r2
   d6af0:	eb65 0503 	sbc.w	r5, r5, r3
   d6af4:	085b      	lsrs	r3, r3, #1
   d6af6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6afa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6afe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b02:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b06:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b0a:	bf22      	ittt	cs
   d6b0c:	1ab6      	subcs	r6, r6, r2
   d6b0e:	4675      	movcs	r5, lr
   d6b10:	ea40 000c 	orrcs.w	r0, r0, ip
   d6b14:	085b      	lsrs	r3, r3, #1
   d6b16:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b22:	bf22      	ittt	cs
   d6b24:	1ab6      	subcs	r6, r6, r2
   d6b26:	4675      	movcs	r5, lr
   d6b28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6b2c:	085b      	lsrs	r3, r3, #1
   d6b2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b32:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b3a:	bf22      	ittt	cs
   d6b3c:	1ab6      	subcs	r6, r6, r2
   d6b3e:	4675      	movcs	r5, lr
   d6b40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6b44:	085b      	lsrs	r3, r3, #1
   d6b46:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b52:	bf22      	ittt	cs
   d6b54:	1ab6      	subcs	r6, r6, r2
   d6b56:	4675      	movcs	r5, lr
   d6b58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6b5c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6b60:	d018      	beq.n	d6b94 <__aeabi_ddiv+0x114>
   d6b62:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6b66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6b6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6b6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6b72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6b76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6b7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6b7e:	d1c0      	bne.n	d6b02 <__aeabi_ddiv+0x82>
   d6b80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b84:	d10b      	bne.n	d6b9e <__aeabi_ddiv+0x11e>
   d6b86:	ea41 0100 	orr.w	r1, r1, r0
   d6b8a:	f04f 0000 	mov.w	r0, #0
   d6b8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6b92:	e7b6      	b.n	d6b02 <__aeabi_ddiv+0x82>
   d6b94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b98:	bf04      	itt	eq
   d6b9a:	4301      	orreq	r1, r0
   d6b9c:	2000      	moveq	r0, #0
   d6b9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ba2:	bf88      	it	hi
   d6ba4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ba8:	f63f aeaf 	bhi.w	d690a <__aeabi_dmul+0xde>
   d6bac:	ebb5 0c03 	subs.w	ip, r5, r3
   d6bb0:	bf04      	itt	eq
   d6bb2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6bb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6bba:	f150 0000 	adcs.w	r0, r0, #0
   d6bbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6bc2:	bd70      	pop	{r4, r5, r6, pc}
   d6bc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6bc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6bcc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6bd0:	bfc2      	ittt	gt
   d6bd2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6bd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6bda:	bd70      	popgt	{r4, r5, r6, pc}
   d6bdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6be0:	f04f 0e00 	mov.w	lr, #0
   d6be4:	3c01      	subs	r4, #1
   d6be6:	e690      	b.n	d690a <__aeabi_dmul+0xde>
   d6be8:	ea45 0e06 	orr.w	lr, r5, r6
   d6bec:	e68d      	b.n	d690a <__aeabi_dmul+0xde>
   d6bee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6bf2:	ea94 0f0c 	teq	r4, ip
   d6bf6:	bf08      	it	eq
   d6bf8:	ea95 0f0c 	teqeq	r5, ip
   d6bfc:	f43f af3b 	beq.w	d6a76 <__aeabi_dmul+0x24a>
   d6c00:	ea94 0f0c 	teq	r4, ip
   d6c04:	d10a      	bne.n	d6c1c <__aeabi_ddiv+0x19c>
   d6c06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c0a:	f47f af34 	bne.w	d6a76 <__aeabi_dmul+0x24a>
   d6c0e:	ea95 0f0c 	teq	r5, ip
   d6c12:	f47f af25 	bne.w	d6a60 <__aeabi_dmul+0x234>
   d6c16:	4610      	mov	r0, r2
   d6c18:	4619      	mov	r1, r3
   d6c1a:	e72c      	b.n	d6a76 <__aeabi_dmul+0x24a>
   d6c1c:	ea95 0f0c 	teq	r5, ip
   d6c20:	d106      	bne.n	d6c30 <__aeabi_ddiv+0x1b0>
   d6c22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c26:	f43f aefd 	beq.w	d6a24 <__aeabi_dmul+0x1f8>
   d6c2a:	4610      	mov	r0, r2
   d6c2c:	4619      	mov	r1, r3
   d6c2e:	e722      	b.n	d6a76 <__aeabi_dmul+0x24a>
   d6c30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c34:	bf18      	it	ne
   d6c36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c3a:	f47f aec5 	bne.w	d69c8 <__aeabi_dmul+0x19c>
   d6c3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6c42:	f47f af0d 	bne.w	d6a60 <__aeabi_dmul+0x234>
   d6c46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6c4a:	f47f aeeb 	bne.w	d6a24 <__aeabi_dmul+0x1f8>
   d6c4e:	e712      	b.n	d6a76 <__aeabi_dmul+0x24a>

000d6c50 <__aeabi_d2f>:
   d6c50:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6c54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6c58:	bf24      	itt	cs
   d6c5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6c5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6c62:	d90d      	bls.n	d6c80 <__aeabi_d2f+0x30>
   d6c64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6c68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6c6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6c70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6c74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6c78:	bf08      	it	eq
   d6c7a:	f020 0001 	biceq.w	r0, r0, #1
   d6c7e:	4770      	bx	lr
   d6c80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6c84:	d121      	bne.n	d6cca <__aeabi_d2f+0x7a>
   d6c86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6c8a:	bfbc      	itt	lt
   d6c8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6c90:	4770      	bxlt	lr
   d6c92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c96:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6c9a:	f1c2 0218 	rsb	r2, r2, #24
   d6c9e:	f1c2 0c20 	rsb	ip, r2, #32
   d6ca2:	fa10 f30c 	lsls.w	r3, r0, ip
   d6ca6:	fa20 f002 	lsr.w	r0, r0, r2
   d6caa:	bf18      	it	ne
   d6cac:	f040 0001 	orrne.w	r0, r0, #1
   d6cb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6cb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6cb8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6cbc:	ea40 000c 	orr.w	r0, r0, ip
   d6cc0:	fa23 f302 	lsr.w	r3, r3, r2
   d6cc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6cc8:	e7cc      	b.n	d6c64 <__aeabi_d2f+0x14>
   d6cca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6cce:	d107      	bne.n	d6ce0 <__aeabi_d2f+0x90>
   d6cd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6cd4:	bf1e      	ittt	ne
   d6cd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6cda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6cde:	4770      	bxne	lr
   d6ce0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6ce4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6ce8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6cec:	4770      	bx	lr
   d6cee:	bf00      	nop

000d6cf0 <__cxa_atexit>:
   d6cf0:	b510      	push	{r4, lr}
   d6cf2:	4c05      	ldr	r4, [pc, #20]	; (d6d08 <__cxa_atexit+0x18>)
   d6cf4:	4613      	mov	r3, r2
   d6cf6:	b12c      	cbz	r4, d6d04 <__cxa_atexit+0x14>
   d6cf8:	460a      	mov	r2, r1
   d6cfa:	4601      	mov	r1, r0
   d6cfc:	2002      	movs	r0, #2
   d6cfe:	f3af 8000 	nop.w
   d6d02:	bd10      	pop	{r4, pc}
   d6d04:	4620      	mov	r0, r4
   d6d06:	bd10      	pop	{r4, pc}
   d6d08:	00000000 	.word	0x00000000

000d6d0c <localtime>:
   d6d0c:	b538      	push	{r3, r4, r5, lr}
   d6d0e:	4b07      	ldr	r3, [pc, #28]	; (d6d2c <localtime+0x20>)
   d6d10:	681c      	ldr	r4, [r3, #0]
   d6d12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d14:	4605      	mov	r5, r0
   d6d16:	b91b      	cbnz	r3, d6d20 <localtime+0x14>
   d6d18:	2024      	movs	r0, #36	; 0x24
   d6d1a:	f7fe f867 	bl	d4dec <malloc>
   d6d1e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6d20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6d22:	4628      	mov	r0, r5
   d6d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6d28:	f000 b802 	b.w	d6d30 <localtime_r>
   d6d2c:	2003e2bc 	.word	0x2003e2bc

000d6d30 <localtime_r>:
   d6d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d34:	460c      	mov	r4, r1
   d6d36:	4680      	mov	r8, r0
   d6d38:	f000 fc62 	bl	d7600 <__gettzinfo>
   d6d3c:	4621      	mov	r1, r4
   d6d3e:	4607      	mov	r7, r0
   d6d40:	4640      	mov	r0, r8
   d6d42:	f000 fc61 	bl	d7608 <gmtime_r>
   d6d46:	6946      	ldr	r6, [r0, #20]
   d6d48:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6d4c:	07b3      	lsls	r3, r6, #30
   d6d4e:	4604      	mov	r4, r0
   d6d50:	d105      	bne.n	d6d5e <localtime_r+0x2e>
   d6d52:	2264      	movs	r2, #100	; 0x64
   d6d54:	fb96 f3f2 	sdiv	r3, r6, r2
   d6d58:	fb02 6313 	mls	r3, r2, r3, r6
   d6d5c:	b94b      	cbnz	r3, d6d72 <localtime_r+0x42>
   d6d5e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6d62:	fb96 f3f5 	sdiv	r3, r6, r5
   d6d66:	fb05 6513 	mls	r5, r5, r3, r6
   d6d6a:	fab5 f385 	clz	r3, r5
   d6d6e:	095b      	lsrs	r3, r3, #5
   d6d70:	e000      	b.n	d6d74 <localtime_r+0x44>
   d6d72:	2301      	movs	r3, #1
   d6d74:	4a5f      	ldr	r2, [pc, #380]	; (d6ef4 <localtime_r+0x1c4>)
   d6d76:	2530      	movs	r5, #48	; 0x30
   d6d78:	fb05 2503 	mla	r5, r5, r3, r2
   d6d7c:	f000 fa74 	bl	d7268 <__tz_lock>
   d6d80:	f000 fa74 	bl	d726c <_tzset_unlocked>
   d6d84:	4b5c      	ldr	r3, [pc, #368]	; (d6ef8 <localtime_r+0x1c8>)
   d6d86:	681b      	ldr	r3, [r3, #0]
   d6d88:	b1f3      	cbz	r3, d6dc8 <localtime_r+0x98>
   d6d8a:	687b      	ldr	r3, [r7, #4]
   d6d8c:	429e      	cmp	r6, r3
   d6d8e:	d105      	bne.n	d6d9c <localtime_r+0x6c>
   d6d90:	6839      	ldr	r1, [r7, #0]
   d6d92:	f8d8 3000 	ldr.w	r3, [r8]
   d6d96:	69fa      	ldr	r2, [r7, #28]
   d6d98:	b941      	cbnz	r1, d6dac <localtime_r+0x7c>
   d6d9a:	e00a      	b.n	d6db2 <localtime_r+0x82>
   d6d9c:	4630      	mov	r0, r6
   d6d9e:	f000 f9bb 	bl	d7118 <__tzcalc_limits>
   d6da2:	2800      	cmp	r0, #0
   d6da4:	d1f4      	bne.n	d6d90 <localtime_r+0x60>
   d6da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6daa:	e00d      	b.n	d6dc8 <localtime_r+0x98>
   d6dac:	4293      	cmp	r3, r2
   d6dae:	db08      	blt.n	d6dc2 <localtime_r+0x92>
   d6db0:	e001      	b.n	d6db6 <localtime_r+0x86>
   d6db2:	4293      	cmp	r3, r2
   d6db4:	da07      	bge.n	d6dc6 <localtime_r+0x96>
   d6db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6db8:	4293      	cmp	r3, r2
   d6dba:	bfac      	ite	ge
   d6dbc:	2300      	movge	r3, #0
   d6dbe:	2301      	movlt	r3, #1
   d6dc0:	e002      	b.n	d6dc8 <localtime_r+0x98>
   d6dc2:	2300      	movs	r3, #0
   d6dc4:	e000      	b.n	d6dc8 <localtime_r+0x98>
   d6dc6:	2301      	movs	r3, #1
   d6dc8:	6223      	str	r3, [r4, #32]
   d6dca:	6a23      	ldr	r3, [r4, #32]
   d6dcc:	2b01      	cmp	r3, #1
   d6dce:	bf0c      	ite	eq
   d6dd0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6dd2:	6a39      	ldrne	r1, [r7, #32]
   d6dd4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6dd8:	203c      	movs	r0, #60	; 0x3c
   d6dda:	fb91 f6f3 	sdiv	r6, r1, r3
   d6dde:	fb03 1316 	mls	r3, r3, r6, r1
   d6de2:	6861      	ldr	r1, [r4, #4]
   d6de4:	fb93 f2f0 	sdiv	r2, r3, r0
   d6de8:	fb00 3012 	mls	r0, r0, r2, r3
   d6dec:	6823      	ldr	r3, [r4, #0]
   d6dee:	1a89      	subs	r1, r1, r2
   d6df0:	68a2      	ldr	r2, [r4, #8]
   d6df2:	6061      	str	r1, [r4, #4]
   d6df4:	1a1b      	subs	r3, r3, r0
   d6df6:	1b92      	subs	r2, r2, r6
   d6df8:	2b3b      	cmp	r3, #59	; 0x3b
   d6dfa:	6023      	str	r3, [r4, #0]
   d6dfc:	60a2      	str	r2, [r4, #8]
   d6dfe:	dd03      	ble.n	d6e08 <localtime_r+0xd8>
   d6e00:	3101      	adds	r1, #1
   d6e02:	6061      	str	r1, [r4, #4]
   d6e04:	3b3c      	subs	r3, #60	; 0x3c
   d6e06:	e004      	b.n	d6e12 <localtime_r+0xe2>
   d6e08:	2b00      	cmp	r3, #0
   d6e0a:	da03      	bge.n	d6e14 <localtime_r+0xe4>
   d6e0c:	3901      	subs	r1, #1
   d6e0e:	6061      	str	r1, [r4, #4]
   d6e10:	333c      	adds	r3, #60	; 0x3c
   d6e12:	6023      	str	r3, [r4, #0]
   d6e14:	6863      	ldr	r3, [r4, #4]
   d6e16:	2b3b      	cmp	r3, #59	; 0x3b
   d6e18:	dd03      	ble.n	d6e22 <localtime_r+0xf2>
   d6e1a:	3201      	adds	r2, #1
   d6e1c:	60a2      	str	r2, [r4, #8]
   d6e1e:	3b3c      	subs	r3, #60	; 0x3c
   d6e20:	e004      	b.n	d6e2c <localtime_r+0xfc>
   d6e22:	2b00      	cmp	r3, #0
   d6e24:	da03      	bge.n	d6e2e <localtime_r+0xfe>
   d6e26:	3a01      	subs	r2, #1
   d6e28:	60a2      	str	r2, [r4, #8]
   d6e2a:	333c      	adds	r3, #60	; 0x3c
   d6e2c:	6063      	str	r3, [r4, #4]
   d6e2e:	68a3      	ldr	r3, [r4, #8]
   d6e30:	2b17      	cmp	r3, #23
   d6e32:	dd22      	ble.n	d6e7a <localtime_r+0x14a>
   d6e34:	69e2      	ldr	r2, [r4, #28]
   d6e36:	3201      	adds	r2, #1
   d6e38:	61e2      	str	r2, [r4, #28]
   d6e3a:	69a2      	ldr	r2, [r4, #24]
   d6e3c:	3201      	adds	r2, #1
   d6e3e:	2a06      	cmp	r2, #6
   d6e40:	bfc8      	it	gt
   d6e42:	2200      	movgt	r2, #0
   d6e44:	61a2      	str	r2, [r4, #24]
   d6e46:	68e2      	ldr	r2, [r4, #12]
   d6e48:	3b18      	subs	r3, #24
   d6e4a:	3201      	adds	r2, #1
   d6e4c:	60a3      	str	r3, [r4, #8]
   d6e4e:	6923      	ldr	r3, [r4, #16]
   d6e50:	60e2      	str	r2, [r4, #12]
   d6e52:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6e56:	428a      	cmp	r2, r1
   d6e58:	dd46      	ble.n	d6ee8 <localtime_r+0x1b8>
   d6e5a:	3301      	adds	r3, #1
   d6e5c:	2b0c      	cmp	r3, #12
   d6e5e:	bf0c      	ite	eq
   d6e60:	6963      	ldreq	r3, [r4, #20]
   d6e62:	6123      	strne	r3, [r4, #16]
   d6e64:	eba2 0201 	sub.w	r2, r2, r1
   d6e68:	60e2      	str	r2, [r4, #12]
   d6e6a:	bf01      	itttt	eq
   d6e6c:	3301      	addeq	r3, #1
   d6e6e:	2200      	moveq	r2, #0
   d6e70:	6122      	streq	r2, [r4, #16]
   d6e72:	6163      	streq	r3, [r4, #20]
   d6e74:	bf08      	it	eq
   d6e76:	61e2      	streq	r2, [r4, #28]
   d6e78:	e036      	b.n	d6ee8 <localtime_r+0x1b8>
   d6e7a:	2b00      	cmp	r3, #0
   d6e7c:	da34      	bge.n	d6ee8 <localtime_r+0x1b8>
   d6e7e:	69e2      	ldr	r2, [r4, #28]
   d6e80:	3a01      	subs	r2, #1
   d6e82:	61e2      	str	r2, [r4, #28]
   d6e84:	69a2      	ldr	r2, [r4, #24]
   d6e86:	3a01      	subs	r2, #1
   d6e88:	bf48      	it	mi
   d6e8a:	2206      	movmi	r2, #6
   d6e8c:	61a2      	str	r2, [r4, #24]
   d6e8e:	68e2      	ldr	r2, [r4, #12]
   d6e90:	3318      	adds	r3, #24
   d6e92:	3a01      	subs	r2, #1
   d6e94:	60e2      	str	r2, [r4, #12]
   d6e96:	60a3      	str	r3, [r4, #8]
   d6e98:	bb32      	cbnz	r2, d6ee8 <localtime_r+0x1b8>
   d6e9a:	6923      	ldr	r3, [r4, #16]
   d6e9c:	3b01      	subs	r3, #1
   d6e9e:	d401      	bmi.n	d6ea4 <localtime_r+0x174>
   d6ea0:	6123      	str	r3, [r4, #16]
   d6ea2:	e01d      	b.n	d6ee0 <localtime_r+0x1b0>
   d6ea4:	230b      	movs	r3, #11
   d6ea6:	6123      	str	r3, [r4, #16]
   d6ea8:	6963      	ldr	r3, [r4, #20]
   d6eaa:	1e5a      	subs	r2, r3, #1
   d6eac:	f012 0f03 	tst.w	r2, #3
   d6eb0:	6162      	str	r2, [r4, #20]
   d6eb2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6eb6:	d105      	bne.n	d6ec4 <localtime_r+0x194>
   d6eb8:	2164      	movs	r1, #100	; 0x64
   d6eba:	fb93 f2f1 	sdiv	r2, r3, r1
   d6ebe:	fb01 3212 	mls	r2, r1, r2, r3
   d6ec2:	b94a      	cbnz	r2, d6ed8 <localtime_r+0x1a8>
   d6ec4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6ec8:	fb93 f2f1 	sdiv	r2, r3, r1
   d6ecc:	fb01 3312 	mls	r3, r1, r2, r3
   d6ed0:	fab3 f383 	clz	r3, r3
   d6ed4:	095b      	lsrs	r3, r3, #5
   d6ed6:	e000      	b.n	d6eda <localtime_r+0x1aa>
   d6ed8:	2301      	movs	r3, #1
   d6eda:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6ede:	61e3      	str	r3, [r4, #28]
   d6ee0:	6923      	ldr	r3, [r4, #16]
   d6ee2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6ee6:	60e3      	str	r3, [r4, #12]
   d6ee8:	f000 f9bf 	bl	d726a <__tz_unlock>
   d6eec:	4620      	mov	r0, r4
   d6eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ef2:	bf00      	nop
   d6ef4:	000d7bdc 	.word	0x000d7bdc
   d6ef8:	2003e7e4 	.word	0x2003e7e4

000d6efc <memcpy>:
   d6efc:	b510      	push	{r4, lr}
   d6efe:	1e43      	subs	r3, r0, #1
   d6f00:	440a      	add	r2, r1
   d6f02:	4291      	cmp	r1, r2
   d6f04:	d004      	beq.n	d6f10 <memcpy+0x14>
   d6f06:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f0e:	e7f8      	b.n	d6f02 <memcpy+0x6>
   d6f10:	bd10      	pop	{r4, pc}

000d6f12 <memset>:
   d6f12:	4402      	add	r2, r0
   d6f14:	4603      	mov	r3, r0
   d6f16:	4293      	cmp	r3, r2
   d6f18:	d002      	beq.n	d6f20 <memset+0xe>
   d6f1a:	f803 1b01 	strb.w	r1, [r3], #1
   d6f1e:	e7fa      	b.n	d6f16 <memset+0x4>
   d6f20:	4770      	bx	lr
	...

000d6f24 <srand>:
   d6f24:	b538      	push	{r3, r4, r5, lr}
   d6f26:	4b12      	ldr	r3, [pc, #72]	; (d6f70 <srand+0x4c>)
   d6f28:	681c      	ldr	r4, [r3, #0]
   d6f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6f2c:	4605      	mov	r5, r0
   d6f2e:	b9d3      	cbnz	r3, d6f66 <srand+0x42>
   d6f30:	2018      	movs	r0, #24
   d6f32:	f7fd ff5b 	bl	d4dec <malloc>
   d6f36:	f243 330e 	movw	r3, #13070	; 0x330e
   d6f3a:	63a0      	str	r0, [r4, #56]	; 0x38
   d6f3c:	8003      	strh	r3, [r0, #0]
   d6f3e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6f42:	8043      	strh	r3, [r0, #2]
   d6f44:	f241 2334 	movw	r3, #4660	; 0x1234
   d6f48:	8083      	strh	r3, [r0, #4]
   d6f4a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6f4e:	80c3      	strh	r3, [r0, #6]
   d6f50:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6f54:	8103      	strh	r3, [r0, #8]
   d6f56:	2305      	movs	r3, #5
   d6f58:	8143      	strh	r3, [r0, #10]
   d6f5a:	230b      	movs	r3, #11
   d6f5c:	8183      	strh	r3, [r0, #12]
   d6f5e:	2201      	movs	r2, #1
   d6f60:	2300      	movs	r3, #0
   d6f62:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6f68:	2200      	movs	r2, #0
   d6f6a:	611d      	str	r5, [r3, #16]
   d6f6c:	615a      	str	r2, [r3, #20]
   d6f6e:	bd38      	pop	{r3, r4, r5, pc}
   d6f70:	2003e2bc 	.word	0x2003e2bc

000d6f74 <strcmp>:
   d6f74:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6f78:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f7c:	2a01      	cmp	r2, #1
   d6f7e:	bf28      	it	cs
   d6f80:	429a      	cmpcs	r2, r3
   d6f82:	d0f7      	beq.n	d6f74 <strcmp>
   d6f84:	1ad0      	subs	r0, r2, r3
   d6f86:	4770      	bx	lr

000d6f88 <strcpy>:
   d6f88:	4603      	mov	r3, r0
   d6f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f8e:	f803 2b01 	strb.w	r2, [r3], #1
   d6f92:	2a00      	cmp	r2, #0
   d6f94:	d1f9      	bne.n	d6f8a <strcpy+0x2>
   d6f96:	4770      	bx	lr

000d6f98 <strdup>:
   d6f98:	4b02      	ldr	r3, [pc, #8]	; (d6fa4 <strdup+0xc>)
   d6f9a:	4601      	mov	r1, r0
   d6f9c:	6818      	ldr	r0, [r3, #0]
   d6f9e:	f000 b803 	b.w	d6fa8 <_strdup_r>
   d6fa2:	bf00      	nop
   d6fa4:	2003e2bc 	.word	0x2003e2bc

000d6fa8 <_strdup_r>:
   d6fa8:	b570      	push	{r4, r5, r6, lr}
   d6faa:	4606      	mov	r6, r0
   d6fac:	4608      	mov	r0, r1
   d6fae:	460c      	mov	r4, r1
   d6fb0:	f000 f80d 	bl	d6fce <strlen>
   d6fb4:	1c45      	adds	r5, r0, #1
   d6fb6:	4629      	mov	r1, r5
   d6fb8:	4630      	mov	r0, r6
   d6fba:	f7fd ff47 	bl	d4e4c <_malloc_r>
   d6fbe:	4606      	mov	r6, r0
   d6fc0:	b118      	cbz	r0, d6fca <_strdup_r+0x22>
   d6fc2:	462a      	mov	r2, r5
   d6fc4:	4621      	mov	r1, r4
   d6fc6:	f7ff ff99 	bl	d6efc <memcpy>
   d6fca:	4630      	mov	r0, r6
   d6fcc:	bd70      	pop	{r4, r5, r6, pc}

000d6fce <strlen>:
   d6fce:	4603      	mov	r3, r0
   d6fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6fd4:	2a00      	cmp	r2, #0
   d6fd6:	d1fb      	bne.n	d6fd0 <strlen+0x2>
   d6fd8:	1a18      	subs	r0, r3, r0
   d6fda:	3801      	subs	r0, #1
   d6fdc:	4770      	bx	lr

000d6fde <strncmp>:
   d6fde:	b530      	push	{r4, r5, lr}
   d6fe0:	b182      	cbz	r2, d7004 <strncmp+0x26>
   d6fe2:	1e45      	subs	r5, r0, #1
   d6fe4:	3901      	subs	r1, #1
   d6fe6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6fea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6fee:	42a3      	cmp	r3, r4
   d6ff0:	d106      	bne.n	d7000 <strncmp+0x22>
   d6ff2:	43ec      	mvns	r4, r5
   d6ff4:	4414      	add	r4, r2
   d6ff6:	42e0      	cmn	r0, r4
   d6ff8:	d001      	beq.n	d6ffe <strncmp+0x20>
   d6ffa:	2b00      	cmp	r3, #0
   d6ffc:	d1f3      	bne.n	d6fe6 <strncmp+0x8>
   d6ffe:	461c      	mov	r4, r3
   d7000:	1b18      	subs	r0, r3, r4
   d7002:	bd30      	pop	{r4, r5, pc}
   d7004:	4610      	mov	r0, r2
   d7006:	bd30      	pop	{r4, r5, pc}

000d7008 <_strtoul_r>:
   d7008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d700c:	4680      	mov	r8, r0
   d700e:	483c      	ldr	r0, [pc, #240]	; (d7100 <_strtoul_r+0xf8>)
   d7010:	f8d0 9000 	ldr.w	r9, [r0]
   d7014:	460e      	mov	r6, r1
   d7016:	4635      	mov	r5, r6
   d7018:	f815 4b01 	ldrb.w	r4, [r5], #1
   d701c:	eb09 0004 	add.w	r0, r9, r4
   d7020:	7840      	ldrb	r0, [r0, #1]
   d7022:	f000 0008 	and.w	r0, r0, #8
   d7026:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d702a:	b108      	cbz	r0, d7030 <_strtoul_r+0x28>
   d702c:	462e      	mov	r6, r5
   d702e:	e7f2      	b.n	d7016 <_strtoul_r+0xe>
   d7030:	2c2d      	cmp	r4, #45	; 0x2d
   d7032:	d103      	bne.n	d703c <_strtoul_r+0x34>
   d7034:	1cb5      	adds	r5, r6, #2
   d7036:	7874      	ldrb	r4, [r6, #1]
   d7038:	2701      	movs	r7, #1
   d703a:	e003      	b.n	d7044 <_strtoul_r+0x3c>
   d703c:	2c2b      	cmp	r4, #43	; 0x2b
   d703e:	bf04      	itt	eq
   d7040:	7874      	ldrbeq	r4, [r6, #1]
   d7042:	1cb5      	addeq	r5, r6, #2
   d7044:	b113      	cbz	r3, d704c <_strtoul_r+0x44>
   d7046:	2b10      	cmp	r3, #16
   d7048:	d10a      	bne.n	d7060 <_strtoul_r+0x58>
   d704a:	e053      	b.n	d70f4 <_strtoul_r+0xec>
   d704c:	2c30      	cmp	r4, #48	; 0x30
   d704e:	d14f      	bne.n	d70f0 <_strtoul_r+0xe8>
   d7050:	7828      	ldrb	r0, [r5, #0]
   d7052:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7056:	2858      	cmp	r0, #88	; 0x58
   d7058:	d145      	bne.n	d70e6 <_strtoul_r+0xde>
   d705a:	786c      	ldrb	r4, [r5, #1]
   d705c:	2310      	movs	r3, #16
   d705e:	3502      	adds	r5, #2
   d7060:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7064:	2600      	movs	r6, #0
   d7066:	fbbc fcf3 	udiv	ip, ip, r3
   d706a:	fb03 fa0c 	mul.w	sl, r3, ip
   d706e:	ea6f 0a0a 	mvn.w	sl, sl
   d7072:	4630      	mov	r0, r6
   d7074:	eb09 0e04 	add.w	lr, r9, r4
   d7078:	f89e e001 	ldrb.w	lr, [lr, #1]
   d707c:	f01e 0f04 	tst.w	lr, #4
   d7080:	d001      	beq.n	d7086 <_strtoul_r+0x7e>
   d7082:	3c30      	subs	r4, #48	; 0x30
   d7084:	e00b      	b.n	d709e <_strtoul_r+0x96>
   d7086:	f01e 0e03 	ands.w	lr, lr, #3
   d708a:	d01a      	beq.n	d70c2 <_strtoul_r+0xba>
   d708c:	f1be 0f01 	cmp.w	lr, #1
   d7090:	bf0c      	ite	eq
   d7092:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7096:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d709a:	ebce 0404 	rsb	r4, lr, r4
   d709e:	42a3      	cmp	r3, r4
   d70a0:	dd0f      	ble.n	d70c2 <_strtoul_r+0xba>
   d70a2:	2e00      	cmp	r6, #0
   d70a4:	db08      	blt.n	d70b8 <_strtoul_r+0xb0>
   d70a6:	4560      	cmp	r0, ip
   d70a8:	d806      	bhi.n	d70b8 <_strtoul_r+0xb0>
   d70aa:	d101      	bne.n	d70b0 <_strtoul_r+0xa8>
   d70ac:	4554      	cmp	r4, sl
   d70ae:	dc03      	bgt.n	d70b8 <_strtoul_r+0xb0>
   d70b0:	fb03 4000 	mla	r0, r3, r0, r4
   d70b4:	2601      	movs	r6, #1
   d70b6:	e001      	b.n	d70bc <_strtoul_r+0xb4>
   d70b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d70bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d70c0:	e7d8      	b.n	d7074 <_strtoul_r+0x6c>
   d70c2:	2e00      	cmp	r6, #0
   d70c4:	da07      	bge.n	d70d6 <_strtoul_r+0xce>
   d70c6:	2322      	movs	r3, #34	; 0x22
   d70c8:	f8c8 3000 	str.w	r3, [r8]
   d70cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d70d0:	b92a      	cbnz	r2, d70de <_strtoul_r+0xd6>
   d70d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70d6:	b107      	cbz	r7, d70da <_strtoul_r+0xd2>
   d70d8:	4240      	negs	r0, r0
   d70da:	b172      	cbz	r2, d70fa <_strtoul_r+0xf2>
   d70dc:	b106      	cbz	r6, d70e0 <_strtoul_r+0xd8>
   d70de:	1e69      	subs	r1, r5, #1
   d70e0:	6011      	str	r1, [r2, #0]
   d70e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70e6:	2430      	movs	r4, #48	; 0x30
   d70e8:	2b00      	cmp	r3, #0
   d70ea:	d1b9      	bne.n	d7060 <_strtoul_r+0x58>
   d70ec:	2308      	movs	r3, #8
   d70ee:	e7b7      	b.n	d7060 <_strtoul_r+0x58>
   d70f0:	230a      	movs	r3, #10
   d70f2:	e7b5      	b.n	d7060 <_strtoul_r+0x58>
   d70f4:	2c30      	cmp	r4, #48	; 0x30
   d70f6:	d0ab      	beq.n	d7050 <_strtoul_r+0x48>
   d70f8:	e7b2      	b.n	d7060 <_strtoul_r+0x58>
   d70fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70fe:	bf00      	nop
   d7100:	2003e258 	.word	0x2003e258

000d7104 <strtoul>:
   d7104:	4613      	mov	r3, r2
   d7106:	460a      	mov	r2, r1
   d7108:	4601      	mov	r1, r0
   d710a:	4802      	ldr	r0, [pc, #8]	; (d7114 <strtoul+0x10>)
   d710c:	6800      	ldr	r0, [r0, #0]
   d710e:	f7ff bf7b 	b.w	d7008 <_strtoul_r>
   d7112:	bf00      	nop
   d7114:	2003e2bc 	.word	0x2003e2bc

000d7118 <__tzcalc_limits>:
   d7118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d711c:	4604      	mov	r4, r0
   d711e:	f000 fa6f 	bl	d7600 <__gettzinfo>
   d7122:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7126:	429c      	cmp	r4, r3
   d7128:	f340 8096 	ble.w	d7258 <__tzcalc_limits+0x140>
   d712c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7130:	18e3      	adds	r3, r4, r3
   d7132:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7136:	109b      	asrs	r3, r3, #2
   d7138:	f240 156d 	movw	r5, #365	; 0x16d
   d713c:	fb05 3502 	mla	r5, r5, r2, r3
   d7140:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7144:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7148:	fb92 f3f3 	sdiv	r3, r2, r3
   d714c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7150:	442b      	add	r3, r5
   d7152:	18a5      	adds	r5, r4, r2
   d7154:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7158:	fb95 f5f2 	sdiv	r5, r5, r2
   d715c:	441d      	add	r5, r3
   d715e:	2364      	movs	r3, #100	; 0x64
   d7160:	fb94 f7f2 	sdiv	r7, r4, r2
   d7164:	fb94 f6f3 	sdiv	r6, r4, r3
   d7168:	fb02 4717 	mls	r7, r2, r7, r4
   d716c:	fb03 4616 	mls	r6, r3, r6, r4
   d7170:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7174:	fab7 fe87 	clz	lr, r7
   d7178:	9301      	str	r3, [sp, #4]
   d717a:	f004 0303 	and.w	r3, r4, #3
   d717e:	6044      	str	r4, [r0, #4]
   d7180:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7184:	4601      	mov	r1, r0
   d7186:	9300      	str	r3, [sp, #0]
   d7188:	f04f 0c07 	mov.w	ip, #7
   d718c:	7a0b      	ldrb	r3, [r1, #8]
   d718e:	2b4a      	cmp	r3, #74	; 0x4a
   d7190:	d10e      	bne.n	d71b0 <__tzcalc_limits+0x98>
   d7192:	694b      	ldr	r3, [r1, #20]
   d7194:	9a00      	ldr	r2, [sp, #0]
   d7196:	18ec      	adds	r4, r5, r3
   d7198:	b902      	cbnz	r2, d719c <__tzcalc_limits+0x84>
   d719a:	b906      	cbnz	r6, d719e <__tzcalc_limits+0x86>
   d719c:	b927      	cbnz	r7, d71a8 <__tzcalc_limits+0x90>
   d719e:	2b3b      	cmp	r3, #59	; 0x3b
   d71a0:	bfd4      	ite	le
   d71a2:	2300      	movle	r3, #0
   d71a4:	2301      	movgt	r3, #1
   d71a6:	e000      	b.n	d71aa <__tzcalc_limits+0x92>
   d71a8:	2300      	movs	r3, #0
   d71aa:	4423      	add	r3, r4
   d71ac:	3b01      	subs	r3, #1
   d71ae:	e03f      	b.n	d7230 <__tzcalc_limits+0x118>
   d71b0:	2b44      	cmp	r3, #68	; 0x44
   d71b2:	d102      	bne.n	d71ba <__tzcalc_limits+0xa2>
   d71b4:	694b      	ldr	r3, [r1, #20]
   d71b6:	442b      	add	r3, r5
   d71b8:	e03a      	b.n	d7230 <__tzcalc_limits+0x118>
   d71ba:	9b00      	ldr	r3, [sp, #0]
   d71bc:	b92b      	cbnz	r3, d71ca <__tzcalc_limits+0xb2>
   d71be:	2e00      	cmp	r6, #0
   d71c0:	bf0c      	ite	eq
   d71c2:	46f0      	moveq	r8, lr
   d71c4:	f04f 0801 	movne.w	r8, #1
   d71c8:	e000      	b.n	d71cc <__tzcalc_limits+0xb4>
   d71ca:	46f0      	mov	r8, lr
   d71cc:	4b24      	ldr	r3, [pc, #144]	; (d7260 <__tzcalc_limits+0x148>)
   d71ce:	68cc      	ldr	r4, [r1, #12]
   d71d0:	2230      	movs	r2, #48	; 0x30
   d71d2:	fb02 3808 	mla	r8, r2, r8, r3
   d71d6:	f1a8 0a04 	sub.w	sl, r8, #4
   d71da:	46a9      	mov	r9, r5
   d71dc:	2301      	movs	r3, #1
   d71de:	42a3      	cmp	r3, r4
   d71e0:	da04      	bge.n	d71ec <__tzcalc_limits+0xd4>
   d71e2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d71e6:	3301      	adds	r3, #1
   d71e8:	44d9      	add	r9, fp
   d71ea:	e7f8      	b.n	d71de <__tzcalc_limits+0xc6>
   d71ec:	f109 0304 	add.w	r3, r9, #4
   d71f0:	fb93 fbfc 	sdiv	fp, r3, ip
   d71f4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d71f8:	2c01      	cmp	r4, #1
   d71fa:	ebca 0a03 	rsb	sl, sl, r3
   d71fe:	694b      	ldr	r3, [r1, #20]
   d7200:	bfb8      	it	lt
   d7202:	2401      	movlt	r4, #1
   d7204:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7208:	ebb3 0a0a 	subs.w	sl, r3, sl
   d720c:	690b      	ldr	r3, [r1, #16]
   d720e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7212:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7216:	bf48      	it	mi
   d7218:	f10a 0a07 	addmi.w	sl, sl, #7
   d721c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7220:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7224:	4453      	add	r3, sl
   d7226:	42a3      	cmp	r3, r4
   d7228:	db01      	blt.n	d722e <__tzcalc_limits+0x116>
   d722a:	3b07      	subs	r3, #7
   d722c:	e7fb      	b.n	d7226 <__tzcalc_limits+0x10e>
   d722e:	444b      	add	r3, r9
   d7230:	698c      	ldr	r4, [r1, #24]
   d7232:	4a0c      	ldr	r2, [pc, #48]	; (d7264 <__tzcalc_limits+0x14c>)
   d7234:	fb02 4303 	mla	r3, r2, r3, r4
   d7238:	6a0c      	ldr	r4, [r1, #32]
   d723a:	4423      	add	r3, r4
   d723c:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7240:	9b01      	ldr	r3, [sp, #4]
   d7242:	4299      	cmp	r1, r3
   d7244:	d1a2      	bne.n	d718c <__tzcalc_limits+0x74>
   d7246:	69c3      	ldr	r3, [r0, #28]
   d7248:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d724a:	4293      	cmp	r3, r2
   d724c:	bfac      	ite	ge
   d724e:	2300      	movge	r3, #0
   d7250:	2301      	movlt	r3, #1
   d7252:	6003      	str	r3, [r0, #0]
   d7254:	2001      	movs	r0, #1
   d7256:	e000      	b.n	d725a <__tzcalc_limits+0x142>
   d7258:	2000      	movs	r0, #0
   d725a:	b003      	add	sp, #12
   d725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7260:	000d7bdc 	.word	0x000d7bdc
   d7264:	00015180 	.word	0x00015180

000d7268 <__tz_lock>:
   d7268:	4770      	bx	lr

000d726a <__tz_unlock>:
   d726a:	4770      	bx	lr

000d726c <_tzset_unlocked>:
   d726c:	4b01      	ldr	r3, [pc, #4]	; (d7274 <_tzset_unlocked+0x8>)
   d726e:	6818      	ldr	r0, [r3, #0]
   d7270:	f000 b802 	b.w	d7278 <_tzset_unlocked_r>
   d7274:	2003e2bc 	.word	0x2003e2bc

000d7278 <_tzset_unlocked_r>:
   d7278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d727c:	b08d      	sub	sp, #52	; 0x34
   d727e:	4607      	mov	r7, r0
   d7280:	f000 f9be 	bl	d7600 <__gettzinfo>
   d7284:	49b0      	ldr	r1, [pc, #704]	; (d7548 <_tzset_unlocked_r+0x2d0>)
   d7286:	4eb1      	ldr	r6, [pc, #708]	; (d754c <_tzset_unlocked_r+0x2d4>)
   d7288:	4604      	mov	r4, r0
   d728a:	4638      	mov	r0, r7
   d728c:	f000 f9b0 	bl	d75f0 <_getenv_r>
   d7290:	4605      	mov	r5, r0
   d7292:	b960      	cbnz	r0, d72ae <_tzset_unlocked_r+0x36>
   d7294:	4bae      	ldr	r3, [pc, #696]	; (d7550 <_tzset_unlocked_r+0x2d8>)
   d7296:	4aaf      	ldr	r2, [pc, #700]	; (d7554 <_tzset_unlocked_r+0x2dc>)
   d7298:	6018      	str	r0, [r3, #0]
   d729a:	4baf      	ldr	r3, [pc, #700]	; (d7558 <_tzset_unlocked_r+0x2e0>)
   d729c:	6018      	str	r0, [r3, #0]
   d729e:	4baf      	ldr	r3, [pc, #700]	; (d755c <_tzset_unlocked_r+0x2e4>)
   d72a0:	6830      	ldr	r0, [r6, #0]
   d72a2:	601a      	str	r2, [r3, #0]
   d72a4:	605a      	str	r2, [r3, #4]
   d72a6:	f7fd fda9 	bl	d4dfc <free>
   d72aa:	6035      	str	r5, [r6, #0]
   d72ac:	e148      	b.n	d7540 <_tzset_unlocked_r+0x2c8>
   d72ae:	6831      	ldr	r1, [r6, #0]
   d72b0:	b979      	cbnz	r1, d72d2 <_tzset_unlocked_r+0x5a>
   d72b2:	6830      	ldr	r0, [r6, #0]
   d72b4:	f7fd fda2 	bl	d4dfc <free>
   d72b8:	4628      	mov	r0, r5
   d72ba:	f7ff fe88 	bl	d6fce <strlen>
   d72be:	1c41      	adds	r1, r0, #1
   d72c0:	4638      	mov	r0, r7
   d72c2:	f7fd fdc3 	bl	d4e4c <_malloc_r>
   d72c6:	6030      	str	r0, [r6, #0]
   d72c8:	b148      	cbz	r0, d72de <_tzset_unlocked_r+0x66>
   d72ca:	4629      	mov	r1, r5
   d72cc:	f7ff fe5c 	bl	d6f88 <strcpy>
   d72d0:	e005      	b.n	d72de <_tzset_unlocked_r+0x66>
   d72d2:	f7ff fe4f 	bl	d6f74 <strcmp>
   d72d6:	2800      	cmp	r0, #0
   d72d8:	f000 8132 	beq.w	d7540 <_tzset_unlocked_r+0x2c8>
   d72dc:	e7e9      	b.n	d72b2 <_tzset_unlocked_r+0x3a>
   d72de:	782b      	ldrb	r3, [r5, #0]
   d72e0:	4a9f      	ldr	r2, [pc, #636]	; (d7560 <_tzset_unlocked_r+0x2e8>)
   d72e2:	49a0      	ldr	r1, [pc, #640]	; (d7564 <_tzset_unlocked_r+0x2ec>)
   d72e4:	2b3a      	cmp	r3, #58	; 0x3a
   d72e6:	bf08      	it	eq
   d72e8:	3501      	addeq	r5, #1
   d72ea:	ae0a      	add	r6, sp, #40	; 0x28
   d72ec:	4633      	mov	r3, r6
   d72ee:	4628      	mov	r0, r5
   d72f0:	f7fd fd94 	bl	d4e1c <siscanf>
   d72f4:	2800      	cmp	r0, #0
   d72f6:	f340 8123 	ble.w	d7540 <_tzset_unlocked_r+0x2c8>
   d72fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d72fc:	18ef      	adds	r7, r5, r3
   d72fe:	5ceb      	ldrb	r3, [r5, r3]
   d7300:	2b2d      	cmp	r3, #45	; 0x2d
   d7302:	d103      	bne.n	d730c <_tzset_unlocked_r+0x94>
   d7304:	3701      	adds	r7, #1
   d7306:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d730a:	e003      	b.n	d7314 <_tzset_unlocked_r+0x9c>
   d730c:	2b2b      	cmp	r3, #43	; 0x2b
   d730e:	bf08      	it	eq
   d7310:	3701      	addeq	r7, #1
   d7312:	2501      	movs	r5, #1
   d7314:	f10d 0a20 	add.w	sl, sp, #32
   d7318:	f10d 0b1e 	add.w	fp, sp, #30
   d731c:	f04f 0800 	mov.w	r8, #0
   d7320:	9603      	str	r6, [sp, #12]
   d7322:	f8cd a008 	str.w	sl, [sp, #8]
   d7326:	9601      	str	r6, [sp, #4]
   d7328:	f8cd b000 	str.w	fp, [sp]
   d732c:	4633      	mov	r3, r6
   d732e:	aa07      	add	r2, sp, #28
   d7330:	498d      	ldr	r1, [pc, #564]	; (d7568 <_tzset_unlocked_r+0x2f0>)
   d7332:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7336:	4638      	mov	r0, r7
   d7338:	f8ad 8020 	strh.w	r8, [sp, #32]
   d733c:	f7fd fd6e 	bl	d4e1c <siscanf>
   d7340:	4540      	cmp	r0, r8
   d7342:	f340 80fd 	ble.w	d7540 <_tzset_unlocked_r+0x2c8>
   d7346:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d734a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d734e:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7574 <_tzset_unlocked_r+0x2fc>
   d7352:	213c      	movs	r1, #60	; 0x3c
   d7354:	fb01 3302 	mla	r3, r1, r2, r3
   d7358:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d735c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7360:	fb01 3302 	mla	r3, r1, r2, r3
   d7364:	435d      	muls	r5, r3
   d7366:	6225      	str	r5, [r4, #32]
   d7368:	4d7c      	ldr	r5, [pc, #496]	; (d755c <_tzset_unlocked_r+0x2e4>)
   d736a:	4b7d      	ldr	r3, [pc, #500]	; (d7560 <_tzset_unlocked_r+0x2e8>)
   d736c:	602b      	str	r3, [r5, #0]
   d736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7370:	497c      	ldr	r1, [pc, #496]	; (d7564 <_tzset_unlocked_r+0x2ec>)
   d7372:	441f      	add	r7, r3
   d7374:	464a      	mov	r2, r9
   d7376:	4633      	mov	r3, r6
   d7378:	4638      	mov	r0, r7
   d737a:	f7fd fd4f 	bl	d4e1c <siscanf>
   d737e:	4540      	cmp	r0, r8
   d7380:	dc08      	bgt.n	d7394 <_tzset_unlocked_r+0x11c>
   d7382:	682b      	ldr	r3, [r5, #0]
   d7384:	606b      	str	r3, [r5, #4]
   d7386:	4b72      	ldr	r3, [pc, #456]	; (d7550 <_tzset_unlocked_r+0x2d8>)
   d7388:	6a22      	ldr	r2, [r4, #32]
   d738a:	601a      	str	r2, [r3, #0]
   d738c:	4b72      	ldr	r3, [pc, #456]	; (d7558 <_tzset_unlocked_r+0x2e0>)
   d738e:	f8c3 8000 	str.w	r8, [r3]
   d7392:	e0d5      	b.n	d7540 <_tzset_unlocked_r+0x2c8>
   d7394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7396:	f8c5 9004 	str.w	r9, [r5, #4]
   d739a:	18fd      	adds	r5, r7, r3
   d739c:	5cfb      	ldrb	r3, [r7, r3]
   d739e:	2b2d      	cmp	r3, #45	; 0x2d
   d73a0:	d103      	bne.n	d73aa <_tzset_unlocked_r+0x132>
   d73a2:	3501      	adds	r5, #1
   d73a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d73a8:	e003      	b.n	d73b2 <_tzset_unlocked_r+0x13a>
   d73aa:	2b2b      	cmp	r3, #43	; 0x2b
   d73ac:	bf08      	it	eq
   d73ae:	3501      	addeq	r5, #1
   d73b0:	2701      	movs	r7, #1
   d73b2:	2300      	movs	r3, #0
   d73b4:	f8ad 301c 	strh.w	r3, [sp, #28]
   d73b8:	f8ad 301e 	strh.w	r3, [sp, #30]
   d73bc:	f8ad 3020 	strh.w	r3, [sp, #32]
   d73c0:	930a      	str	r3, [sp, #40]	; 0x28
   d73c2:	9603      	str	r6, [sp, #12]
   d73c4:	f8cd a008 	str.w	sl, [sp, #8]
   d73c8:	9601      	str	r6, [sp, #4]
   d73ca:	f8cd b000 	str.w	fp, [sp]
   d73ce:	4633      	mov	r3, r6
   d73d0:	aa07      	add	r2, sp, #28
   d73d2:	4965      	ldr	r1, [pc, #404]	; (d7568 <_tzset_unlocked_r+0x2f0>)
   d73d4:	4628      	mov	r0, r5
   d73d6:	f7fd fd21 	bl	d4e1c <siscanf>
   d73da:	2800      	cmp	r0, #0
   d73dc:	dc04      	bgt.n	d73e8 <_tzset_unlocked_r+0x170>
   d73de:	6a23      	ldr	r3, [r4, #32]
   d73e0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d73e4:	63e3      	str	r3, [r4, #60]	; 0x3c
   d73e6:	e00e      	b.n	d7406 <_tzset_unlocked_r+0x18e>
   d73e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d73ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d73f0:	213c      	movs	r1, #60	; 0x3c
   d73f2:	fb01 3302 	mla	r3, r1, r2, r3
   d73f6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d73fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d73fe:	fb01 3302 	mla	r3, r1, r2, r3
   d7402:	435f      	muls	r7, r3
   d7404:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7408:	4627      	mov	r7, r4
   d740a:	441d      	add	r5, r3
   d740c:	f04f 0900 	mov.w	r9, #0
   d7410:	782b      	ldrb	r3, [r5, #0]
   d7412:	2b2c      	cmp	r3, #44	; 0x2c
   d7414:	bf08      	it	eq
   d7416:	3501      	addeq	r5, #1
   d7418:	f895 8000 	ldrb.w	r8, [r5]
   d741c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7420:	d126      	bne.n	d7470 <_tzset_unlocked_r+0x1f8>
   d7422:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7426:	9302      	str	r3, [sp, #8]
   d7428:	ab09      	add	r3, sp, #36	; 0x24
   d742a:	9300      	str	r3, [sp, #0]
   d742c:	9603      	str	r6, [sp, #12]
   d742e:	9601      	str	r6, [sp, #4]
   d7430:	4633      	mov	r3, r6
   d7432:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7436:	494d      	ldr	r1, [pc, #308]	; (d756c <_tzset_unlocked_r+0x2f4>)
   d7438:	4628      	mov	r0, r5
   d743a:	f7fd fcef 	bl	d4e1c <siscanf>
   d743e:	2803      	cmp	r0, #3
   d7440:	d17e      	bne.n	d7540 <_tzset_unlocked_r+0x2c8>
   d7442:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7446:	1e4b      	subs	r3, r1, #1
   d7448:	2b0b      	cmp	r3, #11
   d744a:	d879      	bhi.n	d7540 <_tzset_unlocked_r+0x2c8>
   d744c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7450:	1e53      	subs	r3, r2, #1
   d7452:	2b04      	cmp	r3, #4
   d7454:	d874      	bhi.n	d7540 <_tzset_unlocked_r+0x2c8>
   d7456:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d745a:	2b06      	cmp	r3, #6
   d745c:	d870      	bhi.n	d7540 <_tzset_unlocked_r+0x2c8>
   d745e:	f887 8008 	strb.w	r8, [r7, #8]
   d7462:	60f9      	str	r1, [r7, #12]
   d7464:	613a      	str	r2, [r7, #16]
   d7466:	617b      	str	r3, [r7, #20]
   d7468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d746a:	eb05 0803 	add.w	r8, r5, r3
   d746e:	e02a      	b.n	d74c6 <_tzset_unlocked_r+0x24e>
   d7470:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7474:	bf06      	itte	eq
   d7476:	3501      	addeq	r5, #1
   d7478:	4643      	moveq	r3, r8
   d747a:	2344      	movne	r3, #68	; 0x44
   d747c:	220a      	movs	r2, #10
   d747e:	a90b      	add	r1, sp, #44	; 0x2c
   d7480:	4628      	mov	r0, r5
   d7482:	9305      	str	r3, [sp, #20]
   d7484:	f7ff fe3e 	bl	d7104 <strtoul>
   d7488:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d748c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7490:	4545      	cmp	r5, r8
   d7492:	9b05      	ldr	r3, [sp, #20]
   d7494:	d114      	bne.n	d74c0 <_tzset_unlocked_r+0x248>
   d7496:	234d      	movs	r3, #77	; 0x4d
   d7498:	f1b9 0f00 	cmp.w	r9, #0
   d749c:	d107      	bne.n	d74ae <_tzset_unlocked_r+0x236>
   d749e:	7223      	strb	r3, [r4, #8]
   d74a0:	2303      	movs	r3, #3
   d74a2:	60e3      	str	r3, [r4, #12]
   d74a4:	2302      	movs	r3, #2
   d74a6:	6123      	str	r3, [r4, #16]
   d74a8:	f8c4 9014 	str.w	r9, [r4, #20]
   d74ac:	e00b      	b.n	d74c6 <_tzset_unlocked_r+0x24e>
   d74ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d74b2:	230b      	movs	r3, #11
   d74b4:	62a3      	str	r3, [r4, #40]	; 0x28
   d74b6:	2301      	movs	r3, #1
   d74b8:	62e3      	str	r3, [r4, #44]	; 0x2c
   d74ba:	2300      	movs	r3, #0
   d74bc:	6323      	str	r3, [r4, #48]	; 0x30
   d74be:	e002      	b.n	d74c6 <_tzset_unlocked_r+0x24e>
   d74c0:	b280      	uxth	r0, r0
   d74c2:	723b      	strb	r3, [r7, #8]
   d74c4:	6178      	str	r0, [r7, #20]
   d74c6:	2302      	movs	r3, #2
   d74c8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d74cc:	2300      	movs	r3, #0
   d74ce:	f8ad 301e 	strh.w	r3, [sp, #30]
   d74d2:	f8ad 3020 	strh.w	r3, [sp, #32]
   d74d6:	930a      	str	r3, [sp, #40]	; 0x28
   d74d8:	f898 3000 	ldrb.w	r3, [r8]
   d74dc:	2b2f      	cmp	r3, #47	; 0x2f
   d74de:	d10b      	bne.n	d74f8 <_tzset_unlocked_r+0x280>
   d74e0:	9603      	str	r6, [sp, #12]
   d74e2:	f8cd a008 	str.w	sl, [sp, #8]
   d74e6:	9601      	str	r6, [sp, #4]
   d74e8:	f8cd b000 	str.w	fp, [sp]
   d74ec:	4633      	mov	r3, r6
   d74ee:	aa07      	add	r2, sp, #28
   d74f0:	491f      	ldr	r1, [pc, #124]	; (d7570 <_tzset_unlocked_r+0x2f8>)
   d74f2:	4640      	mov	r0, r8
   d74f4:	f7fd fc92 	bl	d4e1c <siscanf>
   d74f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d74fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7500:	213c      	movs	r1, #60	; 0x3c
   d7502:	fb01 3302 	mla	r3, r1, r2, r3
   d7506:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d750a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d750e:	fb01 3302 	mla	r3, r1, r2, r3
   d7512:	61bb      	str	r3, [r7, #24]
   d7514:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7516:	f109 0901 	add.w	r9, r9, #1
   d751a:	f1b9 0f02 	cmp.w	r9, #2
   d751e:	4445      	add	r5, r8
   d7520:	f107 071c 	add.w	r7, r7, #28
   d7524:	f47f af74 	bne.w	d7410 <_tzset_unlocked_r+0x198>
   d7528:	6860      	ldr	r0, [r4, #4]
   d752a:	f7ff fdf5 	bl	d7118 <__tzcalc_limits>
   d752e:	4b08      	ldr	r3, [pc, #32]	; (d7550 <_tzset_unlocked_r+0x2d8>)
   d7530:	6a22      	ldr	r2, [r4, #32]
   d7532:	601a      	str	r2, [r3, #0]
   d7534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7536:	1a9b      	subs	r3, r3, r2
   d7538:	4a07      	ldr	r2, [pc, #28]	; (d7558 <_tzset_unlocked_r+0x2e0>)
   d753a:	bf18      	it	ne
   d753c:	2301      	movne	r3, #1
   d753e:	6013      	str	r3, [r2, #0]
   d7540:	b00d      	add	sp, #52	; 0x34
   d7542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7546:	bf00      	nop
   d7548:	000d7c3c 	.word	0x000d7c3c
   d754c:	2003e7e0 	.word	0x2003e7e0
   d7550:	2003e7e8 	.word	0x2003e7e8
   d7554:	000d7c3f 	.word	0x000d7c3f
   d7558:	2003e7e4 	.word	0x2003e7e4
   d755c:	2003e2c0 	.word	0x2003e2c0
   d7560:	2003e7d3 	.word	0x2003e7d3
   d7564:	000d7c43 	.word	0x000d7c43
   d7568:	000d7c66 	.word	0x000d7c66
   d756c:	000d7c52 	.word	0x000d7c52
   d7570:	000d7c65 	.word	0x000d7c65
   d7574:	2003e7c8 	.word	0x2003e7c8

000d7578 <_findenv_r>:
   d7578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d757c:	4607      	mov	r7, r0
   d757e:	468b      	mov	fp, r1
   d7580:	4690      	mov	r8, r2
   d7582:	f000 f8d9 	bl	d7738 <__env_lock>
   d7586:	4b19      	ldr	r3, [pc, #100]	; (d75ec <_findenv_r+0x74>)
   d7588:	681d      	ldr	r5, [r3, #0]
   d758a:	469a      	mov	sl, r3
   d758c:	b13d      	cbz	r5, d759e <_findenv_r+0x26>
   d758e:	465c      	mov	r4, fp
   d7590:	4623      	mov	r3, r4
   d7592:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7596:	b142      	cbz	r2, d75aa <_findenv_r+0x32>
   d7598:	2a3d      	cmp	r2, #61	; 0x3d
   d759a:	461c      	mov	r4, r3
   d759c:	d1f8      	bne.n	d7590 <_findenv_r+0x18>
   d759e:	4638      	mov	r0, r7
   d75a0:	f000 f8cb 	bl	d773a <__env_unlock>
   d75a4:	2000      	movs	r0, #0
   d75a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75aa:	ebcb 0404 	rsb	r4, fp, r4
   d75ae:	46a9      	mov	r9, r5
   d75b0:	f859 0b04 	ldr.w	r0, [r9], #4
   d75b4:	2800      	cmp	r0, #0
   d75b6:	d0f2      	beq.n	d759e <_findenv_r+0x26>
   d75b8:	4622      	mov	r2, r4
   d75ba:	4659      	mov	r1, fp
   d75bc:	f7ff fd0f 	bl	d6fde <strncmp>
   d75c0:	b988      	cbnz	r0, d75e6 <_findenv_r+0x6e>
   d75c2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d75c6:	191e      	adds	r6, r3, r4
   d75c8:	5d1b      	ldrb	r3, [r3, r4]
   d75ca:	2b3d      	cmp	r3, #61	; 0x3d
   d75cc:	d10b      	bne.n	d75e6 <_findenv_r+0x6e>
   d75ce:	f8da 3000 	ldr.w	r3, [sl]
   d75d2:	1aed      	subs	r5, r5, r3
   d75d4:	10ad      	asrs	r5, r5, #2
   d75d6:	4638      	mov	r0, r7
   d75d8:	f8c8 5000 	str.w	r5, [r8]
   d75dc:	f000 f8ad 	bl	d773a <__env_unlock>
   d75e0:	1c70      	adds	r0, r6, #1
   d75e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75e6:	464d      	mov	r5, r9
   d75e8:	e7e1      	b.n	d75ae <_findenv_r+0x36>
   d75ea:	bf00      	nop
   d75ec:	2003e308 	.word	0x2003e308

000d75f0 <_getenv_r>:
   d75f0:	b507      	push	{r0, r1, r2, lr}
   d75f2:	aa01      	add	r2, sp, #4
   d75f4:	f7ff ffc0 	bl	d7578 <_findenv_r>
   d75f8:	b003      	add	sp, #12
   d75fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7600 <__gettzinfo>:
   d7600:	4800      	ldr	r0, [pc, #0]	; (d7604 <__gettzinfo+0x4>)
   d7602:	4770      	bx	lr
   d7604:	2003e2c8 	.word	0x2003e2c8

000d7608 <gmtime_r>:
   d7608:	6802      	ldr	r2, [r0, #0]
   d760a:	4b47      	ldr	r3, [pc, #284]	; (d7728 <gmtime_r+0x120>)
   d760c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d760e:	fb92 f4f3 	sdiv	r4, r2, r3
   d7612:	fb03 2214 	mls	r2, r3, r4, r2
   d7616:	2a00      	cmp	r2, #0
   d7618:	bfbc      	itt	lt
   d761a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d761e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7622:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7626:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d762a:	fb92 f3f0 	sdiv	r3, r2, r0
   d762e:	fb00 2213 	mls	r2, r0, r3, r2
   d7632:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7636:	bfac      	ite	ge
   d7638:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d763c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7640:	608b      	str	r3, [r1, #8]
   d7642:	fb92 f3f0 	sdiv	r3, r2, r0
   d7646:	fb00 2213 	mls	r2, r0, r3, r2
   d764a:	604b      	str	r3, [r1, #4]
   d764c:	600a      	str	r2, [r1, #0]
   d764e:	2307      	movs	r3, #7
   d7650:	1ce2      	adds	r2, r4, #3
   d7652:	fb92 f3f3 	sdiv	r3, r2, r3
   d7656:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d765a:	1ad3      	subs	r3, r2, r3
   d765c:	618b      	str	r3, [r1, #24]
   d765e:	4b33      	ldr	r3, [pc, #204]	; (d772c <gmtime_r+0x124>)
   d7660:	4d33      	ldr	r5, [pc, #204]	; (d7730 <gmtime_r+0x128>)
   d7662:	fb94 f5f5 	sdiv	r5, r4, r5
   d7666:	fb03 4405 	mla	r4, r3, r5, r4
   d766a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d766e:	fbb4 f2f2 	udiv	r2, r4, r2
   d7672:	4422      	add	r2, r4
   d7674:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7678:	fbb4 f3f7 	udiv	r3, r4, r7
   d767c:	1ad2      	subs	r2, r2, r3
   d767e:	482d      	ldr	r0, [pc, #180]	; (d7734 <gmtime_r+0x12c>)
   d7680:	fbb4 f0f0 	udiv	r0, r4, r0
   d7684:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7688:	1a13      	subs	r3, r2, r0
   d768a:	fbb3 f6f6 	udiv	r6, r3, r6
   d768e:	4434      	add	r4, r6
   d7690:	f240 126d 	movw	r2, #365	; 0x16d
   d7694:	fbb3 f0f2 	udiv	r0, r3, r2
   d7698:	fbb3 f3f7 	udiv	r3, r3, r7
   d769c:	1ae3      	subs	r3, r4, r3
   d769e:	fb02 3310 	mls	r3, r2, r0, r3
   d76a2:	2499      	movs	r4, #153	; 0x99
   d76a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d76a8:	3202      	adds	r2, #2
   d76aa:	fbb2 f2f4 	udiv	r2, r2, r4
   d76ae:	2a0a      	cmp	r2, #10
   d76b0:	fb04 f402 	mul.w	r4, r4, r2
   d76b4:	f104 0602 	add.w	r6, r4, #2
   d76b8:	f04f 0405 	mov.w	r4, #5
   d76bc:	fbb6 f4f4 	udiv	r4, r6, r4
   d76c0:	bf34      	ite	cc
   d76c2:	2602      	movcc	r6, #2
   d76c4:	f06f 0609 	mvncs.w	r6, #9
   d76c8:	4416      	add	r6, r2
   d76ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d76ce:	fb02 0505 	mla	r5, r2, r5, r0
   d76d2:	1c5f      	adds	r7, r3, #1
   d76d4:	2e01      	cmp	r6, #1
   d76d6:	bf98      	it	ls
   d76d8:	3501      	addls	r5, #1
   d76da:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d76de:	eba7 0704 	sub.w	r7, r7, r4
   d76e2:	d302      	bcc.n	d76ea <gmtime_r+0xe2>
   d76e4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d76e8:	e014      	b.n	d7714 <gmtime_r+0x10c>
   d76ea:	0782      	lsls	r2, r0, #30
   d76ec:	d105      	bne.n	d76fa <gmtime_r+0xf2>
   d76ee:	2464      	movs	r4, #100	; 0x64
   d76f0:	fbb0 f2f4 	udiv	r2, r0, r4
   d76f4:	fb04 0212 	mls	r2, r4, r2, r0
   d76f8:	b94a      	cbnz	r2, d770e <gmtime_r+0x106>
   d76fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d76fe:	fbb0 f4f2 	udiv	r4, r0, r2
   d7702:	fb02 0014 	mls	r0, r2, r4, r0
   d7706:	fab0 f280 	clz	r2, r0
   d770a:	0952      	lsrs	r2, r2, #5
   d770c:	e000      	b.n	d7710 <gmtime_r+0x108>
   d770e:	2201      	movs	r2, #1
   d7710:	333b      	adds	r3, #59	; 0x3b
   d7712:	441a      	add	r2, r3
   d7714:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7718:	2300      	movs	r3, #0
   d771a:	61ca      	str	r2, [r1, #28]
   d771c:	614d      	str	r5, [r1, #20]
   d771e:	610e      	str	r6, [r1, #16]
   d7720:	60cf      	str	r7, [r1, #12]
   d7722:	620b      	str	r3, [r1, #32]
   d7724:	4608      	mov	r0, r1
   d7726:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7728:	00015180 	.word	0x00015180
   d772c:	fffdc54f 	.word	0xfffdc54f
   d7730:	00023ab1 	.word	0x00023ab1
   d7734:	00023ab0 	.word	0x00023ab0

000d7738 <__env_lock>:
   d7738:	4770      	bx	lr

000d773a <__env_unlock>:
   d773a:	4770      	bx	lr

000d773c <dynalib_user>:
   d773c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d774c:	0000 0000 6e6f 2500 302e 2566 0025 3325     ....on.%.0f%%.%3
   d775c:	312e 2066 0056 3325 312e 2066 6544 7267     .1f V.%3.1f Degr
   d776c:	6565 2073 0043 6554 706d 7265 7461 7275     ees C.Temperatur
   d777c:	0065 6563 736c 7569 0073 6552 656c 7361     e.celsius.Releas
   d778c:	0065 6953 6e67 6c61 4200 7461 6574 7972     e.Signal.Battery
   d779c:	7600 7265 6f62 6573 6f4d 6564 3100               .verboseMode.

000d77a9 <_ZL13releaseNumber>:
   d77a9:	2e31 3630 0000 0000                              1.06...

000d77b0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d77b8:	4e8b 000d 4e91 000d 4ebb 000d 4e9f 000d     .N...N...N...N..
   d77c8:	4e8d 000d                                   .N..

000d77cc <_ZTVN5spark13EthernetClassE>:
	...
   d77d4:	54bf 000d 54b5 000d 54ab 000d 54a1 000d     .T...T...T...T..
   d77e4:	5495 000d 5489 000d 547d 000d 5475 000d     .T...T..}T..uT..
   d77f4:	546b 000d 5461 000d 5825 000d               kT..aT..%X..

000d7800 <_ZTV7TwoWire>:
	...
   d7808:	54dd 000d 5527 000d 54ff 000d 54df 000d     .T..'U...T...T..
   d7818:	5507 000d 550f 000d 5517 000d 551f 000d     .U...U...U...U..

000d7828 <_ZTV9IPAddress>:
	...
   d7830:	5579 000d 5569 000d 556b 000d 0066 6e6c     yU..iU..kU..f.ln
   d7840:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d7850:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d7860:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d7870:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d7880:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d7890:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d78a0:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d78b0:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d78c0:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d78d0:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d78e0:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d78f0:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d7900:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d7910:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d7920 <_ZTVN5spark9MeshClassE>:
	...
   d7928:	56bb 000d 56b1 000d 56a7 000d 569d 000d     .V...V...V...V..
   d7938:	5691 000d 5685 000d 5679 000d 5671 000d     .V...V..yV..qV..
   d7948:	5667 000d 565d 000d 5825 000d               gV..]V..%X..

000d7954 <_ZTVN5spark12NetworkClassE>:
	...
   d795c:	57bd 000d 57c7 000d 57d1 000d 57db 000d     .W...W...W...W..
   d796c:	57e5 000d 57f1 000d 57fd 000d 5809 000d     .W...W...W...X..
   d797c:	5811 000d 581b 000d 5825 000d               .X...X..%X..

000d7988 <_ZTV8SPIClass>:
	...
   d7990:	59dd 000d 59df 000d 2b25 3330 3a64 3025     .Y...Y..%+03d:%0
   d79a0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d79b0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d79c0 <_ZTV11USARTSerial>:
	...
   d79c8:	5c25 000d 5c75 000d 5c83 000d 5905 000d     %\..u\...\...Y..
   d79d8:	5c39 000d 5c5b 000d 5c47 000d 5c6f 000d     9\..[\..G\..o\..
   d79e8:	5c27 000d 5c2b 000d                         '\..+\..

000d79f0 <_ZTV9USBSerial>:
	...
   d79f8:	5d2d 000d 5d7d 000d 5d8b 000d 5905 000d     -]..}]...]...Y..
   d7a08:	5d69 000d 5d2f 000d 5d45 000d 5d77 000d     i]../]..E]..w]..
   d7a18:	5d5b 000d 5d29 000d                         []..)]..

000d7a20 <_ZTVN5spark9WiFiClassE>:
	...
   d7a28:	5efd 000d 5ef3 000d 5ee9 000d 5e91 000d     .^...^...^...^..
   d7a38:	5edd 000d 5ed1 000d 5ec5 000d 5ebd 000d     .^...^...^...^..
   d7a48:	5eb3 000d 5ea9 000d 5825 000d               .^...^..%X..

000d7a54 <_ZTV10WiFiSignal>:
	...
   d7a5c:	5e31 000d 5e9b 000d 5e33 000d 5f3d 000d     1^...^..3^..=_..
   d7a6c:	5e39 000d 5f09 000d 5e65 000d               9^..._..e^..

000d7a78 <_ctype_>:
   d7a78:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7a88:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7a98:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7aa8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7ab8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7ac8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7ad8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7ae8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7af8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7b7c <__sf_fake_stdin>:
	...

000d7b9c <__sf_fake_stdout>:
	...

000d7bbc <__sf_fake_stderr>:
	...

000d7bdc <__month_lengths>:
   d7bdc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7bec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7bfc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7c0c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d7c1c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7c2c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7c3c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d7c4c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d7c5c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d7c6c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d7c78 <link_const_variable_data_end>:
   d7c78:	000d430d 	.word	0x000d430d
   d7c7c:	000d45a3 	.word	0x000d45a3
   d7c80:	000d4985 	.word	0x000d4985
   d7c84:	000d54c9 	.word	0x000d54c9
   d7c88:	000d564d 	.word	0x000d564d
   d7c8c:	000d5771 	.word	0x000d5771
   d7c90:	000d58f1 	.word	0x000d58f1
   d7c94:	000d59c1 	.word	0x000d59c1
   d7c98:	000d5b15 	.word	0x000d5b15
   d7c9c:	000d5c11 	.word	0x000d5c11
   d7ca0:	000d6015 	.word	0x000d6015
   d7ca4:	000d61d5 	.word	0x000d61d5
   d7ca8:	000d622d 	.word	0x000d622d
   d7cac:	000d62f1 	.word	0x000d62f1
   d7cb0:	000d6375 	.word	0x000d6375
   d7cb4:	000d63f9 	.word	0x000d63f9

000d7cb8 <link_constructors_end>:
	...
