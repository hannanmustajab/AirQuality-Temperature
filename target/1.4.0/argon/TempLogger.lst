
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/TempLogger/target/1.4.0/argon/TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000049b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018c20  2**0
                  CONTENTS
  4 .data         00000224  2003e098  000d89d0  0000e098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000534  2003e2bc  2003e2bc  0001e2bc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8bf4  000d8bf4  00018bf4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8c1c  000d8c1c  00018c1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fb905  00000000  00000000  00018c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013b47  00000000  00000000  00114525  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020f53  00000000  00000000  0012806c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028a8  00000000  00000000  00148fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b38  00000000  00000000  0014b867  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003889d  00000000  00000000  0015039f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00030edd  00000000  00000000  00188c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001040a2  00000000  00000000  001b9b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000da84  00000000  00000000  002bdbbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fc01 	bl	d7838 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fc06 	bl	d784e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e098 	.word	0x2003e098
   d404c:	000d89d0 	.word	0x000d89d0
   d4050:	2003e2bc 	.word	0x2003e2bc
   d4054:	2003e2bc 	.word	0x2003e2bc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fbe3 	bl	d6828 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d89cc 	.word	0x000d89cc
   d4084:	000d8984 	.word	0x000d8984

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bd3e 	b.w	d4b08 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa73 	bl	d4578 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bb95 	b.w	d67c4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b96d 	b.w	d5378 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b973 	b.w	d5388 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b971 	b.w	d5388 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d002      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40be:	e004      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c0:	6001      	str	r1, [r0, #0]
	      break;
   d40c2:	e002      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	b100      	cbz	r0, d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ca:	2000      	movs	r0, #0
   d40cc:	4770      	bx	lr

000d40ce <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40d0:	6804      	ldr	r4, [r0, #0]
   d40d2:	4668      	mov	r0, sp
   d40d4:	f002 f8a5 	bl	d6222 <_ZN6StringC1EOS_>
   d40d8:	4668      	mov	r0, sp
   d40da:	47a0      	blx	r4
   d40dc:	4604      	mov	r4, r0
   d40de:	4668      	mov	r0, sp
   d40e0:	f002 f8af 	bl	d6242 <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e4:	4620      	mov	r0, r4
   d40e6:	b004      	add	sp, #16
   d40e8:	bd10      	pop	{r4, pc}
	...

000d40ec <_Z12LowPowerMode6String>:
  }
  return 0;
}

bool LowPowerMode(String Command)
{
   d40ec:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ee:	4909      	ldr	r1, [pc, #36]	; (d4114 <_Z12LowPowerMode6String+0x28>)
   d40f0:	4605      	mov	r5, r0
   d40f2:	f002 f900 	bl	d62f6 <_ZNK6String6equalsEPKc>
  if (Command == "1")
   d40f6:	4604      	mov	r4, r0
   d40f8:	b118      	cbz	r0, d4102 <_Z12LowPowerMode6String+0x16>
  {
    lowPowerModeOn = true;                                                         // This sets the lowPowerModeOn to true 
   d40fa:	4b07      	ldr	r3, [pc, #28]	; (d4118 <_Z12LowPowerMode6String+0x2c>)
   d40fc:	2001      	movs	r0, #1
   d40fe:	7018      	strb	r0, [r3, #0]
    return 1;
   d4100:	bd38      	pop	{r3, r4, r5, pc}
   d4102:	4906      	ldr	r1, [pc, #24]	; (d411c <_Z12LowPowerMode6String+0x30>)
   d4104:	4628      	mov	r0, r5
   d4106:	f002 f8f6 	bl	d62f6 <_ZNK6String6equalsEPKc>
  }
  else if (Command == "0")
   d410a:	b110      	cbz	r0, d4112 <_Z12LowPowerMode6String+0x26>
  {
    lowPowerModeOn = false;
   d410c:	4b02      	ldr	r3, [pc, #8]	; (d4118 <_Z12LowPowerMode6String+0x2c>)
    return 1;
   d410e:	2001      	movs	r0, #1
    lowPowerModeOn = true;                                                         // This sets the lowPowerModeOn to true 
    return 1;
  }
  else if (Command == "0")
  {
    lowPowerModeOn = false;
   d4110:	701c      	strb	r4, [r3, #0]
    return 1;
  }
  else return 0;
   d4112:	bd38      	pop	{r3, r4, r5, pc}
   d4114:	000d84d4 	.word	0x000d84d4
   d4118:	2003e200 	.word	0x2003e200
   d411c:	000d81da 	.word	0x000d81da

000d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4120:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4122:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4126:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4128:	f88d 3000 	strb.w	r3, [sp]
   d412c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d412e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4130:	f001 fb06 	bl	d5740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4134:	4628      	mov	r0, r5
   d4136:	b003      	add	sp, #12
   d4138:	bd30      	pop	{r4, r5, pc}
   d413a:	0000      	movs	r0, r0
   d413c:	0000      	movs	r0, r0
	...

000d4140 <_Z16takeMeasurementsv>:
    } break; 
  }
}


bool takeMeasurements() {
   d4140:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
   d4142:	f002 f9b3 	bl	d64ac <_ZN9TimeClass3nowEv>
   d4146:	4b36      	ldr	r3, [pc, #216]	; (d4220 <_Z16takeMeasurementsv+0xe0>)
   d4148:	6018      	str	r0, [r3, #0]
  int currentMinutes = Time.minute();                                // So we only have to check once
   d414a:	f002 f9c1 	bl	d64d0 <_ZN9TimeClass6minuteEv>
  switch (currentMinutes) {
   d414e:	280f      	cmp	r0, #15
   d4150:	d00a      	beq.n	d4168 <_Z16takeMeasurementsv+0x28>
   d4152:	dd07      	ble.n	d4164 <_Z16takeMeasurementsv+0x24>
   d4154:	281e      	cmp	r0, #30
   d4156:	d003      	beq.n	d4160 <_Z16takeMeasurementsv+0x20>
   d4158:	282d      	cmp	r0, #45	; 0x2d
   d415a:	d103      	bne.n	d4164 <_Z16takeMeasurementsv+0x24>
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
      break; 
    case 45:
      reportCycle = 2;                                                // This is the third of the sample-only periods
   d415c:	2502      	movs	r5, #2
      break; 
   d415e:	e004      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
   d4160:	2501      	movs	r5, #1
   d4162:	e002      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
      break; 
    case 0:
      reportCycle = 3;                                                // This is the fourth of the sample-only periods
      break; 
    default:
      reportCycle = 3;  
   d4164:	2503      	movs	r5, #3
      break;                                                          // just in case
   d4166:	e000      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
  int currentMinutes = Time.minute();                                // So we only have to check once
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
   d4168:	2500      	movs	r5, #0
      reportCycle = 3;  
      break;                                                          // just in case
  }
  
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d416a:	4c2e      	ldr	r4, [pc, #184]	; (d4224 <_Z16takeMeasurementsv+0xe4>)

  // Temperature Measurements here
  sensor_data.temperatureInC = sht31.readTemperature();               // **** Have to use the SHT31 function to get this reading
   d416c:	482e      	ldr	r0, [pc, #184]	; (d4228 <_Z16takeMeasurementsv+0xe8>)
      reportCycle = 3;  
      break;                                                          // just in case
  }
  
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d416e:	2300      	movs	r3, #0
   d4170:	7023      	strb	r3, [r4, #0]

  // Temperature Measurements here
  sensor_data.temperatureInC = sht31.readTemperature();               // **** Have to use the SHT31 function to get this reading
   d4172:	f000 fe65 	bl	d4e40 <_ZN14Adafruit_SHT3115readTemperatureEv>
  temperatureInC = sht31.readTemperature(); 
   d4176:	482c      	ldr	r0, [pc, #176]	; (d4228 <_Z16takeMeasurementsv+0xe8>)
  
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;

  // Temperature Measurements here
  sensor_data.temperatureInC = sht31.readTemperature();               // **** Have to use the SHT31 function to get this reading
   d4178:	ed84 0a03 	vstr	s0, [r4, #12]
  temperatureInC = sht31.readTemperature(); 
   d417c:	f000 fe60 	bl	d4e40 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4180:	4b2a      	ldr	r3, [pc, #168]	; (d422c <_Z16takeMeasurementsv+0xec>)
  
  snprintf(temperatureString,sizeof(temperatureString), "%4.1fC", sensor_data.temperatureInC);  // *** C not %
   d4182:	68e0      	ldr	r0, [r4, #12]
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;

  // Temperature Measurements here
  sensor_data.temperatureInC = sht31.readTemperature();               // **** Have to use the SHT31 function to get this reading
  temperatureInC = sht31.readTemperature(); 
   d4184:	ed83 0a00 	vstr	s0, [r3]
  
  snprintf(temperatureString,sizeof(temperatureString), "%4.1fC", sensor_data.temperatureInC);  // *** C not %
   d4188:	f002 feb0 	bl	d6eec <__aeabi_f2d>
   d418c:	4a28      	ldr	r2, [pc, #160]	; (d4230 <_Z16takeMeasurementsv+0xf0>)
   d418e:	e9cd 0100 	strd	r0, r1, [sp]
   d4192:	2110      	movs	r1, #16
   d4194:	4827      	ldr	r0, [pc, #156]	; (d4234 <_Z16takeMeasurementsv+0xf4>)
   d4196:	f001 f90f 	bl	d53b8 <snprintf>

  // Humidity Measurements here

  sensor_data.humidity = sht31.readHumidity();                        //  Read and save the humidity levels
   d419a:	4823      	ldr	r0, [pc, #140]	; (d4228 <_Z16takeMeasurementsv+0xe8>)
   d419c:	f000 fe5e 	bl	d4e5c <_ZN14Adafruit_SHT3112readHumidityEv>
  humidityInPercent = sht31.readHumidity();
   d41a0:	4821      	ldr	r0, [pc, #132]	; (d4228 <_Z16takeMeasurementsv+0xe8>)
  
  snprintf(temperatureString,sizeof(temperatureString), "%4.1fC", sensor_data.temperatureInC);  // *** C not %

  // Humidity Measurements here

  sensor_data.humidity = sht31.readHumidity();                        //  Read and save the humidity levels
   d41a2:	ed84 0a04 	vstr	s0, [r4, #16]
  humidityInPercent = sht31.readHumidity();
   d41a6:	f000 fe59 	bl	d4e5c <_ZN14Adafruit_SHT3112readHumidityEv>
   d41aa:	4b23      	ldr	r3, [pc, #140]	; (d4238 <_Z16takeMeasurementsv+0xf8>)

  snprintf(humidityString,sizeof(humidityString),"%4.1f",sensor_data.humidity);
   d41ac:	6920      	ldr	r0, [r4, #16]
  snprintf(temperatureString,sizeof(temperatureString), "%4.1fC", sensor_data.temperatureInC);  // *** C not %

  // Humidity Measurements here

  sensor_data.humidity = sht31.readHumidity();                        //  Read and save the humidity levels
  humidityInPercent = sht31.readHumidity();
   d41ae:	ed83 0a00 	vstr	s0, [r3]

  snprintf(humidityString,sizeof(humidityString),"%4.1f",sensor_data.humidity);
   d41b2:	f002 fe9b 	bl	d6eec <__aeabi_f2d>
   d41b6:	4a21      	ldr	r2, [pc, #132]	; (d423c <_Z16takeMeasurementsv+0xfc>)
   d41b8:	e9cd 0100 	strd	r0, r1, [sp]
   d41bc:	2110      	movs	r1, #16
   d41be:	4820      	ldr	r0, [pc, #128]	; (d4240 <_Z16takeMeasurementsv+0x100>)
   d41c0:	f001 f8fa 	bl	d53b8 <snprintf>

  


  // Get battery voltage level
  sensor_data.batteryVoltage = analogRead(BATT) * 0.0011224;                   // Voltage level of battery
   d41c4:	2021      	movs	r0, #33	; 0x21
   d41c6:	f002 fb6d 	bl	d68a4 <analogRead>
   d41ca:	f002 fe7d 	bl	d6ec8 <__aeabi_i2d>
   d41ce:	a312      	add	r3, pc, #72	; (adr r3, d4218 <_Z16takeMeasurementsv+0xd8>)
   d41d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41d4:	f002 fede 	bl	d6f94 <__aeabi_dmul>
   d41d8:	f003 f9d4 	bl	d7584 <__aeabi_d2f>
   d41dc:	60a0      	str	r0, [r4, #8]
  snprintf(batteryString, sizeof(batteryString), "%4.1fV", sensor_data.batteryVoltage);  // *** Volts not percent
   d41de:	f002 fe85 	bl	d6eec <__aeabi_f2d>
  
  // Indicate that this is a valid data array and store it
  sensor_data.validData = true;
   d41e2:	2601      	movs	r6, #1
  


  // Get battery voltage level
  sensor_data.batteryVoltage = analogRead(BATT) * 0.0011224;                   // Voltage level of battery
  snprintf(batteryString, sizeof(batteryString), "%4.1fV", sensor_data.batteryVoltage);  // *** Volts not percent
   d41e4:	e9cd 0100 	strd	r0, r1, [sp]
   d41e8:	4a16      	ldr	r2, [pc, #88]	; (d4244 <_Z16takeMeasurementsv+0x104>)
   d41ea:	4817      	ldr	r0, [pc, #92]	; (d4248 <_Z16takeMeasurementsv+0x108>)
   d41ec:	2110      	movs	r1, #16
   d41ee:	f001 f8e3 	bl	d53b8 <snprintf>
  
  // Indicate that this is a valid data array and store it
  sensor_data.validData = true;
   d41f2:	7026      	strb	r6, [r4, #0]
  sensor_data.timeStamp = Time.now();
   d41f4:	f002 f95a 	bl	d64ac <_ZN9TimeClass3nowEv>
   d41f8:	6060      	str	r0, [r4, #4]
  EEPROM.put(8 + 100*reportCycle,sensor_data);                              // Current object is 72 bytes long - leaving some room for expansion
   d41fa:	f002 fb6b 	bl	d68d4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d41fe:	2064      	movs	r0, #100	; 0x64
   d4200:	4368      	muls	r0, r5
   d4202:	2214      	movs	r2, #20
   d4204:	4621      	mov	r1, r4
   d4206:	3008      	adds	r0, #8
   d4208:	f000 fea0 	bl	d4f4c <HAL_EEPROM_Put>

  return 1;                                                             // Done, measurements take and the data array is stored as an obeect in EEPROM                                         
}
   d420c:	4630      	mov	r0, r6
   d420e:	b002      	add	sp, #8
   d4210:	bd70      	pop	{r4, r5, r6, pc}
   d4212:	bf00      	nop
   d4214:	f3af 8000 	nop.w
   d4218:	d2c10294 	.word	0xd2c10294
   d421c:	3f5263af 	.word	0x3f5263af
   d4220:	2003e2c0 	.word	0x2003e2c0
   d4224:	2003e2dc 	.word	0x2003e2dc
   d4228:	2003e330 	.word	0x2003e330
   d422c:	2003e304 	.word	0x2003e304
   d4230:	000d81dc 	.word	0x000d81dc
   d4234:	2003e2c4 	.word	0x2003e2c4
   d4238:	2003e2d8 	.word	0x2003e2d8
   d423c:	000d81e3 	.word	0x000d81e3
   d4240:	2003e340 	.word	0x2003e340
   d4244:	000d81e9 	.word	0x000d81e9
   d4248:	2003e350 	.word	0x2003e350

000d424c <_Z20PublishDelayFunctionv>:


// Function to create a delay in the publish time
bool PublishDelayFunction() {
   d424c:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
   d424e:	4c07      	ldr	r4, [pc, #28]	; (d426c <_Z20PublishDelayFunctionv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4250:	f000 fe4c 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
   d4254:	6823      	ldr	r3, [r4, #0]
   d4256:	1ac0      	subs	r0, r0, r3
   d4258:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d425c:	d904      	bls.n	d4268 <_Z20PublishDelayFunctionv+0x1c>
   d425e:	f000 fe45 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else {
    tstamp = millis();
   d4262:	6020      	str	r0, [r4, #0]
   d4264:	2001      	movs	r0, #1
   d4266:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
    return 0;
   d4268:	2000      	movs	r0, #0
  else {
    tstamp = millis();
    return 1;
  }
}
   d426a:	bd10      	pop	{r4, pc}
   d426c:	2003e2f4 	.word	0x2003e2f4

000d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4270:	b508      	push	{r3, lr}

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
  if (Command == "1") {
    state = MEASURING_STATE;                                                      // Set the state to reporting
    waitUntil(PublishDelayFunction);  
   d4272:	f7ff ffeb 	bl	d424c <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4276:	b118      	cbz	r0, d4280 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d427c:	f7ff bfe6 	b.w	d424c <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4280:	f000 ffe2 	bl	d5248 <spark_process>
   d4284:	e7f5      	b.n	d4272 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62+0x2>

000d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4286:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4288:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d428a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d428c:	b17c      	cbz	r4, d42ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d428e:	6863      	ldr	r3, [r4, #4]
   d4290:	3b01      	subs	r3, #1
   d4292:	6063      	str	r3, [r4, #4]
   d4294:	b95b      	cbnz	r3, d42ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4296:	6823      	ldr	r3, [r4, #0]
   d4298:	4620      	mov	r0, r4
   d429a:	689b      	ldr	r3, [r3, #8]
   d429c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d429e:	68a3      	ldr	r3, [r4, #8]
   d42a0:	3b01      	subs	r3, #1
   d42a2:	60a3      	str	r3, [r4, #8]
   d42a4:	b91b      	cbnz	r3, d42ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42a6:	6823      	ldr	r3, [r4, #0]
   d42a8:	4620      	mov	r0, r4
   d42aa:	68db      	ldr	r3, [r3, #12]
   d42ac:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42ae:	4628      	mov	r0, r5
   d42b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d42b4 <_Z14SetVerboseMode6String>:
{
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}

bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
   d42b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d42b6:	4929      	ldr	r1, [pc, #164]	; (d435c <_Z14SetVerboseMode6String+0xa8>)
   d42b8:	4605      	mov	r5, r0
   d42ba:	f002 f81c 	bl	d62f6 <_ZNK6String6equalsEPKc>
  if (command == "1" && verboseMode == false)
   d42be:	b110      	cbz	r0, d42c6 <_Z14SetVerboseMode6String+0x12>
   d42c0:	4b27      	ldr	r3, [pc, #156]	; (d4360 <_Z14SetVerboseMode6String+0xac>)
   d42c2:	781e      	ldrb	r6, [r3, #0]
   d42c4:	b186      	cbz	r6, d42e8 <_Z14SetVerboseMode6String+0x34>
   d42c6:	4925      	ldr	r1, [pc, #148]	; (d435c <_Z14SetVerboseMode6String+0xa8>)
   d42c8:	4628      	mov	r0, r5
   d42ca:	f002 f814 	bl	d62f6 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
    return 1;
  }

  if (command == "1" && verboseMode == true)
   d42ce:	b1a8      	cbz	r0, d42fc <_Z14SetVerboseMode6String+0x48>
   d42d0:	4b23      	ldr	r3, [pc, #140]	; (d4360 <_Z14SetVerboseMode6String+0xac>)
   d42d2:	781b      	ldrb	r3, [r3, #0]
   d42d4:	b193      	cbz	r3, d42fc <_Z14SetVerboseMode6String+0x48>
  {
    waitUntil(PublishDelayFunction);
   d42d6:	f7ff ffcb 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d42da:	4b22      	ldr	r3, [pc, #136]	; (d4364 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
   d42dc:	4a22      	ldr	r2, [pc, #136]	; (d4368 <_Z14SetVerboseMode6String+0xb4>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d42de:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d42e0:	2400      	movs	r4, #0
   d42e2:	f88d 4000 	strb.w	r4, [sp]
   d42e6:	e02e      	b.n	d4346 <_Z14SetVerboseMode6String+0x92>
}

bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
  if (command == "1" && verboseMode == false)
  {
    verboseMode = true;
   d42e8:	2401      	movs	r4, #1
   d42ea:	701c      	strb	r4, [r3, #0]
    waitUntil(PublishDelayFunction);
   d42ec:	f7ff ffc0 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d42f0:	4b1c      	ldr	r3, [pc, #112]	; (d4364 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
   d42f2:	4a1e      	ldr	r2, [pc, #120]	; (d436c <_Z14SetVerboseMode6String+0xb8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d42f4:	781b      	ldrb	r3, [r3, #0]
   d42f6:	f88d 6000 	strb.w	r6, [sp]
   d42fa:	e024      	b.n	d4346 <_Z14SetVerboseMode6String+0x92>
   d42fc:	491c      	ldr	r1, [pc, #112]	; (d4370 <_Z14SetVerboseMode6String+0xbc>)
   d42fe:	4628      	mov	r0, r5
   d4300:	f001 fff9 	bl	d62f6 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
    return 0;
  }

  if (command == "0" && verboseMode == true)
   d4304:	b160      	cbz	r0, d4320 <_Z14SetVerboseMode6String+0x6c>
   d4306:	4b16      	ldr	r3, [pc, #88]	; (d4360 <_Z14SetVerboseMode6String+0xac>)
   d4308:	781c      	ldrb	r4, [r3, #0]
   d430a:	b14c      	cbz	r4, d4320 <_Z14SetVerboseMode6String+0x6c>
  {
    verboseMode = false;
   d430c:	2500      	movs	r5, #0
   d430e:	701d      	strb	r5, [r3, #0]
    waitUntil(PublishDelayFunction);
   d4310:	f7ff ffae 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d4314:	4b13      	ldr	r3, [pc, #76]	; (d4364 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Stopped.", PRIVATE);
   d4316:	4a17      	ldr	r2, [pc, #92]	; (d4374 <_Z14SetVerboseMode6String+0xc0>)
   d4318:	781b      	ldrb	r3, [r3, #0]
   d431a:	f88d 5000 	strb.w	r5, [sp]
   d431e:	e012      	b.n	d4346 <_Z14SetVerboseMode6String+0x92>
   d4320:	4913      	ldr	r1, [pc, #76]	; (d4370 <_Z14SetVerboseMode6String+0xbc>)
   d4322:	4628      	mov	r0, r5
   d4324:	f001 ffe7 	bl	d62f6 <_ZNK6String6equalsEPKc>
    return 1;
  }

  if (command == "0" && verboseMode == false)
   d4328:	b120      	cbz	r0, d4334 <_Z14SetVerboseMode6String+0x80>
   d432a:	4b0d      	ldr	r3, [pc, #52]	; (d4360 <_Z14SetVerboseMode6String+0xac>)
   d432c:	781c      	ldrb	r4, [r3, #0]
   d432e:	b11c      	cbz	r4, d4338 <_Z14SetVerboseMode6String+0x84>
  {
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
    return 0;
  }
  else return 0;
   d4330:	2400      	movs	r4, #0
   d4332:	e00f      	b.n	d4354 <_Z14SetVerboseMode6String+0xa0>
   d4334:	4604      	mov	r4, r0
   d4336:	e00d      	b.n	d4354 <_Z14SetVerboseMode6String+0xa0>
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d4338:	f7ff ff9a 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d433c:	4b09      	ldr	r3, [pc, #36]	; (d4364 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
   d433e:	4a0e      	ldr	r2, [pc, #56]	; (d4378 <_Z14SetVerboseMode6String+0xc4>)
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	f88d 4000 	strb.w	r4, [sp]
   d4346:	a802      	add	r0, sp, #8
   d4348:	490c      	ldr	r1, [pc, #48]	; (d437c <_Z14SetVerboseMode6String+0xc8>)
   d434a:	f7ff fee9 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d434e:	a803      	add	r0, sp, #12
   d4350:	f7ff ff99 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 0;
  }
  else return 0;
}
   d4354:	4620      	mov	r0, r4
   d4356:	b004      	add	sp, #16
   d4358:	bd70      	pop	{r4, r5, r6, pc}
   d435a:	bf00      	nop
   d435c:	000d84d4 	.word	0x000d84d4
   d4360:	2003e32d 	.word	0x2003e32d
   d4364:	2003e310 	.word	0x2003e310
   d4368:	000d8215 	.word	0x000d8215
   d436c:	000d81ff 	.word	0x000d81ff
   d4370:	000d81da 	.word	0x000d81da
   d4374:	000d822e 	.word	0x000d822e
   d4378:	000d8244 	.word	0x000d8244
   d437c:	000d8491 	.word	0x000d8491

000d4380 <_Z11sendUBIDotsv>:

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
   d4380:	b570      	push	{r4, r5, r6, lr}
   d4382:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
  Serial.println("sendUbiDots function called...");
   d4386:	f002 f99b 	bl	d66c0 <_Z16_fetch_usbserialv>
   d438a:	4c2e      	ldr	r4, [pc, #184]	; (d4444 <_Z11sendUBIDotsv+0xc4>)
   d438c:	492e      	ldr	r1, [pc, #184]	; (d4448 <_Z11sendUBIDotsv+0xc8>)
   d438e:	f001 fdfc 	bl	d5f8a <_ZN5Print7printlnEPKc>
  char data[512];
  Particle.publish("Air-Quality-Hook", "Entered Send UbiDots function", PRIVATE);
   d4392:	2200      	movs	r2, #0
   d4394:	7823      	ldrb	r3, [r4, #0]
   d4396:	492d      	ldr	r1, [pc, #180]	; (d444c <_Z11sendUBIDotsv+0xcc>)
   d4398:	f88d 2000 	strb.w	r2, [sp]
   d439c:	a808      	add	r0, sp, #32
   d439e:	4a2c      	ldr	r2, [pc, #176]	; (d4450 <_Z11sendUBIDotsv+0xd0>)
   d43a0:	f7ff febe 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d43a4:	a809      	add	r0, sp, #36	; 0x24
   d43a6:	f7ff ff6e 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43aa:	2608      	movs	r6, #8
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d43ac:	4d29      	ldr	r5, [pc, #164]	; (d4454 <_Z11sendUBIDotsv+0xd4>)


  for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d43ae:	f002 fa91 	bl	d68d4 <_Z21__fetch_global_EEPROMv>
   d43b2:	4630      	mov	r0, r6
   d43b4:	2214      	movs	r2, #20
   d43b6:	4629      	mov	r1, r5
   d43b8:	3664      	adds	r6, #100	; 0x64
   d43ba:	f000 fdbf 	bl	d4f3c <HAL_EEPROM_Get>
  Serial.println("sendUbiDots function called...");
  char data[512];
  Particle.publish("Air-Quality-Hook", "Entered Send UbiDots function", PRIVATE);


  for (int i = 0; i < 4; i++) {
   d43be:	f5b6 7fcc 	cmp.w	r6, #408	; 0x198
   d43c2:	d1f3      	bne.n	d43ac <_Z11sendUBIDotsv+0x2c>
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
  }
  
  snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f, \"Humidity\":%3.1f}", sensor_data.temperatureInC, sensor_data.batteryVoltage, sensor_data.humidity);
   d43c4:	6928      	ldr	r0, [r5, #16]
   d43c6:	f002 fd91 	bl	d6eec <__aeabi_f2d>
   d43ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d43ce:	68a8      	ldr	r0, [r5, #8]
   d43d0:	f002 fd8c 	bl	d6eec <__aeabi_f2d>
   d43d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43d8:	68e8      	ldr	r0, [r5, #12]
   d43da:	f002 fd87 	bl	d6eec <__aeabi_f2d>
   d43de:	4a1e      	ldr	r2, [pc, #120]	; (d4458 <_Z11sendUBIDotsv+0xd8>)
   d43e0:	e9cd 0100 	strd	r0, r1, [sp]
   d43e4:	f44f 7100 	mov.w	r1, #512	; 0x200
   d43e8:	a808      	add	r0, sp, #32
   d43ea:	f000 ffe5 	bl	d53b8 <snprintf>
  Particle.publish("Air-Quality-Hook", data, PRIVATE);
   d43ee:	2200      	movs	r2, #0
   d43f0:	7823      	ldrb	r3, [r4, #0]
   d43f2:	4916      	ldr	r1, [pc, #88]	; (d444c <_Z11sendUBIDotsv+0xcc>)
   d43f4:	f88d 2000 	strb.w	r2, [sp]
   d43f8:	a806      	add	r0, sp, #24
   d43fa:	aa08      	add	r2, sp, #32
   d43fc:	f7ff fe90 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4400:	a807      	add	r0, sp, #28
   d4402:	f7ff ff40 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(PublishDelayFunction);                                  // Space out the sends
   d4406:	f7ff ff33 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
  Serial.println(data);
   d440a:	f002 f959 	bl	d66c0 <_Z16_fetch_usbserialv>
   d440e:	a908      	add	r1, sp, #32
   d4410:	f001 fdbb 	bl	d5f8a <_ZN5Print7printlnEPKc>
  currentCountTime = Time.now();
   d4414:	f002 f84a 	bl	d64ac <_ZN9TimeClass3nowEv>
   d4418:	4c10      	ldr	r4, [pc, #64]	; (d445c <_Z11sendUBIDotsv+0xdc>)
   d441a:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d441c:	f002 fa5a 	bl	d68d4 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4420:	7821      	ldrb	r1, [r4, #0]
   d4422:	2003      	movs	r0, #3
   d4424:	f000 fd82 	bl	d4f2c <HAL_EEPROM_Write>
   d4428:	f000 fd60 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d442c:	4b0c      	ldr	r3, [pc, #48]	; (d4460 <_Z11sendUBIDotsv+0xe0>)
   d442e:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d4430:	f002 f844 	bl	d64bc <_ZN9TimeClass4hourEv>
   d4434:	4b0b      	ldr	r3, [pc, #44]	; (d4464 <_Z11sendUBIDotsv+0xe4>)
   d4436:	6018      	str	r0, [r3, #0]
  inTransit = true;
   d4438:	4b0b      	ldr	r3, [pc, #44]	; (d4468 <_Z11sendUBIDotsv+0xe8>)
   d443a:	2201      	movs	r2, #1
   d443c:	701a      	strb	r2, [r3, #0]
}
   d443e:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
   d4442:	bd70      	pop	{r4, r5, r6, pc}
   d4444:	2003e310 	.word	0x2003e310
   d4448:	000d825e 	.word	0x000d825e
   d444c:	000d829b 	.word	0x000d829b
   d4450:	000d827d 	.word	0x000d827d
   d4454:	2003e2dc 	.word	0x2003e2dc
   d4458:	000d82ac 	.word	0x000d82ac
   d445c:	2003e2c0 	.word	0x2003e2c0
   d4460:	2003e33c 	.word	0x2003e33c
   d4464:	2003e2f8 	.word	0x2003e2f8
   d4468:	2003e2f0 	.word	0x2003e2f0

000d446c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                          // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d446c:	b530      	push	{r4, r5, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d446e:	460c      	mov	r4, r1
  currentHourlyPeriod = Time.hour();
  inTransit = true;
}

void UbidotsHandler(const char *event, const char *data)                          // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d4470:	b085      	sub	sp, #20
   d4472:	4d21      	ldr	r5, [pc, #132]	; (d44f8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d4474:	b951      	cbnz	r1, d448c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
   d4476:	782b      	ldrb	r3, [r5, #0]
   d4478:	2b00      	cmp	r3, #0
   d447a:	d03a      	beq.n	d44f2 <_Z14UbidotsHandlerPKcS0_+0x86>
      waitUntil(PublishDelayFunction);
   d447c:	f7ff fef8 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d4480:	4b1e      	ldr	r3, [pc, #120]	; (d44fc <_Z14UbidotsHandlerPKcS0_+0x90>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4482:	4a1f      	ldr	r2, [pc, #124]	; (d4500 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4484:	781b      	ldrb	r3, [r3, #0]
   d4486:	f88d 4000 	strb.w	r4, [sp]
   d448a:	e02b      	b.n	d44e4 <_Z14UbidotsHandlerPKcS0_+0x78>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d448c:	4608      	mov	r0, r1
   d448e:	f003 f8c9 	bl	d7624 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4492:	38c8      	subs	r0, #200	; 0xc8
   d4494:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
   d4496:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d4498:	d81b      	bhi.n	d44d2 <_Z14UbidotsHandlerPKcS0_+0x66>
  {
    if (verboseMode) {
   d449a:	b173      	cbz	r3, d44ba <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(PublishDelayFunction);
   d449c:	f7ff fee8 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d44a0:	4b16      	ldr	r3, [pc, #88]	; (d44fc <_Z14UbidotsHandlerPKcS0_+0x90>)
      Particle.publish("State", "Response Received", PRIVATE);
   d44a2:	4918      	ldr	r1, [pc, #96]	; (d4504 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d44a4:	781b      	ldrb	r3, [r3, #0]
   d44a6:	2200      	movs	r2, #0
   d44a8:	f88d 2000 	strb.w	r2, [sp]
   d44ac:	a802      	add	r0, sp, #8
   d44ae:	4a16      	ldr	r2, [pc, #88]	; (d4508 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d44b0:	f7ff fe36 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d44b4:	a803      	add	r0, sp, #12
   d44b6:	f7ff fee6 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    }
    inTransit = false;    
   d44ba:	4b14      	ldr	r3, [pc, #80]	; (d450c <_Z14UbidotsHandlerPKcS0_+0xa0>)
   d44bc:	2200      	movs	r2, #0
   d44be:	701a      	strb	r2, [r3, #0]
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
   d44c0:	f002 fa08 	bl	d68d4 <_Z21__fetch_global_EEPROMv>
   d44c4:	f001 fff2 	bl	d64ac <_ZN9TimeClass3nowEv>
   d44c8:	b2c1      	uxtb	r1, r0
   d44ca:	2003      	movs	r0, #3
   d44cc:	f000 fd2e 	bl	d4f2c <HAL_EEPROM_Write>
   d44d0:	e00f      	b.n	d44f2 <_Z14UbidotsHandlerPKcS0_+0x86>
  }
  else if (verboseMode) {
   d44d2:	b173      	cbz	r3, d44f2 <_Z14UbidotsHandlerPKcS0_+0x86>
    waitUntil(PublishDelayFunction);      
   d44d4:	f7ff fecc 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d44d8:	4b08      	ldr	r3, [pc, #32]	; (d44fc <_Z14UbidotsHandlerPKcS0_+0x90>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d44da:	2200      	movs	r2, #0
   d44dc:	781b      	ldrb	r3, [r3, #0]
   d44de:	f88d 2000 	strb.w	r2, [sp]
   d44e2:	4622      	mov	r2, r4
   d44e4:	a802      	add	r0, sp, #8
   d44e6:	490a      	ldr	r1, [pc, #40]	; (d4510 <_Z14UbidotsHandlerPKcS0_+0xa4>)
   d44e8:	f7ff fe1a 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d44ec:	a803      	add	r0, sp, #12
   d44ee:	f7ff feca 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d44f2:	b005      	add	sp, #20
   d44f4:	bd30      	pop	{r4, r5, pc}
   d44f6:	bf00      	nop
   d44f8:	2003e32d 	.word	0x2003e32d
   d44fc:	2003e310 	.word	0x2003e310
   d4500:	000d82e5 	.word	0x000d82e5
   d4504:	000d82fa 	.word	0x000d82fa
   d4508:	000d8399 	.word	0x000d8399
   d450c:	2003e2f0 	.word	0x2003e2f0
   d4510:	000d82ed 	.word	0x000d82ed

000d4514 <_Z15transitionStatev>:

void transitionState(void) {                                                      // This function publishes change of state.
   d4514:	b530      	push	{r4, r5, lr}
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d4516:	4d12      	ldr	r5, [pc, #72]	; (d4560 <_Z15transitionStatev+0x4c>)
   d4518:	4c12      	ldr	r4, [pc, #72]	; (d4564 <_Z15transitionStatev+0x50>)
    waitUntil(PublishDelayFunction);      
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }
}

void transitionState(void) {                                                      // This function publishes change of state.
   d451a:	b095      	sub	sp, #84	; 0x54
  waitUntil(PublishDelayFunction);
   d451c:	f7ff fea8 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d4520:	4911      	ldr	r1, [pc, #68]	; (d4568 <_Z15transitionStatev+0x54>)
   d4522:	782a      	ldrb	r2, [r5, #0]
   d4524:	7820      	ldrb	r0, [r4, #0]
   d4526:	232c      	movs	r3, #44	; 0x2c
   d4528:	fb03 1202 	mla	r2, r3, r2, r1
   d452c:	9200      	str	r2, [sp, #0]
   d452e:	fb03 1300 	mla	r3, r3, r0, r1
   d4532:	4a0e      	ldr	r2, [pc, #56]	; (d456c <_Z15transitionStatev+0x58>)
   d4534:	2140      	movs	r1, #64	; 0x40
   d4536:	a804      	add	r0, sp, #16
   d4538:	f000 ff3e 	bl	d53b8 <snprintf>
  oldState = state;
   d453c:	782b      	ldrb	r3, [r5, #0]
   d453e:	7023      	strb	r3, [r4, #0]
   d4540:	4b0b      	ldr	r3, [pc, #44]	; (d4570 <_Z15transitionStatev+0x5c>)
  Particle.publish("State", stateTransitionString, PRIVATE);
   d4542:	490c      	ldr	r1, [pc, #48]	; (d4574 <_Z15transitionStatev+0x60>)
   d4544:	781b      	ldrb	r3, [r3, #0]
   d4546:	2200      	movs	r2, #0
   d4548:	f88d 2000 	strb.w	r2, [sp]
   d454c:	a802      	add	r0, sp, #8
   d454e:	aa04      	add	r2, sp, #16
   d4550:	f7ff fde6 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4554:	a803      	add	r0, sp, #12
   d4556:	f7ff fe96 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d455a:	b015      	add	sp, #84	; 0x54
   d455c:	bd30      	pop	{r4, r5, pc}
   d455e:	bf00      	nop
   d4560:	2003e2fc 	.word	0x2003e2fc
   d4564:	2003e32c 	.word	0x2003e32c
   d4568:	2003e0a0 	.word	0x2003e0a0
   d456c:	000d8300 	.word	0x000d8300
   d4570:	2003e310 	.word	0x2003e310
   d4574:	000d82fa 	.word	0x000d82fa

000d4578 <loop>:
  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}

void loop()
{  
   d4578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (state)  {                                                               // In the main loop, all code execution must take place in a defined state
   d457c:	4ca6      	ldr	r4, [pc, #664]	; (d4818 <loop+0x2a0>)
   d457e:	7823      	ldrb	r3, [r4, #0]
   d4580:	3b01      	subs	r3, #1
  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}

void loop()
{  
   d4582:	b098      	sub	sp, #96	; 0x60
  switch (state)  {                                                               // In the main loop, all code execution must take place in a defined state
   d4584:	2b06      	cmp	r3, #6
   d4586:	f200 8206 	bhi.w	d4996 <loop+0x41e>
   d458a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d458e:	0007      	.short	0x0007
   d4590:	006e0033 	.word	0x006e0033
   d4594:	00450111 	.word	0x00450111
   d4598:	01a10179 	.word	0x01a10179
    case IDLE_STATE:                                                              // IDLE State.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d459c:	4b9f      	ldr	r3, [pc, #636]	; (d481c <loop+0x2a4>)
   d459e:	781b      	ldrb	r3, [r3, #0]
   d45a0:	b12b      	cbz	r3, d45ae <loop+0x36>
   d45a2:	4b9f      	ldr	r3, [pc, #636]	; (d4820 <loop+0x2a8>)
   d45a4:	781b      	ldrb	r3, [r3, #0]
   d45a6:	2b01      	cmp	r3, #1
   d45a8:	d001      	beq.n	d45ae <loop+0x36>
   d45aa:	f7ff ffb3 	bl	d4514 <_Z15transitionStatev>
      static int TimePassed = 0;
      
      if (lowPowerModeOn && (millis() - stayAWakeTimeStamp >= stayAwake)) state = NAPPING_STATE;    // If lowPowerMode is turned on, It will move to the napping state. 
   d45ae:	4b9d      	ldr	r3, [pc, #628]	; (d4824 <loop+0x2ac>)
   d45b0:	781b      	ldrb	r3, [r3, #0]
   d45b2:	b14b      	cbz	r3, d45c8 <loop+0x50>
   d45b4:	f000 fc9a 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
   d45b8:	4b9b      	ldr	r3, [pc, #620]	; (d4828 <loop+0x2b0>)
   d45ba:	681b      	ldr	r3, [r3, #0]
   d45bc:	1ac0      	subs	r0, r0, r3
   d45be:	4b9b      	ldr	r3, [pc, #620]	; (d482c <loop+0x2b4>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	4298      	cmp	r0, r3
   d45c4:	f080 81df 	bcs.w	d4986 <loop+0x40e>
                                     
      if ((Time.minute() - TimePassed >= sampleRate/60) || Time.hour() != currentHourlyPeriod ) {     // Sample time or the top of the hour
   d45c8:	f001 ff82 	bl	d64d0 <_ZN9TimeClass6minuteEv>
   d45cc:	4b98      	ldr	r3, [pc, #608]	; (d4830 <loop+0x2b8>)
   d45ce:	681a      	ldr	r2, [r3, #0]
   d45d0:	1a80      	subs	r0, r0, r2
   d45d2:	4a98      	ldr	r2, [pc, #608]	; (d4834 <loop+0x2bc>)
   d45d4:	213c      	movs	r1, #60	; 0x3c
   d45d6:	6812      	ldr	r2, [r2, #0]
   d45d8:	fb92 f2f1 	sdiv	r2, r2, r1
   d45dc:	4290      	cmp	r0, r2
   d45de:	461d      	mov	r5, r3
   d45e0:	f280 81d4 	bge.w	d498c <loop+0x414>
   d45e4:	f001 ff6a 	bl	d64bc <_ZN9TimeClass4hourEv>
   d45e8:	4b93      	ldr	r3, [pc, #588]	; (d4838 <loop+0x2c0>)
   d45ea:	681b      	ldr	r3, [r3, #0]
   d45ec:	4298      	cmp	r0, r3
   d45ee:	f040 81cd 	bne.w	d498c <loop+0x414>
   d45f2:	e1d0      	b.n	d4996 <loop+0x41e>
          TimePassed = Time.minute();
      }
    } break;

    case MEASURING_STATE:                                                         // Measuring State.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d45f4:	4b89      	ldr	r3, [pc, #548]	; (d481c <loop+0x2a4>)
   d45f6:	781b      	ldrb	r3, [r3, #0]
   d45f8:	b12b      	cbz	r3, d4606 <loop+0x8e>
   d45fa:	4b89      	ldr	r3, [pc, #548]	; (d4820 <loop+0x2a8>)
   d45fc:	781b      	ldrb	r3, [r3, #0]
   d45fe:	2b02      	cmp	r3, #2
   d4600:	d001      	beq.n	d4606 <loop+0x8e>
   d4602:	f7ff ff87 	bl	d4514 <_Z15transitionStatev>
      currentHourlyPeriod = Time.hour();
   d4606:	f001 ff59 	bl	d64bc <_ZN9TimeClass4hourEv>
   d460a:	4b8b      	ldr	r3, [pc, #556]	; (d4838 <loop+0x2c0>)
   d460c:	6018      	str	r0, [r3, #0]
      if(takeMeasurements()) state = REPORTING_DETERMINATION;                     // Get the measurements and move to reporting determination
   d460e:	f7ff fd97 	bl	d4140 <_Z16takeMeasurementsv>
   d4612:	b318      	cbz	r0, d465c <loop+0xe4>
   d4614:	2303      	movs	r3, #3
   d4616:	e026      	b.n	d4666 <loop+0xee>
      sendUBIDots();
      state = RESPONSE_WAIT;
      break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4618:	4b80      	ldr	r3, [pc, #512]	; (d481c <loop+0x2a4>)
   d461a:	781a      	ldrb	r2, [r3, #0]
   d461c:	461d      	mov	r5, r3
   d461e:	2a00      	cmp	r2, #0
   d4620:	f040 80dd 	bne.w	d47de <loop+0x266>

      if (!inTransit) {
   d4624:	4b85      	ldr	r3, [pc, #532]	; (d483c <loop+0x2c4>)
   d4626:	781b      	ldrb	r3, [r3, #0]
   d4628:	2b00      	cmp	r3, #0
   d462a:	f000 80e0 	beq.w	d47ee <loop+0x276>
   d462e:	f000 fc5d 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
          waitUntil(PublishDelayFunction);
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
        }
      } 

      if (millis() - webhookTimeStamp > webhookTimeout) {                         // If device does not respond in 45 Seconds, Then Reset it.
   d4632:	4b83      	ldr	r3, [pc, #524]	; (d4840 <loop+0x2c8>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	1ac0      	subs	r0, r0, r3
   d4638:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d463c:	4298      	cmp	r0, r3
   d463e:	f240 81aa 	bls.w	d4996 <loop+0x41e>
   d4642:	4b80      	ldr	r3, [pc, #512]	; (d4844 <loop+0x2cc>)
        Particle.publish("spark/device/session/end", "", PRIVATE); 
   d4644:	4980      	ldr	r1, [pc, #512]	; (d4848 <loop+0x2d0>)
   d4646:	781b      	ldrb	r3, [r3, #0]
   d4648:	2200      	movs	r2, #0
   d464a:	f88d 2000 	strb.w	r2, [sp]
   d464e:	a808      	add	r0, sp, #32
   d4650:	4a7e      	ldr	r2, [pc, #504]	; (d484c <loop+0x2d4>)
   d4652:	f7ff fd65 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4656:	a809      	add	r0, sp, #36	; 0x24
   d4658:	f7ff fe15 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d465c:	f000 fc46 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
    case MEASURING_STATE:                                                         // Measuring State.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
      currentHourlyPeriod = Time.hour();
      if(takeMeasurements()) state = REPORTING_DETERMINATION;                     // Get the measurements and move to reporting determination
      else  {
        resetStartTimeStamp = millis();
   d4660:	4b7b      	ldr	r3, [pc, #492]	; (d4850 <loop+0x2d8>)
   d4662:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;                                                      // If we fail to get the measurements we need - go to error state
   d4664:	2306      	movs	r3, #6
   d4666:	7023      	strb	r3, [r4, #0]
   d4668:	e195      	b.n	d4996 <loop+0x41e>
      }
    break;

    case REPORTING_DETERMINATION:                                                 // Reporting determination state.
    {
      Serial.println("Reporting Determination");
   d466a:	f002 f829 	bl	d66c0 <_Z16_fetch_usbserialv>
   d466e:	4979      	ldr	r1, [pc, #484]	; (d4854 <loop+0x2dc>)
      Serial.println(temperatureInC);
   d4670:	4e79      	ldr	r6, [pc, #484]	; (d4858 <loop+0x2e0>)
      }
    break;

    case REPORTING_DETERMINATION:                                                 // Reporting determination state.
    {
      Serial.println("Reporting Determination");
   d4672:	f001 fc8a 	bl	d5f8a <_ZN5Print7printlnEPKc>
      Serial.println(temperatureInC);
   d4676:	f002 f823 	bl	d66c0 <_Z16_fetch_usbserialv>
   d467a:	4605      	mov	r5, r0
   d467c:	6830      	ldr	r0, [r6, #0]
   d467e:	f002 fc35 	bl	d6eec <__aeabi_f2d>
   d4682:	ec41 0b10 	vmov	d0, r0, r1
   d4686:	4628      	mov	r0, r5
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4688:	4d64      	ldr	r5, [pc, #400]	; (d481c <loop+0x2a4>)
    break;

    case REPORTING_DETERMINATION:                                                 // Reporting determination state.
    {
      Serial.println("Reporting Determination");
      Serial.println(temperatureInC);
   d468a:	2102      	movs	r1, #2
   d468c:	f001 fd8a 	bl	d61a4 <_ZN5Print7printlnEdi>
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4690:	782b      	ldrb	r3, [r5, #0]
   d4692:	4637      	mov	r7, r6
   d4694:	b133      	cbz	r3, d46a4 <loop+0x12c>
   d4696:	4b62      	ldr	r3, [pc, #392]	; (d4820 <loop+0x2a8>)
   d4698:	781a      	ldrb	r2, [r3, #0]
   d469a:	7823      	ldrb	r3, [r4, #0]
   d469c:	429a      	cmp	r2, r3
   d469e:	d001      	beq.n	d46a4 <loop+0x12c>
   d46a0:	f7ff ff38 	bl	d4514 <_Z15transitionStatev>
       static float lastTemperatureInC = 0;

      // Four possible outcomes: 1) Top of the hour - report, 2) Big change in Temp - report and move to rapid sampling, 3) small change in Temp - report and normal sampling, 4) No change in temp - back to Idle
      if (Time.hour() != currentHourlyPeriod) {                                   // Case 1 - If it is a new hour - report
   d46a4:	f001 ff0a 	bl	d64bc <_ZN9TimeClass4hourEv>
   d46a8:	4b63      	ldr	r3, [pc, #396]	; (d4838 <loop+0x2c0>)
   d46aa:	681a      	ldr	r2, [r3, #0]
   d46ac:	4290      	cmp	r0, r2
   d46ae:	461e      	mov	r6, r3
   d46b0:	d018      	beq.n	d46e4 <loop+0x16c>
        stayAwake = stayAwakeLong;                                                // Stay awake longer at the hour - helps if you need to publish updates to deployed devices
   d46b2:	4b5e      	ldr	r3, [pc, #376]	; (d482c <loop+0x2b4>)
   d46b4:	4a69      	ldr	r2, [pc, #420]	; (d485c <loop+0x2e4>)
   d46b6:	601a      	str	r2, [r3, #0]
        if (verboseMode) {
   d46b8:	782b      	ldrb	r3, [r5, #0]
   d46ba:	b173      	cbz	r3, d46da <loop+0x162>
          waitUntil(PublishDelayFunction);
   d46bc:	f7ff fdd8 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d46c0:	4b60      	ldr	r3, [pc, #384]	; (d4844 <loop+0x2cc>)
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
   d46c2:	4967      	ldr	r1, [pc, #412]	; (d4860 <loop+0x2e8>)
   d46c4:	781b      	ldrb	r3, [r3, #0]
   d46c6:	2200      	movs	r2, #0
   d46c8:	f88d 2000 	strb.w	r2, [sp]
   d46cc:	a808      	add	r0, sp, #32
   d46ce:	4a65      	ldr	r2, [pc, #404]	; (d4864 <loop+0x2ec>)
   d46d0:	f7ff fd26 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d46d4:	a809      	add	r0, sp, #36	; 0x24
   d46d6:	f7ff fdd6 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        currentHourlyPeriod = Time.hour();
   d46da:	f001 feef 	bl	d64bc <_ZN9TimeClass4hourEv>
        state = REPORTING_STATE;
   d46de:	2304      	movs	r3, #4
        stayAwake = stayAwakeLong;                                                // Stay awake longer at the hour - helps if you need to publish updates to deployed devices
        if (verboseMode) {
          waitUntil(PublishDelayFunction);
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
        }
        currentHourlyPeriod = Time.hour();
   d46e0:	6030      	str	r0, [r6, #0]
   d46e2:	e7c0      	b.n	d4666 <loop+0xee>
        state = REPORTING_STATE;
        break;                                                                    // Leave this case and move on
      }
      if (abs(temperatureInC - lastTemperatureInC) >= tempChangeThreshold) {      // Case 2 - Big change in Temp - report and move to rapid sampling
   d46e4:	4b60      	ldr	r3, [pc, #384]	; (d4868 <loop+0x2f0>)
   d46e6:	edd7 6a00 	vldr	s13, [r7]
   d46ea:	ed93 7a00 	vldr	s14, [r3]
   d46ee:	f8df 8144 	ldr.w	r8, [pc, #324]	; d4834 <loop+0x2bc>
   d46f2:	ee76 7ac7 	vsub.f32	s15, s13, s14
   d46f6:	461e      	mov	r6, r3
   d46f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d46fc:	ee17 2a90 	vmov	r2, s15
   d4700:	2a00      	cmp	r2, #0
   d4702:	bfb8      	it	lt
   d4704:	4252      	neglt	r2, r2
   d4706:	ee07 2a90 	vmov	s15, r2
   d470a:	4a58      	ldr	r2, [pc, #352]	; (d486c <loop+0x2f4>)
   d470c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4710:	ed92 6a00 	vldr	s12, [r2]
   d4714:	eef4 7ac6 	vcmpe.f32	s15, s12
   d4718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d471c:	db17      	blt.n	d474e <loop+0x1d6>
        if (verboseMode) {
   d471e:	782b      	ldrb	r3, [r5, #0]
   d4720:	b173      	cbz	r3, d4740 <loop+0x1c8>
          waitUntil(PublishDelayFunction);
   d4722:	f7ff fda5 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d4726:	4b47      	ldr	r3, [pc, #284]	; (d4844 <loop+0x2cc>)
          Particle.publish("State", "Big Change - Rapid & Reporting", PRIVATE);   // Report for diagnostics
   d4728:	494d      	ldr	r1, [pc, #308]	; (d4860 <loop+0x2e8>)
   d472a:	781b      	ldrb	r3, [r3, #0]
   d472c:	2200      	movs	r2, #0
   d472e:	f88d 2000 	strb.w	r2, [sp]
   d4732:	a808      	add	r0, sp, #32
   d4734:	4a4e      	ldr	r2, [pc, #312]	; (d4870 <loop+0x2f8>)
   d4736:	f7ff fcf3 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d473a:	a809      	add	r0, sp, #36	; 0x24
   d473c:	f7ff fda3 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d4740:	683b      	ldr	r3, [r7, #0]
   d4742:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;                                                  
   d4744:	2304      	movs	r3, #4
   d4746:	7023      	strb	r3, [r4, #0]
        sampleRate = rapidSamplePeriodSeconds;                                    // Move to rapid sampling
   d4748:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d474c:	e01b      	b.n	d4786 <loop+0x20e>
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - small change in Temp - report and normal sampling
   d474e:	eef4 6a47 	vcmp.f32	s13, s14
   d4752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        if (verboseMode) {
   d4756:	782b      	ldrb	r3, [r5, #0]
        lastTemperatureInC = temperatureInC;
        state = REPORTING_STATE;                                                  
        sampleRate = rapidSamplePeriodSeconds;                                    // Move to rapid sampling
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - small change in Temp - report and normal sampling
   d4758:	d018      	beq.n	d478c <loop+0x214>
        if (verboseMode) {
   d475a:	b173      	cbz	r3, d477a <loop+0x202>
          waitUntil(PublishDelayFunction);
   d475c:	f7ff fd88 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d4760:	4b38      	ldr	r3, [pc, #224]	; (d4844 <loop+0x2cc>)
          Particle.publish("State", "Change detected - Reporting", PRIVATE);      // Report for diagnostics
   d4762:	493f      	ldr	r1, [pc, #252]	; (d4860 <loop+0x2e8>)
   d4764:	781b      	ldrb	r3, [r3, #0]
   d4766:	2200      	movs	r2, #0
   d4768:	f88d 2000 	strb.w	r2, [sp]
   d476c:	a808      	add	r0, sp, #32
   d476e:	4a41      	ldr	r2, [pc, #260]	; (d4874 <loop+0x2fc>)
   d4770:	f7ff fcd6 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4774:	a809      	add	r0, sp, #36	; 0x24
   d4776:	f7ff fd86 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d477a:	683b      	ldr	r3, [r7, #0]
   d477c:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;
   d477e:	2304      	movs	r3, #4
   d4780:	7023      	strb	r3, [r4, #0]
        sampleRate = normalSamplePeriodSeconds;                                   // Small but non-zero change - move to normal sampling
   d4782:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4786:	f8c8 3000 	str.w	r3, [r8]
        break;  
   d478a:	e104      	b.n	d4996 <loop+0x41e>
      }

      else {                                                                      // Case 4 - No change in temp - go back to idle
        if (verboseMode) {
   d478c:	b173      	cbz	r3, d47ac <loop+0x234>
          waitUntil(PublishDelayFunction);
   d478e:	f7ff fd6f 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d4792:	4b2c      	ldr	r3, [pc, #176]	; (d4844 <loop+0x2cc>)
          Particle.publish("State", "No Change - Idle", PRIVATE);                 // Report for diagnostics
   d4794:	4932      	ldr	r1, [pc, #200]	; (d4860 <loop+0x2e8>)
   d4796:	781b      	ldrb	r3, [r3, #0]
   d4798:	2200      	movs	r2, #0
   d479a:	f88d 2000 	strb.w	r2, [sp]
   d479e:	a808      	add	r0, sp, #32
   d47a0:	4a35      	ldr	r2, [pc, #212]	; (d4878 <loop+0x300>)
   d47a2:	f7ff fcbd 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d47a6:	a809      	add	r0, sp, #36	; 0x24
   d47a8:	f7ff fd6d 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        state = IDLE_STATE;                                                      
   d47ac:	2301      	movs	r3, #1
   d47ae:	e7e7      	b.n	d4780 <loop+0x208>
        sampleRate = normalSamplePeriodSeconds;                                   // Small but non-zero change - move to normal sampling
      }
    } break;

    case REPORTING_STATE:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d47b0:	4b1a      	ldr	r3, [pc, #104]	; (d481c <loop+0x2a4>)
   d47b2:	781b      	ldrb	r3, [r3, #0]
   d47b4:	b12b      	cbz	r3, d47c2 <loop+0x24a>
   d47b6:	4b1a      	ldr	r3, [pc, #104]	; (d4820 <loop+0x2a8>)
   d47b8:	781b      	ldrb	r3, [r3, #0]
   d47ba:	2b04      	cmp	r3, #4
   d47bc:	d001      	beq.n	d47c2 <loop+0x24a>
   d47be:	f7ff fea9 	bl	d4514 <_Z15transitionStatev>

      if (Time.hour() == 12) Particle.syncTime();                                 // SET CLOCK EACH DAY AT 12 NOON.
   d47c2:	f001 fe7b 	bl	d64bc <_ZN9TimeClass4hourEv>
   d47c6:	280c      	cmp	r0, #12
   d47c8:	d105      	bne.n	d47d6 <loop+0x25e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d47ca:	f000 fd4d 	bl	d5268 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d47ce:	b110      	cbz	r0, d47d6 <loop+0x25e>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d47d0:	2000      	movs	r0, #0
   d47d2:	f000 fd69 	bl	d52a8 <spark_sync_time>

      sendUBIDots();
   d47d6:	f7ff fdd3 	bl	d4380 <_Z11sendUBIDotsv>
      state = RESPONSE_WAIT;
   d47da:	2305      	movs	r3, #5
   d47dc:	e743      	b.n	d4666 <loop+0xee>
      break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d47de:	4b10      	ldr	r3, [pc, #64]	; (d4820 <loop+0x2a8>)
   d47e0:	781b      	ldrb	r3, [r3, #0]
   d47e2:	2b05      	cmp	r3, #5
   d47e4:	f43f af1e 	beq.w	d4624 <loop+0xac>
   d47e8:	f7ff fe94 	bl	d4514 <_Z15transitionStatev>
   d47ec:	e71a      	b.n	d4624 <loop+0xac>

      if (!inTransit) {
        state = IDLE_STATE;                                                       // This checks for the response from UBIDOTS. 
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
   d47ee:	782d      	ldrb	r5, [r5, #0]

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.

      if (!inTransit) {
        state = IDLE_STATE;                                                       // This checks for the response from UBIDOTS. 
   d47f0:	2301      	movs	r3, #1
   d47f2:	7023      	strb	r3, [r4, #0]
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
   d47f4:	2d00      	cmp	r5, #0
   d47f6:	f47f af1a 	bne.w	d462e <loop+0xb6>
          waitUntil(PublishDelayFunction);
   d47fa:	f7ff fd39 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d47fe:	4b11      	ldr	r3, [pc, #68]	; (d4844 <loop+0x2cc>)
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
   d4800:	4a1e      	ldr	r2, [pc, #120]	; (d487c <loop+0x304>)
   d4802:	781b      	ldrb	r3, [r3, #0]
   d4804:	4916      	ldr	r1, [pc, #88]	; (d4860 <loop+0x2e8>)
   d4806:	f88d 5000 	strb.w	r5, [sp]
   d480a:	a808      	add	r0, sp, #32
   d480c:	f7ff fc88 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4810:	a809      	add	r0, sp, #36	; 0x24
   d4812:	f7ff fd38 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4816:	e70a      	b.n	d462e <loop+0xb6>
   d4818:	2003e2fc 	.word	0x2003e2fc
   d481c:	2003e32d 	.word	0x2003e32d
   d4820:	2003e32c 	.word	0x2003e32c
   d4824:	2003e200 	.word	0x2003e200
   d4828:	2003e314 	.word	0x2003e314
   d482c:	2003e30c 	.word	0x2003e30c
   d4830:	2003e308 	.word	0x2003e308
   d4834:	2003e098 	.word	0x2003e098
   d4838:	2003e2f8 	.word	0x2003e2f8
   d483c:	2003e2f0 	.word	0x2003e2f0
   d4840:	2003e33c 	.word	0x2003e33c
   d4844:	2003e310 	.word	0x2003e310
   d4848:	000d83ab 	.word	0x000d83ab
   d484c:	000d860b 	.word	0x000d860b
   d4850:	2003e2d4 	.word	0x2003e2d4
   d4854:	000d8315 	.word	0x000d8315
   d4858:	2003e304 	.word	0x2003e304
   d485c:	00015f90 	.word	0x00015f90
   d4860:	000d82fa 	.word	0x000d82fa
   d4864:	000d832d 	.word	0x000d832d
   d4868:	2003e360 	.word	0x2003e360
   d486c:	2003e09c 	.word	0x2003e09c
   d4870:	000d8341 	.word	0x000d8341
   d4874:	000d8360 	.word	0x000d8360
   d4878:	000d837c 	.word	0x000d837c
   d487c:	000d838d 	.word	0x000d838d
        state = ERROR_STATE;                                                      // Send to the error state - webhook failed
      }
      break;

    case ERROR_STATE: // This state RESETS the devices.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4880:	4b46      	ldr	r3, [pc, #280]	; (d499c <loop+0x424>)
   d4882:	781b      	ldrb	r3, [r3, #0]
   d4884:	b12b      	cbz	r3, d4892 <loop+0x31a>
   d4886:	4b46      	ldr	r3, [pc, #280]	; (d49a0 <loop+0x428>)
   d4888:	781b      	ldrb	r3, [r3, #0]
   d488a:	2b06      	cmp	r3, #6
   d488c:	d001      	beq.n	d4892 <loop+0x31a>
   d488e:	f7ff fe41 	bl	d4514 <_Z15transitionStatev>
   d4892:	f000 fb2b 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetStartTimeStamp >= resetDelayTime) {
   d4896:	4b43      	ldr	r3, [pc, #268]	; (d49a4 <loop+0x42c>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	1ac0      	subs	r0, r0, r3
   d489c:	f247 532f 	movw	r3, #29999	; 0x752f
   d48a0:	4298      	cmp	r0, r3
   d48a2:	d978      	bls.n	d4996 <loop+0x41e>
        waitUntil(PublishDelayFunction);
   d48a4:	f7ff fce4 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d48a8:	4b3f      	ldr	r3, [pc, #252]	; (d49a8 <loop+0x430>)
        Particle.publish("Error", "Resetting in 30 seconds", PRIVATE);            // Reset the device and hope that fixes it
   d48aa:	4940      	ldr	r1, [pc, #256]	; (d49ac <loop+0x434>)
   d48ac:	781b      	ldrb	r3, [r3, #0]
   d48ae:	2200      	movs	r2, #0
   d48b0:	f88d 2000 	strb.w	r2, [sp]
   d48b4:	a808      	add	r0, sp, #32
   d48b6:	4a3e      	ldr	r2, [pc, #248]	; (d49b0 <loop+0x438>)
   d48b8:	f7ff fc32 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d48bc:	a809      	add	r0, sp, #36	; 0x24
   d48be:	f7ff fce2 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                                              // Get the message out before resetting
   d48c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d48c6:	f000 fd8f 	bl	d53e8 <delay>
        System.reset();
   d48ca:	f001 fd43 	bl	d6354 <_ZN11SystemClass5resetEv>
   d48ce:	e062      	b.n	d4996 <loop+0x41e>
      }
      break;

    case NAPPING_STATE: { // This state puts the device to sleep mode
      char data[64];
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d48d0:	4b32      	ldr	r3, [pc, #200]	; (d499c <loop+0x424>)
   d48d2:	781b      	ldrb	r3, [r3, #0]
   d48d4:	b12b      	cbz	r3, d48e2 <loop+0x36a>
   d48d6:	4b32      	ldr	r3, [pc, #200]	; (d49a0 <loop+0x428>)
   d48d8:	781b      	ldrb	r3, [r3, #0]
   d48da:	2b07      	cmp	r3, #7
   d48dc:	d001      	beq.n	d48e2 <loop+0x36a>
   d48de:	f7ff fe19 	bl	d4514 <_Z15transitionStatev>

      stayAwake = stayAwakeShort;                                                 // Don't need to wake for long when we are just sampling
   d48e2:	4b34      	ldr	r3, [pc, #208]	; (d49b4 <loop+0x43c>)
   d48e4:	f241 3288 	movw	r2, #5000	; 0x1388
   d48e8:	601a      	str	r2, [r3, #0]
      int wakeInSeconds = constrain(sampleRate - Time.now() % sampleRate, 1, sampleRate); // Calculate the seconds to the next sample
   d48ea:	f001 fddf 	bl	d64ac <_ZN9TimeClass3nowEv>
   d48ee:	4b32      	ldr	r3, [pc, #200]	; (d49b8 <loop+0x440>)
   d48f0:	681d      	ldr	r5, [r3, #0]
   d48f2:	fb90 f3f5 	sdiv	r3, r0, r5
   d48f6:	fb03 0015 	mls	r0, r3, r5, r0
   d48fa:	1a28      	subs	r0, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d48fc:	2800      	cmp	r0, #0
   d48fe:	dd03      	ble.n	d4908 <loop+0x390>
   d4900:	4285      	cmp	r5, r0
   d4902:	bfa8      	it	ge
   d4904:	4605      	movge	r5, r0
   d4906:	e000      	b.n	d490a <loop+0x392>
   d4908:	2501      	movs	r5, #1
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d490a:	f000 fcad 	bl	d5268 <spark_cloud_flag_connected>
   d490e:	4f26      	ldr	r7, [pc, #152]	; (d49a8 <loop+0x430>)
      
      if (Particle.connected()) {
   d4910:	b198      	cbz	r0, d493a <loop+0x3c2>
        snprintf(data,sizeof(data),"Going to take a %i second nap", wakeInSeconds);
   d4912:	462b      	mov	r3, r5
   d4914:	4a29      	ldr	r2, [pc, #164]	; (d49bc <loop+0x444>)
   d4916:	2140      	movs	r1, #64	; 0x40
   d4918:	a808      	add	r0, sp, #32
   d491a:	f000 fd4d 	bl	d53b8 <snprintf>
        waitUntil(PublishDelayFunction);
   d491e:	f7ff fca7 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4922:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4924:	783b      	ldrb	r3, [r7, #0]
        Particle.publish("Napping", data, PRIVATE);
   d4926:	4926      	ldr	r1, [pc, #152]	; (d49c0 <loop+0x448>)
   d4928:	f88d 2000 	strb.w	r2, [sp]
   d492c:	a806      	add	r0, sp, #24
   d492e:	aa08      	add	r2, sp, #32
   d4930:	f7ff fbf6 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4934:	a807      	add	r0, sp, #28
   d4936:	f7ff fca6 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d493a:	4b22      	ldr	r3, [pc, #136]	; (d49c4 <loop+0x44c>)
   d493c:	681a      	ldr	r2, [r3, #0]
   d493e:	2308      	movs	r3, #8
   d4940:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4944:	ab18      	add	r3, sp, #96	; 0x60
   d4946:	2601      	movs	r6, #1
   d4948:	f803 6d4b 	strb.w	r6, [r3, #-75]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d494c:	f10d 0116 	add.w	r1, sp, #22
   d4950:	a806      	add	r0, sp, #24
   d4952:	9202      	str	r2, [sp, #8]
   d4954:	9501      	str	r5, [sp, #4]
   d4956:	4632      	mov	r2, r6
   d4958:	9600      	str	r6, [sp, #0]
   d495a:	f001 fd15 	bl	d6388 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d495e:	f000 fc7b 	bl	d5258 <spark_cloud_flag_connect>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4962:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4964:	783b      	ldrb	r3, [r7, #0]
      }
      
      System.sleep(D8, RISING, wakeInSeconds);                                    // This is a light sleep but all we can do until we put an external clock in
      Particle.connect();                                                         // We need to connect and transmit data each time - can move to sample and hold in the future
      Particle.publish("WokeUp","From Sleep",PRIVATE);
   d4966:	4918      	ldr	r1, [pc, #96]	; (d49c8 <loop+0x450>)
   d4968:	f88d 2000 	strb.w	r2, [sp]
   d496c:	a806      	add	r0, sp, #24
   d496e:	4a17      	ldr	r2, [pc, #92]	; (d49cc <loop+0x454>)
   d4970:	f7ff fbd6 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4974:	a807      	add	r0, sp, #28
   d4976:	f7ff fc86 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d497a:	f000 fab7 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
   d497e:	4b14      	ldr	r3, [pc, #80]	; (d49d0 <loop+0x458>)
      state = IDLE_STATE;
   d4980:	7026      	strb	r6, [r4, #0]
      }
      
      System.sleep(D8, RISING, wakeInSeconds);                                    // This is a light sleep but all we can do until we put an external clock in
      Particle.connect();                                                         // We need to connect and transmit data each time - can move to sample and hold in the future
      Particle.publish("WokeUp","From Sleep",PRIVATE);
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
   d4982:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
    } break; 
  }
}
   d4984:	e007      	b.n	d4996 <loop+0x41e>
    case IDLE_STATE:                                                              // IDLE State.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
      static int TimePassed = 0;
      
      if (lowPowerModeOn && (millis() - stayAWakeTimeStamp >= stayAwake)) state = NAPPING_STATE;    // If lowPowerMode is turned on, It will move to the napping state. 
   d4986:	2307      	movs	r3, #7
   d4988:	7023      	strb	r3, [r4, #0]
   d498a:	e61d      	b.n	d45c8 <loop+0x50>
                                     
      if ((Time.minute() - TimePassed >= sampleRate/60) || Time.hour() != currentHourlyPeriod ) {     // Sample time or the top of the hour
          state = MEASURING_STATE;
   d498c:	2302      	movs	r3, #2
   d498e:	7023      	strb	r3, [r4, #0]
          TimePassed = Time.minute();
   d4990:	f001 fd9e 	bl	d64d0 <_ZN9TimeClass6minuteEv>
   d4994:	6028      	str	r0, [r5, #0]
      Particle.publish("WokeUp","From Sleep",PRIVATE);
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
      state = IDLE_STATE;
    } break; 
  }
}
   d4996:	b018      	add	sp, #96	; 0x60
   d4998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d499c:	2003e32d 	.word	0x2003e32d
   d49a0:	2003e32c 	.word	0x2003e32c
   d49a4:	2003e2d4 	.word	0x2003e2d4
   d49a8:	2003e310 	.word	0x2003e310
   d49ac:	000d83dc 	.word	0x000d83dc
   d49b0:	000d83c4 	.word	0x000d83c4
   d49b4:	2003e30c 	.word	0x2003e30c
   d49b8:	2003e098 	.word	0x2003e098
   d49bc:	000d83e2 	.word	0x000d83e2
   d49c0:	000d8400 	.word	0x000d8400
   d49c4:	2003e328 	.word	0x2003e328
   d49c8:	000d8413 	.word	0x000d8413
   d49cc:	000d8408 	.word	0x000d8408
   d49d0:	2003e314 	.word	0x2003e314

000d49d4 <_Z7sendNow6String>:
  Particle.publish("State", stateTransitionString, PRIVATE);
}


bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d49d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d49d6:	4911      	ldr	r1, [pc, #68]	; (d4a1c <_Z7sendNow6String+0x48>)
   d49d8:	4604      	mov	r4, r0
   d49da:	f001 fc8c 	bl	d62f6 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d49de:	b198      	cbz	r0, d4a08 <_Z7sendNow6String+0x34>
    state = REPORTING_STATE;                                                      // Set the state to reporting
   d49e0:	4b0f      	ldr	r3, [pc, #60]	; (d4a20 <_Z7sendNow6String+0x4c>)
   d49e2:	2204      	movs	r2, #4
   d49e4:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d49e6:	f7ff fc43 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d49ea:	4b0e      	ldr	r3, [pc, #56]	; (d4a24 <_Z7sendNow6String+0x50>)
    Particle.publish("Function", "Command accepted - reporting now",PRIVATE);     // Acknowledge receipt
   d49ec:	490e      	ldr	r1, [pc, #56]	; (d4a28 <_Z7sendNow6String+0x54>)
   d49ee:	781b      	ldrb	r3, [r3, #0]
   d49f0:	2200      	movs	r2, #0
   d49f2:	f88d 2000 	strb.w	r2, [sp]
   d49f6:	a802      	add	r0, sp, #8
   d49f8:	4a0c      	ldr	r2, [pc, #48]	; (d4a2c <_Z7sendNow6String+0x58>)
   d49fa:	f7ff fb91 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d49fe:	a803      	add	r0, sp, #12
   d4a00:	f7ff fc41 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a04:	2001      	movs	r0, #1
   d4a06:	e006      	b.n	d4a16 <_Z7sendNow6String+0x42>
   d4a08:	4909      	ldr	r1, [pc, #36]	; (d4a30 <_Z7sendNow6String+0x5c>)
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	f001 fc73 	bl	d62f6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d4a10:	3000      	adds	r0, #0
   d4a12:	bf18      	it	ne
   d4a14:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d4a16:	b004      	add	sp, #16
   d4a18:	bd10      	pop	{r4, pc}
   d4a1a:	bf00      	nop
   d4a1c:	000d84d4 	.word	0x000d84d4
   d4a20:	2003e2fc 	.word	0x2003e2fc
   d4a24:	2003e310 	.word	0x2003e310
   d4a28:	000d843b 	.word	0x000d843b
   d4a2c:	000d841a 	.word	0x000d841a
   d4a30:	000d81da 	.word	0x000d81da

000d4a34 <_Z8senseNow6String>:

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d4a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4a36:	4911      	ldr	r1, [pc, #68]	; (d4a7c <_Z8senseNow6String+0x48>)
   d4a38:	4604      	mov	r4, r0
   d4a3a:	f001 fc5c 	bl	d62f6 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d4a3e:	b198      	cbz	r0, d4a68 <_Z8senseNow6String+0x34>
    state = MEASURING_STATE;                                                      // Set the state to reporting
   d4a40:	4b0f      	ldr	r3, [pc, #60]	; (d4a80 <_Z8senseNow6String+0x4c>)
   d4a42:	2202      	movs	r2, #2
   d4a44:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d4a46:	f7ff fc13 	bl	d4270 <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.62>
   d4a4a:	4b0e      	ldr	r3, [pc, #56]	; (d4a84 <_Z8senseNow6String+0x50>)
    Particle.publish("Function", "Command accepted - sensing now",PRIVATE);       // Acknowledge receipt
   d4a4c:	490e      	ldr	r1, [pc, #56]	; (d4a88 <_Z8senseNow6String+0x54>)
   d4a4e:	781b      	ldrb	r3, [r3, #0]
   d4a50:	2200      	movs	r2, #0
   d4a52:	f88d 2000 	strb.w	r2, [sp]
   d4a56:	a802      	add	r0, sp, #8
   d4a58:	4a0c      	ldr	r2, [pc, #48]	; (d4a8c <_Z8senseNow6String+0x58>)
   d4a5a:	f7ff fb61 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.87.constprop.101>
   d4a5e:	a803      	add	r0, sp, #12
   d4a60:	f7ff fc11 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a64:	2001      	movs	r0, #1
   d4a66:	e006      	b.n	d4a76 <_Z8senseNow6String+0x42>
   d4a68:	4909      	ldr	r1, [pc, #36]	; (d4a90 <_Z8senseNow6String+0x5c>)
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	f001 fc43 	bl	d62f6 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d4a70:	3000      	adds	r0, #0
   d4a72:	bf18      	it	ne
   d4a74:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d4a76:	b004      	add	sp, #16
   d4a78:	bd10      	pop	{r4, pc}
   d4a7a:	bf00      	nop
   d4a7c:	000d84d4 	.word	0x000d84d4
   d4a80:	2003e2fc 	.word	0x2003e2fc
   d4a84:	2003e310 	.word	0x2003e310
   d4a88:	000d843b 	.word	0x000d843b
   d4a8c:	000d8444 	.word	0x000d8444
   d4a90:	000d81da 	.word	0x000d81da

000d4a94 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
   d4a94:	b530      	push	{r4, r5, lr}
   d4a96:	b085      	sub	sp, #20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a98:	2300      	movs	r3, #0
   d4a9a:	4605      	mov	r5, r0
   d4a9c:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d4a9e:	b121      	cbz	r1, d4aaa <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4aa0:	4b14      	ldr	r3, [pc, #80]	; (d4af4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
   d4aa2:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4aa4:	4b14      	ldr	r3, [pc, #80]	; (d4af8 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4aa6:	9100      	str	r1, [sp, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4aa8:	9302      	str	r3, [sp, #8]
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
   d4aaa:	9b02      	ldr	r3, [sp, #8]
   d4aac:	b183      	cbz	r3, d4ad0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4aae:	2010      	movs	r0, #16
   d4ab0:	f7ff faf3 	bl	d409a <_Znwj>
   d4ab4:	4604      	mov	r4, r0
   d4ab6:	b158      	cbz	r0, d4ad0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ab8:	2300      	movs	r3, #0
   d4aba:	6083      	str	r3, [r0, #8]
   d4abc:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4abe:	b17b      	cbz	r3, d4ae0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ac0:	2202      	movs	r2, #2
   d4ac2:	4669      	mov	r1, sp
   d4ac4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4ac6:	9b03      	ldr	r3, [sp, #12]
   d4ac8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4aca:	9b02      	ldr	r3, [sp, #8]
   d4acc:	60a3      	str	r3, [r4, #8]
   d4ace:	e007      	b.n	d4ae0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
   d4ad0:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ad2:	9b02      	ldr	r3, [sp, #8]
   d4ad4:	b15b      	cbz	r3, d4aee <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ad6:	2203      	movs	r2, #3
   d4ad8:	4669      	mov	r1, sp
   d4ada:	4668      	mov	r0, sp
   d4adc:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
   d4ade:	e006      	b.n	d4aee <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d4ae0:	4621      	mov	r1, r4
   d4ae2:	462a      	mov	r2, r5
   d4ae4:	4805      	ldr	r0, [pc, #20]	; (d4afc <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
   d4ae6:	f000 fd0a 	bl	d54fe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4aea:	4604      	mov	r4, r0
   d4aec:	e7f1      	b.n	d4ad2 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
   d4aee:	4620      	mov	r0, r4
   d4af0:	b005      	add	sp, #20
   d4af2:	bd30      	pop	{r4, r5, pc}
   d4af4:	000d40cf 	.word	0x000d40cf
   d4af8:	000d40b7 	.word	0x000d40b7
   d4afc:	000d54d7 	.word	0x000d54d7

000d4b00 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4b00:	2300      	movs	r3, #0
   d4b02:	2204      	movs	r2, #4
   d4b04:	f000 bb90 	b.w	d5228 <spark_variable>

000d4b08 <setup>:

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()
{
   d4b08:	b570      	push	{r4, r5, r6, lr}
   d4b0a:	b0a8      	sub	sp, #160	; 0xa0
 Serial.begin(9600);
   d4b0c:	f001 fdd8 	bl	d66c0 <_Z16_fetch_usbserialv>
   d4b10:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4b14:	f001 fdc8 	bl	d66a8 <_ZN9USBSerial5beginEl>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4b18:	a804      	add	r0, sp, #16
   d4b1a:	f000 fbad 	bl	d5278 <spark_deviceID>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4b1e:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4b20:	2300      	movs	r3, #0
   d4b22:	227d      	movs	r2, #125	; 0x7d
   d4b24:	a908      	add	r1, sp, #32
   d4b26:	a804      	add	r0, sp, #16
   d4b28:	f001 fbf7 	bl	d631a <_ZNK6String8getBytesEPhjj>
   d4b2c:	4623      	mov	r3, r4
   d4b2e:	4622      	mov	r2, r4
   d4b30:	493a      	ldr	r1, [pc, #232]	; (d4c1c <setup+0x114>)
   d4b32:	9401      	str	r4, [sp, #4]
   d4b34:	9400      	str	r4, [sp, #0]
   d4b36:	a808      	add	r0, sp, #32
   d4b38:	f000 fbae 	bl	d5298 <spark_subscribe>
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic, 125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                  // Subscribe to the integration response event

  // Particle Functions.
  Particle.function("verboseMode", SetVerboseMode);                               // Added Particle Function For VerboseMode.
   d4b3c:	4938      	ldr	r1, [pc, #224]	; (d4c20 <setup+0x118>)
   d4b3e:	4839      	ldr	r0, [pc, #228]	; (d4c24 <setup+0x11c>)
   d4b40:	f7ff ffa8 	bl	d4a94 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Get-Reading", senseNow);                                     // This function will force it to get a reading and set the refresh rate to 15mins.
   d4b44:	4938      	ldr	r1, [pc, #224]	; (d4c28 <setup+0x120>)
   d4b46:	4839      	ldr	r0, [pc, #228]	; (d4c2c <setup+0x124>)
   d4b48:	f7ff ffa4 	bl	d4a94 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Report", sendNow);                                      // This function will force it to get a reading and set the refresh rate to 15mins.
   d4b4c:	4938      	ldr	r1, [pc, #224]	; (d4c30 <setup+0x128>)
   d4b4e:	4839      	ldr	r0, [pc, #228]	; (d4c34 <setup+0x12c>)
   d4b50:	f7ff ffa0 	bl	d4a94 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Low-Power-Mode", LowPowerMode);                              // This function will send the device to low power mode or napping.  
   d4b54:	4938      	ldr	r1, [pc, #224]	; (d4c38 <setup+0x130>)
   d4b56:	4839      	ldr	r0, [pc, #228]	; (d4c3c <setup+0x134>)
   d4b58:	f7ff ff9c 	bl	d4a94 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  
  // Particle Variables
  Particle.variable("Humidity",humidityString);                                   // Check the humidity from particle console. 
   d4b5c:	4938      	ldr	r1, [pc, #224]	; (d4c40 <setup+0x138>)
   d4b5e:	4839      	ldr	r0, [pc, #228]	; (d4c44 <setup+0x13c>)
   d4b60:	f7ff ffce 	bl	d4b00 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Temperature", temperatureString);                            // Setup Particle Variable
   d4b64:	4938      	ldr	r1, [pc, #224]	; (d4c48 <setup+0x140>)
   d4b66:	4839      	ldr	r0, [pc, #228]	; (d4c4c <setup+0x144>)
   d4b68:	f7ff ffca 	bl	d4b00 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
   d4b6c:	4938      	ldr	r1, [pc, #224]	; (d4c50 <setup+0x148>)
   d4b6e:	4839      	ldr	r0, [pc, #228]	; (d4c54 <setup+0x14c>)
   d4b70:	f7ff ffc6 	bl	d4b00 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
   d4b74:	4938      	ldr	r1, [pc, #224]	; (d4c58 <setup+0x150>)
   d4b76:	4839      	ldr	r0, [pc, #228]	; (d4c5c <setup+0x154>)
   d4b78:	f7ff ffc2 	bl	d4b00 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell
   d4b7c:	4938      	ldr	r1, [pc, #224]	; (d4c60 <setup+0x158>)
   d4b7e:	4839      	ldr	r0, [pc, #228]	; (d4c64 <setup+0x15c>)
   d4b80:	f7ff ffbe 	bl	d4b00 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
   d4b84:	f001 fea6 	bl	d68d4 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f000 f9c7 	bl	d4f1c <HAL_EEPROM_Read>
   d4b8e:	2802      	cmp	r0, #2
   d4b90:	d111      	bne.n	d4bb6 <setup+0xae>
    for (int i=1; i < 100; i++) {
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                              // Retrive system recount data from FRAM
   d4b92:	f001 fe9f 	bl	d68d4 <_Z21__fetch_global_EEPROMv>
   d4b96:	2002      	movs	r0, #2
   d4b98:	f000 f9c0 	bl	d4f1c <HAL_EEPROM_Read>
   d4b9c:	4b32      	ldr	r3, [pc, #200]	; (d4c68 <setup+0x160>)
  
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
   d4b9e:	2144      	movs	r1, #68	; 0x44
    for (int i=1; i < 100; i++) {
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                              // Retrive system recount data from FRAM
   d4ba0:	6018      	str	r0, [r3, #0]
  
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
   d4ba2:	4832      	ldr	r0, [pc, #200]	; (d4c6c <setup+0x164>)
   d4ba4:	f000 f8b7 	bl	d4d16 <_ZN14Adafruit_SHT315beginEh>
   d4ba8:	b9e8      	cbnz	r0, d4be6 <setup+0xde>
    Serial.println("Couldn't find SHT31");
   d4baa:	f001 fd89 	bl	d66c0 <_Z16_fetch_usbserialv>
   d4bae:	4930      	ldr	r1, [pc, #192]	; (d4c70 <setup+0x168>)
   d4bb0:	f001 f9eb 	bl	d5f8a <_ZN5Print7printlnEPKc>
   d4bb4:	e017      	b.n	d4be6 <setup+0xde>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
   d4bb6:	ae28      	add	r6, sp, #160	; 0xa0
   d4bb8:	f001 fe8c 	bl	d68d4 <_Z21__fetch_global_EEPROMv>
   d4bbc:	2302      	movs	r3, #2
   d4bbe:	f846 3d94 	str.w	r3, [r6, #-148]!
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4bc2:	2204      	movs	r2, #4
   d4bc4:	4631      	mov	r1, r6
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	f000 f9c0 	bl	d4f4c <HAL_EEPROM_Put>
    for (int i=1; i < 100; i++) {
   d4bcc:	2501      	movs	r5, #1
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
   d4bce:	f001 fe81 	bl	d68d4 <_Z21__fetch_global_EEPROMv>
   d4bd2:	4628      	mov	r0, r5
   d4bd4:	2204      	movs	r2, #4
   d4bd6:	4631      	mov	r1, r6
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4bd8:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
   d4bda:	9403      	str	r4, [sp, #12]
   d4bdc:	f000 f9b6 	bl	d4f4c <HAL_EEPROM_Put>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4be0:	2d64      	cmp	r5, #100	; 0x64
   d4be2:	d1f4      	bne.n	d4bce <setup+0xc6>
   d4be4:	e7d5      	b.n	d4b92 <setup+0x8a>
  
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
    Serial.println("Couldn't find SHT31");
  }

  takeMeasurements();
   d4be6:	f7ff faab 	bl	d4140 <_Z16takeMeasurementsv>
  
  stayAwake = stayAwakeLong;                                                      // Stay awake longer on startup - helps with recovery for deployed devices
   d4bea:	4b22      	ldr	r3, [pc, #136]	; (d4c74 <setup+0x16c>)
   d4bec:	4a22      	ldr	r2, [pc, #136]	; (d4c78 <setup+0x170>)
   d4bee:	601a      	str	r2, [r3, #0]
   d4bf0:	f000 f97c 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
  stayAWakeTimeStamp = millis();                                                  // Reset the timestamp here as the connection sequence could take a while
   d4bf4:	4b21      	ldr	r3, [pc, #132]	; (d4c7c <setup+0x174>)
   d4bf6:	6018      	str	r0, [r3, #0]


  

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
   d4bf8:	4b21      	ldr	r3, [pc, #132]	; (d4c80 <setup+0x178>)
   d4bfa:	2201      	movs	r2, #1
   d4bfc:	701a      	strb	r2, [r3, #0]
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
   d4bfe:	4b21      	ldr	r3, [pc, #132]	; (d4c84 <setup+0x17c>)
   d4c00:	781b      	ldrb	r3, [r3, #0]
   d4c02:	b12b      	cbz	r3, d4c10 <setup+0x108>
   d4c04:	4b20      	ldr	r3, [pc, #128]	; (d4c88 <setup+0x180>)
   d4c06:	781b      	ldrb	r3, [r3, #0]
   d4c08:	4293      	cmp	r3, r2
   d4c0a:	d001      	beq.n	d4c10 <setup+0x108>
   d4c0c:	f7ff fc82 	bl	d4514 <_Z15transitionStatev>
{
 Serial.begin(9600);
  
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.
  char responseTopic[125];
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
   d4c10:	a804      	add	r0, sp, #16
   d4c12:	f001 fb16 	bl	d6242 <_ZN6StringD1Ev>

  

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}
   d4c16:	b028      	add	sp, #160	; 0xa0
   d4c18:	bd70      	pop	{r4, r5, r6, pc}
   d4c1a:	bf00      	nop
   d4c1c:	000d446d 	.word	0x000d446d
   d4c20:	000d42b5 	.word	0x000d42b5
   d4c24:	000d8463 	.word	0x000d8463
   d4c28:	000d4a35 	.word	0x000d4a35
   d4c2c:	000d846f 	.word	0x000d846f
   d4c30:	000d49d5 	.word	0x000d49d5
   d4c34:	000d847b 	.word	0x000d847b
   d4c38:	000d40ed 	.word	0x000d40ed
   d4c3c:	000d8487 	.word	0x000d8487
   d4c40:	2003e340 	.word	0x2003e340
   d4c44:	000d8496 	.word	0x000d8496
   d4c48:	2003e2c4 	.word	0x2003e2c4
   d4c4c:	000d849f 	.word	0x000d849f
   d4c50:	000d81d4 	.word	0x000d81d4
   d4c54:	000d84ab 	.word	0x000d84ab
   d4c58:	2003e318 	.word	0x2003e318
   d4c5c:	000d84b3 	.word	0x000d84b3
   d4c60:	2003e350 	.word	0x2003e350
   d4c64:	000d84ba 	.word	0x000d84ba
   d4c68:	2003e300 	.word	0x2003e300
   d4c6c:	2003e330 	.word	0x2003e330
   d4c70:	000d84c2 	.word	0x000d84c2
   d4c74:	2003e30c 	.word	0x2003e30c
   d4c78:	00015f90 	.word	0x00015f90
   d4c7c:	2003e314 	.word	0x2003e314
   d4c80:	2003e2fc 	.word	0x2003e2fc
   d4c84:	2003e32d 	.word	0x2003e32d
   d4c88:	2003e32c 	.word	0x2003e32c

000d4c8c <_GLOBAL__sub_I_sht31>:
  {
    lowPowerModeOn = false;
    return 1;
  }
  else return 0;
   d4c8c:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c8e:	4b06      	ldr	r3, [pc, #24]	; (d4ca8 <_GLOBAL__sub_I_sht31+0x1c>)
   d4c90:	2200      	movs	r2, #0
   d4c92:	601a      	str	r2, [r3, #0]
   d4c94:	4b05      	ldr	r3, [pc, #20]	; (d4cac <_GLOBAL__sub_I_sht31+0x20>)
   d4c96:	2201      	movs	r2, #1
   d4c98:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c9a:	f000 f967 	bl	d4f6c <HAL_Pin_Map>
const char releaseNumber[6] = "1.22"; // Displays the release on the menu

#include "adafruit-sht31.h"           //Include SHT-31 Library

// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();    // Initialize sensor object
   d4c9e:	4804      	ldr	r0, [pc, #16]	; (d4cb0 <_GLOBAL__sub_I_sht31+0x24>)
  {
    lowPowerModeOn = false;
    return 1;
  }
  else return 0;
   d4ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const char releaseNumber[6] = "1.22"; // Displays the release on the menu

#include "adafruit-sht31.h"           //Include SHT-31 Library

// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();    // Initialize sensor object
   d4ca4:	f000 b814 	b.w	d4cd0 <_ZN14Adafruit_SHT31C1Ev>
   d4ca8:	2003e328 	.word	0x2003e328
   d4cac:	2003e310 	.word	0x2003e310
   d4cb0:	2003e330 	.word	0x2003e330

000d4cb4 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4cb4:	f000 b95a 	b.w	d4f6c <HAL_Pin_Map>

000d4cb8 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	f000 f957 	bl	d4f6c <HAL_Pin_Map>
   d4cbe:	4b01      	ldr	r3, [pc, #4]	; (d4cc4 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4cc0:	6018      	str	r0, [r3, #0]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	2003e364 	.word	0x2003e364

000d4cc8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4cc8:	6803      	ldr	r3, [r0, #0]
   d4cca:	b2c9      	uxtb	r1, r1
   d4ccc:	689b      	ldr	r3, [r3, #8]
   d4cce:	4718      	bx	r3

000d4cd0 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4cd0:	4770      	bx	lr

000d4cd2 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4cd2:	b538      	push	{r3, r4, r5, lr}
   d4cd4:	4605      	mov	r5, r0
   d4cd6:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4cd8:	f001 fe10 	bl	d68fc <_Z19__fetch_global_Wirev>
   d4cdc:	7829      	ldrb	r1, [r5, #0]
   d4cde:	f000 ff3f 	bl	d5b60 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4ce2:	f001 fe0b 	bl	d68fc <_Z19__fetch_global_Wirev>
   d4ce6:	0a21      	lsrs	r1, r4, #8
   d4ce8:	f7ff ffee 	bl	d4cc8 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4cec:	f001 fe06 	bl	d68fc <_Z19__fetch_global_Wirev>
   d4cf0:	b2e1      	uxtb	r1, r4
   d4cf2:	f7ff ffe9 	bl	d4cc8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4cf6:	f001 fe01 	bl	d68fc <_Z19__fetch_global_Wirev>
}
   d4cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d4cfe:	f000 bf37 	b.w	d5b70 <_ZN7TwoWire15endTransmissionEv>

000d4d02 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d4d02:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4d04:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4d08:	f7ff ffe3 	bl	d4cd2 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d4d0c:	200a      	movs	r0, #10
}
   d4d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d4d12:	f000 bb69 	b.w	d53e8 <delay>

000d4d16 <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4d16:	b538      	push	{r3, r4, r5, lr}
   d4d18:	4604      	mov	r4, r0
   d4d1a:	460d      	mov	r5, r1
  Wire.begin();
   d4d1c:	f001 fdee 	bl	d68fc <_Z19__fetch_global_Wirev>
   d4d20:	f000 ff0c 	bl	d5b3c <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d4d24:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d4d26:	7025      	strb	r5, [r4, #0]
  reset();
   d4d28:	f7ff ffeb 	bl	d4d02 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d4d2c:	2001      	movs	r0, #1
   d4d2e:	bd38      	pop	{r3, r4, r5, pc}

000d4d30 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d4d30:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d4d32:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d4d34:	4291      	cmp	r1, r2
   d4d36:	d00e      	beq.n	d4d56 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4d38:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4d3c:	4058      	eors	r0, r3
   d4d3e:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4d40:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4d44:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d4d48:	bf18      	it	ne
   d4d4a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4d4e:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4d50:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4d52:	d1f5      	bne.n	d4d40 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4d54:	e7ee      	b.n	d4d34 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d4d56:	4770      	bx	lr

000d4d58 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4d58:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4d5a:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4d5e:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4d60:	f7ff ffb7 	bl	d4cd2 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d4d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4d68:	f000 fb3e 	bl	d53e8 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4d6c:	f001 fdc6 	bl	d68fc <_Z19__fetch_global_Wirev>
   d4d70:	2206      	movs	r2, #6
   d4d72:	7821      	ldrb	r1, [r4, #0]
   d4d74:	f000 fef1 	bl	d5b5a <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
   d4d78:	f001 fdc0 	bl	d68fc <_Z19__fetch_global_Wirev>
   d4d7c:	6803      	ldr	r3, [r0, #0]
   d4d7e:	691b      	ldr	r3, [r3, #16]
   d4d80:	4798      	blx	r3
   d4d82:	2806      	cmp	r0, #6
   d4d84:	d14a      	bne.n	d4e1c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d4d86:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d4d88:	f001 fdb8 	bl	d68fc <_Z19__fetch_global_Wirev>
   d4d8c:	6803      	ldr	r3, [r0, #0]
   d4d8e:	695b      	ldr	r3, [r3, #20]
   d4d90:	4798      	blx	r3
   d4d92:	f80d 0005 	strb.w	r0, [sp, r5]
   d4d96:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d4d98:	2d06      	cmp	r5, #6
   d4d9a:	d1f5      	bne.n	d4d88 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4d9c:	2202      	movs	r2, #2
   d4d9e:	4669      	mov	r1, sp
   d4da0:	4620      	mov	r0, r4
   d4da2:	f7ff ffc5 	bl	d4d30 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4da6:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d4daa:	4285      	cmp	r5, r0
   d4dac:	d136      	bne.n	d4e1c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4dae:	2202      	movs	r2, #2
   d4db0:	f10d 0103 	add.w	r1, sp, #3
   d4db4:	4620      	mov	r0, r4
   d4db6:	f7ff ffbb 	bl	d4d30 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4dba:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d4dbe:	4285      	cmp	r5, r0
   d4dc0:	d12c      	bne.n	d4e1c <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4dc2:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d4dc6:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d4dca:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4dce:	ba40      	rev16	r0, r0
   d4dd0:	b280      	uxth	r0, r0
   d4dd2:	f002 f869 	bl	d6ea8 <__aeabi_ui2d>
  stemp *= 175;
   d4dd6:	a318      	add	r3, pc, #96	; (adr r3, d4e38 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ddc:	f002 f8da 	bl	d6f94 <__aeabi_dmul>
  stemp /= 0xffff;
   d4de0:	a311      	add	r3, pc, #68	; (adr r3, d4e28 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4de6:	f002 f9ff 	bl	d71e8 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d4dea:	2200      	movs	r2, #0
   d4dec:	4b10      	ldr	r3, [pc, #64]	; (d4e30 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4dee:	f001 ff1d 	bl	d6c2c <__aeabi_dsub>
   d4df2:	f002 fbc7 	bl	d7584 <__aeabi_d2f>
   d4df6:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d4df8:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d4dfc:	f002 f854 	bl	d6ea8 <__aeabi_ui2d>
  shum *= 100;
   d4e00:	2200      	movs	r2, #0
   d4e02:	4b0c      	ldr	r3, [pc, #48]	; (d4e34 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4e04:	f002 f8c6 	bl	d6f94 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d4e08:	a307      	add	r3, pc, #28	; (adr r3, d4e28 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e0e:	f002 f9eb 	bl	d71e8 <__aeabi_ddiv>
   d4e12:	f002 fbb7 	bl	d7584 <__aeabi_d2f>
   d4e16:	6060      	str	r0, [r4, #4]
  
  return true;
   d4e18:	2001      	movs	r0, #1
   d4e1a:	e000      	b.n	d4e1e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d4e1c:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d4e1e:	b002      	add	sp, #8
   d4e20:	bd70      	pop	{r4, r5, r6, pc}
   d4e22:	bf00      	nop
   d4e24:	f3af 8000 	nop.w
   d4e28:	00000000 	.word	0x00000000
   d4e2c:	40efffe0 	.word	0x40efffe0
   d4e30:	40468000 	.word	0x40468000
   d4e34:	40590000 	.word	0x40590000
   d4e38:	00000000 	.word	0x00000000
   d4e3c:	4065e000 	.word	0x4065e000

000d4e40 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d4e40:	b510      	push	{r4, lr}
   d4e42:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4e44:	f7ff ff88 	bl	d4d58 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4e48:	b110      	cbz	r0, d4e50 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d4e4a:	ed94 0a02 	vldr	s0, [r4, #8]
   d4e4e:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d4e50:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4e58 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d4e54:	bd10      	pop	{r4, pc}
   d4e56:	bf00      	nop
   d4e58:	7fc00000 	.word	0x7fc00000

000d4e5c <_ZN14Adafruit_SHT3112readHumidityEv>:
  

float Adafruit_SHT31::readHumidity(void) {
   d4e5c:	b510      	push	{r4, lr}
   d4e5e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4e60:	f7ff ff7a 	bl	d4d58 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4e64:	b110      	cbz	r0, d4e6c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>

  return humidity;
   d4e66:	ed94 0a01 	vldr	s0, [r4, #4]
   d4e6a:	bd10      	pop	{r4, pc}
  return temp;
}
  

float Adafruit_SHT31::readHumidity(void) {
  if (! readTempHum()) return NAN;
   d4e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4e74 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>

  return humidity;
}
   d4e70:	bd10      	pop	{r4, pc}
   d4e72:	bf00      	nop
   d4e74:	7fc00000 	.word	0x7fc00000

000d4e78 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4e78:	f000 b878 	b.w	d4f6c <HAL_Pin_Map>

000d4e7c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <os_thread_is_current+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	689b      	ldr	r3, [r3, #8]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030248 	.word	0x00030248

000d4e8c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <os_thread_join+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	691b      	ldr	r3, [r3, #16]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030248 	.word	0x00030248

000d4e9c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <os_thread_cleanup+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	695b      	ldr	r3, [r3, #20]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030248 	.word	0x00030248

000d4eac <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <os_mutex_create+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030248 	.word	0x00030248

000d4ebc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <os_mutex_recursive_create+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030248 	.word	0x00030248

000d4ecc <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <HAL_Core_System_Reset_Ex+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030234 	.word	0x00030234

000d4edc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <HAL_RNG_GetRandomNumber+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	685b      	ldr	r3, [r3, #4]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030218 	.word	0x00030218

000d4eec <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	695b      	ldr	r3, [r3, #20]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030218 	.word	0x00030218

000d4efc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <HAL_RTC_Get_UnixTime+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	69db      	ldr	r3, [r3, #28]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030218 	.word	0x00030218

000d4f0c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <HAL_EEPROM_Init+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030218 	.word	0x00030218

000d4f1c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <HAL_EEPROM_Read+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030218 	.word	0x00030218

000d4f2c <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <HAL_EEPROM_Write+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030218 	.word	0x00030218

000d4f3c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <HAL_EEPROM_Get+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	00030218 	.word	0x00030218

000d4f4c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <HAL_EEPROM_Put+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030218 	.word	0x00030218

000d4f5c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <HAL_RTC_Time_Is_Valid+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030218 	.word	0x00030218

000d4f6c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <HAL_Pin_Map+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	681b      	ldr	r3, [r3, #0]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	0003022c 	.word	0x0003022c

000d4f7c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <HAL_Validate_Pin_Function+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	685b      	ldr	r3, [r3, #4]
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	0003022c 	.word	0x0003022c

000d4f8c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <HAL_ADC_Read+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	0003022c 	.word	0x0003022c

000d4f9c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <HAL_I2C_Begin+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	68db      	ldr	r3, [r3, #12]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030228 	.word	0x00030228

000d4fac <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <HAL_I2C_Request_Data+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	695b      	ldr	r3, [r3, #20]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030228 	.word	0x00030228

000d4fbc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <HAL_I2C_Begin_Transmission+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	699b      	ldr	r3, [r3, #24]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030228 	.word	0x00030228

000d4fcc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <HAL_I2C_End_Transmission+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	69db      	ldr	r3, [r3, #28]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030228 	.word	0x00030228

000d4fdc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <HAL_I2C_Write_Data+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6a1b      	ldr	r3, [r3, #32]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030228 	.word	0x00030228

000d4fec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <HAL_I2C_Available_Data+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030228 	.word	0x00030228

000d4ffc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <HAL_I2C_Read_Data+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030228 	.word	0x00030228

000d500c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <HAL_I2C_Peek_Data+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030228 	.word	0x00030228

000d501c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <HAL_I2C_Flush_Data+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030228 	.word	0x00030228

000d502c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <HAL_I2C_Is_Enabled+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030228 	.word	0x00030228

000d503c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <HAL_I2C_Init+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030228 	.word	0x00030228

000d504c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <inet_inet_ntop+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	695b      	ldr	r3, [r3, #20]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030264 	.word	0x00030264

000d505c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <netdb_freeaddrinfo+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	689b      	ldr	r3, [r3, #8]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030268 	.word	0x00030268

000d506c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <netdb_getaddrinfo+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	68db      	ldr	r3, [r3, #12]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030268 	.word	0x00030268

000d507c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_SPI_Init+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	69db      	ldr	r3, [r3, #28]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	00030230 	.word	0x00030230

000d508c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_SPI_Is_Enabled+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	6a1b      	ldr	r3, [r3, #32]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030230 	.word	0x00030230

000d509c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <HAL_USART_Init+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	681b      	ldr	r3, [r3, #0]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003023c 	.word	0x0003023c

000d50ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <HAL_USART_Write_Data+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	68db      	ldr	r3, [r3, #12]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003023c 	.word	0x0003023c

000d50bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <HAL_USART_Available_Data+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	691b      	ldr	r3, [r3, #16]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003023c 	.word	0x0003023c

000d50cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <HAL_USART_Read_Data+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	695b      	ldr	r3, [r3, #20]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	0003023c 	.word	0x0003023c

000d50dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <HAL_USART_Peek_Data+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	699b      	ldr	r3, [r3, #24]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	0003023c 	.word	0x0003023c

000d50ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <HAL_USART_Flush_Data+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	69db      	ldr	r3, [r3, #28]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	0003023c 	.word	0x0003023c

000d50fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <HAL_USART_Is_Enabled+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6a1b      	ldr	r3, [r3, #32]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	0003023c 	.word	0x0003023c

000d510c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <HAL_USART_Available_Data_For_Write+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	0003023c 	.word	0x0003023c

000d511c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <HAL_USB_USART_Init+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	681b      	ldr	r3, [r3, #0]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	0003024c 	.word	0x0003024c

000d512c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <HAL_USB_USART_Begin+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	685b      	ldr	r3, [r3, #4]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003024c 	.word	0x0003024c

000d513c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <HAL_USB_USART_Available_Data+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	691b      	ldr	r3, [r3, #16]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	0003024c 	.word	0x0003024c

000d514c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	695b      	ldr	r3, [r3, #20]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	0003024c 	.word	0x0003024c

000d515c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <HAL_USB_USART_Receive_Data+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	699b      	ldr	r3, [r3, #24]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003024c 	.word	0x0003024c

000d516c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <HAL_USB_USART_Send_Data+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	69db      	ldr	r3, [r3, #28]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	0003024c 	.word	0x0003024c

000d517c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <HAL_USB_USART_Flush_Data+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	6a1b      	ldr	r3, [r3, #32]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	0003024c 	.word	0x0003024c

000d518c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <system_mode+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	681b      	ldr	r3, [r3, #0]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030220 	.word	0x00030220

000d519c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <set_system_mode+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	685b      	ldr	r3, [r3, #4]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030220 	.word	0x00030220

000d51ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <system_delay_ms+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	695b      	ldr	r3, [r3, #20]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030220 	.word	0x00030220

000d51bc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <application_thread_current+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030220 	.word	0x00030220

000d51cc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <application_thread_invoke+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030220 	.word	0x00030220

000d51dc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <system_thread_get_state+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030220 	.word	0x00030220

000d51ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b03      	ldr	r3, [pc, #12]	; (d51fc <system_ctrl_set_app_request_handler+0x10>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d51f6:	9301      	str	r3, [sp, #4]
   d51f8:	bd08      	pop	{r3, pc}
   d51fa:	0000      	.short	0x0000
   d51fc:	00030220 	.word	0x00030220

000d5200 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b03      	ldr	r3, [pc, #12]	; (d5210 <system_ctrl_set_result+0x10>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d520a:	9301      	str	r3, [sp, #4]
   d520c:	bd08      	pop	{r3, pc}
   d520e:	0000      	.short	0x0000
   d5210:	00030220 	.word	0x00030220

000d5214 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b03      	ldr	r3, [pc, #12]	; (d5224 <system_sleep_pins+0x10>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d521e:	9301      	str	r3, [sp, #4]
   d5220:	bd08      	pop	{r3, pc}
   d5222:	0000      	.short	0x0000
   d5224:	00030220 	.word	0x00030220

000d5228 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <spark_variable+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	681b      	ldr	r3, [r3, #0]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030244 	.word	0x00030244

000d5238 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <spark_function+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	685b      	ldr	r3, [r3, #4]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030244 	.word	0x00030244

000d5248 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <spark_process+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	689b      	ldr	r3, [r3, #8]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030244 	.word	0x00030244

000d5258 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <spark_cloud_flag_connect+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	68db      	ldr	r3, [r3, #12]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030244 	.word	0x00030244

000d5268 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <spark_cloud_flag_connected+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	695b      	ldr	r3, [r3, #20]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030244 	.word	0x00030244

000d5278 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <spark_deviceID+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	69db      	ldr	r3, [r3, #28]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030244 	.word	0x00030244

000d5288 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <spark_send_event+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	6a1b      	ldr	r3, [r3, #32]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030244 	.word	0x00030244

000d5298 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <spark_subscribe+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030244 	.word	0x00030244

000d52a8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <spark_sync_time+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030244 	.word	0x00030244

000d52b8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <spark_sync_time_pending+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030244 	.word	0x00030244

000d52c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030244 	.word	0x00030244

000d52d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <network_connect+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	685b      	ldr	r3, [r3, #4]
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030240 	.word	0x00030240

000d52e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <network_connecting+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	689b      	ldr	r3, [r3, #8]
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030240 	.word	0x00030240

000d52f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <network_disconnect+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	68db      	ldr	r3, [r3, #12]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	00030240 	.word	0x00030240

000d5308 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <network_ready+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	691b      	ldr	r3, [r3, #16]
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	00030240 	.word	0x00030240

000d5318 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <network_on+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	695b      	ldr	r3, [r3, #20]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030240 	.word	0x00030240

000d5328 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <network_off+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	699b      	ldr	r3, [r3, #24]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030240 	.word	0x00030240

000d5338 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <network_listen+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	69db      	ldr	r3, [r3, #28]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030240 	.word	0x00030240

000d5348 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <network_listening+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6a1b      	ldr	r3, [r3, #32]
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030240 	.word	0x00030240

000d5358 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <network_set_listen_timeout+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030240 	.word	0x00030240

000d5368 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <network_get_listen_timeout+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030240 	.word	0x00030240

000d5378 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <malloc+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	681b      	ldr	r3, [r3, #0]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	0003021c 	.word	0x0003021c

000d5388 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <free+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	685b      	ldr	r3, [r3, #4]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	0003021c 	.word	0x0003021c

000d5398 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <realloc+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	689b      	ldr	r3, [r3, #8]
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	0003021c 	.word	0x0003021c

000d53a8 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <siscanf+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	699b      	ldr	r3, [r3, #24]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	0003021c 	.word	0x0003021c

000d53b8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <snprintf+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	69db      	ldr	r3, [r3, #28]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	0003021c 	.word	0x0003021c

000d53c8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <abort+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	0003021c 	.word	0x0003021c

000d53d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <_malloc_r+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	0003021c 	.word	0x0003021c

000d53e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d53e8:	2100      	movs	r1, #0
   d53ea:	f7ff bedf 	b.w	d51ac <system_delay_ms>

000d53ee <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d53ee:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d53f0:	6883      	ldr	r3, [r0, #8]
   d53f2:	4604      	mov	r4, r0
   d53f4:	b90b      	cbnz	r3, d53fa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d53f6:	f001 faca 	bl	d698e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d53fa:	68c3      	ldr	r3, [r0, #12]
   d53fc:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d53fe:	68a3      	ldr	r3, [r4, #8]
   d5400:	b11b      	cbz	r3, d540a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5402:	2203      	movs	r2, #3
   d5404:	4621      	mov	r1, r4
   d5406:	4620      	mov	r0, r4
   d5408:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d540a:	4620      	mov	r0, r4
   d540c:	2110      	movs	r1, #16
}
   d540e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5412:	f001 baba 	b.w	d698a <_ZdlPvj>

000d5416 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5416:	680b      	ldr	r3, [r1, #0]
   d5418:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d541a:	b113      	cbz	r3, d5422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d541c:	685a      	ldr	r2, [r3, #4]
   d541e:	3201      	adds	r2, #1
   d5420:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5422:	4770      	bx	lr

000d5424 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5424:	4802      	ldr	r0, [pc, #8]	; (d5430 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5426:	2300      	movs	r3, #0
   d5428:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d542a:	f7ff bd47 	b.w	d4ebc <os_mutex_recursive_create>
   d542e:	bf00      	nop
   d5430:	2003e368 	.word	0x2003e368

000d5434 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5434:	4770      	bx	lr

000d5436 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5436:	2000      	movs	r0, #0
   d5438:	4770      	bx	lr

000d543a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d543a:	b510      	push	{r4, lr}
   d543c:	2110      	movs	r1, #16
   d543e:	4604      	mov	r4, r0
   d5440:	f001 faa3 	bl	d698a <_ZdlPvj>
   d5444:	4620      	mov	r0, r4
   d5446:	bd10      	pop	{r4, pc}

000d5448 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5448:	b508      	push	{r3, lr}
      { delete this; }
   d544a:	b108      	cbz	r0, d5450 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d544c:	f7ff fff5 	bl	d543a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5450:	bd08      	pop	{r3, pc}

000d5452 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5452:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5454:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5456:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5458:	b113      	cbz	r3, d5460 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d545a:	2203      	movs	r2, #3
   d545c:	4601      	mov	r1, r0
   d545e:	4798      	blx	r3
    }
   d5460:	4620      	mov	r0, r4
   d5462:	bd10      	pop	{r4, pc}

000d5464 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5464:	2200      	movs	r2, #0
   d5466:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5468:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d546a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d546e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5470:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5474:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5476:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5478:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d547a:	680c      	ldr	r4, [r1, #0]
   d547c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d547e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5480:	bd10      	pop	{r4, pc}

000d5482 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5482:	b510      	push	{r4, lr}
   d5484:	4604      	mov	r4, r0
    free((void*)msg_);
   d5486:	6800      	ldr	r0, [r0, #0]
   d5488:	f7ff ff7e 	bl	d5388 <free>
}
   d548c:	4620      	mov	r0, r4
   d548e:	bd10      	pop	{r4, pc}

000d5490 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5490:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5492:	68c4      	ldr	r4, [r0, #12]
   d5494:	b1f4      	cbz	r4, d54d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5496:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5498:	2b02      	cmp	r3, #2
   d549a:	d103      	bne.n	d54a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d549c:	f104 000c 	add.w	r0, r4, #12
   d54a0:	f7ff ffef 	bl	d5482 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d54a4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d54a6:	b135      	cbz	r5, d54b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54a8:	4628      	mov	r0, r5
   d54aa:	f7ff ffd2 	bl	d5452 <_ZNSt14_Function_baseD1Ev>
   d54ae:	2110      	movs	r1, #16
   d54b0:	4628      	mov	r0, r5
   d54b2:	f001 fa6a 	bl	d698a <_ZdlPvj>
   d54b6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d54b8:	b135      	cbz	r5, d54c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d54ba:	4628      	mov	r0, r5
   d54bc:	f7ff ffc9 	bl	d5452 <_ZNSt14_Function_baseD1Ev>
   d54c0:	2110      	movs	r1, #16
   d54c2:	4628      	mov	r0, r5
   d54c4:	f001 fa61 	bl	d698a <_ZdlPvj>
   d54c8:	4620      	mov	r0, r4
   d54ca:	2114      	movs	r1, #20
   d54cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d54d0:	f001 ba5b 	b.w	d698a <_ZdlPvj>
   d54d4:	bd38      	pop	{r3, r4, r5, pc}

000d54d6 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d54d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d54d8:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d54da:	4668      	mov	r0, sp
   d54dc:	f000 fef8 	bl	d62d0 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54e0:	68a3      	ldr	r3, [r4, #8]
   d54e2:	b90b      	cbnz	r3, d54e8 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d54e4:	f001 fa53 	bl	d698e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54e8:	68e3      	ldr	r3, [r4, #12]
   d54ea:	4669      	mov	r1, sp
   d54ec:	4620      	mov	r0, r4
   d54ee:	4798      	blx	r3
   d54f0:	4604      	mov	r4, r0
   d54f2:	4668      	mov	r0, sp
   d54f4:	f000 fea5 	bl	d6242 <_ZN6StringD1Ev>
}
   d54f8:	4620      	mov	r0, r4
   d54fa:	b004      	add	sp, #16
   d54fc:	bd10      	pop	{r4, pc}

000d54fe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d54fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5500:	2410      	movs	r4, #16
   d5502:	b085      	sub	sp, #20
   d5504:	4607      	mov	r7, r0
   d5506:	460e      	mov	r6, r1
   d5508:	4615      	mov	r5, r2
   d550a:	2100      	movs	r1, #0
   d550c:	4622      	mov	r2, r4
   d550e:	4668      	mov	r0, sp
   d5510:	f002 f99d 	bl	d784e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5514:	2200      	movs	r2, #0
   d5516:	4669      	mov	r1, sp
   d5518:	4610      	mov	r0, r2
         size = sizeof(*this);
   d551a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d551e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5520:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5522:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5524:	f7ff fe88 	bl	d5238 <spark_function>
}
   d5528:	b005      	add	sp, #20
   d552a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d552c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d552c:	b513      	push	{r0, r1, r4, lr}
   d552e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5530:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5534:	2300      	movs	r3, #0
   d5536:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5538:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d553a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d553c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d553e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5540:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5542:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5544:	f7fe fe9f 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5548:	4620      	mov	r0, r4
   d554a:	b002      	add	sp, #8
   d554c:	bd10      	pop	{r4, pc}

000d554e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d554e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5550:	460c      	mov	r4, r1
   d5552:	ad02      	add	r5, sp, #8
   d5554:	f854 3b04 	ldr.w	r3, [r4], #4
   d5558:	f845 3d08 	str.w	r3, [r5, #-8]!
   d555c:	4606      	mov	r6, r0
   d555e:	460f      	mov	r7, r1
   d5560:	a801      	add	r0, sp, #4
   d5562:	4621      	mov	r1, r4
   d5564:	f7ff ff57 	bl	d5416 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5568:	4629      	mov	r1, r5
   d556a:	4630      	mov	r0, r6
   d556c:	f7ff ffde 	bl	d552c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5570:	a801      	add	r0, sp, #4
   d5572:	f7fe fe88 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5576:	4620      	mov	r0, r4
   d5578:	f7fe fe85 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d557c:	4638      	mov	r0, r7
   d557e:	2108      	movs	r1, #8
   d5580:	f001 fa03 	bl	d698a <_ZdlPvj>
        return p;
    }
   d5584:	4630      	mov	r0, r6
   d5586:	b003      	add	sp, #12
   d5588:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d558a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d558a:	b513      	push	{r0, r1, r4, lr}
   d558c:	460b      	mov	r3, r1
   d558e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5590:	c803      	ldmia	r0, {r0, r1}
   d5592:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5596:	e893 0003 	ldmia.w	r3, {r0, r1}
   d559a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d559e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d55a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d55a6:	b002      	add	sp, #8
   d55a8:	bd10      	pop	{r4, pc}
	...

000d55ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d55ac:	b538      	push	{r3, r4, r5, lr}
   d55ae:	2300      	movs	r3, #0
   d55b0:	4604      	mov	r4, r0
   d55b2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d55b4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d55b6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d55b8:	f7fe fd6f 	bl	d409a <_Znwj>
   d55bc:	b128      	cbz	r0, d55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d55be:	2301      	movs	r3, #1
   d55c0:	6043      	str	r3, [r0, #4]
   d55c2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d55c4:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d55c6:	6003      	str	r3, [r0, #0]
   d55c8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d55ca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d55cc:	4620      	mov	r0, r4
   d55ce:	bd38      	pop	{r3, r4, r5, pc}
   d55d0:	000d84e0 	.word	0x000d84e0

000d55d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55d4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d55d6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55d8:	b90a      	cbnz	r2, d55de <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d55da:	f001 f9d8 	bl	d698e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55de:	68c3      	ldr	r3, [r0, #12]
    }
   d55e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55e4:	4718      	bx	r3

000d55e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d55e6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d55e8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d55ea:	f100 0110 	add.w	r1, r0, #16
   d55ee:	f7ff fff1 	bl	d55d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d55f2:	bd08      	pop	{r3, pc}

000d55f4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55f4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d55f6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55f8:	b90a      	cbnz	r2, d55fe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d55fa:	f001 f9c8 	bl	d698e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55fe:	68c3      	ldr	r3, [r0, #12]
    }
   d5600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5604:	4718      	bx	r3

000d5606 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5606:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5608:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d560a:	f100 0110 	add.w	r1, r0, #16
   d560e:	f7ff fff1 	bl	d55f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d5612:	bd08      	pop	{r3, pc}

000d5614 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5614:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5616:	2300      	movs	r3, #0
   d5618:	6083      	str	r3, [r0, #8]
   d561a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d561c:	4604      	mov	r4, r0
   d561e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5620:	b12b      	cbz	r3, d562e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5622:	2202      	movs	r2, #2
   d5624:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5626:	68eb      	ldr	r3, [r5, #12]
   d5628:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d562a:	68ab      	ldr	r3, [r5, #8]
   d562c:	60a3      	str	r3, [r4, #8]
	}
    }
   d562e:	4620      	mov	r0, r4
   d5630:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5634:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5636:	b089      	sub	sp, #36	; 0x24
   d5638:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d563a:	4668      	mov	r0, sp
   d563c:	f7ff ff12 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5640:	2300      	movs	r3, #0
   d5642:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5646:	f04f 0202 	mov.w	r2, #2
   d564a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d564e:	2b00      	cmp	r3, #0
   d5650:	d103      	bne.n	d565a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5652:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5656:	2900      	cmp	r1, #0
   d5658:	d1f7      	bne.n	d564a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d565a:	d002      	beq.n	d5662 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d565c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5660:	e063      	b.n	d572a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5662:	f114 050c 	adds.w	r5, r4, #12
   d5666:	d003      	beq.n	d5670 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5668:	4669      	mov	r1, sp
   d566a:	4628      	mov	r0, r5
   d566c:	f7ff fefa 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5670:	f3bf 8f5f 	dmb	sy
   d5674:	2301      	movs	r3, #1
   d5676:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5678:	2000      	movs	r0, #0
   d567a:	f104 0308 	add.w	r3, r4, #8
   d567e:	f3bf 8f5f 	dmb	sy
   d5682:	e853 6f00 	ldrex	r6, [r3]
   d5686:	e843 0200 	strex	r2, r0, [r3]
   d568a:	2a00      	cmp	r2, #0
   d568c:	d1f9      	bne.n	d5682 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d568e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5692:	2e00      	cmp	r6, #0
   d5694:	d049      	beq.n	d572a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5696:	f7ff fd91 	bl	d51bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d569a:	b120      	cbz	r0, d56a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d569c:	4629      	mov	r1, r5
   d569e:	4630      	mov	r0, r6
   d56a0:	f7ff ff98 	bl	d55d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d56a4:	e03a      	b.n	d571c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d56a6:	4631      	mov	r1, r6
   d56a8:	a802      	add	r0, sp, #8
   d56aa:	f7ff ffb3 	bl	d5614 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d56ae:	68e0      	ldr	r0, [r4, #12]
   d56b0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d56b4:	b108      	cbz	r0, d56ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d56b6:	f002 f90d 	bl	d78d4 <strdup>
   d56ba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d56bc:	2010      	movs	r0, #16
   d56be:	f8ad 501c 	strh.w	r5, [sp, #28]
   d56c2:	f7fe fcea 	bl	d409a <_Znwj>
   d56c6:	4605      	mov	r5, r0
   d56c8:	b1e8      	cbz	r0, d5706 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56ca:	2700      	movs	r7, #0
   d56cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ce:	2018      	movs	r0, #24
   d56d0:	f7fe fce3 	bl	d409a <_Znwj>
   d56d4:	4604      	mov	r4, r0
   d56d6:	b188      	cbz	r0, d56fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d56d8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56da:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d56dc:	a802      	add	r0, sp, #8
   d56de:	f7ff ff54 	bl	d558a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56e2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d56e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56e8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d56ea:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d56ec:	a906      	add	r1, sp, #24
   d56ee:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56f0:	60e3      	str	r3, [r4, #12]
   d56f2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56f6:	9205      	str	r2, [sp, #20]
   d56f8:	f7ff feb4 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d56fc:	4b0d      	ldr	r3, [pc, #52]	; (d5734 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d56fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5700:	4b0d      	ldr	r3, [pc, #52]	; (d5738 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5702:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5704:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5706:	a806      	add	r0, sp, #24
   d5708:	f7ff febb 	bl	d5482 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d570c:	a802      	add	r0, sp, #8
   d570e:	f7ff fea0 	bl	d5452 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5712:	2200      	movs	r2, #0
   d5714:	4629      	mov	r1, r5
   d5716:	4809      	ldr	r0, [pc, #36]	; (d573c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5718:	f7ff fd58 	bl	d51cc <application_thread_invoke>
   d571c:	4630      	mov	r0, r6
   d571e:	f7ff fe98 	bl	d5452 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5722:	2110      	movs	r1, #16
   d5724:	4630      	mov	r0, r6
   d5726:	f001 f930 	bl	d698a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d572a:	4668      	mov	r0, sp
   d572c:	f7ff fea9 	bl	d5482 <_ZN8particle5ErrorD1Ev>
    }
   d5730:	b009      	add	sp, #36	; 0x24
   d5732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5734:	000d55e7 	.word	0x000d55e7
   d5738:	000d585d 	.word	0x000d585d
   d573c:	000d53ef 	.word	0x000d53ef

000d5740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5744:	b08b      	sub	sp, #44	; 0x2c
   d5746:	4606      	mov	r6, r0
   d5748:	460f      	mov	r7, r1
   d574a:	4690      	mov	r8, r2
   d574c:	4699      	mov	r9, r3
   d574e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5752:	f7ff fd89 	bl	d5268 <spark_cloud_flag_connected>
   d5756:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5758:	4683      	mov	fp, r0
   d575a:	bb30      	cbnz	r0, d57aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d575c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5760:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5762:	a905      	add	r1, sp, #20
   d5764:	4628      	mov	r0, r5
   d5766:	f8ad 3018 	strh.w	r3, [sp, #24]
   d576a:	f7ff fe7b 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
   d576e:	2014      	movs	r0, #20
   d5770:	f7fe fc93 	bl	d409a <_Znwj>
   d5774:	4604      	mov	r4, r0
   d5776:	b158      	cbz	r0, d5790 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5778:	2302      	movs	r3, #2
   d577a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d577c:	2301      	movs	r3, #1
   d577e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5780:	f8c0 b004 	str.w	fp, [r0, #4]
   d5784:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5788:	4629      	mov	r1, r5
   d578a:	300c      	adds	r0, #12
   d578c:	f7ff fe6a 	bl	d5464 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5790:	4630      	mov	r0, r6
   d5792:	4621      	mov	r1, r4
   d5794:	f840 4b04 	str.w	r4, [r0], #4
   d5798:	f7ff ff08 	bl	d55ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d579c:	4628      	mov	r0, r5
   d579e:	f7ff fe70 	bl	d5482 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d57a2:	a805      	add	r0, sp, #20
   d57a4:	f7ff fe6d 	bl	d5482 <_ZN8particle5ErrorD1Ev>
   d57a8:	e052      	b.n	d5850 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d57aa:	2400      	movs	r4, #0
   d57ac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d57ae:	2014      	movs	r0, #20
   d57b0:	606c      	str	r4, [r5, #4]
   d57b2:	60ac      	str	r4, [r5, #8]
   d57b4:	9307      	str	r3, [sp, #28]
   d57b6:	f7fe fc70 	bl	d409a <_Znwj>
   d57ba:	4601      	mov	r1, r0
   d57bc:	b118      	cbz	r0, d57c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d57be:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57c0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d57c2:	6044      	str	r4, [r0, #4]
   d57c4:	6084      	str	r4, [r0, #8]
   d57c6:	a804      	add	r0, sp, #16
   d57c8:	9103      	str	r1, [sp, #12]
   d57ca:	f7ff feef 	bl	d55ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d57ce:	4b22      	ldr	r3, [pc, #136]	; (d5858 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d57d0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d57d2:	2008      	movs	r0, #8
   d57d4:	f7fe fc61 	bl	d409a <_Znwj>
   d57d8:	4604      	mov	r4, r0
   d57da:	b128      	cbz	r0, d57e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d57dc:	9b03      	ldr	r3, [sp, #12]
   d57de:	f840 3b04 	str.w	r3, [r0], #4
   d57e2:	a904      	add	r1, sp, #16
   d57e4:	f7ff fe17 	bl	d5416 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d57e8:	9500      	str	r5, [sp, #0]
   d57ea:	fa5f f38a 	uxtb.w	r3, sl
   d57ee:	464a      	mov	r2, r9
   d57f0:	4641      	mov	r1, r8
   d57f2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d57f4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d57f6:	f7ff fd47 	bl	d5288 <spark_send_event>
   d57fa:	b920      	cbnz	r0, d5806 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d57fc:	9b03      	ldr	r3, [sp, #12]
   d57fe:	785b      	ldrb	r3, [r3, #1]
   d5800:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5804:	b183      	cbz	r3, d5828 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5806:	9b03      	ldr	r3, [sp, #12]
   d5808:	9305      	str	r3, [sp, #20]
   d580a:	a904      	add	r1, sp, #16
   d580c:	a806      	add	r0, sp, #24
   d580e:	f7ff fe02 	bl	d5416 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5812:	a905      	add	r1, sp, #20
   d5814:	4630      	mov	r0, r6
   d5816:	f7ff fe89 	bl	d552c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d581a:	a806      	add	r0, sp, #24
   d581c:	f7fe fd33 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5820:	a804      	add	r0, sp, #16
   d5822:	f7fe fd30 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5826:	e013      	b.n	d5850 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5828:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d582c:	a905      	add	r1, sp, #20
   d582e:	a803      	add	r0, sp, #12
   d5830:	9205      	str	r2, [sp, #20]
   d5832:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5836:	f7ff fefd 	bl	d5634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d583a:	a805      	add	r0, sp, #20
   d583c:	f7ff fe21 	bl	d5482 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5840:	a805      	add	r0, sp, #20
   d5842:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5844:	f7ff fe83 	bl	d554e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5848:	a806      	add	r0, sp, #24
   d584a:	f7fe fd1c 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d584e:	e7da      	b.n	d5806 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5850:	4630      	mov	r0, r6
   d5852:	b00b      	add	sp, #44	; 0x2c
   d5854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5858:	000d59cd 	.word	0x000d59cd

000d585c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d585c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5860:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5862:	d006      	beq.n	d5872 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5864:	2a03      	cmp	r2, #3
   d5866:	d017      	beq.n	d5898 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5868:	2a01      	cmp	r2, #1
   d586a:	d122      	bne.n	d58b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d586c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d586e:	6003      	str	r3, [r0, #0]
	      break;
   d5870:	e01f      	b.n	d58b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5872:	2018      	movs	r0, #24
   d5874:	680e      	ldr	r6, [r1, #0]
   d5876:	f7fe fc10 	bl	d409a <_Znwj>
   d587a:	4605      	mov	r5, r0
   d587c:	b150      	cbz	r0, d5894 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d587e:	4631      	mov	r1, r6
   d5880:	f7ff fec8 	bl	d5614 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5884:	6930      	ldr	r0, [r6, #16]
   d5886:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d588a:	b108      	cbz	r0, d5890 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d588c:	f002 f822 	bl	d78d4 <strdup>
   d5890:	6128      	str	r0, [r5, #16]
   d5892:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5894:	6025      	str	r5, [r4, #0]
   d5896:	e00c      	b.n	d58b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5898:	6804      	ldr	r4, [r0, #0]
   d589a:	b154      	cbz	r4, d58b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d589c:	f104 0010 	add.w	r0, r4, #16
   d58a0:	f7ff fdef 	bl	d5482 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58a4:	4620      	mov	r0, r4
   d58a6:	f7ff fdd4 	bl	d5452 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58aa:	2118      	movs	r1, #24
   d58ac:	4620      	mov	r0, r4
   d58ae:	f001 f86c 	bl	d698a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d58b2:	2000      	movs	r0, #0
   d58b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d58b6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d58b8:	2300      	movs	r3, #0
   d58ba:	6083      	str	r3, [r0, #8]
   d58bc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d58be:	4604      	mov	r4, r0
   d58c0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d58c2:	b12b      	cbz	r3, d58d0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d58c4:	2202      	movs	r2, #2
   d58c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d58c8:	68eb      	ldr	r3, [r5, #12]
   d58ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d58cc:	68ab      	ldr	r3, [r5, #8]
   d58ce:	60a3      	str	r3, [r4, #8]
	}
    }
   d58d0:	4620      	mov	r0, r4
   d58d2:	bd38      	pop	{r3, r4, r5, pc}

000d58d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d58d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d58d6:	b570      	push	{r4, r5, r6, lr}
   d58d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d58da:	d006      	beq.n	d58ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d58dc:	2a03      	cmp	r2, #3
   d58de:	d011      	beq.n	d5904 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d58e0:	2a01      	cmp	r2, #1
   d58e2:	d118      	bne.n	d5916 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d58e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58e6:	6003      	str	r3, [r0, #0]
	      break;
   d58e8:	e015      	b.n	d5916 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58ea:	2014      	movs	r0, #20
   d58ec:	680e      	ldr	r6, [r1, #0]
   d58ee:	f7fe fbd4 	bl	d409a <_Znwj>
   d58f2:	4605      	mov	r5, r0
   d58f4:	b120      	cbz	r0, d5900 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58f6:	4631      	mov	r1, r6
   d58f8:	f7ff ffdd 	bl	d58b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d58fc:	7c33      	ldrb	r3, [r6, #16]
   d58fe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5900:	6025      	str	r5, [r4, #0]
   d5902:	e008      	b.n	d5916 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5904:	6804      	ldr	r4, [r0, #0]
   d5906:	b134      	cbz	r4, d5916 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5908:	4620      	mov	r0, r4
   d590a:	f7ff fda2 	bl	d5452 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d590e:	2114      	movs	r1, #20
   d5910:	4620      	mov	r0, r4
   d5912:	f001 f83a 	bl	d698a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5916:	2000      	movs	r0, #0
   d5918:	bd70      	pop	{r4, r5, r6, pc}
	...

000d591c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d591c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d591e:	2300      	movs	r3, #0
   d5920:	b087      	sub	sp, #28
   d5922:	460c      	mov	r4, r1
   d5924:	f3bf 8f5f 	dmb	sy
   d5928:	e850 6f00 	ldrex	r6, [r0]
   d592c:	e840 3200 	strex	r2, r3, [r0]
   d5930:	2a00      	cmp	r2, #0
   d5932:	d1f9      	bne.n	d5928 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5934:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5938:	2e00      	cmp	r6, #0
   d593a:	d03f      	beq.n	d59bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d593c:	4618      	mov	r0, r3
   d593e:	f7ff fc3d 	bl	d51bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5942:	4607      	mov	r7, r0
   d5944:	b120      	cbz	r0, d5950 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5946:	4621      	mov	r1, r4
   d5948:	4630      	mov	r0, r6
   d594a:	f7ff fe53 	bl	d55f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d594e:	e02e      	b.n	d59ae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5950:	4631      	mov	r1, r6
   d5952:	a801      	add	r0, sp, #4
   d5954:	f7ff ffaf 	bl	d58b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5958:	7823      	ldrb	r3, [r4, #0]
   d595a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d595e:	2010      	movs	r0, #16
   d5960:	f7fe fb9b 	bl	d409a <_Znwj>
   d5964:	4605      	mov	r5, r0
   d5966:	b1d0      	cbz	r0, d599e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5968:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d596a:	2014      	movs	r0, #20
   d596c:	f7fe fb95 	bl	d409a <_Znwj>
   d5970:	4604      	mov	r4, r0
   d5972:	b178      	cbz	r0, d5994 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5974:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5976:	4601      	mov	r1, r0
   d5978:	a801      	add	r0, sp, #4
   d597a:	f7ff fe06 	bl	d558a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d597e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5980:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5982:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5984:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5986:	9203      	str	r2, [sp, #12]
   d5988:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d598a:	60e3      	str	r3, [r4, #12]
   d598c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5990:	9204      	str	r2, [sp, #16]
   d5992:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5994:	4b0a      	ldr	r3, [pc, #40]	; (d59c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5996:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5998:	4b0a      	ldr	r3, [pc, #40]	; (d59c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d599a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d599c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d599e:	a801      	add	r0, sp, #4
   d59a0:	f7ff fd57 	bl	d5452 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d59a4:	2200      	movs	r2, #0
   d59a6:	4629      	mov	r1, r5
   d59a8:	4807      	ldr	r0, [pc, #28]	; (d59c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d59aa:	f7ff fc0f 	bl	d51cc <application_thread_invoke>
   d59ae:	4630      	mov	r0, r6
   d59b0:	f7ff fd4f 	bl	d5452 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d59b4:	2110      	movs	r1, #16
   d59b6:	4630      	mov	r0, r6
   d59b8:	f000 ffe7 	bl	d698a <_ZdlPvj>
        }
    }
   d59bc:	b007      	add	sp, #28
   d59be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d59c0:	000d5607 	.word	0x000d5607
   d59c4:	000d58d5 	.word	0x000d58d5
   d59c8:	000d53ef 	.word	0x000d53ef

000d59cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d59cc:	b530      	push	{r4, r5, lr}
   d59ce:	b085      	sub	sp, #20
   d59d0:	4604      	mov	r4, r0
   d59d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d59d4:	4668      	mov	r0, sp
   d59d6:	4611      	mov	r1, r2
   d59d8:	f7ff fdb9 	bl	d554e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d59dc:	b17c      	cbz	r4, d59fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d59de:	b224      	sxth	r4, r4
   d59e0:	4628      	mov	r0, r5
   d59e2:	b10d      	cbz	r5, d59e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d59e4:	f001 ff76 	bl	d78d4 <strdup>
   d59e8:	9002      	str	r0, [sp, #8]
   d59ea:	a902      	add	r1, sp, #8
   d59ec:	4668      	mov	r0, sp
   d59ee:	f8ad 400c 	strh.w	r4, [sp, #12]
   d59f2:	f7ff fe1f 	bl	d5634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d59f6:	a802      	add	r0, sp, #8
   d59f8:	f7ff fd43 	bl	d5482 <_ZN8particle5ErrorD1Ev>
   d59fc:	e01d      	b.n	d5a3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d59fe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5a00:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5a04:	f04f 0201 	mov.w	r2, #1
   d5a08:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5a0c:	42a3      	cmp	r3, r4
   d5a0e:	d103      	bne.n	d5a18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5a10:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5a14:	2900      	cmp	r1, #0
   d5a16:	d1f7      	bne.n	d5a08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5a18:	d002      	beq.n	d5a20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5a1a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a1e:	e00c      	b.n	d5a3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5a20:	f110 010c 	adds.w	r1, r0, #12
   d5a24:	f04f 0301 	mov.w	r3, #1
   d5a28:	bf18      	it	ne
   d5a2a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5a2c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5a30:	3004      	adds	r0, #4
   d5a32:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5a36:	f7ff ff71 	bl	d591c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5a3a:	a801      	add	r0, sp, #4
   d5a3c:	f7fe fc23 	bl	d4286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5a40:	b005      	add	sp, #20
   d5a42:	bd30      	pop	{r4, r5, pc}

000d5a44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a44:	2200      	movs	r2, #0
   d5a46:	4611      	mov	r1, r2
   d5a48:	6840      	ldr	r0, [r0, #4]
   d5a4a:	f7ff bc7d 	b.w	d5348 <network_listening>

000d5a4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a4e:	2200      	movs	r2, #0
   d5a50:	4611      	mov	r1, r2
   d5a52:	6840      	ldr	r0, [r0, #4]
   d5a54:	f7ff bc88 	b.w	d5368 <network_get_listen_timeout>

000d5a58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a58:	2200      	movs	r2, #0
   d5a5a:	6840      	ldr	r0, [r0, #4]
   d5a5c:	f7ff bc7c 	b.w	d5358 <network_set_listen_timeout>

000d5a60 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a60:	2200      	movs	r2, #0
   d5a62:	f081 0101 	eor.w	r1, r1, #1
   d5a66:	6840      	ldr	r0, [r0, #4]
   d5a68:	f7ff bc66 	b.w	d5338 <network_listen>

000d5a6c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5a6c:	2300      	movs	r3, #0
   d5a6e:	461a      	mov	r2, r3
   d5a70:	4619      	mov	r1, r3
   d5a72:	6840      	ldr	r0, [r0, #4]
   d5a74:	f7ff bc58 	b.w	d5328 <network_off>

000d5a78 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a78:	2300      	movs	r3, #0
   d5a7a:	461a      	mov	r2, r3
   d5a7c:	4619      	mov	r1, r3
   d5a7e:	6840      	ldr	r0, [r0, #4]
   d5a80:	f7ff bc4a 	b.w	d5318 <network_on>

000d5a84 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a84:	2200      	movs	r2, #0
   d5a86:	4611      	mov	r1, r2
   d5a88:	6840      	ldr	r0, [r0, #4]
   d5a8a:	f7ff bc3d 	b.w	d5308 <network_ready>

000d5a8e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a8e:	2200      	movs	r2, #0
   d5a90:	4611      	mov	r1, r2
   d5a92:	6840      	ldr	r0, [r0, #4]
   d5a94:	f7ff bc28 	b.w	d52e8 <network_connecting>

000d5a98 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a98:	2200      	movs	r2, #0
   d5a9a:	2102      	movs	r1, #2
   d5a9c:	6840      	ldr	r0, [r0, #4]
   d5a9e:	f7ff bc2b 	b.w	d52f8 <network_disconnect>

000d5aa2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5aa2:	2300      	movs	r3, #0
   d5aa4:	461a      	mov	r2, r3
   d5aa6:	6840      	ldr	r0, [r0, #4]
   d5aa8:	f7ff bc16 	b.w	d52d8 <network_connect>

000d5aac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5aac:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5aae:	2203      	movs	r2, #3
   d5ab0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ab2:	4a02      	ldr	r2, [pc, #8]	; (d5abc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ab4:	601a      	str	r2, [r3, #0]
   d5ab6:	4770      	bx	lr
   d5ab8:	2003e36c 	.word	0x2003e36c
   d5abc:	000d84fc 	.word	0x000d84fc

000d5ac0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5ac0:	4770      	bx	lr

000d5ac2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ac4:	4606      	mov	r6, r0
   d5ac6:	4615      	mov	r5, r2
   d5ac8:	460c      	mov	r4, r1
   d5aca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5acc:	42bc      	cmp	r4, r7
   d5ace:	d006      	beq.n	d5ade <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5ad0:	6833      	ldr	r3, [r6, #0]
   d5ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5ad6:	689b      	ldr	r3, [r3, #8]
   d5ad8:	4630      	mov	r0, r6
   d5ada:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5adc:	e7f6      	b.n	d5acc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5ade:	4628      	mov	r0, r5
   d5ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ae2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5ae2:	2200      	movs	r2, #0
   d5ae4:	7c00      	ldrb	r0, [r0, #16]
   d5ae6:	f7ff ba79 	b.w	d4fdc <HAL_I2C_Write_Data>

000d5aea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5aea:	2100      	movs	r1, #0
   d5aec:	7c00      	ldrb	r0, [r0, #16]
   d5aee:	f7ff ba7d 	b.w	d4fec <HAL_I2C_Available_Data>

000d5af2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5af2:	2100      	movs	r1, #0
   d5af4:	7c00      	ldrb	r0, [r0, #16]
   d5af6:	f7ff ba81 	b.w	d4ffc <HAL_I2C_Read_Data>

000d5afa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5afa:	2100      	movs	r1, #0
   d5afc:	7c00      	ldrb	r0, [r0, #16]
   d5afe:	f7ff ba85 	b.w	d500c <HAL_I2C_Peek_Data>

000d5b02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5b02:	2100      	movs	r1, #0
   d5b04:	7c00      	ldrb	r0, [r0, #16]
   d5b06:	f7ff ba89 	b.w	d501c <HAL_I2C_Flush_Data>

000d5b0a <_ZN7TwoWireD0Ev>:
   d5b0a:	b510      	push	{r4, lr}
   d5b0c:	2114      	movs	r1, #20
   d5b0e:	4604      	mov	r4, r0
   d5b10:	f000 ff3b 	bl	d698a <_ZdlPvj>
   d5b14:	4620      	mov	r0, r4
   d5b16:	bd10      	pop	{r4, pc}

000d5b18 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b18:	b510      	push	{r4, lr}
   d5b1a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b20:	4608      	mov	r0, r1
   d5b22:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b24:	2100      	movs	r1, #0
   d5b26:	4b04      	ldr	r3, [pc, #16]	; (d5b38 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5b28:	7420      	strb	r0, [r4, #16]
   d5b2a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b2c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5b2e:	f7ff fa85 	bl	d503c <HAL_I2C_Init>

}
   d5b32:	4620      	mov	r0, r4
   d5b34:	bd10      	pop	{r4, pc}
   d5b36:	bf00      	nop
   d5b38:	000d8530 	.word	0x000d8530

000d5b3c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5b3c:	2300      	movs	r3, #0
   d5b3e:	461a      	mov	r2, r3
   d5b40:	4619      	mov	r1, r3
   d5b42:	7c00      	ldrb	r0, [r0, #16]
   d5b44:	f7ff ba2a 	b.w	d4f9c <HAL_I2C_Begin>

000d5b48 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5b48:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5b4a:	2400      	movs	r4, #0
   d5b4c:	7c00      	ldrb	r0, [r0, #16]
   d5b4e:	9400      	str	r4, [sp, #0]
   d5b50:	f7ff fa2c 	bl	d4fac <HAL_I2C_Request_Data>
  return result;
}
   d5b54:	b2c0      	uxtb	r0, r0
   d5b56:	b002      	add	sp, #8
   d5b58:	bd10      	pop	{r4, pc}

000d5b5a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5b5a:	2301      	movs	r3, #1
   d5b5c:	f7ff bff4 	b.w	d5b48 <_ZN7TwoWire11requestFromEhhh>

000d5b60 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5b60:	2200      	movs	r2, #0
   d5b62:	7c00      	ldrb	r0, [r0, #16]
   d5b64:	f7ff ba2a 	b.w	d4fbc <HAL_I2C_Begin_Transmission>

000d5b68 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5b68:	2200      	movs	r2, #0
   d5b6a:	7c00      	ldrb	r0, [r0, #16]
   d5b6c:	f7ff ba2e 	b.w	d4fcc <HAL_I2C_End_Transmission>

000d5b70 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5b70:	2101      	movs	r1, #1
   d5b72:	f7ff bff9 	b.w	d5b68 <_ZN7TwoWire15endTransmissionEh>

000d5b76 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5b76:	2100      	movs	r1, #0
   d5b78:	7c00      	ldrb	r0, [r0, #16]
   d5b7a:	f7ff ba57 	b.w	d502c <HAL_I2C_Is_Enabled>

000d5b7e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b7e:	4770      	bx	lr

000d5b80 <_ZN9IPAddressD0Ev>:
   d5b80:	b510      	push	{r4, lr}
   d5b82:	2118      	movs	r1, #24
   d5b84:	4604      	mov	r4, r0
   d5b86:	f000 ff00 	bl	d698a <_ZdlPvj>
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	bd10      	pop	{r4, pc}

000d5b8e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b90:	7d03      	ldrb	r3, [r0, #20]
   d5b92:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b94:	b08d      	sub	sp, #52	; 0x34
   d5b96:	460e      	mov	r6, r1
   d5b98:	f100 0704 	add.w	r7, r0, #4
   d5b9c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ba0:	d002      	beq.n	d5ba8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5ba2:	f100 0508 	add.w	r5, r0, #8
   d5ba6:	e018      	b.n	d5bda <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ba8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5baa:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bac:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bb0:	232f      	movs	r3, #47	; 0x2f
   d5bb2:	462a      	mov	r2, r5
   d5bb4:	200a      	movs	r0, #10
   d5bb6:	f7ff fa49 	bl	d504c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5bba:	4628      	mov	r0, r5
   d5bbc:	f001 fea5 	bl	d790a <strlen>
   d5bc0:	6833      	ldr	r3, [r6, #0]
   d5bc2:	4602      	mov	r2, r0
   d5bc4:	68db      	ldr	r3, [r3, #12]
   d5bc6:	4629      	mov	r1, r5
   d5bc8:	4630      	mov	r0, r6
   d5bca:	4798      	blx	r3
   d5bcc:	e00f      	b.n	d5bee <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5bce:	b124      	cbz	r4, d5bda <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5bd0:	212e      	movs	r1, #46	; 0x2e
   d5bd2:	4630      	mov	r0, r6
   d5bd4:	f000 f9ca 	bl	d5f6c <_ZN5Print5printEc>
   d5bd8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5bda:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5bde:	220a      	movs	r2, #10
   d5be0:	4630      	mov	r0, r6
   d5be2:	f000 fa09 	bl	d5ff8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5be6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5be8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5bea:	d1f0      	bne.n	d5bce <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5bec:	4620      	mov	r0, r4
    }
    return n;
}
   d5bee:	b00d      	add	sp, #52	; 0x34
   d5bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5bf4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5bf4:	b510      	push	{r4, lr}
   d5bf6:	4b05      	ldr	r3, [pc, #20]	; (d5c0c <_ZN9IPAddressC1Ev+0x18>)
   d5bf8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5bfa:	2211      	movs	r2, #17
   d5bfc:	f840 3b04 	str.w	r3, [r0], #4
   d5c00:	2100      	movs	r1, #0
   d5c02:	f001 fe24 	bl	d784e <memset>
{
    clear();
}
   d5c06:	4620      	mov	r0, r4
   d5c08:	bd10      	pop	{r4, pc}
   d5c0a:	bf00      	nop
   d5c0c:	000d8558 	.word	0x000d8558

000d5c10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c10:	4603      	mov	r3, r0
   d5c12:	4a07      	ldr	r2, [pc, #28]	; (d5c30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c14:	b510      	push	{r4, lr}
   d5c16:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c1a:	f101 0210 	add.w	r2, r1, #16
   d5c1e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c22:	f843 4b04 	str.w	r4, [r3], #4
   d5c26:	4291      	cmp	r1, r2
   d5c28:	d1f9      	bne.n	d5c1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c2a:	780a      	ldrb	r2, [r1, #0]
   d5c2c:	701a      	strb	r2, [r3, #0]
}
   d5c2e:	bd10      	pop	{r4, pc}
   d5c30:	000d8558 	.word	0x000d8558

000d5c34 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c36:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5c46:	2304      	movs	r3, #4
   d5c48:	6041      	str	r1, [r0, #4]
   d5c4a:	7503      	strb	r3, [r0, #20]
   d5c4c:	bd10      	pop	{r4, pc}

000d5c4e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5c4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5c50:	780d      	ldrb	r5, [r1, #0]
   d5c52:	788b      	ldrb	r3, [r1, #2]
   d5c54:	784a      	ldrb	r2, [r1, #1]
   d5c56:	78c9      	ldrb	r1, [r1, #3]
   d5c58:	9100      	str	r1, [sp, #0]
   d5c5a:	4629      	mov	r1, r5
   d5c5c:	f7ff ffea 	bl	d5c34 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5c60:	b003      	add	sp, #12
   d5c62:	bd30      	pop	{r4, r5, pc}

000d5c64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c64:	4b01      	ldr	r3, [pc, #4]	; (d5c6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c66:	4a02      	ldr	r2, [pc, #8]	; (d5c70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c68:	601a      	str	r2, [r3, #0]
   d5c6a:	4770      	bx	lr
   d5c6c:	2003e374 	.word	0x2003e374
   d5c70:	000d85d7 	.word	0x000d85d7

000d5c74 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c74:	2200      	movs	r2, #0
   d5c76:	4611      	mov	r1, r2
   d5c78:	6840      	ldr	r0, [r0, #4]
   d5c7a:	f7ff bb65 	b.w	d5348 <network_listening>

000d5c7e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c7e:	2200      	movs	r2, #0
   d5c80:	4611      	mov	r1, r2
   d5c82:	6840      	ldr	r0, [r0, #4]
   d5c84:	f7ff bb70 	b.w	d5368 <network_get_listen_timeout>

000d5c88 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c88:	2200      	movs	r2, #0
   d5c8a:	6840      	ldr	r0, [r0, #4]
   d5c8c:	f7ff bb64 	b.w	d5358 <network_set_listen_timeout>

000d5c90 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c90:	2200      	movs	r2, #0
   d5c92:	f081 0101 	eor.w	r1, r1, #1
   d5c96:	6840      	ldr	r0, [r0, #4]
   d5c98:	f7ff bb4e 	b.w	d5338 <network_listen>

000d5c9c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5c9c:	2300      	movs	r3, #0
   d5c9e:	461a      	mov	r2, r3
   d5ca0:	2101      	movs	r1, #1
   d5ca2:	6840      	ldr	r0, [r0, #4]
   d5ca4:	f7ff bb40 	b.w	d5328 <network_off>

000d5ca8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5ca8:	2300      	movs	r3, #0
   d5caa:	461a      	mov	r2, r3
   d5cac:	4619      	mov	r1, r3
   d5cae:	6840      	ldr	r0, [r0, #4]
   d5cb0:	f7ff bb32 	b.w	d5318 <network_on>

000d5cb4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5cb4:	2200      	movs	r2, #0
   d5cb6:	4611      	mov	r1, r2
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	f7ff bb25 	b.w	d5308 <network_ready>

000d5cbe <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cbe:	2200      	movs	r2, #0
   d5cc0:	4611      	mov	r1, r2
   d5cc2:	6840      	ldr	r0, [r0, #4]
   d5cc4:	f7ff bb10 	b.w	d52e8 <network_connecting>

000d5cc8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5cc8:	2200      	movs	r2, #0
   d5cca:	2102      	movs	r1, #2
   d5ccc:	6840      	ldr	r0, [r0, #4]
   d5cce:	f7ff bb13 	b.w	d52f8 <network_disconnect>

000d5cd2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cd2:	2300      	movs	r3, #0
   d5cd4:	461a      	mov	r2, r3
   d5cd6:	6840      	ldr	r0, [r0, #4]
   d5cd8:	f7ff bafe 	b.w	d52d8 <network_connect>

000d5cdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5cdc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cde:	4605      	mov	r5, r0
   d5ce0:	b188      	cbz	r0, d5d06 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ce2:	6804      	ldr	r4, [r0, #0]
   d5ce4:	b14c      	cbz	r4, d5cfa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5ce6:	68a3      	ldr	r3, [r4, #8]
   d5ce8:	b11b      	cbz	r3, d5cf2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5cea:	2203      	movs	r2, #3
   d5cec:	4621      	mov	r1, r4
   d5cee:	4620      	mov	r0, r4
   d5cf0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cf2:	2110      	movs	r1, #16
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	f000 fe48 	bl	d698a <_ZdlPvj>
   d5cfa:	4628      	mov	r0, r5
   d5cfc:	2114      	movs	r1, #20
      }
   d5cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d02:	f000 be42 	b.w	d698a <_ZdlPvj>
   d5d06:	bd38      	pop	{r3, r4, r5, pc}

000d5d08 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5d08:	b110      	cbz	r0, d5d10 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5d0a:	6803      	ldr	r3, [r0, #0]
   d5d0c:	685b      	ldr	r3, [r3, #4]
   d5d0e:	4718      	bx	r3
   d5d10:	4770      	bx	lr

000d5d12 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5d12:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5d14:	6803      	ldr	r3, [r0, #0]
   d5d16:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5d18:	b1bb      	cbz	r3, d5d4a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5d1a:	6858      	ldr	r0, [r3, #4]
   d5d1c:	f7ff f8ae 	bl	d4e7c <os_thread_is_current>
   d5d20:	b978      	cbnz	r0, d5d42 <_ZN6ThreadD1Ev+0x30>
   d5d22:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5d24:	7c5a      	ldrb	r2, [r3, #17]
   d5d26:	b912      	cbnz	r2, d5d2e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5d28:	6858      	ldr	r0, [r3, #4]
   d5d2a:	f7ff f8af 	bl	d4e8c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5d2e:	6823      	ldr	r3, [r4, #0]
   d5d30:	6858      	ldr	r0, [r3, #4]
   d5d32:	f7ff f8b3 	bl	d4e9c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d36:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d38:	2300      	movs	r3, #0
   d5d3a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5d3c:	b128      	cbz	r0, d5d4a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5d3e:	f7ff ffcd 	bl	d5cdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d42:	6820      	ldr	r0, [r4, #0]
   d5d44:	b108      	cbz	r0, d5d4a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5d46:	f7ff ffc9 	bl	d5cdc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	bd10      	pop	{r4, pc}
	...

000d5d50 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5d50:	b538      	push	{r3, r4, r5, lr}
   d5d52:	4b0c      	ldr	r3, [pc, #48]	; (d5d84 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5d54:	6003      	str	r3, [r0, #0]
   d5d56:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d58:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5d5c:	b108      	cbz	r0, d5d62 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d5e:	f7fe f9a0 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d62:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5d66:	b135      	cbz	r5, d5d76 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d68:	4628      	mov	r0, r5
   d5d6a:	f7ff ffd2 	bl	d5d12 <_ZN6ThreadD1Ev>
   d5d6e:	2104      	movs	r1, #4
   d5d70:	4628      	mov	r0, r5
   d5d72:	f000 fe0a 	bl	d698a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d76:	68a0      	ldr	r0, [r4, #8]
   d5d78:	b108      	cbz	r0, d5d7e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5d7a:	f7ff ffc5 	bl	d5d08 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5d7e:	4620      	mov	r0, r4
   d5d80:	bd38      	pop	{r3, r4, r5, pc}
   d5d82:	bf00      	nop
   d5d84:	000d864c 	.word	0x000d864c

000d5d88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5d88:	b538      	push	{r3, r4, r5, lr}
   d5d8a:	4c0e      	ldr	r4, [pc, #56]	; (d5dc4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5d8c:	4b0e      	ldr	r3, [pc, #56]	; (d5dc8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5d8e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5d90:	2500      	movs	r5, #0
   d5d92:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5d94:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5d98:	6063      	str	r3, [r4, #4]
   d5d9a:	60a5      	str	r5, [r4, #8]
   d5d9c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5da0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5da4:	f7ff f88a 	bl	d4ebc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5da8:	4b08      	ldr	r3, [pc, #32]	; (d5dcc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5daa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5dae:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5db2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5db4:	4620      	mov	r0, r4
   d5db6:	4a06      	ldr	r2, [pc, #24]	; (d5dd0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5db8:	4906      	ldr	r1, [pc, #24]	; (d5dd4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5dbe:	f000 bddf 	b.w	d6980 <__aeabi_atexit>
   d5dc2:	bf00      	nop
   d5dc4:	2003e378 	.word	0x2003e378
   d5dc8:	000d8680 	.word	0x000d8680
   d5dcc:	000d864c 	.word	0x000d864c
   d5dd0:	2003e2bc 	.word	0x2003e2bc
   d5dd4:	000d5d51 	.word	0x000d5d51

000d5dd8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5dd8:	2300      	movs	r3, #0
   d5dda:	461a      	mov	r2, r3
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7ff ba7b 	b.w	d52d8 <network_connect>

000d5de2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5de2:	2200      	movs	r2, #0
   d5de4:	2102      	movs	r1, #2
   d5de6:	6840      	ldr	r0, [r0, #4]
   d5de8:	f7ff ba86 	b.w	d52f8 <network_disconnect>

000d5dec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5dec:	2200      	movs	r2, #0
   d5dee:	4611      	mov	r1, r2
   d5df0:	6840      	ldr	r0, [r0, #4]
   d5df2:	f7ff ba79 	b.w	d52e8 <network_connecting>

000d5df6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5df6:	2200      	movs	r2, #0
   d5df8:	4611      	mov	r1, r2
   d5dfa:	6840      	ldr	r0, [r0, #4]
   d5dfc:	f7ff ba84 	b.w	d5308 <network_ready>

000d5e00 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e00:	2300      	movs	r3, #0
   d5e02:	461a      	mov	r2, r3
   d5e04:	4619      	mov	r1, r3
   d5e06:	6840      	ldr	r0, [r0, #4]
   d5e08:	f7ff ba86 	b.w	d5318 <network_on>

000d5e0c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e0c:	2300      	movs	r3, #0
   d5e0e:	461a      	mov	r2, r3
   d5e10:	4619      	mov	r1, r3
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	f7ff ba88 	b.w	d5328 <network_off>

000d5e18 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e18:	2200      	movs	r2, #0
   d5e1a:	f081 0101 	eor.w	r1, r1, #1
   d5e1e:	6840      	ldr	r0, [r0, #4]
   d5e20:	f7ff ba8a 	b.w	d5338 <network_listen>

000d5e24 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e24:	2200      	movs	r2, #0
   d5e26:	6840      	ldr	r0, [r0, #4]
   d5e28:	f7ff ba96 	b.w	d5358 <network_set_listen_timeout>

000d5e2c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e2c:	2200      	movs	r2, #0
   d5e2e:	4611      	mov	r1, r2
   d5e30:	6840      	ldr	r0, [r0, #4]
   d5e32:	f7ff ba99 	b.w	d5368 <network_get_listen_timeout>

000d5e36 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e36:	2200      	movs	r2, #0
   d5e38:	4611      	mov	r1, r2
   d5e3a:	6840      	ldr	r0, [r0, #4]
   d5e3c:	f7ff ba84 	b.w	d5348 <network_listening>

000d5e40 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e44:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e46:	b095      	sub	sp, #84	; 0x54
   d5e48:	4616      	mov	r6, r2
   d5e4a:	460d      	mov	r5, r1
   d5e4c:	4607      	mov	r7, r0
    IPAddress addr;
   d5e4e:	f7ff fed1 	bl	d5bf4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5e52:	4621      	mov	r1, r4
   d5e54:	2220      	movs	r2, #32
   d5e56:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e58:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e5a:	f001 fcf8 	bl	d784e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e5e:	2340      	movs	r3, #64	; 0x40
   d5e60:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e62:	4621      	mov	r1, r4
   d5e64:	466b      	mov	r3, sp
   d5e66:	aa0c      	add	r2, sp, #48	; 0x30
   d5e68:	4630      	mov	r0, r6
   d5e6a:	f7ff f8ff 	bl	d506c <netdb_getaddrinfo>
    if (!r) {
   d5e6e:	4604      	mov	r4, r0
   d5e70:	2800      	cmp	r0, #0
   d5e72:	d144      	bne.n	d5efe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e74:	4602      	mov	r2, r0
   d5e76:	2101      	movs	r1, #1
   d5e78:	6868      	ldr	r0, [r5, #4]
   d5e7a:	f7ff fa45 	bl	d5308 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e7e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e80:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e82:	4622      	mov	r2, r4
   d5e84:	6868      	ldr	r0, [r5, #4]
   d5e86:	f7ff fa3f 	bl	d5308 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e8a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e8c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5e8e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e90:	2e00      	cmp	r6, #0
   d5e92:	d034      	beq.n	d5efe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5e94:	2900      	cmp	r1, #0
   d5e96:	d132      	bne.n	d5efe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e98:	6873      	ldr	r3, [r6, #4]
   d5e9a:	2b02      	cmp	r3, #2
   d5e9c:	d002      	beq.n	d5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5e9e:	2b0a      	cmp	r3, #10
   d5ea0:	d009      	beq.n	d5eb6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5ea2:	e02a      	b.n	d5efa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ea4:	f1b8 0f00 	cmp.w	r8, #0
   d5ea8:	d027      	beq.n	d5efa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5eaa:	6971      	ldr	r1, [r6, #20]
   d5eac:	4638      	mov	r0, r7
   d5eae:	3104      	adds	r1, #4
   d5eb0:	f7ff fecd 	bl	d5c4e <_ZN9IPAddressaSEPKh>
   d5eb4:	e020      	b.n	d5ef8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5eb6:	f1b9 0f00 	cmp.w	r9, #0
   d5eba:	d01e      	beq.n	d5efa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ebc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5ebe:	2211      	movs	r2, #17
   d5ec0:	a801      	add	r0, sp, #4
   d5ec2:	f001 fcc4 	bl	d784e <memset>
                    a.v = 6;
   d5ec6:	2306      	movs	r3, #6
   d5ec8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ecc:	ad01      	add	r5, sp, #4
   d5ece:	f104 0308 	add.w	r3, r4, #8
   d5ed2:	3418      	adds	r4, #24
   d5ed4:	6818      	ldr	r0, [r3, #0]
   d5ed6:	6859      	ldr	r1, [r3, #4]
   d5ed8:	462a      	mov	r2, r5
   d5eda:	c203      	stmia	r2!, {r0, r1}
   d5edc:	3308      	adds	r3, #8
   d5ede:	42a3      	cmp	r3, r4
   d5ee0:	4615      	mov	r5, r2
   d5ee2:	d1f7      	bne.n	d5ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5ee4:	a901      	add	r1, sp, #4
   d5ee6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5ee8:	ad07      	add	r5, sp, #28
   d5eea:	f7ff fe91 	bl	d5c10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ef0:	1d3c      	adds	r4, r7, #4
   d5ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ef4:	682b      	ldr	r3, [r5, #0]
   d5ef6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ef8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5efa:	69f6      	ldr	r6, [r6, #28]
   d5efc:	e7c8      	b.n	d5e90 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5efe:	9800      	ldr	r0, [sp, #0]
   d5f00:	f7ff f8ac 	bl	d505c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f04:	4638      	mov	r0, r7
   d5f06:	b015      	add	sp, #84	; 0x54
   d5f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5f0c:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5f0e:	4a03      	ldr	r2, [pc, #12]	; (d5f1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5f10:	601a      	str	r2, [r3, #0]
   d5f12:	2200      	movs	r2, #0
   d5f14:	605a      	str	r2, [r3, #4]
   d5f16:	4770      	bx	lr
   d5f18:	2003e54c 	.word	0x2003e54c
   d5f1c:	000d8680 	.word	0x000d8680

000d5f20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f22:	4606      	mov	r6, r0
   d5f24:	460d      	mov	r5, r1
   d5f26:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5f28:	2400      	movs	r4, #0
  while (size--) {
   d5f2a:	42bd      	cmp	r5, r7
   d5f2c:	d00c      	beq.n	d5f48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5f2e:	6833      	ldr	r3, [r6, #0]
   d5f30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f34:	689b      	ldr	r3, [r3, #8]
   d5f36:	4630      	mov	r0, r6
   d5f38:	4798      	blx	r3
     if (chunk>=0)
   d5f3a:	2800      	cmp	r0, #0
   d5f3c:	db01      	blt.n	d5f42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5f3e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5f40:	e7f3      	b.n	d5f2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5f42:	2c00      	cmp	r4, #0
   d5f44:	bf08      	it	eq
   d5f46:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5f48:	4620      	mov	r0, r4
   d5f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f4c:	b570      	push	{r4, r5, r6, lr}
   d5f4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f50:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f52:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f54:	b149      	cbz	r1, d5f6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f56:	f001 fcd8 	bl	d790a <strlen>
   d5f5a:	682b      	ldr	r3, [r5, #0]
   d5f5c:	4602      	mov	r2, r0
   d5f5e:	4621      	mov	r1, r4
   d5f60:	4628      	mov	r0, r5
   d5f62:	68db      	ldr	r3, [r3, #12]
    }
   d5f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f68:	4718      	bx	r3
    }
   d5f6a:	bd70      	pop	{r4, r5, r6, pc}

000d5f6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5f6c:	6803      	ldr	r3, [r0, #0]
   d5f6e:	689b      	ldr	r3, [r3, #8]
   d5f70:	4718      	bx	r3

000d5f72 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f72:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5f74:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f76:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5f78:	f7ff fff8 	bl	d5f6c <_ZN5Print5printEc>
  n += print('\n');
   d5f7c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5f7e:	4604      	mov	r4, r0
  n += print('\n');
   d5f80:	4628      	mov	r0, r5
   d5f82:	f7ff fff3 	bl	d5f6c <_ZN5Print5printEc>
  return n;
}
   d5f86:	4420      	add	r0, r4
   d5f88:	bd38      	pop	{r3, r4, r5, pc}

000d5f8a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5f8a:	b538      	push	{r3, r4, r5, lr}
   d5f8c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f8e:	f7ff ffdd 	bl	d5f4c <_ZN5Print5writeEPKc>
   d5f92:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5f94:	4628      	mov	r0, r5
   d5f96:	f7ff ffec 	bl	d5f72 <_ZN5Print7printlnEv>
  return n;
}
   d5f9a:	4420      	add	r0, r4
   d5f9c:	bd38      	pop	{r3, r4, r5, pc}

000d5f9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5f9e:	b530      	push	{r4, r5, lr}
   d5fa0:	b08b      	sub	sp, #44	; 0x2c
   d5fa2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5fa4:	2100      	movs	r1, #0
   d5fa6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5faa:	2a01      	cmp	r2, #1
   d5fac:	bf98      	it	ls
   d5fae:	220a      	movls	r2, #10
   d5fb0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5fb4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5fb8:	fb05 3312 	mls	r3, r5, r2, r3
   d5fbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5fc0:	2b09      	cmp	r3, #9
   d5fc2:	bf94      	ite	ls
   d5fc4:	3330      	addls	r3, #48	; 0x30
   d5fc6:	3337      	addhi	r3, #55	; 0x37
   d5fc8:	b2db      	uxtb	r3, r3
   d5fca:	4621      	mov	r1, r4
   d5fcc:	f804 3901 	strb.w	r3, [r4], #-1
   d5fd0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5fd2:	2d00      	cmp	r5, #0
   d5fd4:	d1ee      	bne.n	d5fb4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5fd6:	f7ff ffb9 	bl	d5f4c <_ZN5Print5writeEPKc>
}
   d5fda:	b00b      	add	sp, #44	; 0x2c
   d5fdc:	bd30      	pop	{r4, r5, pc}

000d5fde <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5fde:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5fe0:	b92a      	cbnz	r2, d5fee <_ZN5Print5printEmi+0x10>
   d5fe2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5fe8:	689b      	ldr	r3, [r3, #8]
   d5fea:	b2c9      	uxtb	r1, r1
   d5fec:	4718      	bx	r3
  else return printNumber(n, base);
   d5fee:	b2d2      	uxtb	r2, r2
}
   d5ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5ff4:	f7ff bfd3 	b.w	d5f9e <_ZN5Print11printNumberEmh>

000d5ff8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5ff8:	f7ff bff1 	b.w	d5fde <_ZN5Print5printEmi>

000d5ffc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6000:	4607      	mov	r7, r0
   d6002:	460e      	mov	r6, r1
  if (base == 0) {
   d6004:	4615      	mov	r5, r2
   d6006:	b92a      	cbnz	r2, d6014 <_ZN5Print5printEli+0x18>
    return write(n);
   d6008:	6803      	ldr	r3, [r0, #0]
   d600a:	b2c9      	uxtb	r1, r1
   d600c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d600e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6012:	4718      	bx	r3
  } else if (base == 10) {
   d6014:	2a0a      	cmp	r2, #10
   d6016:	d102      	bne.n	d601e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6018:	2900      	cmp	r1, #0
   d601a:	da01      	bge.n	d6020 <_ZN5Print5printEli+0x24>
   d601c:	e004      	b.n	d6028 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d601e:	b2d2      	uxtb	r2, r2
  }
}
   d6020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6024:	f7ff bfbb 	b.w	d5f9e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6028:	212d      	movs	r1, #45	; 0x2d
   d602a:	f7ff ff9f 	bl	d5f6c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d602e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6030:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6032:	4271      	negs	r1, r6
   d6034:	4638      	mov	r0, r7
   d6036:	f7ff ffb2 	bl	d5f9e <_ZN5Print11printNumberEmh>
   d603a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6040 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6044:	ec57 6b10 	vmov	r6, r7, d0
   d6048:	4682      	mov	sl, r0
   d604a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d604c:	ee10 2a10 	vmov	r2, s0
   d6050:	463b      	mov	r3, r7
   d6052:	ee10 0a10 	vmov	r0, s0
   d6056:	4639      	mov	r1, r7
   d6058:	f001 fa36 	bl	d74c8 <__aeabi_dcmpun>
   d605c:	b108      	cbz	r0, d6062 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d605e:	4948      	ldr	r1, [pc, #288]	; (d6180 <_ZN5Print10printFloatEdh+0x140>)
   d6060:	e012      	b.n	d6088 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6062:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d606a:	4b46      	ldr	r3, [pc, #280]	; (d6184 <_ZN5Print10printFloatEdh+0x144>)
   d606c:	4630      	mov	r0, r6
   d606e:	4649      	mov	r1, r9
   d6070:	f001 fa2a 	bl	d74c8 <__aeabi_dcmpun>
   d6074:	b968      	cbnz	r0, d6092 <_ZN5Print10printFloatEdh+0x52>
   d6076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d607a:	4b42      	ldr	r3, [pc, #264]	; (d6184 <_ZN5Print10printFloatEdh+0x144>)
   d607c:	4630      	mov	r0, r6
   d607e:	4649      	mov	r1, r9
   d6080:	f001 fa04 	bl	d748c <__aeabi_dcmple>
   d6084:	b928      	cbnz	r0, d6092 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6086:	4940      	ldr	r1, [pc, #256]	; (d6188 <_ZN5Print10printFloatEdh+0x148>)
   d6088:	4650      	mov	r0, sl
   d608a:	f7ff ff5f 	bl	d5f4c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6092:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6096:	4b3d      	ldr	r3, [pc, #244]	; (d618c <_ZN5Print10printFloatEdh+0x14c>)
   d6098:	4630      	mov	r0, r6
   d609a:	4639      	mov	r1, r7
   d609c:	f001 fa0a 	bl	d74b4 <__aeabi_dcmpgt>
   d60a0:	b108      	cbz	r0, d60a6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60a2:	493b      	ldr	r1, [pc, #236]	; (d6190 <_ZN5Print10printFloatEdh+0x150>)
   d60a4:	e7f0      	b.n	d6088 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d60a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d60aa:	4b3a      	ldr	r3, [pc, #232]	; (d6194 <_ZN5Print10printFloatEdh+0x154>)
   d60ac:	4630      	mov	r0, r6
   d60ae:	4639      	mov	r1, r7
   d60b0:	f001 f9e2 	bl	d7478 <__aeabi_dcmplt>
   d60b4:	2800      	cmp	r0, #0
   d60b6:	d1f4      	bne.n	d60a2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d60b8:	2200      	movs	r2, #0
   d60ba:	2300      	movs	r3, #0
   d60bc:	4630      	mov	r0, r6
   d60be:	4639      	mov	r1, r7
   d60c0:	f001 f9da 	bl	d7478 <__aeabi_dcmplt>
   d60c4:	b140      	cbz	r0, d60d8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d60c6:	212d      	movs	r1, #45	; 0x2d
   d60c8:	4650      	mov	r0, sl
   d60ca:	f7ff ff4f 	bl	d5f6c <_ZN5Print5printEc>
     number = -number;
   d60ce:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d60d2:	4604      	mov	r4, r0
     number = -number;
   d60d4:	461f      	mov	r7, r3
   d60d6:	e000      	b.n	d60da <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d60d8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d60da:	492f      	ldr	r1, [pc, #188]	; (d6198 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d60dc:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d60e0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d60e2:	fa5f f388 	uxtb.w	r3, r8
   d60e6:	429d      	cmp	r5, r3
   d60e8:	d906      	bls.n	d60f8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d60ea:	2200      	movs	r2, #0
   d60ec:	4b2b      	ldr	r3, [pc, #172]	; (d619c <_ZN5Print10printFloatEdh+0x15c>)
   d60ee:	f001 f87b 	bl	d71e8 <__aeabi_ddiv>
   d60f2:	f108 0801 	add.w	r8, r8, #1
   d60f6:	e7f4      	b.n	d60e2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d60f8:	4632      	mov	r2, r6
   d60fa:	463b      	mov	r3, r7
   d60fc:	f000 fd98 	bl	d6c30 <__adddf3>
   d6100:	460f      	mov	r7, r1
   d6102:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6104:	f001 fa1e 	bl	d7544 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6108:	220a      	movs	r2, #10
   d610a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d610c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d610e:	4650      	mov	r0, sl
   d6110:	f7ff ff45 	bl	d5f9e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6114:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6116:	b37d      	cbz	r5, d6178 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6118:	4640      	mov	r0, r8
   d611a:	f000 fec5 	bl	d6ea8 <__aeabi_ui2d>
   d611e:	4602      	mov	r2, r0
   d6120:	460b      	mov	r3, r1
   d6122:	4630      	mov	r0, r6
   d6124:	4639      	mov	r1, r7
   d6126:	f000 fd81 	bl	d6c2c <__aeabi_dsub>
   d612a:	4606      	mov	r6, r0
   d612c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d612e:	4650      	mov	r0, sl
   d6130:	491b      	ldr	r1, [pc, #108]	; (d61a0 <_ZN5Print10printFloatEdh+0x160>)
   d6132:	f7ff ff0b 	bl	d5f4c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6136:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6138:	4b18      	ldr	r3, [pc, #96]	; (d619c <_ZN5Print10printFloatEdh+0x15c>)
   d613a:	2200      	movs	r2, #0
   d613c:	4630      	mov	r0, r6
   d613e:	4639      	mov	r1, r7
   d6140:	f000 ff28 	bl	d6f94 <__aeabi_dmul>
   d6144:	460f      	mov	r7, r1
   d6146:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d6148:	f001 f9d4 	bl	d74f4 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d614c:	220a      	movs	r2, #10
   d614e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6150:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6152:	4650      	mov	r0, sl
   d6154:	f7ff ff52 	bl	d5ffc <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d6158:	4404      	add	r4, r0
    remainder -= toPrint;
   d615a:	4640      	mov	r0, r8
   d615c:	f000 feb4 	bl	d6ec8 <__aeabi_i2d>
   d6160:	4602      	mov	r2, r0
   d6162:	460b      	mov	r3, r1
   d6164:	4630      	mov	r0, r6
   d6166:	4639      	mov	r1, r7
   d6168:	f000 fd60 	bl	d6c2c <__aeabi_dsub>
   d616c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d616e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6172:	4606      	mov	r6, r0
   d6174:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6176:	d1df      	bne.n	d6138 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6178:	4620      	mov	r0, r4
   d617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d617e:	bf00      	nop
   d6180:	000d86ac 	.word	0x000d86ac
   d6184:	7fefffff 	.word	0x7fefffff
   d6188:	000d86b4 	.word	0x000d86b4
   d618c:	41efffff 	.word	0x41efffff
   d6190:	000d86b0 	.word	0x000d86b0
   d6194:	c1efffff 	.word	0xc1efffff
   d6198:	3fe00000 	.word	0x3fe00000
   d619c:	40240000 	.word	0x40240000
   d61a0:	000d827b 	.word	0x000d827b

000d61a4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d61a4:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d61a6:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d61a8:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d61aa:	f7ff ff49 	bl	d6040 <_ZN5Print10printFloatEdh>
   d61ae:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d61b0:	4628      	mov	r0, r5
   d61b2:	f7ff fede 	bl	d5f72 <_ZN5Print7printlnEv>
  return n;
}
   d61b6:	4420      	add	r0, r4
   d61b8:	bd38      	pop	{r3, r4, r5, pc}

000d61ba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d61ba:	b510      	push	{r4, lr}
   d61bc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61be:	f7ff f948 	bl	d5452 <_ZNSt14_Function_baseD1Ev>
   d61c2:	4620      	mov	r0, r4
   d61c4:	bd10      	pop	{r4, pc}
	...

000d61c8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61c8:	4803      	ldr	r0, [pc, #12]	; (d61d8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d61ca:	4a04      	ldr	r2, [pc, #16]	; (d61dc <_GLOBAL__sub_I_RGB+0x14>)
   d61cc:	4904      	ldr	r1, [pc, #16]	; (d61e0 <_GLOBAL__sub_I_RGB+0x18>)
   d61ce:	2300      	movs	r3, #0
   d61d0:	6083      	str	r3, [r0, #8]
   d61d2:	f000 bbd5 	b.w	d6980 <__aeabi_atexit>
   d61d6:	bf00      	nop
   d61d8:	2003e554 	.word	0x2003e554
   d61dc:	2003e2bc 	.word	0x2003e2bc
   d61e0:	000d61bb 	.word	0x000d61bb

000d61e4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d61e4:	4770      	bx	lr

000d61e6 <_ZN8SPIClassD0Ev>:
   d61e6:	b510      	push	{r4, lr}
   d61e8:	2110      	movs	r1, #16
   d61ea:	4604      	mov	r4, r0
   d61ec:	f000 fbcd 	bl	d698a <_ZdlPvj>
   d61f0:	4620      	mov	r0, r4
   d61f2:	bd10      	pop	{r4, pc}

000d61f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d61f4:	b570      	push	{r4, r5, r6, lr}
   d61f6:	4b08      	ldr	r3, [pc, #32]	; (d6218 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d61f8:	6003      	str	r3, [r0, #0]
   d61fa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d61fc:	2500      	movs	r5, #0
   d61fe:	460e      	mov	r6, r1
   d6200:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6204:	f7fe fe52 	bl	d4eac <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6208:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d620a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d620c:	f7fe ff36 	bl	d507c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6210:	60a5      	str	r5, [r4, #8]
}
   d6212:	4620      	mov	r0, r4
   d6214:	bd70      	pop	{r4, r5, r6, pc}
   d6216:	bf00      	nop
   d6218:	000d86c0 	.word	0x000d86c0

000d621c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d621c:	7900      	ldrb	r0, [r0, #4]
   d621e:	f7fe bf35 	b.w	d508c <HAL_SPI_Is_Enabled>

000d6222 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6222:	2300      	movs	r3, #0
   d6224:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6226:	6043      	str	r3, [r0, #4]
	len = 0;
   d6228:	6083      	str	r3, [r0, #8]
	flags = 0;
   d622a:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d622c:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d622e:	680c      	ldr	r4, [r1, #0]
   d6230:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6232:	684c      	ldr	r4, [r1, #4]
   d6234:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6236:	688c      	ldr	r4, [r1, #8]
   d6238:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d623a:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d623c:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d623e:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6240:	bd10      	pop	{r4, pc}

000d6242 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6242:	b510      	push	{r4, lr}
   d6244:	4604      	mov	r4, r0
{
	free(buffer);
   d6246:	6800      	ldr	r0, [r0, #0]
   d6248:	f7ff f89e 	bl	d5388 <free>
}
   d624c:	4620      	mov	r0, r4
   d624e:	bd10      	pop	{r4, pc}

000d6250 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6250:	b510      	push	{r4, lr}
   d6252:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6254:	6800      	ldr	r0, [r0, #0]
   d6256:	b108      	cbz	r0, d625c <_ZN6String10invalidateEv+0xc>
   d6258:	f7ff f896 	bl	d5388 <free>
	buffer = NULL;
   d625c:	2300      	movs	r3, #0
   d625e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6260:	60a3      	str	r3, [r4, #8]
   d6262:	6063      	str	r3, [r4, #4]
   d6264:	bd10      	pop	{r4, pc}

000d6266 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6266:	b538      	push	{r3, r4, r5, lr}
   d6268:	4604      	mov	r4, r0
   d626a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d626c:	6800      	ldr	r0, [r0, #0]
   d626e:	3101      	adds	r1, #1
   d6270:	f7ff f892 	bl	d5398 <realloc>
	if (newbuffer) {
   d6274:	b110      	cbz	r0, d627c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6276:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d627a:	2001      	movs	r0, #1
	}
	return 0;
}
   d627c:	bd38      	pop	{r3, r4, r5, pc}

000d627e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d627e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6280:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6282:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6284:	b113      	cbz	r3, d628c <_ZN6String7reserveEj+0xe>
   d6286:	6843      	ldr	r3, [r0, #4]
   d6288:	428b      	cmp	r3, r1
   d628a:	d207      	bcs.n	d629c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d628c:	4620      	mov	r0, r4
   d628e:	f7ff ffea 	bl	d6266 <_ZN6String12changeBufferEj>
   d6292:	b120      	cbz	r0, d629e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6294:	68a3      	ldr	r3, [r4, #8]
   d6296:	b90b      	cbnz	r3, d629c <_ZN6String7reserveEj+0x1e>
   d6298:	6822      	ldr	r2, [r4, #0]
   d629a:	7013      	strb	r3, [r2, #0]
   d629c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d629e:	bd10      	pop	{r4, pc}

000d62a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d62a0:	b570      	push	{r4, r5, r6, lr}
   d62a2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d62a4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d62a6:	4604      	mov	r4, r0
   d62a8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d62aa:	f7ff ffe8 	bl	d627e <_ZN6String7reserveEj>
   d62ae:	b918      	cbnz	r0, d62b8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d62b0:	4620      	mov	r0, r4
   d62b2:	f7ff ffcd 	bl	d6250 <_ZN6String10invalidateEv>
		return *this;
   d62b6:	e009      	b.n	d62cc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d62b8:	462a      	mov	r2, r5
   d62ba:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d62bc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d62be:	6820      	ldr	r0, [r4, #0]
   d62c0:	f001 faba 	bl	d7838 <memcpy>
	buffer[len] = 0;
   d62c4:	6822      	ldr	r2, [r4, #0]
   d62c6:	68a3      	ldr	r3, [r4, #8]
   d62c8:	2100      	movs	r1, #0
   d62ca:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d62cc:	4620      	mov	r0, r4
   d62ce:	bd70      	pop	{r4, r5, r6, pc}

000d62d0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d62d0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d62d2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d62d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d62d6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d62d8:	6043      	str	r3, [r0, #4]
	len = 0;
   d62da:	6083      	str	r3, [r0, #8]
	flags = 0;
   d62dc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d62de:	460d      	mov	r5, r1
   d62e0:	b139      	cbz	r1, d62f2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d62e2:	4608      	mov	r0, r1
   d62e4:	f001 fb11 	bl	d790a <strlen>
   d62e8:	4629      	mov	r1, r5
   d62ea:	4602      	mov	r2, r0
   d62ec:	4620      	mov	r0, r4
   d62ee:	f7ff ffd7 	bl	d62a0 <_ZN6String4copyEPKcj>
}
   d62f2:	4620      	mov	r0, r4
   d62f4:	bd38      	pop	{r3, r4, r5, pc}

000d62f6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62f6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62f8:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62fa:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62fc:	b912      	cbnz	r2, d6304 <_ZNK6String6equalsEPKc+0xe>
   d62fe:	b919      	cbnz	r1, d6308 <_ZNK6String6equalsEPKc+0x12>
   d6300:	2001      	movs	r0, #1
   d6302:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6304:	b911      	cbnz	r1, d630c <_ZNK6String6equalsEPKc+0x16>
   d6306:	6803      	ldr	r3, [r0, #0]
   d6308:	7818      	ldrb	r0, [r3, #0]
   d630a:	e002      	b.n	d6312 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d630c:	6800      	ldr	r0, [r0, #0]
   d630e:	f001 facf 	bl	d78b0 <strcmp>
   d6312:	fab0 f080 	clz	r0, r0
   d6316:	0940      	lsrs	r0, r0, #5
}
   d6318:	bd08      	pop	{r3, pc}

000d631a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d631a:	b570      	push	{r4, r5, r6, lr}
   d631c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d631e:	b19a      	cbz	r2, d6348 <_ZNK6String8getBytesEPhjj+0x2e>
   d6320:	b191      	cbz	r1, d6348 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6322:	6885      	ldr	r5, [r0, #8]
   d6324:	429d      	cmp	r5, r3
   d6326:	d802      	bhi.n	d632e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6328:	2300      	movs	r3, #0
   d632a:	700b      	strb	r3, [r1, #0]
		return;
   d632c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d632e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6330:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6332:	6801      	ldr	r1, [r0, #0]
   d6334:	42ac      	cmp	r4, r5
   d6336:	bf28      	it	cs
   d6338:	462c      	movcs	r4, r5
   d633a:	4419      	add	r1, r3
   d633c:	4622      	mov	r2, r4
   d633e:	4630      	mov	r0, r6
   d6340:	f001 fb00 	bl	d7944 <strncpy>
	buf[n] = 0;
   d6344:	2300      	movs	r3, #0
   d6346:	5533      	strb	r3, [r6, r4]
   d6348:	bd70      	pop	{r4, r5, r6, pc}

000d634a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d634a:	4601      	mov	r1, r0
   d634c:	2200      	movs	r2, #0
   d634e:	208c      	movs	r0, #140	; 0x8c
   d6350:	f7fe bdbc 	b.w	d4ecc <HAL_Core_System_Reset_Ex>

000d6354 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6354:	2000      	movs	r0, #0
   d6356:	f7ff bff8 	b.w	d634a <_ZN11SystemClass5resetEm>

000d635a <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d635a:	b510      	push	{r4, lr}
   d635c:	2400      	movs	r4, #0
   d635e:	7004      	strb	r4, [r0, #0]
   d6360:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d6362:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d6364:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d6368:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d636a:	dd07      	ble.n	d637c <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d636c:	3901      	subs	r1, #1
   d636e:	4299      	cmp	r1, r3
   d6370:	d209      	bcs.n	d6386 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d6372:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d6376:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d6378:	2301      	movs	r3, #1
   d637a:	e001      	b.n	d6380 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d637c:	d102      	bne.n	d6384 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d637e:	2302      	movs	r3, #2
   d6380:	7003      	strb	r3, [r0, #0]
   d6382:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d6384:	8041      	strh	r1, [r0, #2]
    }
}
   d6386:	bd10      	pop	{r4, pc}

000d6388 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6388:	b570      	push	{r4, r5, r6, lr}
   d638a:	b086      	sub	sp, #24
   d638c:	4616      	mov	r6, r2
   d638e:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6390:	2300      	movs	r3, #0
   d6392:	9302      	str	r3, [sp, #8]
   d6394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6396:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6398:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d639a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d639c:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d639e:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d63a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d63a2:	4631      	mov	r1, r6
   d63a4:	4628      	mov	r0, r5
   d63a6:	f7fe ff35 	bl	d5214 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d63aa:	4633      	mov	r3, r6
   d63ac:	462a      	mov	r2, r5
   d63ae:	4601      	mov	r1, r0
   d63b0:	a804      	add	r0, sp, #16
   d63b2:	f7ff ffd2 	bl	d635a <_ZN11SleepResultC1EiPKtj>
   d63b6:	4b06      	ldr	r3, [pc, #24]	; (d63d0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d63b8:	9804      	ldr	r0, [sp, #16]
   d63ba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d63be:	6018      	str	r0, [r3, #0]
   d63c0:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d63c2:	681a      	ldr	r2, [r3, #0]
   d63c4:	889b      	ldrh	r3, [r3, #4]
   d63c6:	6022      	str	r2, [r4, #0]
}
   d63c8:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d63ca:	80a3      	strh	r3, [r4, #4]
}
   d63cc:	b006      	add	sp, #24
   d63ce:	bd70      	pop	{r4, r5, r6, pc}
   d63d0:	2003e564 	.word	0x2003e564

000d63d4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d63d4:	4b04      	ldr	r3, [pc, #16]	; (d63e8 <_GLOBAL__sub_I_System+0x14>)
   d63d6:	2000      	movs	r0, #0
   d63d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d63dc:	7018      	strb	r0, [r3, #0]
   d63de:	8058      	strh	r0, [r3, #2]
   d63e0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d63e2:	f7fe bedb 	b.w	d519c <set_system_mode>
   d63e6:	bf00      	nop
   d63e8:	2003e564 	.word	0x2003e564

000d63ec <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d63ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d63ee:	4b14      	ldr	r3, [pc, #80]	; (d6440 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d63f0:	4f14      	ldr	r7, [pc, #80]	; (d6444 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d63f2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d63f4:	4b14      	ldr	r3, [pc, #80]	; (d6448 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d63f6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d63f8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d63fa:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d63fc:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d63fe:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6400:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6402:	d01b      	beq.n	d643c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6404:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d6406:	ad01      	add	r5, sp, #4
   d6408:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d640c:	f001 f91c 	bl	d7648 <localtime>
	calendar_time->tm_year += 1900;
   d6410:	6943      	ldr	r3, [r0, #20]
   d6412:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6416:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d6418:	4604      	mov	r4, r0
   d641a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d641c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d641e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6422:	f8d4 e000 	ldr.w	lr, [r4]
   d6426:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d642a:	ad01      	add	r5, sp, #4
   d642c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d642e:	4c07      	ldr	r4, [pc, #28]	; (d644c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d6430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6436:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6438:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d643c:	b00b      	add	sp, #44	; 0x2c
   d643e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6440:	2003e59c 	.word	0x2003e59c
   d6444:	2003e598 	.word	0x2003e598
   d6448:	2003e594 	.word	0x2003e594
   d644c:	2003e56c 	.word	0x2003e56c

000d6450 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d6450:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6452:	2000      	movs	r0, #0
   d6454:	f7fe ff30 	bl	d52b8 <spark_sync_time_pending>
   d6458:	b128      	cbz	r0, d6466 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d645a:	f7fe ff05 	bl	d5268 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d645e:	f080 0001 	eor.w	r0, r0, #1
   d6462:	b2c0      	uxtb	r0, r0
   d6464:	bd08      	pop	{r3, pc}
   d6466:	2001      	movs	r0, #1
    }
   d6468:	bd08      	pop	{r3, pc}

000d646a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d646a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d646c:	2000      	movs	r0, #0
   d646e:	f7fe fd75 	bl	d4f5c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6472:	4604      	mov	r4, r0
   d6474:	b968      	cbnz	r0, d6492 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6476:	f7fe fe89 	bl	d518c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d647a:	2801      	cmp	r0, #1
   d647c:	d10b      	bne.n	d6496 <_ZN9TimeClass7isValidEv+0x2c>
   d647e:	4620      	mov	r0, r4
   d6480:	f7fe feac 	bl	d51dc <system_thread_get_state>
   d6484:	b938      	cbnz	r0, d6496 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6486:	f7ff ffe3 	bl	d6450 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d648a:	b930      	cbnz	r0, d649a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d648c:	f7fe fedc 	bl	d5248 <spark_process>
   d6490:	e7f9      	b.n	d6486 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6492:	2001      	movs	r0, #1
   d6494:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6496:	2000      	movs	r0, #0
   d6498:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d649a:	f7ff ffd9 	bl	d6450 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d649e:	2000      	movs	r0, #0
   d64a0:	f7fe fd5c 	bl	d4f5c <HAL_RTC_Time_Is_Valid>
   d64a4:	3000      	adds	r0, #0
   d64a6:	bf18      	it	ne
   d64a8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d64aa:	bd10      	pop	{r4, pc}

000d64ac <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d64ac:	b508      	push	{r3, lr}
    (void)isValid();
   d64ae:	f7ff ffdc 	bl	d646a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d64b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d64b6:	f7fe bd21 	b.w	d4efc <HAL_RTC_Get_UnixTime>
	...

000d64bc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d64bc:	b508      	push	{r3, lr}
	return hour(now());
   d64be:	f7ff fff5 	bl	d64ac <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d64c2:	f7ff ff93 	bl	d63ec <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d64c6:	4b01      	ldr	r3, [pc, #4]	; (d64cc <_ZN9TimeClass4hourEv+0x10>)
   d64c8:	6898      	ldr	r0, [r3, #8]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	2003e56c 	.word	0x2003e56c

000d64d0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d64d0:	b508      	push	{r3, lr}
	return minute(now());
   d64d2:	f7ff ffeb 	bl	d64ac <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d64d6:	f7ff ff89 	bl	d63ec <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d64da:	4b01      	ldr	r3, [pc, #4]	; (d64e0 <_ZN9TimeClass6minuteEv+0x10>)
   d64dc:	6858      	ldr	r0, [r3, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	2003e56c 	.word	0x2003e56c

000d64e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d64e4:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	4b02      	ldr	r3, [pc, #8]	; (d64f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d64ea:	601a      	str	r2, [r3, #0]
   d64ec:	4770      	bx	lr
   d64ee:	bf00      	nop
   d64f0:	2003e204 	.word	0x2003e204
   d64f4:	2003e590 	.word	0x2003e590

000d64f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d64f8:	4770      	bx	lr

000d64fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64fa:	7441      	strb	r1, [r0, #17]
   d64fc:	4770      	bx	lr

000d64fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d64fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6500:	7c00      	ldrb	r0, [r0, #16]
   d6502:	f7fe fe03 	bl	d510c <HAL_USART_Available_Data_For_Write>
}
   d6506:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d650a:	bd08      	pop	{r3, pc}

000d650c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d650c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d650e:	7c00      	ldrb	r0, [r0, #16]
   d6510:	f7fe fdd4 	bl	d50bc <HAL_USART_Available_Data>
}
   d6514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6518:	bd08      	pop	{r3, pc}

000d651a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d651a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d651c:	7c00      	ldrb	r0, [r0, #16]
   d651e:	f7fe fddd 	bl	d50dc <HAL_USART_Peek_Data>
}
   d6522:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6526:	bf28      	it	cs
   d6528:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d652c:	bd08      	pop	{r3, pc}

000d652e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d652e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6530:	7c00      	ldrb	r0, [r0, #16]
   d6532:	f7fe fdcb 	bl	d50cc <HAL_USART_Read_Data>
}
   d6536:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d653a:	bf28      	it	cs
   d653c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6540:	bd08      	pop	{r3, pc}

000d6542 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6542:	7c00      	ldrb	r0, [r0, #16]
   d6544:	f7fe bdd2 	b.w	d50ec <HAL_USART_Flush_Data>

000d6548 <_ZN11USARTSerialD0Ev>:
   d6548:	b510      	push	{r4, lr}
   d654a:	2114      	movs	r1, #20
   d654c:	4604      	mov	r4, r0
   d654e:	f000 fa1c 	bl	d698a <_ZdlPvj>
   d6552:	4620      	mov	r0, r4
   d6554:	bd10      	pop	{r4, pc}

000d6556 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6556:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6558:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d655a:	4604      	mov	r4, r0
   d655c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d655e:	b925      	cbnz	r5, d656a <_ZN11USARTSerial5writeEh+0x14>
   d6560:	7c00      	ldrb	r0, [r0, #16]
   d6562:	f7fe fdd3 	bl	d510c <HAL_USART_Available_Data_For_Write>
   d6566:	2800      	cmp	r0, #0
   d6568:	dd05      	ble.n	d6576 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d656a:	4631      	mov	r1, r6
   d656c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d656e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6572:	f7fe bd9b 	b.w	d50ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d6576:	4628      	mov	r0, r5
   d6578:	bd70      	pop	{r4, r5, r6, pc}
	...

000d657c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d657c:	b510      	push	{r4, lr}
   d657e:	4604      	mov	r4, r0
   d6580:	4608      	mov	r0, r1
   d6582:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6584:	2200      	movs	r2, #0
   d6586:	6062      	str	r2, [r4, #4]
   d6588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d658c:	60a2      	str	r2, [r4, #8]
   d658e:	4a05      	ldr	r2, [pc, #20]	; (d65a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6590:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6592:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6594:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6596:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6598:	461a      	mov	r2, r3
   d659a:	f7fe fd7f 	bl	d509c <HAL_USART_Init>
}
   d659e:	4620      	mov	r0, r4
   d65a0:	bd10      	pop	{r4, pc}
   d65a2:	bf00      	nop
   d65a4:	000d86f8 	.word	0x000d86f8

000d65a8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d65a8:	7c00      	ldrb	r0, [r0, #16]
   d65aa:	f7fe bda7 	b.w	d50fc <HAL_USART_Is_Enabled>
	...

000d65b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d65b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d65b2:	4d0c      	ldr	r5, [pc, #48]	; (d65e4 <_Z22__fetch_global_Serial1v+0x34>)
   d65b4:	6829      	ldr	r1, [r5, #0]
   d65b6:	f011 0401 	ands.w	r4, r1, #1
   d65ba:	d111      	bne.n	d65e0 <_Z22__fetch_global_Serial1v+0x30>
   d65bc:	4628      	mov	r0, r5
   d65be:	f7fd fd72 	bl	d40a6 <__cxa_guard_acquire>
   d65c2:	b168      	cbz	r0, d65e0 <_Z22__fetch_global_Serial1v+0x30>
   d65c4:	4a08      	ldr	r2, [pc, #32]	; (d65e8 <_Z22__fetch_global_Serial1v+0x38>)
   d65c6:	4b09      	ldr	r3, [pc, #36]	; (d65ec <_Z22__fetch_global_Serial1v+0x3c>)
   d65c8:	4809      	ldr	r0, [pc, #36]	; (d65f0 <_Z22__fetch_global_Serial1v+0x40>)
   d65ca:	4621      	mov	r1, r4
   d65cc:	f7ff ffd6 	bl	d657c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d65d0:	4628      	mov	r0, r5
   d65d2:	f7fd fd6d 	bl	d40b0 <__cxa_guard_release>
   d65d6:	4a07      	ldr	r2, [pc, #28]	; (d65f4 <_Z22__fetch_global_Serial1v+0x44>)
   d65d8:	4907      	ldr	r1, [pc, #28]	; (d65f8 <_Z22__fetch_global_Serial1v+0x48>)
   d65da:	4805      	ldr	r0, [pc, #20]	; (d65f0 <_Z22__fetch_global_Serial1v+0x40>)
   d65dc:	f000 f9d0 	bl	d6980 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d65e0:	4803      	ldr	r0, [pc, #12]	; (d65f0 <_Z22__fetch_global_Serial1v+0x40>)
   d65e2:	bd38      	pop	{r3, r4, r5, pc}
   d65e4:	2003e638 	.word	0x2003e638
   d65e8:	2003e63c 	.word	0x2003e63c
   d65ec:	2003e5b4 	.word	0x2003e5b4
   d65f0:	2003e5a0 	.word	0x2003e5a0
   d65f4:	2003e2bc 	.word	0x2003e2bc
   d65f8:	000d64f9 	.word	0x000d64f9

000d65fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65fc:	7441      	strb	r1, [r0, #17]
   d65fe:	4770      	bx	lr

000d6600 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6600:	4770      	bx	lr

000d6602 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6602:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6604:	2100      	movs	r1, #0
   d6606:	7c00      	ldrb	r0, [r0, #16]
   d6608:	f7fe fda8 	bl	d515c <HAL_USB_USART_Receive_Data>
}
   d660c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6610:	bf28      	it	cs
   d6612:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6616:	bd08      	pop	{r3, pc}

000d6618 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6618:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d661a:	2101      	movs	r1, #1
   d661c:	7c00      	ldrb	r0, [r0, #16]
   d661e:	f7fe fd9d 	bl	d515c <HAL_USB_USART_Receive_Data>
}
   d6622:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6626:	bf28      	it	cs
   d6628:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d662c:	bd08      	pop	{r3, pc}

000d662e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d662e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6630:	7c00      	ldrb	r0, [r0, #16]
   d6632:	f7fe fd8b 	bl	d514c <HAL_USB_USART_Available_Data_For_Write>
}
   d6636:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d663a:	bd08      	pop	{r3, pc}

000d663c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d663c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d663e:	7c00      	ldrb	r0, [r0, #16]
   d6640:	f7fe fd7c 	bl	d513c <HAL_USB_USART_Available_Data>
}
   d6644:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6648:	bd08      	pop	{r3, pc}

000d664a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d664a:	7c00      	ldrb	r0, [r0, #16]
   d664c:	f7fe bd96 	b.w	d517c <HAL_USB_USART_Flush_Data>

000d6650 <_ZN9USBSerialD0Ev>:
   d6650:	b510      	push	{r4, lr}
   d6652:	2114      	movs	r1, #20
   d6654:	4604      	mov	r4, r0
   d6656:	f000 f998 	bl	d698a <_ZdlPvj>
   d665a:	4620      	mov	r0, r4
   d665c:	bd10      	pop	{r4, pc}

000d665e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d665e:	b538      	push	{r3, r4, r5, lr}
   d6660:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6662:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6664:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6666:	f7fe fd71 	bl	d514c <HAL_USB_USART_Available_Data_For_Write>
   d666a:	2800      	cmp	r0, #0
   d666c:	dc01      	bgt.n	d6672 <_ZN9USBSerial5writeEh+0x14>
   d666e:	7c60      	ldrb	r0, [r4, #17]
   d6670:	b128      	cbz	r0, d667e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6672:	4629      	mov	r1, r5
   d6674:	7c20      	ldrb	r0, [r4, #16]
   d6676:	f7fe fd79 	bl	d516c <HAL_USB_USART_Send_Data>
   d667a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d667e:	bd38      	pop	{r3, r4, r5, pc}

000d6680 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6680:	b510      	push	{r4, lr}
   d6682:	4604      	mov	r4, r0
   d6684:	2300      	movs	r3, #0
   d6686:	6063      	str	r3, [r4, #4]
   d6688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d668c:	60a3      	str	r3, [r4, #8]
   d668e:	4b05      	ldr	r3, [pc, #20]	; (d66a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6690:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6692:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6694:	4608      	mov	r0, r1
{
  _serial = serial;
   d6696:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6698:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d669a:	4611      	mov	r1, r2
   d669c:	f7fe fd3e 	bl	d511c <HAL_USB_USART_Init>
}
   d66a0:	4620      	mov	r0, r4
   d66a2:	bd10      	pop	{r4, pc}
   d66a4:	000d8728 	.word	0x000d8728

000d66a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d66a8:	2200      	movs	r2, #0
   d66aa:	7c00      	ldrb	r0, [r0, #16]
   d66ac:	f7fe bd3e 	b.w	d512c <HAL_USB_USART_Begin>

000d66b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d66b2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d66b6:	2100      	movs	r1, #0
   d66b8:	f001 f8c9 	bl	d784e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d66bc:	4620      	mov	r0, r4
   d66be:	bd10      	pop	{r4, pc}

000d66c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d66c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66c2:	4d0e      	ldr	r5, [pc, #56]	; (d66fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d66c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d66c6:	a801      	add	r0, sp, #4
   d66c8:	f7ff fff2 	bl	d66b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66cc:	6829      	ldr	r1, [r5, #0]
   d66ce:	f011 0401 	ands.w	r4, r1, #1
   d66d2:	d110      	bne.n	d66f6 <_Z16_fetch_usbserialv+0x36>
   d66d4:	4628      	mov	r0, r5
   d66d6:	f7fd fce6 	bl	d40a6 <__cxa_guard_acquire>
   d66da:	b160      	cbz	r0, d66f6 <_Z16_fetch_usbserialv+0x36>
   d66dc:	aa01      	add	r2, sp, #4
   d66de:	4621      	mov	r1, r4
   d66e0:	4807      	ldr	r0, [pc, #28]	; (d6700 <_Z16_fetch_usbserialv+0x40>)
   d66e2:	f7ff ffcd 	bl	d6680 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66e6:	4628      	mov	r0, r5
   d66e8:	f7fd fce2 	bl	d40b0 <__cxa_guard_release>
   d66ec:	4a05      	ldr	r2, [pc, #20]	; (d6704 <_Z16_fetch_usbserialv+0x44>)
   d66ee:	4906      	ldr	r1, [pc, #24]	; (d6708 <_Z16_fetch_usbserialv+0x48>)
   d66f0:	4803      	ldr	r0, [pc, #12]	; (d6700 <_Z16_fetch_usbserialv+0x40>)
   d66f2:	f000 f945 	bl	d6980 <__aeabi_atexit>
	return _usbserial;
}
   d66f6:	4802      	ldr	r0, [pc, #8]	; (d6700 <_Z16_fetch_usbserialv+0x40>)
   d66f8:	b007      	add	sp, #28
   d66fa:	bd30      	pop	{r4, r5, pc}
   d66fc:	2003e6c0 	.word	0x2003e6c0
   d6700:	2003e6c4 	.word	0x2003e6c4
   d6704:	2003e2bc 	.word	0x2003e2bc
   d6708:	000d6601 	.word	0x000d6601

000d670c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d670c:	2200      	movs	r2, #0
   d670e:	4611      	mov	r1, r2
   d6710:	6840      	ldr	r0, [r0, #4]
   d6712:	f7fe bdf9 	b.w	d5308 <network_ready>

000d6716 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6716:	2200      	movs	r2, #0
   d6718:	4611      	mov	r1, r2
   d671a:	6840      	ldr	r0, [r0, #4]
   d671c:	f7fe be14 	b.w	d5348 <network_listening>

000d6720 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6720:	2200      	movs	r2, #0
   d6722:	4611      	mov	r1, r2
   d6724:	6840      	ldr	r0, [r0, #4]
   d6726:	f7fe be1f 	b.w	d5368 <network_get_listen_timeout>

000d672a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d672a:	2200      	movs	r2, #0
   d672c:	6840      	ldr	r0, [r0, #4]
   d672e:	f7fe be13 	b.w	d5358 <network_set_listen_timeout>

000d6732 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6732:	2200      	movs	r2, #0
   d6734:	f081 0101 	eor.w	r1, r1, #1
   d6738:	6840      	ldr	r0, [r0, #4]
   d673a:	f7fe bdfd 	b.w	d5338 <network_listen>

000d673e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d673e:	2300      	movs	r3, #0
   d6740:	461a      	mov	r2, r3
   d6742:	4619      	mov	r1, r3
   d6744:	6840      	ldr	r0, [r0, #4]
   d6746:	f7fe bdef 	b.w	d5328 <network_off>

000d674a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d674a:	2300      	movs	r3, #0
   d674c:	461a      	mov	r2, r3
   d674e:	4619      	mov	r1, r3
   d6750:	6840      	ldr	r0, [r0, #4]
   d6752:	f7fe bde1 	b.w	d5318 <network_on>

000d6756 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6756:	2200      	movs	r2, #0
   d6758:	4611      	mov	r1, r2
   d675a:	6840      	ldr	r0, [r0, #4]
   d675c:	f7fe bdc4 	b.w	d52e8 <network_connecting>

000d6760 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6760:	2200      	movs	r2, #0
   d6762:	2102      	movs	r1, #2
   d6764:	6840      	ldr	r0, [r0, #4]
   d6766:	f7fe bdc7 	b.w	d52f8 <network_disconnect>

000d676a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d676a:	2300      	movs	r3, #0
   d676c:	461a      	mov	r2, r3
   d676e:	6840      	ldr	r0, [r0, #4]
   d6770:	f7fe bdb2 	b.w	d52d8 <network_connect>

000d6774 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6774:	4b02      	ldr	r3, [pc, #8]	; (d6780 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6776:	2204      	movs	r2, #4
   d6778:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d677a:	4a02      	ldr	r2, [pc, #8]	; (d6784 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d677c:	601a      	str	r2, [r3, #0]
   d677e:	4770      	bx	lr
   d6780:	2003e6d8 	.word	0x2003e6d8
   d6784:	000d8758 	.word	0x000d8758

000d6788 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6788:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d678a:	4b0c      	ldr	r3, [pc, #48]	; (d67bc <serialEventRun+0x34>)
   d678c:	b133      	cbz	r3, d679c <serialEventRun+0x14>
   d678e:	f7ff ff97 	bl	d66c0 <_Z16_fetch_usbserialv>
   d6792:	6803      	ldr	r3, [r0, #0]
   d6794:	691b      	ldr	r3, [r3, #16]
   d6796:	4798      	blx	r3
   d6798:	2800      	cmp	r0, #0
   d679a:	dc09      	bgt.n	d67b0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d679c:	4b08      	ldr	r3, [pc, #32]	; (d67c0 <serialEventRun+0x38>)
   d679e:	b163      	cbz	r3, d67ba <serialEventRun+0x32>
   d67a0:	f7ff ff06 	bl	d65b0 <_Z22__fetch_global_Serial1v>
   d67a4:	6803      	ldr	r3, [r0, #0]
   d67a6:	691b      	ldr	r3, [r3, #16]
   d67a8:	4798      	blx	r3
   d67aa:	2800      	cmp	r0, #0
   d67ac:	dc03      	bgt.n	d67b6 <serialEventRun+0x2e>
   d67ae:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d67b0:	f3af 8000 	nop.w
   d67b4:	e7f2      	b.n	d679c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d67b6:	f3af 8000 	nop.w
   d67ba:	bd08      	pop	{r3, pc}
	...

000d67c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d67c4:	b508      	push	{r3, lr}
	serialEventRun();
   d67c6:	f7ff ffdf 	bl	d6788 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d67ca:	f7fe fb8f 	bl	d4eec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67ce:	4b01      	ldr	r3, [pc, #4]	; (d67d4 <_post_loop+0x10>)
   d67d0:	6018      	str	r0, [r3, #0]
   d67d2:	bd08      	pop	{r3, pc}
   d67d4:	2003e6e4 	.word	0x2003e6e4

000d67d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d67d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67da:	2300      	movs	r3, #0
   d67dc:	9300      	str	r3, [sp, #0]
   d67de:	461a      	mov	r2, r3
   d67e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67e4:	f7fe fd0c 	bl	d5200 <system_ctrl_set_result>
}
   d67e8:	b003      	add	sp, #12
   d67ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d67f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d67f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d67f2:	8843      	ldrh	r3, [r0, #2]
   d67f4:	2b0a      	cmp	r3, #10
   d67f6:	d008      	beq.n	d680a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d67f8:	2b50      	cmp	r3, #80	; 0x50
   d67fa:	d109      	bne.n	d6810 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d67fc:	4b09      	ldr	r3, [pc, #36]	; (d6824 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d67fe:	681b      	ldr	r3, [r3, #0]
   d6800:	b13b      	cbz	r3, d6812 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6802:	b003      	add	sp, #12
   d6804:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6808:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d680a:	f7ff ffe5 	bl	d67d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d680e:	e006      	b.n	d681e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6810:	2300      	movs	r3, #0
   d6812:	9300      	str	r3, [sp, #0]
   d6814:	461a      	mov	r2, r3
   d6816:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d681a:	f7fe fcf1 	bl	d5200 <system_ctrl_set_result>
        break;
    }
}
   d681e:	b003      	add	sp, #12
   d6820:	f85d fb04 	ldr.w	pc, [sp], #4
   d6824:	2003e6e0 	.word	0x2003e6e0

000d6828 <module_user_init_hook>:

void module_user_init_hook()
{
   d6828:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d682a:	f7fe fb57 	bl	d4edc <HAL_RNG_GetRandomNumber>
   d682e:	4604      	mov	r4, r0
    srand(seed);
   d6830:	f001 f816 	bl	d7860 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6834:	4b07      	ldr	r3, [pc, #28]	; (d6854 <module_user_init_hook+0x2c>)
   d6836:	b113      	cbz	r3, d683e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6838:	4620      	mov	r0, r4
   d683a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d683e:	2100      	movs	r1, #0
   d6840:	4804      	ldr	r0, [pc, #16]	; (d6854 <module_user_init_hook+0x2c>)
   d6842:	f7fe fd41 	bl	d52c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6846:	2100      	movs	r1, #0
   d6848:	4803      	ldr	r0, [pc, #12]	; (d6858 <module_user_init_hook+0x30>)
}
   d684a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d684e:	f7fe bccd 	b.w	d51ec <system_ctrl_set_app_request_handler>
   d6852:	bf00      	nop
   d6854:	00000000 	.word	0x00000000
   d6858:	000d67f1 	.word	0x000d67f1

000d685c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d685c:	b510      	push	{r4, lr}
   d685e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6860:	480f      	ldr	r0, [pc, #60]	; (d68a0 <pinAvailable+0x44>)
   d6862:	f7ff fcdb 	bl	d621c <_ZN8SPIClass9isEnabledEv>
   d6866:	b128      	cbz	r0, d6874 <pinAvailable+0x18>
   d6868:	f1a4 030b 	sub.w	r3, r4, #11
   d686c:	2b02      	cmp	r3, #2
   d686e:	d801      	bhi.n	d6874 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6870:	2000      	movs	r0, #0
   d6872:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6874:	f000 f842 	bl	d68fc <_Z19__fetch_global_Wirev>
   d6878:	f7ff f97d 	bl	d5b76 <_ZN7TwoWire9isEnabledEv>
   d687c:	b108      	cbz	r0, d6882 <pinAvailable+0x26>
   d687e:	2c01      	cmp	r4, #1
   d6880:	d9f6      	bls.n	d6870 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6882:	f7ff fe95 	bl	d65b0 <_Z22__fetch_global_Serial1v>
   d6886:	f7ff fe8f 	bl	d65a8 <_ZN11USARTSerial9isEnabledEv>
   d688a:	b118      	cbz	r0, d6894 <pinAvailable+0x38>
   d688c:	f1a4 0309 	sub.w	r3, r4, #9
   d6890:	2b01      	cmp	r3, #1
   d6892:	d9ed      	bls.n	d6870 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6894:	2c23      	cmp	r4, #35	; 0x23
   d6896:	bf8c      	ite	hi
   d6898:	2000      	movhi	r0, #0
   d689a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d689c:	bd10      	pop	{r4, pc}
   d689e:	bf00      	nop
   d68a0:	2003e708 	.word	0x2003e708

000d68a4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d68a4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d68a6:	b510      	push	{r4, lr}
   d68a8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d68aa:	bf9c      	itt	ls
   d68ac:	340e      	addls	r4, #14
   d68ae:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d68b0:	4620      	mov	r0, r4
   d68b2:	f7ff ffd3 	bl	d685c <pinAvailable>
   d68b6:	b150      	cbz	r0, d68ce <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d68b8:	2103      	movs	r1, #3
   d68ba:	4620      	mov	r0, r4
   d68bc:	f7fe fb5e 	bl	d4f7c <HAL_Validate_Pin_Function>
   d68c0:	2803      	cmp	r0, #3
   d68c2:	d104      	bne.n	d68ce <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d68c4:	4620      	mov	r0, r4
}
   d68c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d68ca:	f7fe bb5f 	b.w	d4f8c <HAL_ADC_Read>
}
   d68ce:	2000      	movs	r0, #0
   d68d0:	bd10      	pop	{r4, pc}
	...

000d68d4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d68d4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d68d6:	4c07      	ldr	r4, [pc, #28]	; (d68f4 <_Z21__fetch_global_EEPROMv+0x20>)
   d68d8:	6823      	ldr	r3, [r4, #0]
   d68da:	07db      	lsls	r3, r3, #31
   d68dc:	d408      	bmi.n	d68f0 <_Z21__fetch_global_EEPROMv+0x1c>
   d68de:	4620      	mov	r0, r4
   d68e0:	f7fd fbe1 	bl	d40a6 <__cxa_guard_acquire>
   d68e4:	b120      	cbz	r0, d68f0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d68e6:	f7fe fb11 	bl	d4f0c <HAL_EEPROM_Init>
   d68ea:	4620      	mov	r0, r4
   d68ec:	f7fd fbe0 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d68f0:	4801      	ldr	r0, [pc, #4]	; (d68f8 <_Z21__fetch_global_EEPROMv+0x24>)
   d68f2:	bd10      	pop	{r4, pc}
   d68f4:	2003e6e8 	.word	0x2003e6e8
   d68f8:	2003e6ec 	.word	0x2003e6ec

000d68fc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d68fc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d68fe:	4d0b      	ldr	r5, [pc, #44]	; (d692c <_Z19__fetch_global_Wirev+0x30>)
   d6900:	6829      	ldr	r1, [r5, #0]
   d6902:	f011 0401 	ands.w	r4, r1, #1
   d6906:	d10f      	bne.n	d6928 <_Z19__fetch_global_Wirev+0x2c>
   d6908:	4628      	mov	r0, r5
   d690a:	f7fd fbcc 	bl	d40a6 <__cxa_guard_acquire>
   d690e:	b158      	cbz	r0, d6928 <_Z19__fetch_global_Wirev+0x2c>
   d6910:	4621      	mov	r1, r4
   d6912:	4807      	ldr	r0, [pc, #28]	; (d6930 <_Z19__fetch_global_Wirev+0x34>)
   d6914:	f7ff f900 	bl	d5b18 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6918:	4628      	mov	r0, r5
   d691a:	f7fd fbc9 	bl	d40b0 <__cxa_guard_release>
   d691e:	4a05      	ldr	r2, [pc, #20]	; (d6934 <_Z19__fetch_global_Wirev+0x38>)
   d6920:	4905      	ldr	r1, [pc, #20]	; (d6938 <_Z19__fetch_global_Wirev+0x3c>)
   d6922:	4803      	ldr	r0, [pc, #12]	; (d6930 <_Z19__fetch_global_Wirev+0x34>)
   d6924:	f000 f82c 	bl	d6980 <__aeabi_atexit>
	return wire;
}
   d6928:	4801      	ldr	r0, [pc, #4]	; (d6930 <_Z19__fetch_global_Wirev+0x34>)
   d692a:	bd38      	pop	{r3, r4, r5, pc}
   d692c:	2003e6f0 	.word	0x2003e6f0
   d6930:	2003e6f4 	.word	0x2003e6f4
   d6934:	2003e2bc 	.word	0x2003e2bc
   d6938:	000d5ac1 	.word	0x000d5ac1

000d693c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d693c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d693e:	4c0c      	ldr	r4, [pc, #48]	; (d6970 <_GLOBAL__sub_I_SPI+0x34>)
   d6940:	4e0c      	ldr	r6, [pc, #48]	; (d6974 <_GLOBAL__sub_I_SPI+0x38>)
   d6942:	4d0d      	ldr	r5, [pc, #52]	; (d6978 <_GLOBAL__sub_I_SPI+0x3c>)
   d6944:	2100      	movs	r1, #0
   d6946:	4620      	mov	r0, r4
   d6948:	f7ff fc54 	bl	d61f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d694c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d694e:	4c0b      	ldr	r4, [pc, #44]	; (d697c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6950:	4632      	mov	r2, r6
   d6952:	4629      	mov	r1, r5
   d6954:	f000 f814 	bl	d6980 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6958:	2101      	movs	r1, #1
   d695a:	4620      	mov	r0, r4
   d695c:	f7ff fc4a 	bl	d61f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6960:	4632      	mov	r2, r6
   d6962:	4629      	mov	r1, r5
   d6964:	4620      	mov	r0, r4
   d6966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d696a:	f000 b809 	b.w	d6980 <__aeabi_atexit>
   d696e:	bf00      	nop
   d6970:	2003e708 	.word	0x2003e708
   d6974:	2003e2bc 	.word	0x2003e2bc
   d6978:	000d61e5 	.word	0x000d61e5
   d697c:	2003e718 	.word	0x2003e718

000d6980 <__aeabi_atexit>:
   d6980:	460b      	mov	r3, r1
   d6982:	4601      	mov	r1, r0
   d6984:	4618      	mov	r0, r3
   d6986:	f000 be51 	b.w	d762c <__cxa_atexit>

000d698a <_ZdlPvj>:
   d698a:	f7fd bb88 	b.w	d409e <_ZdlPv>

000d698e <_ZSt25__throw_bad_function_callv>:
   d698e:	b508      	push	{r3, lr}
   d6990:	f7fe fd1a 	bl	d53c8 <abort>

000d6994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6994:	4b24      	ldr	r3, [pc, #144]	; (d6a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6996:	681a      	ldr	r2, [r3, #0]
   d6998:	07d0      	lsls	r0, r2, #31
   d699a:	bf5c      	itt	pl
   d699c:	2201      	movpl	r2, #1
   d699e:	601a      	strpl	r2, [r3, #0]
   d69a0:	4b22      	ldr	r3, [pc, #136]	; (d6a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d69a2:	681a      	ldr	r2, [r3, #0]
   d69a4:	07d1      	lsls	r1, r2, #31
   d69a6:	bf5c      	itt	pl
   d69a8:	2201      	movpl	r2, #1
   d69aa:	601a      	strpl	r2, [r3, #0]
   d69ac:	4b20      	ldr	r3, [pc, #128]	; (d6a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d69ae:	681a      	ldr	r2, [r3, #0]
   d69b0:	07d2      	lsls	r2, r2, #31
   d69b2:	bf5c      	itt	pl
   d69b4:	2201      	movpl	r2, #1
   d69b6:	601a      	strpl	r2, [r3, #0]
   d69b8:	4b1e      	ldr	r3, [pc, #120]	; (d6a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d69ba:	681a      	ldr	r2, [r3, #0]
   d69bc:	07d0      	lsls	r0, r2, #31
   d69be:	bf5c      	itt	pl
   d69c0:	2201      	movpl	r2, #1
   d69c2:	601a      	strpl	r2, [r3, #0]
   d69c4:	4b1c      	ldr	r3, [pc, #112]	; (d6a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d69c6:	681a      	ldr	r2, [r3, #0]
   d69c8:	07d1      	lsls	r1, r2, #31
   d69ca:	bf5c      	itt	pl
   d69cc:	2201      	movpl	r2, #1
   d69ce:	601a      	strpl	r2, [r3, #0]
   d69d0:	4b1a      	ldr	r3, [pc, #104]	; (d6a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d69d2:	681a      	ldr	r2, [r3, #0]
   d69d4:	07d2      	lsls	r2, r2, #31
   d69d6:	bf5c      	itt	pl
   d69d8:	2201      	movpl	r2, #1
   d69da:	601a      	strpl	r2, [r3, #0]
   d69dc:	4b18      	ldr	r3, [pc, #96]	; (d6a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d69de:	681a      	ldr	r2, [r3, #0]
   d69e0:	07d0      	lsls	r0, r2, #31
   d69e2:	bf5c      	itt	pl
   d69e4:	2201      	movpl	r2, #1
   d69e6:	601a      	strpl	r2, [r3, #0]
   d69e8:	4b16      	ldr	r3, [pc, #88]	; (d6a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d69ea:	681a      	ldr	r2, [r3, #0]
   d69ec:	07d1      	lsls	r1, r2, #31
   d69ee:	bf5c      	itt	pl
   d69f0:	2201      	movpl	r2, #1
   d69f2:	601a      	strpl	r2, [r3, #0]
   d69f4:	4b14      	ldr	r3, [pc, #80]	; (d6a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d69f6:	681a      	ldr	r2, [r3, #0]
   d69f8:	07d2      	lsls	r2, r2, #31
   d69fa:	bf5c      	itt	pl
   d69fc:	2201      	movpl	r2, #1
   d69fe:	601a      	strpl	r2, [r3, #0]
   d6a00:	4b12      	ldr	r3, [pc, #72]	; (d6a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6a02:	681a      	ldr	r2, [r3, #0]
   d6a04:	07d0      	lsls	r0, r2, #31
   d6a06:	bf5c      	itt	pl
   d6a08:	2201      	movpl	r2, #1
   d6a0a:	601a      	strpl	r2, [r3, #0]
   d6a0c:	4b10      	ldr	r3, [pc, #64]	; (d6a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6a0e:	681a      	ldr	r2, [r3, #0]
   d6a10:	07d1      	lsls	r1, r2, #31
   d6a12:	bf5c      	itt	pl
   d6a14:	2201      	movpl	r2, #1
   d6a16:	601a      	strpl	r2, [r3, #0]
   d6a18:	4b0e      	ldr	r3, [pc, #56]	; (d6a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6a1a:	681a      	ldr	r2, [r3, #0]
   d6a1c:	07d2      	lsls	r2, r2, #31
   d6a1e:	bf5c      	itt	pl
   d6a20:	2201      	movpl	r2, #1
   d6a22:	601a      	strpl	r2, [r3, #0]
   d6a24:	4770      	bx	lr
   d6a26:	bf00      	nop
   d6a28:	2003e754 	.word	0x2003e754
   d6a2c:	2003e750 	.word	0x2003e750
   d6a30:	2003e74c 	.word	0x2003e74c
   d6a34:	2003e748 	.word	0x2003e748
   d6a38:	2003e744 	.word	0x2003e744
   d6a3c:	2003e740 	.word	0x2003e740
   d6a40:	2003e73c 	.word	0x2003e73c
   d6a44:	2003e738 	.word	0x2003e738
   d6a48:	2003e734 	.word	0x2003e734
   d6a4c:	2003e730 	.word	0x2003e730
   d6a50:	2003e72c 	.word	0x2003e72c
   d6a54:	2003e728 	.word	0x2003e728

000d6a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a58:	4b18      	ldr	r3, [pc, #96]	; (d6abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a5a:	681a      	ldr	r2, [r3, #0]
   d6a5c:	07d1      	lsls	r1, r2, #31
   d6a5e:	bf5c      	itt	pl
   d6a60:	2201      	movpl	r2, #1
   d6a62:	601a      	strpl	r2, [r3, #0]
   d6a64:	4b16      	ldr	r3, [pc, #88]	; (d6ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a66:	681a      	ldr	r2, [r3, #0]
   d6a68:	07d2      	lsls	r2, r2, #31
   d6a6a:	bf5c      	itt	pl
   d6a6c:	2201      	movpl	r2, #1
   d6a6e:	601a      	strpl	r2, [r3, #0]
   d6a70:	4b14      	ldr	r3, [pc, #80]	; (d6ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	07d0      	lsls	r0, r2, #31
   d6a76:	bf5c      	itt	pl
   d6a78:	2201      	movpl	r2, #1
   d6a7a:	601a      	strpl	r2, [r3, #0]
   d6a7c:	4b12      	ldr	r3, [pc, #72]	; (d6ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a7e:	681a      	ldr	r2, [r3, #0]
   d6a80:	07d1      	lsls	r1, r2, #31
   d6a82:	bf5c      	itt	pl
   d6a84:	2201      	movpl	r2, #1
   d6a86:	601a      	strpl	r2, [r3, #0]
   d6a88:	4b10      	ldr	r3, [pc, #64]	; (d6acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d2      	lsls	r2, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b0e      	ldr	r3, [pc, #56]	; (d6ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d0      	lsls	r0, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b0c      	ldr	r3, [pc, #48]	; (d6ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d1      	lsls	r1, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b0a      	ldr	r3, [pc, #40]	; (d6ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d2      	lsls	r2, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4770      	bx	lr
   d6aba:	bf00      	nop
   d6abc:	2003e774 	.word	0x2003e774
   d6ac0:	2003e770 	.word	0x2003e770
   d6ac4:	2003e76c 	.word	0x2003e76c
   d6ac8:	2003e768 	.word	0x2003e768
   d6acc:	2003e764 	.word	0x2003e764
   d6ad0:	2003e760 	.word	0x2003e760
   d6ad4:	2003e75c 	.word	0x2003e75c
   d6ad8:	2003e758 	.word	0x2003e758

000d6adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6adc:	4b18      	ldr	r3, [pc, #96]	; (d6b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d1      	lsls	r1, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4b16      	ldr	r3, [pc, #88]	; (d6b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6aea:	681a      	ldr	r2, [r3, #0]
   d6aec:	07d2      	lsls	r2, r2, #31
   d6aee:	bf5c      	itt	pl
   d6af0:	2201      	movpl	r2, #1
   d6af2:	601a      	strpl	r2, [r3, #0]
   d6af4:	4b14      	ldr	r3, [pc, #80]	; (d6b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d0      	lsls	r0, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4b12      	ldr	r3, [pc, #72]	; (d6b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b02:	681a      	ldr	r2, [r3, #0]
   d6b04:	07d1      	lsls	r1, r2, #31
   d6b06:	bf5c      	itt	pl
   d6b08:	2201      	movpl	r2, #1
   d6b0a:	601a      	strpl	r2, [r3, #0]
   d6b0c:	4b10      	ldr	r3, [pc, #64]	; (d6b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d2      	lsls	r2, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b0e      	ldr	r3, [pc, #56]	; (d6b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d0      	lsls	r0, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b0c      	ldr	r3, [pc, #48]	; (d6b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d1      	lsls	r1, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b0a      	ldr	r3, [pc, #40]	; (d6b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d2      	lsls	r2, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4770      	bx	lr
   d6b3e:	bf00      	nop
   d6b40:	2003e794 	.word	0x2003e794
   d6b44:	2003e790 	.word	0x2003e790
   d6b48:	2003e78c 	.word	0x2003e78c
   d6b4c:	2003e788 	.word	0x2003e788
   d6b50:	2003e784 	.word	0x2003e784
   d6b54:	2003e780 	.word	0x2003e780
   d6b58:	2003e77c 	.word	0x2003e77c
   d6b5c:	2003e778 	.word	0x2003e778

000d6b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6b60:	4b24      	ldr	r3, [pc, #144]	; (d6bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6b62:	681a      	ldr	r2, [r3, #0]
   d6b64:	07d0      	lsls	r0, r2, #31
   d6b66:	bf5c      	itt	pl
   d6b68:	2201      	movpl	r2, #1
   d6b6a:	601a      	strpl	r2, [r3, #0]
   d6b6c:	4b22      	ldr	r3, [pc, #136]	; (d6bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6b6e:	681a      	ldr	r2, [r3, #0]
   d6b70:	07d1      	lsls	r1, r2, #31
   d6b72:	bf5c      	itt	pl
   d6b74:	2201      	movpl	r2, #1
   d6b76:	601a      	strpl	r2, [r3, #0]
   d6b78:	4b20      	ldr	r3, [pc, #128]	; (d6bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6b7a:	681a      	ldr	r2, [r3, #0]
   d6b7c:	07d2      	lsls	r2, r2, #31
   d6b7e:	bf5c      	itt	pl
   d6b80:	2201      	movpl	r2, #1
   d6b82:	601a      	strpl	r2, [r3, #0]
   d6b84:	4b1e      	ldr	r3, [pc, #120]	; (d6c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6b86:	681a      	ldr	r2, [r3, #0]
   d6b88:	07d0      	lsls	r0, r2, #31
   d6b8a:	bf5c      	itt	pl
   d6b8c:	2201      	movpl	r2, #1
   d6b8e:	601a      	strpl	r2, [r3, #0]
   d6b90:	4b1c      	ldr	r3, [pc, #112]	; (d6c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6b92:	681a      	ldr	r2, [r3, #0]
   d6b94:	07d1      	lsls	r1, r2, #31
   d6b96:	bf5c      	itt	pl
   d6b98:	2201      	movpl	r2, #1
   d6b9a:	601a      	strpl	r2, [r3, #0]
   d6b9c:	4b1a      	ldr	r3, [pc, #104]	; (d6c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6b9e:	681a      	ldr	r2, [r3, #0]
   d6ba0:	07d2      	lsls	r2, r2, #31
   d6ba2:	bf5c      	itt	pl
   d6ba4:	2201      	movpl	r2, #1
   d6ba6:	601a      	strpl	r2, [r3, #0]
   d6ba8:	4b18      	ldr	r3, [pc, #96]	; (d6c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6baa:	681a      	ldr	r2, [r3, #0]
   d6bac:	07d0      	lsls	r0, r2, #31
   d6bae:	bf5c      	itt	pl
   d6bb0:	2201      	movpl	r2, #1
   d6bb2:	601a      	strpl	r2, [r3, #0]
   d6bb4:	4b16      	ldr	r3, [pc, #88]	; (d6c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6bb6:	681a      	ldr	r2, [r3, #0]
   d6bb8:	07d1      	lsls	r1, r2, #31
   d6bba:	bf5c      	itt	pl
   d6bbc:	2201      	movpl	r2, #1
   d6bbe:	601a      	strpl	r2, [r3, #0]
   d6bc0:	4b14      	ldr	r3, [pc, #80]	; (d6c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6bc2:	681a      	ldr	r2, [r3, #0]
   d6bc4:	07d2      	lsls	r2, r2, #31
   d6bc6:	bf5c      	itt	pl
   d6bc8:	2201      	movpl	r2, #1
   d6bca:	601a      	strpl	r2, [r3, #0]
   d6bcc:	4b12      	ldr	r3, [pc, #72]	; (d6c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6bce:	681a      	ldr	r2, [r3, #0]
   d6bd0:	07d0      	lsls	r0, r2, #31
   d6bd2:	bf5c      	itt	pl
   d6bd4:	2201      	movpl	r2, #1
   d6bd6:	601a      	strpl	r2, [r3, #0]
   d6bd8:	4b10      	ldr	r3, [pc, #64]	; (d6c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6bda:	681a      	ldr	r2, [r3, #0]
   d6bdc:	07d1      	lsls	r1, r2, #31
   d6bde:	bf5c      	itt	pl
   d6be0:	2201      	movpl	r2, #1
   d6be2:	601a      	strpl	r2, [r3, #0]
   d6be4:	4b0e      	ldr	r3, [pc, #56]	; (d6c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6be6:	681a      	ldr	r2, [r3, #0]
   d6be8:	07d2      	lsls	r2, r2, #31
   d6bea:	bf5c      	itt	pl
   d6bec:	2201      	movpl	r2, #1
   d6bee:	601a      	strpl	r2, [r3, #0]
   d6bf0:	4770      	bx	lr
   d6bf2:	bf00      	nop
   d6bf4:	2003e7c4 	.word	0x2003e7c4
   d6bf8:	2003e7c0 	.word	0x2003e7c0
   d6bfc:	2003e7bc 	.word	0x2003e7bc
   d6c00:	2003e7b8 	.word	0x2003e7b8
   d6c04:	2003e7b4 	.word	0x2003e7b4
   d6c08:	2003e7b0 	.word	0x2003e7b0
   d6c0c:	2003e7ac 	.word	0x2003e7ac
   d6c10:	2003e7a8 	.word	0x2003e7a8
   d6c14:	2003e7a4 	.word	0x2003e7a4
   d6c18:	2003e7a0 	.word	0x2003e7a0
   d6c1c:	2003e79c 	.word	0x2003e79c
   d6c20:	2003e798 	.word	0x2003e798

000d6c24 <__aeabi_drsub>:
   d6c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6c28:	e002      	b.n	d6c30 <__adddf3>
   d6c2a:	bf00      	nop

000d6c2c <__aeabi_dsub>:
   d6c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6c30 <__adddf3>:
   d6c30:	b530      	push	{r4, r5, lr}
   d6c32:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6c36:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6c3a:	ea94 0f05 	teq	r4, r5
   d6c3e:	bf08      	it	eq
   d6c40:	ea90 0f02 	teqeq	r0, r2
   d6c44:	bf1f      	itttt	ne
   d6c46:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6c4a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6c4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6c52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c56:	f000 80e2 	beq.w	d6e1e <__adddf3+0x1ee>
   d6c5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6c5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c62:	bfb8      	it	lt
   d6c64:	426d      	neglt	r5, r5
   d6c66:	dd0c      	ble.n	d6c82 <__adddf3+0x52>
   d6c68:	442c      	add	r4, r5
   d6c6a:	ea80 0202 	eor.w	r2, r0, r2
   d6c6e:	ea81 0303 	eor.w	r3, r1, r3
   d6c72:	ea82 0000 	eor.w	r0, r2, r0
   d6c76:	ea83 0101 	eor.w	r1, r3, r1
   d6c7a:	ea80 0202 	eor.w	r2, r0, r2
   d6c7e:	ea81 0303 	eor.w	r3, r1, r3
   d6c82:	2d36      	cmp	r5, #54	; 0x36
   d6c84:	bf88      	it	hi
   d6c86:	bd30      	pophi	{r4, r5, pc}
   d6c88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c98:	d002      	beq.n	d6ca0 <__adddf3+0x70>
   d6c9a:	4240      	negs	r0, r0
   d6c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6ca0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6ca4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ca8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6cac:	d002      	beq.n	d6cb4 <__adddf3+0x84>
   d6cae:	4252      	negs	r2, r2
   d6cb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6cb4:	ea94 0f05 	teq	r4, r5
   d6cb8:	f000 80a7 	beq.w	d6e0a <__adddf3+0x1da>
   d6cbc:	f1a4 0401 	sub.w	r4, r4, #1
   d6cc0:	f1d5 0e20 	rsbs	lr, r5, #32
   d6cc4:	db0d      	blt.n	d6ce2 <__adddf3+0xb2>
   d6cc6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6cca:	fa22 f205 	lsr.w	r2, r2, r5
   d6cce:	1880      	adds	r0, r0, r2
   d6cd0:	f141 0100 	adc.w	r1, r1, #0
   d6cd4:	fa03 f20e 	lsl.w	r2, r3, lr
   d6cd8:	1880      	adds	r0, r0, r2
   d6cda:	fa43 f305 	asr.w	r3, r3, r5
   d6cde:	4159      	adcs	r1, r3
   d6ce0:	e00e      	b.n	d6d00 <__adddf3+0xd0>
   d6ce2:	f1a5 0520 	sub.w	r5, r5, #32
   d6ce6:	f10e 0e20 	add.w	lr, lr, #32
   d6cea:	2a01      	cmp	r2, #1
   d6cec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6cf0:	bf28      	it	cs
   d6cf2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6cf6:	fa43 f305 	asr.w	r3, r3, r5
   d6cfa:	18c0      	adds	r0, r0, r3
   d6cfc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6d00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d04:	d507      	bpl.n	d6d16 <__adddf3+0xe6>
   d6d06:	f04f 0e00 	mov.w	lr, #0
   d6d0a:	f1dc 0c00 	rsbs	ip, ip, #0
   d6d0e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6d12:	eb6e 0101 	sbc.w	r1, lr, r1
   d6d16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6d1a:	d31b      	bcc.n	d6d54 <__adddf3+0x124>
   d6d1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6d20:	d30c      	bcc.n	d6d3c <__adddf3+0x10c>
   d6d22:	0849      	lsrs	r1, r1, #1
   d6d24:	ea5f 0030 	movs.w	r0, r0, rrx
   d6d28:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6d2c:	f104 0401 	add.w	r4, r4, #1
   d6d30:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6d34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6d38:	f080 809a 	bcs.w	d6e70 <__adddf3+0x240>
   d6d3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6d40:	bf08      	it	eq
   d6d42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d46:	f150 0000 	adcs.w	r0, r0, #0
   d6d4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d4e:	ea41 0105 	orr.w	r1, r1, r5
   d6d52:	bd30      	pop	{r4, r5, pc}
   d6d54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6d58:	4140      	adcs	r0, r0
   d6d5a:	eb41 0101 	adc.w	r1, r1, r1
   d6d5e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d62:	f1a4 0401 	sub.w	r4, r4, #1
   d6d66:	d1e9      	bne.n	d6d3c <__adddf3+0x10c>
   d6d68:	f091 0f00 	teq	r1, #0
   d6d6c:	bf04      	itt	eq
   d6d6e:	4601      	moveq	r1, r0
   d6d70:	2000      	moveq	r0, #0
   d6d72:	fab1 f381 	clz	r3, r1
   d6d76:	bf08      	it	eq
   d6d78:	3320      	addeq	r3, #32
   d6d7a:	f1a3 030b 	sub.w	r3, r3, #11
   d6d7e:	f1b3 0220 	subs.w	r2, r3, #32
   d6d82:	da0c      	bge.n	d6d9e <__adddf3+0x16e>
   d6d84:	320c      	adds	r2, #12
   d6d86:	dd08      	ble.n	d6d9a <__adddf3+0x16a>
   d6d88:	f102 0c14 	add.w	ip, r2, #20
   d6d8c:	f1c2 020c 	rsb	r2, r2, #12
   d6d90:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d94:	fa21 f102 	lsr.w	r1, r1, r2
   d6d98:	e00c      	b.n	d6db4 <__adddf3+0x184>
   d6d9a:	f102 0214 	add.w	r2, r2, #20
   d6d9e:	bfd8      	it	le
   d6da0:	f1c2 0c20 	rsble	ip, r2, #32
   d6da4:	fa01 f102 	lsl.w	r1, r1, r2
   d6da8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6dac:	bfdc      	itt	le
   d6dae:	ea41 010c 	orrle.w	r1, r1, ip
   d6db2:	4090      	lslle	r0, r2
   d6db4:	1ae4      	subs	r4, r4, r3
   d6db6:	bfa2      	ittt	ge
   d6db8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6dbc:	4329      	orrge	r1, r5
   d6dbe:	bd30      	popge	{r4, r5, pc}
   d6dc0:	ea6f 0404 	mvn.w	r4, r4
   d6dc4:	3c1f      	subs	r4, #31
   d6dc6:	da1c      	bge.n	d6e02 <__adddf3+0x1d2>
   d6dc8:	340c      	adds	r4, #12
   d6dca:	dc0e      	bgt.n	d6dea <__adddf3+0x1ba>
   d6dcc:	f104 0414 	add.w	r4, r4, #20
   d6dd0:	f1c4 0220 	rsb	r2, r4, #32
   d6dd4:	fa20 f004 	lsr.w	r0, r0, r4
   d6dd8:	fa01 f302 	lsl.w	r3, r1, r2
   d6ddc:	ea40 0003 	orr.w	r0, r0, r3
   d6de0:	fa21 f304 	lsr.w	r3, r1, r4
   d6de4:	ea45 0103 	orr.w	r1, r5, r3
   d6de8:	bd30      	pop	{r4, r5, pc}
   d6dea:	f1c4 040c 	rsb	r4, r4, #12
   d6dee:	f1c4 0220 	rsb	r2, r4, #32
   d6df2:	fa20 f002 	lsr.w	r0, r0, r2
   d6df6:	fa01 f304 	lsl.w	r3, r1, r4
   d6dfa:	ea40 0003 	orr.w	r0, r0, r3
   d6dfe:	4629      	mov	r1, r5
   d6e00:	bd30      	pop	{r4, r5, pc}
   d6e02:	fa21 f004 	lsr.w	r0, r1, r4
   d6e06:	4629      	mov	r1, r5
   d6e08:	bd30      	pop	{r4, r5, pc}
   d6e0a:	f094 0f00 	teq	r4, #0
   d6e0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6e12:	bf06      	itte	eq
   d6e14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6e18:	3401      	addeq	r4, #1
   d6e1a:	3d01      	subne	r5, #1
   d6e1c:	e74e      	b.n	d6cbc <__adddf3+0x8c>
   d6e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e22:	bf18      	it	ne
   d6e24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e28:	d029      	beq.n	d6e7e <__adddf3+0x24e>
   d6e2a:	ea94 0f05 	teq	r4, r5
   d6e2e:	bf08      	it	eq
   d6e30:	ea90 0f02 	teqeq	r0, r2
   d6e34:	d005      	beq.n	d6e42 <__adddf3+0x212>
   d6e36:	ea54 0c00 	orrs.w	ip, r4, r0
   d6e3a:	bf04      	itt	eq
   d6e3c:	4619      	moveq	r1, r3
   d6e3e:	4610      	moveq	r0, r2
   d6e40:	bd30      	pop	{r4, r5, pc}
   d6e42:	ea91 0f03 	teq	r1, r3
   d6e46:	bf1e      	ittt	ne
   d6e48:	2100      	movne	r1, #0
   d6e4a:	2000      	movne	r0, #0
   d6e4c:	bd30      	popne	{r4, r5, pc}
   d6e4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6e52:	d105      	bne.n	d6e60 <__adddf3+0x230>
   d6e54:	0040      	lsls	r0, r0, #1
   d6e56:	4149      	adcs	r1, r1
   d6e58:	bf28      	it	cs
   d6e5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6e5e:	bd30      	pop	{r4, r5, pc}
   d6e60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e64:	bf3c      	itt	cc
   d6e66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e6a:	bd30      	popcc	{r4, r5, pc}
   d6e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e78:	f04f 0000 	mov.w	r0, #0
   d6e7c:	bd30      	pop	{r4, r5, pc}
   d6e7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e82:	bf1a      	itte	ne
   d6e84:	4619      	movne	r1, r3
   d6e86:	4610      	movne	r0, r2
   d6e88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e8c:	bf1c      	itt	ne
   d6e8e:	460b      	movne	r3, r1
   d6e90:	4602      	movne	r2, r0
   d6e92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e96:	bf06      	itte	eq
   d6e98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e9c:	ea91 0f03 	teqeq	r1, r3
   d6ea0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6ea4:	bd30      	pop	{r4, r5, pc}
   d6ea6:	bf00      	nop

000d6ea8 <__aeabi_ui2d>:
   d6ea8:	f090 0f00 	teq	r0, #0
   d6eac:	bf04      	itt	eq
   d6eae:	2100      	moveq	r1, #0
   d6eb0:	4770      	bxeq	lr
   d6eb2:	b530      	push	{r4, r5, lr}
   d6eb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6eb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ebc:	f04f 0500 	mov.w	r5, #0
   d6ec0:	f04f 0100 	mov.w	r1, #0
   d6ec4:	e750      	b.n	d6d68 <__adddf3+0x138>
   d6ec6:	bf00      	nop

000d6ec8 <__aeabi_i2d>:
   d6ec8:	f090 0f00 	teq	r0, #0
   d6ecc:	bf04      	itt	eq
   d6ece:	2100      	moveq	r1, #0
   d6ed0:	4770      	bxeq	lr
   d6ed2:	b530      	push	{r4, r5, lr}
   d6ed4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ed8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6edc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6ee0:	bf48      	it	mi
   d6ee2:	4240      	negmi	r0, r0
   d6ee4:	f04f 0100 	mov.w	r1, #0
   d6ee8:	e73e      	b.n	d6d68 <__adddf3+0x138>
   d6eea:	bf00      	nop

000d6eec <__aeabi_f2d>:
   d6eec:	0042      	lsls	r2, r0, #1
   d6eee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6ef2:	ea4f 0131 	mov.w	r1, r1, rrx
   d6ef6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6efa:	bf1f      	itttt	ne
   d6efc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6f00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6f04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6f08:	4770      	bxne	lr
   d6f0a:	f092 0f00 	teq	r2, #0
   d6f0e:	bf14      	ite	ne
   d6f10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6f14:	4770      	bxeq	lr
   d6f16:	b530      	push	{r4, r5, lr}
   d6f18:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6f1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6f24:	e720      	b.n	d6d68 <__adddf3+0x138>
   d6f26:	bf00      	nop

000d6f28 <__aeabi_ul2d>:
   d6f28:	ea50 0201 	orrs.w	r2, r0, r1
   d6f2c:	bf08      	it	eq
   d6f2e:	4770      	bxeq	lr
   d6f30:	b530      	push	{r4, r5, lr}
   d6f32:	f04f 0500 	mov.w	r5, #0
   d6f36:	e00a      	b.n	d6f4e <__aeabi_l2d+0x16>

000d6f38 <__aeabi_l2d>:
   d6f38:	ea50 0201 	orrs.w	r2, r0, r1
   d6f3c:	bf08      	it	eq
   d6f3e:	4770      	bxeq	lr
   d6f40:	b530      	push	{r4, r5, lr}
   d6f42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6f46:	d502      	bpl.n	d6f4e <__aeabi_l2d+0x16>
   d6f48:	4240      	negs	r0, r0
   d6f4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f52:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6f5a:	f43f aedc 	beq.w	d6d16 <__adddf3+0xe6>
   d6f5e:	f04f 0203 	mov.w	r2, #3
   d6f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f66:	bf18      	it	ne
   d6f68:	3203      	addne	r2, #3
   d6f6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f6e:	bf18      	it	ne
   d6f70:	3203      	addne	r2, #3
   d6f72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f76:	f1c2 0320 	rsb	r3, r2, #32
   d6f7a:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f7e:	fa20 f002 	lsr.w	r0, r0, r2
   d6f82:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f86:	ea40 000e 	orr.w	r0, r0, lr
   d6f8a:	fa21 f102 	lsr.w	r1, r1, r2
   d6f8e:	4414      	add	r4, r2
   d6f90:	e6c1      	b.n	d6d16 <__adddf3+0xe6>
   d6f92:	bf00      	nop

000d6f94 <__aeabi_dmul>:
   d6f94:	b570      	push	{r4, r5, r6, lr}
   d6f96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6fa2:	bf1d      	ittte	ne
   d6fa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6fa8:	ea94 0f0c 	teqne	r4, ip
   d6fac:	ea95 0f0c 	teqne	r5, ip
   d6fb0:	f000 f8de 	bleq	d7170 <__aeabi_dmul+0x1dc>
   d6fb4:	442c      	add	r4, r5
   d6fb6:	ea81 0603 	eor.w	r6, r1, r3
   d6fba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6fbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6fc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6fc6:	bf18      	it	ne
   d6fc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6fcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6fd4:	d038      	beq.n	d7048 <__aeabi_dmul+0xb4>
   d6fd6:	fba0 ce02 	umull	ip, lr, r0, r2
   d6fda:	f04f 0500 	mov.w	r5, #0
   d6fde:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6fe2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6fe6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6fea:	f04f 0600 	mov.w	r6, #0
   d6fee:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6ff2:	f09c 0f00 	teq	ip, #0
   d6ff6:	bf18      	it	ne
   d6ff8:	f04e 0e01 	orrne.w	lr, lr, #1
   d6ffc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7000:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7004:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7008:	d204      	bcs.n	d7014 <__aeabi_dmul+0x80>
   d700a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d700e:	416d      	adcs	r5, r5
   d7010:	eb46 0606 	adc.w	r6, r6, r6
   d7014:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7018:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d701c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7020:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7024:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7028:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d702c:	bf88      	it	hi
   d702e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7032:	d81e      	bhi.n	d7072 <__aeabi_dmul+0xde>
   d7034:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7038:	bf08      	it	eq
   d703a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d703e:	f150 0000 	adcs.w	r0, r0, #0
   d7042:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7046:	bd70      	pop	{r4, r5, r6, pc}
   d7048:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d704c:	ea46 0101 	orr.w	r1, r6, r1
   d7050:	ea40 0002 	orr.w	r0, r0, r2
   d7054:	ea81 0103 	eor.w	r1, r1, r3
   d7058:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d705c:	bfc2      	ittt	gt
   d705e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7062:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7066:	bd70      	popgt	{r4, r5, r6, pc}
   d7068:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d706c:	f04f 0e00 	mov.w	lr, #0
   d7070:	3c01      	subs	r4, #1
   d7072:	f300 80ab 	bgt.w	d71cc <__aeabi_dmul+0x238>
   d7076:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d707a:	bfde      	ittt	le
   d707c:	2000      	movle	r0, #0
   d707e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7082:	bd70      	pople	{r4, r5, r6, pc}
   d7084:	f1c4 0400 	rsb	r4, r4, #0
   d7088:	3c20      	subs	r4, #32
   d708a:	da35      	bge.n	d70f8 <__aeabi_dmul+0x164>
   d708c:	340c      	adds	r4, #12
   d708e:	dc1b      	bgt.n	d70c8 <__aeabi_dmul+0x134>
   d7090:	f104 0414 	add.w	r4, r4, #20
   d7094:	f1c4 0520 	rsb	r5, r4, #32
   d7098:	fa00 f305 	lsl.w	r3, r0, r5
   d709c:	fa20 f004 	lsr.w	r0, r0, r4
   d70a0:	fa01 f205 	lsl.w	r2, r1, r5
   d70a4:	ea40 0002 	orr.w	r0, r0, r2
   d70a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d70ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d70b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d70b4:	fa21 f604 	lsr.w	r6, r1, r4
   d70b8:	eb42 0106 	adc.w	r1, r2, r6
   d70bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70c0:	bf08      	it	eq
   d70c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70c6:	bd70      	pop	{r4, r5, r6, pc}
   d70c8:	f1c4 040c 	rsb	r4, r4, #12
   d70cc:	f1c4 0520 	rsb	r5, r4, #32
   d70d0:	fa00 f304 	lsl.w	r3, r0, r4
   d70d4:	fa20 f005 	lsr.w	r0, r0, r5
   d70d8:	fa01 f204 	lsl.w	r2, r1, r4
   d70dc:	ea40 0002 	orr.w	r0, r0, r2
   d70e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d70e8:	f141 0100 	adc.w	r1, r1, #0
   d70ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70f0:	bf08      	it	eq
   d70f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70f6:	bd70      	pop	{r4, r5, r6, pc}
   d70f8:	f1c4 0520 	rsb	r5, r4, #32
   d70fc:	fa00 f205 	lsl.w	r2, r0, r5
   d7100:	ea4e 0e02 	orr.w	lr, lr, r2
   d7104:	fa20 f304 	lsr.w	r3, r0, r4
   d7108:	fa01 f205 	lsl.w	r2, r1, r5
   d710c:	ea43 0302 	orr.w	r3, r3, r2
   d7110:	fa21 f004 	lsr.w	r0, r1, r4
   d7114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7118:	fa21 f204 	lsr.w	r2, r1, r4
   d711c:	ea20 0002 	bic.w	r0, r0, r2
   d7120:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7124:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7128:	bf08      	it	eq
   d712a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d712e:	bd70      	pop	{r4, r5, r6, pc}
   d7130:	f094 0f00 	teq	r4, #0
   d7134:	d10f      	bne.n	d7156 <__aeabi_dmul+0x1c2>
   d7136:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d713a:	0040      	lsls	r0, r0, #1
   d713c:	eb41 0101 	adc.w	r1, r1, r1
   d7140:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7144:	bf08      	it	eq
   d7146:	3c01      	subeq	r4, #1
   d7148:	d0f7      	beq.n	d713a <__aeabi_dmul+0x1a6>
   d714a:	ea41 0106 	orr.w	r1, r1, r6
   d714e:	f095 0f00 	teq	r5, #0
   d7152:	bf18      	it	ne
   d7154:	4770      	bxne	lr
   d7156:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d715a:	0052      	lsls	r2, r2, #1
   d715c:	eb43 0303 	adc.w	r3, r3, r3
   d7160:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7164:	bf08      	it	eq
   d7166:	3d01      	subeq	r5, #1
   d7168:	d0f7      	beq.n	d715a <__aeabi_dmul+0x1c6>
   d716a:	ea43 0306 	orr.w	r3, r3, r6
   d716e:	4770      	bx	lr
   d7170:	ea94 0f0c 	teq	r4, ip
   d7174:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7178:	bf18      	it	ne
   d717a:	ea95 0f0c 	teqne	r5, ip
   d717e:	d00c      	beq.n	d719a <__aeabi_dmul+0x206>
   d7180:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7184:	bf18      	it	ne
   d7186:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d718a:	d1d1      	bne.n	d7130 <__aeabi_dmul+0x19c>
   d718c:	ea81 0103 	eor.w	r1, r1, r3
   d7190:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7194:	f04f 0000 	mov.w	r0, #0
   d7198:	bd70      	pop	{r4, r5, r6, pc}
   d719a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d719e:	bf06      	itte	eq
   d71a0:	4610      	moveq	r0, r2
   d71a2:	4619      	moveq	r1, r3
   d71a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d71a8:	d019      	beq.n	d71de <__aeabi_dmul+0x24a>
   d71aa:	ea94 0f0c 	teq	r4, ip
   d71ae:	d102      	bne.n	d71b6 <__aeabi_dmul+0x222>
   d71b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d71b4:	d113      	bne.n	d71de <__aeabi_dmul+0x24a>
   d71b6:	ea95 0f0c 	teq	r5, ip
   d71ba:	d105      	bne.n	d71c8 <__aeabi_dmul+0x234>
   d71bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d71c0:	bf1c      	itt	ne
   d71c2:	4610      	movne	r0, r2
   d71c4:	4619      	movne	r1, r3
   d71c6:	d10a      	bne.n	d71de <__aeabi_dmul+0x24a>
   d71c8:	ea81 0103 	eor.w	r1, r1, r3
   d71cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d71d8:	f04f 0000 	mov.w	r0, #0
   d71dc:	bd70      	pop	{r4, r5, r6, pc}
   d71de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d71e6:	bd70      	pop	{r4, r5, r6, pc}

000d71e8 <__aeabi_ddiv>:
   d71e8:	b570      	push	{r4, r5, r6, lr}
   d71ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d71ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d71f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71f6:	bf1d      	ittte	ne
   d71f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71fc:	ea94 0f0c 	teqne	r4, ip
   d7200:	ea95 0f0c 	teqne	r5, ip
   d7204:	f000 f8a7 	bleq	d7356 <__aeabi_ddiv+0x16e>
   d7208:	eba4 0405 	sub.w	r4, r4, r5
   d720c:	ea81 0e03 	eor.w	lr, r1, r3
   d7210:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7214:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7218:	f000 8088 	beq.w	d732c <__aeabi_ddiv+0x144>
   d721c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7220:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7224:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7228:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d722c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7230:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7234:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7238:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d723c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7240:	429d      	cmp	r5, r3
   d7242:	bf08      	it	eq
   d7244:	4296      	cmpeq	r6, r2
   d7246:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d724a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d724e:	d202      	bcs.n	d7256 <__aeabi_ddiv+0x6e>
   d7250:	085b      	lsrs	r3, r3, #1
   d7252:	ea4f 0232 	mov.w	r2, r2, rrx
   d7256:	1ab6      	subs	r6, r6, r2
   d7258:	eb65 0503 	sbc.w	r5, r5, r3
   d725c:	085b      	lsrs	r3, r3, #1
   d725e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7262:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7266:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d726a:	ebb6 0e02 	subs.w	lr, r6, r2
   d726e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7272:	bf22      	ittt	cs
   d7274:	1ab6      	subcs	r6, r6, r2
   d7276:	4675      	movcs	r5, lr
   d7278:	ea40 000c 	orrcs.w	r0, r0, ip
   d727c:	085b      	lsrs	r3, r3, #1
   d727e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7282:	ebb6 0e02 	subs.w	lr, r6, r2
   d7286:	eb75 0e03 	sbcs.w	lr, r5, r3
   d728a:	bf22      	ittt	cs
   d728c:	1ab6      	subcs	r6, r6, r2
   d728e:	4675      	movcs	r5, lr
   d7290:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7294:	085b      	lsrs	r3, r3, #1
   d7296:	ea4f 0232 	mov.w	r2, r2, rrx
   d729a:	ebb6 0e02 	subs.w	lr, r6, r2
   d729e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72a2:	bf22      	ittt	cs
   d72a4:	1ab6      	subcs	r6, r6, r2
   d72a6:	4675      	movcs	r5, lr
   d72a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d72ac:	085b      	lsrs	r3, r3, #1
   d72ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d72b2:	ebb6 0e02 	subs.w	lr, r6, r2
   d72b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72ba:	bf22      	ittt	cs
   d72bc:	1ab6      	subcs	r6, r6, r2
   d72be:	4675      	movcs	r5, lr
   d72c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d72c4:	ea55 0e06 	orrs.w	lr, r5, r6
   d72c8:	d018      	beq.n	d72fc <__aeabi_ddiv+0x114>
   d72ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d72ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d72d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d72d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d72da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d72de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d72e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d72e6:	d1c0      	bne.n	d726a <__aeabi_ddiv+0x82>
   d72e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72ec:	d10b      	bne.n	d7306 <__aeabi_ddiv+0x11e>
   d72ee:	ea41 0100 	orr.w	r1, r1, r0
   d72f2:	f04f 0000 	mov.w	r0, #0
   d72f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d72fa:	e7b6      	b.n	d726a <__aeabi_ddiv+0x82>
   d72fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7300:	bf04      	itt	eq
   d7302:	4301      	orreq	r1, r0
   d7304:	2000      	moveq	r0, #0
   d7306:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d730a:	bf88      	it	hi
   d730c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7310:	f63f aeaf 	bhi.w	d7072 <__aeabi_dmul+0xde>
   d7314:	ebb5 0c03 	subs.w	ip, r5, r3
   d7318:	bf04      	itt	eq
   d731a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d731e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7322:	f150 0000 	adcs.w	r0, r0, #0
   d7326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d732a:	bd70      	pop	{r4, r5, r6, pc}
   d732c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7330:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7334:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7338:	bfc2      	ittt	gt
   d733a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d733e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7342:	bd70      	popgt	{r4, r5, r6, pc}
   d7344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7348:	f04f 0e00 	mov.w	lr, #0
   d734c:	3c01      	subs	r4, #1
   d734e:	e690      	b.n	d7072 <__aeabi_dmul+0xde>
   d7350:	ea45 0e06 	orr.w	lr, r5, r6
   d7354:	e68d      	b.n	d7072 <__aeabi_dmul+0xde>
   d7356:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d735a:	ea94 0f0c 	teq	r4, ip
   d735e:	bf08      	it	eq
   d7360:	ea95 0f0c 	teqeq	r5, ip
   d7364:	f43f af3b 	beq.w	d71de <__aeabi_dmul+0x24a>
   d7368:	ea94 0f0c 	teq	r4, ip
   d736c:	d10a      	bne.n	d7384 <__aeabi_ddiv+0x19c>
   d736e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7372:	f47f af34 	bne.w	d71de <__aeabi_dmul+0x24a>
   d7376:	ea95 0f0c 	teq	r5, ip
   d737a:	f47f af25 	bne.w	d71c8 <__aeabi_dmul+0x234>
   d737e:	4610      	mov	r0, r2
   d7380:	4619      	mov	r1, r3
   d7382:	e72c      	b.n	d71de <__aeabi_dmul+0x24a>
   d7384:	ea95 0f0c 	teq	r5, ip
   d7388:	d106      	bne.n	d7398 <__aeabi_ddiv+0x1b0>
   d738a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d738e:	f43f aefd 	beq.w	d718c <__aeabi_dmul+0x1f8>
   d7392:	4610      	mov	r0, r2
   d7394:	4619      	mov	r1, r3
   d7396:	e722      	b.n	d71de <__aeabi_dmul+0x24a>
   d7398:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d739c:	bf18      	it	ne
   d739e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d73a2:	f47f aec5 	bne.w	d7130 <__aeabi_dmul+0x19c>
   d73a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d73aa:	f47f af0d 	bne.w	d71c8 <__aeabi_dmul+0x234>
   d73ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d73b2:	f47f aeeb 	bne.w	d718c <__aeabi_dmul+0x1f8>
   d73b6:	e712      	b.n	d71de <__aeabi_dmul+0x24a>

000d73b8 <__gedf2>:
   d73b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d73bc:	e006      	b.n	d73cc <__cmpdf2+0x4>
   d73be:	bf00      	nop

000d73c0 <__ledf2>:
   d73c0:	f04f 0c01 	mov.w	ip, #1
   d73c4:	e002      	b.n	d73cc <__cmpdf2+0x4>
   d73c6:	bf00      	nop

000d73c8 <__cmpdf2>:
   d73c8:	f04f 0c01 	mov.w	ip, #1
   d73cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d73d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73dc:	bf18      	it	ne
   d73de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d73e2:	d01b      	beq.n	d741c <__cmpdf2+0x54>
   d73e4:	b001      	add	sp, #4
   d73e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d73ea:	bf0c      	ite	eq
   d73ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d73f0:	ea91 0f03 	teqne	r1, r3
   d73f4:	bf02      	ittt	eq
   d73f6:	ea90 0f02 	teqeq	r0, r2
   d73fa:	2000      	moveq	r0, #0
   d73fc:	4770      	bxeq	lr
   d73fe:	f110 0f00 	cmn.w	r0, #0
   d7402:	ea91 0f03 	teq	r1, r3
   d7406:	bf58      	it	pl
   d7408:	4299      	cmppl	r1, r3
   d740a:	bf08      	it	eq
   d740c:	4290      	cmpeq	r0, r2
   d740e:	bf2c      	ite	cs
   d7410:	17d8      	asrcs	r0, r3, #31
   d7412:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7416:	f040 0001 	orr.w	r0, r0, #1
   d741a:	4770      	bx	lr
   d741c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7424:	d102      	bne.n	d742c <__cmpdf2+0x64>
   d7426:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d742a:	d107      	bne.n	d743c <__cmpdf2+0x74>
   d742c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7430:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7434:	d1d6      	bne.n	d73e4 <__cmpdf2+0x1c>
   d7436:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d743a:	d0d3      	beq.n	d73e4 <__cmpdf2+0x1c>
   d743c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7440:	4770      	bx	lr
   d7442:	bf00      	nop

000d7444 <__aeabi_cdrcmple>:
   d7444:	4684      	mov	ip, r0
   d7446:	4610      	mov	r0, r2
   d7448:	4662      	mov	r2, ip
   d744a:	468c      	mov	ip, r1
   d744c:	4619      	mov	r1, r3
   d744e:	4663      	mov	r3, ip
   d7450:	e000      	b.n	d7454 <__aeabi_cdcmpeq>
   d7452:	bf00      	nop

000d7454 <__aeabi_cdcmpeq>:
   d7454:	b501      	push	{r0, lr}
   d7456:	f7ff ffb7 	bl	d73c8 <__cmpdf2>
   d745a:	2800      	cmp	r0, #0
   d745c:	bf48      	it	mi
   d745e:	f110 0f00 	cmnmi.w	r0, #0
   d7462:	bd01      	pop	{r0, pc}

000d7464 <__aeabi_dcmpeq>:
   d7464:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7468:	f7ff fff4 	bl	d7454 <__aeabi_cdcmpeq>
   d746c:	bf0c      	ite	eq
   d746e:	2001      	moveq	r0, #1
   d7470:	2000      	movne	r0, #0
   d7472:	f85d fb08 	ldr.w	pc, [sp], #8
   d7476:	bf00      	nop

000d7478 <__aeabi_dcmplt>:
   d7478:	f84d ed08 	str.w	lr, [sp, #-8]!
   d747c:	f7ff ffea 	bl	d7454 <__aeabi_cdcmpeq>
   d7480:	bf34      	ite	cc
   d7482:	2001      	movcc	r0, #1
   d7484:	2000      	movcs	r0, #0
   d7486:	f85d fb08 	ldr.w	pc, [sp], #8
   d748a:	bf00      	nop

000d748c <__aeabi_dcmple>:
   d748c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7490:	f7ff ffe0 	bl	d7454 <__aeabi_cdcmpeq>
   d7494:	bf94      	ite	ls
   d7496:	2001      	movls	r0, #1
   d7498:	2000      	movhi	r0, #0
   d749a:	f85d fb08 	ldr.w	pc, [sp], #8
   d749e:	bf00      	nop

000d74a0 <__aeabi_dcmpge>:
   d74a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74a4:	f7ff ffce 	bl	d7444 <__aeabi_cdrcmple>
   d74a8:	bf94      	ite	ls
   d74aa:	2001      	movls	r0, #1
   d74ac:	2000      	movhi	r0, #0
   d74ae:	f85d fb08 	ldr.w	pc, [sp], #8
   d74b2:	bf00      	nop

000d74b4 <__aeabi_dcmpgt>:
   d74b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74b8:	f7ff ffc4 	bl	d7444 <__aeabi_cdrcmple>
   d74bc:	bf34      	ite	cc
   d74be:	2001      	movcc	r0, #1
   d74c0:	2000      	movcs	r0, #0
   d74c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d74c6:	bf00      	nop

000d74c8 <__aeabi_dcmpun>:
   d74c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d74cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74d0:	d102      	bne.n	d74d8 <__aeabi_dcmpun+0x10>
   d74d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d74d6:	d10a      	bne.n	d74ee <__aeabi_dcmpun+0x26>
   d74d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d74dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74e0:	d102      	bne.n	d74e8 <__aeabi_dcmpun+0x20>
   d74e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d74e6:	d102      	bne.n	d74ee <__aeabi_dcmpun+0x26>
   d74e8:	f04f 0000 	mov.w	r0, #0
   d74ec:	4770      	bx	lr
   d74ee:	f04f 0001 	mov.w	r0, #1
   d74f2:	4770      	bx	lr

000d74f4 <__aeabi_d2iz>:
   d74f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d74f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d74fc:	d215      	bcs.n	d752a <__aeabi_d2iz+0x36>
   d74fe:	d511      	bpl.n	d7524 <__aeabi_d2iz+0x30>
   d7500:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7504:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7508:	d912      	bls.n	d7530 <__aeabi_d2iz+0x3c>
   d750a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d750e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7512:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7516:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d751a:	fa23 f002 	lsr.w	r0, r3, r2
   d751e:	bf18      	it	ne
   d7520:	4240      	negne	r0, r0
   d7522:	4770      	bx	lr
   d7524:	f04f 0000 	mov.w	r0, #0
   d7528:	4770      	bx	lr
   d752a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d752e:	d105      	bne.n	d753c <__aeabi_d2iz+0x48>
   d7530:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7534:	bf08      	it	eq
   d7536:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d753a:	4770      	bx	lr
   d753c:	f04f 0000 	mov.w	r0, #0
   d7540:	4770      	bx	lr
   d7542:	bf00      	nop

000d7544 <__aeabi_d2uiz>:
   d7544:	004a      	lsls	r2, r1, #1
   d7546:	d211      	bcs.n	d756c <__aeabi_d2uiz+0x28>
   d7548:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d754c:	d211      	bcs.n	d7572 <__aeabi_d2uiz+0x2e>
   d754e:	d50d      	bpl.n	d756c <__aeabi_d2uiz+0x28>
   d7550:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7554:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7558:	d40e      	bmi.n	d7578 <__aeabi_d2uiz+0x34>
   d755a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d755e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7562:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7566:	fa23 f002 	lsr.w	r0, r3, r2
   d756a:	4770      	bx	lr
   d756c:	f04f 0000 	mov.w	r0, #0
   d7570:	4770      	bx	lr
   d7572:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7576:	d102      	bne.n	d757e <__aeabi_d2uiz+0x3a>
   d7578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d757c:	4770      	bx	lr
   d757e:	f04f 0000 	mov.w	r0, #0
   d7582:	4770      	bx	lr

000d7584 <__aeabi_d2f>:
   d7584:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7588:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d758c:	bf24      	itt	cs
   d758e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7592:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7596:	d90d      	bls.n	d75b4 <__aeabi_d2f+0x30>
   d7598:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d759c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d75a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d75a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d75a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d75ac:	bf08      	it	eq
   d75ae:	f020 0001 	biceq.w	r0, r0, #1
   d75b2:	4770      	bx	lr
   d75b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d75b8:	d121      	bne.n	d75fe <__aeabi_d2f+0x7a>
   d75ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d75be:	bfbc      	itt	lt
   d75c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d75c4:	4770      	bxlt	lr
   d75c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d75ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d75ce:	f1c2 0218 	rsb	r2, r2, #24
   d75d2:	f1c2 0c20 	rsb	ip, r2, #32
   d75d6:	fa10 f30c 	lsls.w	r3, r0, ip
   d75da:	fa20 f002 	lsr.w	r0, r0, r2
   d75de:	bf18      	it	ne
   d75e0:	f040 0001 	orrne.w	r0, r0, #1
   d75e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d75e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d75ec:	fa03 fc0c 	lsl.w	ip, r3, ip
   d75f0:	ea40 000c 	orr.w	r0, r0, ip
   d75f4:	fa23 f302 	lsr.w	r3, r3, r2
   d75f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d75fc:	e7cc      	b.n	d7598 <__aeabi_d2f+0x14>
   d75fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7602:	d107      	bne.n	d7614 <__aeabi_d2f+0x90>
   d7604:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7608:	bf1e      	ittt	ne
   d760a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d760e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7612:	4770      	bxne	lr
   d7614:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7618:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d761c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7620:	4770      	bx	lr
   d7622:	bf00      	nop

000d7624 <atoi>:
   d7624:	220a      	movs	r2, #10
   d7626:	2100      	movs	r1, #0
   d7628:	f000 ba26 	b.w	d7a78 <strtol>

000d762c <__cxa_atexit>:
   d762c:	b510      	push	{r4, lr}
   d762e:	4c05      	ldr	r4, [pc, #20]	; (d7644 <__cxa_atexit+0x18>)
   d7630:	4613      	mov	r3, r2
   d7632:	b12c      	cbz	r4, d7640 <__cxa_atexit+0x14>
   d7634:	460a      	mov	r2, r1
   d7636:	4601      	mov	r1, r0
   d7638:	2002      	movs	r0, #2
   d763a:	f3af 8000 	nop.w
   d763e:	bd10      	pop	{r4, pc}
   d7640:	4620      	mov	r0, r4
   d7642:	bd10      	pop	{r4, pc}
   d7644:	00000000 	.word	0x00000000

000d7648 <localtime>:
   d7648:	b538      	push	{r3, r4, r5, lr}
   d764a:	4b07      	ldr	r3, [pc, #28]	; (d7668 <localtime+0x20>)
   d764c:	681c      	ldr	r4, [r3, #0]
   d764e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7650:	4605      	mov	r5, r0
   d7652:	b91b      	cbnz	r3, d765c <localtime+0x14>
   d7654:	2024      	movs	r0, #36	; 0x24
   d7656:	f7fd fe8f 	bl	d5378 <malloc>
   d765a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d765c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d765e:	4628      	mov	r0, r5
   d7660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7664:	f000 b802 	b.w	d766c <localtime_r>
   d7668:	2003e26c 	.word	0x2003e26c

000d766c <localtime_r>:
   d766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7670:	460c      	mov	r4, r1
   d7672:	4680      	mov	r8, r0
   d7674:	f000 fd06 	bl	d8084 <__gettzinfo>
   d7678:	4621      	mov	r1, r4
   d767a:	4607      	mov	r7, r0
   d767c:	4640      	mov	r0, r8
   d767e:	f000 fd05 	bl	d808c <gmtime_r>
   d7682:	6946      	ldr	r6, [r0, #20]
   d7684:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7688:	07b3      	lsls	r3, r6, #30
   d768a:	4604      	mov	r4, r0
   d768c:	d105      	bne.n	d769a <localtime_r+0x2e>
   d768e:	2264      	movs	r2, #100	; 0x64
   d7690:	fb96 f3f2 	sdiv	r3, r6, r2
   d7694:	fb02 6313 	mls	r3, r2, r3, r6
   d7698:	b94b      	cbnz	r3, d76ae <localtime_r+0x42>
   d769a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d769e:	fb96 f3f5 	sdiv	r3, r6, r5
   d76a2:	fb05 6513 	mls	r5, r5, r3, r6
   d76a6:	fab5 f385 	clz	r3, r5
   d76aa:	095b      	lsrs	r3, r3, #5
   d76ac:	e000      	b.n	d76b0 <localtime_r+0x44>
   d76ae:	2301      	movs	r3, #1
   d76b0:	4a5f      	ldr	r2, [pc, #380]	; (d7830 <localtime_r+0x1c4>)
   d76b2:	2530      	movs	r5, #48	; 0x30
   d76b4:	fb05 2503 	mla	r5, r5, r3, r2
   d76b8:	f000 fb18 	bl	d7cec <__tz_lock>
   d76bc:	f000 fb18 	bl	d7cf0 <_tzset_unlocked>
   d76c0:	4b5c      	ldr	r3, [pc, #368]	; (d7834 <localtime_r+0x1c8>)
   d76c2:	681b      	ldr	r3, [r3, #0]
   d76c4:	b1f3      	cbz	r3, d7704 <localtime_r+0x98>
   d76c6:	687b      	ldr	r3, [r7, #4]
   d76c8:	429e      	cmp	r6, r3
   d76ca:	d105      	bne.n	d76d8 <localtime_r+0x6c>
   d76cc:	6839      	ldr	r1, [r7, #0]
   d76ce:	f8d8 3000 	ldr.w	r3, [r8]
   d76d2:	69fa      	ldr	r2, [r7, #28]
   d76d4:	b941      	cbnz	r1, d76e8 <localtime_r+0x7c>
   d76d6:	e00a      	b.n	d76ee <localtime_r+0x82>
   d76d8:	4630      	mov	r0, r6
   d76da:	f000 fa5f 	bl	d7b9c <__tzcalc_limits>
   d76de:	2800      	cmp	r0, #0
   d76e0:	d1f4      	bne.n	d76cc <localtime_r+0x60>
   d76e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d76e6:	e00d      	b.n	d7704 <localtime_r+0x98>
   d76e8:	4293      	cmp	r3, r2
   d76ea:	db08      	blt.n	d76fe <localtime_r+0x92>
   d76ec:	e001      	b.n	d76f2 <localtime_r+0x86>
   d76ee:	4293      	cmp	r3, r2
   d76f0:	da07      	bge.n	d7702 <localtime_r+0x96>
   d76f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d76f4:	4293      	cmp	r3, r2
   d76f6:	bfac      	ite	ge
   d76f8:	2300      	movge	r3, #0
   d76fa:	2301      	movlt	r3, #1
   d76fc:	e002      	b.n	d7704 <localtime_r+0x98>
   d76fe:	2300      	movs	r3, #0
   d7700:	e000      	b.n	d7704 <localtime_r+0x98>
   d7702:	2301      	movs	r3, #1
   d7704:	6223      	str	r3, [r4, #32]
   d7706:	6a23      	ldr	r3, [r4, #32]
   d7708:	2b01      	cmp	r3, #1
   d770a:	bf0c      	ite	eq
   d770c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d770e:	6a39      	ldrne	r1, [r7, #32]
   d7710:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7714:	203c      	movs	r0, #60	; 0x3c
   d7716:	fb91 f6f3 	sdiv	r6, r1, r3
   d771a:	fb03 1316 	mls	r3, r3, r6, r1
   d771e:	6861      	ldr	r1, [r4, #4]
   d7720:	fb93 f2f0 	sdiv	r2, r3, r0
   d7724:	fb00 3012 	mls	r0, r0, r2, r3
   d7728:	6823      	ldr	r3, [r4, #0]
   d772a:	1a89      	subs	r1, r1, r2
   d772c:	68a2      	ldr	r2, [r4, #8]
   d772e:	6061      	str	r1, [r4, #4]
   d7730:	1a1b      	subs	r3, r3, r0
   d7732:	1b92      	subs	r2, r2, r6
   d7734:	2b3b      	cmp	r3, #59	; 0x3b
   d7736:	6023      	str	r3, [r4, #0]
   d7738:	60a2      	str	r2, [r4, #8]
   d773a:	dd03      	ble.n	d7744 <localtime_r+0xd8>
   d773c:	3101      	adds	r1, #1
   d773e:	6061      	str	r1, [r4, #4]
   d7740:	3b3c      	subs	r3, #60	; 0x3c
   d7742:	e004      	b.n	d774e <localtime_r+0xe2>
   d7744:	2b00      	cmp	r3, #0
   d7746:	da03      	bge.n	d7750 <localtime_r+0xe4>
   d7748:	3901      	subs	r1, #1
   d774a:	6061      	str	r1, [r4, #4]
   d774c:	333c      	adds	r3, #60	; 0x3c
   d774e:	6023      	str	r3, [r4, #0]
   d7750:	6863      	ldr	r3, [r4, #4]
   d7752:	2b3b      	cmp	r3, #59	; 0x3b
   d7754:	dd03      	ble.n	d775e <localtime_r+0xf2>
   d7756:	3201      	adds	r2, #1
   d7758:	60a2      	str	r2, [r4, #8]
   d775a:	3b3c      	subs	r3, #60	; 0x3c
   d775c:	e004      	b.n	d7768 <localtime_r+0xfc>
   d775e:	2b00      	cmp	r3, #0
   d7760:	da03      	bge.n	d776a <localtime_r+0xfe>
   d7762:	3a01      	subs	r2, #1
   d7764:	60a2      	str	r2, [r4, #8]
   d7766:	333c      	adds	r3, #60	; 0x3c
   d7768:	6063      	str	r3, [r4, #4]
   d776a:	68a3      	ldr	r3, [r4, #8]
   d776c:	2b17      	cmp	r3, #23
   d776e:	dd22      	ble.n	d77b6 <localtime_r+0x14a>
   d7770:	69e2      	ldr	r2, [r4, #28]
   d7772:	3201      	adds	r2, #1
   d7774:	61e2      	str	r2, [r4, #28]
   d7776:	69a2      	ldr	r2, [r4, #24]
   d7778:	3201      	adds	r2, #1
   d777a:	2a06      	cmp	r2, #6
   d777c:	bfc8      	it	gt
   d777e:	2200      	movgt	r2, #0
   d7780:	61a2      	str	r2, [r4, #24]
   d7782:	68e2      	ldr	r2, [r4, #12]
   d7784:	3b18      	subs	r3, #24
   d7786:	3201      	adds	r2, #1
   d7788:	60a3      	str	r3, [r4, #8]
   d778a:	6923      	ldr	r3, [r4, #16]
   d778c:	60e2      	str	r2, [r4, #12]
   d778e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7792:	428a      	cmp	r2, r1
   d7794:	dd46      	ble.n	d7824 <localtime_r+0x1b8>
   d7796:	3301      	adds	r3, #1
   d7798:	2b0c      	cmp	r3, #12
   d779a:	bf0c      	ite	eq
   d779c:	6963      	ldreq	r3, [r4, #20]
   d779e:	6123      	strne	r3, [r4, #16]
   d77a0:	eba2 0201 	sub.w	r2, r2, r1
   d77a4:	60e2      	str	r2, [r4, #12]
   d77a6:	bf01      	itttt	eq
   d77a8:	3301      	addeq	r3, #1
   d77aa:	2200      	moveq	r2, #0
   d77ac:	6122      	streq	r2, [r4, #16]
   d77ae:	6163      	streq	r3, [r4, #20]
   d77b0:	bf08      	it	eq
   d77b2:	61e2      	streq	r2, [r4, #28]
   d77b4:	e036      	b.n	d7824 <localtime_r+0x1b8>
   d77b6:	2b00      	cmp	r3, #0
   d77b8:	da34      	bge.n	d7824 <localtime_r+0x1b8>
   d77ba:	69e2      	ldr	r2, [r4, #28]
   d77bc:	3a01      	subs	r2, #1
   d77be:	61e2      	str	r2, [r4, #28]
   d77c0:	69a2      	ldr	r2, [r4, #24]
   d77c2:	3a01      	subs	r2, #1
   d77c4:	bf48      	it	mi
   d77c6:	2206      	movmi	r2, #6
   d77c8:	61a2      	str	r2, [r4, #24]
   d77ca:	68e2      	ldr	r2, [r4, #12]
   d77cc:	3318      	adds	r3, #24
   d77ce:	3a01      	subs	r2, #1
   d77d0:	60e2      	str	r2, [r4, #12]
   d77d2:	60a3      	str	r3, [r4, #8]
   d77d4:	bb32      	cbnz	r2, d7824 <localtime_r+0x1b8>
   d77d6:	6923      	ldr	r3, [r4, #16]
   d77d8:	3b01      	subs	r3, #1
   d77da:	d401      	bmi.n	d77e0 <localtime_r+0x174>
   d77dc:	6123      	str	r3, [r4, #16]
   d77de:	e01d      	b.n	d781c <localtime_r+0x1b0>
   d77e0:	230b      	movs	r3, #11
   d77e2:	6123      	str	r3, [r4, #16]
   d77e4:	6963      	ldr	r3, [r4, #20]
   d77e6:	1e5a      	subs	r2, r3, #1
   d77e8:	f012 0f03 	tst.w	r2, #3
   d77ec:	6162      	str	r2, [r4, #20]
   d77ee:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d77f2:	d105      	bne.n	d7800 <localtime_r+0x194>
   d77f4:	2164      	movs	r1, #100	; 0x64
   d77f6:	fb93 f2f1 	sdiv	r2, r3, r1
   d77fa:	fb01 3212 	mls	r2, r1, r2, r3
   d77fe:	b94a      	cbnz	r2, d7814 <localtime_r+0x1a8>
   d7800:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7804:	fb93 f2f1 	sdiv	r2, r3, r1
   d7808:	fb01 3312 	mls	r3, r1, r2, r3
   d780c:	fab3 f383 	clz	r3, r3
   d7810:	095b      	lsrs	r3, r3, #5
   d7812:	e000      	b.n	d7816 <localtime_r+0x1aa>
   d7814:	2301      	movs	r3, #1
   d7816:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d781a:	61e3      	str	r3, [r4, #28]
   d781c:	6923      	ldr	r3, [r4, #16]
   d781e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7822:	60e3      	str	r3, [r4, #12]
   d7824:	f000 fa63 	bl	d7cee <__tz_unlock>
   d7828:	4620      	mov	r0, r4
   d782a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d782e:	bf00      	nop
   d7830:	000d88e8 	.word	0x000d88e8
   d7834:	2003e7e4 	.word	0x2003e7e4

000d7838 <memcpy>:
   d7838:	b510      	push	{r4, lr}
   d783a:	1e43      	subs	r3, r0, #1
   d783c:	440a      	add	r2, r1
   d783e:	4291      	cmp	r1, r2
   d7840:	d004      	beq.n	d784c <memcpy+0x14>
   d7842:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7846:	f803 4f01 	strb.w	r4, [r3, #1]!
   d784a:	e7f8      	b.n	d783e <memcpy+0x6>
   d784c:	bd10      	pop	{r4, pc}

000d784e <memset>:
   d784e:	4402      	add	r2, r0
   d7850:	4603      	mov	r3, r0
   d7852:	4293      	cmp	r3, r2
   d7854:	d002      	beq.n	d785c <memset+0xe>
   d7856:	f803 1b01 	strb.w	r1, [r3], #1
   d785a:	e7fa      	b.n	d7852 <memset+0x4>
   d785c:	4770      	bx	lr
	...

000d7860 <srand>:
   d7860:	b538      	push	{r3, r4, r5, lr}
   d7862:	4b12      	ldr	r3, [pc, #72]	; (d78ac <srand+0x4c>)
   d7864:	681c      	ldr	r4, [r3, #0]
   d7866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7868:	4605      	mov	r5, r0
   d786a:	b9d3      	cbnz	r3, d78a2 <srand+0x42>
   d786c:	2018      	movs	r0, #24
   d786e:	f7fd fd83 	bl	d5378 <malloc>
   d7872:	f243 330e 	movw	r3, #13070	; 0x330e
   d7876:	63a0      	str	r0, [r4, #56]	; 0x38
   d7878:	8003      	strh	r3, [r0, #0]
   d787a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d787e:	8043      	strh	r3, [r0, #2]
   d7880:	f241 2334 	movw	r3, #4660	; 0x1234
   d7884:	8083      	strh	r3, [r0, #4]
   d7886:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d788a:	80c3      	strh	r3, [r0, #6]
   d788c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7890:	8103      	strh	r3, [r0, #8]
   d7892:	2305      	movs	r3, #5
   d7894:	8143      	strh	r3, [r0, #10]
   d7896:	230b      	movs	r3, #11
   d7898:	8183      	strh	r3, [r0, #12]
   d789a:	2201      	movs	r2, #1
   d789c:	2300      	movs	r3, #0
   d789e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d78a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d78a4:	2200      	movs	r2, #0
   d78a6:	611d      	str	r5, [r3, #16]
   d78a8:	615a      	str	r2, [r3, #20]
   d78aa:	bd38      	pop	{r3, r4, r5, pc}
   d78ac:	2003e26c 	.word	0x2003e26c

000d78b0 <strcmp>:
   d78b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d78b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d78b8:	2a01      	cmp	r2, #1
   d78ba:	bf28      	it	cs
   d78bc:	429a      	cmpcs	r2, r3
   d78be:	d0f7      	beq.n	d78b0 <strcmp>
   d78c0:	1ad0      	subs	r0, r2, r3
   d78c2:	4770      	bx	lr

000d78c4 <strcpy>:
   d78c4:	4603      	mov	r3, r0
   d78c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d78ca:	f803 2b01 	strb.w	r2, [r3], #1
   d78ce:	2a00      	cmp	r2, #0
   d78d0:	d1f9      	bne.n	d78c6 <strcpy+0x2>
   d78d2:	4770      	bx	lr

000d78d4 <strdup>:
   d78d4:	4b02      	ldr	r3, [pc, #8]	; (d78e0 <strdup+0xc>)
   d78d6:	4601      	mov	r1, r0
   d78d8:	6818      	ldr	r0, [r3, #0]
   d78da:	f000 b803 	b.w	d78e4 <_strdup_r>
   d78de:	bf00      	nop
   d78e0:	2003e26c 	.word	0x2003e26c

000d78e4 <_strdup_r>:
   d78e4:	b570      	push	{r4, r5, r6, lr}
   d78e6:	4606      	mov	r6, r0
   d78e8:	4608      	mov	r0, r1
   d78ea:	460c      	mov	r4, r1
   d78ec:	f000 f80d 	bl	d790a <strlen>
   d78f0:	1c45      	adds	r5, r0, #1
   d78f2:	4629      	mov	r1, r5
   d78f4:	4630      	mov	r0, r6
   d78f6:	f7fd fd6f 	bl	d53d8 <_malloc_r>
   d78fa:	4606      	mov	r6, r0
   d78fc:	b118      	cbz	r0, d7906 <_strdup_r+0x22>
   d78fe:	462a      	mov	r2, r5
   d7900:	4621      	mov	r1, r4
   d7902:	f7ff ff99 	bl	d7838 <memcpy>
   d7906:	4630      	mov	r0, r6
   d7908:	bd70      	pop	{r4, r5, r6, pc}

000d790a <strlen>:
   d790a:	4603      	mov	r3, r0
   d790c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7910:	2a00      	cmp	r2, #0
   d7912:	d1fb      	bne.n	d790c <strlen+0x2>
   d7914:	1a18      	subs	r0, r3, r0
   d7916:	3801      	subs	r0, #1
   d7918:	4770      	bx	lr

000d791a <strncmp>:
   d791a:	b530      	push	{r4, r5, lr}
   d791c:	b182      	cbz	r2, d7940 <strncmp+0x26>
   d791e:	1e45      	subs	r5, r0, #1
   d7920:	3901      	subs	r1, #1
   d7922:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7926:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d792a:	42a3      	cmp	r3, r4
   d792c:	d106      	bne.n	d793c <strncmp+0x22>
   d792e:	43ec      	mvns	r4, r5
   d7930:	4414      	add	r4, r2
   d7932:	42e0      	cmn	r0, r4
   d7934:	d001      	beq.n	d793a <strncmp+0x20>
   d7936:	2b00      	cmp	r3, #0
   d7938:	d1f3      	bne.n	d7922 <strncmp+0x8>
   d793a:	461c      	mov	r4, r3
   d793c:	1b18      	subs	r0, r3, r4
   d793e:	bd30      	pop	{r4, r5, pc}
   d7940:	4610      	mov	r0, r2
   d7942:	bd30      	pop	{r4, r5, pc}

000d7944 <strncpy>:
   d7944:	b510      	push	{r4, lr}
   d7946:	4603      	mov	r3, r0
   d7948:	b142      	cbz	r2, d795c <strncpy+0x18>
   d794a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d794e:	f803 4b01 	strb.w	r4, [r3], #1
   d7952:	3a01      	subs	r2, #1
   d7954:	2c00      	cmp	r4, #0
   d7956:	d1f7      	bne.n	d7948 <strncpy+0x4>
   d7958:	441a      	add	r2, r3
   d795a:	e000      	b.n	d795e <strncpy+0x1a>
   d795c:	bd10      	pop	{r4, pc}
   d795e:	4293      	cmp	r3, r2
   d7960:	d002      	beq.n	d7968 <strncpy+0x24>
   d7962:	f803 4b01 	strb.w	r4, [r3], #1
   d7966:	e7fa      	b.n	d795e <strncpy+0x1a>
   d7968:	bd10      	pop	{r4, pc}
	...

000d796c <_strtol_r>:
   d796c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7970:	4680      	mov	r8, r0
   d7972:	4840      	ldr	r0, [pc, #256]	; (d7a74 <_strtol_r+0x108>)
   d7974:	f8d0 9000 	ldr.w	r9, [r0]
   d7978:	460f      	mov	r7, r1
   d797a:	463d      	mov	r5, r7
   d797c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7980:	eb09 0004 	add.w	r0, r9, r4
   d7984:	7840      	ldrb	r0, [r0, #1]
   d7986:	f000 0008 	and.w	r0, r0, #8
   d798a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d798e:	b108      	cbz	r0, d7994 <_strtol_r+0x28>
   d7990:	462f      	mov	r7, r5
   d7992:	e7f2      	b.n	d797a <_strtol_r+0xe>
   d7994:	2c2d      	cmp	r4, #45	; 0x2d
   d7996:	d103      	bne.n	d79a0 <_strtol_r+0x34>
   d7998:	1cbd      	adds	r5, r7, #2
   d799a:	787c      	ldrb	r4, [r7, #1]
   d799c:	2601      	movs	r6, #1
   d799e:	e003      	b.n	d79a8 <_strtol_r+0x3c>
   d79a0:	2c2b      	cmp	r4, #43	; 0x2b
   d79a2:	bf04      	itt	eq
   d79a4:	787c      	ldrbeq	r4, [r7, #1]
   d79a6:	1cbd      	addeq	r5, r7, #2
   d79a8:	b113      	cbz	r3, d79b0 <_strtol_r+0x44>
   d79aa:	2b10      	cmp	r3, #16
   d79ac:	d10a      	bne.n	d79c4 <_strtol_r+0x58>
   d79ae:	e05b      	b.n	d7a68 <_strtol_r+0xfc>
   d79b0:	2c30      	cmp	r4, #48	; 0x30
   d79b2:	d157      	bne.n	d7a64 <_strtol_r+0xf8>
   d79b4:	7828      	ldrb	r0, [r5, #0]
   d79b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d79ba:	2858      	cmp	r0, #88	; 0x58
   d79bc:	d14d      	bne.n	d7a5a <_strtol_r+0xee>
   d79be:	786c      	ldrb	r4, [r5, #1]
   d79c0:	2310      	movs	r3, #16
   d79c2:	3502      	adds	r5, #2
   d79c4:	2e00      	cmp	r6, #0
   d79c6:	bf14      	ite	ne
   d79c8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d79cc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d79d0:	2700      	movs	r7, #0
   d79d2:	fbbc faf3 	udiv	sl, ip, r3
   d79d6:	4638      	mov	r0, r7
   d79d8:	fb03 cc1a 	mls	ip, r3, sl, ip
   d79dc:	eb09 0e04 	add.w	lr, r9, r4
   d79e0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d79e4:	f01e 0f04 	tst.w	lr, #4
   d79e8:	d001      	beq.n	d79ee <_strtol_r+0x82>
   d79ea:	3c30      	subs	r4, #48	; 0x30
   d79ec:	e00b      	b.n	d7a06 <_strtol_r+0x9a>
   d79ee:	f01e 0e03 	ands.w	lr, lr, #3
   d79f2:	d01b      	beq.n	d7a2c <_strtol_r+0xc0>
   d79f4:	f1be 0f01 	cmp.w	lr, #1
   d79f8:	bf0c      	ite	eq
   d79fa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d79fe:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7a02:	ebce 0404 	rsb	r4, lr, r4
   d7a06:	42a3      	cmp	r3, r4
   d7a08:	dd10      	ble.n	d7a2c <_strtol_r+0xc0>
   d7a0a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d7a0e:	d00a      	beq.n	d7a26 <_strtol_r+0xba>
   d7a10:	4550      	cmp	r0, sl
   d7a12:	d806      	bhi.n	d7a22 <_strtol_r+0xb6>
   d7a14:	d101      	bne.n	d7a1a <_strtol_r+0xae>
   d7a16:	4564      	cmp	r4, ip
   d7a18:	dc03      	bgt.n	d7a22 <_strtol_r+0xb6>
   d7a1a:	fb03 4000 	mla	r0, r3, r0, r4
   d7a1e:	2701      	movs	r7, #1
   d7a20:	e001      	b.n	d7a26 <_strtol_r+0xba>
   d7a22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7a26:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7a2a:	e7d7      	b.n	d79dc <_strtol_r+0x70>
   d7a2c:	1c7b      	adds	r3, r7, #1
   d7a2e:	d10c      	bne.n	d7a4a <_strtol_r+0xde>
   d7a30:	2e00      	cmp	r6, #0
   d7a32:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7a36:	bf14      	ite	ne
   d7a38:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7a3c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7a40:	f8c8 3000 	str.w	r3, [r8]
   d7a44:	b92a      	cbnz	r2, d7a52 <_strtol_r+0xe6>
   d7a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a4a:	b106      	cbz	r6, d7a4e <_strtol_r+0xe2>
   d7a4c:	4240      	negs	r0, r0
   d7a4e:	b172      	cbz	r2, d7a6e <_strtol_r+0x102>
   d7a50:	b107      	cbz	r7, d7a54 <_strtol_r+0xe8>
   d7a52:	1e69      	subs	r1, r5, #1
   d7a54:	6011      	str	r1, [r2, #0]
   d7a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a5a:	2430      	movs	r4, #48	; 0x30
   d7a5c:	2b00      	cmp	r3, #0
   d7a5e:	d1b1      	bne.n	d79c4 <_strtol_r+0x58>
   d7a60:	2308      	movs	r3, #8
   d7a62:	e7af      	b.n	d79c4 <_strtol_r+0x58>
   d7a64:	230a      	movs	r3, #10
   d7a66:	e7ad      	b.n	d79c4 <_strtol_r+0x58>
   d7a68:	2c30      	cmp	r4, #48	; 0x30
   d7a6a:	d0a3      	beq.n	d79b4 <_strtol_r+0x48>
   d7a6c:	e7aa      	b.n	d79c4 <_strtol_r+0x58>
   d7a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a72:	bf00      	nop
   d7a74:	2003e208 	.word	0x2003e208

000d7a78 <strtol>:
   d7a78:	4613      	mov	r3, r2
   d7a7a:	460a      	mov	r2, r1
   d7a7c:	4601      	mov	r1, r0
   d7a7e:	4802      	ldr	r0, [pc, #8]	; (d7a88 <strtol+0x10>)
   d7a80:	6800      	ldr	r0, [r0, #0]
   d7a82:	f7ff bf73 	b.w	d796c <_strtol_r>
   d7a86:	bf00      	nop
   d7a88:	2003e26c 	.word	0x2003e26c

000d7a8c <_strtoul_r>:
   d7a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a90:	4680      	mov	r8, r0
   d7a92:	483c      	ldr	r0, [pc, #240]	; (d7b84 <_strtoul_r+0xf8>)
   d7a94:	f8d0 9000 	ldr.w	r9, [r0]
   d7a98:	460e      	mov	r6, r1
   d7a9a:	4635      	mov	r5, r6
   d7a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7aa0:	eb09 0004 	add.w	r0, r9, r4
   d7aa4:	7840      	ldrb	r0, [r0, #1]
   d7aa6:	f000 0008 	and.w	r0, r0, #8
   d7aaa:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7aae:	b108      	cbz	r0, d7ab4 <_strtoul_r+0x28>
   d7ab0:	462e      	mov	r6, r5
   d7ab2:	e7f2      	b.n	d7a9a <_strtoul_r+0xe>
   d7ab4:	2c2d      	cmp	r4, #45	; 0x2d
   d7ab6:	d103      	bne.n	d7ac0 <_strtoul_r+0x34>
   d7ab8:	1cb5      	adds	r5, r6, #2
   d7aba:	7874      	ldrb	r4, [r6, #1]
   d7abc:	2701      	movs	r7, #1
   d7abe:	e003      	b.n	d7ac8 <_strtoul_r+0x3c>
   d7ac0:	2c2b      	cmp	r4, #43	; 0x2b
   d7ac2:	bf04      	itt	eq
   d7ac4:	7874      	ldrbeq	r4, [r6, #1]
   d7ac6:	1cb5      	addeq	r5, r6, #2
   d7ac8:	b113      	cbz	r3, d7ad0 <_strtoul_r+0x44>
   d7aca:	2b10      	cmp	r3, #16
   d7acc:	d10a      	bne.n	d7ae4 <_strtoul_r+0x58>
   d7ace:	e053      	b.n	d7b78 <_strtoul_r+0xec>
   d7ad0:	2c30      	cmp	r4, #48	; 0x30
   d7ad2:	d14f      	bne.n	d7b74 <_strtoul_r+0xe8>
   d7ad4:	7828      	ldrb	r0, [r5, #0]
   d7ad6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7ada:	2858      	cmp	r0, #88	; 0x58
   d7adc:	d145      	bne.n	d7b6a <_strtoul_r+0xde>
   d7ade:	786c      	ldrb	r4, [r5, #1]
   d7ae0:	2310      	movs	r3, #16
   d7ae2:	3502      	adds	r5, #2
   d7ae4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7ae8:	2600      	movs	r6, #0
   d7aea:	fbbc fcf3 	udiv	ip, ip, r3
   d7aee:	fb03 fa0c 	mul.w	sl, r3, ip
   d7af2:	ea6f 0a0a 	mvn.w	sl, sl
   d7af6:	4630      	mov	r0, r6
   d7af8:	eb09 0e04 	add.w	lr, r9, r4
   d7afc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7b00:	f01e 0f04 	tst.w	lr, #4
   d7b04:	d001      	beq.n	d7b0a <_strtoul_r+0x7e>
   d7b06:	3c30      	subs	r4, #48	; 0x30
   d7b08:	e00b      	b.n	d7b22 <_strtoul_r+0x96>
   d7b0a:	f01e 0e03 	ands.w	lr, lr, #3
   d7b0e:	d01a      	beq.n	d7b46 <_strtoul_r+0xba>
   d7b10:	f1be 0f01 	cmp.w	lr, #1
   d7b14:	bf0c      	ite	eq
   d7b16:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7b1a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7b1e:	ebce 0404 	rsb	r4, lr, r4
   d7b22:	42a3      	cmp	r3, r4
   d7b24:	dd0f      	ble.n	d7b46 <_strtoul_r+0xba>
   d7b26:	2e00      	cmp	r6, #0
   d7b28:	db08      	blt.n	d7b3c <_strtoul_r+0xb0>
   d7b2a:	4560      	cmp	r0, ip
   d7b2c:	d806      	bhi.n	d7b3c <_strtoul_r+0xb0>
   d7b2e:	d101      	bne.n	d7b34 <_strtoul_r+0xa8>
   d7b30:	4554      	cmp	r4, sl
   d7b32:	dc03      	bgt.n	d7b3c <_strtoul_r+0xb0>
   d7b34:	fb03 4000 	mla	r0, r3, r0, r4
   d7b38:	2601      	movs	r6, #1
   d7b3a:	e001      	b.n	d7b40 <_strtoul_r+0xb4>
   d7b3c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7b40:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7b44:	e7d8      	b.n	d7af8 <_strtoul_r+0x6c>
   d7b46:	2e00      	cmp	r6, #0
   d7b48:	da07      	bge.n	d7b5a <_strtoul_r+0xce>
   d7b4a:	2322      	movs	r3, #34	; 0x22
   d7b4c:	f8c8 3000 	str.w	r3, [r8]
   d7b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7b54:	b92a      	cbnz	r2, d7b62 <_strtoul_r+0xd6>
   d7b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b5a:	b107      	cbz	r7, d7b5e <_strtoul_r+0xd2>
   d7b5c:	4240      	negs	r0, r0
   d7b5e:	b172      	cbz	r2, d7b7e <_strtoul_r+0xf2>
   d7b60:	b106      	cbz	r6, d7b64 <_strtoul_r+0xd8>
   d7b62:	1e69      	subs	r1, r5, #1
   d7b64:	6011      	str	r1, [r2, #0]
   d7b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b6a:	2430      	movs	r4, #48	; 0x30
   d7b6c:	2b00      	cmp	r3, #0
   d7b6e:	d1b9      	bne.n	d7ae4 <_strtoul_r+0x58>
   d7b70:	2308      	movs	r3, #8
   d7b72:	e7b7      	b.n	d7ae4 <_strtoul_r+0x58>
   d7b74:	230a      	movs	r3, #10
   d7b76:	e7b5      	b.n	d7ae4 <_strtoul_r+0x58>
   d7b78:	2c30      	cmp	r4, #48	; 0x30
   d7b7a:	d0ab      	beq.n	d7ad4 <_strtoul_r+0x48>
   d7b7c:	e7b2      	b.n	d7ae4 <_strtoul_r+0x58>
   d7b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b82:	bf00      	nop
   d7b84:	2003e208 	.word	0x2003e208

000d7b88 <strtoul>:
   d7b88:	4613      	mov	r3, r2
   d7b8a:	460a      	mov	r2, r1
   d7b8c:	4601      	mov	r1, r0
   d7b8e:	4802      	ldr	r0, [pc, #8]	; (d7b98 <strtoul+0x10>)
   d7b90:	6800      	ldr	r0, [r0, #0]
   d7b92:	f7ff bf7b 	b.w	d7a8c <_strtoul_r>
   d7b96:	bf00      	nop
   d7b98:	2003e26c 	.word	0x2003e26c

000d7b9c <__tzcalc_limits>:
   d7b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ba0:	4604      	mov	r4, r0
   d7ba2:	f000 fa6f 	bl	d8084 <__gettzinfo>
   d7ba6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7baa:	429c      	cmp	r4, r3
   d7bac:	f340 8096 	ble.w	d7cdc <__tzcalc_limits+0x140>
   d7bb0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7bb4:	18e3      	adds	r3, r4, r3
   d7bb6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7bba:	109b      	asrs	r3, r3, #2
   d7bbc:	f240 156d 	movw	r5, #365	; 0x16d
   d7bc0:	fb05 3502 	mla	r5, r5, r2, r3
   d7bc4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7bc8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7bcc:	fb92 f3f3 	sdiv	r3, r2, r3
   d7bd0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7bd4:	442b      	add	r3, r5
   d7bd6:	18a5      	adds	r5, r4, r2
   d7bd8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7bdc:	fb95 f5f2 	sdiv	r5, r5, r2
   d7be0:	441d      	add	r5, r3
   d7be2:	2364      	movs	r3, #100	; 0x64
   d7be4:	fb94 f7f2 	sdiv	r7, r4, r2
   d7be8:	fb94 f6f3 	sdiv	r6, r4, r3
   d7bec:	fb02 4717 	mls	r7, r2, r7, r4
   d7bf0:	fb03 4616 	mls	r6, r3, r6, r4
   d7bf4:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7bf8:	fab7 fe87 	clz	lr, r7
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	f004 0303 	and.w	r3, r4, #3
   d7c02:	6044      	str	r4, [r0, #4]
   d7c04:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7c08:	4601      	mov	r1, r0
   d7c0a:	9300      	str	r3, [sp, #0]
   d7c0c:	f04f 0c07 	mov.w	ip, #7
   d7c10:	7a0b      	ldrb	r3, [r1, #8]
   d7c12:	2b4a      	cmp	r3, #74	; 0x4a
   d7c14:	d10e      	bne.n	d7c34 <__tzcalc_limits+0x98>
   d7c16:	694b      	ldr	r3, [r1, #20]
   d7c18:	9a00      	ldr	r2, [sp, #0]
   d7c1a:	18ec      	adds	r4, r5, r3
   d7c1c:	b902      	cbnz	r2, d7c20 <__tzcalc_limits+0x84>
   d7c1e:	b906      	cbnz	r6, d7c22 <__tzcalc_limits+0x86>
   d7c20:	b927      	cbnz	r7, d7c2c <__tzcalc_limits+0x90>
   d7c22:	2b3b      	cmp	r3, #59	; 0x3b
   d7c24:	bfd4      	ite	le
   d7c26:	2300      	movle	r3, #0
   d7c28:	2301      	movgt	r3, #1
   d7c2a:	e000      	b.n	d7c2e <__tzcalc_limits+0x92>
   d7c2c:	2300      	movs	r3, #0
   d7c2e:	4423      	add	r3, r4
   d7c30:	3b01      	subs	r3, #1
   d7c32:	e03f      	b.n	d7cb4 <__tzcalc_limits+0x118>
   d7c34:	2b44      	cmp	r3, #68	; 0x44
   d7c36:	d102      	bne.n	d7c3e <__tzcalc_limits+0xa2>
   d7c38:	694b      	ldr	r3, [r1, #20]
   d7c3a:	442b      	add	r3, r5
   d7c3c:	e03a      	b.n	d7cb4 <__tzcalc_limits+0x118>
   d7c3e:	9b00      	ldr	r3, [sp, #0]
   d7c40:	b92b      	cbnz	r3, d7c4e <__tzcalc_limits+0xb2>
   d7c42:	2e00      	cmp	r6, #0
   d7c44:	bf0c      	ite	eq
   d7c46:	46f0      	moveq	r8, lr
   d7c48:	f04f 0801 	movne.w	r8, #1
   d7c4c:	e000      	b.n	d7c50 <__tzcalc_limits+0xb4>
   d7c4e:	46f0      	mov	r8, lr
   d7c50:	4b24      	ldr	r3, [pc, #144]	; (d7ce4 <__tzcalc_limits+0x148>)
   d7c52:	68cc      	ldr	r4, [r1, #12]
   d7c54:	2230      	movs	r2, #48	; 0x30
   d7c56:	fb02 3808 	mla	r8, r2, r8, r3
   d7c5a:	f1a8 0a04 	sub.w	sl, r8, #4
   d7c5e:	46a9      	mov	r9, r5
   d7c60:	2301      	movs	r3, #1
   d7c62:	42a3      	cmp	r3, r4
   d7c64:	da04      	bge.n	d7c70 <__tzcalc_limits+0xd4>
   d7c66:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7c6a:	3301      	adds	r3, #1
   d7c6c:	44d9      	add	r9, fp
   d7c6e:	e7f8      	b.n	d7c62 <__tzcalc_limits+0xc6>
   d7c70:	f109 0304 	add.w	r3, r9, #4
   d7c74:	fb93 fbfc 	sdiv	fp, r3, ip
   d7c78:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7c7c:	2c01      	cmp	r4, #1
   d7c7e:	ebca 0a03 	rsb	sl, sl, r3
   d7c82:	694b      	ldr	r3, [r1, #20]
   d7c84:	bfb8      	it	lt
   d7c86:	2401      	movlt	r4, #1
   d7c88:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7c8c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7c90:	690b      	ldr	r3, [r1, #16]
   d7c92:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7c96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7c9a:	bf48      	it	mi
   d7c9c:	f10a 0a07 	addmi.w	sl, sl, #7
   d7ca0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7ca4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7ca8:	4453      	add	r3, sl
   d7caa:	42a3      	cmp	r3, r4
   d7cac:	db01      	blt.n	d7cb2 <__tzcalc_limits+0x116>
   d7cae:	3b07      	subs	r3, #7
   d7cb0:	e7fb      	b.n	d7caa <__tzcalc_limits+0x10e>
   d7cb2:	444b      	add	r3, r9
   d7cb4:	698c      	ldr	r4, [r1, #24]
   d7cb6:	4a0c      	ldr	r2, [pc, #48]	; (d7ce8 <__tzcalc_limits+0x14c>)
   d7cb8:	fb02 4303 	mla	r3, r2, r3, r4
   d7cbc:	6a0c      	ldr	r4, [r1, #32]
   d7cbe:	4423      	add	r3, r4
   d7cc0:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7cc4:	9b01      	ldr	r3, [sp, #4]
   d7cc6:	4299      	cmp	r1, r3
   d7cc8:	d1a2      	bne.n	d7c10 <__tzcalc_limits+0x74>
   d7cca:	69c3      	ldr	r3, [r0, #28]
   d7ccc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7cce:	4293      	cmp	r3, r2
   d7cd0:	bfac      	ite	ge
   d7cd2:	2300      	movge	r3, #0
   d7cd4:	2301      	movlt	r3, #1
   d7cd6:	6003      	str	r3, [r0, #0]
   d7cd8:	2001      	movs	r0, #1
   d7cda:	e000      	b.n	d7cde <__tzcalc_limits+0x142>
   d7cdc:	2000      	movs	r0, #0
   d7cde:	b003      	add	sp, #12
   d7ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7ce4:	000d88e8 	.word	0x000d88e8
   d7ce8:	00015180 	.word	0x00015180

000d7cec <__tz_lock>:
   d7cec:	4770      	bx	lr

000d7cee <__tz_unlock>:
   d7cee:	4770      	bx	lr

000d7cf0 <_tzset_unlocked>:
   d7cf0:	4b01      	ldr	r3, [pc, #4]	; (d7cf8 <_tzset_unlocked+0x8>)
   d7cf2:	6818      	ldr	r0, [r3, #0]
   d7cf4:	f000 b802 	b.w	d7cfc <_tzset_unlocked_r>
   d7cf8:	2003e26c 	.word	0x2003e26c

000d7cfc <_tzset_unlocked_r>:
   d7cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d00:	b08d      	sub	sp, #52	; 0x34
   d7d02:	4607      	mov	r7, r0
   d7d04:	f000 f9be 	bl	d8084 <__gettzinfo>
   d7d08:	49b0      	ldr	r1, [pc, #704]	; (d7fcc <_tzset_unlocked_r+0x2d0>)
   d7d0a:	4eb1      	ldr	r6, [pc, #708]	; (d7fd0 <_tzset_unlocked_r+0x2d4>)
   d7d0c:	4604      	mov	r4, r0
   d7d0e:	4638      	mov	r0, r7
   d7d10:	f000 f9b0 	bl	d8074 <_getenv_r>
   d7d14:	4605      	mov	r5, r0
   d7d16:	b960      	cbnz	r0, d7d32 <_tzset_unlocked_r+0x36>
   d7d18:	4bae      	ldr	r3, [pc, #696]	; (d7fd4 <_tzset_unlocked_r+0x2d8>)
   d7d1a:	4aaf      	ldr	r2, [pc, #700]	; (d7fd8 <_tzset_unlocked_r+0x2dc>)
   d7d1c:	6018      	str	r0, [r3, #0]
   d7d1e:	4baf      	ldr	r3, [pc, #700]	; (d7fdc <_tzset_unlocked_r+0x2e0>)
   d7d20:	6018      	str	r0, [r3, #0]
   d7d22:	4baf      	ldr	r3, [pc, #700]	; (d7fe0 <_tzset_unlocked_r+0x2e4>)
   d7d24:	6830      	ldr	r0, [r6, #0]
   d7d26:	601a      	str	r2, [r3, #0]
   d7d28:	605a      	str	r2, [r3, #4]
   d7d2a:	f7fd fb2d 	bl	d5388 <free>
   d7d2e:	6035      	str	r5, [r6, #0]
   d7d30:	e148      	b.n	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7d32:	6831      	ldr	r1, [r6, #0]
   d7d34:	b979      	cbnz	r1, d7d56 <_tzset_unlocked_r+0x5a>
   d7d36:	6830      	ldr	r0, [r6, #0]
   d7d38:	f7fd fb26 	bl	d5388 <free>
   d7d3c:	4628      	mov	r0, r5
   d7d3e:	f7ff fde4 	bl	d790a <strlen>
   d7d42:	1c41      	adds	r1, r0, #1
   d7d44:	4638      	mov	r0, r7
   d7d46:	f7fd fb47 	bl	d53d8 <_malloc_r>
   d7d4a:	6030      	str	r0, [r6, #0]
   d7d4c:	b148      	cbz	r0, d7d62 <_tzset_unlocked_r+0x66>
   d7d4e:	4629      	mov	r1, r5
   d7d50:	f7ff fdb8 	bl	d78c4 <strcpy>
   d7d54:	e005      	b.n	d7d62 <_tzset_unlocked_r+0x66>
   d7d56:	f7ff fdab 	bl	d78b0 <strcmp>
   d7d5a:	2800      	cmp	r0, #0
   d7d5c:	f000 8132 	beq.w	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7d60:	e7e9      	b.n	d7d36 <_tzset_unlocked_r+0x3a>
   d7d62:	782b      	ldrb	r3, [r5, #0]
   d7d64:	4a9f      	ldr	r2, [pc, #636]	; (d7fe4 <_tzset_unlocked_r+0x2e8>)
   d7d66:	49a0      	ldr	r1, [pc, #640]	; (d7fe8 <_tzset_unlocked_r+0x2ec>)
   d7d68:	2b3a      	cmp	r3, #58	; 0x3a
   d7d6a:	bf08      	it	eq
   d7d6c:	3501      	addeq	r5, #1
   d7d6e:	ae0a      	add	r6, sp, #40	; 0x28
   d7d70:	4633      	mov	r3, r6
   d7d72:	4628      	mov	r0, r5
   d7d74:	f7fd fb18 	bl	d53a8 <siscanf>
   d7d78:	2800      	cmp	r0, #0
   d7d7a:	f340 8123 	ble.w	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d80:	18ef      	adds	r7, r5, r3
   d7d82:	5ceb      	ldrb	r3, [r5, r3]
   d7d84:	2b2d      	cmp	r3, #45	; 0x2d
   d7d86:	d103      	bne.n	d7d90 <_tzset_unlocked_r+0x94>
   d7d88:	3701      	adds	r7, #1
   d7d8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7d8e:	e003      	b.n	d7d98 <_tzset_unlocked_r+0x9c>
   d7d90:	2b2b      	cmp	r3, #43	; 0x2b
   d7d92:	bf08      	it	eq
   d7d94:	3701      	addeq	r7, #1
   d7d96:	2501      	movs	r5, #1
   d7d98:	f10d 0a20 	add.w	sl, sp, #32
   d7d9c:	f10d 0b1e 	add.w	fp, sp, #30
   d7da0:	f04f 0800 	mov.w	r8, #0
   d7da4:	9603      	str	r6, [sp, #12]
   d7da6:	f8cd a008 	str.w	sl, [sp, #8]
   d7daa:	9601      	str	r6, [sp, #4]
   d7dac:	f8cd b000 	str.w	fp, [sp]
   d7db0:	4633      	mov	r3, r6
   d7db2:	aa07      	add	r2, sp, #28
   d7db4:	498d      	ldr	r1, [pc, #564]	; (d7fec <_tzset_unlocked_r+0x2f0>)
   d7db6:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7dba:	4638      	mov	r0, r7
   d7dbc:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7dc0:	f7fd faf2 	bl	d53a8 <siscanf>
   d7dc4:	4540      	cmp	r0, r8
   d7dc6:	f340 80fd 	ble.w	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7dca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7dce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7dd2:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7ff8 <_tzset_unlocked_r+0x2fc>
   d7dd6:	213c      	movs	r1, #60	; 0x3c
   d7dd8:	fb01 3302 	mla	r3, r1, r2, r3
   d7ddc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7de0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7de4:	fb01 3302 	mla	r3, r1, r2, r3
   d7de8:	435d      	muls	r5, r3
   d7dea:	6225      	str	r5, [r4, #32]
   d7dec:	4d7c      	ldr	r5, [pc, #496]	; (d7fe0 <_tzset_unlocked_r+0x2e4>)
   d7dee:	4b7d      	ldr	r3, [pc, #500]	; (d7fe4 <_tzset_unlocked_r+0x2e8>)
   d7df0:	602b      	str	r3, [r5, #0]
   d7df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7df4:	497c      	ldr	r1, [pc, #496]	; (d7fe8 <_tzset_unlocked_r+0x2ec>)
   d7df6:	441f      	add	r7, r3
   d7df8:	464a      	mov	r2, r9
   d7dfa:	4633      	mov	r3, r6
   d7dfc:	4638      	mov	r0, r7
   d7dfe:	f7fd fad3 	bl	d53a8 <siscanf>
   d7e02:	4540      	cmp	r0, r8
   d7e04:	dc08      	bgt.n	d7e18 <_tzset_unlocked_r+0x11c>
   d7e06:	682b      	ldr	r3, [r5, #0]
   d7e08:	606b      	str	r3, [r5, #4]
   d7e0a:	4b72      	ldr	r3, [pc, #456]	; (d7fd4 <_tzset_unlocked_r+0x2d8>)
   d7e0c:	6a22      	ldr	r2, [r4, #32]
   d7e0e:	601a      	str	r2, [r3, #0]
   d7e10:	4b72      	ldr	r3, [pc, #456]	; (d7fdc <_tzset_unlocked_r+0x2e0>)
   d7e12:	f8c3 8000 	str.w	r8, [r3]
   d7e16:	e0d5      	b.n	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e1a:	f8c5 9004 	str.w	r9, [r5, #4]
   d7e1e:	18fd      	adds	r5, r7, r3
   d7e20:	5cfb      	ldrb	r3, [r7, r3]
   d7e22:	2b2d      	cmp	r3, #45	; 0x2d
   d7e24:	d103      	bne.n	d7e2e <_tzset_unlocked_r+0x132>
   d7e26:	3501      	adds	r5, #1
   d7e28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7e2c:	e003      	b.n	d7e36 <_tzset_unlocked_r+0x13a>
   d7e2e:	2b2b      	cmp	r3, #43	; 0x2b
   d7e30:	bf08      	it	eq
   d7e32:	3501      	addeq	r5, #1
   d7e34:	2701      	movs	r7, #1
   d7e36:	2300      	movs	r3, #0
   d7e38:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7e3c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7e40:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7e44:	930a      	str	r3, [sp, #40]	; 0x28
   d7e46:	9603      	str	r6, [sp, #12]
   d7e48:	f8cd a008 	str.w	sl, [sp, #8]
   d7e4c:	9601      	str	r6, [sp, #4]
   d7e4e:	f8cd b000 	str.w	fp, [sp]
   d7e52:	4633      	mov	r3, r6
   d7e54:	aa07      	add	r2, sp, #28
   d7e56:	4965      	ldr	r1, [pc, #404]	; (d7fec <_tzset_unlocked_r+0x2f0>)
   d7e58:	4628      	mov	r0, r5
   d7e5a:	f7fd faa5 	bl	d53a8 <siscanf>
   d7e5e:	2800      	cmp	r0, #0
   d7e60:	dc04      	bgt.n	d7e6c <_tzset_unlocked_r+0x170>
   d7e62:	6a23      	ldr	r3, [r4, #32]
   d7e64:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7e68:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7e6a:	e00e      	b.n	d7e8a <_tzset_unlocked_r+0x18e>
   d7e6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7e70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7e74:	213c      	movs	r1, #60	; 0x3c
   d7e76:	fb01 3302 	mla	r3, r1, r2, r3
   d7e7a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7e7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7e82:	fb01 3302 	mla	r3, r1, r2, r3
   d7e86:	435f      	muls	r7, r3
   d7e88:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e8c:	4627      	mov	r7, r4
   d7e8e:	441d      	add	r5, r3
   d7e90:	f04f 0900 	mov.w	r9, #0
   d7e94:	782b      	ldrb	r3, [r5, #0]
   d7e96:	2b2c      	cmp	r3, #44	; 0x2c
   d7e98:	bf08      	it	eq
   d7e9a:	3501      	addeq	r5, #1
   d7e9c:	f895 8000 	ldrb.w	r8, [r5]
   d7ea0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7ea4:	d126      	bne.n	d7ef4 <_tzset_unlocked_r+0x1f8>
   d7ea6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7eaa:	9302      	str	r3, [sp, #8]
   d7eac:	ab09      	add	r3, sp, #36	; 0x24
   d7eae:	9300      	str	r3, [sp, #0]
   d7eb0:	9603      	str	r6, [sp, #12]
   d7eb2:	9601      	str	r6, [sp, #4]
   d7eb4:	4633      	mov	r3, r6
   d7eb6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7eba:	494d      	ldr	r1, [pc, #308]	; (d7ff0 <_tzset_unlocked_r+0x2f4>)
   d7ebc:	4628      	mov	r0, r5
   d7ebe:	f7fd fa73 	bl	d53a8 <siscanf>
   d7ec2:	2803      	cmp	r0, #3
   d7ec4:	d17e      	bne.n	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7ec6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7eca:	1e4b      	subs	r3, r1, #1
   d7ecc:	2b0b      	cmp	r3, #11
   d7ece:	d879      	bhi.n	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7ed0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7ed4:	1e53      	subs	r3, r2, #1
   d7ed6:	2b04      	cmp	r3, #4
   d7ed8:	d874      	bhi.n	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7eda:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7ede:	2b06      	cmp	r3, #6
   d7ee0:	d870      	bhi.n	d7fc4 <_tzset_unlocked_r+0x2c8>
   d7ee2:	f887 8008 	strb.w	r8, [r7, #8]
   d7ee6:	60f9      	str	r1, [r7, #12]
   d7ee8:	613a      	str	r2, [r7, #16]
   d7eea:	617b      	str	r3, [r7, #20]
   d7eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7eee:	eb05 0803 	add.w	r8, r5, r3
   d7ef2:	e02a      	b.n	d7f4a <_tzset_unlocked_r+0x24e>
   d7ef4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7ef8:	bf06      	itte	eq
   d7efa:	3501      	addeq	r5, #1
   d7efc:	4643      	moveq	r3, r8
   d7efe:	2344      	movne	r3, #68	; 0x44
   d7f00:	220a      	movs	r2, #10
   d7f02:	a90b      	add	r1, sp, #44	; 0x2c
   d7f04:	4628      	mov	r0, r5
   d7f06:	9305      	str	r3, [sp, #20]
   d7f08:	f7ff fe3e 	bl	d7b88 <strtoul>
   d7f0c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7f10:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7f14:	4545      	cmp	r5, r8
   d7f16:	9b05      	ldr	r3, [sp, #20]
   d7f18:	d114      	bne.n	d7f44 <_tzset_unlocked_r+0x248>
   d7f1a:	234d      	movs	r3, #77	; 0x4d
   d7f1c:	f1b9 0f00 	cmp.w	r9, #0
   d7f20:	d107      	bne.n	d7f32 <_tzset_unlocked_r+0x236>
   d7f22:	7223      	strb	r3, [r4, #8]
   d7f24:	2303      	movs	r3, #3
   d7f26:	60e3      	str	r3, [r4, #12]
   d7f28:	2302      	movs	r3, #2
   d7f2a:	6123      	str	r3, [r4, #16]
   d7f2c:	f8c4 9014 	str.w	r9, [r4, #20]
   d7f30:	e00b      	b.n	d7f4a <_tzset_unlocked_r+0x24e>
   d7f32:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7f36:	230b      	movs	r3, #11
   d7f38:	62a3      	str	r3, [r4, #40]	; 0x28
   d7f3a:	2301      	movs	r3, #1
   d7f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7f3e:	2300      	movs	r3, #0
   d7f40:	6323      	str	r3, [r4, #48]	; 0x30
   d7f42:	e002      	b.n	d7f4a <_tzset_unlocked_r+0x24e>
   d7f44:	b280      	uxth	r0, r0
   d7f46:	723b      	strb	r3, [r7, #8]
   d7f48:	6178      	str	r0, [r7, #20]
   d7f4a:	2302      	movs	r3, #2
   d7f4c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7f50:	2300      	movs	r3, #0
   d7f52:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7f56:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7f5a:	930a      	str	r3, [sp, #40]	; 0x28
   d7f5c:	f898 3000 	ldrb.w	r3, [r8]
   d7f60:	2b2f      	cmp	r3, #47	; 0x2f
   d7f62:	d10b      	bne.n	d7f7c <_tzset_unlocked_r+0x280>
   d7f64:	9603      	str	r6, [sp, #12]
   d7f66:	f8cd a008 	str.w	sl, [sp, #8]
   d7f6a:	9601      	str	r6, [sp, #4]
   d7f6c:	f8cd b000 	str.w	fp, [sp]
   d7f70:	4633      	mov	r3, r6
   d7f72:	aa07      	add	r2, sp, #28
   d7f74:	491f      	ldr	r1, [pc, #124]	; (d7ff4 <_tzset_unlocked_r+0x2f8>)
   d7f76:	4640      	mov	r0, r8
   d7f78:	f7fd fa16 	bl	d53a8 <siscanf>
   d7f7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7f80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7f84:	213c      	movs	r1, #60	; 0x3c
   d7f86:	fb01 3302 	mla	r3, r1, r2, r3
   d7f8a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7f8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7f92:	fb01 3302 	mla	r3, r1, r2, r3
   d7f96:	61bb      	str	r3, [r7, #24]
   d7f98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7f9a:	f109 0901 	add.w	r9, r9, #1
   d7f9e:	f1b9 0f02 	cmp.w	r9, #2
   d7fa2:	4445      	add	r5, r8
   d7fa4:	f107 071c 	add.w	r7, r7, #28
   d7fa8:	f47f af74 	bne.w	d7e94 <_tzset_unlocked_r+0x198>
   d7fac:	6860      	ldr	r0, [r4, #4]
   d7fae:	f7ff fdf5 	bl	d7b9c <__tzcalc_limits>
   d7fb2:	4b08      	ldr	r3, [pc, #32]	; (d7fd4 <_tzset_unlocked_r+0x2d8>)
   d7fb4:	6a22      	ldr	r2, [r4, #32]
   d7fb6:	601a      	str	r2, [r3, #0]
   d7fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7fba:	1a9b      	subs	r3, r3, r2
   d7fbc:	4a07      	ldr	r2, [pc, #28]	; (d7fdc <_tzset_unlocked_r+0x2e0>)
   d7fbe:	bf18      	it	ne
   d7fc0:	2301      	movne	r3, #1
   d7fc2:	6013      	str	r3, [r2, #0]
   d7fc4:	b00d      	add	sp, #52	; 0x34
   d7fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7fca:	bf00      	nop
   d7fcc:	000d8948 	.word	0x000d8948
   d7fd0:	2003e7e0 	.word	0x2003e7e0
   d7fd4:	2003e7e8 	.word	0x2003e7e8
   d7fd8:	000d894b 	.word	0x000d894b
   d7fdc:	2003e7e4 	.word	0x2003e7e4
   d7fe0:	2003e270 	.word	0x2003e270
   d7fe4:	2003e7d3 	.word	0x2003e7d3
   d7fe8:	000d894f 	.word	0x000d894f
   d7fec:	000d8972 	.word	0x000d8972
   d7ff0:	000d895e 	.word	0x000d895e
   d7ff4:	000d8971 	.word	0x000d8971
   d7ff8:	2003e7c8 	.word	0x2003e7c8

000d7ffc <_findenv_r>:
   d7ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8000:	4607      	mov	r7, r0
   d8002:	468b      	mov	fp, r1
   d8004:	4690      	mov	r8, r2
   d8006:	f000 f8d9 	bl	d81bc <__env_lock>
   d800a:	4b19      	ldr	r3, [pc, #100]	; (d8070 <_findenv_r+0x74>)
   d800c:	681d      	ldr	r5, [r3, #0]
   d800e:	469a      	mov	sl, r3
   d8010:	b13d      	cbz	r5, d8022 <_findenv_r+0x26>
   d8012:	465c      	mov	r4, fp
   d8014:	4623      	mov	r3, r4
   d8016:	f813 2b01 	ldrb.w	r2, [r3], #1
   d801a:	b142      	cbz	r2, d802e <_findenv_r+0x32>
   d801c:	2a3d      	cmp	r2, #61	; 0x3d
   d801e:	461c      	mov	r4, r3
   d8020:	d1f8      	bne.n	d8014 <_findenv_r+0x18>
   d8022:	4638      	mov	r0, r7
   d8024:	f000 f8cb 	bl	d81be <__env_unlock>
   d8028:	2000      	movs	r0, #0
   d802a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d802e:	ebcb 0404 	rsb	r4, fp, r4
   d8032:	46a9      	mov	r9, r5
   d8034:	f859 0b04 	ldr.w	r0, [r9], #4
   d8038:	2800      	cmp	r0, #0
   d803a:	d0f2      	beq.n	d8022 <_findenv_r+0x26>
   d803c:	4622      	mov	r2, r4
   d803e:	4659      	mov	r1, fp
   d8040:	f7ff fc6b 	bl	d791a <strncmp>
   d8044:	b988      	cbnz	r0, d806a <_findenv_r+0x6e>
   d8046:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d804a:	191e      	adds	r6, r3, r4
   d804c:	5d1b      	ldrb	r3, [r3, r4]
   d804e:	2b3d      	cmp	r3, #61	; 0x3d
   d8050:	d10b      	bne.n	d806a <_findenv_r+0x6e>
   d8052:	f8da 3000 	ldr.w	r3, [sl]
   d8056:	1aed      	subs	r5, r5, r3
   d8058:	10ad      	asrs	r5, r5, #2
   d805a:	4638      	mov	r0, r7
   d805c:	f8c8 5000 	str.w	r5, [r8]
   d8060:	f000 f8ad 	bl	d81be <__env_unlock>
   d8064:	1c70      	adds	r0, r6, #1
   d8066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d806a:	464d      	mov	r5, r9
   d806c:	e7e1      	b.n	d8032 <_findenv_r+0x36>
   d806e:	bf00      	nop
   d8070:	2003e2b8 	.word	0x2003e2b8

000d8074 <_getenv_r>:
   d8074:	b507      	push	{r0, r1, r2, lr}
   d8076:	aa01      	add	r2, sp, #4
   d8078:	f7ff ffc0 	bl	d7ffc <_findenv_r>
   d807c:	b003      	add	sp, #12
   d807e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8084 <__gettzinfo>:
   d8084:	4800      	ldr	r0, [pc, #0]	; (d8088 <__gettzinfo+0x4>)
   d8086:	4770      	bx	lr
   d8088:	2003e278 	.word	0x2003e278

000d808c <gmtime_r>:
   d808c:	6802      	ldr	r2, [r0, #0]
   d808e:	4b47      	ldr	r3, [pc, #284]	; (d81ac <gmtime_r+0x120>)
   d8090:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8092:	fb92 f4f3 	sdiv	r4, r2, r3
   d8096:	fb03 2214 	mls	r2, r3, r4, r2
   d809a:	2a00      	cmp	r2, #0
   d809c:	bfbc      	itt	lt
   d809e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d80a2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d80a6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d80aa:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d80ae:	fb92 f3f0 	sdiv	r3, r2, r0
   d80b2:	fb00 2213 	mls	r2, r0, r3, r2
   d80b6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d80ba:	bfac      	ite	ge
   d80bc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d80c0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d80c4:	608b      	str	r3, [r1, #8]
   d80c6:	fb92 f3f0 	sdiv	r3, r2, r0
   d80ca:	fb00 2213 	mls	r2, r0, r3, r2
   d80ce:	604b      	str	r3, [r1, #4]
   d80d0:	600a      	str	r2, [r1, #0]
   d80d2:	2307      	movs	r3, #7
   d80d4:	1ce2      	adds	r2, r4, #3
   d80d6:	fb92 f3f3 	sdiv	r3, r2, r3
   d80da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d80de:	1ad3      	subs	r3, r2, r3
   d80e0:	618b      	str	r3, [r1, #24]
   d80e2:	4b33      	ldr	r3, [pc, #204]	; (d81b0 <gmtime_r+0x124>)
   d80e4:	4d33      	ldr	r5, [pc, #204]	; (d81b4 <gmtime_r+0x128>)
   d80e6:	fb94 f5f5 	sdiv	r5, r4, r5
   d80ea:	fb03 4405 	mla	r4, r3, r5, r4
   d80ee:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d80f2:	fbb4 f2f2 	udiv	r2, r4, r2
   d80f6:	4422      	add	r2, r4
   d80f8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d80fc:	fbb4 f3f7 	udiv	r3, r4, r7
   d8100:	1ad2      	subs	r2, r2, r3
   d8102:	482d      	ldr	r0, [pc, #180]	; (d81b8 <gmtime_r+0x12c>)
   d8104:	fbb4 f0f0 	udiv	r0, r4, r0
   d8108:	f648 6694 	movw	r6, #36500	; 0x8e94
   d810c:	1a13      	subs	r3, r2, r0
   d810e:	fbb3 f6f6 	udiv	r6, r3, r6
   d8112:	4434      	add	r4, r6
   d8114:	f240 126d 	movw	r2, #365	; 0x16d
   d8118:	fbb3 f0f2 	udiv	r0, r3, r2
   d811c:	fbb3 f3f7 	udiv	r3, r3, r7
   d8120:	1ae3      	subs	r3, r4, r3
   d8122:	fb02 3310 	mls	r3, r2, r0, r3
   d8126:	2499      	movs	r4, #153	; 0x99
   d8128:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d812c:	3202      	adds	r2, #2
   d812e:	fbb2 f2f4 	udiv	r2, r2, r4
   d8132:	2a0a      	cmp	r2, #10
   d8134:	fb04 f402 	mul.w	r4, r4, r2
   d8138:	f104 0602 	add.w	r6, r4, #2
   d813c:	f04f 0405 	mov.w	r4, #5
   d8140:	fbb6 f4f4 	udiv	r4, r6, r4
   d8144:	bf34      	ite	cc
   d8146:	2602      	movcc	r6, #2
   d8148:	f06f 0609 	mvncs.w	r6, #9
   d814c:	4416      	add	r6, r2
   d814e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8152:	fb02 0505 	mla	r5, r2, r5, r0
   d8156:	1c5f      	adds	r7, r3, #1
   d8158:	2e01      	cmp	r6, #1
   d815a:	bf98      	it	ls
   d815c:	3501      	addls	r5, #1
   d815e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8162:	eba7 0704 	sub.w	r7, r7, r4
   d8166:	d302      	bcc.n	d816e <gmtime_r+0xe2>
   d8168:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d816c:	e014      	b.n	d8198 <gmtime_r+0x10c>
   d816e:	0782      	lsls	r2, r0, #30
   d8170:	d105      	bne.n	d817e <gmtime_r+0xf2>
   d8172:	2464      	movs	r4, #100	; 0x64
   d8174:	fbb0 f2f4 	udiv	r2, r0, r4
   d8178:	fb04 0212 	mls	r2, r4, r2, r0
   d817c:	b94a      	cbnz	r2, d8192 <gmtime_r+0x106>
   d817e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8182:	fbb0 f4f2 	udiv	r4, r0, r2
   d8186:	fb02 0014 	mls	r0, r2, r4, r0
   d818a:	fab0 f280 	clz	r2, r0
   d818e:	0952      	lsrs	r2, r2, #5
   d8190:	e000      	b.n	d8194 <gmtime_r+0x108>
   d8192:	2201      	movs	r2, #1
   d8194:	333b      	adds	r3, #59	; 0x3b
   d8196:	441a      	add	r2, r3
   d8198:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d819c:	2300      	movs	r3, #0
   d819e:	61ca      	str	r2, [r1, #28]
   d81a0:	614d      	str	r5, [r1, #20]
   d81a2:	610e      	str	r6, [r1, #16]
   d81a4:	60cf      	str	r7, [r1, #12]
   d81a6:	620b      	str	r3, [r1, #32]
   d81a8:	4608      	mov	r0, r1
   d81aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d81ac:	00015180 	.word	0x00015180
   d81b0:	fffdc54f 	.word	0xfffdc54f
   d81b4:	00023ab1 	.word	0x00023ab1
   d81b8:	00023ab0 	.word	0x00023ab0

000d81bc <__env_lock>:
   d81bc:	4770      	bx	lr

000d81be <__env_unlock>:
   d81be:	4770      	bx	lr

000d81c0 <dynalib_user>:
   d81c0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d81d0:	0000 0000                                   ....

000d81d4 <_ZL13releaseNumber>:
   d81d4:	2e31 3232 0000 0030 3425 312e 4366 2500     1.22..0.%4.1fC.%
   d81e4:	2e34 6631 2500 2e34 6631 0056 2e25 6630     4.1f.%4.1fV.%.0f
   d81f4:	2525 2500 2e33 6631 5620 5600 7265 6f62     %%.%3.1f V.Verbo
   d8204:	6573 4d20 646f 2065 7453 7261 6574 2e64     se Mode Started.
   d8214:	5600 7265 6f62 6573 4d20 646f 2065 6c41     .Verbose Mode Al
   d8224:	6572 6461 2079 4e4f 002e 6556 6272 736f     ready ON..Verbos
   d8234:	2065 6f4d 6564 5320 6f74 7070 6465 002e     e Mode Stopped..
   d8244:	6556 6272 736f 2065 6f4d 6564 6120 726c     Verbose Mode alr
   d8254:	6165 7964 4f20 4646 002e 6573 646e 6255     eady OFF..sendUb
   d8264:	4469 746f 2073 7566 636e 6974 6e6f 6320     iDots function c
   d8274:	6c61 656c 2e64 2e2e 4500 746e 7265 6465     alled....Entered
   d8284:	5320 6e65 2064 6255 4469 746f 2073 7566      Send UbiDots fu
   d8294:	636e 6974 6e6f 4100 7269 512d 6175 696c     nction.Air-Quali
   d82a4:	7974 482d 6f6f 006b 227b 6554 706d 7265     ty-Hook.{"Temper
   d82b4:	7461 7275 2265 253a 2e33 6631 202c 4222     ature":%3.1f, "B
   d82c4:	7461 6574 7972 3a22 3325 312e 2c66 2220     attery":%3.1f, "
   d82d4:	7548 696d 6964 7974 3a22 3325 312e 7d66     Humidity":%3.1f}
   d82e4:	4e00 206f 6144 6174 5500 6962 6f64 7374     .No Data.Ubidots
   d82f4:	4820 6f6f 006b 7453 7461 0065 7254 6e61      Hook.State.Tran
   d8304:	6973 6974 6e6f 203a 7325 7420 206f 7325     sition: %s to %s
   d8314:	5200 7065 726f 6974 676e 4420 7465 7265     .Reporting Deter
   d8324:	696d 616e 6974 6e6f 4e00 7765 4820 756f     mination.New Hou
   d8334:	2d72 5220 7065 726f 6974 676e 4200 6769     r- Reporting.Big
   d8344:	4320 6168 676e 2065 202d 6152 6970 2064      Change - Rapid 
   d8354:	2026 6552 6f70 7472 6e69 0067 6843 6e61     & Reporting.Chan
   d8364:	6567 6420 7465 6365 6574 2064 202d 6552     ge detected - Re
   d8374:	6f70 7472 6e69 0067 6f4e 4320 6168 676e     porting.No Chang
   d8384:	2065 202d 6449 656c 4400 7461 2061 6553     e - Idle.Data Se
   d8394:	746e 2f20 5220 7365 6f70 736e 2065 6552     nt / Response Re
   d83a4:	6563 7669 6465 7300 6170 6b72 642f 7665     ceived.spark/dev
   d83b4:	6369 2f65 6573 7373 6f69 2f6e 6e65 0064     ice/session/end.
   d83c4:	6552 6573 7474 6e69 2067 6e69 3320 2030     Resetting in 30 
   d83d4:	6573 6f63 646e 0073 7245 6f72 0072 6f47     seconds.Error.Go
   d83e4:	6e69 2067 6f74 7420 6b61 2065 2061 6925     ing to take a %i
   d83f4:	7320 6365 6e6f 2064 616e 0070 614e 7070      second nap.Napp
   d8404:	6e69 0067 7246 6d6f 5320 656c 7065 5700     ing.From Sleep.W
   d8414:	6b6f 5565 0070 6f43 6d6d 6e61 2064 6361     okeUp.Command ac
   d8424:	6563 7470 6465 2d20 7220 7065 726f 6974     cepted - reporti
   d8434:	676e 6e20 776f 4600 6e75 7463 6f69 006e     ng now.Function.
   d8444:	6f43 6d6d 6e61 2064 6361 6563 7470 6465     Command accepted
   d8454:	2d20 7320 6e65 6973 676e 6e20 776f 7600      - sensing now.v
   d8464:	7265 6f62 6573 6f4d 6564 4700 7465 522d     erboseMode.Get-R
   d8474:	6165 6964 676e 5300 6e65 2d64 6552 6f70     eading.Send-Repo
   d8484:	7472 4c00 776f 502d 776f 7265 4d2d 646f     rt.Low-Power-Mod
   d8494:	0065 7548 696d 6964 7974 5400 6d65 6570     e.Humidity.Tempe
   d84a4:	6172 7574 6572 5200 6c65 6165 6573 5300     rature.Release.S
   d84b4:	6769 616e 006c 6142 7474 7265 0079 6f43     ignal.Battery.Co
   d84c4:	6c75 6e64 7427 6620 6e69 2064 4853 3354     uldn't find SHT3
   d84d4:	0031 0000                                   1...

000d84d8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d84e0:	5435 000d 543b 000d 5491 000d 5449 000d     5T..;T...T..IT..
   d84f0:	5437 000d                                   7T..

000d84f4 <_ZTVN5spark13EthernetClassE>:
	...
   d84fc:	5aa3 000d 5a99 000d 5a8f 000d 5a85 000d     .Z...Z...Z...Z..
   d850c:	5a79 000d 5a6d 000d 5a61 000d 5a59 000d     yZ..mZ..aZ..YZ..
   d851c:	5a4f 000d 5a45 000d 5e41 000d               OZ..EZ..A^..

000d8528 <_ZTV7TwoWire>:
	...
   d8530:	5ac1 000d 5b0b 000d 5ae3 000d 5ac3 000d     .Z...[...Z...Z..
   d8540:	5aeb 000d 5af3 000d 5afb 000d 5b03 000d     .Z...Z...Z...[..

000d8550 <_ZTV9IPAddress>:
	...
   d8558:	5b8f 000d 5b7f 000d 5b81 000d 6162 6475     .[...[...[..baud
   d8568:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d8578:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d8588:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d8598:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d85a8:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d85b8:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d85c8:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d85d8:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d85e8:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d85f8:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d8608:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d8618:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d8628:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d8638:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d8644 <_ZTVN5spark9MeshClassE>:
	...
   d864c:	5cd3 000d 5cc9 000d 5cbf 000d 5cb5 000d     .\...\...\...\..
   d865c:	5ca9 000d 5c9d 000d 5c91 000d 5c89 000d     .\...\...\...\..
   d866c:	5c7f 000d 5c75 000d 5e41 000d               .\..u\..A^..

000d8678 <_ZTVN5spark12NetworkClassE>:
	...
   d8680:	5dd9 000d 5de3 000d 5ded 000d 5df7 000d     .]...]...]...]..
   d8690:	5e01 000d 5e0d 000d 5e19 000d 5e25 000d     .^...^...^..%^..
   d86a0:	5e2d 000d 5e37 000d 5e41 000d 616e 006e     -^..7^..A^..nan.
   d86b0:	766f 0066 6e69 0066                         ovf.inf.

000d86b8 <_ZTV8SPIClass>:
	...
   d86c0:	61e5 000d 61e7 000d 2b25 3330 3a64 3025     .a...a..%+03d:%0
   d86d0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d86e0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d86f0 <_ZTV11USARTSerial>:
	...
   d86f8:	64f9 000d 6549 000d 6557 000d 5f21 000d     .d..Ie..We..!_..
   d8708:	650d 000d 652f 000d 651b 000d 6543 000d     .e../e...e..Ce..
   d8718:	64fb 000d 64ff 000d                         .d...d..

000d8720 <_ZTV9USBSerial>:
	...
   d8728:	6601 000d 6651 000d 665f 000d 5f21 000d     .f..Qf.._f..!_..
   d8738:	663d 000d 6603 000d 6619 000d 664b 000d     =f...f...f..Kf..
   d8748:	662f 000d 65fd 000d                         /f...e..

000d8750 <_ZTVN5spark9WiFiClassE>:
	...
   d8758:	676b 000d 6761 000d 6757 000d 670d 000d     kg..ag..Wg...g..
   d8768:	674b 000d 673f 000d 6733 000d 672b 000d     Kg..?g..3g..+g..
   d8778:	6721 000d 6717 000d 5e41 000d               !g...g..A^..

000d8784 <_ctype_>:
   d8784:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8794:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d87a4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d87b4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d87c4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d87d4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d87e4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d87f4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8804:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8888 <__sf_fake_stdin>:
	...

000d88a8 <__sf_fake_stdout>:
	...

000d88c8 <__sf_fake_stderr>:
	...

000d88e8 <__month_lengths>:
   d88e8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d88f8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8908:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8918:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8928:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8938:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8948:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8958:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8968:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d8978:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d8984 <link_const_variable_data_end>:
   d8984:	000d4c8d 	.word	0x000d4c8d
   d8988:	000d4cb5 	.word	0x000d4cb5
   d898c:	000d4cb9 	.word	0x000d4cb9
   d8990:	000d4e79 	.word	0x000d4e79
   d8994:	000d5425 	.word	0x000d5425
   d8998:	000d5aad 	.word	0x000d5aad
   d899c:	000d5c65 	.word	0x000d5c65
   d89a0:	000d5d89 	.word	0x000d5d89
   d89a4:	000d5f0d 	.word	0x000d5f0d
   d89a8:	000d61c9 	.word	0x000d61c9
   d89ac:	000d63d5 	.word	0x000d63d5
   d89b0:	000d64e5 	.word	0x000d64e5
   d89b4:	000d6775 	.word	0x000d6775
   d89b8:	000d693d 	.word	0x000d693d
   d89bc:	000d6995 	.word	0x000d6995
   d89c0:	000d6a59 	.word	0x000d6a59
   d89c4:	000d6add 	.word	0x000d6add
   d89c8:	000d6b61 	.word	0x000d6b61

000d89cc <link_constructors_end>:
   d89cc:	00000000 	.word	0x00000000
