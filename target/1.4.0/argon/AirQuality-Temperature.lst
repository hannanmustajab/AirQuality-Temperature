
/Users/chipmc/Documents/Maker/Particle/Projects/AirQuality-Temperature/target/1.4.0/argon/AirQuality-Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004920  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018b90  2**0
                  CONTENTS
  4 .data         00000224  2003e0ac  000d8940  0000e0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000520  2003e2d0  2003e2d0  0001e2d0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8b64  000d8b64  00018b64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8b8c  000d8b8c  00018b8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fba96  00000000  00000000  00018b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013b2e  00000000  00000000  00114626  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020f3a  00000000  00000000  00128154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028a8  00000000  00000000  0014908e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b68  00000000  00000000  0014b936  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003889c  00000000  00000000  0015049e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002fe26  00000000  00000000  00188d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104013  00000000  00000000  001b8b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000da84  00000000  00000000  002bcb74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbd7 	bl	d77e4 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbdc 	bl	d77fa <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0ac 	.word	0x2003e0ac
   d404c:	000d8940 	.word	0x000d8940
   d4050:	2003e2d0 	.word	0x2003e2d0
   d4054:	2003e2d0 	.word	0x2003e2d0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	f002 fbb9 	bl	d67d4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8934 	.word	0x000d8934
   d4084:	000d88ec 	.word	0x000d88ec

000d4088 <module_user_setup>:
   d4088:	f000 bd28 	b.w	d4adc <setup>

000d408c <module_user_loop>:
   d408c:	b508      	push	{r3, lr}
   d408e:	f000 fa5b 	bl	d4548 <loop>
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4096:	f002 bb6b 	b.w	d6770 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b943 	b.w	d5324 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b949 	b.w	d5334 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 b947 	b.w	d5334 <free>

000d40a6 <__cxa_guard_acquire>:
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d002      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40be:	e004      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c0:	6001      	str	r1, [r0, #0]
	      break;
   d40c2:	e002      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	b100      	cbz	r0, d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ca:	2000      	movs	r0, #0
   d40cc:	4770      	bx	lr

000d40ce <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40d0:	6804      	ldr	r4, [r0, #0]
   d40d2:	4668      	mov	r0, sp
   d40d4:	f002 f87b 	bl	d61ce <_ZN6StringC1EOS_>
   d40d8:	4668      	mov	r0, sp
   d40da:	47a0      	blx	r4
   d40dc:	4604      	mov	r4, r0
   d40de:	4668      	mov	r0, sp
   d40e0:	f002 f885 	bl	d61ee <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e4:	4620      	mov	r0, r4
   d40e6:	b004      	add	sp, #16
   d40e8:	bd10      	pop	{r4, pc}
	...

000d40ec <_Z12LowPowerMode6String>:
  }
  return 0;
}

bool LowPowerMode(String Command)
{
   d40ec:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ee:	4909      	ldr	r1, [pc, #36]	; (d4114 <_Z12LowPowerMode6String+0x28>)
   d40f0:	4605      	mov	r5, r0
   d40f2:	f002 f8d6 	bl	d62a2 <_ZNK6String6equalsEPKc>
  if (Command == "1")
   d40f6:	4604      	mov	r4, r0
   d40f8:	b118      	cbz	r0, d4102 <_Z12LowPowerMode6String+0x16>
  {
    lowPowerModeOn = true;                                                         // This sets the lowPowerModeOn to true 
   d40fa:	4b07      	ldr	r3, [pc, #28]	; (d4118 <_Z12LowPowerMode6String+0x2c>)
   d40fc:	2001      	movs	r0, #1
   d40fe:	7018      	strb	r0, [r3, #0]
    return 1;
   d4100:	bd38      	pop	{r3, r4, r5, pc}
   d4102:	4906      	ldr	r1, [pc, #24]	; (d411c <_Z12LowPowerMode6String+0x30>)
   d4104:	4628      	mov	r0, r5
   d4106:	f002 f8cc 	bl	d62a2 <_ZNK6String6equalsEPKc>
  }
  else if (Command == "0")
   d410a:	b110      	cbz	r0, d4112 <_Z12LowPowerMode6String+0x26>
  {
    lowPowerModeOn = false;
   d410c:	4b02      	ldr	r3, [pc, #8]	; (d4118 <_Z12LowPowerMode6String+0x2c>)
    return 1;
   d410e:	2001      	movs	r0, #1
    lowPowerModeOn = true;                                                         // This sets the lowPowerModeOn to true 
    return 1;
  }
  else if (Command == "0")
  {
    lowPowerModeOn = false;
   d4110:	701c      	strb	r4, [r3, #0]
    return 1;
  }
  else return 0;
   d4112:	bd38      	pop	{r3, r4, r5, pc}
   d4114:	000d843d 	.word	0x000d843d
   d4118:	2003e214 	.word	0x2003e214
   d411c:	000d8186 	.word	0x000d8186

000d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4120:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4122:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4126:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4128:	f88d 3000 	strb.w	r3, [sp]
   d412c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d412e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4130:	f001 fadc 	bl	d56ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4134:	4628      	mov	r0, r5
   d4136:	b003      	add	sp, #12
   d4138:	bd30      	pop	{r4, r5, pc}
   d413a:	0000      	movs	r0, r0
   d413c:	0000      	movs	r0, r0
	...

000d4140 <_Z16takeMeasurementsv>:
    } break; 
  }
}


bool takeMeasurements() {
   d4140:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // Mocked up here for the call - need to replace with your real readings
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
   d4142:	f002 f989 	bl	d6458 <_ZN9TimeClass3nowEv>
   d4146:	4b3a      	ldr	r3, [pc, #232]	; (d4230 <_Z16takeMeasurementsv+0xf0>)
   d4148:	6018      	str	r0, [r3, #0]
  int currentMinutes = Time.minute();                                // So we only have to check once
   d414a:	f002 f997 	bl	d647c <_ZN9TimeClass6minuteEv>
  switch (currentMinutes) {
   d414e:	280f      	cmp	r0, #15
   d4150:	d00a      	beq.n	d4168 <_Z16takeMeasurementsv+0x28>
   d4152:	dd07      	ble.n	d4164 <_Z16takeMeasurementsv+0x24>
   d4154:	281e      	cmp	r0, #30
   d4156:	d003      	beq.n	d4160 <_Z16takeMeasurementsv+0x20>
   d4158:	282d      	cmp	r0, #45	; 0x2d
   d415a:	d103      	bne.n	d4164 <_Z16takeMeasurementsv+0x24>
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
      break; 
    case 45:
      reportCycle = 2;                                                // This is the third of the sample-only periods
   d415c:	2502      	movs	r5, #2
      break; 
   d415e:	e004      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
   d4160:	2501      	movs	r5, #1
   d4162:	e002      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
      break; 
    case 0:
      reportCycle = 3;                                                // This is the fourth of the sample-only periods
      break; 
    default:
      reportCycle = 3;  
   d4164:	2503      	movs	r5, #3
      break;                                                          // just in case
   d4166:	e000      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
  int currentMinutes = Time.minute();                                // So we only have to check once
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
   d4168:	2500      	movs	r5, #0
      reportCycle = 3;  
      break;                                                          // just in case
  }
  
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d416a:	4c32      	ldr	r4, [pc, #200]	; (d4234 <_Z16takeMeasurementsv+0xf4>)

  // Temperature Measurements here
  sensor_data.temperatureInC = sht31.readTemperature();               // **** Have to use the SHT31 function to get this reading
   d416c:	4832      	ldr	r0, [pc, #200]	; (d4238 <_Z16takeMeasurementsv+0xf8>)
      reportCycle = 3;  
      break;                                                          // just in case
  }
  
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d416e:	2300      	movs	r3, #0
   d4170:	7023      	strb	r3, [r4, #0]

  // Temperature Measurements here
  sensor_data.temperatureInC = sht31.readTemperature();               // **** Have to use the SHT31 function to get this reading
   d4172:	f000 fe49 	bl	d4e08 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4176:	ed84 0a03 	vstr	s0, [r4, #12]
  Serial.println(temperatureInC);
   d417a:	f002 fa77 	bl	d666c <_Z16_fetch_usbserialv>
   d417e:	4b2f      	ldr	r3, [pc, #188]	; (d423c <_Z16takeMeasurementsv+0xfc>)
   d4180:	4606      	mov	r6, r0
   d4182:	6818      	ldr	r0, [r3, #0]
   d4184:	f002 fe88 	bl	d6e98 <__aeabi_f2d>
   d4188:	ec41 0b10 	vmov	d0, r0, r1
   d418c:	2102      	movs	r1, #2
   d418e:	4630      	mov	r0, r6
   d4190:	f001 ffde 	bl	d6150 <_ZN5Print7printlnEdi>
  Serial.println("TEMPERATURE IN C");
   d4194:	f002 fa6a 	bl	d666c <_Z16_fetch_usbserialv>
   d4198:	4929      	ldr	r1, [pc, #164]	; (d4240 <_Z16takeMeasurementsv+0x100>)
   d419a:	f001 fecc 	bl	d5f36 <_ZN5Print7printlnEPKc>

  snprintf(temperatureString,sizeof(temperatureString), "%4.1fC", sensor_data.temperatureInC);  // *** C not %
   d419e:	68e0      	ldr	r0, [r4, #12]
   d41a0:	f002 fe7a 	bl	d6e98 <__aeabi_f2d>
   d41a4:	4a27      	ldr	r2, [pc, #156]	; (d4244 <_Z16takeMeasurementsv+0x104>)
   d41a6:	e9cd 0100 	strd	r0, r1, [sp]
   d41aa:	2110      	movs	r1, #16
   d41ac:	4826      	ldr	r0, [pc, #152]	; (d4248 <_Z16takeMeasurementsv+0x108>)
   d41ae:	f001 f8d9 	bl	d5364 <snprintf>

  //******  Need to add the humidity sensing here.
  
  Serial.println(sensor_data.temperatureInC);
   d41b2:	f002 fa5b 	bl	d666c <_Z16_fetch_usbserialv>
   d41b6:	4606      	mov	r6, r0
   d41b8:	68e0      	ldr	r0, [r4, #12]
   d41ba:	f002 fe6d 	bl	d6e98 <__aeabi_f2d>
   d41be:	ec41 0b10 	vmov	d0, r0, r1
   d41c2:	2102      	movs	r1, #2
   d41c4:	4630      	mov	r0, r6
   d41c6:	f001 ffc3 	bl	d6150 <_ZN5Print7printlnEdi>
  Serial.println("Temperature from takeMeasurements Function");
   d41ca:	f002 fa4f 	bl	d666c <_Z16_fetch_usbserialv>
   d41ce:	491f      	ldr	r1, [pc, #124]	; (d424c <_Z16takeMeasurementsv+0x10c>)
   d41d0:	f001 feb1 	bl	d5f36 <_ZN5Print7printlnEPKc>


  // Get battery voltage level
  sensor_data.batteryVoltage = analogRead(BATT) * 0.0011224;                   // Voltage level of battery
   d41d4:	2021      	movs	r0, #33	; 0x21
   d41d6:	f002 fb3b 	bl	d6850 <analogRead>
   d41da:	f002 fe4b 	bl	d6e74 <__aeabi_i2d>
   d41de:	a312      	add	r3, pc, #72	; (adr r3, d4228 <_Z16takeMeasurementsv+0xe8>)
   d41e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41e4:	f002 feac 	bl	d6f40 <__aeabi_dmul>
   d41e8:	f003 f9a2 	bl	d7530 <__aeabi_d2f>
   d41ec:	60a0      	str	r0, [r4, #8]
  snprintf(batteryString, sizeof(batteryString), "%4.1fV", sensor_data.batteryVoltage);  // *** Volts not percent
   d41ee:	f002 fe53 	bl	d6e98 <__aeabi_f2d>
  
  // Indicate that this is a valid data array and store it
  sensor_data.validData = true;
   d41f2:	2601      	movs	r6, #1
  Serial.println("Temperature from takeMeasurements Function");


  // Get battery voltage level
  sensor_data.batteryVoltage = analogRead(BATT) * 0.0011224;                   // Voltage level of battery
  snprintf(batteryString, sizeof(batteryString), "%4.1fV", sensor_data.batteryVoltage);  // *** Volts not percent
   d41f4:	e9cd 0100 	strd	r0, r1, [sp]
   d41f8:	4a15      	ldr	r2, [pc, #84]	; (d4250 <_Z16takeMeasurementsv+0x110>)
   d41fa:	4816      	ldr	r0, [pc, #88]	; (d4254 <_Z16takeMeasurementsv+0x114>)
   d41fc:	2110      	movs	r1, #16
   d41fe:	f001 f8b1 	bl	d5364 <snprintf>
  
  // Indicate that this is a valid data array and store it
  sensor_data.validData = true;
   d4202:	7026      	strb	r6, [r4, #0]
  sensor_data.timeStamp = Time.now();
   d4204:	f002 f928 	bl	d6458 <_ZN9TimeClass3nowEv>
   d4208:	6060      	str	r0, [r4, #4]
  EEPROM.put(7 + 100*reportCycle,sensor_data);                              // Current object is 72 bytes long - leaving some room for expansion
   d420a:	f002 fb39 	bl	d6880 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d420e:	2064      	movs	r0, #100	; 0x64
   d4210:	4368      	muls	r0, r5
   d4212:	2214      	movs	r2, #20
   d4214:	4621      	mov	r1, r4
   d4216:	3007      	adds	r0, #7
   d4218:	f000 fe6e 	bl	d4ef8 <HAL_EEPROM_Put>

  return 1;                                                             // Done, measurements take and the data array is stored as an obeect in EEPROM                                         
}
   d421c:	4630      	mov	r0, r6
   d421e:	b002      	add	sp, #8
   d4220:	bd70      	pop	{r4, r5, r6, pc}
   d4222:	bf00      	nop
   d4224:	f3af 8000 	nop.w
   d4228:	d2c10294 	.word	0xd2c10294
   d422c:	3f5263af 	.word	0x3f5263af
   d4230:	2003e2d4 	.word	0x2003e2d4
   d4234:	2003e2f0 	.word	0x2003e2f0
   d4238:	2003e340 	.word	0x2003e340
   d423c:	2003e318 	.word	0x2003e318
   d4240:	000d8188 	.word	0x000d8188
   d4244:	000d8199 	.word	0x000d8199
   d4248:	2003e2d8 	.word	0x2003e2d8
   d424c:	000d81a0 	.word	0x000d81a0
   d4250:	000d81cb 	.word	0x000d81cb
   d4254:	2003e350 	.word	0x2003e350

000d4258 <_Z20PublishDelayFunctionv>:


// Function to create a delay in the publish time
bool PublishDelayFunction() {
   d4258:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
   d425a:	4c07      	ldr	r4, [pc, #28]	; (d4278 <_Z20PublishDelayFunctionv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d425c:	f000 fe1c 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
   d4260:	6823      	ldr	r3, [r4, #0]
   d4262:	1ac0      	subs	r0, r0, r3
   d4264:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4268:	d904      	bls.n	d4274 <_Z20PublishDelayFunctionv+0x1c>
   d426a:	f000 fe15 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else {
    tstamp = millis();
   d426e:	6020      	str	r0, [r4, #0]
   d4270:	2001      	movs	r0, #1
   d4272:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
    return 0;
   d4274:	2000      	movs	r0, #0
  else {
    tstamp = millis();
    return 1;
  }
}
   d4276:	bd10      	pop	{r4, pc}
   d4278:	2003e308 	.word	0x2003e308

000d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d427c:	b508      	push	{r3, lr}

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
  if (Command == "1") {
    state = MEASURING_STATE;                                                      // Set the state to reporting
    waitUntil(PublishDelayFunction);  
   d427e:	f7ff ffeb 	bl	d4258 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4282:	b118      	cbz	r0, d428c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4288:	f7ff bfe6 	b.w	d4258 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d428c:	f000 ffb2 	bl	d51f4 <spark_process>
   d4290:	e7f5      	b.n	d427e <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66+0x2>

000d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4292:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4294:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4296:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4298:	b17c      	cbz	r4, d42ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d429a:	6863      	ldr	r3, [r4, #4]
   d429c:	3b01      	subs	r3, #1
   d429e:	6063      	str	r3, [r4, #4]
   d42a0:	b95b      	cbnz	r3, d42ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42a2:	6823      	ldr	r3, [r4, #0]
   d42a4:	4620      	mov	r0, r4
   d42a6:	689b      	ldr	r3, [r3, #8]
   d42a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42aa:	68a3      	ldr	r3, [r4, #8]
   d42ac:	3b01      	subs	r3, #1
   d42ae:	60a3      	str	r3, [r4, #8]
   d42b0:	b91b      	cbnz	r3, d42ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42b2:	6823      	ldr	r3, [r4, #0]
   d42b4:	4620      	mov	r0, r4
   d42b6:	68db      	ldr	r3, [r3, #12]
   d42b8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42ba:	4628      	mov	r0, r5
   d42bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d42c0 <_Z14SetVerboseMode6String>:
{
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}

bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
   d42c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d42c2:	4929      	ldr	r1, [pc, #164]	; (d4368 <_Z14SetVerboseMode6String+0xa8>)
   d42c4:	4605      	mov	r5, r0
   d42c6:	f001 ffec 	bl	d62a2 <_ZNK6String6equalsEPKc>
  if (command == "1" && verboseMode == false)
   d42ca:	b110      	cbz	r0, d42d2 <_Z14SetVerboseMode6String+0x12>
   d42cc:	4b27      	ldr	r3, [pc, #156]	; (d436c <_Z14SetVerboseMode6String+0xac>)
   d42ce:	781e      	ldrb	r6, [r3, #0]
   d42d0:	b186      	cbz	r6, d42f4 <_Z14SetVerboseMode6String+0x34>
   d42d2:	4925      	ldr	r1, [pc, #148]	; (d4368 <_Z14SetVerboseMode6String+0xa8>)
   d42d4:	4628      	mov	r0, r5
   d42d6:	f001 ffe4 	bl	d62a2 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
    return 1;
  }

  if (command == "1" && verboseMode == true)
   d42da:	b1a8      	cbz	r0, d4308 <_Z14SetVerboseMode6String+0x48>
   d42dc:	4b23      	ldr	r3, [pc, #140]	; (d436c <_Z14SetVerboseMode6String+0xac>)
   d42de:	781b      	ldrb	r3, [r3, #0]
   d42e0:	b193      	cbz	r3, d4308 <_Z14SetVerboseMode6String+0x48>
  {
    waitUntil(PublishDelayFunction);
   d42e2:	f7ff ffcb 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d42e6:	4b22      	ldr	r3, [pc, #136]	; (d4370 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
   d42e8:	4a22      	ldr	r2, [pc, #136]	; (d4374 <_Z14SetVerboseMode6String+0xb4>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d42ea:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d42ec:	2400      	movs	r4, #0
   d42ee:	f88d 4000 	strb.w	r4, [sp]
   d42f2:	e02e      	b.n	d4352 <_Z14SetVerboseMode6String+0x92>
}

bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
  if (command == "1" && verboseMode == false)
  {
    verboseMode = true;
   d42f4:	2401      	movs	r4, #1
   d42f6:	701c      	strb	r4, [r3, #0]
    waitUntil(PublishDelayFunction);
   d42f8:	f7ff ffc0 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d42fc:	4b1c      	ldr	r3, [pc, #112]	; (d4370 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
   d42fe:	4a1e      	ldr	r2, [pc, #120]	; (d4378 <_Z14SetVerboseMode6String+0xb8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4300:	781b      	ldrb	r3, [r3, #0]
   d4302:	f88d 6000 	strb.w	r6, [sp]
   d4306:	e024      	b.n	d4352 <_Z14SetVerboseMode6String+0x92>
   d4308:	491c      	ldr	r1, [pc, #112]	; (d437c <_Z14SetVerboseMode6String+0xbc>)
   d430a:	4628      	mov	r0, r5
   d430c:	f001 ffc9 	bl	d62a2 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
    return 0;
  }

  if (command == "0" && verboseMode == true)
   d4310:	b160      	cbz	r0, d432c <_Z14SetVerboseMode6String+0x6c>
   d4312:	4b16      	ldr	r3, [pc, #88]	; (d436c <_Z14SetVerboseMode6String+0xac>)
   d4314:	781c      	ldrb	r4, [r3, #0]
   d4316:	b14c      	cbz	r4, d432c <_Z14SetVerboseMode6String+0x6c>
  {
    verboseMode = false;
   d4318:	2500      	movs	r5, #0
   d431a:	701d      	strb	r5, [r3, #0]
    waitUntil(PublishDelayFunction);
   d431c:	f7ff ffae 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d4320:	4b13      	ldr	r3, [pc, #76]	; (d4370 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Stopped.", PRIVATE);
   d4322:	4a17      	ldr	r2, [pc, #92]	; (d4380 <_Z14SetVerboseMode6String+0xc0>)
   d4324:	781b      	ldrb	r3, [r3, #0]
   d4326:	f88d 5000 	strb.w	r5, [sp]
   d432a:	e012      	b.n	d4352 <_Z14SetVerboseMode6String+0x92>
   d432c:	4913      	ldr	r1, [pc, #76]	; (d437c <_Z14SetVerboseMode6String+0xbc>)
   d432e:	4628      	mov	r0, r5
   d4330:	f001 ffb7 	bl	d62a2 <_ZNK6String6equalsEPKc>
    return 1;
  }

  if (command == "0" && verboseMode == false)
   d4334:	b120      	cbz	r0, d4340 <_Z14SetVerboseMode6String+0x80>
   d4336:	4b0d      	ldr	r3, [pc, #52]	; (d436c <_Z14SetVerboseMode6String+0xac>)
   d4338:	781c      	ldrb	r4, [r3, #0]
   d433a:	b11c      	cbz	r4, d4344 <_Z14SetVerboseMode6String+0x84>
  {
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
    return 0;
  }
  else return 0;
   d433c:	2400      	movs	r4, #0
   d433e:	e00f      	b.n	d4360 <_Z14SetVerboseMode6String+0xa0>
   d4340:	4604      	mov	r4, r0
   d4342:	e00d      	b.n	d4360 <_Z14SetVerboseMode6String+0xa0>
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d4344:	f7ff ff9a 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d4348:	4b09      	ldr	r3, [pc, #36]	; (d4370 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
   d434a:	4a0e      	ldr	r2, [pc, #56]	; (d4384 <_Z14SetVerboseMode6String+0xc4>)
   d434c:	781b      	ldrb	r3, [r3, #0]
   d434e:	f88d 4000 	strb.w	r4, [sp]
   d4352:	a802      	add	r0, sp, #8
   d4354:	490c      	ldr	r1, [pc, #48]	; (d4388 <_Z14SetVerboseMode6String+0xc8>)
   d4356:	f7ff fee3 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d435a:	a803      	add	r0, sp, #12
   d435c:	f7ff ff99 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 0;
  }
  else return 0;
}
   d4360:	4620      	mov	r0, r4
   d4362:	b004      	add	sp, #16
   d4364:	bd70      	pop	{r4, r5, r6, pc}
   d4366:	bf00      	nop
   d4368:	000d843d 	.word	0x000d843d
   d436c:	2003e33d 	.word	0x2003e33d
   d4370:	2003e320 	.word	0x2003e320
   d4374:	000d81f7 	.word	0x000d81f7
   d4378:	000d81e1 	.word	0x000d81e1
   d437c:	000d8186 	.word	0x000d8186
   d4380:	000d8210 	.word	0x000d8210
   d4384:	000d8226 	.word	0x000d8226
   d4388:	000d840f 	.word	0x000d840f

000d438c <_Z11sendUBIDotsv>:

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
   d438c:	b570      	push	{r4, r5, r6, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d438e:	4d23      	ldr	r5, [pc, #140]	; (d441c <_Z11sendUBIDotsv+0x90>)
   d4390:	4e23      	ldr	r6, [pc, #140]	; (d4420 <_Z11sendUBIDotsv+0x94>)
   d4392:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
   d4396:	2407      	movs	r4, #7
  char data[512];

  for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(7 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4398:	f002 fa72 	bl	d6880 <_Z21__fetch_global_EEPROMv>
   d439c:	2214      	movs	r2, #20
   d439e:	4620      	mov	r0, r4
   d43a0:	491e      	ldr	r1, [pc, #120]	; (d441c <_Z11sendUBIDotsv+0x90>)
   d43a2:	f000 fda1 	bl	d4ee8 <HAL_EEPROM_Get>
    snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", sensor_data.temperatureInC, sensor_data.batteryVoltage);
   d43a6:	68a8      	ldr	r0, [r5, #8]
   d43a8:	f002 fd76 	bl	d6e98 <__aeabi_f2d>
   d43ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d43b0:	68e8      	ldr	r0, [r5, #12]
   d43b2:	f002 fd71 	bl	d6e98 <__aeabi_f2d>
   d43b6:	4a1b      	ldr	r2, [pc, #108]	; (d4424 <_Z11sendUBIDotsv+0x98>)
   d43b8:	e9cd 0100 	strd	r0, r1, [sp]
   d43bc:	f44f 7100 	mov.w	r1, #512	; 0x200
   d43c0:	a806      	add	r0, sp, #24
   d43c2:	f000 ffcf 	bl	d5364 <snprintf>
    Particle.publish("Air-Quality-Hook", data, PRIVATE);
   d43c6:	2200      	movs	r2, #0
   d43c8:	7833      	ldrb	r3, [r6, #0]
   d43ca:	4917      	ldr	r1, [pc, #92]	; (d4428 <_Z11sendUBIDotsv+0x9c>)
   d43cc:	f88d 2000 	strb.w	r2, [sp]
   d43d0:	a804      	add	r0, sp, #16
   d43d2:	aa06      	add	r2, sp, #24
   d43d4:	f7ff fea4 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d43d8:	a805      	add	r0, sp, #20
   d43da:	f7ff ff5a 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43de:	3464      	adds	r4, #100	; 0x64
    waitUntil(PublishDelayFunction);                                  // Space out the sends
   d43e0:	f7ff ff4c 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
  char data[512];

  for (int i = 0; i < 4; i++) {
   d43e4:	f240 1397 	movw	r3, #407	; 0x197
   d43e8:	429c      	cmp	r4, r3
   d43ea:	d1d5      	bne.n	d4398 <_Z11sendUBIDotsv+0xc>
    sensor_data = EEPROM.get(7 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
    snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", sensor_data.temperatureInC, sensor_data.batteryVoltage);
    Particle.publish("Air-Quality-Hook", data, PRIVATE);
    waitUntil(PublishDelayFunction);                                  // Space out the sends
  }
  currentCountTime = Time.now();
   d43ec:	f002 f834 	bl	d6458 <_ZN9TimeClass3nowEv>
   d43f0:	4c0e      	ldr	r4, [pc, #56]	; (d442c <_Z11sendUBIDotsv+0xa0>)
   d43f2:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d43f4:	f002 fa44 	bl	d6880 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d43f8:	7821      	ldrb	r1, [r4, #0]
   d43fa:	2003      	movs	r0, #3
   d43fc:	f000 fd6c 	bl	d4ed8 <HAL_EEPROM_Write>
   d4400:	f000 fd4a 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4404:	4b0a      	ldr	r3, [pc, #40]	; (d4430 <_Z11sendUBIDotsv+0xa4>)
   d4406:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d4408:	f002 f82e 	bl	d6468 <_ZN9TimeClass4hourEv>
   d440c:	4b09      	ldr	r3, [pc, #36]	; (d4434 <_Z11sendUBIDotsv+0xa8>)
   d440e:	6018      	str	r0, [r3, #0]
  inTransit = true;
   d4410:	4b09      	ldr	r3, [pc, #36]	; (d4438 <_Z11sendUBIDotsv+0xac>)
   d4412:	2201      	movs	r2, #1
   d4414:	701a      	strb	r2, [r3, #0]
}
   d4416:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
   d441a:	bd70      	pop	{r4, r5, r6, pc}
   d441c:	2003e2f0 	.word	0x2003e2f0
   d4420:	2003e320 	.word	0x2003e320
   d4424:	000d8240 	.word	0x000d8240
   d4428:	000d8267 	.word	0x000d8267
   d442c:	2003e2d4 	.word	0x2003e2d4
   d4430:	2003e34c 	.word	0x2003e34c
   d4434:	2003e30c 	.word	0x2003e30c
   d4438:	2003e304 	.word	0x2003e304

000d443c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                          // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d443c:	b530      	push	{r4, r5, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d443e:	460c      	mov	r4, r1
  currentHourlyPeriod = Time.hour();
  inTransit = true;
}

void UbidotsHandler(const char *event, const char *data)                          // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d4440:	b085      	sub	sp, #20
   d4442:	4d21      	ldr	r5, [pc, #132]	; (d44c8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d4444:	b951      	cbnz	r1, d445c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
   d4446:	782b      	ldrb	r3, [r5, #0]
   d4448:	2b00      	cmp	r3, #0
   d444a:	d03a      	beq.n	d44c2 <_Z14UbidotsHandlerPKcS0_+0x86>
      waitUntil(PublishDelayFunction);
   d444c:	f7ff ff16 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d4450:	4b1e      	ldr	r3, [pc, #120]	; (d44cc <_Z14UbidotsHandlerPKcS0_+0x90>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4452:	4a1f      	ldr	r2, [pc, #124]	; (d44d0 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4454:	781b      	ldrb	r3, [r3, #0]
   d4456:	f88d 4000 	strb.w	r4, [sp]
   d445a:	e02b      	b.n	d44b4 <_Z14UbidotsHandlerPKcS0_+0x78>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d445c:	4608      	mov	r0, r1
   d445e:	f003 f8b7 	bl	d75d0 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4462:	38c8      	subs	r0, #200	; 0xc8
   d4464:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
   d4466:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d4468:	d81b      	bhi.n	d44a2 <_Z14UbidotsHandlerPKcS0_+0x66>
  {
    if (verboseMode) {
   d446a:	b173      	cbz	r3, d448a <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(PublishDelayFunction);
   d446c:	f7ff ff06 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d4470:	4b16      	ldr	r3, [pc, #88]	; (d44cc <_Z14UbidotsHandlerPKcS0_+0x90>)
      Particle.publish("State", "Response Received", PRIVATE);
   d4472:	4918      	ldr	r1, [pc, #96]	; (d44d4 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4474:	781b      	ldrb	r3, [r3, #0]
   d4476:	2200      	movs	r2, #0
   d4478:	f88d 2000 	strb.w	r2, [sp]
   d447c:	a802      	add	r0, sp, #8
   d447e:	4a16      	ldr	r2, [pc, #88]	; (d44d8 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d4480:	f7ff fe4e 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4484:	a803      	add	r0, sp, #12
   d4486:	f7ff ff04 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    }
    inTransit = false;    
   d448a:	4b14      	ldr	r3, [pc, #80]	; (d44dc <_Z14UbidotsHandlerPKcS0_+0xa0>)
   d448c:	2200      	movs	r2, #0
   d448e:	701a      	strb	r2, [r3, #0]
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
   d4490:	f002 f9f6 	bl	d6880 <_Z21__fetch_global_EEPROMv>
   d4494:	f001 ffe0 	bl	d6458 <_ZN9TimeClass3nowEv>
   d4498:	b2c1      	uxtb	r1, r0
   d449a:	2003      	movs	r0, #3
   d449c:	f000 fd1c 	bl	d4ed8 <HAL_EEPROM_Write>
   d44a0:	e00f      	b.n	d44c2 <_Z14UbidotsHandlerPKcS0_+0x86>
  }
  else if (verboseMode) {
   d44a2:	b173      	cbz	r3, d44c2 <_Z14UbidotsHandlerPKcS0_+0x86>
    waitUntil(PublishDelayFunction);      
   d44a4:	f7ff feea 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d44a8:	4b08      	ldr	r3, [pc, #32]	; (d44cc <_Z14UbidotsHandlerPKcS0_+0x90>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d44aa:	2200      	movs	r2, #0
   d44ac:	781b      	ldrb	r3, [r3, #0]
   d44ae:	f88d 2000 	strb.w	r2, [sp]
   d44b2:	4622      	mov	r2, r4
   d44b4:	a802      	add	r0, sp, #8
   d44b6:	490a      	ldr	r1, [pc, #40]	; (d44e0 <_Z14UbidotsHandlerPKcS0_+0xa4>)
   d44b8:	f7ff fe32 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d44bc:	a803      	add	r0, sp, #12
   d44be:	f7ff fee8 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d44c2:	b005      	add	sp, #20
   d44c4:	bd30      	pop	{r4, r5, pc}
   d44c6:	bf00      	nop
   d44c8:	2003e33d 	.word	0x2003e33d
   d44cc:	2003e320 	.word	0x2003e320
   d44d0:	000d8278 	.word	0x000d8278
   d44d4:	000d828d 	.word	0x000d828d
   d44d8:	000d8320 	.word	0x000d8320
   d44dc:	2003e304 	.word	0x2003e304
   d44e0:	000d8280 	.word	0x000d8280

000d44e4 <_Z15transitionStatev>:

void transitionState(void) {                                                      // This function publishes change of state.
   d44e4:	b530      	push	{r4, r5, lr}
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d44e6:	4d12      	ldr	r5, [pc, #72]	; (d4530 <_Z15transitionStatev+0x4c>)
   d44e8:	4c12      	ldr	r4, [pc, #72]	; (d4534 <_Z15transitionStatev+0x50>)
    waitUntil(PublishDelayFunction);      
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }
}

void transitionState(void) {                                                      // This function publishes change of state.
   d44ea:	b095      	sub	sp, #84	; 0x54
  waitUntil(PublishDelayFunction);
   d44ec:	f7ff fec6 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d44f0:	4911      	ldr	r1, [pc, #68]	; (d4538 <_Z15transitionStatev+0x54>)
   d44f2:	782a      	ldrb	r2, [r5, #0]
   d44f4:	7820      	ldrb	r0, [r4, #0]
   d44f6:	232c      	movs	r3, #44	; 0x2c
   d44f8:	fb03 1202 	mla	r2, r3, r2, r1
   d44fc:	9200      	str	r2, [sp, #0]
   d44fe:	fb03 1300 	mla	r3, r3, r0, r1
   d4502:	4a0e      	ldr	r2, [pc, #56]	; (d453c <_Z15transitionStatev+0x58>)
   d4504:	2140      	movs	r1, #64	; 0x40
   d4506:	a804      	add	r0, sp, #16
   d4508:	f000 ff2c 	bl	d5364 <snprintf>
  oldState = state;
   d450c:	782b      	ldrb	r3, [r5, #0]
   d450e:	7023      	strb	r3, [r4, #0]
   d4510:	4b0b      	ldr	r3, [pc, #44]	; (d4540 <_Z15transitionStatev+0x5c>)
  Particle.publish("State", stateTransitionString, PRIVATE);
   d4512:	490c      	ldr	r1, [pc, #48]	; (d4544 <_Z15transitionStatev+0x60>)
   d4514:	781b      	ldrb	r3, [r3, #0]
   d4516:	2200      	movs	r2, #0
   d4518:	f88d 2000 	strb.w	r2, [sp]
   d451c:	a802      	add	r0, sp, #8
   d451e:	aa04      	add	r2, sp, #16
   d4520:	f7ff fdfe 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4524:	a803      	add	r0, sp, #12
   d4526:	f7ff feb4 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d452a:	b015      	add	sp, #84	; 0x54
   d452c:	bd30      	pop	{r4, r5, pc}
   d452e:	bf00      	nop
   d4530:	2003e310 	.word	0x2003e310
   d4534:	2003e33c 	.word	0x2003e33c
   d4538:	2003e0b4 	.word	0x2003e0b4
   d453c:	000d8293 	.word	0x000d8293
   d4540:	2003e320 	.word	0x2003e320
   d4544:	000d828d 	.word	0x000d828d

000d4548 <loop>:
  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}

void loop()
{  
   d4548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (state)  {                                                               // In the main loop, all code execution must take place in a defined state
   d454c:	4ca6      	ldr	r4, [pc, #664]	; (d47e8 <loop+0x2a0>)
   d454e:	7823      	ldrb	r3, [r4, #0]
   d4550:	3b01      	subs	r3, #1
  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}

void loop()
{  
   d4552:	b098      	sub	sp, #96	; 0x60
  switch (state)  {                                                               // In the main loop, all code execution must take place in a defined state
   d4554:	2b06      	cmp	r3, #6
   d4556:	f200 8208 	bhi.w	d496a <loop+0x422>
   d455a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d455e:	0007      	.short	0x0007
   d4560:	006e0033 	.word	0x006e0033
   d4564:	004500ff 	.word	0x004500ff
   d4568:	01a3017b 	.word	0x01a3017b
    case IDLE_STATE:                                                              // IDLE State.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d456c:	4b9f      	ldr	r3, [pc, #636]	; (d47ec <loop+0x2a4>)
   d456e:	781b      	ldrb	r3, [r3, #0]
   d4570:	b12b      	cbz	r3, d457e <loop+0x36>
   d4572:	4b9f      	ldr	r3, [pc, #636]	; (d47f0 <loop+0x2a8>)
   d4574:	781b      	ldrb	r3, [r3, #0]
   d4576:	2b01      	cmp	r3, #1
   d4578:	d001      	beq.n	d457e <loop+0x36>
   d457a:	f7ff ffb3 	bl	d44e4 <_Z15transitionStatev>
      static int TimePassed = 0;
      
      if (lowPowerModeOn && (millis() - stayAWakeTimeStamp >= stayAwake)) state = NAPPING_STATE;    // If lowPowerMode is turned on, It will move to the napping state. 
   d457e:	4b9d      	ldr	r3, [pc, #628]	; (d47f4 <loop+0x2ac>)
   d4580:	781b      	ldrb	r3, [r3, #0]
   d4582:	b14b      	cbz	r3, d4598 <loop+0x50>
   d4584:	f000 fc88 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
   d4588:	4b9b      	ldr	r3, [pc, #620]	; (d47f8 <loop+0x2b0>)
   d458a:	681b      	ldr	r3, [r3, #0]
   d458c:	1ac0      	subs	r0, r0, r3
   d458e:	4b9b      	ldr	r3, [pc, #620]	; (d47fc <loop+0x2b4>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	4298      	cmp	r0, r3
   d4594:	f080 81e1 	bcs.w	d495a <loop+0x412>
                                     
      if ((Time.minute() - TimePassed >= sampleRate/60) || Time.hour() != currentHourlyPeriod ) {     // Sample time or the top of the hour
   d4598:	f001 ff70 	bl	d647c <_ZN9TimeClass6minuteEv>
   d459c:	4b98      	ldr	r3, [pc, #608]	; (d4800 <loop+0x2b8>)
   d459e:	681a      	ldr	r2, [r3, #0]
   d45a0:	1a80      	subs	r0, r0, r2
   d45a2:	4a98      	ldr	r2, [pc, #608]	; (d4804 <loop+0x2bc>)
   d45a4:	213c      	movs	r1, #60	; 0x3c
   d45a6:	6812      	ldr	r2, [r2, #0]
   d45a8:	fb92 f2f1 	sdiv	r2, r2, r1
   d45ac:	4290      	cmp	r0, r2
   d45ae:	461d      	mov	r5, r3
   d45b0:	f280 81d6 	bge.w	d4960 <loop+0x418>
   d45b4:	f001 ff58 	bl	d6468 <_ZN9TimeClass4hourEv>
   d45b8:	4b93      	ldr	r3, [pc, #588]	; (d4808 <loop+0x2c0>)
   d45ba:	681b      	ldr	r3, [r3, #0]
   d45bc:	4298      	cmp	r0, r3
   d45be:	f040 81cf 	bne.w	d4960 <loop+0x418>
   d45c2:	e1d2      	b.n	d496a <loop+0x422>
          TimePassed = Time.minute();
      }
    } break;

    case MEASURING_STATE:                                                         // Measuring State.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d45c4:	4b89      	ldr	r3, [pc, #548]	; (d47ec <loop+0x2a4>)
   d45c6:	781b      	ldrb	r3, [r3, #0]
   d45c8:	b12b      	cbz	r3, d45d6 <loop+0x8e>
   d45ca:	4b89      	ldr	r3, [pc, #548]	; (d47f0 <loop+0x2a8>)
   d45cc:	781b      	ldrb	r3, [r3, #0]
   d45ce:	2b02      	cmp	r3, #2
   d45d0:	d001      	beq.n	d45d6 <loop+0x8e>
   d45d2:	f7ff ff87 	bl	d44e4 <_Z15transitionStatev>
      currentHourlyPeriod = Time.hour();
   d45d6:	f001 ff47 	bl	d6468 <_ZN9TimeClass4hourEv>
   d45da:	4b8b      	ldr	r3, [pc, #556]	; (d4808 <loop+0x2c0>)
   d45dc:	6018      	str	r0, [r3, #0]
      if(takeMeasurements()) state = REPORTING_DETERMINATION;                     // Get the measurements and move to reporting determination
   d45de:	f7ff fdaf 	bl	d4140 <_Z16takeMeasurementsv>
   d45e2:	b318      	cbz	r0, d462c <loop+0xe4>
   d45e4:	2303      	movs	r3, #3
   d45e6:	e026      	b.n	d4636 <loop+0xee>
      sendUBIDots();
      state = RESPONSE_WAIT;
      break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d45e8:	4b80      	ldr	r3, [pc, #512]	; (d47ec <loop+0x2a4>)
   d45ea:	781a      	ldrb	r2, [r3, #0]
   d45ec:	461d      	mov	r5, r3
   d45ee:	2a00      	cmp	r2, #0
   d45f0:	f040 80dd 	bne.w	d47ae <loop+0x266>

      if (!inTransit) {
   d45f4:	4b85      	ldr	r3, [pc, #532]	; (d480c <loop+0x2c4>)
   d45f6:	781b      	ldrb	r3, [r3, #0]
   d45f8:	2b00      	cmp	r3, #0
   d45fa:	f000 80e0 	beq.w	d47be <loop+0x276>
   d45fe:	f000 fc4b 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
          waitUntil(PublishDelayFunction);
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
        }
      } 

      if (millis() - webhookTimeStamp > webhookTimeout) {                         // If device does not respond in 45 Seconds, Then Reset it.
   d4602:	4b83      	ldr	r3, [pc, #524]	; (d4810 <loop+0x2c8>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	1ac0      	subs	r0, r0, r3
   d4608:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d460c:	4298      	cmp	r0, r3
   d460e:	f240 81ac 	bls.w	d496a <loop+0x422>
   d4612:	4b80      	ldr	r3, [pc, #512]	; (d4814 <loop+0x2cc>)
        Particle.publish("spark/device/session/end", "", PRIVATE); 
   d4614:	4980      	ldr	r1, [pc, #512]	; (d4818 <loop+0x2d0>)
   d4616:	781b      	ldrb	r3, [r3, #0]
   d4618:	2200      	movs	r2, #0
   d461a:	f88d 2000 	strb.w	r2, [sp]
   d461e:	a808      	add	r0, sp, #32
   d4620:	4a7e      	ldr	r2, [pc, #504]	; (d481c <loop+0x2d4>)
   d4622:	f7ff fd7d 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4626:	a809      	add	r0, sp, #36	; 0x24
   d4628:	f7ff fe33 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d462c:	f000 fc34 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
    case MEASURING_STATE:                                                         // Measuring State.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
      currentHourlyPeriod = Time.hour();
      if(takeMeasurements()) state = REPORTING_DETERMINATION;                     // Get the measurements and move to reporting determination
      else  {
        resetStartTimeStamp = millis();
   d4630:	4b7b      	ldr	r3, [pc, #492]	; (d4820 <loop+0x2d8>)
   d4632:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;                                                      // If we fail to get the measurements we need - go to error state
   d4634:	2306      	movs	r3, #6
   d4636:	7023      	strb	r3, [r4, #0]
   d4638:	e197      	b.n	d496a <loop+0x422>
      }
    break;

    case REPORTING_DETERMINATION:                                                 // Reporting determination state.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d463a:	4d6c      	ldr	r5, [pc, #432]	; (d47ec <loop+0x2a4>)
   d463c:	782b      	ldrb	r3, [r5, #0]
   d463e:	b12b      	cbz	r3, d464c <loop+0x104>
   d4640:	4b6b      	ldr	r3, [pc, #428]	; (d47f0 <loop+0x2a8>)
   d4642:	781b      	ldrb	r3, [r3, #0]
   d4644:	2b03      	cmp	r3, #3
   d4646:	d001      	beq.n	d464c <loop+0x104>
   d4648:	f7ff ff4c 	bl	d44e4 <_Z15transitionStatev>
       static float lastTemperatureInC = 0;

      // Four possible outcomes: 1) Top of the hour - report, 2) Big change in Temp - report and move to rapid sampling, 3) small change in Temp - report and normal sampling, 4) No change in temp - back to Idle
      if (Time.hour() != currentHourlyPeriod) {                                   // Case 1 - If it is a new hour - report
   d464c:	f001 ff0c 	bl	d6468 <_ZN9TimeClass4hourEv>
   d4650:	4b6d      	ldr	r3, [pc, #436]	; (d4808 <loop+0x2c0>)
   d4652:	681a      	ldr	r2, [r3, #0]
   d4654:	4290      	cmp	r0, r2
   d4656:	461e      	mov	r6, r3
   d4658:	d018      	beq.n	d468c <loop+0x144>
        stayAwake = stayAwakeLong;                                                // Stay awake longer at the hour - helps if you need to publish updates to deployed devices
   d465a:	4b68      	ldr	r3, [pc, #416]	; (d47fc <loop+0x2b4>)
   d465c:	4a71      	ldr	r2, [pc, #452]	; (d4824 <loop+0x2dc>)
   d465e:	601a      	str	r2, [r3, #0]
        if (verboseMode) {
   d4660:	782b      	ldrb	r3, [r5, #0]
   d4662:	b173      	cbz	r3, d4682 <loop+0x13a>
          waitUntil(PublishDelayFunction);
   d4664:	f7ff fe0a 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d4668:	4b6a      	ldr	r3, [pc, #424]	; (d4814 <loop+0x2cc>)
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
   d466a:	496f      	ldr	r1, [pc, #444]	; (d4828 <loop+0x2e0>)
   d466c:	781b      	ldrb	r3, [r3, #0]
   d466e:	2200      	movs	r2, #0
   d4670:	f88d 2000 	strb.w	r2, [sp]
   d4674:	a808      	add	r0, sp, #32
   d4676:	4a6d      	ldr	r2, [pc, #436]	; (d482c <loop+0x2e4>)
   d4678:	f7ff fd52 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d467c:	a809      	add	r0, sp, #36	; 0x24
   d467e:	f7ff fe08 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        currentHourlyPeriod = Time.hour();
   d4682:	f001 fef1 	bl	d6468 <_ZN9TimeClass4hourEv>
        state = REPORTING_STATE;
   d4686:	2304      	movs	r3, #4
        stayAwake = stayAwakeLong;                                                // Stay awake longer at the hour - helps if you need to publish updates to deployed devices
        if (verboseMode) {
          waitUntil(PublishDelayFunction);
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
        }
        currentHourlyPeriod = Time.hour();
   d4688:	6030      	str	r0, [r6, #0]
   d468a:	e7d4      	b.n	d4636 <loop+0xee>
        state = REPORTING_STATE;
        break;                                                                    // Leave this case and move on
      }
      if (abs(temperatureInC - lastTemperatureInC) >= tempChangeThreshold) {      // Case 2 - Big change in Temp - report and move to rapid sampling
   d468c:	4a68      	ldr	r2, [pc, #416]	; (d4830 <loop+0x2e8>)
   d468e:	4b69      	ldr	r3, [pc, #420]	; (d4834 <loop+0x2ec>)
   d4690:	edd2 6a00 	vldr	s13, [r2]
   d4694:	ed93 7a00 	vldr	s14, [r3]
   d4698:	f8df 8168 	ldr.w	r8, [pc, #360]	; d4804 <loop+0x2bc>
   d469c:	ee76 7ac7 	vsub.f32	s15, s13, s14
   d46a0:	4617      	mov	r7, r2
   d46a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d46a6:	461e      	mov	r6, r3
   d46a8:	ee17 1a90 	vmov	r1, s15
   d46ac:	2900      	cmp	r1, #0
   d46ae:	bfb8      	it	lt
   d46b0:	4249      	neglt	r1, r1
   d46b2:	ee07 1a90 	vmov	s15, r1
   d46b6:	4960      	ldr	r1, [pc, #384]	; (d4838 <loop+0x2f0>)
   d46b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d46bc:	ed91 6a00 	vldr	s12, [r1]
   d46c0:	eef4 7ac6 	vcmpe.f32	s15, s12
   d46c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46c8:	db17      	blt.n	d46fa <loop+0x1b2>
        if (verboseMode) {
   d46ca:	782b      	ldrb	r3, [r5, #0]
   d46cc:	b173      	cbz	r3, d46ec <loop+0x1a4>
          waitUntil(PublishDelayFunction);
   d46ce:	f7ff fdd5 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d46d2:	4b50      	ldr	r3, [pc, #320]	; (d4814 <loop+0x2cc>)
          Particle.publish("State", "Big Change - Rapid & Reporting", PRIVATE);   // Report for diagnostics
   d46d4:	4954      	ldr	r1, [pc, #336]	; (d4828 <loop+0x2e0>)
   d46d6:	781b      	ldrb	r3, [r3, #0]
   d46d8:	2200      	movs	r2, #0
   d46da:	f88d 2000 	strb.w	r2, [sp]
   d46de:	a808      	add	r0, sp, #32
   d46e0:	4a56      	ldr	r2, [pc, #344]	; (d483c <loop+0x2f4>)
   d46e2:	f7ff fd1d 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d46e6:	a809      	add	r0, sp, #36	; 0x24
   d46e8:	f7ff fdd3 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d46ec:	683b      	ldr	r3, [r7, #0]
   d46ee:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;                                                  
   d46f0:	2304      	movs	r3, #4
   d46f2:	7023      	strb	r3, [r4, #0]
        sampleRate = rapidSamplePeriodSeconds;                                    // Move to rapid sampling
   d46f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d46f8:	e01b      	b.n	d4732 <loop+0x1ea>
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - small change in Temp - report and normal sampling
   d46fa:	eef4 6a47 	vcmp.f32	s13, s14
   d46fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        if (verboseMode) {
   d4702:	782b      	ldrb	r3, [r5, #0]
        lastTemperatureInC = temperatureInC;
        state = REPORTING_STATE;                                                  
        sampleRate = rapidSamplePeriodSeconds;                                    // Move to rapid sampling
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - small change in Temp - report and normal sampling
   d4704:	d018      	beq.n	d4738 <loop+0x1f0>
        if (verboseMode) {
   d4706:	b173      	cbz	r3, d4726 <loop+0x1de>
          waitUntil(PublishDelayFunction);
   d4708:	f7ff fdb8 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d470c:	4b41      	ldr	r3, [pc, #260]	; (d4814 <loop+0x2cc>)
          Particle.publish("State", "Change detected - Reporting", PRIVATE);      // Report for diagnostics
   d470e:	4946      	ldr	r1, [pc, #280]	; (d4828 <loop+0x2e0>)
   d4710:	781b      	ldrb	r3, [r3, #0]
   d4712:	2200      	movs	r2, #0
   d4714:	f88d 2000 	strb.w	r2, [sp]
   d4718:	a808      	add	r0, sp, #32
   d471a:	4a49      	ldr	r2, [pc, #292]	; (d4840 <loop+0x2f8>)
   d471c:	f7ff fd00 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4720:	a809      	add	r0, sp, #36	; 0x24
   d4722:	f7ff fdb6 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d4726:	683b      	ldr	r3, [r7, #0]
   d4728:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;
   d472a:	2304      	movs	r3, #4
   d472c:	7023      	strb	r3, [r4, #0]
        sampleRate = normalSamplePeriodSeconds;                                   // Small but non-zero change - move to normal sampling
   d472e:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4732:	f8c8 3000 	str.w	r3, [r8]
        break;  
   d4736:	e118      	b.n	d496a <loop+0x422>
      }

      else {                                                                      // Case 4 - No change in temp - go back to idle
        if (verboseMode) {
   d4738:	b173      	cbz	r3, d4758 <loop+0x210>
          waitUntil(PublishDelayFunction);
   d473a:	f7ff fd9f 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d473e:	4b35      	ldr	r3, [pc, #212]	; (d4814 <loop+0x2cc>)
          Particle.publish("State", "No Change - Idle", PRIVATE);                 // Report for diagnostics
   d4740:	4939      	ldr	r1, [pc, #228]	; (d4828 <loop+0x2e0>)
   d4742:	781b      	ldrb	r3, [r3, #0]
   d4744:	2200      	movs	r2, #0
   d4746:	f88d 2000 	strb.w	r2, [sp]
   d474a:	a808      	add	r0, sp, #32
   d474c:	4a3d      	ldr	r2, [pc, #244]	; (d4844 <loop+0x2fc>)
   d474e:	f7ff fce7 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4752:	a809      	add	r0, sp, #36	; 0x24
   d4754:	f7ff fd9d 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        state = IDLE_STATE;                                                      
   d4758:	2301      	movs	r3, #1
   d475a:	e7e7      	b.n	d472c <loop+0x1e4>
        sampleRate = normalSamplePeriodSeconds;                                   // Small but non-zero change - move to normal sampling
      }
    } break;

    case REPORTING_STATE:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d475c:	4b23      	ldr	r3, [pc, #140]	; (d47ec <loop+0x2a4>)
   d475e:	781a      	ldrb	r2, [r3, #0]
   d4760:	461d      	mov	r5, r3
   d4762:	b12a      	cbz	r2, d4770 <loop+0x228>
   d4764:	4b22      	ldr	r3, [pc, #136]	; (d47f0 <loop+0x2a8>)
   d4766:	781b      	ldrb	r3, [r3, #0]
   d4768:	2b04      	cmp	r3, #4
   d476a:	d001      	beq.n	d4770 <loop+0x228>
   d476c:	f7ff feba 	bl	d44e4 <_Z15transitionStatev>

      if (Time.hour() == 12) Particle.syncTime();                                 // SET CLOCK EACH DAY AT 12 NOON.
   d4770:	f001 fe7a 	bl	d6468 <_ZN9TimeClass4hourEv>
   d4774:	280c      	cmp	r0, #12
   d4776:	d105      	bne.n	d4784 <loop+0x23c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4778:	f000 fd4c 	bl	d5214 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d477c:	b110      	cbz	r0, d4784 <loop+0x23c>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d477e:	2000      	movs	r0, #0
   d4780:	f000 fd68 	bl	d5254 <spark_sync_time>

      if (verboseMode) {
   d4784:	782b      	ldrb	r3, [r5, #0]
   d4786:	b173      	cbz	r3, d47a6 <loop+0x25e>
        waitUntil(PublishDelayFunction);
   d4788:	f7ff fd78 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d478c:	4b21      	ldr	r3, [pc, #132]	; (d4814 <loop+0x2cc>)
        Particle.publish("Temperature", temperatureString, PRIVATE);
   d478e:	492e      	ldr	r1, [pc, #184]	; (d4848 <loop+0x300>)
   d4790:	781b      	ldrb	r3, [r3, #0]
   d4792:	2200      	movs	r2, #0
   d4794:	f88d 2000 	strb.w	r2, [sp]
   d4798:	a808      	add	r0, sp, #32
   d479a:	4a2c      	ldr	r2, [pc, #176]	; (d484c <loop+0x304>)
   d479c:	f7ff fcc0 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d47a0:	a809      	add	r0, sp, #36	; 0x24
   d47a2:	f7ff fd76 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      sendUBIDots();
   d47a6:	f7ff fdf1 	bl	d438c <_Z11sendUBIDotsv>
      state = RESPONSE_WAIT;
   d47aa:	2305      	movs	r3, #5
   d47ac:	e743      	b.n	d4636 <loop+0xee>
      break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d47ae:	4b10      	ldr	r3, [pc, #64]	; (d47f0 <loop+0x2a8>)
   d47b0:	781b      	ldrb	r3, [r3, #0]
   d47b2:	2b05      	cmp	r3, #5
   d47b4:	f43f af1e 	beq.w	d45f4 <loop+0xac>
   d47b8:	f7ff fe94 	bl	d44e4 <_Z15transitionStatev>
   d47bc:	e71a      	b.n	d45f4 <loop+0xac>

      if (!inTransit) {
        state = IDLE_STATE;                                                       // This checks for the response from UBIDOTS. 
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
   d47be:	782d      	ldrb	r5, [r5, #0]

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.

      if (!inTransit) {
        state = IDLE_STATE;                                                       // This checks for the response from UBIDOTS. 
   d47c0:	2301      	movs	r3, #1
   d47c2:	7023      	strb	r3, [r4, #0]
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
   d47c4:	2d00      	cmp	r5, #0
   d47c6:	f47f af1a 	bne.w	d45fe <loop+0xb6>
          waitUntil(PublishDelayFunction);
   d47ca:	f7ff fd57 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d47ce:	4b11      	ldr	r3, [pc, #68]	; (d4814 <loop+0x2cc>)
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
   d47d0:	4a1f      	ldr	r2, [pc, #124]	; (d4850 <loop+0x308>)
   d47d2:	781b      	ldrb	r3, [r3, #0]
   d47d4:	4914      	ldr	r1, [pc, #80]	; (d4828 <loop+0x2e0>)
   d47d6:	f88d 5000 	strb.w	r5, [sp]
   d47da:	a808      	add	r0, sp, #32
   d47dc:	f7ff fca0 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d47e0:	a809      	add	r0, sp, #36	; 0x24
   d47e2:	f7ff fd56 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47e6:	e70a      	b.n	d45fe <loop+0xb6>
   d47e8:	2003e310 	.word	0x2003e310
   d47ec:	2003e33d 	.word	0x2003e33d
   d47f0:	2003e33c 	.word	0x2003e33c
   d47f4:	2003e214 	.word	0x2003e214
   d47f8:	2003e360 	.word	0x2003e360
   d47fc:	2003e2e8 	.word	0x2003e2e8
   d4800:	2003e31c 	.word	0x2003e31c
   d4804:	2003e0ac 	.word	0x2003e0ac
   d4808:	2003e30c 	.word	0x2003e30c
   d480c:	2003e304 	.word	0x2003e304
   d4810:	2003e34c 	.word	0x2003e34c
   d4814:	2003e320 	.word	0x2003e320
   d4818:	000d8332 	.word	0x000d8332
   d481c:	000d8573 	.word	0x000d8573
   d4820:	2003e2ec 	.word	0x2003e2ec
   d4824:	00015f90 	.word	0x00015f90
   d4828:	000d828d 	.word	0x000d828d
   d482c:	000d82a8 	.word	0x000d82a8
   d4830:	2003e318 	.word	0x2003e318
   d4834:	2003e324 	.word	0x2003e324
   d4838:	2003e0b0 	.word	0x2003e0b0
   d483c:	000d82bc 	.word	0x000d82bc
   d4840:	000d82db 	.word	0x000d82db
   d4844:	000d82f7 	.word	0x000d82f7
   d4848:	000d8308 	.word	0x000d8308
   d484c:	2003e2d8 	.word	0x2003e2d8
   d4850:	000d8314 	.word	0x000d8314
        state = ERROR_STATE;                                                      // Send to the error state - webhook failed
      }
      break;

    case ERROR_STATE: // This state RESETS the devices.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4854:	4b46      	ldr	r3, [pc, #280]	; (d4970 <loop+0x428>)
   d4856:	781b      	ldrb	r3, [r3, #0]
   d4858:	b12b      	cbz	r3, d4866 <loop+0x31e>
   d485a:	4b46      	ldr	r3, [pc, #280]	; (d4974 <loop+0x42c>)
   d485c:	781b      	ldrb	r3, [r3, #0]
   d485e:	2b06      	cmp	r3, #6
   d4860:	d001      	beq.n	d4866 <loop+0x31e>
   d4862:	f7ff fe3f 	bl	d44e4 <_Z15transitionStatev>
   d4866:	f000 fb17 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetStartTimeStamp >= resetDelayTime) {
   d486a:	4b43      	ldr	r3, [pc, #268]	; (d4978 <loop+0x430>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	1ac0      	subs	r0, r0, r3
   d4870:	f247 532f 	movw	r3, #29999	; 0x752f
   d4874:	4298      	cmp	r0, r3
   d4876:	d978      	bls.n	d496a <loop+0x422>
        waitUntil(PublishDelayFunction);
   d4878:	f7ff fd00 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d487c:	4b3f      	ldr	r3, [pc, #252]	; (d497c <loop+0x434>)
        Particle.publish("Error", "Resetting in 30 seconds", PRIVATE);            // Reset the device and hope that fixes it
   d487e:	4940      	ldr	r1, [pc, #256]	; (d4980 <loop+0x438>)
   d4880:	781b      	ldrb	r3, [r3, #0]
   d4882:	2200      	movs	r2, #0
   d4884:	f88d 2000 	strb.w	r2, [sp]
   d4888:	a808      	add	r0, sp, #32
   d488a:	4a3e      	ldr	r2, [pc, #248]	; (d4984 <loop+0x43c>)
   d488c:	f7ff fc48 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4890:	a809      	add	r0, sp, #36	; 0x24
   d4892:	f7ff fcfe 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                                              // Get the message out before resetting
   d4896:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d489a:	f000 fd7b 	bl	d5394 <delay>
        System.reset();
   d489e:	f001 fd2f 	bl	d6300 <_ZN11SystemClass5resetEv>
   d48a2:	e062      	b.n	d496a <loop+0x422>
      }
      break;

    case NAPPING_STATE: { // This state puts the device to sleep mode
      char data[64];
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d48a4:	4b32      	ldr	r3, [pc, #200]	; (d4970 <loop+0x428>)
   d48a6:	781b      	ldrb	r3, [r3, #0]
   d48a8:	b12b      	cbz	r3, d48b6 <loop+0x36e>
   d48aa:	4b32      	ldr	r3, [pc, #200]	; (d4974 <loop+0x42c>)
   d48ac:	781b      	ldrb	r3, [r3, #0]
   d48ae:	2b07      	cmp	r3, #7
   d48b0:	d001      	beq.n	d48b6 <loop+0x36e>
   d48b2:	f7ff fe17 	bl	d44e4 <_Z15transitionStatev>

      stayAwake = stayAwakeShort;                                                 // Don't need to wake for long when we are just sampling
   d48b6:	4b34      	ldr	r3, [pc, #208]	; (d4988 <loop+0x440>)
   d48b8:	f241 3288 	movw	r2, #5000	; 0x1388
   d48bc:	601a      	str	r2, [r3, #0]
      int wakeInSeconds = constrain(sampleRate - Time.now() % sampleRate, 1, sampleRate); // Calculate the seconds to the next sample
   d48be:	f001 fdcb 	bl	d6458 <_ZN9TimeClass3nowEv>
   d48c2:	4b32      	ldr	r3, [pc, #200]	; (d498c <loop+0x444>)
   d48c4:	681d      	ldr	r5, [r3, #0]
   d48c6:	fb90 f3f5 	sdiv	r3, r0, r5
   d48ca:	fb03 0015 	mls	r0, r3, r5, r0
   d48ce:	1a28      	subs	r0, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d48d0:	2800      	cmp	r0, #0
   d48d2:	dd03      	ble.n	d48dc <loop+0x394>
   d48d4:	4285      	cmp	r5, r0
   d48d6:	bfa8      	it	ge
   d48d8:	4605      	movge	r5, r0
   d48da:	e000      	b.n	d48de <loop+0x396>
   d48dc:	2501      	movs	r5, #1
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48de:	f000 fc99 	bl	d5214 <spark_cloud_flag_connected>
   d48e2:	4f26      	ldr	r7, [pc, #152]	; (d497c <loop+0x434>)
      
      if (Particle.connected()) {
   d48e4:	b198      	cbz	r0, d490e <loop+0x3c6>
        snprintf(data,sizeof(data),"Going to take a %i second nap", wakeInSeconds);
   d48e6:	462b      	mov	r3, r5
   d48e8:	4a29      	ldr	r2, [pc, #164]	; (d4990 <loop+0x448>)
   d48ea:	2140      	movs	r1, #64	; 0x40
   d48ec:	a808      	add	r0, sp, #32
   d48ee:	f000 fd39 	bl	d5364 <snprintf>
        waitUntil(PublishDelayFunction);
   d48f2:	f7ff fcc3 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d48f6:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d48f8:	783b      	ldrb	r3, [r7, #0]
        Particle.publish("Napping", data, PRIVATE);
   d48fa:	4926      	ldr	r1, [pc, #152]	; (d4994 <loop+0x44c>)
   d48fc:	f88d 2000 	strb.w	r2, [sp]
   d4900:	a806      	add	r0, sp, #24
   d4902:	aa08      	add	r2, sp, #32
   d4904:	f7ff fc0c 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4908:	a807      	add	r0, sp, #28
   d490a:	f7ff fcc2 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d490e:	4b22      	ldr	r3, [pc, #136]	; (d4998 <loop+0x450>)
   d4910:	681a      	ldr	r2, [r3, #0]
   d4912:	2308      	movs	r3, #8
   d4914:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4918:	ab18      	add	r3, sp, #96	; 0x60
   d491a:	2601      	movs	r6, #1
   d491c:	f803 6d4b 	strb.w	r6, [r3, #-75]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4920:	f10d 0116 	add.w	r1, sp, #22
   d4924:	a806      	add	r0, sp, #24
   d4926:	9202      	str	r2, [sp, #8]
   d4928:	9501      	str	r5, [sp, #4]
   d492a:	4632      	mov	r2, r6
   d492c:	9600      	str	r6, [sp, #0]
   d492e:	f001 fd01 	bl	d6334 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4932:	f000 fc67 	bl	d5204 <spark_cloud_flag_connect>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4936:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4938:	783b      	ldrb	r3, [r7, #0]
      }
      
      System.sleep(D8, RISING, wakeInSeconds);                                    // This is a light sleep but all we can do until we put an external clock in
      Particle.connect();                                                         // We need to connect and transmit data each time - can move to sample and hold in the future
      Particle.publish("WokeUp","From Sleep",PRIVATE);
   d493a:	4918      	ldr	r1, [pc, #96]	; (d499c <loop+0x454>)
   d493c:	f88d 2000 	strb.w	r2, [sp]
   d4940:	a806      	add	r0, sp, #24
   d4942:	4a17      	ldr	r2, [pc, #92]	; (d49a0 <loop+0x458>)
   d4944:	f7ff fbec 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4948:	a807      	add	r0, sp, #28
   d494a:	f7ff fca2 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d494e:	f000 faa3 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
   d4952:	4b14      	ldr	r3, [pc, #80]	; (d49a4 <loop+0x45c>)
      state = IDLE_STATE;
   d4954:	7026      	strb	r6, [r4, #0]
      }
      
      System.sleep(D8, RISING, wakeInSeconds);                                    // This is a light sleep but all we can do until we put an external clock in
      Particle.connect();                                                         // We need to connect and transmit data each time - can move to sample and hold in the future
      Particle.publish("WokeUp","From Sleep",PRIVATE);
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
   d4956:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
    } break; 
  }
}
   d4958:	e007      	b.n	d496a <loop+0x422>
    case IDLE_STATE:                                                              // IDLE State.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
      static int TimePassed = 0;
      
      if (lowPowerModeOn && (millis() - stayAWakeTimeStamp >= stayAwake)) state = NAPPING_STATE;    // If lowPowerMode is turned on, It will move to the napping state. 
   d495a:	2307      	movs	r3, #7
   d495c:	7023      	strb	r3, [r4, #0]
   d495e:	e61b      	b.n	d4598 <loop+0x50>
                                     
      if ((Time.minute() - TimePassed >= sampleRate/60) || Time.hour() != currentHourlyPeriod ) {     // Sample time or the top of the hour
          state = MEASURING_STATE;
   d4960:	2302      	movs	r3, #2
   d4962:	7023      	strb	r3, [r4, #0]
          TimePassed = Time.minute();
   d4964:	f001 fd8a 	bl	d647c <_ZN9TimeClass6minuteEv>
   d4968:	6028      	str	r0, [r5, #0]
      Particle.publish("WokeUp","From Sleep",PRIVATE);
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
      state = IDLE_STATE;
    } break; 
  }
}
   d496a:	b018      	add	sp, #96	; 0x60
   d496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4970:	2003e33d 	.word	0x2003e33d
   d4974:	2003e33c 	.word	0x2003e33c
   d4978:	2003e2ec 	.word	0x2003e2ec
   d497c:	2003e320 	.word	0x2003e320
   d4980:	000d8363 	.word	0x000d8363
   d4984:	000d834b 	.word	0x000d834b
   d4988:	2003e2e8 	.word	0x2003e2e8
   d498c:	2003e0ac 	.word	0x2003e0ac
   d4990:	000d8369 	.word	0x000d8369
   d4994:	000d8387 	.word	0x000d8387
   d4998:	2003e338 	.word	0x2003e338
   d499c:	000d839a 	.word	0x000d839a
   d49a0:	000d838f 	.word	0x000d838f
   d49a4:	2003e360 	.word	0x2003e360

000d49a8 <_Z7sendNow6String>:
  Particle.publish("State", stateTransitionString, PRIVATE);
}


bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d49a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d49aa:	4911      	ldr	r1, [pc, #68]	; (d49f0 <_Z7sendNow6String+0x48>)
   d49ac:	4604      	mov	r4, r0
   d49ae:	f001 fc78 	bl	d62a2 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d49b2:	b198      	cbz	r0, d49dc <_Z7sendNow6String+0x34>
    state = REPORTING_STATE;                                                      // Set the state to reporting
   d49b4:	4b0f      	ldr	r3, [pc, #60]	; (d49f4 <_Z7sendNow6String+0x4c>)
   d49b6:	2204      	movs	r2, #4
   d49b8:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d49ba:	f7ff fc5f 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d49be:	4b0e      	ldr	r3, [pc, #56]	; (d49f8 <_Z7sendNow6String+0x50>)
    Particle.publish("Function", "Command accepted - reporting now",PRIVATE);     // Acknowledge receipt
   d49c0:	490e      	ldr	r1, [pc, #56]	; (d49fc <_Z7sendNow6String+0x54>)
   d49c2:	781b      	ldrb	r3, [r3, #0]
   d49c4:	2200      	movs	r2, #0
   d49c6:	f88d 2000 	strb.w	r2, [sp]
   d49ca:	a802      	add	r0, sp, #8
   d49cc:	4a0c      	ldr	r2, [pc, #48]	; (d4a00 <_Z7sendNow6String+0x58>)
   d49ce:	f7ff fba7 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d49d2:	a803      	add	r0, sp, #12
   d49d4:	f7ff fc5d 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49d8:	2001      	movs	r0, #1
   d49da:	e006      	b.n	d49ea <_Z7sendNow6String+0x42>
   d49dc:	4909      	ldr	r1, [pc, #36]	; (d4a04 <_Z7sendNow6String+0x5c>)
   d49de:	4620      	mov	r0, r4
   d49e0:	f001 fc5f 	bl	d62a2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d49e4:	3000      	adds	r0, #0
   d49e6:	bf18      	it	ne
   d49e8:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d49ea:	b004      	add	sp, #16
   d49ec:	bd10      	pop	{r4, pc}
   d49ee:	bf00      	nop
   d49f0:	000d843d 	.word	0x000d843d
   d49f4:	2003e310 	.word	0x2003e310
   d49f8:	2003e320 	.word	0x2003e320
   d49fc:	000d81c2 	.word	0x000d81c2
   d4a00:	000d83a1 	.word	0x000d83a1
   d4a04:	000d8186 	.word	0x000d8186

000d4a08 <_Z8senseNow6String>:

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d4a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4a0a:	4911      	ldr	r1, [pc, #68]	; (d4a50 <_Z8senseNow6String+0x48>)
   d4a0c:	4604      	mov	r4, r0
   d4a0e:	f001 fc48 	bl	d62a2 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d4a12:	b198      	cbz	r0, d4a3c <_Z8senseNow6String+0x34>
    state = MEASURING_STATE;                                                      // Set the state to reporting
   d4a14:	4b0f      	ldr	r3, [pc, #60]	; (d4a54 <_Z8senseNow6String+0x4c>)
   d4a16:	2202      	movs	r2, #2
   d4a18:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d4a1a:	f7ff fc2f 	bl	d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.66>
   d4a1e:	4b0e      	ldr	r3, [pc, #56]	; (d4a58 <_Z8senseNow6String+0x50>)
    Particle.publish("Function", "Command accepted - sensing now",PRIVATE);       // Acknowledge receipt
   d4a20:	490e      	ldr	r1, [pc, #56]	; (d4a5c <_Z8senseNow6String+0x54>)
   d4a22:	781b      	ldrb	r3, [r3, #0]
   d4a24:	2200      	movs	r2, #0
   d4a26:	f88d 2000 	strb.w	r2, [sp]
   d4a2a:	a802      	add	r0, sp, #8
   d4a2c:	4a0c      	ldr	r2, [pc, #48]	; (d4a60 <_Z8senseNow6String+0x58>)
   d4a2e:	f7ff fb77 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.91.constprop.107>
   d4a32:	a803      	add	r0, sp, #12
   d4a34:	f7ff fc2d 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a38:	2001      	movs	r0, #1
   d4a3a:	e006      	b.n	d4a4a <_Z8senseNow6String+0x42>
   d4a3c:	4909      	ldr	r1, [pc, #36]	; (d4a64 <_Z8senseNow6String+0x5c>)
   d4a3e:	4620      	mov	r0, r4
   d4a40:	f001 fc2f 	bl	d62a2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d4a44:	3000      	adds	r0, #0
   d4a46:	bf18      	it	ne
   d4a48:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d4a4a:	b004      	add	sp, #16
   d4a4c:	bd10      	pop	{r4, pc}
   d4a4e:	bf00      	nop
   d4a50:	000d843d 	.word	0x000d843d
   d4a54:	2003e310 	.word	0x2003e310
   d4a58:	2003e320 	.word	0x2003e320
   d4a5c:	000d81c2 	.word	0x000d81c2
   d4a60:	000d83c2 	.word	0x000d83c2
   d4a64:	000d8186 	.word	0x000d8186

000d4a68 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
   d4a68:	b530      	push	{r4, r5, lr}
   d4a6a:	b085      	sub	sp, #20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a6c:	2300      	movs	r3, #0
   d4a6e:	4605      	mov	r5, r0
   d4a70:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d4a72:	b121      	cbz	r1, d4a7e <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4a74:	4b14      	ldr	r3, [pc, #80]	; (d4ac8 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
   d4a76:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4a78:	4b14      	ldr	r3, [pc, #80]	; (d4acc <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4a7a:	9100      	str	r1, [sp, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4a7c:	9302      	str	r3, [sp, #8]
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
   d4a7e:	9b02      	ldr	r3, [sp, #8]
   d4a80:	b183      	cbz	r3, d4aa4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4a82:	2010      	movs	r0, #16
   d4a84:	f7ff fb09 	bl	d409a <_Znwj>
   d4a88:	4604      	mov	r4, r0
   d4a8a:	b158      	cbz	r0, d4aa4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a8c:	2300      	movs	r3, #0
   d4a8e:	6083      	str	r3, [r0, #8]
   d4a90:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4a92:	b17b      	cbz	r3, d4ab4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4a94:	2202      	movs	r2, #2
   d4a96:	4669      	mov	r1, sp
   d4a98:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4a9a:	9b03      	ldr	r3, [sp, #12]
   d4a9c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4a9e:	9b02      	ldr	r3, [sp, #8]
   d4aa0:	60a3      	str	r3, [r4, #8]
   d4aa2:	e007      	b.n	d4ab4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
   d4aa4:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4aa6:	9b02      	ldr	r3, [sp, #8]
   d4aa8:	b15b      	cbz	r3, d4ac2 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4aaa:	2203      	movs	r2, #3
   d4aac:	4669      	mov	r1, sp
   d4aae:	4668      	mov	r0, sp
   d4ab0:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
   d4ab2:	e006      	b.n	d4ac2 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d4ab4:	4621      	mov	r1, r4
   d4ab6:	462a      	mov	r2, r5
   d4ab8:	4805      	ldr	r0, [pc, #20]	; (d4ad0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
   d4aba:	f000 fcf6 	bl	d54aa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4abe:	4604      	mov	r4, r0
   d4ac0:	e7f1      	b.n	d4aa6 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	b005      	add	sp, #20
   d4ac6:	bd30      	pop	{r4, r5, pc}
   d4ac8:	000d40cf 	.word	0x000d40cf
   d4acc:	000d40b7 	.word	0x000d40b7
   d4ad0:	000d5483 	.word	0x000d5483

000d4ad4 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4ad4:	2300      	movs	r3, #0
   d4ad6:	2204      	movs	r2, #4
   d4ad8:	f000 bb7c 	b.w	d51d4 <spark_variable>

000d4adc <setup>:

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()
{
   d4adc:	b570      	push	{r4, r5, r6, lr}
   d4ade:	b0a8      	sub	sp, #160	; 0xa0
 Serial.begin(9600);
   d4ae0:	f001 fdc4 	bl	d666c <_Z16_fetch_usbserialv>
   d4ae4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ae8:	f001 fdb4 	bl	d6654 <_ZN9USBSerial5beginEl>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4aec:	a804      	add	r0, sp, #16
   d4aee:	f000 fb99 	bl	d5224 <spark_deviceID>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4af2:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4af4:	2300      	movs	r3, #0
   d4af6:	227d      	movs	r2, #125	; 0x7d
   d4af8:	a908      	add	r1, sp, #32
   d4afa:	a804      	add	r0, sp, #16
   d4afc:	f001 fbe3 	bl	d62c6 <_ZNK6String8getBytesEPhjj>
   d4b00:	4623      	mov	r3, r4
   d4b02:	4622      	mov	r2, r4
   d4b04:	4938      	ldr	r1, [pc, #224]	; (d4be8 <setup+0x10c>)
   d4b06:	9401      	str	r4, [sp, #4]
   d4b08:	9400      	str	r4, [sp, #0]
   d4b0a:	a808      	add	r0, sp, #32
   d4b0c:	f000 fb9a 	bl	d5244 <spark_subscribe>
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic, 125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                  // Subscribe to the integration response event

  // Particle Functions.
  Particle.function("verboseMode", SetVerboseMode);                               // Added Particle Function For VerboseMode.
   d4b10:	4936      	ldr	r1, [pc, #216]	; (d4bec <setup+0x110>)
   d4b12:	4837      	ldr	r0, [pc, #220]	; (d4bf0 <setup+0x114>)
   d4b14:	f7ff ffa8 	bl	d4a68 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Get-Reading", senseNow);                                     // This function will force it to get a reading and set the refresh rate to 15mins.
   d4b18:	4936      	ldr	r1, [pc, #216]	; (d4bf4 <setup+0x118>)
   d4b1a:	4837      	ldr	r0, [pc, #220]	; (d4bf8 <setup+0x11c>)
   d4b1c:	f7ff ffa4 	bl	d4a68 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Report", sendNow);                                      // This function will force it to get a reading and set the refresh rate to 15mins.
   d4b20:	4936      	ldr	r1, [pc, #216]	; (d4bfc <setup+0x120>)
   d4b22:	4837      	ldr	r0, [pc, #220]	; (d4c00 <setup+0x124>)
   d4b24:	f7ff ffa0 	bl	d4a68 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Low-Power-Mode", LowPowerMode);                              // This function will send the device to low power mode or napping.  
   d4b28:	4936      	ldr	r1, [pc, #216]	; (d4c04 <setup+0x128>)
   d4b2a:	4837      	ldr	r0, [pc, #220]	; (d4c08 <setup+0x12c>)
   d4b2c:	f7ff ff9c 	bl	d4a68 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  
  // Particle Variables
  Particle.variable("Temperature", temperatureString);                            // Setup Particle Variable
   d4b30:	4936      	ldr	r1, [pc, #216]	; (d4c0c <setup+0x130>)
   d4b32:	4837      	ldr	r0, [pc, #220]	; (d4c10 <setup+0x134>)
   d4b34:	f7ff ffce 	bl	d4ad4 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
   d4b38:	4936      	ldr	r1, [pc, #216]	; (d4c14 <setup+0x138>)
   d4b3a:	4837      	ldr	r0, [pc, #220]	; (d4c18 <setup+0x13c>)
   d4b3c:	f7ff ffca 	bl	d4ad4 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
   d4b40:	4936      	ldr	r1, [pc, #216]	; (d4c1c <setup+0x140>)
   d4b42:	4837      	ldr	r0, [pc, #220]	; (d4c20 <setup+0x144>)
   d4b44:	f7ff ffc6 	bl	d4ad4 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell
   d4b48:	4936      	ldr	r1, [pc, #216]	; (d4c24 <setup+0x148>)
   d4b4a:	4837      	ldr	r0, [pc, #220]	; (d4c28 <setup+0x14c>)
   d4b4c:	f7ff ffc2 	bl	d4ad4 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
   d4b50:	f001 fe96 	bl	d6880 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4b54:	4620      	mov	r0, r4
   d4b56:	f000 f9b7 	bl	d4ec8 <HAL_EEPROM_Read>
   d4b5a:	2802      	cmp	r0, #2
   d4b5c:	d111      	bne.n	d4b82 <setup+0xa6>
    for (int i=1; i < 100; i++) {
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                              // Retrive system recount data from FRAM
   d4b5e:	f001 fe8f 	bl	d6880 <_Z21__fetch_global_EEPROMv>
   d4b62:	2002      	movs	r0, #2
   d4b64:	f000 f9b0 	bl	d4ec8 <HAL_EEPROM_Read>
   d4b68:	4b30      	ldr	r3, [pc, #192]	; (d4c2c <setup+0x150>)
  
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
   d4b6a:	2144      	movs	r1, #68	; 0x44
    for (int i=1; i < 100; i++) {
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                              // Retrive system recount data from FRAM
   d4b6c:	6018      	str	r0, [r3, #0]
  
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
   d4b6e:	4830      	ldr	r0, [pc, #192]	; (d4c30 <setup+0x154>)
   d4b70:	f000 f8b3 	bl	d4cda <_ZN14Adafruit_SHT315beginEh>
   d4b74:	b9e8      	cbnz	r0, d4bb2 <setup+0xd6>
    Serial.println("Couldn't find SHT31");
   d4b76:	f001 fd79 	bl	d666c <_Z16_fetch_usbserialv>
   d4b7a:	492e      	ldr	r1, [pc, #184]	; (d4c34 <setup+0x158>)
   d4b7c:	f001 f9db 	bl	d5f36 <_ZN5Print7printlnEPKc>
   d4b80:	e017      	b.n	d4bb2 <setup+0xd6>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
   d4b82:	ae28      	add	r6, sp, #160	; 0xa0
   d4b84:	f001 fe7c 	bl	d6880 <_Z21__fetch_global_EEPROMv>
   d4b88:	2302      	movs	r3, #2
   d4b8a:	f846 3d94 	str.w	r3, [r6, #-148]!
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4b8e:	2204      	movs	r2, #4
   d4b90:	4631      	mov	r1, r6
   d4b92:	4620      	mov	r0, r4
   d4b94:	f000 f9b0 	bl	d4ef8 <HAL_EEPROM_Put>
    for (int i=1; i < 100; i++) {
   d4b98:	2501      	movs	r5, #1
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
   d4b9a:	f001 fe71 	bl	d6880 <_Z21__fetch_global_EEPROMv>
   d4b9e:	4628      	mov	r0, r5
   d4ba0:	2204      	movs	r2, #4
   d4ba2:	4631      	mov	r1, r6
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4ba4:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
   d4ba6:	9403      	str	r4, [sp, #12]
   d4ba8:	f000 f9a6 	bl	d4ef8 <HAL_EEPROM_Put>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4bac:	2d64      	cmp	r5, #100	; 0x64
   d4bae:	d1f4      	bne.n	d4b9a <setup+0xbe>
   d4bb0:	e7d5      	b.n	d4b5e <setup+0x82>
  
  if (! sht31.begin(0x44)) {                                                      // *** This has to be above takemeasurements() Set to 0x45 for alternate i2c addr
    Serial.println("Couldn't find SHT31");
  }

  takeMeasurements();
   d4bb2:	f7ff fac5 	bl	d4140 <_Z16takeMeasurementsv>
  
  stayAwake = stayAwakeLong;                                                      // Stay awake longer on startup - helps with recovery for deployed devices
   d4bb6:	4b20      	ldr	r3, [pc, #128]	; (d4c38 <setup+0x15c>)
   d4bb8:	4a20      	ldr	r2, [pc, #128]	; (d4c3c <setup+0x160>)
   d4bba:	601a      	str	r2, [r3, #0]
   d4bbc:	f000 f96c 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
  stayAWakeTimeStamp = millis();                                                  // Reset the timestamp here as the connection sequence could take a while
   d4bc0:	4b1f      	ldr	r3, [pc, #124]	; (d4c40 <setup+0x164>)
   d4bc2:	6018      	str	r0, [r3, #0]


  

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
   d4bc4:	4b1f      	ldr	r3, [pc, #124]	; (d4c44 <setup+0x168>)
   d4bc6:	2201      	movs	r2, #1
   d4bc8:	701a      	strb	r2, [r3, #0]
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
   d4bca:	4b1f      	ldr	r3, [pc, #124]	; (d4c48 <setup+0x16c>)
   d4bcc:	781b      	ldrb	r3, [r3, #0]
   d4bce:	b12b      	cbz	r3, d4bdc <setup+0x100>
   d4bd0:	4b1e      	ldr	r3, [pc, #120]	; (d4c4c <setup+0x170>)
   d4bd2:	781b      	ldrb	r3, [r3, #0]
   d4bd4:	4293      	cmp	r3, r2
   d4bd6:	d001      	beq.n	d4bdc <setup+0x100>
   d4bd8:	f7ff fc84 	bl	d44e4 <_Z15transitionStatev>
void setup()
{
 Serial.begin(9600);
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.
  char responseTopic[125];
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
   d4bdc:	a804      	add	r0, sp, #16
   d4bde:	f001 fb06 	bl	d61ee <_ZN6StringD1Ev>

  

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}
   d4be2:	b028      	add	sp, #160	; 0xa0
   d4be4:	bd70      	pop	{r4, r5, r6, pc}
   d4be6:	bf00      	nop
   d4be8:	000d443d 	.word	0x000d443d
   d4bec:	000d42c1 	.word	0x000d42c1
   d4bf0:	000d83e1 	.word	0x000d83e1
   d4bf4:	000d4a09 	.word	0x000d4a09
   d4bf8:	000d83ed 	.word	0x000d83ed
   d4bfc:	000d49a9 	.word	0x000d49a9
   d4c00:	000d83f9 	.word	0x000d83f9
   d4c04:	000d40ed 	.word	0x000d40ed
   d4c08:	000d8405 	.word	0x000d8405
   d4c0c:	2003e2d8 	.word	0x2003e2d8
   d4c10:	000d8308 	.word	0x000d8308
   d4c14:	000d8180 	.word	0x000d8180
   d4c18:	000d8414 	.word	0x000d8414
   d4c1c:	2003e328 	.word	0x2003e328
   d4c20:	000d841c 	.word	0x000d841c
   d4c24:	2003e350 	.word	0x2003e350
   d4c28:	000d8423 	.word	0x000d8423
   d4c2c:	2003e314 	.word	0x2003e314
   d4c30:	2003e340 	.word	0x2003e340
   d4c34:	000d842b 	.word	0x000d842b
   d4c38:	2003e2e8 	.word	0x2003e2e8
   d4c3c:	00015f90 	.word	0x00015f90
   d4c40:	2003e360 	.word	0x2003e360
   d4c44:	2003e310 	.word	0x2003e310
   d4c48:	2003e33d 	.word	0x2003e33d
   d4c4c:	2003e33c 	.word	0x2003e33c

000d4c50 <_GLOBAL__sub_I_sht31>:
  {
    lowPowerModeOn = false;
    return 1;
  }
  else return 0;
   d4c50:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c52:	4b06      	ldr	r3, [pc, #24]	; (d4c6c <_GLOBAL__sub_I_sht31+0x1c>)
   d4c54:	2200      	movs	r2, #0
   d4c56:	601a      	str	r2, [r3, #0]
   d4c58:	4b05      	ldr	r3, [pc, #20]	; (d4c70 <_GLOBAL__sub_I_sht31+0x20>)
   d4c5a:	2201      	movs	r2, #1
   d4c5c:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c5e:	f000 f95b 	bl	d4f18 <HAL_Pin_Map>
const char releaseNumber[6] = "1.22"; // Displays the release on the menu

#include "adafruit-sht31.h"           //Include SHT-31 Library

// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();    // Initialize sensor object
   d4c62:	4804      	ldr	r0, [pc, #16]	; (d4c74 <_GLOBAL__sub_I_sht31+0x24>)
  {
    lowPowerModeOn = false;
    return 1;
  }
  else return 0;
   d4c64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const char releaseNumber[6] = "1.22"; // Displays the release on the menu

#include "adafruit-sht31.h"           //Include SHT-31 Library

// Initialize modules here
Adafruit_SHT31 sht31 = Adafruit_SHT31();    // Initialize sensor object
   d4c68:	f000 b814 	b.w	d4c94 <_ZN14Adafruit_SHT31C1Ev>
   d4c6c:	2003e338 	.word	0x2003e338
   d4c70:	2003e320 	.word	0x2003e320
   d4c74:	2003e340 	.word	0x2003e340

000d4c78 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4c78:	f000 b94e 	b.w	d4f18 <HAL_Pin_Map>

000d4c7c <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	f000 f94b 	bl	d4f18 <HAL_Pin_Map>
   d4c82:	4b01      	ldr	r3, [pc, #4]	; (d4c88 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4c84:	6018      	str	r0, [r3, #0]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	2003e364 	.word	0x2003e364

000d4c8c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4c8c:	6803      	ldr	r3, [r0, #0]
   d4c8e:	b2c9      	uxtb	r1, r1
   d4c90:	689b      	ldr	r3, [r3, #8]
   d4c92:	4718      	bx	r3

000d4c94 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d4c94:	4770      	bx	lr

000d4c96 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d4c96:	b538      	push	{r3, r4, r5, lr}
   d4c98:	4605      	mov	r5, r0
   d4c9a:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d4c9c:	f001 fe04 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d4ca0:	7829      	ldrb	r1, [r5, #0]
   d4ca2:	f000 ff33 	bl	d5b0c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d4ca6:	f001 fdff 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d4caa:	0a21      	lsrs	r1, r4, #8
   d4cac:	f7ff ffee 	bl	d4c8c <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d4cb0:	f001 fdfa 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d4cb4:	b2e1      	uxtb	r1, r4
   d4cb6:	f7ff ffe9 	bl	d4c8c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d4cba:	f001 fdf5 	bl	d68a8 <_Z19__fetch_global_Wirev>
}
   d4cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
   d4cc2:	f000 bf2b 	b.w	d5b1c <_ZN7TwoWire15endTransmissionEv>

000d4cc6 <_ZN14Adafruit_SHT315resetEv>:
  stat |= Wire.read();
  //Serial.println(stat, HEX);
  return stat;
}

void Adafruit_SHT31::reset(void) {
   d4cc6:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d4cc8:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d4ccc:	f7ff ffe3 	bl	d4c96 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(10);
   d4cd0:	200a      	movs	r0, #10
}
   d4cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return stat;
}

void Adafruit_SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
   d4cd6:	f000 bb5d 	b.w	d5394 <delay>

000d4cda <_ZN14Adafruit_SHT315beginEh>:

Adafruit_SHT31::Adafruit_SHT31() {
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d4cda:	b538      	push	{r3, r4, r5, lr}
   d4cdc:	4604      	mov	r4, r0
   d4cde:	460d      	mov	r5, r1
  Wire.begin();
   d4ce0:	f001 fde2 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d4ce4:	f000 ff00 	bl	d5ae8 <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
   d4ce8:	4620      	mov	r0, r4
}


boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
   d4cea:	7025      	strb	r5, [r4, #0]
  reset();
   d4cec:	f7ff ffeb 	bl	d4cc6 <_ZN14Adafruit_SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
   d4cf0:	2001      	movs	r0, #1
   d4cf2:	bd38      	pop	{r3, r4, r5, pc}

000d4cf4 <_ZN14Adafruit_SHT314crc8EPKhi>:
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();  
}

uint8_t Adafruit_SHT31::crc8(const uint8_t *data, int len)
{
   d4cf4:	440a      	add	r2, r1
 * Polynomial 0x31 (x8 + x5 +x4 +1)
 * Final XOR 0x00
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
   d4cf6:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
   d4cf8:	4291      	cmp	r1, r2
   d4cfa:	d00e      	beq.n	d4d1a <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d4cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4d00:	4058      	eors	r0, r3
   d4d02:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4d04:	f010 0f80 	tst.w	r0, #128	; 0x80
   d4d08:	ea4f 0040 	mov.w	r0, r0, lsl #1
   d4d0c:	bf18      	it	ne
   d4d0e:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4d12:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
   d4d14:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
   d4d16:	d1f5      	bne.n	d4d04 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d4d18:	e7ee      	b.n	d4cf8 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc;
}
   d4d1a:	4770      	bx	lr
   d4d1c:	0000      	movs	r0, r0
	...

000d4d20 <_ZN14Adafruit_SHT3111readTempHumEv>:

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4d22:	f44f 5110 	mov.w	r1, #9216	; 0x2400

  return humidity;
}


boolean Adafruit_SHT31::readTempHum(void) {
   d4d26:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
   d4d28:	f7ff ffb5 	bl	d4c96 <_ZN14Adafruit_SHT3112writeCommandEt>
  
  delay(500);
   d4d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4d30:	f000 fb30 	bl	d5394 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d4d34:	f001 fdb8 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d4d38:	2206      	movs	r2, #6
   d4d3a:	7821      	ldrb	r1, [r4, #0]
   d4d3c:	f000 fee3 	bl	d5b06 <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
   d4d40:	f001 fdb2 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d4d44:	6803      	ldr	r3, [r0, #0]
   d4d46:	691b      	ldr	r3, [r3, #16]
   d4d48:	4798      	blx	r3
   d4d4a:	2806      	cmp	r0, #6
   d4d4c:	d14a      	bne.n	d4de4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>
   d4d4e:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
   d4d50:	f001 fdaa 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d4d54:	6803      	ldr	r3, [r0, #0]
   d4d56:	695b      	ldr	r3, [r3, #20]
   d4d58:	4798      	blx	r3
   d4d5a:	f80d 0005 	strb.w	r0, [sp, r5]
   d4d5e:	3501      	adds	r5, #1
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
   d4d60:	2d06      	cmp	r5, #6
   d4d62:	d1f5      	bne.n	d4d50 <_ZN14Adafruit_SHT3111readTempHumEv+0x30>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d4d64:	2202      	movs	r2, #2
   d4d66:	4669      	mov	r1, sp
   d4d68:	4620      	mov	r0, r4
   d4d6a:	f7ff ffc3 	bl	d4cf4 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4d6e:	f89d 5002 	ldrb.w	r5, [sp, #2]
   d4d72:	4285      	cmp	r5, r0
   d4d74:	d136      	bne.n	d4de4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d4d76:	2202      	movs	r2, #2
   d4d78:	f10d 0103 	add.w	r1, sp, #3
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f7ff ffb9 	bl	d4cf4 <_ZN14Adafruit_SHT314crc8EPKhi>
   d4d82:	f89d 5005 	ldrb.w	r5, [sp, #5]
   d4d86:	4285      	cmp	r5, r0
   d4d88:	d12c      	bne.n	d4de4 <_ZN14Adafruit_SHT3111readTempHumEv+0xc4>

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4d8a:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
   d4d8e:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];
   d4d92:	f89d 5004 	ldrb.w	r5, [sp, #4]

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;

 // Serial.print("ST = "); Serial.println(ST);
  double stemp = ST;
   d4d96:	ba40      	rev16	r0, r0
   d4d98:	b280      	uxth	r0, r0
   d4d9a:	f002 f85b 	bl	d6e54 <__aeabi_ui2d>
  stemp *= 175;
   d4d9e:	a318      	add	r3, pc, #96	; (adr r3, d4e00 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d4da0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4da4:	f002 f8cc 	bl	d6f40 <__aeabi_dmul>
  stemp /= 0xffff;
   d4da8:	a311      	add	r3, pc, #68	; (adr r3, d4df0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4daa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dae:	f002 f9f1 	bl	d7194 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
   d4db2:	2200      	movs	r2, #0
   d4db4:	4b10      	ldr	r3, [pc, #64]	; (d4df8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d4db6:	f001 ff0f 	bl	d6bd8 <__aeabi_dsub>
   d4dba:	f002 fbb9 	bl	d7530 <__aeabi_d2f>
   d4dbe:	60a0      	str	r0, [r4, #8]
  
//  Serial.print("SRH = "); Serial.println(SRH);
  double shum = SRH;
   d4dc0:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
   d4dc4:	f002 f846 	bl	d6e54 <__aeabi_ui2d>
  shum *= 100;
   d4dc8:	2200      	movs	r2, #0
   d4dca:	4b0c      	ldr	r3, [pc, #48]	; (d4dfc <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d4dcc:	f002 f8b8 	bl	d6f40 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
   d4dd0:	a307      	add	r3, pc, #28	; (adr r3, d4df0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d4dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dd6:	f002 f9dd 	bl	d7194 <__aeabi_ddiv>
   d4dda:	f002 fba9 	bl	d7530 <__aeabi_d2f>
   d4dde:	6060      	str	r0, [r4, #4]
  
  return true;
   d4de0:	2001      	movs	r0, #1
   d4de2:	e000      	b.n	d4de6 <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(500);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
   d4de4:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
   d4de6:	b002      	add	sp, #8
   d4de8:	bd70      	pop	{r4, r5, r6, pc}
   d4dea:	bf00      	nop
   d4dec:	f3af 8000 	nop.w
   d4df0:	00000000 	.word	0x00000000
   d4df4:	40efffe0 	.word	0x40efffe0
   d4df8:	40468000 	.word	0x40468000
   d4dfc:	40590000 	.word	0x40590000
   d4e00:	00000000 	.word	0x00000000
   d4e04:	4065e000 	.word	0x4065e000

000d4e08 <_ZN14Adafruit_SHT3115readTemperatureEv>:
  else
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
   d4e08:	b510      	push	{r4, lr}
   d4e0a:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d4e0c:	f7ff ff88 	bl	d4d20 <_ZN14Adafruit_SHT3111readTempHumEv>
   d4e10:	b110      	cbz	r0, d4e18 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>

  return temp;
   d4e12:	ed94 0a02 	vldr	s0, [r4, #8]
   d4e16:	bd10      	pop	{r4, pc}
    writeCommand(SHT31_HEATERDIS);
}


float Adafruit_SHT31::readTemperature(void) {
  if (! readTempHum()) return NAN;
   d4e18:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4e20 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>

  return temp;
}
   d4e1c:	bd10      	pop	{r4, pc}
   d4e1e:	bf00      	nop
   d4e20:	7fc00000 	.word	0x7fc00000

000d4e24 <_GLOBAL__sub_I__ZN14Adafruit_SHT31C2Ev>:
   d4e24:	f000 b878 	b.w	d4f18 <HAL_Pin_Map>

000d4e28 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <os_thread_is_current+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	689b      	ldr	r3, [r3, #8]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030248 	.word	0x00030248

000d4e38 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <os_thread_join+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	691b      	ldr	r3, [r3, #16]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030248 	.word	0x00030248

000d4e48 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <os_thread_cleanup+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	695b      	ldr	r3, [r3, #20]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	00030248 	.word	0x00030248

000d4e58 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <os_mutex_create+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	00030248 	.word	0x00030248

000d4e68 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <os_mutex_recursive_create+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	00030248 	.word	0x00030248

000d4e78 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <HAL_Core_System_Reset_Ex+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	00030234 	.word	0x00030234

000d4e88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <HAL_RNG_GetRandomNumber+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	685b      	ldr	r3, [r3, #4]
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030218 	.word	0x00030218

000d4e98 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	695b      	ldr	r3, [r3, #20]
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	00030218 	.word	0x00030218

000d4ea8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <HAL_RTC_Get_UnixTime+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	69db      	ldr	r3, [r3, #28]
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	00030218 	.word	0x00030218

000d4eb8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <HAL_EEPROM_Init+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	00030218 	.word	0x00030218

000d4ec8 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <HAL_EEPROM_Read+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	00030218 	.word	0x00030218

000d4ed8 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_EEPROM_Write+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	00030218 	.word	0x00030218

000d4ee8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_EEPROM_Get+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	00030218 	.word	0x00030218

000d4ef8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_EEPROM_Put+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	00030218 	.word	0x00030218

000d4f08 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <HAL_RTC_Time_Is_Valid+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	00030218 	.word	0x00030218

000d4f18 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <HAL_Pin_Map+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	681b      	ldr	r3, [r3, #0]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	0003022c 	.word	0x0003022c

000d4f28 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <HAL_Validate_Pin_Function+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	685b      	ldr	r3, [r3, #4]
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	0003022c 	.word	0x0003022c

000d4f38 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <HAL_ADC_Read+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	0003022c 	.word	0x0003022c

000d4f48 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <HAL_I2C_Begin+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	68db      	ldr	r3, [r3, #12]
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030228 	.word	0x00030228

000d4f58 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <HAL_I2C_Request_Data+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	695b      	ldr	r3, [r3, #20]
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	00030228 	.word	0x00030228

000d4f68 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <HAL_I2C_Begin_Transmission+0xc>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	699b      	ldr	r3, [r3, #24]
   d4f70:	9301      	str	r3, [sp, #4]
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	00030228 	.word	0x00030228

000d4f78 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <HAL_I2C_End_Transmission+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	69db      	ldr	r3, [r3, #28]
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	00030228 	.word	0x00030228

000d4f88 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <HAL_I2C_Write_Data+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	6a1b      	ldr	r3, [r3, #32]
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	00030228 	.word	0x00030228

000d4f98 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <HAL_I2C_Available_Data+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	00030228 	.word	0x00030228

000d4fa8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <HAL_I2C_Read_Data+0xc>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4fb0:	9301      	str	r3, [sp, #4]
   d4fb2:	bd08      	pop	{r3, pc}
   d4fb4:	00030228 	.word	0x00030228

000d4fb8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4fb8:	b508      	push	{r3, lr}
   d4fba:	4b02      	ldr	r3, [pc, #8]	; (d4fc4 <HAL_I2C_Peek_Data+0xc>)
   d4fbc:	681b      	ldr	r3, [r3, #0]
   d4fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fc0:	9301      	str	r3, [sp, #4]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	00030228 	.word	0x00030228

000d4fc8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b02      	ldr	r3, [pc, #8]	; (d4fd4 <HAL_I2C_Flush_Data+0xc>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fd0:	9301      	str	r3, [sp, #4]
   d4fd2:	bd08      	pop	{r3, pc}
   d4fd4:	00030228 	.word	0x00030228

000d4fd8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b02      	ldr	r3, [pc, #8]	; (d4fe4 <HAL_I2C_Is_Enabled+0xc>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	bd08      	pop	{r3, pc}
   d4fe4:	00030228 	.word	0x00030228

000d4fe8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <HAL_I2C_Init+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	00030228 	.word	0x00030228

000d4ff8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <inet_inet_ntop+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	695b      	ldr	r3, [r3, #20]
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	00030264 	.word	0x00030264

000d5008 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b02      	ldr	r3, [pc, #8]	; (d5014 <netdb_freeaddrinfo+0xc>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	689b      	ldr	r3, [r3, #8]
   d5010:	9301      	str	r3, [sp, #4]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	00030268 	.word	0x00030268

000d5018 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <netdb_getaddrinfo+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	68db      	ldr	r3, [r3, #12]
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	00030268 	.word	0x00030268

000d5028 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <HAL_SPI_Init+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	69db      	ldr	r3, [r3, #28]
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	00030230 	.word	0x00030230

000d5038 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b02      	ldr	r3, [pc, #8]	; (d5044 <HAL_SPI_Is_Enabled+0xc>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	6a1b      	ldr	r3, [r3, #32]
   d5040:	9301      	str	r3, [sp, #4]
   d5042:	bd08      	pop	{r3, pc}
   d5044:	00030230 	.word	0x00030230

000d5048 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <HAL_USART_Init+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	681b      	ldr	r3, [r3, #0]
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	0003023c 	.word	0x0003023c

000d5058 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <HAL_USART_Write_Data+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	68db      	ldr	r3, [r3, #12]
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	0003023c 	.word	0x0003023c

000d5068 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5068:	b508      	push	{r3, lr}
   d506a:	4b02      	ldr	r3, [pc, #8]	; (d5074 <HAL_USART_Available_Data+0xc>)
   d506c:	681b      	ldr	r3, [r3, #0]
   d506e:	691b      	ldr	r3, [r3, #16]
   d5070:	9301      	str	r3, [sp, #4]
   d5072:	bd08      	pop	{r3, pc}
   d5074:	0003023c 	.word	0x0003023c

000d5078 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <HAL_USART_Read_Data+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	695b      	ldr	r3, [r3, #20]
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	0003023c 	.word	0x0003023c

000d5088 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <HAL_USART_Peek_Data+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	699b      	ldr	r3, [r3, #24]
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	0003023c 	.word	0x0003023c

000d5098 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <HAL_USART_Flush_Data+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	69db      	ldr	r3, [r3, #28]
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	0003023c 	.word	0x0003023c

000d50a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <HAL_USART_Is_Enabled+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	6a1b      	ldr	r3, [r3, #32]
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	0003023c 	.word	0x0003023c

000d50b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <HAL_USART_Available_Data_For_Write+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	0003023c 	.word	0x0003023c

000d50c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <HAL_USB_USART_Init+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	681b      	ldr	r3, [r3, #0]
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	0003024c 	.word	0x0003024c

000d50d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <HAL_USB_USART_Begin+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	685b      	ldr	r3, [r3, #4]
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	0003024c 	.word	0x0003024c

000d50e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <HAL_USB_USART_Available_Data+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	691b      	ldr	r3, [r3, #16]
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	0003024c 	.word	0x0003024c

000d50f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	695b      	ldr	r3, [r3, #20]
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	0003024c 	.word	0x0003024c

000d5108 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <HAL_USB_USART_Receive_Data+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	699b      	ldr	r3, [r3, #24]
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	0003024c 	.word	0x0003024c

000d5118 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <HAL_USB_USART_Send_Data+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	69db      	ldr	r3, [r3, #28]
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	0003024c 	.word	0x0003024c

000d5128 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <HAL_USB_USART_Flush_Data+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	6a1b      	ldr	r3, [r3, #32]
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	0003024c 	.word	0x0003024c

000d5138 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <system_mode+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	681b      	ldr	r3, [r3, #0]
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	00030220 	.word	0x00030220

000d5148 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <set_system_mode+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	685b      	ldr	r3, [r3, #4]
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	00030220 	.word	0x00030220

000d5158 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <system_delay_ms+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	695b      	ldr	r3, [r3, #20]
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	00030220 	.word	0x00030220

000d5168 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <application_thread_current+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	00030220 	.word	0x00030220

000d5178 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <application_thread_invoke+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	00030220 	.word	0x00030220

000d5188 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <system_thread_get_state+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	00030220 	.word	0x00030220

000d5198 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b03      	ldr	r3, [pc, #12]	; (d51a8 <system_ctrl_set_app_request_handler+0x10>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d51a2:	9301      	str	r3, [sp, #4]
   d51a4:	bd08      	pop	{r3, pc}
   d51a6:	0000      	.short	0x0000
   d51a8:	00030220 	.word	0x00030220

000d51ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b03      	ldr	r3, [pc, #12]	; (d51bc <system_ctrl_set_result+0x10>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d51b6:	9301      	str	r3, [sp, #4]
   d51b8:	bd08      	pop	{r3, pc}
   d51ba:	0000      	.short	0x0000
   d51bc:	00030220 	.word	0x00030220

000d51c0 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b03      	ldr	r3, [pc, #12]	; (d51d0 <system_sleep_pins+0x10>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d51ca:	9301      	str	r3, [sp, #4]
   d51cc:	bd08      	pop	{r3, pc}
   d51ce:	0000      	.short	0x0000
   d51d0:	00030220 	.word	0x00030220

000d51d4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <spark_variable+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	681b      	ldr	r3, [r3, #0]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030244 	.word	0x00030244

000d51e4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <spark_function+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	685b      	ldr	r3, [r3, #4]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030244 	.word	0x00030244

000d51f4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <spark_process+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	689b      	ldr	r3, [r3, #8]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030244 	.word	0x00030244

000d5204 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <spark_cloud_flag_connect+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	68db      	ldr	r3, [r3, #12]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030244 	.word	0x00030244

000d5214 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <spark_cloud_flag_connected+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	695b      	ldr	r3, [r3, #20]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030244 	.word	0x00030244

000d5224 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <spark_deviceID+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	69db      	ldr	r3, [r3, #28]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030244 	.word	0x00030244

000d5234 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <spark_send_event+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6a1b      	ldr	r3, [r3, #32]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030244 	.word	0x00030244

000d5244 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <spark_subscribe+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	00030244 	.word	0x00030244

000d5254 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <spark_sync_time+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030244 	.word	0x00030244

000d5264 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <spark_sync_time_pending+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030244 	.word	0x00030244

000d5274 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	00030244 	.word	0x00030244

000d5284 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <network_connect+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	685b      	ldr	r3, [r3, #4]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030240 	.word	0x00030240

000d5294 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <network_connecting+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	689b      	ldr	r3, [r3, #8]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030240 	.word	0x00030240

000d52a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <network_disconnect+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	68db      	ldr	r3, [r3, #12]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030240 	.word	0x00030240

000d52b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <network_ready+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	691b      	ldr	r3, [r3, #16]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030240 	.word	0x00030240

000d52c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <network_on+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	695b      	ldr	r3, [r3, #20]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	00030240 	.word	0x00030240

000d52d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <network_off+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	699b      	ldr	r3, [r3, #24]
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	00030240 	.word	0x00030240

000d52e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <network_listen+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	69db      	ldr	r3, [r3, #28]
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	00030240 	.word	0x00030240

000d52f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <network_listening+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6a1b      	ldr	r3, [r3, #32]
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030240 	.word	0x00030240

000d5304 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <network_set_listen_timeout+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030240 	.word	0x00030240

000d5314 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <network_get_listen_timeout+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030240 	.word	0x00030240

000d5324 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <malloc+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	681b      	ldr	r3, [r3, #0]
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	0003021c 	.word	0x0003021c

000d5334 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <free+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	685b      	ldr	r3, [r3, #4]
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	0003021c 	.word	0x0003021c

000d5344 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <realloc+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	689b      	ldr	r3, [r3, #8]
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	0003021c 	.word	0x0003021c

000d5354 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <siscanf+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	699b      	ldr	r3, [r3, #24]
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	0003021c 	.word	0x0003021c

000d5364 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <snprintf+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	69db      	ldr	r3, [r3, #28]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	0003021c 	.word	0x0003021c

000d5374 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <abort+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	0003021c 	.word	0x0003021c

000d5384 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <_malloc_r+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	0003021c 	.word	0x0003021c

000d5394 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5394:	2100      	movs	r1, #0
   d5396:	f7ff bedf 	b.w	d5158 <system_delay_ms>

000d539a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d539a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d539c:	6883      	ldr	r3, [r0, #8]
   d539e:	4604      	mov	r4, r0
   d53a0:	b90b      	cbnz	r3, d53a6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d53a2:	f001 faca 	bl	d693a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d53a6:	68c3      	ldr	r3, [r0, #12]
   d53a8:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d53aa:	68a3      	ldr	r3, [r4, #8]
   d53ac:	b11b      	cbz	r3, d53b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d53ae:	2203      	movs	r2, #3
   d53b0:	4621      	mov	r1, r4
   d53b2:	4620      	mov	r0, r4
   d53b4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d53b6:	4620      	mov	r0, r4
   d53b8:	2110      	movs	r1, #16
}
   d53ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d53be:	f001 baba 	b.w	d6936 <_ZdlPvj>

000d53c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d53c2:	680b      	ldr	r3, [r1, #0]
   d53c4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d53c6:	b113      	cbz	r3, d53ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d53c8:	685a      	ldr	r2, [r3, #4]
   d53ca:	3201      	adds	r2, #1
   d53cc:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d53ce:	4770      	bx	lr

000d53d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d53d0:	4802      	ldr	r0, [pc, #8]	; (d53dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d53d2:	2300      	movs	r3, #0
   d53d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d53d6:	f7ff bd47 	b.w	d4e68 <os_mutex_recursive_create>
   d53da:	bf00      	nop
   d53dc:	2003e368 	.word	0x2003e368

000d53e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d53e0:	4770      	bx	lr

000d53e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d53e2:	2000      	movs	r0, #0
   d53e4:	4770      	bx	lr

000d53e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d53e6:	b510      	push	{r4, lr}
   d53e8:	2110      	movs	r1, #16
   d53ea:	4604      	mov	r4, r0
   d53ec:	f001 faa3 	bl	d6936 <_ZdlPvj>
   d53f0:	4620      	mov	r0, r4
   d53f2:	bd10      	pop	{r4, pc}

000d53f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d53f4:	b508      	push	{r3, lr}
      { delete this; }
   d53f6:	b108      	cbz	r0, d53fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d53f8:	f7ff fff5 	bl	d53e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d53fc:	bd08      	pop	{r3, pc}

000d53fe <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d53fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5400:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5402:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5404:	b113      	cbz	r3, d540c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5406:	2203      	movs	r2, #3
   d5408:	4601      	mov	r1, r0
   d540a:	4798      	blx	r3
    }
   d540c:	4620      	mov	r0, r4
   d540e:	bd10      	pop	{r4, pc}

000d5410 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5410:	2200      	movs	r2, #0
   d5412:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5414:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5416:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d541a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d541c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5420:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5422:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5424:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5426:	680c      	ldr	r4, [r1, #0]
   d5428:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d542a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d542c:	bd10      	pop	{r4, pc}

000d542e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d542e:	b510      	push	{r4, lr}
   d5430:	4604      	mov	r4, r0
    free((void*)msg_);
   d5432:	6800      	ldr	r0, [r0, #0]
   d5434:	f7ff ff7e 	bl	d5334 <free>
}
   d5438:	4620      	mov	r0, r4
   d543a:	bd10      	pop	{r4, pc}

000d543c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d543c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d543e:	68c4      	ldr	r4, [r0, #12]
   d5440:	b1f4      	cbz	r4, d5480 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5442:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5444:	2b02      	cmp	r3, #2
   d5446:	d103      	bne.n	d5450 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5448:	f104 000c 	add.w	r0, r4, #12
   d544c:	f7ff ffef 	bl	d542e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5450:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5452:	b135      	cbz	r5, d5462 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5454:	4628      	mov	r0, r5
   d5456:	f7ff ffd2 	bl	d53fe <_ZNSt14_Function_baseD1Ev>
   d545a:	2110      	movs	r1, #16
   d545c:	4628      	mov	r0, r5
   d545e:	f001 fa6a 	bl	d6936 <_ZdlPvj>
   d5462:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5464:	b135      	cbz	r5, d5474 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5466:	4628      	mov	r0, r5
   d5468:	f7ff ffc9 	bl	d53fe <_ZNSt14_Function_baseD1Ev>
   d546c:	2110      	movs	r1, #16
   d546e:	4628      	mov	r0, r5
   d5470:	f001 fa61 	bl	d6936 <_ZdlPvj>
   d5474:	4620      	mov	r0, r4
   d5476:	2114      	movs	r1, #20
   d5478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d547c:	f001 ba5b 	b.w	d6936 <_ZdlPvj>
   d5480:	bd38      	pop	{r3, r4, r5, pc}

000d5482 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d5482:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5484:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d5486:	4668      	mov	r0, sp
   d5488:	f000 fef8 	bl	d627c <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d548c:	68a3      	ldr	r3, [r4, #8]
   d548e:	b90b      	cbnz	r3, d5494 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d5490:	f001 fa53 	bl	d693a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5494:	68e3      	ldr	r3, [r4, #12]
   d5496:	4669      	mov	r1, sp
   d5498:	4620      	mov	r0, r4
   d549a:	4798      	blx	r3
   d549c:	4604      	mov	r4, r0
   d549e:	4668      	mov	r0, sp
   d54a0:	f000 fea5 	bl	d61ee <_ZN6StringD1Ev>
}
   d54a4:	4620      	mov	r0, r4
   d54a6:	b004      	add	sp, #16
   d54a8:	bd10      	pop	{r4, pc}

000d54aa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d54aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d54ac:	2410      	movs	r4, #16
   d54ae:	b085      	sub	sp, #20
   d54b0:	4607      	mov	r7, r0
   d54b2:	460e      	mov	r6, r1
   d54b4:	4615      	mov	r5, r2
   d54b6:	2100      	movs	r1, #0
   d54b8:	4622      	mov	r2, r4
   d54ba:	4668      	mov	r0, sp
   d54bc:	f002 f99d 	bl	d77fa <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d54c0:	2200      	movs	r2, #0
   d54c2:	4669      	mov	r1, sp
   d54c4:	4610      	mov	r0, r2
         size = sizeof(*this);
   d54c6:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d54ca:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d54cc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d54ce:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d54d0:	f7ff fe88 	bl	d51e4 <spark_function>
}
   d54d4:	b005      	add	sp, #20
   d54d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54d8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d54d8:	b513      	push	{r0, r1, r4, lr}
   d54da:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d54dc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d54e0:	2300      	movs	r3, #0
   d54e2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d54e4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d54e6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d54e8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d54ea:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d54ec:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d54ee:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d54f0:	f7fe fecf 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54f4:	4620      	mov	r0, r4
   d54f6:	b002      	add	sp, #8
   d54f8:	bd10      	pop	{r4, pc}

000d54fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d54fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54fc:	460c      	mov	r4, r1
   d54fe:	ad02      	add	r5, sp, #8
   d5500:	f854 3b04 	ldr.w	r3, [r4], #4
   d5504:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5508:	4606      	mov	r6, r0
   d550a:	460f      	mov	r7, r1
   d550c:	a801      	add	r0, sp, #4
   d550e:	4621      	mov	r1, r4
   d5510:	f7ff ff57 	bl	d53c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5514:	4629      	mov	r1, r5
   d5516:	4630      	mov	r0, r6
   d5518:	f7ff ffde 	bl	d54d8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d551c:	a801      	add	r0, sp, #4
   d551e:	f7fe feb8 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5522:	4620      	mov	r0, r4
   d5524:	f7fe feb5 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5528:	4638      	mov	r0, r7
   d552a:	2108      	movs	r1, #8
   d552c:	f001 fa03 	bl	d6936 <_ZdlPvj>
        return p;
    }
   d5530:	4630      	mov	r0, r6
   d5532:	b003      	add	sp, #12
   d5534:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5536 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5536:	b513      	push	{r0, r1, r4, lr}
   d5538:	460b      	mov	r3, r1
   d553a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d553c:	c803      	ldmia	r0, {r0, r1}
   d553e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5542:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5546:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d554a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d554e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5552:	b002      	add	sp, #8
   d5554:	bd10      	pop	{r4, pc}
	...

000d5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5558:	b538      	push	{r3, r4, r5, lr}
   d555a:	2300      	movs	r3, #0
   d555c:	4604      	mov	r4, r0
   d555e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5560:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5562:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5564:	f7fe fd99 	bl	d409a <_Znwj>
   d5568:	b128      	cbz	r0, d5576 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d556a:	2301      	movs	r3, #1
   d556c:	6043      	str	r3, [r0, #4]
   d556e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5570:	4b02      	ldr	r3, [pc, #8]	; (d557c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5572:	6003      	str	r3, [r0, #0]
   d5574:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5576:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5578:	4620      	mov	r0, r4
   d557a:	bd38      	pop	{r3, r4, r5, pc}
   d557c:	000d8448 	.word	0x000d8448

000d5580 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5580:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5582:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5584:	b90a      	cbnz	r2, d558a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5586:	f001 f9d8 	bl	d693a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d558a:	68c3      	ldr	r3, [r0, #12]
    }
   d558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5590:	4718      	bx	r3

000d5592 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5592:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5594:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5596:	f100 0110 	add.w	r1, r0, #16
   d559a:	f7ff fff1 	bl	d5580 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d559e:	bd08      	pop	{r3, pc}

000d55a0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55a0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d55a2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55a4:	b90a      	cbnz	r2, d55aa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d55a6:	f001 f9c8 	bl	d693a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55aa:	68c3      	ldr	r3, [r0, #12]
    }
   d55ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55b0:	4718      	bx	r3

000d55b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d55b2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d55b4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d55b6:	f100 0110 	add.w	r1, r0, #16
   d55ba:	f7ff fff1 	bl	d55a0 <_ZNKSt8functionIFvRKbEEclES1_>
   d55be:	bd08      	pop	{r3, pc}

000d55c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d55c0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55c2:	2300      	movs	r3, #0
   d55c4:	6083      	str	r3, [r0, #8]
   d55c6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d55c8:	4604      	mov	r4, r0
   d55ca:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d55cc:	b12b      	cbz	r3, d55da <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d55ce:	2202      	movs	r2, #2
   d55d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d55d2:	68eb      	ldr	r3, [r5, #12]
   d55d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d55d6:	68ab      	ldr	r3, [r5, #8]
   d55d8:	60a3      	str	r3, [r4, #8]
	}
    }
   d55da:	4620      	mov	r0, r4
   d55dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d55e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d55e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55e2:	b089      	sub	sp, #36	; 0x24
   d55e4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d55e6:	4668      	mov	r0, sp
   d55e8:	f7ff ff12 	bl	d5410 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d55ec:	2300      	movs	r3, #0
   d55ee:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d55f2:	f04f 0202 	mov.w	r2, #2
   d55f6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d55fa:	2b00      	cmp	r3, #0
   d55fc:	d103      	bne.n	d5606 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d55fe:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5602:	2900      	cmp	r1, #0
   d5604:	d1f7      	bne.n	d55f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5606:	d002      	beq.n	d560e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5608:	f88d 3008 	strb.w	r3, [sp, #8]
   d560c:	e063      	b.n	d56d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d560e:	f114 050c 	adds.w	r5, r4, #12
   d5612:	d003      	beq.n	d561c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5614:	4669      	mov	r1, sp
   d5616:	4628      	mov	r0, r5
   d5618:	f7ff fefa 	bl	d5410 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d561c:	f3bf 8f5f 	dmb	sy
   d5620:	2301      	movs	r3, #1
   d5622:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5624:	2000      	movs	r0, #0
   d5626:	f104 0308 	add.w	r3, r4, #8
   d562a:	f3bf 8f5f 	dmb	sy
   d562e:	e853 6f00 	ldrex	r6, [r3]
   d5632:	e843 0200 	strex	r2, r0, [r3]
   d5636:	2a00      	cmp	r2, #0
   d5638:	d1f9      	bne.n	d562e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d563a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d563e:	2e00      	cmp	r6, #0
   d5640:	d049      	beq.n	d56d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5642:	f7ff fd91 	bl	d5168 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5646:	b120      	cbz	r0, d5652 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5648:	4629      	mov	r1, r5
   d564a:	4630      	mov	r0, r6
   d564c:	f7ff ff98 	bl	d5580 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5650:	e03a      	b.n	d56c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5652:	4631      	mov	r1, r6
   d5654:	a802      	add	r0, sp, #8
   d5656:	f7ff ffb3 	bl	d55c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d565a:	68e0      	ldr	r0, [r4, #12]
   d565c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5660:	b108      	cbz	r0, d5666 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5662:	f002 f90d 	bl	d7880 <strdup>
   d5666:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5668:	2010      	movs	r0, #16
   d566a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d566e:	f7fe fd14 	bl	d409a <_Znwj>
   d5672:	4605      	mov	r5, r0
   d5674:	b1e8      	cbz	r0, d56b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5676:	2700      	movs	r7, #0
   d5678:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d567a:	2018      	movs	r0, #24
   d567c:	f7fe fd0d 	bl	d409a <_Znwj>
   d5680:	4604      	mov	r4, r0
   d5682:	b188      	cbz	r0, d56a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5684:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5686:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5688:	a802      	add	r0, sp, #8
   d568a:	f7ff ff54 	bl	d5536 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d568e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5690:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5692:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5694:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5696:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5698:	a906      	add	r1, sp, #24
   d569a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d569c:	60e3      	str	r3, [r4, #12]
   d569e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56a2:	9205      	str	r2, [sp, #20]
   d56a4:	f7ff feb4 	bl	d5410 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d56a8:	4b0d      	ldr	r3, [pc, #52]	; (d56e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d56aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d56ac:	4b0d      	ldr	r3, [pc, #52]	; (d56e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ae:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d56b0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d56b2:	a806      	add	r0, sp, #24
   d56b4:	f7ff febb 	bl	d542e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56b8:	a802      	add	r0, sp, #8
   d56ba:	f7ff fea0 	bl	d53fe <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d56be:	2200      	movs	r2, #0
   d56c0:	4629      	mov	r1, r5
   d56c2:	4809      	ldr	r0, [pc, #36]	; (d56e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d56c4:	f7ff fd58 	bl	d5178 <application_thread_invoke>
   d56c8:	4630      	mov	r0, r6
   d56ca:	f7ff fe98 	bl	d53fe <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d56ce:	2110      	movs	r1, #16
   d56d0:	4630      	mov	r0, r6
   d56d2:	f001 f930 	bl	d6936 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d56d6:	4668      	mov	r0, sp
   d56d8:	f7ff fea9 	bl	d542e <_ZN8particle5ErrorD1Ev>
    }
   d56dc:	b009      	add	sp, #36	; 0x24
   d56de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d56e0:	000d5593 	.word	0x000d5593
   d56e4:	000d5809 	.word	0x000d5809
   d56e8:	000d539b 	.word	0x000d539b

000d56ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d56ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56f0:	b08b      	sub	sp, #44	; 0x2c
   d56f2:	4606      	mov	r6, r0
   d56f4:	460f      	mov	r7, r1
   d56f6:	4690      	mov	r8, r2
   d56f8:	4699      	mov	r9, r3
   d56fa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d56fe:	f7ff fd89 	bl	d5214 <spark_cloud_flag_connected>
   d5702:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5704:	4683      	mov	fp, r0
   d5706:	bb30      	cbnz	r0, d5756 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5708:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d570c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d570e:	a905      	add	r1, sp, #20
   d5710:	4628      	mov	r0, r5
   d5712:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5716:	f7ff fe7b 	bl	d5410 <_ZN8particle5ErrorC1EOS0_>
   d571a:	2014      	movs	r0, #20
   d571c:	f7fe fcbd 	bl	d409a <_Znwj>
   d5720:	4604      	mov	r4, r0
   d5722:	b158      	cbz	r0, d573c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5724:	2302      	movs	r3, #2
   d5726:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5728:	2301      	movs	r3, #1
   d572a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d572c:	f8c0 b004 	str.w	fp, [r0, #4]
   d5730:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5734:	4629      	mov	r1, r5
   d5736:	300c      	adds	r0, #12
   d5738:	f7ff fe6a 	bl	d5410 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d573c:	4630      	mov	r0, r6
   d573e:	4621      	mov	r1, r4
   d5740:	f840 4b04 	str.w	r4, [r0], #4
   d5744:	f7ff ff08 	bl	d5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5748:	4628      	mov	r0, r5
   d574a:	f7ff fe70 	bl	d542e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d574e:	a805      	add	r0, sp, #20
   d5750:	f7ff fe6d 	bl	d542e <_ZN8particle5ErrorD1Ev>
   d5754:	e052      	b.n	d57fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5756:	2400      	movs	r4, #0
   d5758:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d575a:	2014      	movs	r0, #20
   d575c:	606c      	str	r4, [r5, #4]
   d575e:	60ac      	str	r4, [r5, #8]
   d5760:	9307      	str	r3, [sp, #28]
   d5762:	f7fe fc9a 	bl	d409a <_Znwj>
   d5766:	4601      	mov	r1, r0
   d5768:	b118      	cbz	r0, d5772 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d576a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d576c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d576e:	6044      	str	r4, [r0, #4]
   d5770:	6084      	str	r4, [r0, #8]
   d5772:	a804      	add	r0, sp, #16
   d5774:	9103      	str	r1, [sp, #12]
   d5776:	f7ff feef 	bl	d5558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d577a:	4b22      	ldr	r3, [pc, #136]	; (d5804 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d577c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d577e:	2008      	movs	r0, #8
   d5780:	f7fe fc8b 	bl	d409a <_Znwj>
   d5784:	4604      	mov	r4, r0
   d5786:	b128      	cbz	r0, d5794 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5788:	9b03      	ldr	r3, [sp, #12]
   d578a:	f840 3b04 	str.w	r3, [r0], #4
   d578e:	a904      	add	r1, sp, #16
   d5790:	f7ff fe17 	bl	d53c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5794:	9500      	str	r5, [sp, #0]
   d5796:	fa5f f38a 	uxtb.w	r3, sl
   d579a:	464a      	mov	r2, r9
   d579c:	4641      	mov	r1, r8
   d579e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d57a0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d57a2:	f7ff fd47 	bl	d5234 <spark_send_event>
   d57a6:	b920      	cbnz	r0, d57b2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d57a8:	9b03      	ldr	r3, [sp, #12]
   d57aa:	785b      	ldrb	r3, [r3, #1]
   d57ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d57b0:	b183      	cbz	r3, d57d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d57b2:	9b03      	ldr	r3, [sp, #12]
   d57b4:	9305      	str	r3, [sp, #20]
   d57b6:	a904      	add	r1, sp, #16
   d57b8:	a806      	add	r0, sp, #24
   d57ba:	f7ff fe02 	bl	d53c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d57be:	a905      	add	r1, sp, #20
   d57c0:	4630      	mov	r0, r6
   d57c2:	f7ff fe89 	bl	d54d8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57c6:	a806      	add	r0, sp, #24
   d57c8:	f7fe fd63 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57cc:	a804      	add	r0, sp, #16
   d57ce:	f7fe fd60 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57d2:	e013      	b.n	d57fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d57d4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d57d8:	a905      	add	r1, sp, #20
   d57da:	a803      	add	r0, sp, #12
   d57dc:	9205      	str	r2, [sp, #20]
   d57de:	f8ad 3018 	strh.w	r3, [sp, #24]
   d57e2:	f7ff fefd 	bl	d55e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d57e6:	a805      	add	r0, sp, #20
   d57e8:	f7ff fe21 	bl	d542e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d57ec:	a805      	add	r0, sp, #20
   d57ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d57f0:	f7ff fe83 	bl	d54fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d57f4:	a806      	add	r0, sp, #24
   d57f6:	f7fe fd4c 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57fa:	e7da      	b.n	d57b2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d57fc:	4630      	mov	r0, r6
   d57fe:	b00b      	add	sp, #44	; 0x2c
   d5800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5804:	000d5979 	.word	0x000d5979

000d5808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5808:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d580c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d580e:	d006      	beq.n	d581e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5810:	2a03      	cmp	r2, #3
   d5812:	d017      	beq.n	d5844 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5814:	2a01      	cmp	r2, #1
   d5816:	d122      	bne.n	d585e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5818:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d581a:	6003      	str	r3, [r0, #0]
	      break;
   d581c:	e01f      	b.n	d585e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d581e:	2018      	movs	r0, #24
   d5820:	680e      	ldr	r6, [r1, #0]
   d5822:	f7fe fc3a 	bl	d409a <_Znwj>
   d5826:	4605      	mov	r5, r0
   d5828:	b150      	cbz	r0, d5840 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d582a:	4631      	mov	r1, r6
   d582c:	f7ff fec8 	bl	d55c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5830:	6930      	ldr	r0, [r6, #16]
   d5832:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5836:	b108      	cbz	r0, d583c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5838:	f002 f822 	bl	d7880 <strdup>
   d583c:	6128      	str	r0, [r5, #16]
   d583e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5840:	6025      	str	r5, [r4, #0]
   d5842:	e00c      	b.n	d585e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5844:	6804      	ldr	r4, [r0, #0]
   d5846:	b154      	cbz	r4, d585e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5848:	f104 0010 	add.w	r0, r4, #16
   d584c:	f7ff fdef 	bl	d542e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5850:	4620      	mov	r0, r4
   d5852:	f7ff fdd4 	bl	d53fe <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5856:	2118      	movs	r1, #24
   d5858:	4620      	mov	r0, r4
   d585a:	f001 f86c 	bl	d6936 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d585e:	2000      	movs	r0, #0
   d5860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5862 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5862:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5864:	2300      	movs	r3, #0
   d5866:	6083      	str	r3, [r0, #8]
   d5868:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d586a:	4604      	mov	r4, r0
   d586c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d586e:	b12b      	cbz	r3, d587c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5870:	2202      	movs	r2, #2
   d5872:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5874:	68eb      	ldr	r3, [r5, #12]
   d5876:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5878:	68ab      	ldr	r3, [r5, #8]
   d587a:	60a3      	str	r3, [r4, #8]
	}
    }
   d587c:	4620      	mov	r0, r4
   d587e:	bd38      	pop	{r3, r4, r5, pc}

000d5880 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5880:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5882:	b570      	push	{r4, r5, r6, lr}
   d5884:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5886:	d006      	beq.n	d5896 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5888:	2a03      	cmp	r2, #3
   d588a:	d011      	beq.n	d58b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d588c:	2a01      	cmp	r2, #1
   d588e:	d118      	bne.n	d58c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5890:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5892:	6003      	str	r3, [r0, #0]
	      break;
   d5894:	e015      	b.n	d58c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5896:	2014      	movs	r0, #20
   d5898:	680e      	ldr	r6, [r1, #0]
   d589a:	f7fe fbfe 	bl	d409a <_Znwj>
   d589e:	4605      	mov	r5, r0
   d58a0:	b120      	cbz	r0, d58ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58a2:	4631      	mov	r1, r6
   d58a4:	f7ff ffdd 	bl	d5862 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d58a8:	7c33      	ldrb	r3, [r6, #16]
   d58aa:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58ac:	6025      	str	r5, [r4, #0]
   d58ae:	e008      	b.n	d58c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58b0:	6804      	ldr	r4, [r0, #0]
   d58b2:	b134      	cbz	r4, d58c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58b4:	4620      	mov	r0, r4
   d58b6:	f7ff fda2 	bl	d53fe <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58ba:	2114      	movs	r1, #20
   d58bc:	4620      	mov	r0, r4
   d58be:	f001 f83a 	bl	d6936 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d58c2:	2000      	movs	r0, #0
   d58c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d58c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d58c8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d58ca:	2300      	movs	r3, #0
   d58cc:	b087      	sub	sp, #28
   d58ce:	460c      	mov	r4, r1
   d58d0:	f3bf 8f5f 	dmb	sy
   d58d4:	e850 6f00 	ldrex	r6, [r0]
   d58d8:	e840 3200 	strex	r2, r3, [r0]
   d58dc:	2a00      	cmp	r2, #0
   d58de:	d1f9      	bne.n	d58d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d58e0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d58e4:	2e00      	cmp	r6, #0
   d58e6:	d03f      	beq.n	d5968 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d58e8:	4618      	mov	r0, r3
   d58ea:	f7ff fc3d 	bl	d5168 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d58ee:	4607      	mov	r7, r0
   d58f0:	b120      	cbz	r0, d58fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d58f2:	4621      	mov	r1, r4
   d58f4:	4630      	mov	r0, r6
   d58f6:	f7ff fe53 	bl	d55a0 <_ZNKSt8functionIFvRKbEEclES1_>
   d58fa:	e02e      	b.n	d595a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d58fc:	4631      	mov	r1, r6
   d58fe:	a801      	add	r0, sp, #4
   d5900:	f7ff ffaf 	bl	d5862 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5904:	7823      	ldrb	r3, [r4, #0]
   d5906:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d590a:	2010      	movs	r0, #16
   d590c:	f7fe fbc5 	bl	d409a <_Znwj>
   d5910:	4605      	mov	r5, r0
   d5912:	b1d0      	cbz	r0, d594a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5914:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5916:	2014      	movs	r0, #20
   d5918:	f7fe fbbf 	bl	d409a <_Znwj>
   d591c:	4604      	mov	r4, r0
   d591e:	b178      	cbz	r0, d5940 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5920:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5922:	4601      	mov	r1, r0
   d5924:	a801      	add	r0, sp, #4
   d5926:	f7ff fe06 	bl	d5536 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d592a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d592c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d592e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5930:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5932:	9203      	str	r2, [sp, #12]
   d5934:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5936:	60e3      	str	r3, [r4, #12]
   d5938:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d593c:	9204      	str	r2, [sp, #16]
   d593e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5940:	4b0a      	ldr	r3, [pc, #40]	; (d596c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5942:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5944:	4b0a      	ldr	r3, [pc, #40]	; (d5970 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5946:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5948:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d594a:	a801      	add	r0, sp, #4
   d594c:	f7ff fd57 	bl	d53fe <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5950:	2200      	movs	r2, #0
   d5952:	4629      	mov	r1, r5
   d5954:	4807      	ldr	r0, [pc, #28]	; (d5974 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5956:	f7ff fc0f 	bl	d5178 <application_thread_invoke>
   d595a:	4630      	mov	r0, r6
   d595c:	f7ff fd4f 	bl	d53fe <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5960:	2110      	movs	r1, #16
   d5962:	4630      	mov	r0, r6
   d5964:	f000 ffe7 	bl	d6936 <_ZdlPvj>
        }
    }
   d5968:	b007      	add	sp, #28
   d596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d596c:	000d55b3 	.word	0x000d55b3
   d5970:	000d5881 	.word	0x000d5881
   d5974:	000d539b 	.word	0x000d539b

000d5978 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5978:	b530      	push	{r4, r5, lr}
   d597a:	b085      	sub	sp, #20
   d597c:	4604      	mov	r4, r0
   d597e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5980:	4668      	mov	r0, sp
   d5982:	4611      	mov	r1, r2
   d5984:	f7ff fdb9 	bl	d54fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5988:	b17c      	cbz	r4, d59aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d598a:	b224      	sxth	r4, r4
   d598c:	4628      	mov	r0, r5
   d598e:	b10d      	cbz	r5, d5994 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5990:	f001 ff76 	bl	d7880 <strdup>
   d5994:	9002      	str	r0, [sp, #8]
   d5996:	a902      	add	r1, sp, #8
   d5998:	4668      	mov	r0, sp
   d599a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d599e:	f7ff fe1f 	bl	d55e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d59a2:	a802      	add	r0, sp, #8
   d59a4:	f7ff fd43 	bl	d542e <_ZN8particle5ErrorD1Ev>
   d59a8:	e01d      	b.n	d59e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d59aa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d59ac:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d59b0:	f04f 0201 	mov.w	r2, #1
   d59b4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d59b8:	42a3      	cmp	r3, r4
   d59ba:	d103      	bne.n	d59c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d59bc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d59c0:	2900      	cmp	r1, #0
   d59c2:	d1f7      	bne.n	d59b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d59c4:	d002      	beq.n	d59cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d59c6:	f88d 3008 	strb.w	r3, [sp, #8]
   d59ca:	e00c      	b.n	d59e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d59cc:	f110 010c 	adds.w	r1, r0, #12
   d59d0:	f04f 0301 	mov.w	r3, #1
   d59d4:	bf18      	it	ne
   d59d6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d59d8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d59dc:	3004      	adds	r0, #4
   d59de:	f800 3c03 	strb.w	r3, [r0, #-3]
   d59e2:	f7ff ff71 	bl	d58c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d59e6:	a801      	add	r0, sp, #4
   d59e8:	f7fe fc53 	bl	d4292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d59ec:	b005      	add	sp, #20
   d59ee:	bd30      	pop	{r4, r5, pc}

000d59f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59f0:	2200      	movs	r2, #0
   d59f2:	4611      	mov	r1, r2
   d59f4:	6840      	ldr	r0, [r0, #4]
   d59f6:	f7ff bc7d 	b.w	d52f4 <network_listening>

000d59fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59fa:	2200      	movs	r2, #0
   d59fc:	4611      	mov	r1, r2
   d59fe:	6840      	ldr	r0, [r0, #4]
   d5a00:	f7ff bc88 	b.w	d5314 <network_get_listen_timeout>

000d5a04 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a04:	2200      	movs	r2, #0
   d5a06:	6840      	ldr	r0, [r0, #4]
   d5a08:	f7ff bc7c 	b.w	d5304 <network_set_listen_timeout>

000d5a0c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a0c:	2200      	movs	r2, #0
   d5a0e:	f081 0101 	eor.w	r1, r1, #1
   d5a12:	6840      	ldr	r0, [r0, #4]
   d5a14:	f7ff bc66 	b.w	d52e4 <network_listen>

000d5a18 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5a18:	2300      	movs	r3, #0
   d5a1a:	461a      	mov	r2, r3
   d5a1c:	4619      	mov	r1, r3
   d5a1e:	6840      	ldr	r0, [r0, #4]
   d5a20:	f7ff bc58 	b.w	d52d4 <network_off>

000d5a24 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a24:	2300      	movs	r3, #0
   d5a26:	461a      	mov	r2, r3
   d5a28:	4619      	mov	r1, r3
   d5a2a:	6840      	ldr	r0, [r0, #4]
   d5a2c:	f7ff bc4a 	b.w	d52c4 <network_on>

000d5a30 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a30:	2200      	movs	r2, #0
   d5a32:	4611      	mov	r1, r2
   d5a34:	6840      	ldr	r0, [r0, #4]
   d5a36:	f7ff bc3d 	b.w	d52b4 <network_ready>

000d5a3a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a3a:	2200      	movs	r2, #0
   d5a3c:	4611      	mov	r1, r2
   d5a3e:	6840      	ldr	r0, [r0, #4]
   d5a40:	f7ff bc28 	b.w	d5294 <network_connecting>

000d5a44 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a44:	2200      	movs	r2, #0
   d5a46:	2102      	movs	r1, #2
   d5a48:	6840      	ldr	r0, [r0, #4]
   d5a4a:	f7ff bc2b 	b.w	d52a4 <network_disconnect>

000d5a4e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a4e:	2300      	movs	r3, #0
   d5a50:	461a      	mov	r2, r3
   d5a52:	6840      	ldr	r0, [r0, #4]
   d5a54:	f7ff bc16 	b.w	d5284 <network_connect>

000d5a58 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a58:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a5a:	2203      	movs	r2, #3
   d5a5c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a5e:	4a02      	ldr	r2, [pc, #8]	; (d5a68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a60:	601a      	str	r2, [r3, #0]
   d5a62:	4770      	bx	lr
   d5a64:	2003e36c 	.word	0x2003e36c
   d5a68:	000d8464 	.word	0x000d8464

000d5a6c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5a6c:	4770      	bx	lr

000d5a6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a70:	4606      	mov	r6, r0
   d5a72:	4615      	mov	r5, r2
   d5a74:	460c      	mov	r4, r1
   d5a76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a78:	42bc      	cmp	r4, r7
   d5a7a:	d006      	beq.n	d5a8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5a7c:	6833      	ldr	r3, [r6, #0]
   d5a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5a82:	689b      	ldr	r3, [r3, #8]
   d5a84:	4630      	mov	r0, r6
   d5a86:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a88:	e7f6      	b.n	d5a78 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5a8a:	4628      	mov	r0, r5
   d5a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a8e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5a8e:	2200      	movs	r2, #0
   d5a90:	7c00      	ldrb	r0, [r0, #16]
   d5a92:	f7ff ba79 	b.w	d4f88 <HAL_I2C_Write_Data>

000d5a96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5a96:	2100      	movs	r1, #0
   d5a98:	7c00      	ldrb	r0, [r0, #16]
   d5a9a:	f7ff ba7d 	b.w	d4f98 <HAL_I2C_Available_Data>

000d5a9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5a9e:	2100      	movs	r1, #0
   d5aa0:	7c00      	ldrb	r0, [r0, #16]
   d5aa2:	f7ff ba81 	b.w	d4fa8 <HAL_I2C_Read_Data>

000d5aa6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5aa6:	2100      	movs	r1, #0
   d5aa8:	7c00      	ldrb	r0, [r0, #16]
   d5aaa:	f7ff ba85 	b.w	d4fb8 <HAL_I2C_Peek_Data>

000d5aae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5aae:	2100      	movs	r1, #0
   d5ab0:	7c00      	ldrb	r0, [r0, #16]
   d5ab2:	f7ff ba89 	b.w	d4fc8 <HAL_I2C_Flush_Data>

000d5ab6 <_ZN7TwoWireD0Ev>:
   d5ab6:	b510      	push	{r4, lr}
   d5ab8:	2114      	movs	r1, #20
   d5aba:	4604      	mov	r4, r0
   d5abc:	f000 ff3b 	bl	d6936 <_ZdlPvj>
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	bd10      	pop	{r4, pc}

000d5ac4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5ac4:	b510      	push	{r4, lr}
   d5ac6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5acc:	4608      	mov	r0, r1
   d5ace:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5ad0:	2100      	movs	r1, #0
   d5ad2:	4b04      	ldr	r3, [pc, #16]	; (d5ae4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5ad4:	7420      	strb	r0, [r4, #16]
   d5ad6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5ad8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5ada:	f7ff fa85 	bl	d4fe8 <HAL_I2C_Init>

}
   d5ade:	4620      	mov	r0, r4
   d5ae0:	bd10      	pop	{r4, pc}
   d5ae2:	bf00      	nop
   d5ae4:	000d8498 	.word	0x000d8498

000d5ae8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5ae8:	2300      	movs	r3, #0
   d5aea:	461a      	mov	r2, r3
   d5aec:	4619      	mov	r1, r3
   d5aee:	7c00      	ldrb	r0, [r0, #16]
   d5af0:	f7ff ba2a 	b.w	d4f48 <HAL_I2C_Begin>

000d5af4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5af4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5af6:	2400      	movs	r4, #0
   d5af8:	7c00      	ldrb	r0, [r0, #16]
   d5afa:	9400      	str	r4, [sp, #0]
   d5afc:	f7ff fa2c 	bl	d4f58 <HAL_I2C_Request_Data>
  return result;
}
   d5b00:	b2c0      	uxtb	r0, r0
   d5b02:	b002      	add	sp, #8
   d5b04:	bd10      	pop	{r4, pc}

000d5b06 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5b06:	2301      	movs	r3, #1
   d5b08:	f7ff bff4 	b.w	d5af4 <_ZN7TwoWire11requestFromEhhh>

000d5b0c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5b0c:	2200      	movs	r2, #0
   d5b0e:	7c00      	ldrb	r0, [r0, #16]
   d5b10:	f7ff ba2a 	b.w	d4f68 <HAL_I2C_Begin_Transmission>

000d5b14 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5b14:	2200      	movs	r2, #0
   d5b16:	7c00      	ldrb	r0, [r0, #16]
   d5b18:	f7ff ba2e 	b.w	d4f78 <HAL_I2C_End_Transmission>

000d5b1c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5b1c:	2101      	movs	r1, #1
   d5b1e:	f7ff bff9 	b.w	d5b14 <_ZN7TwoWire15endTransmissionEh>

000d5b22 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5b22:	2100      	movs	r1, #0
   d5b24:	7c00      	ldrb	r0, [r0, #16]
   d5b26:	f7ff ba57 	b.w	d4fd8 <HAL_I2C_Is_Enabled>

000d5b2a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b2a:	4770      	bx	lr

000d5b2c <_ZN9IPAddressD0Ev>:
   d5b2c:	b510      	push	{r4, lr}
   d5b2e:	2118      	movs	r1, #24
   d5b30:	4604      	mov	r4, r0
   d5b32:	f000 ff00 	bl	d6936 <_ZdlPvj>
   d5b36:	4620      	mov	r0, r4
   d5b38:	bd10      	pop	{r4, pc}

000d5b3a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b3c:	7d03      	ldrb	r3, [r0, #20]
   d5b3e:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b40:	b08d      	sub	sp, #52	; 0x34
   d5b42:	460e      	mov	r6, r1
   d5b44:	f100 0704 	add.w	r7, r0, #4
   d5b48:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b4c:	d002      	beq.n	d5b54 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5b4e:	f100 0508 	add.w	r5, r0, #8
   d5b52:	e018      	b.n	d5b86 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b54:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b56:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b58:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b5c:	232f      	movs	r3, #47	; 0x2f
   d5b5e:	462a      	mov	r2, r5
   d5b60:	200a      	movs	r0, #10
   d5b62:	f7ff fa49 	bl	d4ff8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5b66:	4628      	mov	r0, r5
   d5b68:	f001 fea5 	bl	d78b6 <strlen>
   d5b6c:	6833      	ldr	r3, [r6, #0]
   d5b6e:	4602      	mov	r2, r0
   d5b70:	68db      	ldr	r3, [r3, #12]
   d5b72:	4629      	mov	r1, r5
   d5b74:	4630      	mov	r0, r6
   d5b76:	4798      	blx	r3
   d5b78:	e00f      	b.n	d5b9a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5b7a:	b124      	cbz	r4, d5b86 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5b7c:	212e      	movs	r1, #46	; 0x2e
   d5b7e:	4630      	mov	r0, r6
   d5b80:	f000 f9ca 	bl	d5f18 <_ZN5Print5printEc>
   d5b84:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5b86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b8a:	220a      	movs	r2, #10
   d5b8c:	4630      	mov	r0, r6
   d5b8e:	f000 fa09 	bl	d5fa4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b92:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b94:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b96:	d1f0      	bne.n	d5b7a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b98:	4620      	mov	r0, r4
    }
    return n;
}
   d5b9a:	b00d      	add	sp, #52	; 0x34
   d5b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5ba0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5ba0:	b510      	push	{r4, lr}
   d5ba2:	4b05      	ldr	r3, [pc, #20]	; (d5bb8 <_ZN9IPAddressC1Ev+0x18>)
   d5ba4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5ba6:	2211      	movs	r2, #17
   d5ba8:	f840 3b04 	str.w	r3, [r0], #4
   d5bac:	2100      	movs	r1, #0
   d5bae:	f001 fe24 	bl	d77fa <memset>
{
    clear();
}
   d5bb2:	4620      	mov	r0, r4
   d5bb4:	bd10      	pop	{r4, pc}
   d5bb6:	bf00      	nop
   d5bb8:	000d84c0 	.word	0x000d84c0

000d5bbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5bbc:	4603      	mov	r3, r0
   d5bbe:	4a07      	ldr	r2, [pc, #28]	; (d5bdc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5bc0:	b510      	push	{r4, lr}
   d5bc2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5bc6:	f101 0210 	add.w	r2, r1, #16
   d5bca:	f851 4b04 	ldr.w	r4, [r1], #4
   d5bce:	f843 4b04 	str.w	r4, [r3], #4
   d5bd2:	4291      	cmp	r1, r2
   d5bd4:	d1f9      	bne.n	d5bca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5bd6:	780a      	ldrb	r2, [r1, #0]
   d5bd8:	701a      	strb	r2, [r3, #0]
}
   d5bda:	bd10      	pop	{r4, pc}
   d5bdc:	000d84c0 	.word	0x000d84c0

000d5be0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5be0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5be2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5be6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5bea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5bee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5bf2:	2304      	movs	r3, #4
   d5bf4:	6041      	str	r1, [r0, #4]
   d5bf6:	7503      	strb	r3, [r0, #20]
   d5bf8:	bd10      	pop	{r4, pc}

000d5bfa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5bfc:	780d      	ldrb	r5, [r1, #0]
   d5bfe:	788b      	ldrb	r3, [r1, #2]
   d5c00:	784a      	ldrb	r2, [r1, #1]
   d5c02:	78c9      	ldrb	r1, [r1, #3]
   d5c04:	9100      	str	r1, [sp, #0]
   d5c06:	4629      	mov	r1, r5
   d5c08:	f7ff ffea 	bl	d5be0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5c0c:	b003      	add	sp, #12
   d5c0e:	bd30      	pop	{r4, r5, pc}

000d5c10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c10:	4b01      	ldr	r3, [pc, #4]	; (d5c18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c12:	4a02      	ldr	r2, [pc, #8]	; (d5c1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c14:	601a      	str	r2, [r3, #0]
   d5c16:	4770      	bx	lr
   d5c18:	2003e374 	.word	0x2003e374
   d5c1c:	000d853f 	.word	0x000d853f

000d5c20 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c20:	2200      	movs	r2, #0
   d5c22:	4611      	mov	r1, r2
   d5c24:	6840      	ldr	r0, [r0, #4]
   d5c26:	f7ff bb65 	b.w	d52f4 <network_listening>

000d5c2a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c2a:	2200      	movs	r2, #0
   d5c2c:	4611      	mov	r1, r2
   d5c2e:	6840      	ldr	r0, [r0, #4]
   d5c30:	f7ff bb70 	b.w	d5314 <network_get_listen_timeout>

000d5c34 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c34:	2200      	movs	r2, #0
   d5c36:	6840      	ldr	r0, [r0, #4]
   d5c38:	f7ff bb64 	b.w	d5304 <network_set_listen_timeout>

000d5c3c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c3c:	2200      	movs	r2, #0
   d5c3e:	f081 0101 	eor.w	r1, r1, #1
   d5c42:	6840      	ldr	r0, [r0, #4]
   d5c44:	f7ff bb4e 	b.w	d52e4 <network_listen>

000d5c48 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5c48:	2300      	movs	r3, #0
   d5c4a:	461a      	mov	r2, r3
   d5c4c:	2101      	movs	r1, #1
   d5c4e:	6840      	ldr	r0, [r0, #4]
   d5c50:	f7ff bb40 	b.w	d52d4 <network_off>

000d5c54 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c54:	2300      	movs	r3, #0
   d5c56:	461a      	mov	r2, r3
   d5c58:	4619      	mov	r1, r3
   d5c5a:	6840      	ldr	r0, [r0, #4]
   d5c5c:	f7ff bb32 	b.w	d52c4 <network_on>

000d5c60 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c60:	2200      	movs	r2, #0
   d5c62:	4611      	mov	r1, r2
   d5c64:	6840      	ldr	r0, [r0, #4]
   d5c66:	f7ff bb25 	b.w	d52b4 <network_ready>

000d5c6a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	4611      	mov	r1, r2
   d5c6e:	6840      	ldr	r0, [r0, #4]
   d5c70:	f7ff bb10 	b.w	d5294 <network_connecting>

000d5c74 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c74:	2200      	movs	r2, #0
   d5c76:	2102      	movs	r1, #2
   d5c78:	6840      	ldr	r0, [r0, #4]
   d5c7a:	f7ff bb13 	b.w	d52a4 <network_disconnect>

000d5c7e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c7e:	2300      	movs	r3, #0
   d5c80:	461a      	mov	r2, r3
   d5c82:	6840      	ldr	r0, [r0, #4]
   d5c84:	f7ff bafe 	b.w	d5284 <network_connect>

000d5c88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5c88:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c8a:	4605      	mov	r5, r0
   d5c8c:	b188      	cbz	r0, d5cb2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c8e:	6804      	ldr	r4, [r0, #0]
   d5c90:	b14c      	cbz	r4, d5ca6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5c92:	68a3      	ldr	r3, [r4, #8]
   d5c94:	b11b      	cbz	r3, d5c9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c96:	2203      	movs	r2, #3
   d5c98:	4621      	mov	r1, r4
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c9e:	2110      	movs	r1, #16
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	f000 fe48 	bl	d6936 <_ZdlPvj>
   d5ca6:	4628      	mov	r0, r5
   d5ca8:	2114      	movs	r1, #20
      }
   d5caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cae:	f000 be42 	b.w	d6936 <_ZdlPvj>
   d5cb2:	bd38      	pop	{r3, r4, r5, pc}

000d5cb4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5cb4:	b110      	cbz	r0, d5cbc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5cb6:	6803      	ldr	r3, [r0, #0]
   d5cb8:	685b      	ldr	r3, [r3, #4]
   d5cba:	4718      	bx	r3
   d5cbc:	4770      	bx	lr

000d5cbe <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5cbe:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5cc0:	6803      	ldr	r3, [r0, #0]
   d5cc2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5cc4:	b1bb      	cbz	r3, d5cf6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5cc6:	6858      	ldr	r0, [r3, #4]
   d5cc8:	f7ff f8ae 	bl	d4e28 <os_thread_is_current>
   d5ccc:	b978      	cbnz	r0, d5cee <_ZN6ThreadD1Ev+0x30>
   d5cce:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5cd0:	7c5a      	ldrb	r2, [r3, #17]
   d5cd2:	b912      	cbnz	r2, d5cda <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5cd4:	6858      	ldr	r0, [r3, #4]
   d5cd6:	f7ff f8af 	bl	d4e38 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5cda:	6823      	ldr	r3, [r4, #0]
   d5cdc:	6858      	ldr	r0, [r3, #4]
   d5cde:	f7ff f8b3 	bl	d4e48 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ce2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ce4:	2300      	movs	r3, #0
   d5ce6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5ce8:	b128      	cbz	r0, d5cf6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5cea:	f7ff ffcd 	bl	d5c88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cee:	6820      	ldr	r0, [r4, #0]
   d5cf0:	b108      	cbz	r0, d5cf6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5cf2:	f7ff ffc9 	bl	d5c88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	bd10      	pop	{r4, pc}
	...

000d5cfc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5cfc:	b538      	push	{r3, r4, r5, lr}
   d5cfe:	4b0c      	ldr	r3, [pc, #48]	; (d5d30 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5d00:	6003      	str	r3, [r0, #0]
   d5d02:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d04:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5d08:	b108      	cbz	r0, d5d0e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d0a:	f7fe f9ca 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d0e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5d12:	b135      	cbz	r5, d5d22 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d14:	4628      	mov	r0, r5
   d5d16:	f7ff ffd2 	bl	d5cbe <_ZN6ThreadD1Ev>
   d5d1a:	2104      	movs	r1, #4
   d5d1c:	4628      	mov	r0, r5
   d5d1e:	f000 fe0a 	bl	d6936 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d22:	68a0      	ldr	r0, [r4, #8]
   d5d24:	b108      	cbz	r0, d5d2a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5d26:	f7ff ffc5 	bl	d5cb4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	bd38      	pop	{r3, r4, r5, pc}
   d5d2e:	bf00      	nop
   d5d30:	000d85b4 	.word	0x000d85b4

000d5d34 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5d34:	b538      	push	{r3, r4, r5, lr}
   d5d36:	4c0e      	ldr	r4, [pc, #56]	; (d5d70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5d38:	4b0e      	ldr	r3, [pc, #56]	; (d5d74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5d3a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5d3c:	2500      	movs	r5, #0
   d5d3e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5d40:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5d44:	6063      	str	r3, [r4, #4]
   d5d46:	60a5      	str	r5, [r4, #8]
   d5d48:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d4c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5d50:	f7ff f88a 	bl	d4e68 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5d54:	4b08      	ldr	r3, [pc, #32]	; (d5d78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5d56:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d5a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5d5e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5d60:	4620      	mov	r0, r4
   d5d62:	4a06      	ldr	r2, [pc, #24]	; (d5d7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5d64:	4906      	ldr	r1, [pc, #24]	; (d5d80 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5d6a:	f000 bddf 	b.w	d692c <__aeabi_atexit>
   d5d6e:	bf00      	nop
   d5d70:	2003e378 	.word	0x2003e378
   d5d74:	000d85e8 	.word	0x000d85e8
   d5d78:	000d85b4 	.word	0x000d85b4
   d5d7c:	2003e2d0 	.word	0x2003e2d0
   d5d80:	000d5cfd 	.word	0x000d5cfd

000d5d84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d84:	2300      	movs	r3, #0
   d5d86:	461a      	mov	r2, r3
   d5d88:	6840      	ldr	r0, [r0, #4]
   d5d8a:	f7ff ba7b 	b.w	d5284 <network_connect>

000d5d8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5d8e:	2200      	movs	r2, #0
   d5d90:	2102      	movs	r1, #2
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	f7ff ba86 	b.w	d52a4 <network_disconnect>

000d5d98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5d98:	2200      	movs	r2, #0
   d5d9a:	4611      	mov	r1, r2
   d5d9c:	6840      	ldr	r0, [r0, #4]
   d5d9e:	f7ff ba79 	b.w	d5294 <network_connecting>

000d5da2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5da2:	2200      	movs	r2, #0
   d5da4:	4611      	mov	r1, r2
   d5da6:	6840      	ldr	r0, [r0, #4]
   d5da8:	f7ff ba84 	b.w	d52b4 <network_ready>

000d5dac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5dac:	2300      	movs	r3, #0
   d5dae:	461a      	mov	r2, r3
   d5db0:	4619      	mov	r1, r3
   d5db2:	6840      	ldr	r0, [r0, #4]
   d5db4:	f7ff ba86 	b.w	d52c4 <network_on>

000d5db8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5db8:	2300      	movs	r3, #0
   d5dba:	461a      	mov	r2, r3
   d5dbc:	4619      	mov	r1, r3
   d5dbe:	6840      	ldr	r0, [r0, #4]
   d5dc0:	f7ff ba88 	b.w	d52d4 <network_off>

000d5dc4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	f081 0101 	eor.w	r1, r1, #1
   d5dca:	6840      	ldr	r0, [r0, #4]
   d5dcc:	f7ff ba8a 	b.w	d52e4 <network_listen>

000d5dd0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	f7ff ba96 	b.w	d5304 <network_set_listen_timeout>

000d5dd8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5dd8:	2200      	movs	r2, #0
   d5dda:	4611      	mov	r1, r2
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7ff ba99 	b.w	d5314 <network_get_listen_timeout>

000d5de2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5de2:	2200      	movs	r2, #0
   d5de4:	4611      	mov	r1, r2
   d5de6:	6840      	ldr	r0, [r0, #4]
   d5de8:	f7ff ba84 	b.w	d52f4 <network_listening>

000d5dec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5df0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5df2:	b095      	sub	sp, #84	; 0x54
   d5df4:	4616      	mov	r6, r2
   d5df6:	460d      	mov	r5, r1
   d5df8:	4607      	mov	r7, r0
    IPAddress addr;
   d5dfa:	f7ff fed1 	bl	d5ba0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5dfe:	4621      	mov	r1, r4
   d5e00:	2220      	movs	r2, #32
   d5e02:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e04:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e06:	f001 fcf8 	bl	d77fa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e0a:	2340      	movs	r3, #64	; 0x40
   d5e0c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e0e:	4621      	mov	r1, r4
   d5e10:	466b      	mov	r3, sp
   d5e12:	aa0c      	add	r2, sp, #48	; 0x30
   d5e14:	4630      	mov	r0, r6
   d5e16:	f7ff f8ff 	bl	d5018 <netdb_getaddrinfo>
    if (!r) {
   d5e1a:	4604      	mov	r4, r0
   d5e1c:	2800      	cmp	r0, #0
   d5e1e:	d144      	bne.n	d5eaa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e20:	4602      	mov	r2, r0
   d5e22:	2101      	movs	r1, #1
   d5e24:	6868      	ldr	r0, [r5, #4]
   d5e26:	f7ff fa45 	bl	d52b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e2a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e2c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e2e:	4622      	mov	r2, r4
   d5e30:	6868      	ldr	r0, [r5, #4]
   d5e32:	f7ff fa3f 	bl	d52b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e36:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e38:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5e3a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e3c:	2e00      	cmp	r6, #0
   d5e3e:	d034      	beq.n	d5eaa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5e40:	2900      	cmp	r1, #0
   d5e42:	d132      	bne.n	d5eaa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e44:	6873      	ldr	r3, [r6, #4]
   d5e46:	2b02      	cmp	r3, #2
   d5e48:	d002      	beq.n	d5e50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5e4a:	2b0a      	cmp	r3, #10
   d5e4c:	d009      	beq.n	d5e62 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5e4e:	e02a      	b.n	d5ea6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5e50:	f1b8 0f00 	cmp.w	r8, #0
   d5e54:	d027      	beq.n	d5ea6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e56:	6971      	ldr	r1, [r6, #20]
   d5e58:	4638      	mov	r0, r7
   d5e5a:	3104      	adds	r1, #4
   d5e5c:	f7ff fecd 	bl	d5bfa <_ZN9IPAddressaSEPKh>
   d5e60:	e020      	b.n	d5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e62:	f1b9 0f00 	cmp.w	r9, #0
   d5e66:	d01e      	beq.n	d5ea6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e68:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e6a:	2211      	movs	r2, #17
   d5e6c:	a801      	add	r0, sp, #4
   d5e6e:	f001 fcc4 	bl	d77fa <memset>
                    a.v = 6;
   d5e72:	2306      	movs	r3, #6
   d5e74:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e78:	ad01      	add	r5, sp, #4
   d5e7a:	f104 0308 	add.w	r3, r4, #8
   d5e7e:	3418      	adds	r4, #24
   d5e80:	6818      	ldr	r0, [r3, #0]
   d5e82:	6859      	ldr	r1, [r3, #4]
   d5e84:	462a      	mov	r2, r5
   d5e86:	c203      	stmia	r2!, {r0, r1}
   d5e88:	3308      	adds	r3, #8
   d5e8a:	42a3      	cmp	r3, r4
   d5e8c:	4615      	mov	r5, r2
   d5e8e:	d1f7      	bne.n	d5e80 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5e90:	a901      	add	r1, sp, #4
   d5e92:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5e94:	ad07      	add	r5, sp, #28
   d5e96:	f7ff fe91 	bl	d5bbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e9c:	1d3c      	adds	r4, r7, #4
   d5e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ea0:	682b      	ldr	r3, [r5, #0]
   d5ea2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ea4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ea6:	69f6      	ldr	r6, [r6, #28]
   d5ea8:	e7c8      	b.n	d5e3c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5eaa:	9800      	ldr	r0, [sp, #0]
   d5eac:	f7ff f8ac 	bl	d5008 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5eb0:	4638      	mov	r0, r7
   d5eb2:	b015      	add	sp, #84	; 0x54
   d5eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5eb8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5eb8:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5eba:	4a03      	ldr	r2, [pc, #12]	; (d5ec8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ebc:	601a      	str	r2, [r3, #0]
   d5ebe:	2200      	movs	r2, #0
   d5ec0:	605a      	str	r2, [r3, #4]
   d5ec2:	4770      	bx	lr
   d5ec4:	2003e54c 	.word	0x2003e54c
   d5ec8:	000d85e8 	.word	0x000d85e8

000d5ecc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ece:	4606      	mov	r6, r0
   d5ed0:	460d      	mov	r5, r1
   d5ed2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5ed4:	2400      	movs	r4, #0
  while (size--) {
   d5ed6:	42bd      	cmp	r5, r7
   d5ed8:	d00c      	beq.n	d5ef4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5eda:	6833      	ldr	r3, [r6, #0]
   d5edc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5ee0:	689b      	ldr	r3, [r3, #8]
   d5ee2:	4630      	mov	r0, r6
   d5ee4:	4798      	blx	r3
     if (chunk>=0)
   d5ee6:	2800      	cmp	r0, #0
   d5ee8:	db01      	blt.n	d5eee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5eea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5eec:	e7f3      	b.n	d5ed6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5eee:	2c00      	cmp	r4, #0
   d5ef0:	bf08      	it	eq
   d5ef2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ef8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5ef8:	b570      	push	{r4, r5, r6, lr}
   d5efa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5efc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5efe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f00:	b149      	cbz	r1, d5f16 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f02:	f001 fcd8 	bl	d78b6 <strlen>
   d5f06:	682b      	ldr	r3, [r5, #0]
   d5f08:	4602      	mov	r2, r0
   d5f0a:	4621      	mov	r1, r4
   d5f0c:	4628      	mov	r0, r5
   d5f0e:	68db      	ldr	r3, [r3, #12]
    }
   d5f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f14:	4718      	bx	r3
    }
   d5f16:	bd70      	pop	{r4, r5, r6, pc}

000d5f18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5f18:	6803      	ldr	r3, [r0, #0]
   d5f1a:	689b      	ldr	r3, [r3, #8]
   d5f1c:	4718      	bx	r3

000d5f1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5f20:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f22:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5f24:	f7ff fff8 	bl	d5f18 <_ZN5Print5printEc>
  n += print('\n');
   d5f28:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5f2a:	4604      	mov	r4, r0
  n += print('\n');
   d5f2c:	4628      	mov	r0, r5
   d5f2e:	f7ff fff3 	bl	d5f18 <_ZN5Print5printEc>
  return n;
}
   d5f32:	4420      	add	r0, r4
   d5f34:	bd38      	pop	{r3, r4, r5, pc}

000d5f36 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5f36:	b538      	push	{r3, r4, r5, lr}
   d5f38:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f3a:	f7ff ffdd 	bl	d5ef8 <_ZN5Print5writeEPKc>
   d5f3e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5f40:	4628      	mov	r0, r5
   d5f42:	f7ff ffec 	bl	d5f1e <_ZN5Print7printlnEv>
  return n;
}
   d5f46:	4420      	add	r0, r4
   d5f48:	bd38      	pop	{r3, r4, r5, pc}

000d5f4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5f4a:	b530      	push	{r4, r5, lr}
   d5f4c:	b08b      	sub	sp, #44	; 0x2c
   d5f4e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5f50:	2100      	movs	r1, #0
   d5f52:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5f56:	2a01      	cmp	r2, #1
   d5f58:	bf98      	it	ls
   d5f5a:	220a      	movls	r2, #10
   d5f5c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5f60:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5f64:	fb05 3312 	mls	r3, r5, r2, r3
   d5f68:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5f6c:	2b09      	cmp	r3, #9
   d5f6e:	bf94      	ite	ls
   d5f70:	3330      	addls	r3, #48	; 0x30
   d5f72:	3337      	addhi	r3, #55	; 0x37
   d5f74:	b2db      	uxtb	r3, r3
   d5f76:	4621      	mov	r1, r4
   d5f78:	f804 3901 	strb.w	r3, [r4], #-1
   d5f7c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5f7e:	2d00      	cmp	r5, #0
   d5f80:	d1ee      	bne.n	d5f60 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5f82:	f7ff ffb9 	bl	d5ef8 <_ZN5Print5writeEPKc>
}
   d5f86:	b00b      	add	sp, #44	; 0x2c
   d5f88:	bd30      	pop	{r4, r5, pc}

000d5f8a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5f8a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5f8c:	b92a      	cbnz	r2, d5f9a <_ZN5Print5printEmi+0x10>
   d5f8e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5f90:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5f94:	689b      	ldr	r3, [r3, #8]
   d5f96:	b2c9      	uxtb	r1, r1
   d5f98:	4718      	bx	r3
  else return printNumber(n, base);
   d5f9a:	b2d2      	uxtb	r2, r2
}
   d5f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5fa0:	f7ff bfd3 	b.w	d5f4a <_ZN5Print11printNumberEmh>

000d5fa4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5fa4:	f7ff bff1 	b.w	d5f8a <_ZN5Print5printEmi>

000d5fa8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5fac:	4607      	mov	r7, r0
   d5fae:	460e      	mov	r6, r1
  if (base == 0) {
   d5fb0:	4615      	mov	r5, r2
   d5fb2:	b92a      	cbnz	r2, d5fc0 <_ZN5Print5printEli+0x18>
    return write(n);
   d5fb4:	6803      	ldr	r3, [r0, #0]
   d5fb6:	b2c9      	uxtb	r1, r1
   d5fb8:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5fbe:	4718      	bx	r3
  } else if (base == 10) {
   d5fc0:	2a0a      	cmp	r2, #10
   d5fc2:	d102      	bne.n	d5fca <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5fc4:	2900      	cmp	r1, #0
   d5fc6:	da01      	bge.n	d5fcc <_ZN5Print5printEli+0x24>
   d5fc8:	e004      	b.n	d5fd4 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5fca:	b2d2      	uxtb	r2, r2
  }
}
   d5fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5fd0:	f7ff bfbb 	b.w	d5f4a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5fd4:	212d      	movs	r1, #45	; 0x2d
   d5fd6:	f7ff ff9f 	bl	d5f18 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5fda:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5fdc:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5fde:	4271      	negs	r1, r6
   d5fe0:	4638      	mov	r0, r7
   d5fe2:	f7ff ffb2 	bl	d5f4a <_ZN5Print11printNumberEmh>
   d5fe6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5fec <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5ff0:	ec57 6b10 	vmov	r6, r7, d0
   d5ff4:	4682      	mov	sl, r0
   d5ff6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5ff8:	ee10 2a10 	vmov	r2, s0
   d5ffc:	463b      	mov	r3, r7
   d5ffe:	ee10 0a10 	vmov	r0, s0
   d6002:	4639      	mov	r1, r7
   d6004:	f001 fa36 	bl	d7474 <__aeabi_dcmpun>
   d6008:	b108      	cbz	r0, d600e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d600a:	4948      	ldr	r1, [pc, #288]	; (d612c <_ZN5Print10printFloatEdh+0x140>)
   d600c:	e012      	b.n	d6034 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d600e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6016:	4b46      	ldr	r3, [pc, #280]	; (d6130 <_ZN5Print10printFloatEdh+0x144>)
   d6018:	4630      	mov	r0, r6
   d601a:	4649      	mov	r1, r9
   d601c:	f001 fa2a 	bl	d7474 <__aeabi_dcmpun>
   d6020:	b968      	cbnz	r0, d603e <_ZN5Print10printFloatEdh+0x52>
   d6022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6026:	4b42      	ldr	r3, [pc, #264]	; (d6130 <_ZN5Print10printFloatEdh+0x144>)
   d6028:	4630      	mov	r0, r6
   d602a:	4649      	mov	r1, r9
   d602c:	f001 fa04 	bl	d7438 <__aeabi_dcmple>
   d6030:	b928      	cbnz	r0, d603e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6032:	4940      	ldr	r1, [pc, #256]	; (d6134 <_ZN5Print10printFloatEdh+0x148>)
   d6034:	4650      	mov	r0, sl
   d6036:	f7ff ff5f 	bl	d5ef8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d603e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6042:	4b3d      	ldr	r3, [pc, #244]	; (d6138 <_ZN5Print10printFloatEdh+0x14c>)
   d6044:	4630      	mov	r0, r6
   d6046:	4639      	mov	r1, r7
   d6048:	f001 fa0a 	bl	d7460 <__aeabi_dcmpgt>
   d604c:	b108      	cbz	r0, d6052 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d604e:	493b      	ldr	r1, [pc, #236]	; (d613c <_ZN5Print10printFloatEdh+0x150>)
   d6050:	e7f0      	b.n	d6034 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6052:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6056:	4b3a      	ldr	r3, [pc, #232]	; (d6140 <_ZN5Print10printFloatEdh+0x154>)
   d6058:	4630      	mov	r0, r6
   d605a:	4639      	mov	r1, r7
   d605c:	f001 f9e2 	bl	d7424 <__aeabi_dcmplt>
   d6060:	2800      	cmp	r0, #0
   d6062:	d1f4      	bne.n	d604e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6064:	2200      	movs	r2, #0
   d6066:	2300      	movs	r3, #0
   d6068:	4630      	mov	r0, r6
   d606a:	4639      	mov	r1, r7
   d606c:	f001 f9da 	bl	d7424 <__aeabi_dcmplt>
   d6070:	b140      	cbz	r0, d6084 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6072:	212d      	movs	r1, #45	; 0x2d
   d6074:	4650      	mov	r0, sl
   d6076:	f7ff ff4f 	bl	d5f18 <_ZN5Print5printEc>
     number = -number;
   d607a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d607e:	4604      	mov	r4, r0
     number = -number;
   d6080:	461f      	mov	r7, r3
   d6082:	e000      	b.n	d6086 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6084:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6086:	492f      	ldr	r1, [pc, #188]	; (d6144 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6088:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d608c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d608e:	fa5f f388 	uxtb.w	r3, r8
   d6092:	429d      	cmp	r5, r3
   d6094:	d906      	bls.n	d60a4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6096:	2200      	movs	r2, #0
   d6098:	4b2b      	ldr	r3, [pc, #172]	; (d6148 <_ZN5Print10printFloatEdh+0x15c>)
   d609a:	f001 f87b 	bl	d7194 <__aeabi_ddiv>
   d609e:	f108 0801 	add.w	r8, r8, #1
   d60a2:	e7f4      	b.n	d608e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d60a4:	4632      	mov	r2, r6
   d60a6:	463b      	mov	r3, r7
   d60a8:	f000 fd98 	bl	d6bdc <__adddf3>
   d60ac:	460f      	mov	r7, r1
   d60ae:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d60b0:	f001 fa1e 	bl	d74f0 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d60b4:	220a      	movs	r2, #10
   d60b6:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d60b8:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d60ba:	4650      	mov	r0, sl
   d60bc:	f7ff ff45 	bl	d5f4a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d60c0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d60c2:	b37d      	cbz	r5, d6124 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d60c4:	4640      	mov	r0, r8
   d60c6:	f000 fec5 	bl	d6e54 <__aeabi_ui2d>
   d60ca:	4602      	mov	r2, r0
   d60cc:	460b      	mov	r3, r1
   d60ce:	4630      	mov	r0, r6
   d60d0:	4639      	mov	r1, r7
   d60d2:	f000 fd81 	bl	d6bd8 <__aeabi_dsub>
   d60d6:	4606      	mov	r6, r0
   d60d8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60da:	4650      	mov	r0, sl
   d60dc:	491b      	ldr	r1, [pc, #108]	; (d614c <_ZN5Print10printFloatEdh+0x160>)
   d60de:	f7ff ff0b 	bl	d5ef8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d60e2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d60e4:	4b18      	ldr	r3, [pc, #96]	; (d6148 <_ZN5Print10printFloatEdh+0x15c>)
   d60e6:	2200      	movs	r2, #0
   d60e8:	4630      	mov	r0, r6
   d60ea:	4639      	mov	r1, r7
   d60ec:	f000 ff28 	bl	d6f40 <__aeabi_dmul>
   d60f0:	460f      	mov	r7, r1
   d60f2:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d60f4:	f001 f9d4 	bl	d74a0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d60f8:	220a      	movs	r2, #10
   d60fa:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d60fc:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d60fe:	4650      	mov	r0, sl
   d6100:	f7ff ff52 	bl	d5fa8 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d6104:	4404      	add	r4, r0
    remainder -= toPrint;
   d6106:	4640      	mov	r0, r8
   d6108:	f000 feb4 	bl	d6e74 <__aeabi_i2d>
   d610c:	4602      	mov	r2, r0
   d610e:	460b      	mov	r3, r1
   d6110:	4630      	mov	r0, r6
   d6112:	4639      	mov	r1, r7
   d6114:	f000 fd60 	bl	d6bd8 <__aeabi_dsub>
   d6118:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d611a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d611e:	4606      	mov	r6, r0
   d6120:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6122:	d1df      	bne.n	d60e4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6124:	4620      	mov	r0, r4
   d6126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d612a:	bf00      	nop
   d612c:	000d8614 	.word	0x000d8614
   d6130:	7fefffff 	.word	0x7fefffff
   d6134:	000d861c 	.word	0x000d861c
   d6138:	41efffff 	.word	0x41efffff
   d613c:	000d8618 	.word	0x000d8618
   d6140:	c1efffff 	.word	0xc1efffff
   d6144:	3fe00000 	.word	0x3fe00000
   d6148:	40240000 	.word	0x40240000
   d614c:	000d823e 	.word	0x000d823e

000d6150 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6150:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6152:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6154:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6156:	f7ff ff49 	bl	d5fec <_ZN5Print10printFloatEdh>
   d615a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d615c:	4628      	mov	r0, r5
   d615e:	f7ff fede 	bl	d5f1e <_ZN5Print7printlnEv>
  return n;
}
   d6162:	4420      	add	r0, r4
   d6164:	bd38      	pop	{r3, r4, r5, pc}

000d6166 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6166:	b510      	push	{r4, lr}
   d6168:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d616a:	f7ff f948 	bl	d53fe <_ZNSt14_Function_baseD1Ev>
   d616e:	4620      	mov	r0, r4
   d6170:	bd10      	pop	{r4, pc}
	...

000d6174 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6174:	4803      	ldr	r0, [pc, #12]	; (d6184 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6176:	4a04      	ldr	r2, [pc, #16]	; (d6188 <_GLOBAL__sub_I_RGB+0x14>)
   d6178:	4904      	ldr	r1, [pc, #16]	; (d618c <_GLOBAL__sub_I_RGB+0x18>)
   d617a:	2300      	movs	r3, #0
   d617c:	6083      	str	r3, [r0, #8]
   d617e:	f000 bbd5 	b.w	d692c <__aeabi_atexit>
   d6182:	bf00      	nop
   d6184:	2003e554 	.word	0x2003e554
   d6188:	2003e2d0 	.word	0x2003e2d0
   d618c:	000d6167 	.word	0x000d6167

000d6190 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6190:	4770      	bx	lr

000d6192 <_ZN8SPIClassD0Ev>:
   d6192:	b510      	push	{r4, lr}
   d6194:	2110      	movs	r1, #16
   d6196:	4604      	mov	r4, r0
   d6198:	f000 fbcd 	bl	d6936 <_ZdlPvj>
   d619c:	4620      	mov	r0, r4
   d619e:	bd10      	pop	{r4, pc}

000d61a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d61a0:	b570      	push	{r4, r5, r6, lr}
   d61a2:	4b08      	ldr	r3, [pc, #32]	; (d61c4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d61a4:	6003      	str	r3, [r0, #0]
   d61a6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d61a8:	2500      	movs	r5, #0
   d61aa:	460e      	mov	r6, r1
   d61ac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d61b0:	f7fe fe52 	bl	d4e58 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d61b4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d61b6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d61b8:	f7fe ff36 	bl	d5028 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d61bc:	60a5      	str	r5, [r4, #8]
}
   d61be:	4620      	mov	r0, r4
   d61c0:	bd70      	pop	{r4, r5, r6, pc}
   d61c2:	bf00      	nop
   d61c4:	000d8628 	.word	0x000d8628

000d61c8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d61c8:	7900      	ldrb	r0, [r0, #4]
   d61ca:	f7fe bf35 	b.w	d5038 <HAL_SPI_Is_Enabled>

000d61ce <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61ce:	2300      	movs	r3, #0
   d61d0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61d2:	6043      	str	r3, [r0, #4]
	len = 0;
   d61d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d61d6:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d61d8:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d61da:	680c      	ldr	r4, [r1, #0]
   d61dc:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d61de:	684c      	ldr	r4, [r1, #4]
   d61e0:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d61e2:	688c      	ldr	r4, [r1, #8]
   d61e4:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d61e6:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d61e8:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d61ea:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d61ec:	bd10      	pop	{r4, pc}

000d61ee <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d61ee:	b510      	push	{r4, lr}
   d61f0:	4604      	mov	r4, r0
{
	free(buffer);
   d61f2:	6800      	ldr	r0, [r0, #0]
   d61f4:	f7ff f89e 	bl	d5334 <free>
}
   d61f8:	4620      	mov	r0, r4
   d61fa:	bd10      	pop	{r4, pc}

000d61fc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d61fc:	b510      	push	{r4, lr}
   d61fe:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6200:	6800      	ldr	r0, [r0, #0]
   d6202:	b108      	cbz	r0, d6208 <_ZN6String10invalidateEv+0xc>
   d6204:	f7ff f896 	bl	d5334 <free>
	buffer = NULL;
   d6208:	2300      	movs	r3, #0
   d620a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d620c:	60a3      	str	r3, [r4, #8]
   d620e:	6063      	str	r3, [r4, #4]
   d6210:	bd10      	pop	{r4, pc}

000d6212 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6212:	b538      	push	{r3, r4, r5, lr}
   d6214:	4604      	mov	r4, r0
   d6216:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6218:	6800      	ldr	r0, [r0, #0]
   d621a:	3101      	adds	r1, #1
   d621c:	f7ff f892 	bl	d5344 <realloc>
	if (newbuffer) {
   d6220:	b110      	cbz	r0, d6228 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6222:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6226:	2001      	movs	r0, #1
	}
	return 0;
}
   d6228:	bd38      	pop	{r3, r4, r5, pc}

000d622a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d622a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d622c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d622e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6230:	b113      	cbz	r3, d6238 <_ZN6String7reserveEj+0xe>
   d6232:	6843      	ldr	r3, [r0, #4]
   d6234:	428b      	cmp	r3, r1
   d6236:	d207      	bcs.n	d6248 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6238:	4620      	mov	r0, r4
   d623a:	f7ff ffea 	bl	d6212 <_ZN6String12changeBufferEj>
   d623e:	b120      	cbz	r0, d624a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6240:	68a3      	ldr	r3, [r4, #8]
   d6242:	b90b      	cbnz	r3, d6248 <_ZN6String7reserveEj+0x1e>
   d6244:	6822      	ldr	r2, [r4, #0]
   d6246:	7013      	strb	r3, [r2, #0]
   d6248:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d624a:	bd10      	pop	{r4, pc}

000d624c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d624c:	b570      	push	{r4, r5, r6, lr}
   d624e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6250:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6252:	4604      	mov	r4, r0
   d6254:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6256:	f7ff ffe8 	bl	d622a <_ZN6String7reserveEj>
   d625a:	b918      	cbnz	r0, d6264 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d625c:	4620      	mov	r0, r4
   d625e:	f7ff ffcd 	bl	d61fc <_ZN6String10invalidateEv>
		return *this;
   d6262:	e009      	b.n	d6278 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6264:	462a      	mov	r2, r5
   d6266:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6268:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d626a:	6820      	ldr	r0, [r4, #0]
   d626c:	f001 faba 	bl	d77e4 <memcpy>
	buffer[len] = 0;
   d6270:	6822      	ldr	r2, [r4, #0]
   d6272:	68a3      	ldr	r3, [r4, #8]
   d6274:	2100      	movs	r1, #0
   d6276:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6278:	4620      	mov	r0, r4
   d627a:	bd70      	pop	{r4, r5, r6, pc}

000d627c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d627c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d627e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6280:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6282:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6284:	6043      	str	r3, [r0, #4]
	len = 0;
   d6286:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6288:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d628a:	460d      	mov	r5, r1
   d628c:	b139      	cbz	r1, d629e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d628e:	4608      	mov	r0, r1
   d6290:	f001 fb11 	bl	d78b6 <strlen>
   d6294:	4629      	mov	r1, r5
   d6296:	4602      	mov	r2, r0
   d6298:	4620      	mov	r0, r4
   d629a:	f7ff ffd7 	bl	d624c <_ZN6String4copyEPKcj>
}
   d629e:	4620      	mov	r0, r4
   d62a0:	bd38      	pop	{r3, r4, r5, pc}

000d62a2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62a2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62a4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62a6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62a8:	b912      	cbnz	r2, d62b0 <_ZNK6String6equalsEPKc+0xe>
   d62aa:	b919      	cbnz	r1, d62b4 <_ZNK6String6equalsEPKc+0x12>
   d62ac:	2001      	movs	r0, #1
   d62ae:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d62b0:	b911      	cbnz	r1, d62b8 <_ZNK6String6equalsEPKc+0x16>
   d62b2:	6803      	ldr	r3, [r0, #0]
   d62b4:	7818      	ldrb	r0, [r3, #0]
   d62b6:	e002      	b.n	d62be <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d62b8:	6800      	ldr	r0, [r0, #0]
   d62ba:	f001 facf 	bl	d785c <strcmp>
   d62be:	fab0 f080 	clz	r0, r0
   d62c2:	0940      	lsrs	r0, r0, #5
}
   d62c4:	bd08      	pop	{r3, pc}

000d62c6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d62c6:	b570      	push	{r4, r5, r6, lr}
   d62c8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d62ca:	b19a      	cbz	r2, d62f4 <_ZNK6String8getBytesEPhjj+0x2e>
   d62cc:	b191      	cbz	r1, d62f4 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d62ce:	6885      	ldr	r5, [r0, #8]
   d62d0:	429d      	cmp	r5, r3
   d62d2:	d802      	bhi.n	d62da <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d62d4:	2300      	movs	r3, #0
   d62d6:	700b      	strb	r3, [r1, #0]
		return;
   d62d8:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d62da:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d62dc:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d62de:	6801      	ldr	r1, [r0, #0]
   d62e0:	42ac      	cmp	r4, r5
   d62e2:	bf28      	it	cs
   d62e4:	462c      	movcs	r4, r5
   d62e6:	4419      	add	r1, r3
   d62e8:	4622      	mov	r2, r4
   d62ea:	4630      	mov	r0, r6
   d62ec:	f001 fb00 	bl	d78f0 <strncpy>
	buf[n] = 0;
   d62f0:	2300      	movs	r3, #0
   d62f2:	5533      	strb	r3, [r6, r4]
   d62f4:	bd70      	pop	{r4, r5, r6, pc}

000d62f6 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d62f6:	4601      	mov	r1, r0
   d62f8:	2200      	movs	r2, #0
   d62fa:	208c      	movs	r0, #140	; 0x8c
   d62fc:	f7fe bdbc 	b.w	d4e78 <HAL_Core_System_Reset_Ex>

000d6300 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6300:	2000      	movs	r0, #0
   d6302:	f7ff bff8 	b.w	d62f6 <_ZN11SystemClass5resetEm>

000d6306 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d6306:	b510      	push	{r4, lr}
   d6308:	2400      	movs	r4, #0
   d630a:	7004      	strb	r4, [r0, #0]
   d630c:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d630e:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d6310:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d6314:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d6316:	dd07      	ble.n	d6328 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d6318:	3901      	subs	r1, #1
   d631a:	4299      	cmp	r1, r3
   d631c:	d209      	bcs.n	d6332 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d631e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d6322:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d6324:	2301      	movs	r3, #1
   d6326:	e001      	b.n	d632c <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d6328:	d102      	bne.n	d6330 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d632a:	2302      	movs	r3, #2
   d632c:	7003      	strb	r3, [r0, #0]
   d632e:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d6330:	8041      	strh	r1, [r0, #2]
    }
}
   d6332:	bd10      	pop	{r4, pc}

000d6334 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6334:	b570      	push	{r4, r5, r6, lr}
   d6336:	b086      	sub	sp, #24
   d6338:	4616      	mov	r6, r2
   d633a:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d633c:	2300      	movs	r3, #0
   d633e:	9302      	str	r3, [sp, #8]
   d6340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6342:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6344:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6348:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d634a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d634c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d634e:	4631      	mov	r1, r6
   d6350:	4628      	mov	r0, r5
   d6352:	f7fe ff35 	bl	d51c0 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d6356:	4633      	mov	r3, r6
   d6358:	462a      	mov	r2, r5
   d635a:	4601      	mov	r1, r0
   d635c:	a804      	add	r0, sp, #16
   d635e:	f7ff ffd2 	bl	d6306 <_ZN11SleepResultC1EiPKtj>
   d6362:	4b06      	ldr	r3, [pc, #24]	; (d637c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d6364:	9804      	ldr	r0, [sp, #16]
   d6366:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d636a:	6018      	str	r0, [r3, #0]
   d636c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d636e:	681a      	ldr	r2, [r3, #0]
   d6370:	889b      	ldrh	r3, [r3, #4]
   d6372:	6022      	str	r2, [r4, #0]
}
   d6374:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d6376:	80a3      	strh	r3, [r4, #4]
}
   d6378:	b006      	add	sp, #24
   d637a:	bd70      	pop	{r4, r5, r6, pc}
   d637c:	2003e564 	.word	0x2003e564

000d6380 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6380:	4b04      	ldr	r3, [pc, #16]	; (d6394 <_GLOBAL__sub_I_System+0x14>)
   d6382:	2000      	movs	r0, #0
   d6384:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6388:	7018      	strb	r0, [r3, #0]
   d638a:	8058      	strh	r0, [r3, #2]
   d638c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d638e:	f7fe bedb 	b.w	d5148 <set_system_mode>
   d6392:	bf00      	nop
   d6394:	2003e564 	.word	0x2003e564

000d6398 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6398:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d639a:	4b14      	ldr	r3, [pc, #80]	; (d63ec <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d639c:	4f14      	ldr	r7, [pc, #80]	; (d63f0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d639e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d63a0:	4b14      	ldr	r3, [pc, #80]	; (d63f4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d63a2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d63a4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d63a6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d63a8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d63aa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d63ac:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d63ae:	d01b      	beq.n	d63e8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d63b0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d63b2:	ad01      	add	r5, sp, #4
   d63b4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d63b8:	f001 f91c 	bl	d75f4 <localtime>
	calendar_time->tm_year += 1900;
   d63bc:	6943      	ldr	r3, [r0, #20]
   d63be:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d63c2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d63c4:	4604      	mov	r4, r0
   d63c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d63c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d63ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d63cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d63ce:	f8d4 e000 	ldr.w	lr, [r4]
   d63d2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d63d6:	ad01      	add	r5, sp, #4
   d63d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d63da:	4c07      	ldr	r4, [pc, #28]	; (d63f8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d63dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d63de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d63e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d63e2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d63e4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d63e8:	b00b      	add	sp, #44	; 0x2c
   d63ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d63ec:	2003e59c 	.word	0x2003e59c
   d63f0:	2003e598 	.word	0x2003e598
   d63f4:	2003e594 	.word	0x2003e594
   d63f8:	2003e56c 	.word	0x2003e56c

000d63fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d63fc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d63fe:	2000      	movs	r0, #0
   d6400:	f7fe ff30 	bl	d5264 <spark_sync_time_pending>
   d6404:	b128      	cbz	r0, d6412 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6406:	f7fe ff05 	bl	d5214 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d640a:	f080 0001 	eor.w	r0, r0, #1
   d640e:	b2c0      	uxtb	r0, r0
   d6410:	bd08      	pop	{r3, pc}
   d6412:	2001      	movs	r0, #1
    }
   d6414:	bd08      	pop	{r3, pc}

000d6416 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6416:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6418:	2000      	movs	r0, #0
   d641a:	f7fe fd75 	bl	d4f08 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d641e:	4604      	mov	r4, r0
   d6420:	b968      	cbnz	r0, d643e <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6422:	f7fe fe89 	bl	d5138 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6426:	2801      	cmp	r0, #1
   d6428:	d10b      	bne.n	d6442 <_ZN9TimeClass7isValidEv+0x2c>
   d642a:	4620      	mov	r0, r4
   d642c:	f7fe feac 	bl	d5188 <system_thread_get_state>
   d6430:	b938      	cbnz	r0, d6442 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6432:	f7ff ffe3 	bl	d63fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6436:	b930      	cbnz	r0, d6446 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6438:	f7fe fedc 	bl	d51f4 <spark_process>
   d643c:	e7f9      	b.n	d6432 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d643e:	2001      	movs	r0, #1
   d6440:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6442:	2000      	movs	r0, #0
   d6444:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6446:	f7ff ffd9 	bl	d63fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d644a:	2000      	movs	r0, #0
   d644c:	f7fe fd5c 	bl	d4f08 <HAL_RTC_Time_Is_Valid>
   d6450:	3000      	adds	r0, #0
   d6452:	bf18      	it	ne
   d6454:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6456:	bd10      	pop	{r4, pc}

000d6458 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6458:	b508      	push	{r3, lr}
    (void)isValid();
   d645a:	f7ff ffdc 	bl	d6416 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d645e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6462:	f7fe bd21 	b.w	d4ea8 <HAL_RTC_Get_UnixTime>
	...

000d6468 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d6468:	b508      	push	{r3, lr}
	return hour(now());
   d646a:	f7ff fff5 	bl	d6458 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d646e:	f7ff ff93 	bl	d6398 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d6472:	4b01      	ldr	r3, [pc, #4]	; (d6478 <_ZN9TimeClass4hourEv+0x10>)
   d6474:	6898      	ldr	r0, [r3, #8]
   d6476:	bd08      	pop	{r3, pc}
   d6478:	2003e56c 	.word	0x2003e56c

000d647c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d647c:	b508      	push	{r3, lr}
	return minute(now());
   d647e:	f7ff ffeb 	bl	d6458 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6482:	f7ff ff89 	bl	d6398 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d6486:	4b01      	ldr	r3, [pc, #4]	; (d648c <_ZN9TimeClass6minuteEv+0x10>)
   d6488:	6858      	ldr	r0, [r3, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	2003e56c 	.word	0x2003e56c

000d6490 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6490:	4b02      	ldr	r3, [pc, #8]	; (d649c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6492:	681a      	ldr	r2, [r3, #0]
   d6494:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6496:	601a      	str	r2, [r3, #0]
   d6498:	4770      	bx	lr
   d649a:	bf00      	nop
   d649c:	2003e218 	.word	0x2003e218
   d64a0:	2003e590 	.word	0x2003e590

000d64a4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d64a4:	4770      	bx	lr

000d64a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64a6:	7441      	strb	r1, [r0, #17]
   d64a8:	4770      	bx	lr

000d64aa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d64aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d64ac:	7c00      	ldrb	r0, [r0, #16]
   d64ae:	f7fe fe03 	bl	d50b8 <HAL_USART_Available_Data_For_Write>
}
   d64b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d64b6:	bd08      	pop	{r3, pc}

000d64b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d64b8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d64ba:	7c00      	ldrb	r0, [r0, #16]
   d64bc:	f7fe fdd4 	bl	d5068 <HAL_USART_Available_Data>
}
   d64c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d64c4:	bd08      	pop	{r3, pc}

000d64c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d64c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d64c8:	7c00      	ldrb	r0, [r0, #16]
   d64ca:	f7fe fddd 	bl	d5088 <HAL_USART_Peek_Data>
}
   d64ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d64d2:	bf28      	it	cs
   d64d4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d64d8:	bd08      	pop	{r3, pc}

000d64da <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d64da:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d64dc:	7c00      	ldrb	r0, [r0, #16]
   d64de:	f7fe fdcb 	bl	d5078 <HAL_USART_Read_Data>
}
   d64e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d64e6:	bf28      	it	cs
   d64e8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d64ec:	bd08      	pop	{r3, pc}

000d64ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d64ee:	7c00      	ldrb	r0, [r0, #16]
   d64f0:	f7fe bdd2 	b.w	d5098 <HAL_USART_Flush_Data>

000d64f4 <_ZN11USARTSerialD0Ev>:
   d64f4:	b510      	push	{r4, lr}
   d64f6:	2114      	movs	r1, #20
   d64f8:	4604      	mov	r4, r0
   d64fa:	f000 fa1c 	bl	d6936 <_ZdlPvj>
   d64fe:	4620      	mov	r0, r4
   d6500:	bd10      	pop	{r4, pc}

000d6502 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6502:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6504:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6506:	4604      	mov	r4, r0
   d6508:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d650a:	b925      	cbnz	r5, d6516 <_ZN11USARTSerial5writeEh+0x14>
   d650c:	7c00      	ldrb	r0, [r0, #16]
   d650e:	f7fe fdd3 	bl	d50b8 <HAL_USART_Available_Data_For_Write>
   d6512:	2800      	cmp	r0, #0
   d6514:	dd05      	ble.n	d6522 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6516:	4631      	mov	r1, r6
   d6518:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d651a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d651e:	f7fe bd9b 	b.w	d5058 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6522:	4628      	mov	r0, r5
   d6524:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6528 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6528:	b510      	push	{r4, lr}
   d652a:	4604      	mov	r4, r0
   d652c:	4608      	mov	r0, r1
   d652e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6530:	2200      	movs	r2, #0
   d6532:	6062      	str	r2, [r4, #4]
   d6534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6538:	60a2      	str	r2, [r4, #8]
   d653a:	4a05      	ldr	r2, [pc, #20]	; (d6550 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d653c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d653e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6540:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6542:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6544:	461a      	mov	r2, r3
   d6546:	f7fe fd7f 	bl	d5048 <HAL_USART_Init>
}
   d654a:	4620      	mov	r0, r4
   d654c:	bd10      	pop	{r4, pc}
   d654e:	bf00      	nop
   d6550:	000d8660 	.word	0x000d8660

000d6554 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6554:	7c00      	ldrb	r0, [r0, #16]
   d6556:	f7fe bda7 	b.w	d50a8 <HAL_USART_Is_Enabled>
	...

000d655c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d655c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d655e:	4d0c      	ldr	r5, [pc, #48]	; (d6590 <_Z22__fetch_global_Serial1v+0x34>)
   d6560:	6829      	ldr	r1, [r5, #0]
   d6562:	f011 0401 	ands.w	r4, r1, #1
   d6566:	d111      	bne.n	d658c <_Z22__fetch_global_Serial1v+0x30>
   d6568:	4628      	mov	r0, r5
   d656a:	f7fd fd9c 	bl	d40a6 <__cxa_guard_acquire>
   d656e:	b168      	cbz	r0, d658c <_Z22__fetch_global_Serial1v+0x30>
   d6570:	4a08      	ldr	r2, [pc, #32]	; (d6594 <_Z22__fetch_global_Serial1v+0x38>)
   d6572:	4b09      	ldr	r3, [pc, #36]	; (d6598 <_Z22__fetch_global_Serial1v+0x3c>)
   d6574:	4809      	ldr	r0, [pc, #36]	; (d659c <_Z22__fetch_global_Serial1v+0x40>)
   d6576:	4621      	mov	r1, r4
   d6578:	f7ff ffd6 	bl	d6528 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d657c:	4628      	mov	r0, r5
   d657e:	f7fd fd97 	bl	d40b0 <__cxa_guard_release>
   d6582:	4a07      	ldr	r2, [pc, #28]	; (d65a0 <_Z22__fetch_global_Serial1v+0x44>)
   d6584:	4907      	ldr	r1, [pc, #28]	; (d65a4 <_Z22__fetch_global_Serial1v+0x48>)
   d6586:	4805      	ldr	r0, [pc, #20]	; (d659c <_Z22__fetch_global_Serial1v+0x40>)
   d6588:	f000 f9d0 	bl	d692c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d658c:	4803      	ldr	r0, [pc, #12]	; (d659c <_Z22__fetch_global_Serial1v+0x40>)
   d658e:	bd38      	pop	{r3, r4, r5, pc}
   d6590:	2003e638 	.word	0x2003e638
   d6594:	2003e63c 	.word	0x2003e63c
   d6598:	2003e5b4 	.word	0x2003e5b4
   d659c:	2003e5a0 	.word	0x2003e5a0
   d65a0:	2003e2d0 	.word	0x2003e2d0
   d65a4:	000d64a5 	.word	0x000d64a5

000d65a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65a8:	7441      	strb	r1, [r0, #17]
   d65aa:	4770      	bx	lr

000d65ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65ac:	4770      	bx	lr

000d65ae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d65ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65b0:	2100      	movs	r1, #0
   d65b2:	7c00      	ldrb	r0, [r0, #16]
   d65b4:	f7fe fda8 	bl	d5108 <HAL_USB_USART_Receive_Data>
}
   d65b8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65bc:	bf28      	it	cs
   d65be:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d65c2:	bd08      	pop	{r3, pc}

000d65c4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d65c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65c6:	2101      	movs	r1, #1
   d65c8:	7c00      	ldrb	r0, [r0, #16]
   d65ca:	f7fe fd9d 	bl	d5108 <HAL_USB_USART_Receive_Data>
}
   d65ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65d2:	bf28      	it	cs
   d65d4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d65d8:	bd08      	pop	{r3, pc}

000d65da <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d65da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d65dc:	7c00      	ldrb	r0, [r0, #16]
   d65de:	f7fe fd8b 	bl	d50f8 <HAL_USB_USART_Available_Data_For_Write>
}
   d65e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65e6:	bd08      	pop	{r3, pc}

000d65e8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d65e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d65ea:	7c00      	ldrb	r0, [r0, #16]
   d65ec:	f7fe fd7c 	bl	d50e8 <HAL_USB_USART_Available_Data>
}
   d65f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65f4:	bd08      	pop	{r3, pc}

000d65f6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d65f6:	7c00      	ldrb	r0, [r0, #16]
   d65f8:	f7fe bd96 	b.w	d5128 <HAL_USB_USART_Flush_Data>

000d65fc <_ZN9USBSerialD0Ev>:
   d65fc:	b510      	push	{r4, lr}
   d65fe:	2114      	movs	r1, #20
   d6600:	4604      	mov	r4, r0
   d6602:	f000 f998 	bl	d6936 <_ZdlPvj>
   d6606:	4620      	mov	r0, r4
   d6608:	bd10      	pop	{r4, pc}

000d660a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d660a:	b538      	push	{r3, r4, r5, lr}
   d660c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d660e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6610:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6612:	f7fe fd71 	bl	d50f8 <HAL_USB_USART_Available_Data_For_Write>
   d6616:	2800      	cmp	r0, #0
   d6618:	dc01      	bgt.n	d661e <_ZN9USBSerial5writeEh+0x14>
   d661a:	7c60      	ldrb	r0, [r4, #17]
   d661c:	b128      	cbz	r0, d662a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d661e:	4629      	mov	r1, r5
   d6620:	7c20      	ldrb	r0, [r4, #16]
   d6622:	f7fe fd79 	bl	d5118 <HAL_USB_USART_Send_Data>
   d6626:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d662a:	bd38      	pop	{r3, r4, r5, pc}

000d662c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d662c:	b510      	push	{r4, lr}
   d662e:	4604      	mov	r4, r0
   d6630:	2300      	movs	r3, #0
   d6632:	6063      	str	r3, [r4, #4]
   d6634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6638:	60a3      	str	r3, [r4, #8]
   d663a:	4b05      	ldr	r3, [pc, #20]	; (d6650 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d663c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d663e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6640:	4608      	mov	r0, r1
{
  _serial = serial;
   d6642:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6644:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6646:	4611      	mov	r1, r2
   d6648:	f7fe fd3e 	bl	d50c8 <HAL_USB_USART_Init>
}
   d664c:	4620      	mov	r0, r4
   d664e:	bd10      	pop	{r4, pc}
   d6650:	000d8690 	.word	0x000d8690

000d6654 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6654:	2200      	movs	r2, #0
   d6656:	7c00      	ldrb	r0, [r0, #16]
   d6658:	f7fe bd3e 	b.w	d50d8 <HAL_USB_USART_Begin>

000d665c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d665c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d665e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6660:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6662:	2100      	movs	r1, #0
   d6664:	f001 f8c9 	bl	d77fa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6668:	4620      	mov	r0, r4
   d666a:	bd10      	pop	{r4, pc}

000d666c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d666c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d666e:	4d0e      	ldr	r5, [pc, #56]	; (d66a8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6670:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6672:	a801      	add	r0, sp, #4
   d6674:	f7ff fff2 	bl	d665c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6678:	6829      	ldr	r1, [r5, #0]
   d667a:	f011 0401 	ands.w	r4, r1, #1
   d667e:	d110      	bne.n	d66a2 <_Z16_fetch_usbserialv+0x36>
   d6680:	4628      	mov	r0, r5
   d6682:	f7fd fd10 	bl	d40a6 <__cxa_guard_acquire>
   d6686:	b160      	cbz	r0, d66a2 <_Z16_fetch_usbserialv+0x36>
   d6688:	aa01      	add	r2, sp, #4
   d668a:	4621      	mov	r1, r4
   d668c:	4807      	ldr	r0, [pc, #28]	; (d66ac <_Z16_fetch_usbserialv+0x40>)
   d668e:	f7ff ffcd 	bl	d662c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6692:	4628      	mov	r0, r5
   d6694:	f7fd fd0c 	bl	d40b0 <__cxa_guard_release>
   d6698:	4a05      	ldr	r2, [pc, #20]	; (d66b0 <_Z16_fetch_usbserialv+0x44>)
   d669a:	4906      	ldr	r1, [pc, #24]	; (d66b4 <_Z16_fetch_usbserialv+0x48>)
   d669c:	4803      	ldr	r0, [pc, #12]	; (d66ac <_Z16_fetch_usbserialv+0x40>)
   d669e:	f000 f945 	bl	d692c <__aeabi_atexit>
	return _usbserial;
}
   d66a2:	4802      	ldr	r0, [pc, #8]	; (d66ac <_Z16_fetch_usbserialv+0x40>)
   d66a4:	b007      	add	sp, #28
   d66a6:	bd30      	pop	{r4, r5, pc}
   d66a8:	2003e6c0 	.word	0x2003e6c0
   d66ac:	2003e6c4 	.word	0x2003e6c4
   d66b0:	2003e2d0 	.word	0x2003e2d0
   d66b4:	000d65ad 	.word	0x000d65ad

000d66b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d66b8:	2200      	movs	r2, #0
   d66ba:	4611      	mov	r1, r2
   d66bc:	6840      	ldr	r0, [r0, #4]
   d66be:	f7fe bdf9 	b.w	d52b4 <network_ready>

000d66c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d66c2:	2200      	movs	r2, #0
   d66c4:	4611      	mov	r1, r2
   d66c6:	6840      	ldr	r0, [r0, #4]
   d66c8:	f7fe be14 	b.w	d52f4 <network_listening>

000d66cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d66cc:	2200      	movs	r2, #0
   d66ce:	4611      	mov	r1, r2
   d66d0:	6840      	ldr	r0, [r0, #4]
   d66d2:	f7fe be1f 	b.w	d5314 <network_get_listen_timeout>

000d66d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d66d6:	2200      	movs	r2, #0
   d66d8:	6840      	ldr	r0, [r0, #4]
   d66da:	f7fe be13 	b.w	d5304 <network_set_listen_timeout>

000d66de <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d66de:	2200      	movs	r2, #0
   d66e0:	f081 0101 	eor.w	r1, r1, #1
   d66e4:	6840      	ldr	r0, [r0, #4]
   d66e6:	f7fe bdfd 	b.w	d52e4 <network_listen>

000d66ea <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d66ea:	2300      	movs	r3, #0
   d66ec:	461a      	mov	r2, r3
   d66ee:	4619      	mov	r1, r3
   d66f0:	6840      	ldr	r0, [r0, #4]
   d66f2:	f7fe bdef 	b.w	d52d4 <network_off>

000d66f6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d66f6:	2300      	movs	r3, #0
   d66f8:	461a      	mov	r2, r3
   d66fa:	4619      	mov	r1, r3
   d66fc:	6840      	ldr	r0, [r0, #4]
   d66fe:	f7fe bde1 	b.w	d52c4 <network_on>

000d6702 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6702:	2200      	movs	r2, #0
   d6704:	4611      	mov	r1, r2
   d6706:	6840      	ldr	r0, [r0, #4]
   d6708:	f7fe bdc4 	b.w	d5294 <network_connecting>

000d670c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d670c:	2200      	movs	r2, #0
   d670e:	2102      	movs	r1, #2
   d6710:	6840      	ldr	r0, [r0, #4]
   d6712:	f7fe bdc7 	b.w	d52a4 <network_disconnect>

000d6716 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6716:	2300      	movs	r3, #0
   d6718:	461a      	mov	r2, r3
   d671a:	6840      	ldr	r0, [r0, #4]
   d671c:	f7fe bdb2 	b.w	d5284 <network_connect>

000d6720 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6720:	4b02      	ldr	r3, [pc, #8]	; (d672c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6722:	2204      	movs	r2, #4
   d6724:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6726:	4a02      	ldr	r2, [pc, #8]	; (d6730 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6728:	601a      	str	r2, [r3, #0]
   d672a:	4770      	bx	lr
   d672c:	2003e6d8 	.word	0x2003e6d8
   d6730:	000d86c0 	.word	0x000d86c0

000d6734 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6734:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6736:	4b0c      	ldr	r3, [pc, #48]	; (d6768 <serialEventRun+0x34>)
   d6738:	b133      	cbz	r3, d6748 <serialEventRun+0x14>
   d673a:	f7ff ff97 	bl	d666c <_Z16_fetch_usbserialv>
   d673e:	6803      	ldr	r3, [r0, #0]
   d6740:	691b      	ldr	r3, [r3, #16]
   d6742:	4798      	blx	r3
   d6744:	2800      	cmp	r0, #0
   d6746:	dc09      	bgt.n	d675c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6748:	4b08      	ldr	r3, [pc, #32]	; (d676c <serialEventRun+0x38>)
   d674a:	b163      	cbz	r3, d6766 <serialEventRun+0x32>
   d674c:	f7ff ff06 	bl	d655c <_Z22__fetch_global_Serial1v>
   d6750:	6803      	ldr	r3, [r0, #0]
   d6752:	691b      	ldr	r3, [r3, #16]
   d6754:	4798      	blx	r3
   d6756:	2800      	cmp	r0, #0
   d6758:	dc03      	bgt.n	d6762 <serialEventRun+0x2e>
   d675a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d675c:	f3af 8000 	nop.w
   d6760:	e7f2      	b.n	d6748 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6762:	f3af 8000 	nop.w
   d6766:	bd08      	pop	{r3, pc}
	...

000d6770 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6770:	b508      	push	{r3, lr}
	serialEventRun();
   d6772:	f7ff ffdf 	bl	d6734 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6776:	f7fe fb8f 	bl	d4e98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d677a:	4b01      	ldr	r3, [pc, #4]	; (d6780 <_post_loop+0x10>)
   d677c:	6018      	str	r0, [r3, #0]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	2003e6e4 	.word	0x2003e6e4

000d6784 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6784:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6786:	2300      	movs	r3, #0
   d6788:	9300      	str	r3, [sp, #0]
   d678a:	461a      	mov	r2, r3
   d678c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6790:	f7fe fd0c 	bl	d51ac <system_ctrl_set_result>
}
   d6794:	b003      	add	sp, #12
   d6796:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d679c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d679c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d679e:	8843      	ldrh	r3, [r0, #2]
   d67a0:	2b0a      	cmp	r3, #10
   d67a2:	d008      	beq.n	d67b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d67a4:	2b50      	cmp	r3, #80	; 0x50
   d67a6:	d109      	bne.n	d67bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d67a8:	4b09      	ldr	r3, [pc, #36]	; (d67d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d67aa:	681b      	ldr	r3, [r3, #0]
   d67ac:	b13b      	cbz	r3, d67be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d67ae:	b003      	add	sp, #12
   d67b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d67b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d67b6:	f7ff ffe5 	bl	d6784 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d67ba:	e006      	b.n	d67ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67bc:	2300      	movs	r3, #0
   d67be:	9300      	str	r3, [sp, #0]
   d67c0:	461a      	mov	r2, r3
   d67c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67c6:	f7fe fcf1 	bl	d51ac <system_ctrl_set_result>
        break;
    }
}
   d67ca:	b003      	add	sp, #12
   d67cc:	f85d fb04 	ldr.w	pc, [sp], #4
   d67d0:	2003e6e0 	.word	0x2003e6e0

000d67d4 <module_user_init_hook>:

void module_user_init_hook()
{
   d67d4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d67d6:	f7fe fb57 	bl	d4e88 <HAL_RNG_GetRandomNumber>
   d67da:	4604      	mov	r4, r0
    srand(seed);
   d67dc:	f001 f816 	bl	d780c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d67e0:	4b07      	ldr	r3, [pc, #28]	; (d6800 <module_user_init_hook+0x2c>)
   d67e2:	b113      	cbz	r3, d67ea <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d67e4:	4620      	mov	r0, r4
   d67e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d67ea:	2100      	movs	r1, #0
   d67ec:	4804      	ldr	r0, [pc, #16]	; (d6800 <module_user_init_hook+0x2c>)
   d67ee:	f7fe fd41 	bl	d5274 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67f2:	2100      	movs	r1, #0
   d67f4:	4803      	ldr	r0, [pc, #12]	; (d6804 <module_user_init_hook+0x30>)
}
   d67f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67fa:	f7fe bccd 	b.w	d5198 <system_ctrl_set_app_request_handler>
   d67fe:	bf00      	nop
   d6800:	00000000 	.word	0x00000000
   d6804:	000d679d 	.word	0x000d679d

000d6808 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6808:	b510      	push	{r4, lr}
   d680a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d680c:	480f      	ldr	r0, [pc, #60]	; (d684c <pinAvailable+0x44>)
   d680e:	f7ff fcdb 	bl	d61c8 <_ZN8SPIClass9isEnabledEv>
   d6812:	b128      	cbz	r0, d6820 <pinAvailable+0x18>
   d6814:	f1a4 030b 	sub.w	r3, r4, #11
   d6818:	2b02      	cmp	r3, #2
   d681a:	d801      	bhi.n	d6820 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d681c:	2000      	movs	r0, #0
   d681e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6820:	f000 f842 	bl	d68a8 <_Z19__fetch_global_Wirev>
   d6824:	f7ff f97d 	bl	d5b22 <_ZN7TwoWire9isEnabledEv>
   d6828:	b108      	cbz	r0, d682e <pinAvailable+0x26>
   d682a:	2c01      	cmp	r4, #1
   d682c:	d9f6      	bls.n	d681c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d682e:	f7ff fe95 	bl	d655c <_Z22__fetch_global_Serial1v>
   d6832:	f7ff fe8f 	bl	d6554 <_ZN11USARTSerial9isEnabledEv>
   d6836:	b118      	cbz	r0, d6840 <pinAvailable+0x38>
   d6838:	f1a4 0309 	sub.w	r3, r4, #9
   d683c:	2b01      	cmp	r3, #1
   d683e:	d9ed      	bls.n	d681c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6840:	2c23      	cmp	r4, #35	; 0x23
   d6842:	bf8c      	ite	hi
   d6844:	2000      	movhi	r0, #0
   d6846:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6848:	bd10      	pop	{r4, pc}
   d684a:	bf00      	nop
   d684c:	2003e708 	.word	0x2003e708

000d6850 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6850:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6852:	b510      	push	{r4, lr}
   d6854:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6856:	bf9c      	itt	ls
   d6858:	340e      	addls	r4, #14
   d685a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d685c:	4620      	mov	r0, r4
   d685e:	f7ff ffd3 	bl	d6808 <pinAvailable>
   d6862:	b150      	cbz	r0, d687a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6864:	2103      	movs	r1, #3
   d6866:	4620      	mov	r0, r4
   d6868:	f7fe fb5e 	bl	d4f28 <HAL_Validate_Pin_Function>
   d686c:	2803      	cmp	r0, #3
   d686e:	d104      	bne.n	d687a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6870:	4620      	mov	r0, r4
}
   d6872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6876:	f7fe bb5f 	b.w	d4f38 <HAL_ADC_Read>
}
   d687a:	2000      	movs	r0, #0
   d687c:	bd10      	pop	{r4, pc}
	...

000d6880 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6880:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6882:	4c07      	ldr	r4, [pc, #28]	; (d68a0 <_Z21__fetch_global_EEPROMv+0x20>)
   d6884:	6823      	ldr	r3, [r4, #0]
   d6886:	07db      	lsls	r3, r3, #31
   d6888:	d408      	bmi.n	d689c <_Z21__fetch_global_EEPROMv+0x1c>
   d688a:	4620      	mov	r0, r4
   d688c:	f7fd fc0b 	bl	d40a6 <__cxa_guard_acquire>
   d6890:	b120      	cbz	r0, d689c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6892:	f7fe fb11 	bl	d4eb8 <HAL_EEPROM_Init>
   d6896:	4620      	mov	r0, r4
   d6898:	f7fd fc0a 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d689c:	4801      	ldr	r0, [pc, #4]	; (d68a4 <_Z21__fetch_global_EEPROMv+0x24>)
   d689e:	bd10      	pop	{r4, pc}
   d68a0:	2003e6e8 	.word	0x2003e6e8
   d68a4:	2003e6ec 	.word	0x2003e6ec

000d68a8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d68a8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d68aa:	4d0b      	ldr	r5, [pc, #44]	; (d68d8 <_Z19__fetch_global_Wirev+0x30>)
   d68ac:	6829      	ldr	r1, [r5, #0]
   d68ae:	f011 0401 	ands.w	r4, r1, #1
   d68b2:	d10f      	bne.n	d68d4 <_Z19__fetch_global_Wirev+0x2c>
   d68b4:	4628      	mov	r0, r5
   d68b6:	f7fd fbf6 	bl	d40a6 <__cxa_guard_acquire>
   d68ba:	b158      	cbz	r0, d68d4 <_Z19__fetch_global_Wirev+0x2c>
   d68bc:	4621      	mov	r1, r4
   d68be:	4807      	ldr	r0, [pc, #28]	; (d68dc <_Z19__fetch_global_Wirev+0x34>)
   d68c0:	f7ff f900 	bl	d5ac4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d68c4:	4628      	mov	r0, r5
   d68c6:	f7fd fbf3 	bl	d40b0 <__cxa_guard_release>
   d68ca:	4a05      	ldr	r2, [pc, #20]	; (d68e0 <_Z19__fetch_global_Wirev+0x38>)
   d68cc:	4905      	ldr	r1, [pc, #20]	; (d68e4 <_Z19__fetch_global_Wirev+0x3c>)
   d68ce:	4803      	ldr	r0, [pc, #12]	; (d68dc <_Z19__fetch_global_Wirev+0x34>)
   d68d0:	f000 f82c 	bl	d692c <__aeabi_atexit>
	return wire;
}
   d68d4:	4801      	ldr	r0, [pc, #4]	; (d68dc <_Z19__fetch_global_Wirev+0x34>)
   d68d6:	bd38      	pop	{r3, r4, r5, pc}
   d68d8:	2003e6f0 	.word	0x2003e6f0
   d68dc:	2003e6f4 	.word	0x2003e6f4
   d68e0:	2003e2d0 	.word	0x2003e2d0
   d68e4:	000d5a6d 	.word	0x000d5a6d

000d68e8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68e8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d68ea:	4c0c      	ldr	r4, [pc, #48]	; (d691c <_GLOBAL__sub_I_SPI+0x34>)
   d68ec:	4e0c      	ldr	r6, [pc, #48]	; (d6920 <_GLOBAL__sub_I_SPI+0x38>)
   d68ee:	4d0d      	ldr	r5, [pc, #52]	; (d6924 <_GLOBAL__sub_I_SPI+0x3c>)
   d68f0:	2100      	movs	r1, #0
   d68f2:	4620      	mov	r0, r4
   d68f4:	f7ff fc54 	bl	d61a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d68f8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68fa:	4c0b      	ldr	r4, [pc, #44]	; (d6928 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d68fc:	4632      	mov	r2, r6
   d68fe:	4629      	mov	r1, r5
   d6900:	f000 f814 	bl	d692c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6904:	2101      	movs	r1, #1
   d6906:	4620      	mov	r0, r4
   d6908:	f7ff fc4a 	bl	d61a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d690c:	4632      	mov	r2, r6
   d690e:	4629      	mov	r1, r5
   d6910:	4620      	mov	r0, r4
   d6912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6916:	f000 b809 	b.w	d692c <__aeabi_atexit>
   d691a:	bf00      	nop
   d691c:	2003e708 	.word	0x2003e708
   d6920:	2003e2d0 	.word	0x2003e2d0
   d6924:	000d6191 	.word	0x000d6191
   d6928:	2003e718 	.word	0x2003e718

000d692c <__aeabi_atexit>:
   d692c:	460b      	mov	r3, r1
   d692e:	4601      	mov	r1, r0
   d6930:	4618      	mov	r0, r3
   d6932:	f000 be51 	b.w	d75d8 <__cxa_atexit>

000d6936 <_ZdlPvj>:
   d6936:	f7fd bbb2 	b.w	d409e <_ZdlPv>

000d693a <_ZSt25__throw_bad_function_callv>:
   d693a:	b508      	push	{r3, lr}
   d693c:	f7fe fd1a 	bl	d5374 <abort>

000d6940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6940:	4b24      	ldr	r3, [pc, #144]	; (d69d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6942:	681a      	ldr	r2, [r3, #0]
   d6944:	07d0      	lsls	r0, r2, #31
   d6946:	bf5c      	itt	pl
   d6948:	2201      	movpl	r2, #1
   d694a:	601a      	strpl	r2, [r3, #0]
   d694c:	4b22      	ldr	r3, [pc, #136]	; (d69d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d694e:	681a      	ldr	r2, [r3, #0]
   d6950:	07d1      	lsls	r1, r2, #31
   d6952:	bf5c      	itt	pl
   d6954:	2201      	movpl	r2, #1
   d6956:	601a      	strpl	r2, [r3, #0]
   d6958:	4b20      	ldr	r3, [pc, #128]	; (d69dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d695a:	681a      	ldr	r2, [r3, #0]
   d695c:	07d2      	lsls	r2, r2, #31
   d695e:	bf5c      	itt	pl
   d6960:	2201      	movpl	r2, #1
   d6962:	601a      	strpl	r2, [r3, #0]
   d6964:	4b1e      	ldr	r3, [pc, #120]	; (d69e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6966:	681a      	ldr	r2, [r3, #0]
   d6968:	07d0      	lsls	r0, r2, #31
   d696a:	bf5c      	itt	pl
   d696c:	2201      	movpl	r2, #1
   d696e:	601a      	strpl	r2, [r3, #0]
   d6970:	4b1c      	ldr	r3, [pc, #112]	; (d69e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6972:	681a      	ldr	r2, [r3, #0]
   d6974:	07d1      	lsls	r1, r2, #31
   d6976:	bf5c      	itt	pl
   d6978:	2201      	movpl	r2, #1
   d697a:	601a      	strpl	r2, [r3, #0]
   d697c:	4b1a      	ldr	r3, [pc, #104]	; (d69e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d697e:	681a      	ldr	r2, [r3, #0]
   d6980:	07d2      	lsls	r2, r2, #31
   d6982:	bf5c      	itt	pl
   d6984:	2201      	movpl	r2, #1
   d6986:	601a      	strpl	r2, [r3, #0]
   d6988:	4b18      	ldr	r3, [pc, #96]	; (d69ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d698a:	681a      	ldr	r2, [r3, #0]
   d698c:	07d0      	lsls	r0, r2, #31
   d698e:	bf5c      	itt	pl
   d6990:	2201      	movpl	r2, #1
   d6992:	601a      	strpl	r2, [r3, #0]
   d6994:	4b16      	ldr	r3, [pc, #88]	; (d69f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6996:	681a      	ldr	r2, [r3, #0]
   d6998:	07d1      	lsls	r1, r2, #31
   d699a:	bf5c      	itt	pl
   d699c:	2201      	movpl	r2, #1
   d699e:	601a      	strpl	r2, [r3, #0]
   d69a0:	4b14      	ldr	r3, [pc, #80]	; (d69f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d69a2:	681a      	ldr	r2, [r3, #0]
   d69a4:	07d2      	lsls	r2, r2, #31
   d69a6:	bf5c      	itt	pl
   d69a8:	2201      	movpl	r2, #1
   d69aa:	601a      	strpl	r2, [r3, #0]
   d69ac:	4b12      	ldr	r3, [pc, #72]	; (d69f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d69ae:	681a      	ldr	r2, [r3, #0]
   d69b0:	07d0      	lsls	r0, r2, #31
   d69b2:	bf5c      	itt	pl
   d69b4:	2201      	movpl	r2, #1
   d69b6:	601a      	strpl	r2, [r3, #0]
   d69b8:	4b10      	ldr	r3, [pc, #64]	; (d69fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d69ba:	681a      	ldr	r2, [r3, #0]
   d69bc:	07d1      	lsls	r1, r2, #31
   d69be:	bf5c      	itt	pl
   d69c0:	2201      	movpl	r2, #1
   d69c2:	601a      	strpl	r2, [r3, #0]
   d69c4:	4b0e      	ldr	r3, [pc, #56]	; (d6a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d69c6:	681a      	ldr	r2, [r3, #0]
   d69c8:	07d2      	lsls	r2, r2, #31
   d69ca:	bf5c      	itt	pl
   d69cc:	2201      	movpl	r2, #1
   d69ce:	601a      	strpl	r2, [r3, #0]
   d69d0:	4770      	bx	lr
   d69d2:	bf00      	nop
   d69d4:	2003e754 	.word	0x2003e754
   d69d8:	2003e750 	.word	0x2003e750
   d69dc:	2003e74c 	.word	0x2003e74c
   d69e0:	2003e748 	.word	0x2003e748
   d69e4:	2003e744 	.word	0x2003e744
   d69e8:	2003e740 	.word	0x2003e740
   d69ec:	2003e73c 	.word	0x2003e73c
   d69f0:	2003e738 	.word	0x2003e738
   d69f4:	2003e734 	.word	0x2003e734
   d69f8:	2003e730 	.word	0x2003e730
   d69fc:	2003e72c 	.word	0x2003e72c
   d6a00:	2003e728 	.word	0x2003e728

000d6a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a04:	4b18      	ldr	r3, [pc, #96]	; (d6a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a06:	681a      	ldr	r2, [r3, #0]
   d6a08:	07d1      	lsls	r1, r2, #31
   d6a0a:	bf5c      	itt	pl
   d6a0c:	2201      	movpl	r2, #1
   d6a0e:	601a      	strpl	r2, [r3, #0]
   d6a10:	4b16      	ldr	r3, [pc, #88]	; (d6a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a12:	681a      	ldr	r2, [r3, #0]
   d6a14:	07d2      	lsls	r2, r2, #31
   d6a16:	bf5c      	itt	pl
   d6a18:	2201      	movpl	r2, #1
   d6a1a:	601a      	strpl	r2, [r3, #0]
   d6a1c:	4b14      	ldr	r3, [pc, #80]	; (d6a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a1e:	681a      	ldr	r2, [r3, #0]
   d6a20:	07d0      	lsls	r0, r2, #31
   d6a22:	bf5c      	itt	pl
   d6a24:	2201      	movpl	r2, #1
   d6a26:	601a      	strpl	r2, [r3, #0]
   d6a28:	4b12      	ldr	r3, [pc, #72]	; (d6a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a2a:	681a      	ldr	r2, [r3, #0]
   d6a2c:	07d1      	lsls	r1, r2, #31
   d6a2e:	bf5c      	itt	pl
   d6a30:	2201      	movpl	r2, #1
   d6a32:	601a      	strpl	r2, [r3, #0]
   d6a34:	4b10      	ldr	r3, [pc, #64]	; (d6a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a36:	681a      	ldr	r2, [r3, #0]
   d6a38:	07d2      	lsls	r2, r2, #31
   d6a3a:	bf5c      	itt	pl
   d6a3c:	2201      	movpl	r2, #1
   d6a3e:	601a      	strpl	r2, [r3, #0]
   d6a40:	4b0e      	ldr	r3, [pc, #56]	; (d6a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a42:	681a      	ldr	r2, [r3, #0]
   d6a44:	07d0      	lsls	r0, r2, #31
   d6a46:	bf5c      	itt	pl
   d6a48:	2201      	movpl	r2, #1
   d6a4a:	601a      	strpl	r2, [r3, #0]
   d6a4c:	4b0c      	ldr	r3, [pc, #48]	; (d6a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a4e:	681a      	ldr	r2, [r3, #0]
   d6a50:	07d1      	lsls	r1, r2, #31
   d6a52:	bf5c      	itt	pl
   d6a54:	2201      	movpl	r2, #1
   d6a56:	601a      	strpl	r2, [r3, #0]
   d6a58:	4b0a      	ldr	r3, [pc, #40]	; (d6a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6a5a:	681a      	ldr	r2, [r3, #0]
   d6a5c:	07d2      	lsls	r2, r2, #31
   d6a5e:	bf5c      	itt	pl
   d6a60:	2201      	movpl	r2, #1
   d6a62:	601a      	strpl	r2, [r3, #0]
   d6a64:	4770      	bx	lr
   d6a66:	bf00      	nop
   d6a68:	2003e774 	.word	0x2003e774
   d6a6c:	2003e770 	.word	0x2003e770
   d6a70:	2003e76c 	.word	0x2003e76c
   d6a74:	2003e768 	.word	0x2003e768
   d6a78:	2003e764 	.word	0x2003e764
   d6a7c:	2003e760 	.word	0x2003e760
   d6a80:	2003e75c 	.word	0x2003e75c
   d6a84:	2003e758 	.word	0x2003e758

000d6a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a88:	4b18      	ldr	r3, [pc, #96]	; (d6aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d1      	lsls	r1, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b16      	ldr	r3, [pc, #88]	; (d6af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d2      	lsls	r2, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b14      	ldr	r3, [pc, #80]	; (d6af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d0      	lsls	r0, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b12      	ldr	r3, [pc, #72]	; (d6af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d1      	lsls	r1, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4b10      	ldr	r3, [pc, #64]	; (d6afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d2      	lsls	r2, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b0e      	ldr	r3, [pc, #56]	; (d6b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d0      	lsls	r0, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4b0c      	ldr	r3, [pc, #48]	; (d6b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d1      	lsls	r1, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4b0a      	ldr	r3, [pc, #40]	; (d6b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d2      	lsls	r2, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4770      	bx	lr
   d6aea:	bf00      	nop
   d6aec:	2003e794 	.word	0x2003e794
   d6af0:	2003e790 	.word	0x2003e790
   d6af4:	2003e78c 	.word	0x2003e78c
   d6af8:	2003e788 	.word	0x2003e788
   d6afc:	2003e784 	.word	0x2003e784
   d6b00:	2003e780 	.word	0x2003e780
   d6b04:	2003e77c 	.word	0x2003e77c
   d6b08:	2003e778 	.word	0x2003e778

000d6b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6b0c:	4b24      	ldr	r3, [pc, #144]	; (d6ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d0      	lsls	r0, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b22      	ldr	r3, [pc, #136]	; (d6ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d1      	lsls	r1, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b20      	ldr	r3, [pc, #128]	; (d6ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d2      	lsls	r2, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b1e      	ldr	r3, [pc, #120]	; (d6bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d0      	lsls	r0, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b1c      	ldr	r3, [pc, #112]	; (d6bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d1      	lsls	r1, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4b1a      	ldr	r3, [pc, #104]	; (d6bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6b4a:	681a      	ldr	r2, [r3, #0]
   d6b4c:	07d2      	lsls	r2, r2, #31
   d6b4e:	bf5c      	itt	pl
   d6b50:	2201      	movpl	r2, #1
   d6b52:	601a      	strpl	r2, [r3, #0]
   d6b54:	4b18      	ldr	r3, [pc, #96]	; (d6bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6b56:	681a      	ldr	r2, [r3, #0]
   d6b58:	07d0      	lsls	r0, r2, #31
   d6b5a:	bf5c      	itt	pl
   d6b5c:	2201      	movpl	r2, #1
   d6b5e:	601a      	strpl	r2, [r3, #0]
   d6b60:	4b16      	ldr	r3, [pc, #88]	; (d6bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6b62:	681a      	ldr	r2, [r3, #0]
   d6b64:	07d1      	lsls	r1, r2, #31
   d6b66:	bf5c      	itt	pl
   d6b68:	2201      	movpl	r2, #1
   d6b6a:	601a      	strpl	r2, [r3, #0]
   d6b6c:	4b14      	ldr	r3, [pc, #80]	; (d6bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6b6e:	681a      	ldr	r2, [r3, #0]
   d6b70:	07d2      	lsls	r2, r2, #31
   d6b72:	bf5c      	itt	pl
   d6b74:	2201      	movpl	r2, #1
   d6b76:	601a      	strpl	r2, [r3, #0]
   d6b78:	4b12      	ldr	r3, [pc, #72]	; (d6bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6b7a:	681a      	ldr	r2, [r3, #0]
   d6b7c:	07d0      	lsls	r0, r2, #31
   d6b7e:	bf5c      	itt	pl
   d6b80:	2201      	movpl	r2, #1
   d6b82:	601a      	strpl	r2, [r3, #0]
   d6b84:	4b10      	ldr	r3, [pc, #64]	; (d6bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6b86:	681a      	ldr	r2, [r3, #0]
   d6b88:	07d1      	lsls	r1, r2, #31
   d6b8a:	bf5c      	itt	pl
   d6b8c:	2201      	movpl	r2, #1
   d6b8e:	601a      	strpl	r2, [r3, #0]
   d6b90:	4b0e      	ldr	r3, [pc, #56]	; (d6bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6b92:	681a      	ldr	r2, [r3, #0]
   d6b94:	07d2      	lsls	r2, r2, #31
   d6b96:	bf5c      	itt	pl
   d6b98:	2201      	movpl	r2, #1
   d6b9a:	601a      	strpl	r2, [r3, #0]
   d6b9c:	4770      	bx	lr
   d6b9e:	bf00      	nop
   d6ba0:	2003e7c4 	.word	0x2003e7c4
   d6ba4:	2003e7c0 	.word	0x2003e7c0
   d6ba8:	2003e7bc 	.word	0x2003e7bc
   d6bac:	2003e7b8 	.word	0x2003e7b8
   d6bb0:	2003e7b4 	.word	0x2003e7b4
   d6bb4:	2003e7b0 	.word	0x2003e7b0
   d6bb8:	2003e7ac 	.word	0x2003e7ac
   d6bbc:	2003e7a8 	.word	0x2003e7a8
   d6bc0:	2003e7a4 	.word	0x2003e7a4
   d6bc4:	2003e7a0 	.word	0x2003e7a0
   d6bc8:	2003e79c 	.word	0x2003e79c
   d6bcc:	2003e798 	.word	0x2003e798

000d6bd0 <__aeabi_drsub>:
   d6bd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6bd4:	e002      	b.n	d6bdc <__adddf3>
   d6bd6:	bf00      	nop

000d6bd8 <__aeabi_dsub>:
   d6bd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6bdc <__adddf3>:
   d6bdc:	b530      	push	{r4, r5, lr}
   d6bde:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6be2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6be6:	ea94 0f05 	teq	r4, r5
   d6bea:	bf08      	it	eq
   d6bec:	ea90 0f02 	teqeq	r0, r2
   d6bf0:	bf1f      	itttt	ne
   d6bf2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6bf6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6bfa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6bfe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c02:	f000 80e2 	beq.w	d6dca <__adddf3+0x1ee>
   d6c06:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6c0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c0e:	bfb8      	it	lt
   d6c10:	426d      	neglt	r5, r5
   d6c12:	dd0c      	ble.n	d6c2e <__adddf3+0x52>
   d6c14:	442c      	add	r4, r5
   d6c16:	ea80 0202 	eor.w	r2, r0, r2
   d6c1a:	ea81 0303 	eor.w	r3, r1, r3
   d6c1e:	ea82 0000 	eor.w	r0, r2, r0
   d6c22:	ea83 0101 	eor.w	r1, r3, r1
   d6c26:	ea80 0202 	eor.w	r2, r0, r2
   d6c2a:	ea81 0303 	eor.w	r3, r1, r3
   d6c2e:	2d36      	cmp	r5, #54	; 0x36
   d6c30:	bf88      	it	hi
   d6c32:	bd30      	pophi	{r4, r5, pc}
   d6c34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c44:	d002      	beq.n	d6c4c <__adddf3+0x70>
   d6c46:	4240      	negs	r0, r0
   d6c48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c50:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c58:	d002      	beq.n	d6c60 <__adddf3+0x84>
   d6c5a:	4252      	negs	r2, r2
   d6c5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c60:	ea94 0f05 	teq	r4, r5
   d6c64:	f000 80a7 	beq.w	d6db6 <__adddf3+0x1da>
   d6c68:	f1a4 0401 	sub.w	r4, r4, #1
   d6c6c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c70:	db0d      	blt.n	d6c8e <__adddf3+0xb2>
   d6c72:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c76:	fa22 f205 	lsr.w	r2, r2, r5
   d6c7a:	1880      	adds	r0, r0, r2
   d6c7c:	f141 0100 	adc.w	r1, r1, #0
   d6c80:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c84:	1880      	adds	r0, r0, r2
   d6c86:	fa43 f305 	asr.w	r3, r3, r5
   d6c8a:	4159      	adcs	r1, r3
   d6c8c:	e00e      	b.n	d6cac <__adddf3+0xd0>
   d6c8e:	f1a5 0520 	sub.w	r5, r5, #32
   d6c92:	f10e 0e20 	add.w	lr, lr, #32
   d6c96:	2a01      	cmp	r2, #1
   d6c98:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c9c:	bf28      	it	cs
   d6c9e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6ca2:	fa43 f305 	asr.w	r3, r3, r5
   d6ca6:	18c0      	adds	r0, r0, r3
   d6ca8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6cb0:	d507      	bpl.n	d6cc2 <__adddf3+0xe6>
   d6cb2:	f04f 0e00 	mov.w	lr, #0
   d6cb6:	f1dc 0c00 	rsbs	ip, ip, #0
   d6cba:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6cbe:	eb6e 0101 	sbc.w	r1, lr, r1
   d6cc2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6cc6:	d31b      	bcc.n	d6d00 <__adddf3+0x124>
   d6cc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6ccc:	d30c      	bcc.n	d6ce8 <__adddf3+0x10c>
   d6cce:	0849      	lsrs	r1, r1, #1
   d6cd0:	ea5f 0030 	movs.w	r0, r0, rrx
   d6cd4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6cd8:	f104 0401 	add.w	r4, r4, #1
   d6cdc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6ce0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6ce4:	f080 809a 	bcs.w	d6e1c <__adddf3+0x240>
   d6ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6cec:	bf08      	it	eq
   d6cee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6cf2:	f150 0000 	adcs.w	r0, r0, #0
   d6cf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6cfa:	ea41 0105 	orr.w	r1, r1, r5
   d6cfe:	bd30      	pop	{r4, r5, pc}
   d6d00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6d04:	4140      	adcs	r0, r0
   d6d06:	eb41 0101 	adc.w	r1, r1, r1
   d6d0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d0e:	f1a4 0401 	sub.w	r4, r4, #1
   d6d12:	d1e9      	bne.n	d6ce8 <__adddf3+0x10c>
   d6d14:	f091 0f00 	teq	r1, #0
   d6d18:	bf04      	itt	eq
   d6d1a:	4601      	moveq	r1, r0
   d6d1c:	2000      	moveq	r0, #0
   d6d1e:	fab1 f381 	clz	r3, r1
   d6d22:	bf08      	it	eq
   d6d24:	3320      	addeq	r3, #32
   d6d26:	f1a3 030b 	sub.w	r3, r3, #11
   d6d2a:	f1b3 0220 	subs.w	r2, r3, #32
   d6d2e:	da0c      	bge.n	d6d4a <__adddf3+0x16e>
   d6d30:	320c      	adds	r2, #12
   d6d32:	dd08      	ble.n	d6d46 <__adddf3+0x16a>
   d6d34:	f102 0c14 	add.w	ip, r2, #20
   d6d38:	f1c2 020c 	rsb	r2, r2, #12
   d6d3c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d40:	fa21 f102 	lsr.w	r1, r1, r2
   d6d44:	e00c      	b.n	d6d60 <__adddf3+0x184>
   d6d46:	f102 0214 	add.w	r2, r2, #20
   d6d4a:	bfd8      	it	le
   d6d4c:	f1c2 0c20 	rsble	ip, r2, #32
   d6d50:	fa01 f102 	lsl.w	r1, r1, r2
   d6d54:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d58:	bfdc      	itt	le
   d6d5a:	ea41 010c 	orrle.w	r1, r1, ip
   d6d5e:	4090      	lslle	r0, r2
   d6d60:	1ae4      	subs	r4, r4, r3
   d6d62:	bfa2      	ittt	ge
   d6d64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d68:	4329      	orrge	r1, r5
   d6d6a:	bd30      	popge	{r4, r5, pc}
   d6d6c:	ea6f 0404 	mvn.w	r4, r4
   d6d70:	3c1f      	subs	r4, #31
   d6d72:	da1c      	bge.n	d6dae <__adddf3+0x1d2>
   d6d74:	340c      	adds	r4, #12
   d6d76:	dc0e      	bgt.n	d6d96 <__adddf3+0x1ba>
   d6d78:	f104 0414 	add.w	r4, r4, #20
   d6d7c:	f1c4 0220 	rsb	r2, r4, #32
   d6d80:	fa20 f004 	lsr.w	r0, r0, r4
   d6d84:	fa01 f302 	lsl.w	r3, r1, r2
   d6d88:	ea40 0003 	orr.w	r0, r0, r3
   d6d8c:	fa21 f304 	lsr.w	r3, r1, r4
   d6d90:	ea45 0103 	orr.w	r1, r5, r3
   d6d94:	bd30      	pop	{r4, r5, pc}
   d6d96:	f1c4 040c 	rsb	r4, r4, #12
   d6d9a:	f1c4 0220 	rsb	r2, r4, #32
   d6d9e:	fa20 f002 	lsr.w	r0, r0, r2
   d6da2:	fa01 f304 	lsl.w	r3, r1, r4
   d6da6:	ea40 0003 	orr.w	r0, r0, r3
   d6daa:	4629      	mov	r1, r5
   d6dac:	bd30      	pop	{r4, r5, pc}
   d6dae:	fa21 f004 	lsr.w	r0, r1, r4
   d6db2:	4629      	mov	r1, r5
   d6db4:	bd30      	pop	{r4, r5, pc}
   d6db6:	f094 0f00 	teq	r4, #0
   d6dba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6dbe:	bf06      	itte	eq
   d6dc0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6dc4:	3401      	addeq	r4, #1
   d6dc6:	3d01      	subne	r5, #1
   d6dc8:	e74e      	b.n	d6c68 <__adddf3+0x8c>
   d6dca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dce:	bf18      	it	ne
   d6dd0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6dd4:	d029      	beq.n	d6e2a <__adddf3+0x24e>
   d6dd6:	ea94 0f05 	teq	r4, r5
   d6dda:	bf08      	it	eq
   d6ddc:	ea90 0f02 	teqeq	r0, r2
   d6de0:	d005      	beq.n	d6dee <__adddf3+0x212>
   d6de2:	ea54 0c00 	orrs.w	ip, r4, r0
   d6de6:	bf04      	itt	eq
   d6de8:	4619      	moveq	r1, r3
   d6dea:	4610      	moveq	r0, r2
   d6dec:	bd30      	pop	{r4, r5, pc}
   d6dee:	ea91 0f03 	teq	r1, r3
   d6df2:	bf1e      	ittt	ne
   d6df4:	2100      	movne	r1, #0
   d6df6:	2000      	movne	r0, #0
   d6df8:	bd30      	popne	{r4, r5, pc}
   d6dfa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6dfe:	d105      	bne.n	d6e0c <__adddf3+0x230>
   d6e00:	0040      	lsls	r0, r0, #1
   d6e02:	4149      	adcs	r1, r1
   d6e04:	bf28      	it	cs
   d6e06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6e0a:	bd30      	pop	{r4, r5, pc}
   d6e0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e10:	bf3c      	itt	cc
   d6e12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e16:	bd30      	popcc	{r4, r5, pc}
   d6e18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e24:	f04f 0000 	mov.w	r0, #0
   d6e28:	bd30      	pop	{r4, r5, pc}
   d6e2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e2e:	bf1a      	itte	ne
   d6e30:	4619      	movne	r1, r3
   d6e32:	4610      	movne	r0, r2
   d6e34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e38:	bf1c      	itt	ne
   d6e3a:	460b      	movne	r3, r1
   d6e3c:	4602      	movne	r2, r0
   d6e3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e42:	bf06      	itte	eq
   d6e44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e48:	ea91 0f03 	teqeq	r1, r3
   d6e4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e50:	bd30      	pop	{r4, r5, pc}
   d6e52:	bf00      	nop

000d6e54 <__aeabi_ui2d>:
   d6e54:	f090 0f00 	teq	r0, #0
   d6e58:	bf04      	itt	eq
   d6e5a:	2100      	moveq	r1, #0
   d6e5c:	4770      	bxeq	lr
   d6e5e:	b530      	push	{r4, r5, lr}
   d6e60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e68:	f04f 0500 	mov.w	r5, #0
   d6e6c:	f04f 0100 	mov.w	r1, #0
   d6e70:	e750      	b.n	d6d14 <__adddf3+0x138>
   d6e72:	bf00      	nop

000d6e74 <__aeabi_i2d>:
   d6e74:	f090 0f00 	teq	r0, #0
   d6e78:	bf04      	itt	eq
   d6e7a:	2100      	moveq	r1, #0
   d6e7c:	4770      	bxeq	lr
   d6e7e:	b530      	push	{r4, r5, lr}
   d6e80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e8c:	bf48      	it	mi
   d6e8e:	4240      	negmi	r0, r0
   d6e90:	f04f 0100 	mov.w	r1, #0
   d6e94:	e73e      	b.n	d6d14 <__adddf3+0x138>
   d6e96:	bf00      	nop

000d6e98 <__aeabi_f2d>:
   d6e98:	0042      	lsls	r2, r0, #1
   d6e9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e9e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6ea2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6ea6:	bf1f      	itttt	ne
   d6ea8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6eac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6eb0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6eb4:	4770      	bxne	lr
   d6eb6:	f092 0f00 	teq	r2, #0
   d6eba:	bf14      	ite	ne
   d6ebc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ec0:	4770      	bxeq	lr
   d6ec2:	b530      	push	{r4, r5, lr}
   d6ec4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ec8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ed0:	e720      	b.n	d6d14 <__adddf3+0x138>
   d6ed2:	bf00      	nop

000d6ed4 <__aeabi_ul2d>:
   d6ed4:	ea50 0201 	orrs.w	r2, r0, r1
   d6ed8:	bf08      	it	eq
   d6eda:	4770      	bxeq	lr
   d6edc:	b530      	push	{r4, r5, lr}
   d6ede:	f04f 0500 	mov.w	r5, #0
   d6ee2:	e00a      	b.n	d6efa <__aeabi_l2d+0x16>

000d6ee4 <__aeabi_l2d>:
   d6ee4:	ea50 0201 	orrs.w	r2, r0, r1
   d6ee8:	bf08      	it	eq
   d6eea:	4770      	bxeq	lr
   d6eec:	b530      	push	{r4, r5, lr}
   d6eee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6ef2:	d502      	bpl.n	d6efa <__aeabi_l2d+0x16>
   d6ef4:	4240      	negs	r0, r0
   d6ef6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6efa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6efe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6f06:	f43f aedc 	beq.w	d6cc2 <__adddf3+0xe6>
   d6f0a:	f04f 0203 	mov.w	r2, #3
   d6f0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f12:	bf18      	it	ne
   d6f14:	3203      	addne	r2, #3
   d6f16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f1a:	bf18      	it	ne
   d6f1c:	3203      	addne	r2, #3
   d6f1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f22:	f1c2 0320 	rsb	r3, r2, #32
   d6f26:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f2a:	fa20 f002 	lsr.w	r0, r0, r2
   d6f2e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f32:	ea40 000e 	orr.w	r0, r0, lr
   d6f36:	fa21 f102 	lsr.w	r1, r1, r2
   d6f3a:	4414      	add	r4, r2
   d6f3c:	e6c1      	b.n	d6cc2 <__adddf3+0xe6>
   d6f3e:	bf00      	nop

000d6f40 <__aeabi_dmul>:
   d6f40:	b570      	push	{r4, r5, r6, lr}
   d6f42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f4e:	bf1d      	ittte	ne
   d6f50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f54:	ea94 0f0c 	teqne	r4, ip
   d6f58:	ea95 0f0c 	teqne	r5, ip
   d6f5c:	f000 f8de 	bleq	d711c <__aeabi_dmul+0x1dc>
   d6f60:	442c      	add	r4, r5
   d6f62:	ea81 0603 	eor.w	r6, r1, r3
   d6f66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f72:	bf18      	it	ne
   d6f74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f80:	d038      	beq.n	d6ff4 <__aeabi_dmul+0xb4>
   d6f82:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f86:	f04f 0500 	mov.w	r5, #0
   d6f8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f92:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f96:	f04f 0600 	mov.w	r6, #0
   d6f9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f9e:	f09c 0f00 	teq	ip, #0
   d6fa2:	bf18      	it	ne
   d6fa4:	f04e 0e01 	orrne.w	lr, lr, #1
   d6fa8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6fac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6fb4:	d204      	bcs.n	d6fc0 <__aeabi_dmul+0x80>
   d6fb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6fba:	416d      	adcs	r5, r5
   d6fbc:	eb46 0606 	adc.w	r6, r6, r6
   d6fc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6fc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6fc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6fcc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6fd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6fd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6fd8:	bf88      	it	hi
   d6fda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6fde:	d81e      	bhi.n	d701e <__aeabi_dmul+0xde>
   d6fe0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6fe4:	bf08      	it	eq
   d6fe6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6fea:	f150 0000 	adcs.w	r0, r0, #0
   d6fee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ff2:	bd70      	pop	{r4, r5, r6, pc}
   d6ff4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6ff8:	ea46 0101 	orr.w	r1, r6, r1
   d6ffc:	ea40 0002 	orr.w	r0, r0, r2
   d7000:	ea81 0103 	eor.w	r1, r1, r3
   d7004:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7008:	bfc2      	ittt	gt
   d700a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d700e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7012:	bd70      	popgt	{r4, r5, r6, pc}
   d7014:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7018:	f04f 0e00 	mov.w	lr, #0
   d701c:	3c01      	subs	r4, #1
   d701e:	f300 80ab 	bgt.w	d7178 <__aeabi_dmul+0x238>
   d7022:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7026:	bfde      	ittt	le
   d7028:	2000      	movle	r0, #0
   d702a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d702e:	bd70      	pople	{r4, r5, r6, pc}
   d7030:	f1c4 0400 	rsb	r4, r4, #0
   d7034:	3c20      	subs	r4, #32
   d7036:	da35      	bge.n	d70a4 <__aeabi_dmul+0x164>
   d7038:	340c      	adds	r4, #12
   d703a:	dc1b      	bgt.n	d7074 <__aeabi_dmul+0x134>
   d703c:	f104 0414 	add.w	r4, r4, #20
   d7040:	f1c4 0520 	rsb	r5, r4, #32
   d7044:	fa00 f305 	lsl.w	r3, r0, r5
   d7048:	fa20 f004 	lsr.w	r0, r0, r4
   d704c:	fa01 f205 	lsl.w	r2, r1, r5
   d7050:	ea40 0002 	orr.w	r0, r0, r2
   d7054:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7058:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d705c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7060:	fa21 f604 	lsr.w	r6, r1, r4
   d7064:	eb42 0106 	adc.w	r1, r2, r6
   d7068:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d706c:	bf08      	it	eq
   d706e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7072:	bd70      	pop	{r4, r5, r6, pc}
   d7074:	f1c4 040c 	rsb	r4, r4, #12
   d7078:	f1c4 0520 	rsb	r5, r4, #32
   d707c:	fa00 f304 	lsl.w	r3, r0, r4
   d7080:	fa20 f005 	lsr.w	r0, r0, r5
   d7084:	fa01 f204 	lsl.w	r2, r1, r4
   d7088:	ea40 0002 	orr.w	r0, r0, r2
   d708c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7090:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7094:	f141 0100 	adc.w	r1, r1, #0
   d7098:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d709c:	bf08      	it	eq
   d709e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70a2:	bd70      	pop	{r4, r5, r6, pc}
   d70a4:	f1c4 0520 	rsb	r5, r4, #32
   d70a8:	fa00 f205 	lsl.w	r2, r0, r5
   d70ac:	ea4e 0e02 	orr.w	lr, lr, r2
   d70b0:	fa20 f304 	lsr.w	r3, r0, r4
   d70b4:	fa01 f205 	lsl.w	r2, r1, r5
   d70b8:	ea43 0302 	orr.w	r3, r3, r2
   d70bc:	fa21 f004 	lsr.w	r0, r1, r4
   d70c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70c4:	fa21 f204 	lsr.w	r2, r1, r4
   d70c8:	ea20 0002 	bic.w	r0, r0, r2
   d70cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d70d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70d4:	bf08      	it	eq
   d70d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70da:	bd70      	pop	{r4, r5, r6, pc}
   d70dc:	f094 0f00 	teq	r4, #0
   d70e0:	d10f      	bne.n	d7102 <__aeabi_dmul+0x1c2>
   d70e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d70e6:	0040      	lsls	r0, r0, #1
   d70e8:	eb41 0101 	adc.w	r1, r1, r1
   d70ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d70f0:	bf08      	it	eq
   d70f2:	3c01      	subeq	r4, #1
   d70f4:	d0f7      	beq.n	d70e6 <__aeabi_dmul+0x1a6>
   d70f6:	ea41 0106 	orr.w	r1, r1, r6
   d70fa:	f095 0f00 	teq	r5, #0
   d70fe:	bf18      	it	ne
   d7100:	4770      	bxne	lr
   d7102:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7106:	0052      	lsls	r2, r2, #1
   d7108:	eb43 0303 	adc.w	r3, r3, r3
   d710c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7110:	bf08      	it	eq
   d7112:	3d01      	subeq	r5, #1
   d7114:	d0f7      	beq.n	d7106 <__aeabi_dmul+0x1c6>
   d7116:	ea43 0306 	orr.w	r3, r3, r6
   d711a:	4770      	bx	lr
   d711c:	ea94 0f0c 	teq	r4, ip
   d7120:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7124:	bf18      	it	ne
   d7126:	ea95 0f0c 	teqne	r5, ip
   d712a:	d00c      	beq.n	d7146 <__aeabi_dmul+0x206>
   d712c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7130:	bf18      	it	ne
   d7132:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7136:	d1d1      	bne.n	d70dc <__aeabi_dmul+0x19c>
   d7138:	ea81 0103 	eor.w	r1, r1, r3
   d713c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7140:	f04f 0000 	mov.w	r0, #0
   d7144:	bd70      	pop	{r4, r5, r6, pc}
   d7146:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d714a:	bf06      	itte	eq
   d714c:	4610      	moveq	r0, r2
   d714e:	4619      	moveq	r1, r3
   d7150:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7154:	d019      	beq.n	d718a <__aeabi_dmul+0x24a>
   d7156:	ea94 0f0c 	teq	r4, ip
   d715a:	d102      	bne.n	d7162 <__aeabi_dmul+0x222>
   d715c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7160:	d113      	bne.n	d718a <__aeabi_dmul+0x24a>
   d7162:	ea95 0f0c 	teq	r5, ip
   d7166:	d105      	bne.n	d7174 <__aeabi_dmul+0x234>
   d7168:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d716c:	bf1c      	itt	ne
   d716e:	4610      	movne	r0, r2
   d7170:	4619      	movne	r1, r3
   d7172:	d10a      	bne.n	d718a <__aeabi_dmul+0x24a>
   d7174:	ea81 0103 	eor.w	r1, r1, r3
   d7178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d717c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7180:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7184:	f04f 0000 	mov.w	r0, #0
   d7188:	bd70      	pop	{r4, r5, r6, pc}
   d718a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d718e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7192:	bd70      	pop	{r4, r5, r6, pc}

000d7194 <__aeabi_ddiv>:
   d7194:	b570      	push	{r4, r5, r6, lr}
   d7196:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d719a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d719e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71a2:	bf1d      	ittte	ne
   d71a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71a8:	ea94 0f0c 	teqne	r4, ip
   d71ac:	ea95 0f0c 	teqne	r5, ip
   d71b0:	f000 f8a7 	bleq	d7302 <__aeabi_ddiv+0x16e>
   d71b4:	eba4 0405 	sub.w	r4, r4, r5
   d71b8:	ea81 0e03 	eor.w	lr, r1, r3
   d71bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d71c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d71c4:	f000 8088 	beq.w	d72d8 <__aeabi_ddiv+0x144>
   d71c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d71cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d71d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d71d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d71d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d71dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d71e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d71e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d71e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d71ec:	429d      	cmp	r5, r3
   d71ee:	bf08      	it	eq
   d71f0:	4296      	cmpeq	r6, r2
   d71f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d71f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d71fa:	d202      	bcs.n	d7202 <__aeabi_ddiv+0x6e>
   d71fc:	085b      	lsrs	r3, r3, #1
   d71fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d7202:	1ab6      	subs	r6, r6, r2
   d7204:	eb65 0503 	sbc.w	r5, r5, r3
   d7208:	085b      	lsrs	r3, r3, #1
   d720a:	ea4f 0232 	mov.w	r2, r2, rrx
   d720e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7212:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7216:	ebb6 0e02 	subs.w	lr, r6, r2
   d721a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d721e:	bf22      	ittt	cs
   d7220:	1ab6      	subcs	r6, r6, r2
   d7222:	4675      	movcs	r5, lr
   d7224:	ea40 000c 	orrcs.w	r0, r0, ip
   d7228:	085b      	lsrs	r3, r3, #1
   d722a:	ea4f 0232 	mov.w	r2, r2, rrx
   d722e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7232:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7236:	bf22      	ittt	cs
   d7238:	1ab6      	subcs	r6, r6, r2
   d723a:	4675      	movcs	r5, lr
   d723c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7240:	085b      	lsrs	r3, r3, #1
   d7242:	ea4f 0232 	mov.w	r2, r2, rrx
   d7246:	ebb6 0e02 	subs.w	lr, r6, r2
   d724a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d724e:	bf22      	ittt	cs
   d7250:	1ab6      	subcs	r6, r6, r2
   d7252:	4675      	movcs	r5, lr
   d7254:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7258:	085b      	lsrs	r3, r3, #1
   d725a:	ea4f 0232 	mov.w	r2, r2, rrx
   d725e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7262:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7266:	bf22      	ittt	cs
   d7268:	1ab6      	subcs	r6, r6, r2
   d726a:	4675      	movcs	r5, lr
   d726c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7270:	ea55 0e06 	orrs.w	lr, r5, r6
   d7274:	d018      	beq.n	d72a8 <__aeabi_ddiv+0x114>
   d7276:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d727a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d727e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7282:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7286:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d728a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d728e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7292:	d1c0      	bne.n	d7216 <__aeabi_ddiv+0x82>
   d7294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7298:	d10b      	bne.n	d72b2 <__aeabi_ddiv+0x11e>
   d729a:	ea41 0100 	orr.w	r1, r1, r0
   d729e:	f04f 0000 	mov.w	r0, #0
   d72a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d72a6:	e7b6      	b.n	d7216 <__aeabi_ddiv+0x82>
   d72a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72ac:	bf04      	itt	eq
   d72ae:	4301      	orreq	r1, r0
   d72b0:	2000      	moveq	r0, #0
   d72b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d72b6:	bf88      	it	hi
   d72b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d72bc:	f63f aeaf 	bhi.w	d701e <__aeabi_dmul+0xde>
   d72c0:	ebb5 0c03 	subs.w	ip, r5, r3
   d72c4:	bf04      	itt	eq
   d72c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d72ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d72ce:	f150 0000 	adcs.w	r0, r0, #0
   d72d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d72d6:	bd70      	pop	{r4, r5, r6, pc}
   d72d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d72dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d72e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d72e4:	bfc2      	ittt	gt
   d72e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d72ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d72ee:	bd70      	popgt	{r4, r5, r6, pc}
   d72f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72f4:	f04f 0e00 	mov.w	lr, #0
   d72f8:	3c01      	subs	r4, #1
   d72fa:	e690      	b.n	d701e <__aeabi_dmul+0xde>
   d72fc:	ea45 0e06 	orr.w	lr, r5, r6
   d7300:	e68d      	b.n	d701e <__aeabi_dmul+0xde>
   d7302:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7306:	ea94 0f0c 	teq	r4, ip
   d730a:	bf08      	it	eq
   d730c:	ea95 0f0c 	teqeq	r5, ip
   d7310:	f43f af3b 	beq.w	d718a <__aeabi_dmul+0x24a>
   d7314:	ea94 0f0c 	teq	r4, ip
   d7318:	d10a      	bne.n	d7330 <__aeabi_ddiv+0x19c>
   d731a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d731e:	f47f af34 	bne.w	d718a <__aeabi_dmul+0x24a>
   d7322:	ea95 0f0c 	teq	r5, ip
   d7326:	f47f af25 	bne.w	d7174 <__aeabi_dmul+0x234>
   d732a:	4610      	mov	r0, r2
   d732c:	4619      	mov	r1, r3
   d732e:	e72c      	b.n	d718a <__aeabi_dmul+0x24a>
   d7330:	ea95 0f0c 	teq	r5, ip
   d7334:	d106      	bne.n	d7344 <__aeabi_ddiv+0x1b0>
   d7336:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d733a:	f43f aefd 	beq.w	d7138 <__aeabi_dmul+0x1f8>
   d733e:	4610      	mov	r0, r2
   d7340:	4619      	mov	r1, r3
   d7342:	e722      	b.n	d718a <__aeabi_dmul+0x24a>
   d7344:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7348:	bf18      	it	ne
   d734a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d734e:	f47f aec5 	bne.w	d70dc <__aeabi_dmul+0x19c>
   d7352:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7356:	f47f af0d 	bne.w	d7174 <__aeabi_dmul+0x234>
   d735a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d735e:	f47f aeeb 	bne.w	d7138 <__aeabi_dmul+0x1f8>
   d7362:	e712      	b.n	d718a <__aeabi_dmul+0x24a>

000d7364 <__gedf2>:
   d7364:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7368:	e006      	b.n	d7378 <__cmpdf2+0x4>
   d736a:	bf00      	nop

000d736c <__ledf2>:
   d736c:	f04f 0c01 	mov.w	ip, #1
   d7370:	e002      	b.n	d7378 <__cmpdf2+0x4>
   d7372:	bf00      	nop

000d7374 <__cmpdf2>:
   d7374:	f04f 0c01 	mov.w	ip, #1
   d7378:	f84d cd04 	str.w	ip, [sp, #-4]!
   d737c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7384:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7388:	bf18      	it	ne
   d738a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d738e:	d01b      	beq.n	d73c8 <__cmpdf2+0x54>
   d7390:	b001      	add	sp, #4
   d7392:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7396:	bf0c      	ite	eq
   d7398:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d739c:	ea91 0f03 	teqne	r1, r3
   d73a0:	bf02      	ittt	eq
   d73a2:	ea90 0f02 	teqeq	r0, r2
   d73a6:	2000      	moveq	r0, #0
   d73a8:	4770      	bxeq	lr
   d73aa:	f110 0f00 	cmn.w	r0, #0
   d73ae:	ea91 0f03 	teq	r1, r3
   d73b2:	bf58      	it	pl
   d73b4:	4299      	cmppl	r1, r3
   d73b6:	bf08      	it	eq
   d73b8:	4290      	cmpeq	r0, r2
   d73ba:	bf2c      	ite	cs
   d73bc:	17d8      	asrcs	r0, r3, #31
   d73be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d73c2:	f040 0001 	orr.w	r0, r0, #1
   d73c6:	4770      	bx	lr
   d73c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73d0:	d102      	bne.n	d73d8 <__cmpdf2+0x64>
   d73d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d73d6:	d107      	bne.n	d73e8 <__cmpdf2+0x74>
   d73d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73e0:	d1d6      	bne.n	d7390 <__cmpdf2+0x1c>
   d73e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d73e6:	d0d3      	beq.n	d7390 <__cmpdf2+0x1c>
   d73e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d73ec:	4770      	bx	lr
   d73ee:	bf00      	nop

000d73f0 <__aeabi_cdrcmple>:
   d73f0:	4684      	mov	ip, r0
   d73f2:	4610      	mov	r0, r2
   d73f4:	4662      	mov	r2, ip
   d73f6:	468c      	mov	ip, r1
   d73f8:	4619      	mov	r1, r3
   d73fa:	4663      	mov	r3, ip
   d73fc:	e000      	b.n	d7400 <__aeabi_cdcmpeq>
   d73fe:	bf00      	nop

000d7400 <__aeabi_cdcmpeq>:
   d7400:	b501      	push	{r0, lr}
   d7402:	f7ff ffb7 	bl	d7374 <__cmpdf2>
   d7406:	2800      	cmp	r0, #0
   d7408:	bf48      	it	mi
   d740a:	f110 0f00 	cmnmi.w	r0, #0
   d740e:	bd01      	pop	{r0, pc}

000d7410 <__aeabi_dcmpeq>:
   d7410:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7414:	f7ff fff4 	bl	d7400 <__aeabi_cdcmpeq>
   d7418:	bf0c      	ite	eq
   d741a:	2001      	moveq	r0, #1
   d741c:	2000      	movne	r0, #0
   d741e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7422:	bf00      	nop

000d7424 <__aeabi_dcmplt>:
   d7424:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7428:	f7ff ffea 	bl	d7400 <__aeabi_cdcmpeq>
   d742c:	bf34      	ite	cc
   d742e:	2001      	movcc	r0, #1
   d7430:	2000      	movcs	r0, #0
   d7432:	f85d fb08 	ldr.w	pc, [sp], #8
   d7436:	bf00      	nop

000d7438 <__aeabi_dcmple>:
   d7438:	f84d ed08 	str.w	lr, [sp, #-8]!
   d743c:	f7ff ffe0 	bl	d7400 <__aeabi_cdcmpeq>
   d7440:	bf94      	ite	ls
   d7442:	2001      	movls	r0, #1
   d7444:	2000      	movhi	r0, #0
   d7446:	f85d fb08 	ldr.w	pc, [sp], #8
   d744a:	bf00      	nop

000d744c <__aeabi_dcmpge>:
   d744c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7450:	f7ff ffce 	bl	d73f0 <__aeabi_cdrcmple>
   d7454:	bf94      	ite	ls
   d7456:	2001      	movls	r0, #1
   d7458:	2000      	movhi	r0, #0
   d745a:	f85d fb08 	ldr.w	pc, [sp], #8
   d745e:	bf00      	nop

000d7460 <__aeabi_dcmpgt>:
   d7460:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7464:	f7ff ffc4 	bl	d73f0 <__aeabi_cdrcmple>
   d7468:	bf34      	ite	cc
   d746a:	2001      	movcc	r0, #1
   d746c:	2000      	movcs	r0, #0
   d746e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7472:	bf00      	nop

000d7474 <__aeabi_dcmpun>:
   d7474:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7478:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d747c:	d102      	bne.n	d7484 <__aeabi_dcmpun+0x10>
   d747e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7482:	d10a      	bne.n	d749a <__aeabi_dcmpun+0x26>
   d7484:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7488:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d748c:	d102      	bne.n	d7494 <__aeabi_dcmpun+0x20>
   d748e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7492:	d102      	bne.n	d749a <__aeabi_dcmpun+0x26>
   d7494:	f04f 0000 	mov.w	r0, #0
   d7498:	4770      	bx	lr
   d749a:	f04f 0001 	mov.w	r0, #1
   d749e:	4770      	bx	lr

000d74a0 <__aeabi_d2iz>:
   d74a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d74a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d74a8:	d215      	bcs.n	d74d6 <__aeabi_d2iz+0x36>
   d74aa:	d511      	bpl.n	d74d0 <__aeabi_d2iz+0x30>
   d74ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74b4:	d912      	bls.n	d74dc <__aeabi_d2iz+0x3c>
   d74b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d74c6:	fa23 f002 	lsr.w	r0, r3, r2
   d74ca:	bf18      	it	ne
   d74cc:	4240      	negne	r0, r0
   d74ce:	4770      	bx	lr
   d74d0:	f04f 0000 	mov.w	r0, #0
   d74d4:	4770      	bx	lr
   d74d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d74da:	d105      	bne.n	d74e8 <__aeabi_d2iz+0x48>
   d74dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d74e0:	bf08      	it	eq
   d74e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d74e6:	4770      	bx	lr
   d74e8:	f04f 0000 	mov.w	r0, #0
   d74ec:	4770      	bx	lr
   d74ee:	bf00      	nop

000d74f0 <__aeabi_d2uiz>:
   d74f0:	004a      	lsls	r2, r1, #1
   d74f2:	d211      	bcs.n	d7518 <__aeabi_d2uiz+0x28>
   d74f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d74f8:	d211      	bcs.n	d751e <__aeabi_d2uiz+0x2e>
   d74fa:	d50d      	bpl.n	d7518 <__aeabi_d2uiz+0x28>
   d74fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7500:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7504:	d40e      	bmi.n	d7524 <__aeabi_d2uiz+0x34>
   d7506:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d750a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d750e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7512:	fa23 f002 	lsr.w	r0, r3, r2
   d7516:	4770      	bx	lr
   d7518:	f04f 0000 	mov.w	r0, #0
   d751c:	4770      	bx	lr
   d751e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7522:	d102      	bne.n	d752a <__aeabi_d2uiz+0x3a>
   d7524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7528:	4770      	bx	lr
   d752a:	f04f 0000 	mov.w	r0, #0
   d752e:	4770      	bx	lr

000d7530 <__aeabi_d2f>:
   d7530:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7534:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7538:	bf24      	itt	cs
   d753a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d753e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7542:	d90d      	bls.n	d7560 <__aeabi_d2f+0x30>
   d7544:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7548:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d754c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7550:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7554:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7558:	bf08      	it	eq
   d755a:	f020 0001 	biceq.w	r0, r0, #1
   d755e:	4770      	bx	lr
   d7560:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7564:	d121      	bne.n	d75aa <__aeabi_d2f+0x7a>
   d7566:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d756a:	bfbc      	itt	lt
   d756c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7570:	4770      	bxlt	lr
   d7572:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7576:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d757a:	f1c2 0218 	rsb	r2, r2, #24
   d757e:	f1c2 0c20 	rsb	ip, r2, #32
   d7582:	fa10 f30c 	lsls.w	r3, r0, ip
   d7586:	fa20 f002 	lsr.w	r0, r0, r2
   d758a:	bf18      	it	ne
   d758c:	f040 0001 	orrne.w	r0, r0, #1
   d7590:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7594:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7598:	fa03 fc0c 	lsl.w	ip, r3, ip
   d759c:	ea40 000c 	orr.w	r0, r0, ip
   d75a0:	fa23 f302 	lsr.w	r3, r3, r2
   d75a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d75a8:	e7cc      	b.n	d7544 <__aeabi_d2f+0x14>
   d75aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d75ae:	d107      	bne.n	d75c0 <__aeabi_d2f+0x90>
   d75b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d75b4:	bf1e      	ittt	ne
   d75b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d75ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d75be:	4770      	bxne	lr
   d75c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d75c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d75c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d75cc:	4770      	bx	lr
   d75ce:	bf00      	nop

000d75d0 <atoi>:
   d75d0:	220a      	movs	r2, #10
   d75d2:	2100      	movs	r1, #0
   d75d4:	f000 ba26 	b.w	d7a24 <strtol>

000d75d8 <__cxa_atexit>:
   d75d8:	b510      	push	{r4, lr}
   d75da:	4c05      	ldr	r4, [pc, #20]	; (d75f0 <__cxa_atexit+0x18>)
   d75dc:	4613      	mov	r3, r2
   d75de:	b12c      	cbz	r4, d75ec <__cxa_atexit+0x14>
   d75e0:	460a      	mov	r2, r1
   d75e2:	4601      	mov	r1, r0
   d75e4:	2002      	movs	r0, #2
   d75e6:	f3af 8000 	nop.w
   d75ea:	bd10      	pop	{r4, pc}
   d75ec:	4620      	mov	r0, r4
   d75ee:	bd10      	pop	{r4, pc}
   d75f0:	00000000 	.word	0x00000000

000d75f4 <localtime>:
   d75f4:	b538      	push	{r3, r4, r5, lr}
   d75f6:	4b07      	ldr	r3, [pc, #28]	; (d7614 <localtime+0x20>)
   d75f8:	681c      	ldr	r4, [r3, #0]
   d75fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d75fc:	4605      	mov	r5, r0
   d75fe:	b91b      	cbnz	r3, d7608 <localtime+0x14>
   d7600:	2024      	movs	r0, #36	; 0x24
   d7602:	f7fd fe8f 	bl	d5324 <malloc>
   d7606:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7608:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d760a:	4628      	mov	r0, r5
   d760c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7610:	f000 b802 	b.w	d7618 <localtime_r>
   d7614:	2003e280 	.word	0x2003e280

000d7618 <localtime_r>:
   d7618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d761c:	460c      	mov	r4, r1
   d761e:	4680      	mov	r8, r0
   d7620:	f000 fd06 	bl	d8030 <__gettzinfo>
   d7624:	4621      	mov	r1, r4
   d7626:	4607      	mov	r7, r0
   d7628:	4640      	mov	r0, r8
   d762a:	f000 fd05 	bl	d8038 <gmtime_r>
   d762e:	6946      	ldr	r6, [r0, #20]
   d7630:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7634:	07b3      	lsls	r3, r6, #30
   d7636:	4604      	mov	r4, r0
   d7638:	d105      	bne.n	d7646 <localtime_r+0x2e>
   d763a:	2264      	movs	r2, #100	; 0x64
   d763c:	fb96 f3f2 	sdiv	r3, r6, r2
   d7640:	fb02 6313 	mls	r3, r2, r3, r6
   d7644:	b94b      	cbnz	r3, d765a <localtime_r+0x42>
   d7646:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d764a:	fb96 f3f5 	sdiv	r3, r6, r5
   d764e:	fb05 6513 	mls	r5, r5, r3, r6
   d7652:	fab5 f385 	clz	r3, r5
   d7656:	095b      	lsrs	r3, r3, #5
   d7658:	e000      	b.n	d765c <localtime_r+0x44>
   d765a:	2301      	movs	r3, #1
   d765c:	4a5f      	ldr	r2, [pc, #380]	; (d77dc <localtime_r+0x1c4>)
   d765e:	2530      	movs	r5, #48	; 0x30
   d7660:	fb05 2503 	mla	r5, r5, r3, r2
   d7664:	f000 fb18 	bl	d7c98 <__tz_lock>
   d7668:	f000 fb18 	bl	d7c9c <_tzset_unlocked>
   d766c:	4b5c      	ldr	r3, [pc, #368]	; (d77e0 <localtime_r+0x1c8>)
   d766e:	681b      	ldr	r3, [r3, #0]
   d7670:	b1f3      	cbz	r3, d76b0 <localtime_r+0x98>
   d7672:	687b      	ldr	r3, [r7, #4]
   d7674:	429e      	cmp	r6, r3
   d7676:	d105      	bne.n	d7684 <localtime_r+0x6c>
   d7678:	6839      	ldr	r1, [r7, #0]
   d767a:	f8d8 3000 	ldr.w	r3, [r8]
   d767e:	69fa      	ldr	r2, [r7, #28]
   d7680:	b941      	cbnz	r1, d7694 <localtime_r+0x7c>
   d7682:	e00a      	b.n	d769a <localtime_r+0x82>
   d7684:	4630      	mov	r0, r6
   d7686:	f000 fa5f 	bl	d7b48 <__tzcalc_limits>
   d768a:	2800      	cmp	r0, #0
   d768c:	d1f4      	bne.n	d7678 <localtime_r+0x60>
   d768e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7692:	e00d      	b.n	d76b0 <localtime_r+0x98>
   d7694:	4293      	cmp	r3, r2
   d7696:	db08      	blt.n	d76aa <localtime_r+0x92>
   d7698:	e001      	b.n	d769e <localtime_r+0x86>
   d769a:	4293      	cmp	r3, r2
   d769c:	da07      	bge.n	d76ae <localtime_r+0x96>
   d769e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d76a0:	4293      	cmp	r3, r2
   d76a2:	bfac      	ite	ge
   d76a4:	2300      	movge	r3, #0
   d76a6:	2301      	movlt	r3, #1
   d76a8:	e002      	b.n	d76b0 <localtime_r+0x98>
   d76aa:	2300      	movs	r3, #0
   d76ac:	e000      	b.n	d76b0 <localtime_r+0x98>
   d76ae:	2301      	movs	r3, #1
   d76b0:	6223      	str	r3, [r4, #32]
   d76b2:	6a23      	ldr	r3, [r4, #32]
   d76b4:	2b01      	cmp	r3, #1
   d76b6:	bf0c      	ite	eq
   d76b8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d76ba:	6a39      	ldrne	r1, [r7, #32]
   d76bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d76c0:	203c      	movs	r0, #60	; 0x3c
   d76c2:	fb91 f6f3 	sdiv	r6, r1, r3
   d76c6:	fb03 1316 	mls	r3, r3, r6, r1
   d76ca:	6861      	ldr	r1, [r4, #4]
   d76cc:	fb93 f2f0 	sdiv	r2, r3, r0
   d76d0:	fb00 3012 	mls	r0, r0, r2, r3
   d76d4:	6823      	ldr	r3, [r4, #0]
   d76d6:	1a89      	subs	r1, r1, r2
   d76d8:	68a2      	ldr	r2, [r4, #8]
   d76da:	6061      	str	r1, [r4, #4]
   d76dc:	1a1b      	subs	r3, r3, r0
   d76de:	1b92      	subs	r2, r2, r6
   d76e0:	2b3b      	cmp	r3, #59	; 0x3b
   d76e2:	6023      	str	r3, [r4, #0]
   d76e4:	60a2      	str	r2, [r4, #8]
   d76e6:	dd03      	ble.n	d76f0 <localtime_r+0xd8>
   d76e8:	3101      	adds	r1, #1
   d76ea:	6061      	str	r1, [r4, #4]
   d76ec:	3b3c      	subs	r3, #60	; 0x3c
   d76ee:	e004      	b.n	d76fa <localtime_r+0xe2>
   d76f0:	2b00      	cmp	r3, #0
   d76f2:	da03      	bge.n	d76fc <localtime_r+0xe4>
   d76f4:	3901      	subs	r1, #1
   d76f6:	6061      	str	r1, [r4, #4]
   d76f8:	333c      	adds	r3, #60	; 0x3c
   d76fa:	6023      	str	r3, [r4, #0]
   d76fc:	6863      	ldr	r3, [r4, #4]
   d76fe:	2b3b      	cmp	r3, #59	; 0x3b
   d7700:	dd03      	ble.n	d770a <localtime_r+0xf2>
   d7702:	3201      	adds	r2, #1
   d7704:	60a2      	str	r2, [r4, #8]
   d7706:	3b3c      	subs	r3, #60	; 0x3c
   d7708:	e004      	b.n	d7714 <localtime_r+0xfc>
   d770a:	2b00      	cmp	r3, #0
   d770c:	da03      	bge.n	d7716 <localtime_r+0xfe>
   d770e:	3a01      	subs	r2, #1
   d7710:	60a2      	str	r2, [r4, #8]
   d7712:	333c      	adds	r3, #60	; 0x3c
   d7714:	6063      	str	r3, [r4, #4]
   d7716:	68a3      	ldr	r3, [r4, #8]
   d7718:	2b17      	cmp	r3, #23
   d771a:	dd22      	ble.n	d7762 <localtime_r+0x14a>
   d771c:	69e2      	ldr	r2, [r4, #28]
   d771e:	3201      	adds	r2, #1
   d7720:	61e2      	str	r2, [r4, #28]
   d7722:	69a2      	ldr	r2, [r4, #24]
   d7724:	3201      	adds	r2, #1
   d7726:	2a06      	cmp	r2, #6
   d7728:	bfc8      	it	gt
   d772a:	2200      	movgt	r2, #0
   d772c:	61a2      	str	r2, [r4, #24]
   d772e:	68e2      	ldr	r2, [r4, #12]
   d7730:	3b18      	subs	r3, #24
   d7732:	3201      	adds	r2, #1
   d7734:	60a3      	str	r3, [r4, #8]
   d7736:	6923      	ldr	r3, [r4, #16]
   d7738:	60e2      	str	r2, [r4, #12]
   d773a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d773e:	428a      	cmp	r2, r1
   d7740:	dd46      	ble.n	d77d0 <localtime_r+0x1b8>
   d7742:	3301      	adds	r3, #1
   d7744:	2b0c      	cmp	r3, #12
   d7746:	bf0c      	ite	eq
   d7748:	6963      	ldreq	r3, [r4, #20]
   d774a:	6123      	strne	r3, [r4, #16]
   d774c:	eba2 0201 	sub.w	r2, r2, r1
   d7750:	60e2      	str	r2, [r4, #12]
   d7752:	bf01      	itttt	eq
   d7754:	3301      	addeq	r3, #1
   d7756:	2200      	moveq	r2, #0
   d7758:	6122      	streq	r2, [r4, #16]
   d775a:	6163      	streq	r3, [r4, #20]
   d775c:	bf08      	it	eq
   d775e:	61e2      	streq	r2, [r4, #28]
   d7760:	e036      	b.n	d77d0 <localtime_r+0x1b8>
   d7762:	2b00      	cmp	r3, #0
   d7764:	da34      	bge.n	d77d0 <localtime_r+0x1b8>
   d7766:	69e2      	ldr	r2, [r4, #28]
   d7768:	3a01      	subs	r2, #1
   d776a:	61e2      	str	r2, [r4, #28]
   d776c:	69a2      	ldr	r2, [r4, #24]
   d776e:	3a01      	subs	r2, #1
   d7770:	bf48      	it	mi
   d7772:	2206      	movmi	r2, #6
   d7774:	61a2      	str	r2, [r4, #24]
   d7776:	68e2      	ldr	r2, [r4, #12]
   d7778:	3318      	adds	r3, #24
   d777a:	3a01      	subs	r2, #1
   d777c:	60e2      	str	r2, [r4, #12]
   d777e:	60a3      	str	r3, [r4, #8]
   d7780:	bb32      	cbnz	r2, d77d0 <localtime_r+0x1b8>
   d7782:	6923      	ldr	r3, [r4, #16]
   d7784:	3b01      	subs	r3, #1
   d7786:	d401      	bmi.n	d778c <localtime_r+0x174>
   d7788:	6123      	str	r3, [r4, #16]
   d778a:	e01d      	b.n	d77c8 <localtime_r+0x1b0>
   d778c:	230b      	movs	r3, #11
   d778e:	6123      	str	r3, [r4, #16]
   d7790:	6963      	ldr	r3, [r4, #20]
   d7792:	1e5a      	subs	r2, r3, #1
   d7794:	f012 0f03 	tst.w	r2, #3
   d7798:	6162      	str	r2, [r4, #20]
   d779a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d779e:	d105      	bne.n	d77ac <localtime_r+0x194>
   d77a0:	2164      	movs	r1, #100	; 0x64
   d77a2:	fb93 f2f1 	sdiv	r2, r3, r1
   d77a6:	fb01 3212 	mls	r2, r1, r2, r3
   d77aa:	b94a      	cbnz	r2, d77c0 <localtime_r+0x1a8>
   d77ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d77b0:	fb93 f2f1 	sdiv	r2, r3, r1
   d77b4:	fb01 3312 	mls	r3, r1, r2, r3
   d77b8:	fab3 f383 	clz	r3, r3
   d77bc:	095b      	lsrs	r3, r3, #5
   d77be:	e000      	b.n	d77c2 <localtime_r+0x1aa>
   d77c0:	2301      	movs	r3, #1
   d77c2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d77c6:	61e3      	str	r3, [r4, #28]
   d77c8:	6923      	ldr	r3, [r4, #16]
   d77ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d77ce:	60e3      	str	r3, [r4, #12]
   d77d0:	f000 fa63 	bl	d7c9a <__tz_unlock>
   d77d4:	4620      	mov	r0, r4
   d77d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d77da:	bf00      	nop
   d77dc:	000d8850 	.word	0x000d8850
   d77e0:	2003e7e4 	.word	0x2003e7e4

000d77e4 <memcpy>:
   d77e4:	b510      	push	{r4, lr}
   d77e6:	1e43      	subs	r3, r0, #1
   d77e8:	440a      	add	r2, r1
   d77ea:	4291      	cmp	r1, r2
   d77ec:	d004      	beq.n	d77f8 <memcpy+0x14>
   d77ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77f2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d77f6:	e7f8      	b.n	d77ea <memcpy+0x6>
   d77f8:	bd10      	pop	{r4, pc}

000d77fa <memset>:
   d77fa:	4402      	add	r2, r0
   d77fc:	4603      	mov	r3, r0
   d77fe:	4293      	cmp	r3, r2
   d7800:	d002      	beq.n	d7808 <memset+0xe>
   d7802:	f803 1b01 	strb.w	r1, [r3], #1
   d7806:	e7fa      	b.n	d77fe <memset+0x4>
   d7808:	4770      	bx	lr
	...

000d780c <srand>:
   d780c:	b538      	push	{r3, r4, r5, lr}
   d780e:	4b12      	ldr	r3, [pc, #72]	; (d7858 <srand+0x4c>)
   d7810:	681c      	ldr	r4, [r3, #0]
   d7812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7814:	4605      	mov	r5, r0
   d7816:	b9d3      	cbnz	r3, d784e <srand+0x42>
   d7818:	2018      	movs	r0, #24
   d781a:	f7fd fd83 	bl	d5324 <malloc>
   d781e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7822:	63a0      	str	r0, [r4, #56]	; 0x38
   d7824:	8003      	strh	r3, [r0, #0]
   d7826:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d782a:	8043      	strh	r3, [r0, #2]
   d782c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7830:	8083      	strh	r3, [r0, #4]
   d7832:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7836:	80c3      	strh	r3, [r0, #6]
   d7838:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d783c:	8103      	strh	r3, [r0, #8]
   d783e:	2305      	movs	r3, #5
   d7840:	8143      	strh	r3, [r0, #10]
   d7842:	230b      	movs	r3, #11
   d7844:	8183      	strh	r3, [r0, #12]
   d7846:	2201      	movs	r2, #1
   d7848:	2300      	movs	r3, #0
   d784a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d784e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7850:	2200      	movs	r2, #0
   d7852:	611d      	str	r5, [r3, #16]
   d7854:	615a      	str	r2, [r3, #20]
   d7856:	bd38      	pop	{r3, r4, r5, pc}
   d7858:	2003e280 	.word	0x2003e280

000d785c <strcmp>:
   d785c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7860:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7864:	2a01      	cmp	r2, #1
   d7866:	bf28      	it	cs
   d7868:	429a      	cmpcs	r2, r3
   d786a:	d0f7      	beq.n	d785c <strcmp>
   d786c:	1ad0      	subs	r0, r2, r3
   d786e:	4770      	bx	lr

000d7870 <strcpy>:
   d7870:	4603      	mov	r3, r0
   d7872:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7876:	f803 2b01 	strb.w	r2, [r3], #1
   d787a:	2a00      	cmp	r2, #0
   d787c:	d1f9      	bne.n	d7872 <strcpy+0x2>
   d787e:	4770      	bx	lr

000d7880 <strdup>:
   d7880:	4b02      	ldr	r3, [pc, #8]	; (d788c <strdup+0xc>)
   d7882:	4601      	mov	r1, r0
   d7884:	6818      	ldr	r0, [r3, #0]
   d7886:	f000 b803 	b.w	d7890 <_strdup_r>
   d788a:	bf00      	nop
   d788c:	2003e280 	.word	0x2003e280

000d7890 <_strdup_r>:
   d7890:	b570      	push	{r4, r5, r6, lr}
   d7892:	4606      	mov	r6, r0
   d7894:	4608      	mov	r0, r1
   d7896:	460c      	mov	r4, r1
   d7898:	f000 f80d 	bl	d78b6 <strlen>
   d789c:	1c45      	adds	r5, r0, #1
   d789e:	4629      	mov	r1, r5
   d78a0:	4630      	mov	r0, r6
   d78a2:	f7fd fd6f 	bl	d5384 <_malloc_r>
   d78a6:	4606      	mov	r6, r0
   d78a8:	b118      	cbz	r0, d78b2 <_strdup_r+0x22>
   d78aa:	462a      	mov	r2, r5
   d78ac:	4621      	mov	r1, r4
   d78ae:	f7ff ff99 	bl	d77e4 <memcpy>
   d78b2:	4630      	mov	r0, r6
   d78b4:	bd70      	pop	{r4, r5, r6, pc}

000d78b6 <strlen>:
   d78b6:	4603      	mov	r3, r0
   d78b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78bc:	2a00      	cmp	r2, #0
   d78be:	d1fb      	bne.n	d78b8 <strlen+0x2>
   d78c0:	1a18      	subs	r0, r3, r0
   d78c2:	3801      	subs	r0, #1
   d78c4:	4770      	bx	lr

000d78c6 <strncmp>:
   d78c6:	b530      	push	{r4, r5, lr}
   d78c8:	b182      	cbz	r2, d78ec <strncmp+0x26>
   d78ca:	1e45      	subs	r5, r0, #1
   d78cc:	3901      	subs	r1, #1
   d78ce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d78d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d78d6:	42a3      	cmp	r3, r4
   d78d8:	d106      	bne.n	d78e8 <strncmp+0x22>
   d78da:	43ec      	mvns	r4, r5
   d78dc:	4414      	add	r4, r2
   d78de:	42e0      	cmn	r0, r4
   d78e0:	d001      	beq.n	d78e6 <strncmp+0x20>
   d78e2:	2b00      	cmp	r3, #0
   d78e4:	d1f3      	bne.n	d78ce <strncmp+0x8>
   d78e6:	461c      	mov	r4, r3
   d78e8:	1b18      	subs	r0, r3, r4
   d78ea:	bd30      	pop	{r4, r5, pc}
   d78ec:	4610      	mov	r0, r2
   d78ee:	bd30      	pop	{r4, r5, pc}

000d78f0 <strncpy>:
   d78f0:	b510      	push	{r4, lr}
   d78f2:	4603      	mov	r3, r0
   d78f4:	b142      	cbz	r2, d7908 <strncpy+0x18>
   d78f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d78fa:	f803 4b01 	strb.w	r4, [r3], #1
   d78fe:	3a01      	subs	r2, #1
   d7900:	2c00      	cmp	r4, #0
   d7902:	d1f7      	bne.n	d78f4 <strncpy+0x4>
   d7904:	441a      	add	r2, r3
   d7906:	e000      	b.n	d790a <strncpy+0x1a>
   d7908:	bd10      	pop	{r4, pc}
   d790a:	4293      	cmp	r3, r2
   d790c:	d002      	beq.n	d7914 <strncpy+0x24>
   d790e:	f803 4b01 	strb.w	r4, [r3], #1
   d7912:	e7fa      	b.n	d790a <strncpy+0x1a>
   d7914:	bd10      	pop	{r4, pc}
	...

000d7918 <_strtol_r>:
   d7918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d791c:	4680      	mov	r8, r0
   d791e:	4840      	ldr	r0, [pc, #256]	; (d7a20 <_strtol_r+0x108>)
   d7920:	f8d0 9000 	ldr.w	r9, [r0]
   d7924:	460f      	mov	r7, r1
   d7926:	463d      	mov	r5, r7
   d7928:	f815 4b01 	ldrb.w	r4, [r5], #1
   d792c:	eb09 0004 	add.w	r0, r9, r4
   d7930:	7840      	ldrb	r0, [r0, #1]
   d7932:	f000 0008 	and.w	r0, r0, #8
   d7936:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d793a:	b108      	cbz	r0, d7940 <_strtol_r+0x28>
   d793c:	462f      	mov	r7, r5
   d793e:	e7f2      	b.n	d7926 <_strtol_r+0xe>
   d7940:	2c2d      	cmp	r4, #45	; 0x2d
   d7942:	d103      	bne.n	d794c <_strtol_r+0x34>
   d7944:	1cbd      	adds	r5, r7, #2
   d7946:	787c      	ldrb	r4, [r7, #1]
   d7948:	2601      	movs	r6, #1
   d794a:	e003      	b.n	d7954 <_strtol_r+0x3c>
   d794c:	2c2b      	cmp	r4, #43	; 0x2b
   d794e:	bf04      	itt	eq
   d7950:	787c      	ldrbeq	r4, [r7, #1]
   d7952:	1cbd      	addeq	r5, r7, #2
   d7954:	b113      	cbz	r3, d795c <_strtol_r+0x44>
   d7956:	2b10      	cmp	r3, #16
   d7958:	d10a      	bne.n	d7970 <_strtol_r+0x58>
   d795a:	e05b      	b.n	d7a14 <_strtol_r+0xfc>
   d795c:	2c30      	cmp	r4, #48	; 0x30
   d795e:	d157      	bne.n	d7a10 <_strtol_r+0xf8>
   d7960:	7828      	ldrb	r0, [r5, #0]
   d7962:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7966:	2858      	cmp	r0, #88	; 0x58
   d7968:	d14d      	bne.n	d7a06 <_strtol_r+0xee>
   d796a:	786c      	ldrb	r4, [r5, #1]
   d796c:	2310      	movs	r3, #16
   d796e:	3502      	adds	r5, #2
   d7970:	2e00      	cmp	r6, #0
   d7972:	bf14      	ite	ne
   d7974:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7978:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d797c:	2700      	movs	r7, #0
   d797e:	fbbc faf3 	udiv	sl, ip, r3
   d7982:	4638      	mov	r0, r7
   d7984:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7988:	eb09 0e04 	add.w	lr, r9, r4
   d798c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7990:	f01e 0f04 	tst.w	lr, #4
   d7994:	d001      	beq.n	d799a <_strtol_r+0x82>
   d7996:	3c30      	subs	r4, #48	; 0x30
   d7998:	e00b      	b.n	d79b2 <_strtol_r+0x9a>
   d799a:	f01e 0e03 	ands.w	lr, lr, #3
   d799e:	d01b      	beq.n	d79d8 <_strtol_r+0xc0>
   d79a0:	f1be 0f01 	cmp.w	lr, #1
   d79a4:	bf0c      	ite	eq
   d79a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d79aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d79ae:	ebce 0404 	rsb	r4, lr, r4
   d79b2:	42a3      	cmp	r3, r4
   d79b4:	dd10      	ble.n	d79d8 <_strtol_r+0xc0>
   d79b6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d79ba:	d00a      	beq.n	d79d2 <_strtol_r+0xba>
   d79bc:	4550      	cmp	r0, sl
   d79be:	d806      	bhi.n	d79ce <_strtol_r+0xb6>
   d79c0:	d101      	bne.n	d79c6 <_strtol_r+0xae>
   d79c2:	4564      	cmp	r4, ip
   d79c4:	dc03      	bgt.n	d79ce <_strtol_r+0xb6>
   d79c6:	fb03 4000 	mla	r0, r3, r0, r4
   d79ca:	2701      	movs	r7, #1
   d79cc:	e001      	b.n	d79d2 <_strtol_r+0xba>
   d79ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d79d2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d79d6:	e7d7      	b.n	d7988 <_strtol_r+0x70>
   d79d8:	1c7b      	adds	r3, r7, #1
   d79da:	d10c      	bne.n	d79f6 <_strtol_r+0xde>
   d79dc:	2e00      	cmp	r6, #0
   d79de:	f04f 0322 	mov.w	r3, #34	; 0x22
   d79e2:	bf14      	ite	ne
   d79e4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d79e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d79ec:	f8c8 3000 	str.w	r3, [r8]
   d79f0:	b92a      	cbnz	r2, d79fe <_strtol_r+0xe6>
   d79f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79f6:	b106      	cbz	r6, d79fa <_strtol_r+0xe2>
   d79f8:	4240      	negs	r0, r0
   d79fa:	b172      	cbz	r2, d7a1a <_strtol_r+0x102>
   d79fc:	b107      	cbz	r7, d7a00 <_strtol_r+0xe8>
   d79fe:	1e69      	subs	r1, r5, #1
   d7a00:	6011      	str	r1, [r2, #0]
   d7a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a06:	2430      	movs	r4, #48	; 0x30
   d7a08:	2b00      	cmp	r3, #0
   d7a0a:	d1b1      	bne.n	d7970 <_strtol_r+0x58>
   d7a0c:	2308      	movs	r3, #8
   d7a0e:	e7af      	b.n	d7970 <_strtol_r+0x58>
   d7a10:	230a      	movs	r3, #10
   d7a12:	e7ad      	b.n	d7970 <_strtol_r+0x58>
   d7a14:	2c30      	cmp	r4, #48	; 0x30
   d7a16:	d0a3      	beq.n	d7960 <_strtol_r+0x48>
   d7a18:	e7aa      	b.n	d7970 <_strtol_r+0x58>
   d7a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a1e:	bf00      	nop
   d7a20:	2003e21c 	.word	0x2003e21c

000d7a24 <strtol>:
   d7a24:	4613      	mov	r3, r2
   d7a26:	460a      	mov	r2, r1
   d7a28:	4601      	mov	r1, r0
   d7a2a:	4802      	ldr	r0, [pc, #8]	; (d7a34 <strtol+0x10>)
   d7a2c:	6800      	ldr	r0, [r0, #0]
   d7a2e:	f7ff bf73 	b.w	d7918 <_strtol_r>
   d7a32:	bf00      	nop
   d7a34:	2003e280 	.word	0x2003e280

000d7a38 <_strtoul_r>:
   d7a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a3c:	4680      	mov	r8, r0
   d7a3e:	483c      	ldr	r0, [pc, #240]	; (d7b30 <_strtoul_r+0xf8>)
   d7a40:	f8d0 9000 	ldr.w	r9, [r0]
   d7a44:	460e      	mov	r6, r1
   d7a46:	4635      	mov	r5, r6
   d7a48:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7a4c:	eb09 0004 	add.w	r0, r9, r4
   d7a50:	7840      	ldrb	r0, [r0, #1]
   d7a52:	f000 0008 	and.w	r0, r0, #8
   d7a56:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7a5a:	b108      	cbz	r0, d7a60 <_strtoul_r+0x28>
   d7a5c:	462e      	mov	r6, r5
   d7a5e:	e7f2      	b.n	d7a46 <_strtoul_r+0xe>
   d7a60:	2c2d      	cmp	r4, #45	; 0x2d
   d7a62:	d103      	bne.n	d7a6c <_strtoul_r+0x34>
   d7a64:	1cb5      	adds	r5, r6, #2
   d7a66:	7874      	ldrb	r4, [r6, #1]
   d7a68:	2701      	movs	r7, #1
   d7a6a:	e003      	b.n	d7a74 <_strtoul_r+0x3c>
   d7a6c:	2c2b      	cmp	r4, #43	; 0x2b
   d7a6e:	bf04      	itt	eq
   d7a70:	7874      	ldrbeq	r4, [r6, #1]
   d7a72:	1cb5      	addeq	r5, r6, #2
   d7a74:	b113      	cbz	r3, d7a7c <_strtoul_r+0x44>
   d7a76:	2b10      	cmp	r3, #16
   d7a78:	d10a      	bne.n	d7a90 <_strtoul_r+0x58>
   d7a7a:	e053      	b.n	d7b24 <_strtoul_r+0xec>
   d7a7c:	2c30      	cmp	r4, #48	; 0x30
   d7a7e:	d14f      	bne.n	d7b20 <_strtoul_r+0xe8>
   d7a80:	7828      	ldrb	r0, [r5, #0]
   d7a82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7a86:	2858      	cmp	r0, #88	; 0x58
   d7a88:	d145      	bne.n	d7b16 <_strtoul_r+0xde>
   d7a8a:	786c      	ldrb	r4, [r5, #1]
   d7a8c:	2310      	movs	r3, #16
   d7a8e:	3502      	adds	r5, #2
   d7a90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7a94:	2600      	movs	r6, #0
   d7a96:	fbbc fcf3 	udiv	ip, ip, r3
   d7a9a:	fb03 fa0c 	mul.w	sl, r3, ip
   d7a9e:	ea6f 0a0a 	mvn.w	sl, sl
   d7aa2:	4630      	mov	r0, r6
   d7aa4:	eb09 0e04 	add.w	lr, r9, r4
   d7aa8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7aac:	f01e 0f04 	tst.w	lr, #4
   d7ab0:	d001      	beq.n	d7ab6 <_strtoul_r+0x7e>
   d7ab2:	3c30      	subs	r4, #48	; 0x30
   d7ab4:	e00b      	b.n	d7ace <_strtoul_r+0x96>
   d7ab6:	f01e 0e03 	ands.w	lr, lr, #3
   d7aba:	d01a      	beq.n	d7af2 <_strtoul_r+0xba>
   d7abc:	f1be 0f01 	cmp.w	lr, #1
   d7ac0:	bf0c      	ite	eq
   d7ac2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7ac6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7aca:	ebce 0404 	rsb	r4, lr, r4
   d7ace:	42a3      	cmp	r3, r4
   d7ad0:	dd0f      	ble.n	d7af2 <_strtoul_r+0xba>
   d7ad2:	2e00      	cmp	r6, #0
   d7ad4:	db08      	blt.n	d7ae8 <_strtoul_r+0xb0>
   d7ad6:	4560      	cmp	r0, ip
   d7ad8:	d806      	bhi.n	d7ae8 <_strtoul_r+0xb0>
   d7ada:	d101      	bne.n	d7ae0 <_strtoul_r+0xa8>
   d7adc:	4554      	cmp	r4, sl
   d7ade:	dc03      	bgt.n	d7ae8 <_strtoul_r+0xb0>
   d7ae0:	fb03 4000 	mla	r0, r3, r0, r4
   d7ae4:	2601      	movs	r6, #1
   d7ae6:	e001      	b.n	d7aec <_strtoul_r+0xb4>
   d7ae8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7aec:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7af0:	e7d8      	b.n	d7aa4 <_strtoul_r+0x6c>
   d7af2:	2e00      	cmp	r6, #0
   d7af4:	da07      	bge.n	d7b06 <_strtoul_r+0xce>
   d7af6:	2322      	movs	r3, #34	; 0x22
   d7af8:	f8c8 3000 	str.w	r3, [r8]
   d7afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7b00:	b92a      	cbnz	r2, d7b0e <_strtoul_r+0xd6>
   d7b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b06:	b107      	cbz	r7, d7b0a <_strtoul_r+0xd2>
   d7b08:	4240      	negs	r0, r0
   d7b0a:	b172      	cbz	r2, d7b2a <_strtoul_r+0xf2>
   d7b0c:	b106      	cbz	r6, d7b10 <_strtoul_r+0xd8>
   d7b0e:	1e69      	subs	r1, r5, #1
   d7b10:	6011      	str	r1, [r2, #0]
   d7b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b16:	2430      	movs	r4, #48	; 0x30
   d7b18:	2b00      	cmp	r3, #0
   d7b1a:	d1b9      	bne.n	d7a90 <_strtoul_r+0x58>
   d7b1c:	2308      	movs	r3, #8
   d7b1e:	e7b7      	b.n	d7a90 <_strtoul_r+0x58>
   d7b20:	230a      	movs	r3, #10
   d7b22:	e7b5      	b.n	d7a90 <_strtoul_r+0x58>
   d7b24:	2c30      	cmp	r4, #48	; 0x30
   d7b26:	d0ab      	beq.n	d7a80 <_strtoul_r+0x48>
   d7b28:	e7b2      	b.n	d7a90 <_strtoul_r+0x58>
   d7b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b2e:	bf00      	nop
   d7b30:	2003e21c 	.word	0x2003e21c

000d7b34 <strtoul>:
   d7b34:	4613      	mov	r3, r2
   d7b36:	460a      	mov	r2, r1
   d7b38:	4601      	mov	r1, r0
   d7b3a:	4802      	ldr	r0, [pc, #8]	; (d7b44 <strtoul+0x10>)
   d7b3c:	6800      	ldr	r0, [r0, #0]
   d7b3e:	f7ff bf7b 	b.w	d7a38 <_strtoul_r>
   d7b42:	bf00      	nop
   d7b44:	2003e280 	.word	0x2003e280

000d7b48 <__tzcalc_limits>:
   d7b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b4c:	4604      	mov	r4, r0
   d7b4e:	f000 fa6f 	bl	d8030 <__gettzinfo>
   d7b52:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7b56:	429c      	cmp	r4, r3
   d7b58:	f340 8096 	ble.w	d7c88 <__tzcalc_limits+0x140>
   d7b5c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7b60:	18e3      	adds	r3, r4, r3
   d7b62:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7b66:	109b      	asrs	r3, r3, #2
   d7b68:	f240 156d 	movw	r5, #365	; 0x16d
   d7b6c:	fb05 3502 	mla	r5, r5, r2, r3
   d7b70:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7b74:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7b78:	fb92 f3f3 	sdiv	r3, r2, r3
   d7b7c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7b80:	442b      	add	r3, r5
   d7b82:	18a5      	adds	r5, r4, r2
   d7b84:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7b88:	fb95 f5f2 	sdiv	r5, r5, r2
   d7b8c:	441d      	add	r5, r3
   d7b8e:	2364      	movs	r3, #100	; 0x64
   d7b90:	fb94 f7f2 	sdiv	r7, r4, r2
   d7b94:	fb94 f6f3 	sdiv	r6, r4, r3
   d7b98:	fb02 4717 	mls	r7, r2, r7, r4
   d7b9c:	fb03 4616 	mls	r6, r3, r6, r4
   d7ba0:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7ba4:	fab7 fe87 	clz	lr, r7
   d7ba8:	9301      	str	r3, [sp, #4]
   d7baa:	f004 0303 	and.w	r3, r4, #3
   d7bae:	6044      	str	r4, [r0, #4]
   d7bb0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7bb4:	4601      	mov	r1, r0
   d7bb6:	9300      	str	r3, [sp, #0]
   d7bb8:	f04f 0c07 	mov.w	ip, #7
   d7bbc:	7a0b      	ldrb	r3, [r1, #8]
   d7bbe:	2b4a      	cmp	r3, #74	; 0x4a
   d7bc0:	d10e      	bne.n	d7be0 <__tzcalc_limits+0x98>
   d7bc2:	694b      	ldr	r3, [r1, #20]
   d7bc4:	9a00      	ldr	r2, [sp, #0]
   d7bc6:	18ec      	adds	r4, r5, r3
   d7bc8:	b902      	cbnz	r2, d7bcc <__tzcalc_limits+0x84>
   d7bca:	b906      	cbnz	r6, d7bce <__tzcalc_limits+0x86>
   d7bcc:	b927      	cbnz	r7, d7bd8 <__tzcalc_limits+0x90>
   d7bce:	2b3b      	cmp	r3, #59	; 0x3b
   d7bd0:	bfd4      	ite	le
   d7bd2:	2300      	movle	r3, #0
   d7bd4:	2301      	movgt	r3, #1
   d7bd6:	e000      	b.n	d7bda <__tzcalc_limits+0x92>
   d7bd8:	2300      	movs	r3, #0
   d7bda:	4423      	add	r3, r4
   d7bdc:	3b01      	subs	r3, #1
   d7bde:	e03f      	b.n	d7c60 <__tzcalc_limits+0x118>
   d7be0:	2b44      	cmp	r3, #68	; 0x44
   d7be2:	d102      	bne.n	d7bea <__tzcalc_limits+0xa2>
   d7be4:	694b      	ldr	r3, [r1, #20]
   d7be6:	442b      	add	r3, r5
   d7be8:	e03a      	b.n	d7c60 <__tzcalc_limits+0x118>
   d7bea:	9b00      	ldr	r3, [sp, #0]
   d7bec:	b92b      	cbnz	r3, d7bfa <__tzcalc_limits+0xb2>
   d7bee:	2e00      	cmp	r6, #0
   d7bf0:	bf0c      	ite	eq
   d7bf2:	46f0      	moveq	r8, lr
   d7bf4:	f04f 0801 	movne.w	r8, #1
   d7bf8:	e000      	b.n	d7bfc <__tzcalc_limits+0xb4>
   d7bfa:	46f0      	mov	r8, lr
   d7bfc:	4b24      	ldr	r3, [pc, #144]	; (d7c90 <__tzcalc_limits+0x148>)
   d7bfe:	68cc      	ldr	r4, [r1, #12]
   d7c00:	2230      	movs	r2, #48	; 0x30
   d7c02:	fb02 3808 	mla	r8, r2, r8, r3
   d7c06:	f1a8 0a04 	sub.w	sl, r8, #4
   d7c0a:	46a9      	mov	r9, r5
   d7c0c:	2301      	movs	r3, #1
   d7c0e:	42a3      	cmp	r3, r4
   d7c10:	da04      	bge.n	d7c1c <__tzcalc_limits+0xd4>
   d7c12:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7c16:	3301      	adds	r3, #1
   d7c18:	44d9      	add	r9, fp
   d7c1a:	e7f8      	b.n	d7c0e <__tzcalc_limits+0xc6>
   d7c1c:	f109 0304 	add.w	r3, r9, #4
   d7c20:	fb93 fbfc 	sdiv	fp, r3, ip
   d7c24:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7c28:	2c01      	cmp	r4, #1
   d7c2a:	ebca 0a03 	rsb	sl, sl, r3
   d7c2e:	694b      	ldr	r3, [r1, #20]
   d7c30:	bfb8      	it	lt
   d7c32:	2401      	movlt	r4, #1
   d7c34:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7c38:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7c3c:	690b      	ldr	r3, [r1, #16]
   d7c3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7c42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7c46:	bf48      	it	mi
   d7c48:	f10a 0a07 	addmi.w	sl, sl, #7
   d7c4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7c50:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7c54:	4453      	add	r3, sl
   d7c56:	42a3      	cmp	r3, r4
   d7c58:	db01      	blt.n	d7c5e <__tzcalc_limits+0x116>
   d7c5a:	3b07      	subs	r3, #7
   d7c5c:	e7fb      	b.n	d7c56 <__tzcalc_limits+0x10e>
   d7c5e:	444b      	add	r3, r9
   d7c60:	698c      	ldr	r4, [r1, #24]
   d7c62:	4a0c      	ldr	r2, [pc, #48]	; (d7c94 <__tzcalc_limits+0x14c>)
   d7c64:	fb02 4303 	mla	r3, r2, r3, r4
   d7c68:	6a0c      	ldr	r4, [r1, #32]
   d7c6a:	4423      	add	r3, r4
   d7c6c:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7c70:	9b01      	ldr	r3, [sp, #4]
   d7c72:	4299      	cmp	r1, r3
   d7c74:	d1a2      	bne.n	d7bbc <__tzcalc_limits+0x74>
   d7c76:	69c3      	ldr	r3, [r0, #28]
   d7c78:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7c7a:	4293      	cmp	r3, r2
   d7c7c:	bfac      	ite	ge
   d7c7e:	2300      	movge	r3, #0
   d7c80:	2301      	movlt	r3, #1
   d7c82:	6003      	str	r3, [r0, #0]
   d7c84:	2001      	movs	r0, #1
   d7c86:	e000      	b.n	d7c8a <__tzcalc_limits+0x142>
   d7c88:	2000      	movs	r0, #0
   d7c8a:	b003      	add	sp, #12
   d7c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c90:	000d8850 	.word	0x000d8850
   d7c94:	00015180 	.word	0x00015180

000d7c98 <__tz_lock>:
   d7c98:	4770      	bx	lr

000d7c9a <__tz_unlock>:
   d7c9a:	4770      	bx	lr

000d7c9c <_tzset_unlocked>:
   d7c9c:	4b01      	ldr	r3, [pc, #4]	; (d7ca4 <_tzset_unlocked+0x8>)
   d7c9e:	6818      	ldr	r0, [r3, #0]
   d7ca0:	f000 b802 	b.w	d7ca8 <_tzset_unlocked_r>
   d7ca4:	2003e280 	.word	0x2003e280

000d7ca8 <_tzset_unlocked_r>:
   d7ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cac:	b08d      	sub	sp, #52	; 0x34
   d7cae:	4607      	mov	r7, r0
   d7cb0:	f000 f9be 	bl	d8030 <__gettzinfo>
   d7cb4:	49b0      	ldr	r1, [pc, #704]	; (d7f78 <_tzset_unlocked_r+0x2d0>)
   d7cb6:	4eb1      	ldr	r6, [pc, #708]	; (d7f7c <_tzset_unlocked_r+0x2d4>)
   d7cb8:	4604      	mov	r4, r0
   d7cba:	4638      	mov	r0, r7
   d7cbc:	f000 f9b0 	bl	d8020 <_getenv_r>
   d7cc0:	4605      	mov	r5, r0
   d7cc2:	b960      	cbnz	r0, d7cde <_tzset_unlocked_r+0x36>
   d7cc4:	4bae      	ldr	r3, [pc, #696]	; (d7f80 <_tzset_unlocked_r+0x2d8>)
   d7cc6:	4aaf      	ldr	r2, [pc, #700]	; (d7f84 <_tzset_unlocked_r+0x2dc>)
   d7cc8:	6018      	str	r0, [r3, #0]
   d7cca:	4baf      	ldr	r3, [pc, #700]	; (d7f88 <_tzset_unlocked_r+0x2e0>)
   d7ccc:	6018      	str	r0, [r3, #0]
   d7cce:	4baf      	ldr	r3, [pc, #700]	; (d7f8c <_tzset_unlocked_r+0x2e4>)
   d7cd0:	6830      	ldr	r0, [r6, #0]
   d7cd2:	601a      	str	r2, [r3, #0]
   d7cd4:	605a      	str	r2, [r3, #4]
   d7cd6:	f7fd fb2d 	bl	d5334 <free>
   d7cda:	6035      	str	r5, [r6, #0]
   d7cdc:	e148      	b.n	d7f70 <_tzset_unlocked_r+0x2c8>
   d7cde:	6831      	ldr	r1, [r6, #0]
   d7ce0:	b979      	cbnz	r1, d7d02 <_tzset_unlocked_r+0x5a>
   d7ce2:	6830      	ldr	r0, [r6, #0]
   d7ce4:	f7fd fb26 	bl	d5334 <free>
   d7ce8:	4628      	mov	r0, r5
   d7cea:	f7ff fde4 	bl	d78b6 <strlen>
   d7cee:	1c41      	adds	r1, r0, #1
   d7cf0:	4638      	mov	r0, r7
   d7cf2:	f7fd fb47 	bl	d5384 <_malloc_r>
   d7cf6:	6030      	str	r0, [r6, #0]
   d7cf8:	b148      	cbz	r0, d7d0e <_tzset_unlocked_r+0x66>
   d7cfa:	4629      	mov	r1, r5
   d7cfc:	f7ff fdb8 	bl	d7870 <strcpy>
   d7d00:	e005      	b.n	d7d0e <_tzset_unlocked_r+0x66>
   d7d02:	f7ff fdab 	bl	d785c <strcmp>
   d7d06:	2800      	cmp	r0, #0
   d7d08:	f000 8132 	beq.w	d7f70 <_tzset_unlocked_r+0x2c8>
   d7d0c:	e7e9      	b.n	d7ce2 <_tzset_unlocked_r+0x3a>
   d7d0e:	782b      	ldrb	r3, [r5, #0]
   d7d10:	4a9f      	ldr	r2, [pc, #636]	; (d7f90 <_tzset_unlocked_r+0x2e8>)
   d7d12:	49a0      	ldr	r1, [pc, #640]	; (d7f94 <_tzset_unlocked_r+0x2ec>)
   d7d14:	2b3a      	cmp	r3, #58	; 0x3a
   d7d16:	bf08      	it	eq
   d7d18:	3501      	addeq	r5, #1
   d7d1a:	ae0a      	add	r6, sp, #40	; 0x28
   d7d1c:	4633      	mov	r3, r6
   d7d1e:	4628      	mov	r0, r5
   d7d20:	f7fd fb18 	bl	d5354 <siscanf>
   d7d24:	2800      	cmp	r0, #0
   d7d26:	f340 8123 	ble.w	d7f70 <_tzset_unlocked_r+0x2c8>
   d7d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d2c:	18ef      	adds	r7, r5, r3
   d7d2e:	5ceb      	ldrb	r3, [r5, r3]
   d7d30:	2b2d      	cmp	r3, #45	; 0x2d
   d7d32:	d103      	bne.n	d7d3c <_tzset_unlocked_r+0x94>
   d7d34:	3701      	adds	r7, #1
   d7d36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7d3a:	e003      	b.n	d7d44 <_tzset_unlocked_r+0x9c>
   d7d3c:	2b2b      	cmp	r3, #43	; 0x2b
   d7d3e:	bf08      	it	eq
   d7d40:	3701      	addeq	r7, #1
   d7d42:	2501      	movs	r5, #1
   d7d44:	f10d 0a20 	add.w	sl, sp, #32
   d7d48:	f10d 0b1e 	add.w	fp, sp, #30
   d7d4c:	f04f 0800 	mov.w	r8, #0
   d7d50:	9603      	str	r6, [sp, #12]
   d7d52:	f8cd a008 	str.w	sl, [sp, #8]
   d7d56:	9601      	str	r6, [sp, #4]
   d7d58:	f8cd b000 	str.w	fp, [sp]
   d7d5c:	4633      	mov	r3, r6
   d7d5e:	aa07      	add	r2, sp, #28
   d7d60:	498d      	ldr	r1, [pc, #564]	; (d7f98 <_tzset_unlocked_r+0x2f0>)
   d7d62:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7d66:	4638      	mov	r0, r7
   d7d68:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7d6c:	f7fd faf2 	bl	d5354 <siscanf>
   d7d70:	4540      	cmp	r0, r8
   d7d72:	f340 80fd 	ble.w	d7f70 <_tzset_unlocked_r+0x2c8>
   d7d76:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7d7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7d7e:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7fa4 <_tzset_unlocked_r+0x2fc>
   d7d82:	213c      	movs	r1, #60	; 0x3c
   d7d84:	fb01 3302 	mla	r3, r1, r2, r3
   d7d88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7d8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7d90:	fb01 3302 	mla	r3, r1, r2, r3
   d7d94:	435d      	muls	r5, r3
   d7d96:	6225      	str	r5, [r4, #32]
   d7d98:	4d7c      	ldr	r5, [pc, #496]	; (d7f8c <_tzset_unlocked_r+0x2e4>)
   d7d9a:	4b7d      	ldr	r3, [pc, #500]	; (d7f90 <_tzset_unlocked_r+0x2e8>)
   d7d9c:	602b      	str	r3, [r5, #0]
   d7d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7da0:	497c      	ldr	r1, [pc, #496]	; (d7f94 <_tzset_unlocked_r+0x2ec>)
   d7da2:	441f      	add	r7, r3
   d7da4:	464a      	mov	r2, r9
   d7da6:	4633      	mov	r3, r6
   d7da8:	4638      	mov	r0, r7
   d7daa:	f7fd fad3 	bl	d5354 <siscanf>
   d7dae:	4540      	cmp	r0, r8
   d7db0:	dc08      	bgt.n	d7dc4 <_tzset_unlocked_r+0x11c>
   d7db2:	682b      	ldr	r3, [r5, #0]
   d7db4:	606b      	str	r3, [r5, #4]
   d7db6:	4b72      	ldr	r3, [pc, #456]	; (d7f80 <_tzset_unlocked_r+0x2d8>)
   d7db8:	6a22      	ldr	r2, [r4, #32]
   d7dba:	601a      	str	r2, [r3, #0]
   d7dbc:	4b72      	ldr	r3, [pc, #456]	; (d7f88 <_tzset_unlocked_r+0x2e0>)
   d7dbe:	f8c3 8000 	str.w	r8, [r3]
   d7dc2:	e0d5      	b.n	d7f70 <_tzset_unlocked_r+0x2c8>
   d7dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7dc6:	f8c5 9004 	str.w	r9, [r5, #4]
   d7dca:	18fd      	adds	r5, r7, r3
   d7dcc:	5cfb      	ldrb	r3, [r7, r3]
   d7dce:	2b2d      	cmp	r3, #45	; 0x2d
   d7dd0:	d103      	bne.n	d7dda <_tzset_unlocked_r+0x132>
   d7dd2:	3501      	adds	r5, #1
   d7dd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7dd8:	e003      	b.n	d7de2 <_tzset_unlocked_r+0x13a>
   d7dda:	2b2b      	cmp	r3, #43	; 0x2b
   d7ddc:	bf08      	it	eq
   d7dde:	3501      	addeq	r5, #1
   d7de0:	2701      	movs	r7, #1
   d7de2:	2300      	movs	r3, #0
   d7de4:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7de8:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7dec:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7df0:	930a      	str	r3, [sp, #40]	; 0x28
   d7df2:	9603      	str	r6, [sp, #12]
   d7df4:	f8cd a008 	str.w	sl, [sp, #8]
   d7df8:	9601      	str	r6, [sp, #4]
   d7dfa:	f8cd b000 	str.w	fp, [sp]
   d7dfe:	4633      	mov	r3, r6
   d7e00:	aa07      	add	r2, sp, #28
   d7e02:	4965      	ldr	r1, [pc, #404]	; (d7f98 <_tzset_unlocked_r+0x2f0>)
   d7e04:	4628      	mov	r0, r5
   d7e06:	f7fd faa5 	bl	d5354 <siscanf>
   d7e0a:	2800      	cmp	r0, #0
   d7e0c:	dc04      	bgt.n	d7e18 <_tzset_unlocked_r+0x170>
   d7e0e:	6a23      	ldr	r3, [r4, #32]
   d7e10:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7e14:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7e16:	e00e      	b.n	d7e36 <_tzset_unlocked_r+0x18e>
   d7e18:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7e1c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7e20:	213c      	movs	r1, #60	; 0x3c
   d7e22:	fb01 3302 	mla	r3, r1, r2, r3
   d7e26:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7e2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7e2e:	fb01 3302 	mla	r3, r1, r2, r3
   d7e32:	435f      	muls	r7, r3
   d7e34:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e38:	4627      	mov	r7, r4
   d7e3a:	441d      	add	r5, r3
   d7e3c:	f04f 0900 	mov.w	r9, #0
   d7e40:	782b      	ldrb	r3, [r5, #0]
   d7e42:	2b2c      	cmp	r3, #44	; 0x2c
   d7e44:	bf08      	it	eq
   d7e46:	3501      	addeq	r5, #1
   d7e48:	f895 8000 	ldrb.w	r8, [r5]
   d7e4c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7e50:	d126      	bne.n	d7ea0 <_tzset_unlocked_r+0x1f8>
   d7e52:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7e56:	9302      	str	r3, [sp, #8]
   d7e58:	ab09      	add	r3, sp, #36	; 0x24
   d7e5a:	9300      	str	r3, [sp, #0]
   d7e5c:	9603      	str	r6, [sp, #12]
   d7e5e:	9601      	str	r6, [sp, #4]
   d7e60:	4633      	mov	r3, r6
   d7e62:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7e66:	494d      	ldr	r1, [pc, #308]	; (d7f9c <_tzset_unlocked_r+0x2f4>)
   d7e68:	4628      	mov	r0, r5
   d7e6a:	f7fd fa73 	bl	d5354 <siscanf>
   d7e6e:	2803      	cmp	r0, #3
   d7e70:	d17e      	bne.n	d7f70 <_tzset_unlocked_r+0x2c8>
   d7e72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7e76:	1e4b      	subs	r3, r1, #1
   d7e78:	2b0b      	cmp	r3, #11
   d7e7a:	d879      	bhi.n	d7f70 <_tzset_unlocked_r+0x2c8>
   d7e7c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7e80:	1e53      	subs	r3, r2, #1
   d7e82:	2b04      	cmp	r3, #4
   d7e84:	d874      	bhi.n	d7f70 <_tzset_unlocked_r+0x2c8>
   d7e86:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7e8a:	2b06      	cmp	r3, #6
   d7e8c:	d870      	bhi.n	d7f70 <_tzset_unlocked_r+0x2c8>
   d7e8e:	f887 8008 	strb.w	r8, [r7, #8]
   d7e92:	60f9      	str	r1, [r7, #12]
   d7e94:	613a      	str	r2, [r7, #16]
   d7e96:	617b      	str	r3, [r7, #20]
   d7e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e9a:	eb05 0803 	add.w	r8, r5, r3
   d7e9e:	e02a      	b.n	d7ef6 <_tzset_unlocked_r+0x24e>
   d7ea0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7ea4:	bf06      	itte	eq
   d7ea6:	3501      	addeq	r5, #1
   d7ea8:	4643      	moveq	r3, r8
   d7eaa:	2344      	movne	r3, #68	; 0x44
   d7eac:	220a      	movs	r2, #10
   d7eae:	a90b      	add	r1, sp, #44	; 0x2c
   d7eb0:	4628      	mov	r0, r5
   d7eb2:	9305      	str	r3, [sp, #20]
   d7eb4:	f7ff fe3e 	bl	d7b34 <strtoul>
   d7eb8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7ebc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7ec0:	4545      	cmp	r5, r8
   d7ec2:	9b05      	ldr	r3, [sp, #20]
   d7ec4:	d114      	bne.n	d7ef0 <_tzset_unlocked_r+0x248>
   d7ec6:	234d      	movs	r3, #77	; 0x4d
   d7ec8:	f1b9 0f00 	cmp.w	r9, #0
   d7ecc:	d107      	bne.n	d7ede <_tzset_unlocked_r+0x236>
   d7ece:	7223      	strb	r3, [r4, #8]
   d7ed0:	2303      	movs	r3, #3
   d7ed2:	60e3      	str	r3, [r4, #12]
   d7ed4:	2302      	movs	r3, #2
   d7ed6:	6123      	str	r3, [r4, #16]
   d7ed8:	f8c4 9014 	str.w	r9, [r4, #20]
   d7edc:	e00b      	b.n	d7ef6 <_tzset_unlocked_r+0x24e>
   d7ede:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7ee2:	230b      	movs	r3, #11
   d7ee4:	62a3      	str	r3, [r4, #40]	; 0x28
   d7ee6:	2301      	movs	r3, #1
   d7ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7eea:	2300      	movs	r3, #0
   d7eec:	6323      	str	r3, [r4, #48]	; 0x30
   d7eee:	e002      	b.n	d7ef6 <_tzset_unlocked_r+0x24e>
   d7ef0:	b280      	uxth	r0, r0
   d7ef2:	723b      	strb	r3, [r7, #8]
   d7ef4:	6178      	str	r0, [r7, #20]
   d7ef6:	2302      	movs	r3, #2
   d7ef8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7efc:	2300      	movs	r3, #0
   d7efe:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7f02:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7f06:	930a      	str	r3, [sp, #40]	; 0x28
   d7f08:	f898 3000 	ldrb.w	r3, [r8]
   d7f0c:	2b2f      	cmp	r3, #47	; 0x2f
   d7f0e:	d10b      	bne.n	d7f28 <_tzset_unlocked_r+0x280>
   d7f10:	9603      	str	r6, [sp, #12]
   d7f12:	f8cd a008 	str.w	sl, [sp, #8]
   d7f16:	9601      	str	r6, [sp, #4]
   d7f18:	f8cd b000 	str.w	fp, [sp]
   d7f1c:	4633      	mov	r3, r6
   d7f1e:	aa07      	add	r2, sp, #28
   d7f20:	491f      	ldr	r1, [pc, #124]	; (d7fa0 <_tzset_unlocked_r+0x2f8>)
   d7f22:	4640      	mov	r0, r8
   d7f24:	f7fd fa16 	bl	d5354 <siscanf>
   d7f28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7f2c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7f30:	213c      	movs	r1, #60	; 0x3c
   d7f32:	fb01 3302 	mla	r3, r1, r2, r3
   d7f36:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7f3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7f3e:	fb01 3302 	mla	r3, r1, r2, r3
   d7f42:	61bb      	str	r3, [r7, #24]
   d7f44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7f46:	f109 0901 	add.w	r9, r9, #1
   d7f4a:	f1b9 0f02 	cmp.w	r9, #2
   d7f4e:	4445      	add	r5, r8
   d7f50:	f107 071c 	add.w	r7, r7, #28
   d7f54:	f47f af74 	bne.w	d7e40 <_tzset_unlocked_r+0x198>
   d7f58:	6860      	ldr	r0, [r4, #4]
   d7f5a:	f7ff fdf5 	bl	d7b48 <__tzcalc_limits>
   d7f5e:	4b08      	ldr	r3, [pc, #32]	; (d7f80 <_tzset_unlocked_r+0x2d8>)
   d7f60:	6a22      	ldr	r2, [r4, #32]
   d7f62:	601a      	str	r2, [r3, #0]
   d7f64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7f66:	1a9b      	subs	r3, r3, r2
   d7f68:	4a07      	ldr	r2, [pc, #28]	; (d7f88 <_tzset_unlocked_r+0x2e0>)
   d7f6a:	bf18      	it	ne
   d7f6c:	2301      	movne	r3, #1
   d7f6e:	6013      	str	r3, [r2, #0]
   d7f70:	b00d      	add	sp, #52	; 0x34
   d7f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f76:	bf00      	nop
   d7f78:	000d88b0 	.word	0x000d88b0
   d7f7c:	2003e7e0 	.word	0x2003e7e0
   d7f80:	2003e7e8 	.word	0x2003e7e8
   d7f84:	000d88b3 	.word	0x000d88b3
   d7f88:	2003e7e4 	.word	0x2003e7e4
   d7f8c:	2003e284 	.word	0x2003e284
   d7f90:	2003e7d3 	.word	0x2003e7d3
   d7f94:	000d88b7 	.word	0x000d88b7
   d7f98:	000d88da 	.word	0x000d88da
   d7f9c:	000d88c6 	.word	0x000d88c6
   d7fa0:	000d88d9 	.word	0x000d88d9
   d7fa4:	2003e7c8 	.word	0x2003e7c8

000d7fa8 <_findenv_r>:
   d7fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fac:	4607      	mov	r7, r0
   d7fae:	468b      	mov	fp, r1
   d7fb0:	4690      	mov	r8, r2
   d7fb2:	f000 f8d9 	bl	d8168 <__env_lock>
   d7fb6:	4b19      	ldr	r3, [pc, #100]	; (d801c <_findenv_r+0x74>)
   d7fb8:	681d      	ldr	r5, [r3, #0]
   d7fba:	469a      	mov	sl, r3
   d7fbc:	b13d      	cbz	r5, d7fce <_findenv_r+0x26>
   d7fbe:	465c      	mov	r4, fp
   d7fc0:	4623      	mov	r3, r4
   d7fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7fc6:	b142      	cbz	r2, d7fda <_findenv_r+0x32>
   d7fc8:	2a3d      	cmp	r2, #61	; 0x3d
   d7fca:	461c      	mov	r4, r3
   d7fcc:	d1f8      	bne.n	d7fc0 <_findenv_r+0x18>
   d7fce:	4638      	mov	r0, r7
   d7fd0:	f000 f8cb 	bl	d816a <__env_unlock>
   d7fd4:	2000      	movs	r0, #0
   d7fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7fda:	ebcb 0404 	rsb	r4, fp, r4
   d7fde:	46a9      	mov	r9, r5
   d7fe0:	f859 0b04 	ldr.w	r0, [r9], #4
   d7fe4:	2800      	cmp	r0, #0
   d7fe6:	d0f2      	beq.n	d7fce <_findenv_r+0x26>
   d7fe8:	4622      	mov	r2, r4
   d7fea:	4659      	mov	r1, fp
   d7fec:	f7ff fc6b 	bl	d78c6 <strncmp>
   d7ff0:	b988      	cbnz	r0, d8016 <_findenv_r+0x6e>
   d7ff2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7ff6:	191e      	adds	r6, r3, r4
   d7ff8:	5d1b      	ldrb	r3, [r3, r4]
   d7ffa:	2b3d      	cmp	r3, #61	; 0x3d
   d7ffc:	d10b      	bne.n	d8016 <_findenv_r+0x6e>
   d7ffe:	f8da 3000 	ldr.w	r3, [sl]
   d8002:	1aed      	subs	r5, r5, r3
   d8004:	10ad      	asrs	r5, r5, #2
   d8006:	4638      	mov	r0, r7
   d8008:	f8c8 5000 	str.w	r5, [r8]
   d800c:	f000 f8ad 	bl	d816a <__env_unlock>
   d8010:	1c70      	adds	r0, r6, #1
   d8012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8016:	464d      	mov	r5, r9
   d8018:	e7e1      	b.n	d7fde <_findenv_r+0x36>
   d801a:	bf00      	nop
   d801c:	2003e2cc 	.word	0x2003e2cc

000d8020 <_getenv_r>:
   d8020:	b507      	push	{r0, r1, r2, lr}
   d8022:	aa01      	add	r2, sp, #4
   d8024:	f7ff ffc0 	bl	d7fa8 <_findenv_r>
   d8028:	b003      	add	sp, #12
   d802a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8030 <__gettzinfo>:
   d8030:	4800      	ldr	r0, [pc, #0]	; (d8034 <__gettzinfo+0x4>)
   d8032:	4770      	bx	lr
   d8034:	2003e28c 	.word	0x2003e28c

000d8038 <gmtime_r>:
   d8038:	6802      	ldr	r2, [r0, #0]
   d803a:	4b47      	ldr	r3, [pc, #284]	; (d8158 <gmtime_r+0x120>)
   d803c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d803e:	fb92 f4f3 	sdiv	r4, r2, r3
   d8042:	fb03 2214 	mls	r2, r3, r4, r2
   d8046:	2a00      	cmp	r2, #0
   d8048:	bfbc      	itt	lt
   d804a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d804e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8052:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8056:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d805a:	fb92 f3f0 	sdiv	r3, r2, r0
   d805e:	fb00 2213 	mls	r2, r0, r3, r2
   d8062:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8066:	bfac      	ite	ge
   d8068:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d806c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8070:	608b      	str	r3, [r1, #8]
   d8072:	fb92 f3f0 	sdiv	r3, r2, r0
   d8076:	fb00 2213 	mls	r2, r0, r3, r2
   d807a:	604b      	str	r3, [r1, #4]
   d807c:	600a      	str	r2, [r1, #0]
   d807e:	2307      	movs	r3, #7
   d8080:	1ce2      	adds	r2, r4, #3
   d8082:	fb92 f3f3 	sdiv	r3, r2, r3
   d8086:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d808a:	1ad3      	subs	r3, r2, r3
   d808c:	618b      	str	r3, [r1, #24]
   d808e:	4b33      	ldr	r3, [pc, #204]	; (d815c <gmtime_r+0x124>)
   d8090:	4d33      	ldr	r5, [pc, #204]	; (d8160 <gmtime_r+0x128>)
   d8092:	fb94 f5f5 	sdiv	r5, r4, r5
   d8096:	fb03 4405 	mla	r4, r3, r5, r4
   d809a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d809e:	fbb4 f2f2 	udiv	r2, r4, r2
   d80a2:	4422      	add	r2, r4
   d80a4:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d80a8:	fbb4 f3f7 	udiv	r3, r4, r7
   d80ac:	1ad2      	subs	r2, r2, r3
   d80ae:	482d      	ldr	r0, [pc, #180]	; (d8164 <gmtime_r+0x12c>)
   d80b0:	fbb4 f0f0 	udiv	r0, r4, r0
   d80b4:	f648 6694 	movw	r6, #36500	; 0x8e94
   d80b8:	1a13      	subs	r3, r2, r0
   d80ba:	fbb3 f6f6 	udiv	r6, r3, r6
   d80be:	4434      	add	r4, r6
   d80c0:	f240 126d 	movw	r2, #365	; 0x16d
   d80c4:	fbb3 f0f2 	udiv	r0, r3, r2
   d80c8:	fbb3 f3f7 	udiv	r3, r3, r7
   d80cc:	1ae3      	subs	r3, r4, r3
   d80ce:	fb02 3310 	mls	r3, r2, r0, r3
   d80d2:	2499      	movs	r4, #153	; 0x99
   d80d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d80d8:	3202      	adds	r2, #2
   d80da:	fbb2 f2f4 	udiv	r2, r2, r4
   d80de:	2a0a      	cmp	r2, #10
   d80e0:	fb04 f402 	mul.w	r4, r4, r2
   d80e4:	f104 0602 	add.w	r6, r4, #2
   d80e8:	f04f 0405 	mov.w	r4, #5
   d80ec:	fbb6 f4f4 	udiv	r4, r6, r4
   d80f0:	bf34      	ite	cc
   d80f2:	2602      	movcc	r6, #2
   d80f4:	f06f 0609 	mvncs.w	r6, #9
   d80f8:	4416      	add	r6, r2
   d80fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d80fe:	fb02 0505 	mla	r5, r2, r5, r0
   d8102:	1c5f      	adds	r7, r3, #1
   d8104:	2e01      	cmp	r6, #1
   d8106:	bf98      	it	ls
   d8108:	3501      	addls	r5, #1
   d810a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d810e:	eba7 0704 	sub.w	r7, r7, r4
   d8112:	d302      	bcc.n	d811a <gmtime_r+0xe2>
   d8114:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8118:	e014      	b.n	d8144 <gmtime_r+0x10c>
   d811a:	0782      	lsls	r2, r0, #30
   d811c:	d105      	bne.n	d812a <gmtime_r+0xf2>
   d811e:	2464      	movs	r4, #100	; 0x64
   d8120:	fbb0 f2f4 	udiv	r2, r0, r4
   d8124:	fb04 0212 	mls	r2, r4, r2, r0
   d8128:	b94a      	cbnz	r2, d813e <gmtime_r+0x106>
   d812a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d812e:	fbb0 f4f2 	udiv	r4, r0, r2
   d8132:	fb02 0014 	mls	r0, r2, r4, r0
   d8136:	fab0 f280 	clz	r2, r0
   d813a:	0952      	lsrs	r2, r2, #5
   d813c:	e000      	b.n	d8140 <gmtime_r+0x108>
   d813e:	2201      	movs	r2, #1
   d8140:	333b      	adds	r3, #59	; 0x3b
   d8142:	441a      	add	r2, r3
   d8144:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8148:	2300      	movs	r3, #0
   d814a:	61ca      	str	r2, [r1, #28]
   d814c:	614d      	str	r5, [r1, #20]
   d814e:	610e      	str	r6, [r1, #16]
   d8150:	60cf      	str	r7, [r1, #12]
   d8152:	620b      	str	r3, [r1, #32]
   d8154:	4608      	mov	r0, r1
   d8156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8158:	00015180 	.word	0x00015180
   d815c:	fffdc54f 	.word	0xfffdc54f
   d8160:	00023ab1 	.word	0x00023ab1
   d8164:	00023ab0 	.word	0x00023ab0

000d8168 <__env_lock>:
   d8168:	4770      	bx	lr

000d816a <__env_unlock>:
   d816a:	4770      	bx	lr

000d816c <dynalib_user>:
   d816c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d817c:	0000 0000                                   ....

000d8180 <_ZL13releaseNumber>:
   d8180:	2e31 3232 0000 0030 4554 504d 5245 5441     1.22..0.TEMPERAT
   d8190:	5255 2045 4e49 4320 2500 2e34 6631 0043     URE IN C.%4.1fC.
   d81a0:	6554 706d 7265 7461 7275 2065 7266 6d6f     Temperature from
   d81b0:	7420 6b61 4d65 6165 7573 6572 656d 746e      takeMeasurement
   d81c0:	2073 7546 636e 6974 6e6f 2500 2e34 6631     s Function.%4.1f
   d81d0:	0056 2e25 6630 2525 2500 2e33 6631 5620     V.%.0f%%.%3.1f V
   d81e0:	5600 7265 6f62 6573 4d20 646f 2065 7453     .Verbose Mode St
   d81f0:	7261 6574 2e64 5600 7265 6f62 6573 4d20     arted..Verbose M
   d8200:	646f 2065 6c41 6572 6461 2079 4e4f 002e     ode Already ON..
   d8210:	6556 6272 736f 2065 6f4d 6564 5320 6f74     Verbose Mode Sto
   d8220:	7070 6465 002e 6556 6272 736f 2065 6f4d     pped..Verbose Mo
   d8230:	6564 6120 726c 6165 7964 4f20 4646 002e     de already OFF..
   d8240:	227b 6554 706d 7265 7461 7275 2265 253a     {"Temperature":%
   d8250:	2e33 6631 202c 4222 7461 6574 7972 3a22     3.1f, "Battery":
   d8260:	3325 312e 7d66 4100 7269 512d 6175 696c     %3.1f}.Air-Quali
   d8270:	7974 482d 6f6f 006b 6f4e 4420 7461 0061     ty-Hook.No Data.
   d8280:	6255 6469 746f 2073 6f48 6b6f 5300 6174     Ubidots Hook.Sta
   d8290:	6574 5400 6172 736e 7469 6f69 3a6e 2520     te.Transition: %
   d82a0:	2073 6f74 2520 0073 654e 2077 6f48 7275     s to %s.New Hour
   d82b0:	202d 6552 6f70 7472 6e69 0067 6942 2067     - Reporting.Big 
   d82c0:	6843 6e61 6567 2d20 5220 7061 6469 2620     Change - Rapid &
   d82d0:	5220 7065 726f 6974 676e 4300 6168 676e      Reporting.Chang
   d82e0:	2065 6564 6574 7463 6465 2d20 5220 7065     e detected - Rep
   d82f0:	726f 6974 676e 4e00 206f 6843 6e61 6567     orting.No Change
   d8300:	2d20 4920 6c64 0065 6554 706d 7265 7461      - Idle.Temperat
   d8310:	7275 0065 6144 6174 5320 6e65 2074 202f     ure.Data Sent / 
   d8320:	6552 7073 6e6f 6573 5220 6365 6965 6576     Response Receive
   d8330:	0064 7073 7261 2f6b 6564 6976 6563 732f     d.spark/device/s
   d8340:	7365 6973 6e6f 652f 646e 5200 7365 7465     ession/end.Reset
   d8350:	6974 676e 6920 206e 3033 7320 6365 6e6f     ting in 30 secon
   d8360:	7364 4500 7272 726f 4700 696f 676e 7420     ds.Error.Going t
   d8370:	206f 6174 656b 6120 2520 2069 6573 6f63     o take a %i seco
   d8380:	646e 6e20 7061 4e00 7061 6970 676e 4600     nd nap.Napping.F
   d8390:	6f72 206d 6c53 6565 0070 6f57 656b 7055     rom Sleep.WokeUp
   d83a0:	4300 6d6f 616d 646e 6120 6363 7065 6574     .Command accepte
   d83b0:	2064 202d 6572 6f70 7472 6e69 2067 6f6e     d - reporting no
   d83c0:	0077 6f43 6d6d 6e61 2064 6361 6563 7470     w.Command accept
   d83d0:	6465 2d20 7320 6e65 6973 676e 6e20 776f     ed - sensing now
   d83e0:	7600 7265 6f62 6573 6f4d 6564 4700 7465     .verboseMode.Get
   d83f0:	522d 6165 6964 676e 5300 6e65 2d64 6552     -Reading.Send-Re
   d8400:	6f70 7472 4c00 776f 502d 776f 7265 4d2d     port.Low-Power-M
   d8410:	646f 0065 6552 656c 7361 0065 6953 6e67     ode.Release.Sign
   d8420:	6c61 4200 7461 6574 7972 4300 756f 646c     al.Battery.Could
   d8430:	276e 2074 6966 646e 5320 5448 3133 0000     n't find SHT31..

000d8440 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8448:	53e1 000d 53e7 000d 543d 000d 53f5 000d     .S...S..=T...S..
   d8458:	53e3 000d                                   .S..

000d845c <_ZTVN5spark13EthernetClassE>:
	...
   d8464:	5a4f 000d 5a45 000d 5a3b 000d 5a31 000d     OZ..EZ..;Z..1Z..
   d8474:	5a25 000d 5a19 000d 5a0d 000d 5a05 000d     %Z...Z...Z...Z..
   d8484:	59fb 000d 59f1 000d 5ded 000d               .Y...Y...]..

000d8490 <_ZTV7TwoWire>:
	...
   d8498:	5a6d 000d 5ab7 000d 5a8f 000d 5a6f 000d     mZ...Z...Z..oZ..
   d84a8:	5a97 000d 5a9f 000d 5aa7 000d 5aaf 000d     .Z...Z...Z...Z..

000d84b8 <_ZTV9IPAddress>:
	...
   d84c0:	5b3b 000d 5b2b 000d 5b2d 000d 6162 6475     ;[..+[..-[..baud
   d84d0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d84e0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d84f0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d8500:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d8510:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d8520:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d8530:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d8540:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d8550:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d8560:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d8570:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d8580:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d8590:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d85a0:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d85ac <_ZTVN5spark9MeshClassE>:
	...
   d85b4:	5c7f 000d 5c75 000d 5c6b 000d 5c61 000d     .\..u\..k\..a\..
   d85c4:	5c55 000d 5c49 000d 5c3d 000d 5c35 000d     U\..I\..=\..5\..
   d85d4:	5c2b 000d 5c21 000d 5ded 000d               +\..!\...]..

000d85e0 <_ZTVN5spark12NetworkClassE>:
	...
   d85e8:	5d85 000d 5d8f 000d 5d99 000d 5da3 000d     .]...]...]...]..
   d85f8:	5dad 000d 5db9 000d 5dc5 000d 5dd1 000d     .]...]...]...]..
   d8608:	5dd9 000d 5de3 000d 5ded 000d 616e 006e     .]...]...]..nan.
   d8618:	766f 0066 6e69 0066                         ovf.inf.

000d8620 <_ZTV8SPIClass>:
	...
   d8628:	6191 000d 6193 000d 2b25 3330 3a64 3025     .a...a..%+03d:%0
   d8638:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d8648:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d8658 <_ZTV11USARTSerial>:
	...
   d8660:	64a5 000d 64f5 000d 6503 000d 5ecd 000d     .d...d...e...^..
   d8670:	64b9 000d 64db 000d 64c7 000d 64ef 000d     .d...d...d...d..
   d8680:	64a7 000d 64ab 000d                         .d...d..

000d8688 <_ZTV9USBSerial>:
	...
   d8690:	65ad 000d 65fd 000d 660b 000d 5ecd 000d     .e...e...f...^..
   d86a0:	65e9 000d 65af 000d 65c5 000d 65f7 000d     .e...e...e...e..
   d86b0:	65db 000d 65a9 000d                         .e...e..

000d86b8 <_ZTVN5spark9WiFiClassE>:
	...
   d86c0:	6717 000d 670d 000d 6703 000d 66b9 000d     .g...g...g...f..
   d86d0:	66f7 000d 66eb 000d 66df 000d 66d7 000d     .f...f...f...f..
   d86e0:	66cd 000d 66c3 000d 5ded 000d               .f...f...]..

000d86ec <_ctype_>:
   d86ec:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d86fc:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d870c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d871c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d872c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d873c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d874c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d875c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d876c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d87f0 <__sf_fake_stdin>:
	...

000d8810 <__sf_fake_stdout>:
	...

000d8830 <__sf_fake_stderr>:
	...

000d8850 <__month_lengths>:
   d8850:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d8860:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8870:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8880:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8890:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d88a0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d88b0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d88c0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d88d0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d88e0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d88ec <link_const_variable_data_end>:
   d88ec:	000d4c51 	.word	0x000d4c51
   d88f0:	000d4c79 	.word	0x000d4c79
   d88f4:	000d4c7d 	.word	0x000d4c7d
   d88f8:	000d4e25 	.word	0x000d4e25
   d88fc:	000d53d1 	.word	0x000d53d1
   d8900:	000d5a59 	.word	0x000d5a59
   d8904:	000d5c11 	.word	0x000d5c11
   d8908:	000d5d35 	.word	0x000d5d35
   d890c:	000d5eb9 	.word	0x000d5eb9
   d8910:	000d6175 	.word	0x000d6175
   d8914:	000d6381 	.word	0x000d6381
   d8918:	000d6491 	.word	0x000d6491
   d891c:	000d6721 	.word	0x000d6721
   d8920:	000d68e9 	.word	0x000d68e9
   d8924:	000d6941 	.word	0x000d6941
   d8928:	000d6a05 	.word	0x000d6a05
   d892c:	000d6a89 	.word	0x000d6a89
   d8930:	000d6b0d 	.word	0x000d6b0d

000d8934 <link_constructors_end>:
	...
