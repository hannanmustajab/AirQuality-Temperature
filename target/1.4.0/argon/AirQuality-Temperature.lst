
/Users/chipmc/Documents/Maker/Particle/Projects/AirQuality-Temperature/target/1.4.0/argon/AirQuality-Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000050c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00019330  2**0
                  CONTENTS
  4 .data         00000224  2003e08c  000d90e0  0000e08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000540  2003e2b0  2003e2b0  0001e2b0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9304  000d9304  00019304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d932c  000d932c  0001932c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fb86b  00000000  00000000  00019330  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013942  00000000  00000000  00114b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021270  00000000  00000000  001284dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b48  00000000  00000000  0014974d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004eb8  00000000  00000000  0014c295  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000386dc  00000000  00000000  0015114d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f1ae  00000000  00000000  00189829  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104e59  00000000  00000000  001b89d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dfe4  00000000  00000000  002bd830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 ff89 	bl	d7f48 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 ff8e 	bl	d7f5e <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e08c 	.word	0x2003e08c
   d404c:	000d90e0 	.word	0x000d90e0
   d4050:	2003e2b0 	.word	0x2003e2b0
   d4054:	2003e2b0 	.word	0x2003e2b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	f002 ff5b 	bl	d6f18 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d90d4 	.word	0x000d90d4
   d4084:	000d9090 	.word	0x000d9090

000d4088 <module_user_setup>:
   d4088:	f000 bdc6 	b.w	d4c18 <setup>

000d408c <module_user_loop>:
   d408c:	b508      	push	{r3, lr}
   d408e:	f000 faf7 	bl	d4680 <loop>
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4096:	f002 bf0d 	b.w	d6eb4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bc41 	b.w	d5920 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bc47 	b.w	d5930 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bc45 	b.w	d5930 <free>

000d40a6 <__cxa_guard_acquire>:
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d002      	beq.n	d40c4 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40be:	e004      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c0:	6001      	str	r1, [r0, #0]
	      break;
   d40c2:	e002      	b.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c4:	680b      	ldr	r3, [r1, #0]
   d40c6:	b100      	cbz	r0, d40ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40ca:	2000      	movs	r0, #0
   d40cc:	4770      	bx	lr

000d40ce <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40d0:	6804      	ldr	r4, [r0, #0]
   d40d2:	4668      	mov	r0, sp
   d40d4:	f002 fb5f 	bl	d6796 <_ZN6StringC1EOS_>
   d40d8:	4668      	mov	r0, sp
   d40da:	47a0      	blx	r4
   d40dc:	4604      	mov	r4, r0
   d40de:	4668      	mov	r0, sp
   d40e0:	f002 fb69 	bl	d67b6 <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e4:	4620      	mov	r0, r4
   d40e6:	b004      	add	sp, #16
   d40e8:	bd10      	pop	{r4, pc}
	...

000d40ec <_Z12LowPowerMode6String>:
  }
  return 0;
}

bool LowPowerMode(String Command)
{
   d40ec:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ee:	4909      	ldr	r1, [pc, #36]	; (d4114 <_Z12LowPowerMode6String+0x28>)
   d40f0:	4605      	mov	r5, r0
   d40f2:	f002 fbba 	bl	d686a <_ZNK6String6equalsEPKc>
  if (Command == "1")
   d40f6:	4604      	mov	r4, r0
   d40f8:	b118      	cbz	r0, d4102 <_Z12LowPowerMode6String+0x16>
  {
    lowPowerModeOn = true;                                                         // This sets the lowPowerModeOn to true 
   d40fa:	4b07      	ldr	r3, [pc, #28]	; (d4118 <_Z12LowPowerMode6String+0x2c>)
   d40fc:	2001      	movs	r0, #1
   d40fe:	7018      	strb	r0, [r3, #0]
    return 1;
   d4100:	bd38      	pop	{r3, r4, r5, pc}
   d4102:	4906      	ldr	r1, [pc, #24]	; (d411c <_Z12LowPowerMode6String+0x30>)
   d4104:	4628      	mov	r0, r5
   d4106:	f002 fbb0 	bl	d686a <_ZNK6String6equalsEPKc>
  }
  else if (Command == "0")
   d410a:	b110      	cbz	r0, d4112 <_Z12LowPowerMode6String+0x26>
  {
    lowPowerModeOn = false;
   d410c:	4b02      	ldr	r3, [pc, #8]	; (d4118 <_Z12LowPowerMode6String+0x2c>)
    return 1;
   d410e:	2001      	movs	r0, #1
    lowPowerModeOn = true;                                                         // This sets the lowPowerModeOn to true 
    return 1;
  }
  else if (Command == "0")
  {
    lowPowerModeOn = false;
   d4110:	701c      	strb	r4, [r3, #0]
    return 1;
  }
  else return 0;
   d4112:	bd38      	pop	{r3, r4, r5, pc}
   d4114:	000d8c62 	.word	0x000d8c62
   d4118:	2003e1f4 	.word	0x2003e1f4
   d411c:	000d88ea 	.word	0x000d88ea

000d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4120:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4122:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4126:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4128:	f88d 3000 	strb.w	r3, [sp]
   d412c:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d412e:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4130:	f001 fdda 	bl	d5ce8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d4134:	4628      	mov	r0, r5
   d4136:	b003      	add	sp, #12
   d4138:	bd30      	pop	{r4, r5, pc}
   d413a:	0000      	movs	r0, r0
   d413c:	0000      	movs	r0, r0
	...

000d4140 <_Z16takeMeasurementsv>:
    } break; 
  }
}


bool takeMeasurements() {
   d4140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  
  // Mocked up here for the call - need to replace with your real readings
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
   d4142:	f002 fc6d 	bl	d6a20 <_ZN9TimeClass3nowEv>
   d4146:	4b38      	ldr	r3, [pc, #224]	; (d4228 <_Z16takeMeasurementsv+0xe8>)
   d4148:	6018      	str	r0, [r3, #0]
  int currentMinutes = Time.minute();                                // So we only have to check once
   d414a:	f002 fc7b 	bl	d6a44 <_ZN9TimeClass6minuteEv>
  switch (currentMinutes) {
   d414e:	280f      	cmp	r0, #15
   d4150:	d00a      	beq.n	d4168 <_Z16takeMeasurementsv+0x28>
   d4152:	dd07      	ble.n	d4164 <_Z16takeMeasurementsv+0x24>
   d4154:	281e      	cmp	r0, #30
   d4156:	d003      	beq.n	d4160 <_Z16takeMeasurementsv+0x20>
   d4158:	282d      	cmp	r0, #45	; 0x2d
   d415a:	d103      	bne.n	d4164 <_Z16takeMeasurementsv+0x24>
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
      break; 
    case 45:
      reportCycle = 2;                                                // This is the third of the sample-only periods
   d415c:	2502      	movs	r5, #2
      break; 
   d415e:	e004      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
   d4160:	2501      	movs	r5, #1
   d4162:	e002      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
      break; 
    case 0:
      reportCycle = 3;                                                // This is the fourth of the sample-only periods
      break; 
    default:
      reportCycle = 3;  
   d4164:	2503      	movs	r5, #3
      break;                                                          // just in case
   d4166:	e000      	b.n	d416a <_Z16takeMeasurementsv+0x2a>
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
  int currentMinutes = Time.minute();                                // So we only have to check once
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
   d4168:	2500      	movs	r5, #0
      reportCycle = 3;  
      break;                                                          // just in case
  }
  
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d416a:	4c30      	ldr	r4, [pc, #192]	; (d422c <_Z16takeMeasurementsv+0xec>)

  // Temperature Measurements here
  sensor_data.temperatureInC = temperatureInC;
   d416c:	4e30      	ldr	r6, [pc, #192]	; (d4230 <_Z16takeMeasurementsv+0xf0>)
      reportCycle = 3;  
      break;                                                          // just in case
  }
  
  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d416e:	2300      	movs	r3, #0
   d4170:	7023      	strb	r3, [r4, #0]

  // Temperature Measurements here
  sensor_data.temperatureInC = temperatureInC;
   d4172:	6833      	ldr	r3, [r6, #0]
   d4174:	60e3      	str	r3, [r4, #12]
  Serial.println(temperatureInC);
   d4176:	f002 fd5d 	bl	d6c34 <_Z16_fetch_usbserialv>
   d417a:	4607      	mov	r7, r0
   d417c:	6830      	ldr	r0, [r6, #0]
   d417e:	f003 fa3d 	bl	d75fc <__aeabi_f2d>
   d4182:	ec41 0b10 	vmov	d0, r0, r1
   d4186:	2102      	movs	r1, #2
   d4188:	4638      	mov	r0, r7
   d418a:	f002 fac5 	bl	d6718 <_ZN5Print7printlnEdi>
  Serial.println("TEMPERATURE IN C");
   d418e:	f002 fd51 	bl	d6c34 <_Z16_fetch_usbserialv>
   d4192:	4928      	ldr	r1, [pc, #160]	; (d4234 <_Z16takeMeasurementsv+0xf4>)
   d4194:	f002 f9b3 	bl	d64fe <_ZN5Print7printlnEPKc>

  snprintf(temperatureString,sizeof(temperatureString), "%4.1f %%", sensor_data.temperatureInC);
   d4198:	68e0      	ldr	r0, [r4, #12]
   d419a:	f003 fa2f 	bl	d75fc <__aeabi_f2d>
   d419e:	4a26      	ldr	r2, [pc, #152]	; (d4238 <_Z16takeMeasurementsv+0xf8>)
   d41a0:	e9cd 0100 	strd	r0, r1, [sp]
   d41a4:	2110      	movs	r1, #16
   d41a6:	4825      	ldr	r0, [pc, #148]	; (d423c <_Z16takeMeasurementsv+0xfc>)
   d41a8:	f001 fbda 	bl	d5960 <snprintf>
  
  Serial.println(sensor_data.temperatureInC);
   d41ac:	f002 fd42 	bl	d6c34 <_Z16_fetch_usbserialv>
   d41b0:	4606      	mov	r6, r0
   d41b2:	68e0      	ldr	r0, [r4, #12]
   d41b4:	f003 fa22 	bl	d75fc <__aeabi_f2d>
   d41b8:	ec41 0b10 	vmov	d0, r0, r1
   d41bc:	2102      	movs	r1, #2
   d41be:	4630      	mov	r0, r6
   d41c0:	f002 faaa 	bl	d6718 <_ZN5Print7printlnEdi>
  Serial.println("Temperature from takeMeasurements Function");
   d41c4:	f002 fd36 	bl	d6c34 <_Z16_fetch_usbserialv>
   d41c8:	491d      	ldr	r1, [pc, #116]	; (d4240 <_Z16takeMeasurementsv+0x100>)
   d41ca:	f002 f998 	bl	d64fe <_ZN5Print7printlnEPKc>

  // Get battery voltage level
  sensor_data.batteryVoltage = analogRead(BATT) * 0.0011224;                   // Voltage level of battery
   d41ce:	2021      	movs	r0, #33	; 0x21
   d41d0:	f002 fef1 	bl	d6fb6 <analogRead>
   d41d4:	f003 fa00 	bl	d75d8 <__aeabi_i2d>
   d41d8:	a311      	add	r3, pc, #68	; (adr r3, d4220 <_Z16takeMeasurementsv+0xe0>)
   d41da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41de:	f003 fa61 	bl	d76a4 <__aeabi_dmul>
   d41e2:	f003 fd57 	bl	d7c94 <__aeabi_d2f>
   d41e6:	60a0      	str	r0, [r4, #8]
  snprintf(batteryString, sizeof(batteryString), "%4.1f %%", sensor_data.batteryVoltage);
   d41e8:	f003 fa08 	bl	d75fc <__aeabi_f2d>
  
  // Indicate that this is a valid data array and store it
  sensor_data.validData = true;
   d41ec:	2601      	movs	r6, #1
  Serial.println(sensor_data.temperatureInC);
  Serial.println("Temperature from takeMeasurements Function");

  // Get battery voltage level
  sensor_data.batteryVoltage = analogRead(BATT) * 0.0011224;                   // Voltage level of battery
  snprintf(batteryString, sizeof(batteryString), "%4.1f %%", sensor_data.batteryVoltage);
   d41ee:	e9cd 0100 	strd	r0, r1, [sp]
   d41f2:	4a11      	ldr	r2, [pc, #68]	; (d4238 <_Z16takeMeasurementsv+0xf8>)
   d41f4:	4813      	ldr	r0, [pc, #76]	; (d4244 <_Z16takeMeasurementsv+0x104>)
   d41f6:	2110      	movs	r1, #16
   d41f8:	f001 fbb2 	bl	d5960 <snprintf>
  
  // Indicate that this is a valid data array and store it
  sensor_data.validData = true;
   d41fc:	7026      	strb	r6, [r4, #0]
  sensor_data.timeStamp = Time.now();
   d41fe:	f002 fc0f 	bl	d6a20 <_ZN9TimeClass3nowEv>
   d4202:	6060      	str	r0, [r4, #4]
  EEPROM.put(7 + 100*reportCycle,sensor_data);                              // Current object is 72 bytes long - leaving some room for expansion
   d4204:	f002 feee 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4208:	2064      	movs	r0, #100	; 0x64
   d420a:	4368      	muls	r0, r5
   d420c:	2210      	movs	r2, #16
   d420e:	4621      	mov	r1, r4
   d4210:	3007      	adds	r0, #7
   d4212:	f001 f967 	bl	d54e4 <HAL_EEPROM_Put>

  return 1;                                                             // Done, measurements take and the data array is stored as an obeect in EEPROM                                         
}
   d4216:	4630      	mov	r0, r6
   d4218:	b003      	add	sp, #12
   d421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d421c:	f3af 8000 	nop.w
   d4220:	d2c10294 	.word	0xd2c10294
   d4224:	3f5263af 	.word	0x3f5263af
   d4228:	2003e2b4 	.word	0x2003e2b4
   d422c:	2003e2d0 	.word	0x2003e2d0
   d4230:	2003e2f4 	.word	0x2003e2f4
   d4234:	000d88ec 	.word	0x000d88ec
   d4238:	000d88fd 	.word	0x000d88fd
   d423c:	2003e2b8 	.word	0x2003e2b8
   d4240:	000d8906 	.word	0x000d8906
   d4244:	2003e34c 	.word	0x2003e34c

000d4248 <_Z20PublishDelayFunctionv>:


// Function to create a delay in the publish time
bool PublishDelayFunction() {
   d4248:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
   d424a:	4c07      	ldr	r4, [pc, #28]	; (d4268 <_Z20PublishDelayFunctionv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d424c:	f001 f91a 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
   d4250:	6823      	ldr	r3, [r4, #0]
   d4252:	1ac0      	subs	r0, r0, r3
   d4254:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4258:	d904      	bls.n	d4264 <_Z20PublishDelayFunctionv+0x1c>
   d425a:	f001 f913 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else {
    tstamp = millis();
   d425e:	6020      	str	r0, [r4, #0]
   d4260:	2001      	movs	r0, #1
   d4262:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
    return 0;
   d4264:	2000      	movs	r0, #0
  else {
    tstamp = millis();
    return 1;
  }
}
   d4266:	bd10      	pop	{r4, pc}
   d4268:	2003e2e4 	.word	0x2003e2e4

000d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d426c:	b508      	push	{r3, lr}

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
  if (Command == "1") {
    state = MEASURING_STATE;                                                      // Set the state to reporting
    waitUntil(PublishDelayFunction);  
   d426e:	f7ff ffeb 	bl	d4248 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4272:	b118      	cbz	r0, d427c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4278:	f7ff bfe6 	b.w	d4248 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d427c:	f001 fab8 	bl	d57f0 <spark_process>
   d4280:	e7f5      	b.n	d426e <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70+0x2>
	...

000d4284 <_Z17getSignalStrengthv>:
  }
}

// Functions for mobile app reporting.
void getSignalStrength()
{
   d4284:	b500      	push	{lr}
   d4286:	b08d      	sub	sp, #52	; 0x34
  WiFiSignal sig = WiFi.RSSI();
   d4288:	490a      	ldr	r1, [pc, #40]	; (d42b4 <_Z17getSignalStrengthv+0x30>)
   d428a:	a803      	add	r0, sp, #12
   d428c:	f002 fdb8 	bl	d6e00 <_ZN5spark9WiFiClass4RSSIEv>
  float rssi = sig.getStrength();
   d4290:	a803      	add	r0, sp, #12
   d4292:	f002 fd7b 	bl	d6d8c <_ZNK10WiFiSignal11getStrengthEv>
  snprintf(signalString, sizeof(signalString), "%.0f%%", rssi);
   d4296:	ee10 0a10 	vmov	r0, s0
   d429a:	f003 f9af 	bl	d75fc <__aeabi_f2d>
   d429e:	4a06      	ldr	r2, [pc, #24]	; (d42b8 <_Z17getSignalStrengthv+0x34>)
   d42a0:	e9cd 0100 	strd	r0, r1, [sp]
   d42a4:	2110      	movs	r1, #16
   d42a6:	4805      	ldr	r0, [pc, #20]	; (d42bc <_Z17getSignalStrengthv+0x38>)
   d42a8:	f001 fb5a 	bl	d5960 <snprintf>
}
   d42ac:	b00d      	add	sp, #52	; 0x34
   d42ae:	f85d fb04 	ldr.w	pc, [sp], #4
   d42b2:	bf00      	nop
   d42b4:	2003e6d8 	.word	0x2003e6d8
   d42b8:	000d8931 	.word	0x000d8931
   d42bc:	2003e32c 	.word	0x2003e32c

000d42c0 <_Z16getBatteryChargev>:

void getBatteryCharge()
{
   d42c0:	b507      	push	{r0, r1, r2, lr}
  voltage = analogRead(BATT) * 0.0011224;
   d42c2:	2021      	movs	r0, #33	; 0x21
   d42c4:	f002 fe77 	bl	d6fb6 <analogRead>
   d42c8:	f003 f986 	bl	d75d8 <__aeabi_i2d>
   d42cc:	a30d      	add	r3, pc, #52	; (adr r3, d4304 <_Z16getBatteryChargev+0x44>)
   d42ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42d2:	f003 f9e7 	bl	d76a4 <__aeabi_dmul>
   d42d6:	f003 fcdd 	bl	d7c94 <__aeabi_d2f>
   d42da:	4b07      	ldr	r3, [pc, #28]	; (d42f8 <_Z16getBatteryChargev+0x38>)
   d42dc:	6018      	str	r0, [r3, #0]
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d42de:	f003 f98d 	bl	d75fc <__aeabi_f2d>
   d42e2:	4a06      	ldr	r2, [pc, #24]	; (d42fc <_Z16getBatteryChargev+0x3c>)
   d42e4:	e9cd 0100 	strd	r0, r1, [sp]
   d42e8:	2110      	movs	r1, #16
   d42ea:	4805      	ldr	r0, [pc, #20]	; (d4300 <_Z16getBatteryChargev+0x40>)
   d42ec:	f001 fb38 	bl	d5960 <snprintf>
}
   d42f0:	b003      	add	sp, #12
   d42f2:	f85d fb04 	ldr.w	pc, [sp], #4
   d42f6:	bf00      	nop
   d42f8:	2003e348 	.word	0x2003e348
   d42fc:	000d8938 	.word	0x000d8938
   d4300:	2003e34c 	.word	0x2003e34c
   d4304:	d2c10294 	.word	0xd2c10294
   d4308:	3f5263af 	.word	0x3f5263af

000d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d430c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d430e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4310:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4312:	b17c      	cbz	r4, d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4314:	6863      	ldr	r3, [r4, #4]
   d4316:	3b01      	subs	r3, #1
   d4318:	6063      	str	r3, [r4, #4]
   d431a:	b95b      	cbnz	r3, d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d431c:	6823      	ldr	r3, [r4, #0]
   d431e:	4620      	mov	r0, r4
   d4320:	689b      	ldr	r3, [r3, #8]
   d4322:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4324:	68a3      	ldr	r3, [r4, #8]
   d4326:	3b01      	subs	r3, #1
   d4328:	60a3      	str	r3, [r4, #8]
   d432a:	b91b      	cbnz	r3, d4334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d432c:	6823      	ldr	r3, [r4, #0]
   d432e:	4620      	mov	r0, r4
   d4330:	68db      	ldr	r3, [r3, #12]
   d4332:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4334:	4628      	mov	r0, r5
   d4336:	bd38      	pop	{r3, r4, r5, pc}

000d4338 <_Z14getTemperaturev>:
  getBatteryCharge();                                                             // Get Battery Charge Percentage
  if (getTemperature()) return 1;                                                 // Read Temperature from Sensor
  else return 0;                                                                  // Less than 1 degree difference detected
}

bool getTemperature() {                                                           // Function to get temperature value from DS18B20.
   d4338:	b570      	push	{r4, r5, r6, lr}
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d433a:	4e21      	ldr	r6, [pc, #132]	; (d43c0 <_Z14getTemperaturev+0x88>)
   d433c:	b08c      	sub	sp, #48	; 0x30
  char data[32];
  for (int i=1; i <= 10; i++) {
   d433e:	2401      	movs	r4, #1
    if (sensor.read()) {
   d4340:	4820      	ldr	r0, [pc, #128]	; (d43c4 <_Z14getTemperaturev+0x8c>)
   d4342:	f000 fe3f 	bl	d4fc4 <_ZN4DS184readEv>
   d4346:	4605      	mov	r5, r0
   d4348:	b1b8      	cbz	r0, d437a <_Z14getTemperaturev+0x42>
      if (temperatureInC != 0.0) temperatureInC = sensor.celsius();
   d434a:	4c1f      	ldr	r4, [pc, #124]	; (d43c8 <_Z14getTemperaturev+0x90>)
   d434c:	edd4 7a00 	vldr	s15, [r4]
   d4350:	eef5 7a40 	vcmp.f32	s15, #0.0
   d4354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4358:	d004      	beq.n	d4364 <_Z14getTemperaturev+0x2c>
   d435a:	481a      	ldr	r0, [pc, #104]	; (d43c4 <_Z14getTemperaturev+0x8c>)
   d435c:	f000 fe56 	bl	d500c <_ZN4DS187celsiusEv>
   d4360:	ed84 0a00 	vstr	s0, [r4]
      snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", temperatureInC);
   d4364:	6820      	ldr	r0, [r4, #0]
   d4366:	f003 f949 	bl	d75fc <__aeabi_f2d>
   d436a:	4a18      	ldr	r2, [pc, #96]	; (d43cc <_Z14getTemperaturev+0x94>)
   d436c:	e9cd 0100 	strd	r0, r1, [sp]
   d4370:	2110      	movs	r1, #16
   d4372:	4817      	ldr	r0, [pc, #92]	; (d43d0 <_Z14getTemperaturev+0x98>)
   d4374:	f001 faf4 	bl	d5960 <snprintf>
   d4378:	e01e      	b.n	d43b8 <_Z14getTemperaturev+0x80>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d437a:	f001 f883 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d437e:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4380:	f001 fa36 	bl	d57f0 <spark_process>
      return 1;
    }
    Particle.process();                                                           // This could tie up the Argon making it unresponsive to Particle commands
    snprintf(data,sizeof(data),"Sensor Read Failed, attempt %i",i);
   d4384:	4623      	mov	r3, r4
   d4386:	4a13      	ldr	r2, [pc, #76]	; (d43d4 <_Z14getTemperaturev+0x9c>)
   d4388:	2120      	movs	r1, #32
   d438a:	a804      	add	r0, sp, #16
   d438c:	f001 fae8 	bl	d5960 <snprintf>
    waitUntil(PublishDelayFunction);                                              // Use this function to slow the reading of the sensor
   d4390:	f7ff ff6c 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
    if (verboseMode) Particle.publish("Sensing",data,PRIVATE);                    // Send messages so we can see if sensor is mesbehaving
   d4394:	4b10      	ldr	r3, [pc, #64]	; (d43d8 <_Z14getTemperaturev+0xa0>)
   d4396:	781b      	ldrb	r3, [r3, #0]
   d4398:	b15b      	cbz	r3, d43b2 <_Z14getTemperaturev+0x7a>
   d439a:	4b10      	ldr	r3, [pc, #64]	; (d43dc <_Z14getTemperaturev+0xa4>)
   d439c:	4910      	ldr	r1, [pc, #64]	; (d43e0 <_Z14getTemperaturev+0xa8>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d439e:	781b      	ldrb	r3, [r3, #0]
   d43a0:	f88d 5000 	strb.w	r5, [sp]
   d43a4:	a802      	add	r0, sp, #8
   d43a6:	aa04      	add	r2, sp, #16
   d43a8:	f7ff feba 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43ac:	a803      	add	r0, sp, #12
   d43ae:	f7ff ffad 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  else return 0;                                                                  // Less than 1 degree difference detected
}

bool getTemperature() {                                                           // Function to get temperature value from DS18B20.
  char data[32];
  for (int i=1; i <= 10; i++) {
   d43b2:	3401      	adds	r4, #1
   d43b4:	2c0b      	cmp	r4, #11
   d43b6:	d1c3      	bne.n	d4340 <_Z14getTemperaturev+0x8>
    snprintf(data,sizeof(data),"Sensor Read Failed, attempt %i",i);
    waitUntil(PublishDelayFunction);                                              // Use this function to slow the reading of the sensor
    if (verboseMode) Particle.publish("Sensing",data,PRIVATE);                    // Send messages so we can see if sensor is mesbehaving
  }
  return 0;
}
   d43b8:	4628      	mov	r0, r5
   d43ba:	b00c      	add	sp, #48	; 0x30
   d43bc:	bd70      	pop	{r4, r5, r6, pc}
   d43be:	bf00      	nop
   d43c0:	2003e6e4 	.word	0x2003e6e4
   d43c4:	2003e2fc 	.word	0x2003e2fc
   d43c8:	2003e2f4 	.word	0x2003e2f4
   d43cc:	000d8940 	.word	0x000d8940
   d43d0:	2003e2b8 	.word	0x2003e2b8
   d43d4:	000d8950 	.word	0x000d8950
   d43d8:	2003e341 	.word	0x2003e341
   d43dc:	2003e35c 	.word	0x2003e35c
   d43e0:	000d896f 	.word	0x000d896f

000d43e4 <_Z15getMeasurementsv>:
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}

bool getMeasurements()
{
   d43e4:	b508      	push	{r3, lr}
  getSignalStrength();                                                            // Get Signal Strength
   d43e6:	f7ff ff4d 	bl	d4284 <_Z17getSignalStrengthv>
  getBatteryCharge();                                                             // Get Battery Charge Percentage
   d43ea:	f7ff ff69 	bl	d42c0 <_Z16getBatteryChargev>
  if (getTemperature()) return 1;                                                 // Read Temperature from Sensor
  else return 0;                                                                  // Less than 1 degree difference detected
}
   d43ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

bool getMeasurements()
{
  getSignalStrength();                                                            // Get Signal Strength
  getBatteryCharge();                                                             // Get Battery Charge Percentage
  if (getTemperature()) return 1;                                                 // Read Temperature from Sensor
   d43f2:	f7ff bfa1 	b.w	d4338 <_Z14getTemperaturev>
	...

000d43f8 <_Z14SetVerboseMode6String>:
  }
  return 0;
}


bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
   d43f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d43fa:	4929      	ldr	r1, [pc, #164]	; (d44a0 <_Z14SetVerboseMode6String+0xa8>)
   d43fc:	4605      	mov	r5, r0
   d43fe:	f002 fa34 	bl	d686a <_ZNK6String6equalsEPKc>
  if (command == "1" && verboseMode == false)
   d4402:	b110      	cbz	r0, d440a <_Z14SetVerboseMode6String+0x12>
   d4404:	4b27      	ldr	r3, [pc, #156]	; (d44a4 <_Z14SetVerboseMode6String+0xac>)
   d4406:	781e      	ldrb	r6, [r3, #0]
   d4408:	b186      	cbz	r6, d442c <_Z14SetVerboseMode6String+0x34>
   d440a:	4925      	ldr	r1, [pc, #148]	; (d44a0 <_Z14SetVerboseMode6String+0xa8>)
   d440c:	4628      	mov	r0, r5
   d440e:	f002 fa2c 	bl	d686a <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
    return 1;
  }

  if (command == "1" && verboseMode == true)
   d4412:	b1a8      	cbz	r0, d4440 <_Z14SetVerboseMode6String+0x48>
   d4414:	4b23      	ldr	r3, [pc, #140]	; (d44a4 <_Z14SetVerboseMode6String+0xac>)
   d4416:	781b      	ldrb	r3, [r3, #0]
   d4418:	b193      	cbz	r3, d4440 <_Z14SetVerboseMode6String+0x48>
  {
    waitUntil(PublishDelayFunction);
   d441a:	f7ff ff27 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d441e:	4b22      	ldr	r3, [pc, #136]	; (d44a8 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
   d4420:	4a22      	ldr	r2, [pc, #136]	; (d44ac <_Z14SetVerboseMode6String+0xb4>)
   d4422:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4424:	2400      	movs	r4, #0
   d4426:	f88d 4000 	strb.w	r4, [sp]
   d442a:	e02e      	b.n	d448a <_Z14SetVerboseMode6String+0x92>


bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
  if (command == "1" && verboseMode == false)
  {
    verboseMode = true;
   d442c:	2401      	movs	r4, #1
   d442e:	701c      	strb	r4, [r3, #0]
    waitUntil(PublishDelayFunction);
   d4430:	f7ff ff1c 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d4434:	4b1c      	ldr	r3, [pc, #112]	; (d44a8 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
   d4436:	4a1e      	ldr	r2, [pc, #120]	; (d44b0 <_Z14SetVerboseMode6String+0xb8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4438:	781b      	ldrb	r3, [r3, #0]
   d443a:	f88d 6000 	strb.w	r6, [sp]
   d443e:	e024      	b.n	d448a <_Z14SetVerboseMode6String+0x92>
   d4440:	491c      	ldr	r1, [pc, #112]	; (d44b4 <_Z14SetVerboseMode6String+0xbc>)
   d4442:	4628      	mov	r0, r5
   d4444:	f002 fa11 	bl	d686a <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
    return 0;
  }

  if (command == "0" && verboseMode == true)
   d4448:	b160      	cbz	r0, d4464 <_Z14SetVerboseMode6String+0x6c>
   d444a:	4b16      	ldr	r3, [pc, #88]	; (d44a4 <_Z14SetVerboseMode6String+0xac>)
   d444c:	781c      	ldrb	r4, [r3, #0]
   d444e:	b14c      	cbz	r4, d4464 <_Z14SetVerboseMode6String+0x6c>
  {
    verboseMode = false;
   d4450:	2500      	movs	r5, #0
   d4452:	701d      	strb	r5, [r3, #0]
    waitUntil(PublishDelayFunction);
   d4454:	f7ff ff0a 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d4458:	4b13      	ldr	r3, [pc, #76]	; (d44a8 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Stopped.", PRIVATE);
   d445a:	4a17      	ldr	r2, [pc, #92]	; (d44b8 <_Z14SetVerboseMode6String+0xc0>)
   d445c:	781b      	ldrb	r3, [r3, #0]
   d445e:	f88d 5000 	strb.w	r5, [sp]
   d4462:	e012      	b.n	d448a <_Z14SetVerboseMode6String+0x92>
   d4464:	4913      	ldr	r1, [pc, #76]	; (d44b4 <_Z14SetVerboseMode6String+0xbc>)
   d4466:	4628      	mov	r0, r5
   d4468:	f002 f9ff 	bl	d686a <_ZNK6String6equalsEPKc>
    return 1;
  }

  if (command == "0" && verboseMode == false)
   d446c:	b120      	cbz	r0, d4478 <_Z14SetVerboseMode6String+0x80>
   d446e:	4b0d      	ldr	r3, [pc, #52]	; (d44a4 <_Z14SetVerboseMode6String+0xac>)
   d4470:	781c      	ldrb	r4, [r3, #0]
   d4472:	b11c      	cbz	r4, d447c <_Z14SetVerboseMode6String+0x84>
  {
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
    return 0;
  }
  else return 0;
   d4474:	2400      	movs	r4, #0
   d4476:	e00f      	b.n	d4498 <_Z14SetVerboseMode6String+0xa0>
   d4478:	4604      	mov	r4, r0
   d447a:	e00d      	b.n	d4498 <_Z14SetVerboseMode6String+0xa0>
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d447c:	f7ff fef6 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d4480:	4b09      	ldr	r3, [pc, #36]	; (d44a8 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
   d4482:	4a0e      	ldr	r2, [pc, #56]	; (d44bc <_Z14SetVerboseMode6String+0xc4>)
   d4484:	781b      	ldrb	r3, [r3, #0]
   d4486:	f88d 4000 	strb.w	r4, [sp]
   d448a:	a802      	add	r0, sp, #8
   d448c:	490c      	ldr	r1, [pc, #48]	; (d44c0 <_Z14SetVerboseMode6String+0xc8>)
   d448e:	f7ff fe47 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4492:	a803      	add	r0, sp, #12
   d4494:	f7ff ff3a 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 0;
  }
  else return 0;
}
   d4498:	4620      	mov	r0, r4
   d449a:	b004      	add	sp, #16
   d449c:	bd70      	pop	{r4, r5, r6, pc}
   d449e:	bf00      	nop
   d44a0:	000d8c62 	.word	0x000d8c62
   d44a4:	2003e341 	.word	0x2003e341
   d44a8:	2003e35c 	.word	0x2003e35c
   d44ac:	000d898d 	.word	0x000d898d
   d44b0:	000d8977 	.word	0x000d8977
   d44b4:	000d88ea 	.word	0x000d88ea
   d44b8:	000d89a6 	.word	0x000d89a6
   d44bc:	000d89bc 	.word	0x000d89bc
   d44c0:	000d8ba5 	.word	0x000d8ba5

000d44c4 <_Z11sendUBIDotsv>:

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
   d44c4:	b570      	push	{r4, r5, r6, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d44c6:	4d23      	ldr	r5, [pc, #140]	; (d4554 <_Z11sendUBIDotsv+0x90>)
   d44c8:	4e23      	ldr	r6, [pc, #140]	; (d4558 <_Z11sendUBIDotsv+0x94>)
   d44ca:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
   d44ce:	2407      	movs	r4, #7
  char data[512];

  for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(7 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d44d0:	f002 fd88 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>
   d44d4:	2210      	movs	r2, #16
   d44d6:	4620      	mov	r0, r4
   d44d8:	491e      	ldr	r1, [pc, #120]	; (d4554 <_Z11sendUBIDotsv+0x90>)
   d44da:	f000 fffb 	bl	d54d4 <HAL_EEPROM_Get>
    snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", sensor_data.temperatureInC, sensor_data.batteryVoltage);
   d44de:	68a8      	ldr	r0, [r5, #8]
   d44e0:	f003 f88c 	bl	d75fc <__aeabi_f2d>
   d44e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d44e8:	68e8      	ldr	r0, [r5, #12]
   d44ea:	f003 f887 	bl	d75fc <__aeabi_f2d>
   d44ee:	4a1b      	ldr	r2, [pc, #108]	; (d455c <_Z11sendUBIDotsv+0x98>)
   d44f0:	e9cd 0100 	strd	r0, r1, [sp]
   d44f4:	f44f 7100 	mov.w	r1, #512	; 0x200
   d44f8:	a806      	add	r0, sp, #24
   d44fa:	f001 fa31 	bl	d5960 <snprintf>
    Particle.publish("Air-Quality-Hook", data, PRIVATE);
   d44fe:	2200      	movs	r2, #0
   d4500:	7833      	ldrb	r3, [r6, #0]
   d4502:	4917      	ldr	r1, [pc, #92]	; (d4560 <_Z11sendUBIDotsv+0x9c>)
   d4504:	f88d 2000 	strb.w	r2, [sp]
   d4508:	a804      	add	r0, sp, #16
   d450a:	aa06      	add	r2, sp, #24
   d450c:	f7ff fe08 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4510:	a805      	add	r0, sp, #20
   d4512:	f7ff fefb 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4516:	3464      	adds	r4, #100	; 0x64
    waitUntil(PublishDelayFunction);                                  // Space out the sends
   d4518:	f7ff fea8 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
  char data[512];

  for (int i = 0; i < 4; i++) {
   d451c:	f240 1397 	movw	r3, #407	; 0x197
   d4520:	429c      	cmp	r4, r3
   d4522:	d1d5      	bne.n	d44d0 <_Z11sendUBIDotsv+0xc>
    sensor_data = EEPROM.get(7 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
    snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", sensor_data.temperatureInC, sensor_data.batteryVoltage);
    Particle.publish("Air-Quality-Hook", data, PRIVATE);
    waitUntil(PublishDelayFunction);                                  // Space out the sends
  }
  currentCountTime = Time.now();
   d4524:	f002 fa7c 	bl	d6a20 <_ZN9TimeClass3nowEv>
   d4528:	4c0e      	ldr	r4, [pc, #56]	; (d4564 <_Z11sendUBIDotsv+0xa0>)
   d452a:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d452c:	f002 fd5a 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4530:	7821      	ldrb	r1, [r4, #0]
   d4532:	2003      	movs	r0, #3
   d4534:	f000 ffc6 	bl	d54c4 <HAL_EEPROM_Write>
   d4538:	f000 ffa4 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d453c:	4b0a      	ldr	r3, [pc, #40]	; (d4568 <_Z11sendUBIDotsv+0xa4>)
   d453e:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d4540:	f002 fa76 	bl	d6a30 <_ZN9TimeClass4hourEv>
   d4544:	4b09      	ldr	r3, [pc, #36]	; (d456c <_Z11sendUBIDotsv+0xa8>)
   d4546:	6018      	str	r0, [r3, #0]
  inTransit = true;
   d4548:	4b09      	ldr	r3, [pc, #36]	; (d4570 <_Z11sendUBIDotsv+0xac>)
   d454a:	2201      	movs	r2, #1
   d454c:	701a      	strb	r2, [r3, #0]
}
   d454e:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
   d4552:	bd70      	pop	{r4, r5, r6, pc}
   d4554:	2003e2d0 	.word	0x2003e2d0
   d4558:	2003e35c 	.word	0x2003e35c
   d455c:	000d89d6 	.word	0x000d89d6
   d4560:	000d89fd 	.word	0x000d89fd
   d4564:	2003e2b4 	.word	0x2003e2b4
   d4568:	2003e344 	.word	0x2003e344
   d456c:	2003e2e8 	.word	0x2003e2e8
   d4570:	2003e2e0 	.word	0x2003e2e0

000d4574 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                          // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d4574:	b530      	push	{r4, r5, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d4576:	460c      	mov	r4, r1
  currentHourlyPeriod = Time.hour();
  inTransit = true;
}

void UbidotsHandler(const char *event, const char *data)                          // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d4578:	b085      	sub	sp, #20
   d457a:	4d21      	ldr	r5, [pc, #132]	; (d4600 <_Z14UbidotsHandlerPKcS0_+0x8c>)
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d457c:	b951      	cbnz	r1, d4594 <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
   d457e:	782b      	ldrb	r3, [r5, #0]
   d4580:	2b00      	cmp	r3, #0
   d4582:	d03a      	beq.n	d45fa <_Z14UbidotsHandlerPKcS0_+0x86>
      waitUntil(PublishDelayFunction);
   d4584:	f7ff fe72 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d4588:	4b1e      	ldr	r3, [pc, #120]	; (d4604 <_Z14UbidotsHandlerPKcS0_+0x90>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d458a:	4a1f      	ldr	r2, [pc, #124]	; (d4608 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d458c:	781b      	ldrb	r3, [r3, #0]
   d458e:	f88d 4000 	strb.w	r4, [sp]
   d4592:	e02b      	b.n	d45ec <_Z14UbidotsHandlerPKcS0_+0x78>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d4594:	4608      	mov	r0, r1
   d4596:	f003 fbcd 	bl	d7d34 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d459a:	38c8      	subs	r0, #200	; 0xc8
   d459c:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
   d459e:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d45a0:	d81b      	bhi.n	d45da <_Z14UbidotsHandlerPKcS0_+0x66>
  {
    if (verboseMode) {
   d45a2:	b173      	cbz	r3, d45c2 <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(PublishDelayFunction);
   d45a4:	f7ff fe62 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d45a8:	4b16      	ldr	r3, [pc, #88]	; (d4604 <_Z14UbidotsHandlerPKcS0_+0x90>)
      Particle.publish("State", "Response Received", PRIVATE);
   d45aa:	4918      	ldr	r1, [pc, #96]	; (d460c <_Z14UbidotsHandlerPKcS0_+0x98>)
   d45ac:	781b      	ldrb	r3, [r3, #0]
   d45ae:	2200      	movs	r2, #0
   d45b0:	f88d 2000 	strb.w	r2, [sp]
   d45b4:	a802      	add	r0, sp, #8
   d45b6:	4a16      	ldr	r2, [pc, #88]	; (d4610 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d45b8:	f7ff fdb2 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d45bc:	a803      	add	r0, sp, #12
   d45be:	f7ff fea5 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
    }
    inTransit = false;    
   d45c2:	4b14      	ldr	r3, [pc, #80]	; (d4614 <_Z14UbidotsHandlerPKcS0_+0xa0>)
   d45c4:	2200      	movs	r2, #0
   d45c6:	701a      	strb	r2, [r3, #0]
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
   d45c8:	f002 fd0c 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>
   d45cc:	f002 fa28 	bl	d6a20 <_ZN9TimeClass3nowEv>
   d45d0:	b2c1      	uxtb	r1, r0
   d45d2:	2003      	movs	r0, #3
   d45d4:	f000 ff76 	bl	d54c4 <HAL_EEPROM_Write>
   d45d8:	e00f      	b.n	d45fa <_Z14UbidotsHandlerPKcS0_+0x86>
  }
  else if (verboseMode) {
   d45da:	b173      	cbz	r3, d45fa <_Z14UbidotsHandlerPKcS0_+0x86>
    waitUntil(PublishDelayFunction);      
   d45dc:	f7ff fe46 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d45e0:	4b08      	ldr	r3, [pc, #32]	; (d4604 <_Z14UbidotsHandlerPKcS0_+0x90>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d45e2:	2200      	movs	r2, #0
   d45e4:	781b      	ldrb	r3, [r3, #0]
   d45e6:	f88d 2000 	strb.w	r2, [sp]
   d45ea:	4622      	mov	r2, r4
   d45ec:	a802      	add	r0, sp, #8
   d45ee:	490a      	ldr	r1, [pc, #40]	; (d4618 <_Z14UbidotsHandlerPKcS0_+0xa4>)
   d45f0:	f7ff fd96 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d45f4:	a803      	add	r0, sp, #12
   d45f6:	f7ff fe89 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
   d45fa:	b005      	add	sp, #20
   d45fc:	bd30      	pop	{r4, r5, pc}
   d45fe:	bf00      	nop
   d4600:	2003e341 	.word	0x2003e341
   d4604:	2003e35c 	.word	0x2003e35c
   d4608:	000d8a0e 	.word	0x000d8a0e
   d460c:	000d8a23 	.word	0x000d8a23
   d4610:	000d8ab6 	.word	0x000d8ab6
   d4614:	2003e2e0 	.word	0x2003e2e0
   d4618:	000d8a16 	.word	0x000d8a16

000d461c <_Z15transitionStatev>:

void transitionState(void) {                                                      // This function publishes change of state.
   d461c:	b530      	push	{r4, r5, lr}
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d461e:	4d12      	ldr	r5, [pc, #72]	; (d4668 <_Z15transitionStatev+0x4c>)
   d4620:	4c12      	ldr	r4, [pc, #72]	; (d466c <_Z15transitionStatev+0x50>)
    waitUntil(PublishDelayFunction);      
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }
}

void transitionState(void) {                                                      // This function publishes change of state.
   d4622:	b095      	sub	sp, #84	; 0x54
  waitUntil(PublishDelayFunction);
   d4624:	f7ff fe22 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d4628:	4911      	ldr	r1, [pc, #68]	; (d4670 <_Z15transitionStatev+0x54>)
   d462a:	782a      	ldrb	r2, [r5, #0]
   d462c:	7820      	ldrb	r0, [r4, #0]
   d462e:	232c      	movs	r3, #44	; 0x2c
   d4630:	fb03 1202 	mla	r2, r3, r2, r1
   d4634:	9200      	str	r2, [sp, #0]
   d4636:	fb03 1300 	mla	r3, r3, r0, r1
   d463a:	4a0e      	ldr	r2, [pc, #56]	; (d4674 <_Z15transitionStatev+0x58>)
   d463c:	2140      	movs	r1, #64	; 0x40
   d463e:	a804      	add	r0, sp, #16
   d4640:	f001 f98e 	bl	d5960 <snprintf>
  oldState = state;
   d4644:	782b      	ldrb	r3, [r5, #0]
   d4646:	7023      	strb	r3, [r4, #0]
   d4648:	4b0b      	ldr	r3, [pc, #44]	; (d4678 <_Z15transitionStatev+0x5c>)
  Particle.publish("State", stateTransitionString, PRIVATE);
   d464a:	490c      	ldr	r1, [pc, #48]	; (d467c <_Z15transitionStatev+0x60>)
   d464c:	781b      	ldrb	r3, [r3, #0]
   d464e:	2200      	movs	r2, #0
   d4650:	f88d 2000 	strb.w	r2, [sp]
   d4654:	a802      	add	r0, sp, #8
   d4656:	aa04      	add	r2, sp, #16
   d4658:	f7ff fd62 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d465c:	a803      	add	r0, sp, #12
   d465e:	f7ff fe55 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4662:	b015      	add	sp, #84	; 0x54
   d4664:	bd30      	pop	{r4, r5, pc}
   d4666:	bf00      	nop
   d4668:	2003e2ec 	.word	0x2003e2ec
   d466c:	2003e340 	.word	0x2003e340
   d4670:	2003e094 	.word	0x2003e094
   d4674:	000d8a29 	.word	0x000d8a29
   d4678:	2003e35c 	.word	0x2003e35c
   d467c:	000d8a23 	.word	0x000d8a23

000d4680 <loop>:
  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}

void loop()
{  
   d4680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (state)  {                                                               // In the main loop, all code execution must take place in a defined state
   d4684:	4ca7      	ldr	r4, [pc, #668]	; (d4924 <loop+0x2a4>)
   d4686:	7823      	ldrb	r3, [r4, #0]
   d4688:	3b01      	subs	r3, #1
  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}

void loop()
{  
   d468a:	b098      	sub	sp, #96	; 0x60
  switch (state)  {                                                               // In the main loop, all code execution must take place in a defined state
   d468c:	2b06      	cmp	r3, #6
   d468e:	f200 820a 	bhi.w	d4aa6 <loop+0x426>
   d4692:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4696:	0007      	.short	0x0007
   d4698:	00700033 	.word	0x00700033
   d469c:	00470101 	.word	0x00470101
   d46a0:	01a5017d 	.word	0x01a5017d
    case IDLE_STATE:                                                              // IDLE State.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d46a4:	4ba0      	ldr	r3, [pc, #640]	; (d4928 <loop+0x2a8>)
   d46a6:	781b      	ldrb	r3, [r3, #0]
   d46a8:	b12b      	cbz	r3, d46b6 <loop+0x36>
   d46aa:	4ba0      	ldr	r3, [pc, #640]	; (d492c <loop+0x2ac>)
   d46ac:	781b      	ldrb	r3, [r3, #0]
   d46ae:	2b01      	cmp	r3, #1
   d46b0:	d001      	beq.n	d46b6 <loop+0x36>
   d46b2:	f7ff ffb3 	bl	d461c <_Z15transitionStatev>
      static int TimePassed = 0;
      
      if (lowPowerModeOn && (millis() - stayAWakeTimeStamp >= stayAwake)) state = NAPPING_STATE;    // If lowPowerMode is turned on, It will move to the napping state. 
   d46b6:	4b9e      	ldr	r3, [pc, #632]	; (d4930 <loop+0x2b0>)
   d46b8:	781b      	ldrb	r3, [r3, #0]
   d46ba:	b14b      	cbz	r3, d46d0 <loop+0x50>
   d46bc:	f000 fee2 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
   d46c0:	4b9c      	ldr	r3, [pc, #624]	; (d4934 <loop+0x2b4>)
   d46c2:	681b      	ldr	r3, [r3, #0]
   d46c4:	1ac0      	subs	r0, r0, r3
   d46c6:	4b9c      	ldr	r3, [pc, #624]	; (d4938 <loop+0x2b8>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	4298      	cmp	r0, r3
   d46cc:	f080 81e3 	bcs.w	d4a96 <loop+0x416>
                                     
      if ((Time.minute() - TimePassed >= sampleRate/60) || Time.hour() != currentHourlyPeriod ) {     // Sample time or the top of the hour
   d46d0:	f002 f9b8 	bl	d6a44 <_ZN9TimeClass6minuteEv>
   d46d4:	4b99      	ldr	r3, [pc, #612]	; (d493c <loop+0x2bc>)
   d46d6:	681a      	ldr	r2, [r3, #0]
   d46d8:	1a80      	subs	r0, r0, r2
   d46da:	4a99      	ldr	r2, [pc, #612]	; (d4940 <loop+0x2c0>)
   d46dc:	213c      	movs	r1, #60	; 0x3c
   d46de:	6812      	ldr	r2, [r2, #0]
   d46e0:	fb92 f2f1 	sdiv	r2, r2, r1
   d46e4:	4290      	cmp	r0, r2
   d46e6:	461d      	mov	r5, r3
   d46e8:	f280 81d8 	bge.w	d4a9c <loop+0x41c>
   d46ec:	f002 f9a0 	bl	d6a30 <_ZN9TimeClass4hourEv>
   d46f0:	4b94      	ldr	r3, [pc, #592]	; (d4944 <loop+0x2c4>)
   d46f2:	681b      	ldr	r3, [r3, #0]
   d46f4:	4298      	cmp	r0, r3
   d46f6:	f040 81d1 	bne.w	d4a9c <loop+0x41c>
   d46fa:	e1d4      	b.n	d4aa6 <loop+0x426>
          TimePassed = Time.minute();
      }
    } break;

    case MEASURING_STATE:                                                         // Measuring State.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d46fc:	4b8a      	ldr	r3, [pc, #552]	; (d4928 <loop+0x2a8>)
   d46fe:	781b      	ldrb	r3, [r3, #0]
   d4700:	b12b      	cbz	r3, d470e <loop+0x8e>
   d4702:	4b8a      	ldr	r3, [pc, #552]	; (d492c <loop+0x2ac>)
   d4704:	781b      	ldrb	r3, [r3, #0]
   d4706:	2b02      	cmp	r3, #2
   d4708:	d001      	beq.n	d470e <loop+0x8e>
   d470a:	f7ff ff87 	bl	d461c <_Z15transitionStatev>
      currentHourlyPeriod = Time.hour();
   d470e:	f002 f98f 	bl	d6a30 <_ZN9TimeClass4hourEv>
   d4712:	4b8c      	ldr	r3, [pc, #560]	; (d4944 <loop+0x2c4>)
   d4714:	6018      	str	r0, [r3, #0]
      if (getMeasurements()) {
   d4716:	f7ff fe65 	bl	d43e4 <_Z15getMeasurementsv>
   d471a:	b328      	cbz	r0, d4768 <loop+0xe8>
        takeMeasurements();
   d471c:	f7ff fd10 	bl	d4140 <_Z16takeMeasurementsv>
        state = REPORTING_DETERMINATION;                     // Get the measurements and move to reporting determination
   d4720:	2303      	movs	r3, #3
   d4722:	e026      	b.n	d4772 <loop+0xf2>
      sendUBIDots();
      state = RESPONSE_WAIT;
      break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4724:	4b80      	ldr	r3, [pc, #512]	; (d4928 <loop+0x2a8>)
   d4726:	781a      	ldrb	r2, [r3, #0]
   d4728:	461d      	mov	r5, r3
   d472a:	2a00      	cmp	r2, #0
   d472c:	f040 80dd 	bne.w	d48ea <loop+0x26a>

      if (!inTransit) {
   d4730:	4b85      	ldr	r3, [pc, #532]	; (d4948 <loop+0x2c8>)
   d4732:	781b      	ldrb	r3, [r3, #0]
   d4734:	2b00      	cmp	r3, #0
   d4736:	f000 80e0 	beq.w	d48fa <loop+0x27a>
   d473a:	f000 fea3 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
          waitUntil(PublishDelayFunction);
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
        }
      } 

      if (millis() - webhookTimeStamp > webhookTimeout) {                         // If device does not respond in 45 Seconds, Then Reset it.
   d473e:	4b83      	ldr	r3, [pc, #524]	; (d494c <loop+0x2cc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	1ac0      	subs	r0, r0, r3
   d4744:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4748:	4298      	cmp	r0, r3
   d474a:	f240 81ac 	bls.w	d4aa6 <loop+0x426>
   d474e:	4b80      	ldr	r3, [pc, #512]	; (d4950 <loop+0x2d0>)
        Particle.publish("spark/device/session/end", "", PRIVATE); 
   d4750:	4980      	ldr	r1, [pc, #512]	; (d4954 <loop+0x2d4>)
   d4752:	781b      	ldrb	r3, [r3, #0]
   d4754:	2200      	movs	r2, #0
   d4756:	f88d 2000 	strb.w	r2, [sp]
   d475a:	a808      	add	r0, sp, #32
   d475c:	4a7e      	ldr	r2, [pc, #504]	; (d4958 <loop+0x2d8>)
   d475e:	f7ff fcdf 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4762:	a809      	add	r0, sp, #36	; 0x24
   d4764:	f7ff fdd2 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4768:	f000 fe8c 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
      if (getMeasurements()) {
        takeMeasurements();
        state = REPORTING_DETERMINATION;                     // Get the measurements and move to reporting determination
      }
      else  {
        resetStartTimeStamp = millis();
   d476c:	4b7b      	ldr	r3, [pc, #492]	; (d495c <loop+0x2dc>)
   d476e:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;                                                      // If we fail to get the measurements we need - go to error state
   d4770:	2306      	movs	r3, #6
   d4772:	7023      	strb	r3, [r4, #0]
   d4774:	e197      	b.n	d4aa6 <loop+0x426>
      }
    break;

    case REPORTING_DETERMINATION:                                                 // Reporting determination state.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4776:	4d6c      	ldr	r5, [pc, #432]	; (d4928 <loop+0x2a8>)
   d4778:	782b      	ldrb	r3, [r5, #0]
   d477a:	b12b      	cbz	r3, d4788 <loop+0x108>
   d477c:	4b6b      	ldr	r3, [pc, #428]	; (d492c <loop+0x2ac>)
   d477e:	781b      	ldrb	r3, [r3, #0]
   d4780:	2b03      	cmp	r3, #3
   d4782:	d001      	beq.n	d4788 <loop+0x108>
   d4784:	f7ff ff4a 	bl	d461c <_Z15transitionStatev>
       static float lastTemperatureInC = 0;

      // Four possible outcomes: 1) Top of the hour - report, 2) Big change in Temp - report and move to rapid sampling, 3) small change in Temp - report and normal sampling, 4) No change in temp - back to Idle
      if (Time.hour() != currentHourlyPeriod) {                                   // Case 1 - If it is a new hour - report
   d4788:	f002 f952 	bl	d6a30 <_ZN9TimeClass4hourEv>
   d478c:	4b6d      	ldr	r3, [pc, #436]	; (d4944 <loop+0x2c4>)
   d478e:	681a      	ldr	r2, [r3, #0]
   d4790:	4290      	cmp	r0, r2
   d4792:	461e      	mov	r6, r3
   d4794:	d018      	beq.n	d47c8 <loop+0x148>
        stayAwake = stayAwakeLong;                                                // Stay awake longer at the hour - helps if you need to publish updates to deployed devices
   d4796:	4b68      	ldr	r3, [pc, #416]	; (d4938 <loop+0x2b8>)
   d4798:	4a71      	ldr	r2, [pc, #452]	; (d4960 <loop+0x2e0>)
   d479a:	601a      	str	r2, [r3, #0]
        if (verboseMode) {
   d479c:	782b      	ldrb	r3, [r5, #0]
   d479e:	b173      	cbz	r3, d47be <loop+0x13e>
          waitUntil(PublishDelayFunction);
   d47a0:	f7ff fd64 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d47a4:	4b6a      	ldr	r3, [pc, #424]	; (d4950 <loop+0x2d0>)
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
   d47a6:	496f      	ldr	r1, [pc, #444]	; (d4964 <loop+0x2e4>)
   d47a8:	781b      	ldrb	r3, [r3, #0]
   d47aa:	2200      	movs	r2, #0
   d47ac:	f88d 2000 	strb.w	r2, [sp]
   d47b0:	a808      	add	r0, sp, #32
   d47b2:	4a6d      	ldr	r2, [pc, #436]	; (d4968 <loop+0x2e8>)
   d47b4:	f7ff fcb4 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d47b8:	a809      	add	r0, sp, #36	; 0x24
   d47ba:	f7ff fda7 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        currentHourlyPeriod = Time.hour();
   d47be:	f002 f937 	bl	d6a30 <_ZN9TimeClass4hourEv>
        state = REPORTING_STATE;
   d47c2:	2304      	movs	r3, #4
        stayAwake = stayAwakeLong;                                                // Stay awake longer at the hour - helps if you need to publish updates to deployed devices
        if (verboseMode) {
          waitUntil(PublishDelayFunction);
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
        }
        currentHourlyPeriod = Time.hour();
   d47c4:	6030      	str	r0, [r6, #0]
   d47c6:	e7d4      	b.n	d4772 <loop+0xf2>
        state = REPORTING_STATE;
        break;                                                                    // Leave this case and move on
      }
      if (abs(temperatureInC - lastTemperatureInC) >= tempChangeThreshold) {      // Case 2 - Big change in Temp - report and move to rapid sampling
   d47c8:	4a68      	ldr	r2, [pc, #416]	; (d496c <loop+0x2ec>)
   d47ca:	4b69      	ldr	r3, [pc, #420]	; (d4970 <loop+0x2f0>)
   d47cc:	edd2 6a00 	vldr	s13, [r2]
   d47d0:	ed93 7a00 	vldr	s14, [r3]
   d47d4:	f8df 8168 	ldr.w	r8, [pc, #360]	; d4940 <loop+0x2c0>
   d47d8:	ee76 7ac7 	vsub.f32	s15, s13, s14
   d47dc:	4617      	mov	r7, r2
   d47de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d47e2:	461e      	mov	r6, r3
   d47e4:	ee17 1a90 	vmov	r1, s15
   d47e8:	2900      	cmp	r1, #0
   d47ea:	bfb8      	it	lt
   d47ec:	4249      	neglt	r1, r1
   d47ee:	ee07 1a90 	vmov	s15, r1
   d47f2:	4960      	ldr	r1, [pc, #384]	; (d4974 <loop+0x2f4>)
   d47f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d47f8:	ed91 6a00 	vldr	s12, [r1]
   d47fc:	eef4 7ac6 	vcmpe.f32	s15, s12
   d4800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4804:	db17      	blt.n	d4836 <loop+0x1b6>
        if (verboseMode) {
   d4806:	782b      	ldrb	r3, [r5, #0]
   d4808:	b173      	cbz	r3, d4828 <loop+0x1a8>
          waitUntil(PublishDelayFunction);
   d480a:	f7ff fd2f 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d480e:	4b50      	ldr	r3, [pc, #320]	; (d4950 <loop+0x2d0>)
          Particle.publish("State", "Big Change - Rapid & Reporting", PRIVATE);   // Report for diagnostics
   d4810:	4954      	ldr	r1, [pc, #336]	; (d4964 <loop+0x2e4>)
   d4812:	781b      	ldrb	r3, [r3, #0]
   d4814:	2200      	movs	r2, #0
   d4816:	f88d 2000 	strb.w	r2, [sp]
   d481a:	a808      	add	r0, sp, #32
   d481c:	4a56      	ldr	r2, [pc, #344]	; (d4978 <loop+0x2f8>)
   d481e:	f7ff fc7f 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4822:	a809      	add	r0, sp, #36	; 0x24
   d4824:	f7ff fd72 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d4828:	683b      	ldr	r3, [r7, #0]
   d482a:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;                                                  
   d482c:	2304      	movs	r3, #4
   d482e:	7023      	strb	r3, [r4, #0]
        sampleRate = rapidSamplePeriodSeconds;                                    // Move to rapid sampling
   d4830:	f44f 7396 	mov.w	r3, #300	; 0x12c
   d4834:	e01b      	b.n	d486e <loop+0x1ee>
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - small change in Temp - report and normal sampling
   d4836:	eef4 6a47 	vcmp.f32	s13, s14
   d483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        if (verboseMode) {
   d483e:	782b      	ldrb	r3, [r5, #0]
        lastTemperatureInC = temperatureInC;
        state = REPORTING_STATE;                                                  
        sampleRate = rapidSamplePeriodSeconds;                                    // Move to rapid sampling
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - small change in Temp - report and normal sampling
   d4840:	d018      	beq.n	d4874 <loop+0x1f4>
        if (verboseMode) {
   d4842:	b173      	cbz	r3, d4862 <loop+0x1e2>
          waitUntil(PublishDelayFunction);
   d4844:	f7ff fd12 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d4848:	4b41      	ldr	r3, [pc, #260]	; (d4950 <loop+0x2d0>)
          Particle.publish("State", "Change detected - Reporting", PRIVATE);      // Report for diagnostics
   d484a:	4946      	ldr	r1, [pc, #280]	; (d4964 <loop+0x2e4>)
   d484c:	781b      	ldrb	r3, [r3, #0]
   d484e:	2200      	movs	r2, #0
   d4850:	f88d 2000 	strb.w	r2, [sp]
   d4854:	a808      	add	r0, sp, #32
   d4856:	4a49      	ldr	r2, [pc, #292]	; (d497c <loop+0x2fc>)
   d4858:	f7ff fc62 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d485c:	a809      	add	r0, sp, #36	; 0x24
   d485e:	f7ff fd55 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d4862:	683b      	ldr	r3, [r7, #0]
   d4864:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;
   d4866:	2304      	movs	r3, #4
   d4868:	7023      	strb	r3, [r4, #0]
        sampleRate = normalSamplePeriodSeconds;                                   // Small but non-zero change - move to normal sampling
   d486a:	f44f 7316 	mov.w	r3, #600	; 0x258
   d486e:	f8c8 3000 	str.w	r3, [r8]
        break;  
   d4872:	e118      	b.n	d4aa6 <loop+0x426>
      }

      else {                                                                      // Case 4 - No change in temp - go back to idle
        if (verboseMode) {
   d4874:	b173      	cbz	r3, d4894 <loop+0x214>
          waitUntil(PublishDelayFunction);
   d4876:	f7ff fcf9 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d487a:	4b35      	ldr	r3, [pc, #212]	; (d4950 <loop+0x2d0>)
          Particle.publish("State", "No Change - Idle", PRIVATE);                 // Report for diagnostics
   d487c:	4939      	ldr	r1, [pc, #228]	; (d4964 <loop+0x2e4>)
   d487e:	781b      	ldrb	r3, [r3, #0]
   d4880:	2200      	movs	r2, #0
   d4882:	f88d 2000 	strb.w	r2, [sp]
   d4886:	a808      	add	r0, sp, #32
   d4888:	4a3d      	ldr	r2, [pc, #244]	; (d4980 <loop+0x300>)
   d488a:	f7ff fc49 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d488e:	a809      	add	r0, sp, #36	; 0x24
   d4890:	f7ff fd3c 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        state = IDLE_STATE;                                                      
   d4894:	2301      	movs	r3, #1
   d4896:	e7e7      	b.n	d4868 <loop+0x1e8>
        sampleRate = normalSamplePeriodSeconds;                                   // Small but non-zero change - move to normal sampling
      }
    } break;

    case REPORTING_STATE:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4898:	4b23      	ldr	r3, [pc, #140]	; (d4928 <loop+0x2a8>)
   d489a:	781a      	ldrb	r2, [r3, #0]
   d489c:	461d      	mov	r5, r3
   d489e:	b12a      	cbz	r2, d48ac <loop+0x22c>
   d48a0:	4b22      	ldr	r3, [pc, #136]	; (d492c <loop+0x2ac>)
   d48a2:	781b      	ldrb	r3, [r3, #0]
   d48a4:	2b04      	cmp	r3, #4
   d48a6:	d001      	beq.n	d48ac <loop+0x22c>
   d48a8:	f7ff feb8 	bl	d461c <_Z15transitionStatev>

      if (Time.hour() == 12) Particle.syncTime();                                 // SET CLOCK EACH DAY AT 12 NOON.
   d48ac:	f002 f8c0 	bl	d6a30 <_ZN9TimeClass4hourEv>
   d48b0:	280c      	cmp	r0, #12
   d48b2:	d105      	bne.n	d48c0 <loop+0x240>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48b4:	f000 ffac 	bl	d5810 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d48b8:	b110      	cbz	r0, d48c0 <loop+0x240>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d48ba:	2000      	movs	r0, #0
   d48bc:	f000 ffc8 	bl	d5850 <spark_sync_time>

      if (verboseMode) {
   d48c0:	782b      	ldrb	r3, [r5, #0]
   d48c2:	b173      	cbz	r3, d48e2 <loop+0x262>
        waitUntil(PublishDelayFunction);
   d48c4:	f7ff fcd2 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d48c8:	4b21      	ldr	r3, [pc, #132]	; (d4950 <loop+0x2d0>)
        Particle.publish("Temperature", temperatureString, PRIVATE);
   d48ca:	492e      	ldr	r1, [pc, #184]	; (d4984 <loop+0x304>)
   d48cc:	781b      	ldrb	r3, [r3, #0]
   d48ce:	2200      	movs	r2, #0
   d48d0:	f88d 2000 	strb.w	r2, [sp]
   d48d4:	a808      	add	r0, sp, #32
   d48d6:	4a2c      	ldr	r2, [pc, #176]	; (d4988 <loop+0x308>)
   d48d8:	f7ff fc22 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d48dc:	a809      	add	r0, sp, #36	; 0x24
   d48de:	f7ff fd15 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      sendUBIDots();
   d48e2:	f7ff fdef 	bl	d44c4 <_Z11sendUBIDotsv>
      state = RESPONSE_WAIT;
   d48e6:	2305      	movs	r3, #5
   d48e8:	e743      	b.n	d4772 <loop+0xf2>
      break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d48ea:	4b10      	ldr	r3, [pc, #64]	; (d492c <loop+0x2ac>)
   d48ec:	781b      	ldrb	r3, [r3, #0]
   d48ee:	2b05      	cmp	r3, #5
   d48f0:	f43f af1e 	beq.w	d4730 <loop+0xb0>
   d48f4:	f7ff fe92 	bl	d461c <_Z15transitionStatev>
   d48f8:	e71a      	b.n	d4730 <loop+0xb0>

      if (!inTransit) {
        state = IDLE_STATE;                                                       // This checks for the response from UBIDOTS. 
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
   d48fa:	782d      	ldrb	r5, [r5, #0]

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.

      if (!inTransit) {
        state = IDLE_STATE;                                                       // This checks for the response from UBIDOTS. 
   d48fc:	2301      	movs	r3, #1
   d48fe:	7023      	strb	r3, [r4, #0]
        if (!verboseMode) {                                                       // Abbreviated messaging for non-verbose mode
   d4900:	2d00      	cmp	r5, #0
   d4902:	f47f af1a 	bne.w	d473a <loop+0xba>
          waitUntil(PublishDelayFunction);
   d4906:	f7ff fcb1 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d490a:	4b11      	ldr	r3, [pc, #68]	; (d4950 <loop+0x2d0>)
          Particle.publish("State", "Data Sent / Response Received", PRIVATE);    // Lets everyone know data was send successfully
   d490c:	4a1f      	ldr	r2, [pc, #124]	; (d498c <loop+0x30c>)
   d490e:	781b      	ldrb	r3, [r3, #0]
   d4910:	4914      	ldr	r1, [pc, #80]	; (d4964 <loop+0x2e4>)
   d4912:	f88d 5000 	strb.w	r5, [sp]
   d4916:	a808      	add	r0, sp, #32
   d4918:	f7ff fc02 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d491c:	a809      	add	r0, sp, #36	; 0x24
   d491e:	f7ff fcf5 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4922:	e70a      	b.n	d473a <loop+0xba>
   d4924:	2003e2ec 	.word	0x2003e2ec
   d4928:	2003e341 	.word	0x2003e341
   d492c:	2003e340 	.word	0x2003e340
   d4930:	2003e1f4 	.word	0x2003e1f4
   d4934:	2003e328 	.word	0x2003e328
   d4938:	2003e2c8 	.word	0x2003e2c8
   d493c:	2003e2f8 	.word	0x2003e2f8
   d4940:	2003e08c 	.word	0x2003e08c
   d4944:	2003e2e8 	.word	0x2003e2e8
   d4948:	2003e2e0 	.word	0x2003e2e0
   d494c:	2003e344 	.word	0x2003e344
   d4950:	2003e35c 	.word	0x2003e35c
   d4954:	000d8ac8 	.word	0x000d8ac8
   d4958:	000d8cf4 	.word	0x000d8cf4
   d495c:	2003e2cc 	.word	0x2003e2cc
   d4960:	00015f90 	.word	0x00015f90
   d4964:	000d8a23 	.word	0x000d8a23
   d4968:	000d8a3e 	.word	0x000d8a3e
   d496c:	2003e2f4 	.word	0x2003e2f4
   d4970:	2003e360 	.word	0x2003e360
   d4974:	2003e090 	.word	0x2003e090
   d4978:	000d8a52 	.word	0x000d8a52
   d497c:	000d8a71 	.word	0x000d8a71
   d4980:	000d8a8d 	.word	0x000d8a8d
   d4984:	000d8a9e 	.word	0x000d8a9e
   d4988:	2003e2b8 	.word	0x2003e2b8
   d498c:	000d8aaa 	.word	0x000d8aaa
        state = ERROR_STATE;                                                      // Send to the error state - webhook failed
      }
      break;

    case ERROR_STATE: // This state RESETS the devices.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4990:	4b46      	ldr	r3, [pc, #280]	; (d4aac <loop+0x42c>)
   d4992:	781b      	ldrb	r3, [r3, #0]
   d4994:	b12b      	cbz	r3, d49a2 <loop+0x322>
   d4996:	4b46      	ldr	r3, [pc, #280]	; (d4ab0 <loop+0x430>)
   d4998:	781b      	ldrb	r3, [r3, #0]
   d499a:	2b06      	cmp	r3, #6
   d499c:	d001      	beq.n	d49a2 <loop+0x322>
   d499e:	f7ff fe3d 	bl	d461c <_Z15transitionStatev>
   d49a2:	f000 fd6f 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetStartTimeStamp >= resetDelayTime) {
   d49a6:	4b43      	ldr	r3, [pc, #268]	; (d4ab4 <loop+0x434>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	1ac0      	subs	r0, r0, r3
   d49ac:	f247 532f 	movw	r3, #29999	; 0x752f
   d49b0:	4298      	cmp	r0, r3
   d49b2:	d978      	bls.n	d4aa6 <loop+0x426>
        waitUntil(PublishDelayFunction);
   d49b4:	f7ff fc5a 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d49b8:	4b3f      	ldr	r3, [pc, #252]	; (d4ab8 <loop+0x438>)
        Particle.publish("Error", "Resetting in 30 seconds", PRIVATE);            // Reset the device and hope that fixes it
   d49ba:	4940      	ldr	r1, [pc, #256]	; (d4abc <loop+0x43c>)
   d49bc:	781b      	ldrb	r3, [r3, #0]
   d49be:	2200      	movs	r2, #0
   d49c0:	f88d 2000 	strb.w	r2, [sp]
   d49c4:	a808      	add	r0, sp, #32
   d49c6:	4a3e      	ldr	r2, [pc, #248]	; (d4ac0 <loop+0x440>)
   d49c8:	f7ff fbaa 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d49cc:	a809      	add	r0, sp, #36	; 0x24
   d49ce:	f7ff fc9d 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                                              // Get the message out before resetting
   d49d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d49d6:	f000 ffdb 	bl	d5990 <delay>
        System.reset();
   d49da:	f001 ff75 	bl	d68c8 <_ZN11SystemClass5resetEv>
   d49de:	e062      	b.n	d4aa6 <loop+0x426>
      }
      break;

    case NAPPING_STATE: { // This state puts the device to sleep mode
      char data[64];
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d49e0:	4b32      	ldr	r3, [pc, #200]	; (d4aac <loop+0x42c>)
   d49e2:	781b      	ldrb	r3, [r3, #0]
   d49e4:	b12b      	cbz	r3, d49f2 <loop+0x372>
   d49e6:	4b32      	ldr	r3, [pc, #200]	; (d4ab0 <loop+0x430>)
   d49e8:	781b      	ldrb	r3, [r3, #0]
   d49ea:	2b07      	cmp	r3, #7
   d49ec:	d001      	beq.n	d49f2 <loop+0x372>
   d49ee:	f7ff fe15 	bl	d461c <_Z15transitionStatev>

      stayAwake = stayAwakeShort;                                                 // Don't need to wake for long when we are just sampling
   d49f2:	4b34      	ldr	r3, [pc, #208]	; (d4ac4 <loop+0x444>)
   d49f4:	f241 3288 	movw	r2, #5000	; 0x1388
   d49f8:	601a      	str	r2, [r3, #0]
      int wakeInSeconds = constrain(sampleRate - Time.now() % sampleRate, 1, sampleRate); // Calculate the seconds to the next sample
   d49fa:	f002 f811 	bl	d6a20 <_ZN9TimeClass3nowEv>
   d49fe:	4b32      	ldr	r3, [pc, #200]	; (d4ac8 <loop+0x448>)
   d4a00:	681d      	ldr	r5, [r3, #0]
   d4a02:	fb90 f3f5 	sdiv	r3, r0, r5
   d4a06:	fb03 0015 	mls	r0, r3, r5, r0
   d4a0a:	1a28      	subs	r0, r5, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d4a0c:	2800      	cmp	r0, #0
   d4a0e:	dd03      	ble.n	d4a18 <loop+0x398>
   d4a10:	4285      	cmp	r5, r0
   d4a12:	bfa8      	it	ge
   d4a14:	4605      	movge	r5, r0
   d4a16:	e000      	b.n	d4a1a <loop+0x39a>
   d4a18:	2501      	movs	r5, #1
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4a1a:	f000 fef9 	bl	d5810 <spark_cloud_flag_connected>
   d4a1e:	4f26      	ldr	r7, [pc, #152]	; (d4ab8 <loop+0x438>)
      
      if (Particle.connected()) {
   d4a20:	b198      	cbz	r0, d4a4a <loop+0x3ca>
        snprintf(data,sizeof(data),"Going to take a %i second nap", wakeInSeconds);
   d4a22:	462b      	mov	r3, r5
   d4a24:	4a29      	ldr	r2, [pc, #164]	; (d4acc <loop+0x44c>)
   d4a26:	2140      	movs	r1, #64	; 0x40
   d4a28:	a808      	add	r0, sp, #32
   d4a2a:	f000 ff99 	bl	d5960 <snprintf>
        waitUntil(PublishDelayFunction);
   d4a2e:	f7ff fc1d 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a32:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a34:	783b      	ldrb	r3, [r7, #0]
        Particle.publish("Napping", data, PRIVATE);
   d4a36:	4926      	ldr	r1, [pc, #152]	; (d4ad0 <loop+0x450>)
   d4a38:	f88d 2000 	strb.w	r2, [sp]
   d4a3c:	a806      	add	r0, sp, #24
   d4a3e:	aa08      	add	r2, sp, #32
   d4a40:	f7ff fb6e 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4a44:	a807      	add	r0, sp, #28
   d4a46:	f7ff fc61 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a4a:	4b22      	ldr	r3, [pc, #136]	; (d4ad4 <loop+0x454>)
   d4a4c:	681a      	ldr	r2, [r3, #0]
   d4a4e:	2308      	movs	r3, #8
   d4a50:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4a54:	ab18      	add	r3, sp, #96	; 0x60
   d4a56:	2601      	movs	r6, #1
   d4a58:	f803 6d4b 	strb.w	r6, [r3, #-75]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4a5c:	f10d 0116 	add.w	r1, sp, #22
   d4a60:	a806      	add	r0, sp, #24
   d4a62:	9202      	str	r2, [sp, #8]
   d4a64:	9501      	str	r5, [sp, #4]
   d4a66:	4632      	mov	r2, r6
   d4a68:	9600      	str	r6, [sp, #0]
   d4a6a:	f001 ff47 	bl	d68fc <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4a6e:	f000 fec7 	bl	d5800 <spark_cloud_flag_connect>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a72:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a74:	783b      	ldrb	r3, [r7, #0]
      }
      
      System.sleep(D8, RISING, wakeInSeconds);                                    // This is a light sleep but all we can do until we put an external clock in
      Particle.connect();                                                         // We need to connect and transmit data each time - can move to sample and hold in the future
      Particle.publish("WokeUp","From Sleep",PRIVATE);
   d4a76:	4918      	ldr	r1, [pc, #96]	; (d4ad8 <loop+0x458>)
   d4a78:	f88d 2000 	strb.w	r2, [sp]
   d4a7c:	a806      	add	r0, sp, #24
   d4a7e:	4a17      	ldr	r2, [pc, #92]	; (d4adc <loop+0x45c>)
   d4a80:	f7ff fb4e 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4a84:	a807      	add	r0, sp, #28
   d4a86:	f7ff fc41 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a8a:	f000 fcfb 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
   d4a8e:	4b14      	ldr	r3, [pc, #80]	; (d4ae0 <loop+0x460>)
      state = IDLE_STATE;
   d4a90:	7026      	strb	r6, [r4, #0]
      }
      
      System.sleep(D8, RISING, wakeInSeconds);                                    // This is a light sleep but all we can do until we put an external clock in
      Particle.connect();                                                         // We need to connect and transmit data each time - can move to sample and hold in the future
      Particle.publish("WokeUp","From Sleep",PRIVATE);
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
   d4a92:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
    } break; 
  }
}
   d4a94:	e007      	b.n	d4aa6 <loop+0x426>
    case IDLE_STATE:                                                              // IDLE State.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
      static int TimePassed = 0;
      
      if (lowPowerModeOn && (millis() - stayAWakeTimeStamp >= stayAwake)) state = NAPPING_STATE;    // If lowPowerMode is turned on, It will move to the napping state. 
   d4a96:	2307      	movs	r3, #7
   d4a98:	7023      	strb	r3, [r4, #0]
   d4a9a:	e619      	b.n	d46d0 <loop+0x50>
                                     
      if ((Time.minute() - TimePassed >= sampleRate/60) || Time.hour() != currentHourlyPeriod ) {     // Sample time or the top of the hour
          state = MEASURING_STATE;
   d4a9c:	2302      	movs	r3, #2
   d4a9e:	7023      	strb	r3, [r4, #0]
          TimePassed = Time.minute();
   d4aa0:	f001 ffd0 	bl	d6a44 <_ZN9TimeClass6minuteEv>
   d4aa4:	6028      	str	r0, [r5, #0]
      Particle.publish("WokeUp","From Sleep",PRIVATE);
      stayAWakeTimeStamp = millis();                                              // Start the clock on how long we are awake
      state = IDLE_STATE;
    } break; 
  }
}
   d4aa6:	b018      	add	sp, #96	; 0x60
   d4aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4aac:	2003e341 	.word	0x2003e341
   d4ab0:	2003e340 	.word	0x2003e340
   d4ab4:	2003e2cc 	.word	0x2003e2cc
   d4ab8:	2003e35c 	.word	0x2003e35c
   d4abc:	000d8af9 	.word	0x000d8af9
   d4ac0:	000d8ae1 	.word	0x000d8ae1
   d4ac4:	2003e2c8 	.word	0x2003e2c8
   d4ac8:	2003e08c 	.word	0x2003e08c
   d4acc:	000d8aff 	.word	0x000d8aff
   d4ad0:	000d8b1d 	.word	0x000d8b1d
   d4ad4:	2003e33c 	.word	0x2003e33c
   d4ad8:	000d8b30 	.word	0x000d8b30
   d4adc:	000d8b25 	.word	0x000d8b25
   d4ae0:	2003e328 	.word	0x2003e328

000d4ae4 <_Z7sendNow6String>:
  Particle.publish("State", stateTransitionString, PRIVATE);
}


bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d4ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4ae6:	4911      	ldr	r1, [pc, #68]	; (d4b2c <_Z7sendNow6String+0x48>)
   d4ae8:	4604      	mov	r4, r0
   d4aea:	f001 febe 	bl	d686a <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d4aee:	b198      	cbz	r0, d4b18 <_Z7sendNow6String+0x34>
    state = REPORTING_STATE;                                                      // Set the state to reporting
   d4af0:	4b0f      	ldr	r3, [pc, #60]	; (d4b30 <_Z7sendNow6String+0x4c>)
   d4af2:	2204      	movs	r2, #4
   d4af4:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d4af6:	f7ff fbb9 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d4afa:	4b0e      	ldr	r3, [pc, #56]	; (d4b34 <_Z7sendNow6String+0x50>)
    Particle.publish("Function", "Command accepted - reporting now",PRIVATE);     // Acknowledge receipt
   d4afc:	490e      	ldr	r1, [pc, #56]	; (d4b38 <_Z7sendNow6String+0x54>)
   d4afe:	781b      	ldrb	r3, [r3, #0]
   d4b00:	2200      	movs	r2, #0
   d4b02:	f88d 2000 	strb.w	r2, [sp]
   d4b06:	a802      	add	r0, sp, #8
   d4b08:	4a0c      	ldr	r2, [pc, #48]	; (d4b3c <_Z7sendNow6String+0x58>)
   d4b0a:	f7ff fb09 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4b0e:	a803      	add	r0, sp, #12
   d4b10:	f7ff fbfc 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b14:	2001      	movs	r0, #1
   d4b16:	e006      	b.n	d4b26 <_Z7sendNow6String+0x42>
   d4b18:	4909      	ldr	r1, [pc, #36]	; (d4b40 <_Z7sendNow6String+0x5c>)
   d4b1a:	4620      	mov	r0, r4
   d4b1c:	f001 fea5 	bl	d686a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d4b20:	3000      	adds	r0, #0
   d4b22:	bf18      	it	ne
   d4b24:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d4b26:	b004      	add	sp, #16
   d4b28:	bd10      	pop	{r4, pc}
   d4b2a:	bf00      	nop
   d4b2c:	000d8c62 	.word	0x000d8c62
   d4b30:	2003e2ec 	.word	0x2003e2ec
   d4b34:	2003e35c 	.word	0x2003e35c
   d4b38:	000d8928 	.word	0x000d8928
   d4b3c:	000d8b37 	.word	0x000d8b37
   d4b40:	000d88ea 	.word	0x000d88ea

000d4b44 <_Z8senseNow6String>:

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d4b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4b46:	4911      	ldr	r1, [pc, #68]	; (d4b8c <_Z8senseNow6String+0x48>)
   d4b48:	4604      	mov	r4, r0
   d4b4a:	f001 fe8e 	bl	d686a <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d4b4e:	b198      	cbz	r0, d4b78 <_Z8senseNow6String+0x34>
    state = MEASURING_STATE;                                                      // Set the state to reporting
   d4b50:	4b0f      	ldr	r3, [pc, #60]	; (d4b90 <_Z8senseNow6String+0x4c>)
   d4b52:	2202      	movs	r2, #2
   d4b54:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d4b56:	f7ff fb89 	bl	d426c <_ZN11SystemClass13waitConditionIZ11sendUBIDotsvEUlvE_EEbT_.isra.70>
   d4b5a:	4b0e      	ldr	r3, [pc, #56]	; (d4b94 <_Z8senseNow6String+0x50>)
    Particle.publish("Function", "Command accepted - sensing now",PRIVATE);       // Acknowledge receipt
   d4b5c:	490e      	ldr	r1, [pc, #56]	; (d4b98 <_Z8senseNow6String+0x54>)
   d4b5e:	781b      	ldrb	r3, [r3, #0]
   d4b60:	2200      	movs	r2, #0
   d4b62:	f88d 2000 	strb.w	r2, [sp]
   d4b66:	a802      	add	r0, sp, #8
   d4b68:	4a0c      	ldr	r2, [pc, #48]	; (d4b9c <_Z8senseNow6String+0x58>)
   d4b6a:	f7ff fad9 	bl	d4120 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.95.constprop.110>
   d4b6e:	a803      	add	r0, sp, #12
   d4b70:	f7ff fbcc 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b74:	2001      	movs	r0, #1
   d4b76:	e006      	b.n	d4b86 <_Z8senseNow6String+0x42>
   d4b78:	4909      	ldr	r1, [pc, #36]	; (d4ba0 <_Z8senseNow6String+0x5c>)
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	f001 fe75 	bl	d686a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d4b80:	3000      	adds	r0, #0
   d4b82:	bf18      	it	ne
   d4b84:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d4b86:	b004      	add	sp, #16
   d4b88:	bd10      	pop	{r4, pc}
   d4b8a:	bf00      	nop
   d4b8c:	000d8c62 	.word	0x000d8c62
   d4b90:	2003e2ec 	.word	0x2003e2ec
   d4b94:	2003e35c 	.word	0x2003e35c
   d4b98:	000d8928 	.word	0x000d8928
   d4b9c:	000d8b58 	.word	0x000d8b58
   d4ba0:	000d88ea 	.word	0x000d88ea

000d4ba4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
   d4ba4:	b530      	push	{r4, r5, lr}
   d4ba6:	b085      	sub	sp, #20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ba8:	2300      	movs	r3, #0
   d4baa:	4605      	mov	r5, r0
   d4bac:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d4bae:	b121      	cbz	r1, d4bba <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4bb0:	4b14      	ldr	r3, [pc, #80]	; (d4c04 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
   d4bb2:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4bb4:	4b14      	ldr	r3, [pc, #80]	; (d4c08 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4bb6:	9100      	str	r1, [sp, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4bb8:	9302      	str	r3, [sp, #8]
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
   d4bba:	9b02      	ldr	r3, [sp, #8]
   d4bbc:	b183      	cbz	r3, d4be0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4bbe:	2010      	movs	r0, #16
   d4bc0:	f7ff fa6b 	bl	d409a <_Znwj>
   d4bc4:	4604      	mov	r4, r0
   d4bc6:	b158      	cbz	r0, d4be0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4bc8:	2300      	movs	r3, #0
   d4bca:	6083      	str	r3, [r0, #8]
   d4bcc:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4bce:	b17b      	cbz	r3, d4bf0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4bd0:	2202      	movs	r2, #2
   d4bd2:	4669      	mov	r1, sp
   d4bd4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4bd6:	9b03      	ldr	r3, [sp, #12]
   d4bd8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4bda:	9b02      	ldr	r3, [sp, #8]
   d4bdc:	60a3      	str	r3, [r4, #8]
   d4bde:	e007      	b.n	d4bf0 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
   d4be0:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4be2:	9b02      	ldr	r3, [sp, #8]
   d4be4:	b15b      	cbz	r3, d4bfe <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4be6:	2203      	movs	r2, #3
   d4be8:	4669      	mov	r1, sp
   d4bea:	4668      	mov	r0, sp
   d4bec:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
   d4bee:	e006      	b.n	d4bfe <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d4bf0:	4621      	mov	r1, r4
   d4bf2:	462a      	mov	r2, r5
   d4bf4:	4805      	ldr	r0, [pc, #20]	; (d4c0c <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
   d4bf6:	f000 ff56 	bl	d5aa6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4bfa:	4604      	mov	r4, r0
   d4bfc:	e7f1      	b.n	d4be2 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
   d4bfe:	4620      	mov	r0, r4
   d4c00:	b005      	add	sp, #20
   d4c02:	bd30      	pop	{r4, r5, pc}
   d4c04:	000d40cf 	.word	0x000d40cf
   d4c08:	000d40b7 	.word	0x000d40b7
   d4c0c:	000d5a7f 	.word	0x000d5a7f

000d4c10 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4c10:	2300      	movs	r3, #0
   d4c12:	2204      	movs	r2, #4
   d4c14:	f000 bddc 	b.w	d57d0 <spark_variable>

000d4c18 <setup>:

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map


void setup()
{
   d4c18:	b570      	push	{r4, r5, r6, lr}
   d4c1a:	b0a8      	sub	sp, #160	; 0xa0
 Serial.begin(9600);
   d4c1c:	f002 f80a 	bl	d6c34 <_Z16_fetch_usbserialv>
   d4c20:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c24:	f001 fffa 	bl	d6c1c <_ZN9USBSerial5beginEl>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4c28:	a804      	add	r0, sp, #16
   d4c2a:	f000 fdf9 	bl	d5820 <spark_deviceID>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4c2e:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4c30:	2300      	movs	r3, #0
   d4c32:	227d      	movs	r2, #125	; 0x7d
   d4c34:	a908      	add	r1, sp, #32
   d4c36:	a804      	add	r0, sp, #16
   d4c38:	f001 fe29 	bl	d688e <_ZNK6String8getBytesEPhjj>
   d4c3c:	4623      	mov	r3, r4
   d4c3e:	4622      	mov	r2, r4
   d4c40:	4934      	ldr	r1, [pc, #208]	; (d4d14 <setup+0xfc>)
   d4c42:	9401      	str	r4, [sp, #4]
   d4c44:	9400      	str	r4, [sp, #0]
   d4c46:	a808      	add	r0, sp, #32
   d4c48:	f000 fdfa 	bl	d5840 <spark_subscribe>
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic, 125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                  // Subscribe to the integration response event

  // Particle Functions.
  Particle.function("verboseMode", SetVerboseMode);                               // Added Particle Function For VerboseMode.
   d4c4c:	4932      	ldr	r1, [pc, #200]	; (d4d18 <setup+0x100>)
   d4c4e:	4833      	ldr	r0, [pc, #204]	; (d4d1c <setup+0x104>)
   d4c50:	f7ff ffa8 	bl	d4ba4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Get-Reading", senseNow);                                     // This function will force it to get a reading and set the refresh rate to 15mins.
   d4c54:	4932      	ldr	r1, [pc, #200]	; (d4d20 <setup+0x108>)
   d4c56:	4833      	ldr	r0, [pc, #204]	; (d4d24 <setup+0x10c>)
   d4c58:	f7ff ffa4 	bl	d4ba4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Report", sendNow);                                      // This function will force it to get a reading and set the refresh rate to 15mins.
   d4c5c:	4932      	ldr	r1, [pc, #200]	; (d4d28 <setup+0x110>)
   d4c5e:	4833      	ldr	r0, [pc, #204]	; (d4d2c <setup+0x114>)
   d4c60:	f7ff ffa0 	bl	d4ba4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Low-Power-Mode", LowPowerMode);                              // This function will send the device to low power mode or napping.  
   d4c64:	4932      	ldr	r1, [pc, #200]	; (d4d30 <setup+0x118>)
   d4c66:	4833      	ldr	r0, [pc, #204]	; (d4d34 <setup+0x11c>)
   d4c68:	f7ff ff9c 	bl	d4ba4 <_ZN10CloudClass8functionIA15_cIPFb6StringEEEEbRKT_DpT0_>
  
  // Particle Variables
  Particle.variable("Temperature", temperatureString);                            // Setup Particle Variable
   d4c6c:	4932      	ldr	r1, [pc, #200]	; (d4d38 <setup+0x120>)
   d4c6e:	4833      	ldr	r0, [pc, #204]	; (d4d3c <setup+0x124>)
   d4c70:	f7ff ffce 	bl	d4c10 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
   d4c74:	4932      	ldr	r1, [pc, #200]	; (d4d40 <setup+0x128>)
   d4c76:	4833      	ldr	r0, [pc, #204]	; (d4d44 <setup+0x12c>)
   d4c78:	f7ff ffca 	bl	d4c10 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
   d4c7c:	4932      	ldr	r1, [pc, #200]	; (d4d48 <setup+0x130>)
   d4c7e:	4833      	ldr	r0, [pc, #204]	; (d4d4c <setup+0x134>)
   d4c80:	f7ff ffc6 	bl	d4c10 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell
   d4c84:	4932      	ldr	r1, [pc, #200]	; (d4d50 <setup+0x138>)
   d4c86:	4833      	ldr	r0, [pc, #204]	; (d4d54 <setup+0x13c>)
   d4c88:	f7ff ffc2 	bl	d4c10 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
   d4c8c:	f002 f9aa 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4c90:	4620      	mov	r0, r4
   d4c92:	f000 fc0f 	bl	d54b4 <HAL_EEPROM_Read>
   d4c96:	2802      	cmp	r0, #2
   d4c98:	d118      	bne.n	d4ccc <setup+0xb4>
    for (int i=1; i < 100; i++) {
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                              // Retrive system recount data from FRAM
   d4c9a:	f002 f9a3 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>
   d4c9e:	2002      	movs	r0, #2
   d4ca0:	f000 fc08 	bl	d54b4 <HAL_EEPROM_Read>
   d4ca4:	4b2c      	ldr	r3, [pc, #176]	; (d4d58 <setup+0x140>)
   d4ca6:	6018      	str	r0, [r3, #0]
  
  getTemperature();
   d4ca8:	f7ff fb46 	bl	d4338 <_Z14getTemperaturev>
  takeMeasurements();
   d4cac:	f7ff fa48 	bl	d4140 <_Z16takeMeasurementsv>
  

  stayAwake = stayAwakeLong;                                                      // Stay awake longer on startup - helps with recovery for deployed devices
   d4cb0:	4b2a      	ldr	r3, [pc, #168]	; (d4d5c <setup+0x144>)
   d4cb2:	4a2b      	ldr	r2, [pc, #172]	; (d4d60 <setup+0x148>)
   d4cb4:	601a      	str	r2, [r3, #0]
   d4cb6:	f000 fbe5 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
  stayAWakeTimeStamp = millis();                                                  // Reset the timestamp here as the connection sequence could take a while
   d4cba:	4b2a      	ldr	r3, [pc, #168]	; (d4d64 <setup+0x14c>)
   d4cbc:	6018      	str	r0, [r3, #0]



  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
   d4cbe:	4b2a      	ldr	r3, [pc, #168]	; (d4d68 <setup+0x150>)
   d4cc0:	2201      	movs	r2, #1
   d4cc2:	701a      	strb	r2, [r3, #0]
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
   d4cc4:	4b29      	ldr	r3, [pc, #164]	; (d4d6c <setup+0x154>)
   d4cc6:	781b      	ldrb	r3, [r3, #0]
   d4cc8:	b9c3      	cbnz	r3, d4cfc <setup+0xe4>
   d4cca:	e01d      	b.n	d4d08 <setup+0xf0>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
   d4ccc:	ae28      	add	r6, sp, #160	; 0xa0
   d4cce:	f002 f989 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>
   d4cd2:	2302      	movs	r3, #2
   d4cd4:	f846 3d94 	str.w	r3, [r6, #-148]!
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4cd8:	2204      	movs	r2, #4
   d4cda:	4631      	mov	r1, r6
   d4cdc:	4620      	mov	r0, r4
   d4cde:	f000 fc01 	bl	d54e4 <HAL_EEPROM_Put>
    for (int i=1; i < 100; i++) {
   d4ce2:	2501      	movs	r5, #1
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
   d4ce4:	f002 f97e 	bl	d6fe4 <_Z21__fetch_global_EEPROMv>
   d4ce8:	4628      	mov	r0, r5
   d4cea:	2204      	movs	r2, #4
   d4cec:	4631      	mov	r1, r6
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4cee:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                            // Zero out the memory - new map or new device
   d4cf0:	9403      	str	r4, [sp, #12]
   d4cf2:	f000 fbf7 	bl	d54e4 <HAL_EEPROM_Put>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {                    // Check to see if the memory map is the right version
      EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4cf6:	2d64      	cmp	r5, #100	; 0x64
   d4cf8:	d1f4      	bne.n	d4ce4 <setup+0xcc>
   d4cfa:	e7ce      	b.n	d4c9a <setup+0x82>
  stayAWakeTimeStamp = millis();                                                  // Reset the timestamp here as the connection sequence could take a while



  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
   d4cfc:	4b1c      	ldr	r3, [pc, #112]	; (d4d70 <setup+0x158>)
   d4cfe:	781b      	ldrb	r3, [r3, #0]
   d4d00:	2b01      	cmp	r3, #1
   d4d02:	d001      	beq.n	d4d08 <setup+0xf0>
   d4d04:	f7ff fc8a 	bl	d461c <_Z15transitionStatev>
void setup()
{
 Serial.begin(9600);
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.
  char responseTopic[125];
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
   d4d08:	a804      	add	r0, sp, #16
   d4d0a:	f001 fd54 	bl	d67b6 <_ZN6StringD1Ev>



  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
  if (verboseMode && oldState != state) transitionState();                        // If verboseMode is on and state is changed, Then publish the state transition.
}
   d4d0e:	b028      	add	sp, #160	; 0xa0
   d4d10:	bd70      	pop	{r4, r5, r6, pc}
   d4d12:	bf00      	nop
   d4d14:	000d4575 	.word	0x000d4575
   d4d18:	000d43f9 	.word	0x000d43f9
   d4d1c:	000d8b77 	.word	0x000d8b77
   d4d20:	000d4b45 	.word	0x000d4b45
   d4d24:	000d8b83 	.word	0x000d8b83
   d4d28:	000d4ae5 	.word	0x000d4ae5
   d4d2c:	000d8b8f 	.word	0x000d8b8f
   d4d30:	000d40ed 	.word	0x000d40ed
   d4d34:	000d8b9b 	.word	0x000d8b9b
   d4d38:	2003e2b8 	.word	0x2003e2b8
   d4d3c:	000d8a9e 	.word	0x000d8a9e
   d4d40:	000d88e4 	.word	0x000d88e4
   d4d44:	000d8baa 	.word	0x000d8baa
   d4d48:	2003e32c 	.word	0x2003e32c
   d4d4c:	000d8bb2 	.word	0x000d8bb2
   d4d50:	2003e34c 	.word	0x2003e34c
   d4d54:	000d8bb9 	.word	0x000d8bb9
   d4d58:	2003e2f0 	.word	0x2003e2f0
   d4d5c:	2003e2c8 	.word	0x2003e2c8
   d4d60:	00015f90 	.word	0x00015f90
   d4d64:	2003e328 	.word	0x2003e328
   d4d68:	2003e2ec 	.word	0x2003e2ec
   d4d6c:	2003e341 	.word	0x2003e341
   d4d70:	2003e340 	.word	0x2003e340

000d4d74 <_GLOBAL__sub_I_sensor>:
  {
    lowPowerModeOn = false;
    return 1;
  }
  else return 0;
   d4d74:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4d76:	4b07      	ldr	r3, [pc, #28]	; (d4d94 <_GLOBAL__sub_I_sensor+0x20>)
   d4d78:	2400      	movs	r4, #0
   d4d7a:	601c      	str	r4, [r3, #0]
   d4d7c:	4b06      	ldr	r3, [pc, #24]	; (d4d98 <_GLOBAL__sub_I_sensor+0x24>)
   d4d7e:	2201      	movs	r2, #1
   d4d80:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4d82:	f000 fbbf 	bl	d5504 <HAL_Pin_Map>

#include "DS18.h" // Include the OneWire library


// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d4d86:	4622      	mov	r2, r4
   d4d88:	2103      	movs	r1, #3
   d4d8a:	4804      	ldr	r0, [pc, #16]	; (d4d9c <_GLOBAL__sub_I_sensor+0x28>)
  {
    lowPowerModeOn = false;
    return 1;
  }
  else return 0;
   d4d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#include "DS18.h" // Include the OneWire library


// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d4d90:	f000 b817 	b.w	d4dc2 <_ZN4DS18C1Etb>
   d4d94:	2003e33c 	.word	0x2003e33c
   d4d98:	2003e35c 	.word	0x2003e35c
   d4d9c:	2003e2fc 	.word	0x2003e2fc

000d4da0 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4da0:	2300      	movs	r3, #0
  _celsius = 0;
   d4da2:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d4da4:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d4da6:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d4da8:	6183      	str	r3, [r0, #24]
   d4daa:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d4dac:	6203      	str	r3, [r0, #32]
   d4dae:	6243      	str	r3, [r0, #36]	; 0x24
   d4db0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d4db4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d4db8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d4dbc:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d4dc0:	4770      	bx	lr

000d4dc2 <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d4dc2:	b538      	push	{r3, r4, r5, lr}
   d4dc4:	4604      	mov	r4, r0
   d4dc6:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4dc8:	f000 f994 	bl	d50f4 <_ZN7OneWireC1Et>
   d4dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d4dd0:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4dd2:	73a5      	strb	r5, [r4, #14]
   d4dd4:	8223      	strh	r3, [r4, #16]
{
  init();
   d4dd6:	f7ff ffe3 	bl	d4da0 <_ZN4DS184initEv>
}
   d4dda:	4620      	mov	r0, r4
   d4ddc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4de0 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4de2:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d4de6:	680b      	ldr	r3, [r1, #0]
   d4de8:	6183      	str	r3, [r0, #24]
   d4dea:	f100 0518 	add.w	r5, r0, #24
   d4dee:	684b      	ldr	r3, [r1, #4]
   d4df0:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4df2:	780b      	ldrb	r3, [r1, #0]
   d4df4:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4df6:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4df8:	d00a      	beq.n	d4e10 <_ZN4DS184readEPh+0x30>
   d4dfa:	d803      	bhi.n	d4e04 <_ZN4DS184readEPh+0x24>
   d4dfc:	2b10      	cmp	r3, #16
   d4dfe:	d142      	bne.n	d4e86 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d4e00:	2301      	movs	r3, #1
   d4e02:	e008      	b.n	d4e16 <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4e04:	2b26      	cmp	r3, #38	; 0x26
   d4e06:	d005      	beq.n	d4e14 <_ZN4DS184readEPh+0x34>
   d4e08:	2b28      	cmp	r3, #40	; 0x28
   d4e0a:	d13c      	bne.n	d4e86 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d4e0c:	2302      	movs	r3, #2
   d4e0e:	e002      	b.n	d4e16 <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d4e10:	2303      	movs	r3, #3
   d4e12:	e000      	b.n	d4e16 <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d4e14:	2304      	movs	r3, #4
   d4e16:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	f000 f974 	bl	d5108 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d4e20:	4629      	mov	r1, r5
   d4e22:	4620      	mov	r0, r4
   d4e24:	f000 fa30 	bl	d5288 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d4e28:	7ba2      	ldrb	r2, [r4, #14]
   d4e2a:	2144      	movs	r1, #68	; 0x44
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	f000 f9f8 	bl	d5222 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d4e32:	8a20      	ldrh	r0, [r4, #16]
   d4e34:	f000 fdac 	bl	d5990 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f000 f965 	bl	d5108 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4e3e:	4629      	mov	r1, r5
   d4e40:	4620      	mov	r0, r4
   d4e42:	f000 fa21 	bl	d5288 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d4e46:	2200      	movs	r2, #0
   d4e48:	21b8      	movs	r1, #184	; 0xb8
   d4e4a:	4620      	mov	r0, r4
   d4e4c:	f000 f9e9 	bl	d5222 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d4e50:	2200      	movs	r2, #0
   d4e52:	4611      	mov	r1, r2
   d4e54:	4620      	mov	r0, r4
   d4e56:	f000 f9e4 	bl	d5222 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	f000 f954 	bl	d5108 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4e60:	4629      	mov	r1, r5
   d4e62:	4620      	mov	r0, r4
   d4e64:	f000 fa10 	bl	d5288 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d4e68:	2200      	movs	r2, #0
   d4e6a:	21be      	movs	r1, #190	; 0xbe
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	f000 f9d8 	bl	d5222 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d4e72:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d4e76:	2b04      	cmp	r3, #4
   d4e78:	d109      	bne.n	d4e8e <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d4e7a:	2200      	movs	r2, #0
   d4e7c:	4611      	mov	r1, r2
   d4e7e:	4620      	mov	r0, r4
   d4e80:	f000 f9cf 	bl	d5222 <_ZN7OneWire5writeEhh>
   d4e84:	e003      	b.n	d4e8e <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d4e86:	2000      	movs	r0, #0
   d4e88:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d4e8c:	e094      	b.n	d4fb8 <_ZN4DS184readEPh+0x1d8>
   d4e8e:	f104 051f 	add.w	r5, r4, #31
   d4e92:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d4e96:	4620      	mov	r0, r4
   d4e98:	f000 f9e6 	bl	d5268 <_ZN7OneWire4readEv>
   d4e9c:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d4ea0:	42ae      	cmp	r6, r5
   d4ea2:	d1f8      	bne.n	d4e96 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d4ea4:	2108      	movs	r1, #8
   d4ea6:	f104 0020 	add.w	r0, r4, #32
   d4eaa:	f000 fa86 	bl	d53ba <_ZN7OneWire4crc8EPhh>
   d4eae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d4eb2:	4283      	cmp	r3, r0
   d4eb4:	d004      	beq.n	d4ec0 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d4eb6:	2301      	movs	r3, #1
   d4eb8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4ebc:	2000      	movs	r0, #0
   d4ebe:	e07b      	b.n	d4fb8 <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4ec0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d4ec4:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d4ec8:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d4ed0:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4ed2:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d4ed4:	d127      	bne.n	d4f26 <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d4ed6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4eda:	ee07 3a90 	vmov	s15, r3
   d4ede:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4ee2:	08d2      	lsrs	r2, r2, #3
   d4ee4:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d4ee8:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d4eec:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d4ef0:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4ef2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d4ef6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d4efa:	d045      	beq.n	d4f88 <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d4efc:	ee18 0a90 	vmov	r0, s17
   d4f00:	f002 fb7c 	bl	d75fc <__aeabi_f2d>
   d4f04:	4606      	mov	r6, r0
   d4f06:	ee18 0a10 	vmov	r0, s16
   d4f0a:	460f      	mov	r7, r1
   d4f0c:	f002 fb76 	bl	d75fc <__aeabi_f2d>
   d4f10:	2200      	movs	r2, #0
   d4f12:	4b2b      	ldr	r3, [pc, #172]	; (d4fc0 <_ZN4DS184readEPh+0x1e0>)
   d4f14:	f002 fbc6 	bl	d76a4 <__aeabi_dmul>
   d4f18:	4602      	mov	r2, r0
   d4f1a:	460b      	mov	r3, r1
   d4f1c:	4630      	mov	r0, r6
   d4f1e:	4639      	mov	r1, r7
   d4f20:	f002 fa0c 	bl	d733c <__aeabi_dsub>
   d4f24:	e044      	b.n	d4fb0 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d4f26:	2901      	cmp	r1, #1
   d4f28:	d003      	beq.n	d4f32 <_ZN4DS184readEPh+0x152>
   d4f2a:	d344      	bcc.n	d4fb6 <_ZN4DS184readEPh+0x1d6>
   d4f2c:	2903      	cmp	r1, #3
   d4f2e:	d910      	bls.n	d4f52 <_ZN4DS184readEPh+0x172>
   d4f30:	e041      	b.n	d4fb6 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4f32:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4f36:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4f3a:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d4f3c:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4f3e:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4f40:	d119      	bne.n	d4f76 <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d4f42:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d4f46:	f023 030f 	bic.w	r3, r3, #15
   d4f4a:	f1c2 020c 	rsb	r2, r2, #12
   d4f4e:	4413      	add	r3, r2
   d4f50:	e010      	b.n	d4f74 <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d4f52:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d4f56:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d4f5a:	d102      	bne.n	d4f62 <_ZN4DS184readEPh+0x182>
   d4f5c:	f023 0307 	bic.w	r3, r3, #7
   d4f60:	e008      	b.n	d4f74 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d4f62:	2a20      	cmp	r2, #32
   d4f64:	d102      	bne.n	d4f6c <_ZN4DS184readEPh+0x18c>
   d4f66:	f023 0303 	bic.w	r3, r3, #3
   d4f6a:	e003      	b.n	d4f74 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4f6c:	2a40      	cmp	r2, #64	; 0x40
   d4f6e:	d102      	bne.n	d4f76 <_ZN4DS184readEPh+0x196>
   d4f70:	f023 0301 	bic.w	r3, r3, #1
   d4f74:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d4f76:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d4f7a:	ee07 3a90 	vmov	s15, r3
   d4f7e:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d4f82:	edc4 7a05 	vstr	s15, [r4, #20]
   d4f86:	e016      	b.n	d4fb6 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4f88:	ee18 0a10 	vmov	r0, s16
   d4f8c:	f002 fb36 	bl	d75fc <__aeabi_f2d>
   d4f90:	2200      	movs	r2, #0
   d4f92:	4b0b      	ldr	r3, [pc, #44]	; (d4fc0 <_ZN4DS184readEPh+0x1e0>)
   d4f94:	f002 fb86 	bl	d76a4 <__aeabi_dmul>
   d4f98:	4606      	mov	r6, r0
   d4f9a:	ee18 0a90 	vmov	r0, s17
   d4f9e:	460f      	mov	r7, r1
   d4fa0:	f002 fb2c 	bl	d75fc <__aeabi_f2d>
   d4fa4:	4602      	mov	r2, r0
   d4fa6:	460b      	mov	r3, r1
   d4fa8:	4630      	mov	r0, r6
   d4faa:	4639      	mov	r1, r7
   d4fac:	f002 f9c8 	bl	d7340 <__adddf3>
   d4fb0:	f002 fe70 	bl	d7c94 <__aeabi_d2f>
   d4fb4:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d4fb6:	2001      	movs	r0, #1
}
   d4fb8:	ecbd 8b02 	vpop	{d8}
   d4fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4fbe:	bf00      	nop
   d4fc0:	3fa00000 	.word	0x3fa00000

000d4fc4 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d4fc4:	b538      	push	{r3, r4, r5, lr}
   d4fc6:	4604      	mov	r4, r0
  init();
   d4fc8:	f7ff feea 	bl	d4da0 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d4fcc:	f100 0518 	add.w	r5, r0, #24
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	f000 f977 	bl	d52c4 <_ZN7OneWire6searchEPh>
   d4fd6:	b930      	cbnz	r0, d4fe6 <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d4fd8:	2301      	movs	r3, #1
   d4fda:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d4fde:	4620      	mov	r0, r4
   d4fe0:	f000 f964 	bl	d52ac <_ZN7OneWire12reset_searchEv>
    return false;
   d4fe4:	e010      	b.n	d5008 <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d4fe6:	2107      	movs	r1, #7
   d4fe8:	4628      	mov	r0, r5
   d4fea:	f000 f9e6 	bl	d53ba <_ZN7OneWire4crc8EPhh>
   d4fee:	7fe3      	ldrb	r3, [r4, #31]
   d4ff0:	4283      	cmp	r3, r0
   d4ff2:	d003      	beq.n	d4ffc <_ZN4DS184readEv+0x38>
    _crcError = true;
   d4ff4:	2301      	movs	r3, #1
   d4ff6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4ffa:	e005      	b.n	d5008 <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d4ffc:	4629      	mov	r1, r5
   d4ffe:	4620      	mov	r0, r4
}
   d5000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d5004:	f7ff beec 	b.w	d4de0 <_ZN4DS184readEPh>
}
   d5008:	2000      	movs	r0, #0
   d500a:	bd38      	pop	{r3, r4, r5, pc}

000d500c <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d500c:	ed90 0a05 	vldr	s0, [r0, #20]
   d5010:	4770      	bx	lr

000d5012 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d5012:	f000 ba77 	b.w	d5504 <HAL_Pin_Map>
	...

000d5018 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d5018:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d501a:	6803      	ldr	r3, [r0, #0]
   d501c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d501e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d5020:	d904      	bls.n	d502c <nrf_gpio_pin_port_decode+0x14>
   d5022:	4a07      	ldr	r2, [pc, #28]	; (d5040 <nrf_gpio_pin_port_decode+0x28>)
   d5024:	2100      	movs	r1, #0
   d5026:	200a      	movs	r0, #10
   d5028:	f000 fb7c 	bl	d5724 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d502c:	6823      	ldr	r3, [r4, #0]
   d502e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d5030:	bf83      	ittte	hi
   d5032:	f003 031f 	andhi.w	r3, r3, #31
   d5036:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d5038:	4802      	ldrhi	r0, [pc, #8]	; (d5044 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d503a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d503e:	bd10      	pop	{r4, pc}
   d5040:	000d5475 	.word	0x000d5475
   d5044:	50000300 	.word	0x50000300

000d5048 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d5048:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d504a:	4b0b      	ldr	r3, [pc, #44]	; (d5078 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	0100      	lsls	r0, r0, #4
   d5050:	1819      	adds	r1, r3, r0
   d5052:	5c1a      	ldrb	r2, [r3, r0]
   d5054:	784b      	ldrb	r3, [r1, #1]
   d5056:	a802      	add	r0, sp, #8
   d5058:	f003 031f 	and.w	r3, r3, #31
   d505c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d5060:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d5064:	f7ff ffd8 	bl	d5018 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d5068:	9a01      	ldr	r2, [sp, #4]
   d506a:	2301      	movs	r3, #1
   d506c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d506e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d5072:	b003      	add	sp, #12
   d5074:	f85d fb04 	ldr.w	pc, [sp], #4
   d5078:	2003e364 	.word	0x2003e364

000d507c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d507c:	b507      	push	{r0, r1, r2, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d507e:	4b0b      	ldr	r3, [pc, #44]	; (d50ac <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	0100      	lsls	r0, r0, #4
   d5084:	1819      	adds	r1, r3, r0
   d5086:	5c1a      	ldrb	r2, [r3, r0]
   d5088:	784b      	ldrb	r3, [r1, #1]
   d508a:	a802      	add	r0, sp, #8
   d508c:	f003 031f 	and.w	r3, r3, #31
   d5090:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d5094:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d5098:	f7ff ffbe 	bl	d5018 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d509c:	9a01      	ldr	r2, [sp, #4]
   d509e:	2301      	movs	r3, #1
   d50a0:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d50a2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d50a6:	b003      	add	sp, #12
   d50a8:	f85d fb04 	ldr.w	pc, [sp], #4
   d50ac:	2003e364 	.word	0x2003e364

000d50b0 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d50b0:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d50b2:	4b0f      	ldr	r3, [pc, #60]	; (d50f0 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	0100      	lsls	r0, r0, #4
   d50b8:	181a      	adds	r2, r3, r0
   d50ba:	5c1c      	ldrb	r4, [r3, r0]
   d50bc:	7853      	ldrb	r3, [r2, #1]
   d50be:	a802      	add	r0, sp, #8
   d50c0:	f003 031f 	and.w	r3, r3, #31
   d50c4:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d50c8:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d50cc:	f7ff ffa4 	bl	d5018 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d50d0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d50d4:	a802      	add	r0, sp, #8
   d50d6:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d50da:	f7ff ff9d 	bl	d5018 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d50de:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d50e2:	9800      	ldr	r0, [sp, #0]
   d50e4:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d50e8:	f000 0001 	and.w	r0, r0, #1
   d50ec:	b002      	add	sp, #8
   d50ee:	bd10      	pop	{r4, pc}
   d50f0:	2003e364 	.word	0x2003e364

000d50f4 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d50f4:	b538      	push	{r3, r4, r5, lr}
   d50f6:	4604      	mov	r4, r0
   d50f8:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d50fa:	4628      	mov	r0, r5
   d50fc:	2100      	movs	r1, #0
   d50fe:	f001 ff49 	bl	d6f94 <pinMode>
    _pin = pin;
   d5102:	8025      	strh	r5, [r4, #0]
}
   d5104:	4620      	mov	r0, r4
   d5106:	bd38      	pop	{r3, r4, r5, pc}

000d5108 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d5108:	b538      	push	{r3, r4, r5, lr}
   d510a:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d510c:	f000 ffee 	bl	d60ec <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d5110:	2100      	movs	r1, #0
   d5112:	8828      	ldrh	r0, [r5, #0]
   d5114:	f000 fa06 	bl	d5524 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d5118:	f000 ffea 	bl	d60f0 <_Z10interruptsv>
   d511c:	247d      	movs	r4, #125	; 0x7d
   d511e:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d5120:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d5124:	d02b      	beq.n	d517e <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5126:	2002      	movs	r0, #2
   d5128:	f000 f9a4 	bl	d5474 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d512c:	8828      	ldrh	r0, [r5, #0]
   d512e:	f7ff ffbf 	bl	d50b0 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d5132:	2800      	cmp	r0, #0
   d5134:	d0f3      	beq.n	d511e <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d5136:	f000 ffd9 	bl	d60ec <_Z12noInterruptsv>

    digitalWriteFastLow();
   d513a:	8828      	ldrh	r0, [r5, #0]
   d513c:	f7ff ff84 	bl	d5048 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d5140:	2101      	movs	r1, #1
   d5142:	8828      	ldrh	r0, [r5, #0]
   d5144:	f000 f9ee 	bl	d5524 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d5148:	f000 ffd2 	bl	d60f0 <_Z10interruptsv>
   d514c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d5150:	f000 f990 	bl	d5474 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d5154:	f000 ffca 	bl	d60ec <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d5158:	2100      	movs	r1, #0
   d515a:	8828      	ldrh	r0, [r5, #0]
   d515c:	f000 f9e2 	bl	d5524 <HAL_Pin_Mode>
   d5160:	2046      	movs	r0, #70	; 0x46
   d5162:	f000 f987 	bl	d5474 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d5166:	8828      	ldrh	r0, [r5, #0]
   d5168:	f7ff ffa2 	bl	d50b0 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d516c:	fab0 f480 	clz	r4, r0

    interrupts();
   d5170:	f000 ffbe 	bl	d60f0 <_Z10interruptsv>
   d5174:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d5178:	0964      	lsrs	r4, r4, #5
   d517a:	f000 f97b 	bl	d5474 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d517e:	4620      	mov	r0, r4
   d5180:	bd38      	pop	{r3, r4, r5, pc}

000d5182 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d5182:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d5184:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d5188:	4604      	mov	r4, r0
    if (v & 1) {
   d518a:	d013      	beq.n	d51b4 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d518c:	f000 ffae 	bl	d60ec <_Z12noInterruptsv>

        digitalWriteFastLow();
   d5190:	8820      	ldrh	r0, [r4, #0]
   d5192:	f7ff ff59 	bl	d5048 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d5196:	2101      	movs	r1, #1
   d5198:	8820      	ldrh	r0, [r4, #0]
   d519a:	f000 f9c3 	bl	d5524 <HAL_Pin_Mode>
   d519e:	200a      	movs	r0, #10
   d51a0:	f000 f968 	bl	d5474 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d51a4:	8820      	ldrh	r0, [r4, #0]
   d51a6:	2100      	movs	r1, #0
   d51a8:	f000 f9bc 	bl	d5524 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d51ac:	f000 ffa0 	bl	d60f0 <_Z10interruptsv>
   d51b0:	2037      	movs	r0, #55	; 0x37
   d51b2:	e012      	b.n	d51da <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d51b4:	f000 ff9a 	bl	d60ec <_Z12noInterruptsv>

        digitalWriteFastLow();
   d51b8:	8820      	ldrh	r0, [r4, #0]
   d51ba:	f7ff ff45 	bl	d5048 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d51be:	2101      	movs	r1, #1
   d51c0:	8820      	ldrh	r0, [r4, #0]
   d51c2:	f000 f9af 	bl	d5524 <HAL_Pin_Mode>
   d51c6:	2041      	movs	r0, #65	; 0x41
   d51c8:	f000 f954 	bl	d5474 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d51cc:	8820      	ldrh	r0, [r4, #0]
   d51ce:	4629      	mov	r1, r5
   d51d0:	f000 f9a8 	bl	d5524 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d51d4:	f000 ff8c 	bl	d60f0 <_Z10interruptsv>
   d51d8:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d51da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d51de:	f000 b949 	b.w	d5474 <HAL_Delay_Microseconds>

000d51e2 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d51e2:	b510      	push	{r4, lr}
   d51e4:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d51e6:	f000 ff81 	bl	d60ec <_Z12noInterruptsv>

    digitalWriteFastLow();
   d51ea:	8820      	ldrh	r0, [r4, #0]
   d51ec:	f7ff ff2c 	bl	d5048 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d51f0:	2101      	movs	r1, #1
   d51f2:	8820      	ldrh	r0, [r4, #0]
   d51f4:	f000 f996 	bl	d5524 <HAL_Pin_Mode>
   d51f8:	2003      	movs	r0, #3
   d51fa:	f000 f93b 	bl	d5474 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d51fe:	2100      	movs	r1, #0
   d5200:	8820      	ldrh	r0, [r4, #0]
   d5202:	f000 f98f 	bl	d5524 <HAL_Pin_Mode>
   d5206:	200a      	movs	r0, #10
   d5208:	f000 f934 	bl	d5474 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d520c:	8820      	ldrh	r0, [r4, #0]
   d520e:	f7ff ff4f 	bl	d50b0 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d5212:	4604      	mov	r4, r0

    interrupts();
   d5214:	f000 ff6c 	bl	d60f0 <_Z10interruptsv>
   d5218:	2035      	movs	r0, #53	; 0x35
   d521a:	f000 f92b 	bl	d5474 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d521e:	4620      	mov	r0, r4
   d5220:	bd10      	pop	{r4, pc}

000d5222 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d5222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5226:	4605      	mov	r5, r0
   d5228:	4688      	mov	r8, r1
   d522a:	4617      	mov	r7, r2
   d522c:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d522e:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d5230:	ea18 0f04 	tst.w	r8, r4
   d5234:	bf14      	ite	ne
   d5236:	2101      	movne	r1, #1
   d5238:	2100      	moveq	r1, #0
   d523a:	4628      	mov	r0, r5
   d523c:	f7ff ffa1 	bl	d5182 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d5240:	0064      	lsls	r4, r4, #1
   d5242:	3e01      	subs	r6, #1
   d5244:	b2e4      	uxtb	r4, r4
   d5246:	d1f3      	bne.n	d5230 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d5248:	b167      	cbz	r7, d5264 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d524a:	f000 ff4f 	bl	d60ec <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d524e:	8828      	ldrh	r0, [r5, #0]
   d5250:	f7ff ff14 	bl	d507c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d5254:	8828      	ldrh	r0, [r5, #0]
   d5256:	2101      	movs	r1, #1
   d5258:	f000 f964 	bl	d5524 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d525c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d5260:	f000 bf46 	b.w	d60f0 <_Z10interruptsv>
   d5264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5268 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d526a:	4607      	mov	r7, r0
   d526c:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d526e:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d5270:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d5272:	4638      	mov	r0, r7
   d5274:	f7ff ffb5 	bl	d51e2 <_ZN7OneWire8read_bitEv>
   d5278:	b100      	cbz	r0, d527c <_ZN7OneWire4readEv+0x14>
   d527a:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d527c:	0064      	lsls	r4, r4, #1
   d527e:	3e01      	subs	r6, #1
   d5280:	b2e4      	uxtb	r4, r4
   d5282:	d1f6      	bne.n	d5272 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d5284:	4628      	mov	r0, r5
   d5286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5288 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d5288:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d528a:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d528c:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d528e:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d5290:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d5292:	f7ff ffc6 	bl	d5222 <_ZN7OneWire5writeEhh>
   d5296:	1e65      	subs	r5, r4, #1
   d5298:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d529a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d529e:	2200      	movs	r2, #0
   d52a0:	4630      	mov	r0, r6
   d52a2:	f7ff ffbe 	bl	d5222 <_ZN7OneWire5writeEhh>
   d52a6:	42a5      	cmp	r5, r4
   d52a8:	d1f7      	bne.n	d529a <_ZN7OneWire6selectEPKh+0x12>
}
   d52aa:	bd70      	pop	{r4, r5, r6, pc}

000d52ac <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d52ac:	2300      	movs	r3, #0
   d52ae:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d52b0:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d52b2:	72c3      	strb	r3, [r0, #11]
   d52b4:	f100 020a 	add.w	r2, r0, #10
   d52b8:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d52ba:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d52be:	4282      	cmp	r2, r0
   d52c0:	d1fb      	bne.n	d52ba <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d52c2:	4770      	bx	lr

000d52c4 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d52c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d52c8:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d52ca:	4604      	mov	r4, r0
   d52cc:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d52ce:	2d00      	cmp	r5, #0
   d52d0:	d15e      	bne.n	d5390 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d52d2:	f7ff ff19 	bl	d5108 <_ZN7OneWire5resetEv>
   d52d6:	b920      	cbnz	r0, d52e2 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d52d8:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d52da:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d52dc:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d52de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d52e2:	462a      	mov	r2, r5
   d52e4:	21f0      	movs	r1, #240	; 0xf0
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7ff ff9b 	bl	d5222 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d52ec:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d52ee:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d52f0:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d52f2:	4620      	mov	r0, r4
   d52f4:	f7ff ff75 	bl	d51e2 <_ZN7OneWire8read_bitEv>
   d52f8:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d52fa:	4620      	mov	r0, r4
   d52fc:	f7ff ff71 	bl	d51e2 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d5300:	f1b9 0f01 	cmp.w	r9, #1
   d5304:	d102      	bne.n	d530c <_ZN7OneWire6searchEPh+0x48>
   d5306:	2801      	cmp	r0, #1
   d5308:	d11b      	bne.n	d5342 <_ZN7OneWire6searchEPh+0x7e>
   d530a:	e037      	b.n	d537c <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d530c:	4581      	cmp	r9, r0
   d530e:	eb04 0305 	add.w	r3, r4, r5
   d5312:	d11e      	bne.n	d5352 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d5314:	7aa2      	ldrb	r2, [r4, #10]
   d5316:	4297      	cmp	r7, r2
   d5318:	d207      	bcs.n	d532a <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d531a:	789a      	ldrb	r2, [r3, #2]
   d531c:	4216      	tst	r6, r2
   d531e:	bf14      	ite	ne
   d5320:	f04f 0901 	movne.w	r9, #1
   d5324:	f04f 0900 	moveq.w	r9, #0
   d5328:	e004      	b.n	d5334 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d532a:	bf0c      	ite	eq
   d532c:	f04f 0901 	moveq.w	r9, #1
   d5330:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d5334:	f1b9 0f00 	cmp.w	r9, #0
   d5338:	d103      	bne.n	d5342 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d533a:	2f08      	cmp	r7, #8
   d533c:	d808      	bhi.n	d5350 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d533e:	72e7      	strb	r7, [r4, #11]
   d5340:	e006      	b.n	d5350 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d5342:	1962      	adds	r2, r4, r5
   d5344:	f04f 0901 	mov.w	r9, #1
   d5348:	7893      	ldrb	r3, [r2, #2]
   d534a:	4333      	orrs	r3, r6
   d534c:	7093      	strb	r3, [r2, #2]
   d534e:	e004      	b.n	d535a <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d5350:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d5352:	789a      	ldrb	r2, [r3, #2]
   d5354:	ea22 0206 	bic.w	r2, r2, r6
   d5358:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d535a:	4649      	mov	r1, r9
   d535c:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d535e:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d5360:	f7ff ff0f 	bl	d5182 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d5364:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d5368:	bf04      	itt	eq
   d536a:	3501      	addeq	r5, #1
   d536c:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d536e:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d5372:	bf08      	it	eq
   d5374:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d5376:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d5378:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d537a:	d9ba      	bls.n	d52f2 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d537c:	2f40      	cmp	r7, #64	; 0x40
   d537e:	d907      	bls.n	d5390 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d5380:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d5384:	f1ba 0f00 	cmp.w	sl, #0
   d5388:	d112      	bne.n	d53b0 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d538a:	2301      	movs	r3, #1
   d538c:	7323      	strb	r3, [r4, #12]
   d538e:	e00f      	b.n	d53b0 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d5390:	2000      	movs	r0, #0
   d5392:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d5394:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d5396:	72e0      	strb	r0, [r4, #11]
   d5398:	1c63      	adds	r3, r4, #1
   d539a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d539e:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d53a0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d53a4:	f808 2f01 	strb.w	r2, [r8, #1]!
   d53a8:	42a3      	cmp	r3, r4
   d53aa:	d1f9      	bne.n	d53a0 <_ZN7OneWire6searchEPh+0xdc>
   d53ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d53b0:	78a3      	ldrb	r3, [r4, #2]
   d53b2:	2b00      	cmp	r3, #0
   d53b4:	d0ec      	beq.n	d5390 <_ZN7OneWire6searchEPh+0xcc>
   d53b6:	2001      	movs	r0, #1
   d53b8:	e7ee      	b.n	d5398 <_ZN7OneWire6searchEPh+0xd4>

000d53ba <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d53ba:	b530      	push	{r4, r5, lr}
   d53bc:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d53be:	2000      	movs	r0, #0

    while (len--) {
   d53c0:	3901      	subs	r1, #1
   d53c2:	b2c9      	uxtb	r1, r1
   d53c4:	29ff      	cmp	r1, #255	; 0xff
   d53c6:	d013      	beq.n	d53f0 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d53c8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d53cc:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d53ce:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d53d2:	f013 0f01 	tst.w	r3, #1
   d53d6:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d53da:	bf1c      	itt	ne
   d53dc:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d53e0:	b2d8      	uxtbne	r0, r3
   d53e2:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d53e4:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d53e8:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d53ec:	d1ef      	bne.n	d53ce <_ZN7OneWire4crc8EPhh+0x14>
   d53ee:	e7e7      	b.n	d53c0 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d53f0:	bd30      	pop	{r4, r5, pc}
	...

000d53f4 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d53f4:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d53f6:	f000 f885 	bl	d5504 <HAL_Pin_Map>
   d53fa:	4b01      	ldr	r3, [pc, #4]	; (d5400 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d53fc:	6018      	str	r0, [r3, #0]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	2003e364 	.word	0x2003e364

000d5404 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <os_thread_is_current+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	689b      	ldr	r3, [r3, #8]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030248 	.word	0x00030248

000d5414 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <os_thread_join+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	691b      	ldr	r3, [r3, #16]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030248 	.word	0x00030248

000d5424 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <os_thread_cleanup+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	695b      	ldr	r3, [r3, #20]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030248 	.word	0x00030248

000d5434 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <os_mutex_create+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030248 	.word	0x00030248

000d5444 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <os_mutex_recursive_create+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030248 	.word	0x00030248

000d5454 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <HAL_Core_System_Reset_Ex+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030234 	.word	0x00030234

000d5464 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <HAL_RNG_GetRandomNumber+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	685b      	ldr	r3, [r3, #4]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030218 	.word	0x00030218

000d5474 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <HAL_Delay_Microseconds+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	68db      	ldr	r3, [r3, #12]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030218 	.word	0x00030218

000d5484 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	695b      	ldr	r3, [r3, #20]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030218 	.word	0x00030218

000d5494 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <HAL_RTC_Get_UnixTime+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	69db      	ldr	r3, [r3, #28]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030218 	.word	0x00030218

000d54a4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <HAL_EEPROM_Init+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030218 	.word	0x00030218

000d54b4 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <HAL_EEPROM_Read+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030218 	.word	0x00030218

000d54c4 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <HAL_EEPROM_Write+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030218 	.word	0x00030218

000d54d4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <HAL_EEPROM_Get+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030218 	.word	0x00030218

000d54e4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <HAL_EEPROM_Put+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030218 	.word	0x00030218

000d54f4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <HAL_RTC_Time_Is_Valid+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030218 	.word	0x00030218

000d5504 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <HAL_Pin_Map+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	681b      	ldr	r3, [r3, #0]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	0003022c 	.word	0x0003022c

000d5514 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <HAL_Validate_Pin_Function+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	685b      	ldr	r3, [r3, #4]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	0003022c 	.word	0x0003022c

000d5524 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <HAL_Pin_Mode+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	689b      	ldr	r3, [r3, #8]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	0003022c 	.word	0x0003022c

000d5534 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <HAL_Interrupts_Enable_All+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	6a1b      	ldr	r3, [r3, #32]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	0003022c 	.word	0x0003022c

000d5544 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <HAL_Interrupts_Disable_All+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	0003022c 	.word	0x0003022c

000d5554 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <HAL_ADC_Read+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	0003022c 	.word	0x0003022c

000d5564 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <HAL_I2C_Write_Data+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	6a1b      	ldr	r3, [r3, #32]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030228 	.word	0x00030228

000d5574 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <HAL_I2C_Available_Data+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030228 	.word	0x00030228

000d5584 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <HAL_I2C_Read_Data+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030228 	.word	0x00030228

000d5594 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_I2C_Peek_Data+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030228 	.word	0x00030228

000d55a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_I2C_Flush_Data+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030228 	.word	0x00030228

000d55b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <HAL_I2C_Is_Enabled+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030228 	.word	0x00030228

000d55c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <HAL_I2C_Init+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030228 	.word	0x00030228

000d55d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <inet_inet_ntop+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	695b      	ldr	r3, [r3, #20]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030264 	.word	0x00030264

000d55e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <netdb_freeaddrinfo+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	689b      	ldr	r3, [r3, #8]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030268 	.word	0x00030268

000d55f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <netdb_getaddrinfo+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	68db      	ldr	r3, [r3, #12]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030268 	.word	0x00030268

000d5604 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <HAL_SPI_Init+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	69db      	ldr	r3, [r3, #28]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030230 	.word	0x00030230

000d5614 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <HAL_SPI_Is_Enabled+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6a1b      	ldr	r3, [r3, #32]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030230 	.word	0x00030230

000d5624 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <HAL_USART_Init+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	681b      	ldr	r3, [r3, #0]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	0003023c 	.word	0x0003023c

000d5634 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <HAL_USART_Write_Data+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	68db      	ldr	r3, [r3, #12]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	0003023c 	.word	0x0003023c

000d5644 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <HAL_USART_Available_Data+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	691b      	ldr	r3, [r3, #16]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	0003023c 	.word	0x0003023c

000d5654 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_USART_Read_Data+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	695b      	ldr	r3, [r3, #20]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	0003023c 	.word	0x0003023c

000d5664 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_USART_Peek_Data+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	699b      	ldr	r3, [r3, #24]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003023c 	.word	0x0003023c

000d5674 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <HAL_USART_Flush_Data+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	69db      	ldr	r3, [r3, #28]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003023c 	.word	0x0003023c

000d5684 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <HAL_USART_Is_Enabled+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6a1b      	ldr	r3, [r3, #32]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	0003023c 	.word	0x0003023c

000d5694 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <HAL_USART_Available_Data_For_Write+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	0003023c 	.word	0x0003023c

000d56a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <HAL_USB_USART_Init+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	681b      	ldr	r3, [r3, #0]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	0003024c 	.word	0x0003024c

000d56b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <HAL_USB_USART_Begin+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	685b      	ldr	r3, [r3, #4]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	0003024c 	.word	0x0003024c

000d56c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_USB_USART_Available_Data+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	691b      	ldr	r3, [r3, #16]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003024c 	.word	0x0003024c

000d56d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	695b      	ldr	r3, [r3, #20]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003024c 	.word	0x0003024c

000d56e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <HAL_USB_USART_Receive_Data+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	699b      	ldr	r3, [r3, #24]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	0003024c 	.word	0x0003024c

000d56f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <HAL_USB_USART_Send_Data+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	69db      	ldr	r3, [r3, #28]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003024c 	.word	0x0003024c

000d5704 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_USB_USART_Flush_Data+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6a1b      	ldr	r3, [r3, #32]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	0003024c 	.word	0x0003024c

000d5714 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <wlan_connected_info+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030274 	.word	0x00030274

000d5724 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <panic_+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030260 	.word	0x00030260

000d5734 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <system_mode+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	681b      	ldr	r3, [r3, #0]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030220 	.word	0x00030220

000d5744 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <set_system_mode+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	685b      	ldr	r3, [r3, #4]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030220 	.word	0x00030220

000d5754 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <system_delay_ms+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	695b      	ldr	r3, [r3, #20]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030220 	.word	0x00030220

000d5764 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <application_thread_current+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030220 	.word	0x00030220

000d5774 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <application_thread_invoke+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030220 	.word	0x00030220

000d5784 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <system_thread_get_state+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030220 	.word	0x00030220

000d5794 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b03      	ldr	r3, [pc, #12]	; (d57a4 <system_ctrl_set_app_request_handler+0x10>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d579e:	9301      	str	r3, [sp, #4]
   d57a0:	bd08      	pop	{r3, pc}
   d57a2:	0000      	.short	0x0000
   d57a4:	00030220 	.word	0x00030220

000d57a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b03      	ldr	r3, [pc, #12]	; (d57b8 <system_ctrl_set_result+0x10>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d57b2:	9301      	str	r3, [sp, #4]
   d57b4:	bd08      	pop	{r3, pc}
   d57b6:	0000      	.short	0x0000
   d57b8:	00030220 	.word	0x00030220

000d57bc <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b03      	ldr	r3, [pc, #12]	; (d57cc <system_sleep_pins+0x10>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d57c6:	9301      	str	r3, [sp, #4]
   d57c8:	bd08      	pop	{r3, pc}
   d57ca:	0000      	.short	0x0000
   d57cc:	00030220 	.word	0x00030220

000d57d0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <spark_variable+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	681b      	ldr	r3, [r3, #0]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	00030244 	.word	0x00030244

000d57e0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <spark_function+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	685b      	ldr	r3, [r3, #4]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	00030244 	.word	0x00030244

000d57f0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <spark_process+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	689b      	ldr	r3, [r3, #8]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	00030244 	.word	0x00030244

000d5800 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <spark_cloud_flag_connect+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	68db      	ldr	r3, [r3, #12]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	00030244 	.word	0x00030244

000d5810 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <spark_cloud_flag_connected+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	695b      	ldr	r3, [r3, #20]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	00030244 	.word	0x00030244

000d5820 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <spark_deviceID+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	69db      	ldr	r3, [r3, #28]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	00030244 	.word	0x00030244

000d5830 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <spark_send_event+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	6a1b      	ldr	r3, [r3, #32]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	00030244 	.word	0x00030244

000d5840 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <spark_subscribe+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	00030244 	.word	0x00030244

000d5850 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <spark_sync_time+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	00030244 	.word	0x00030244

000d5860 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <spark_sync_time_pending+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030244 	.word	0x00030244

000d5870 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030244 	.word	0x00030244

000d5880 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <network_connect+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	685b      	ldr	r3, [r3, #4]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030240 	.word	0x00030240

000d5890 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <network_connecting+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	689b      	ldr	r3, [r3, #8]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030240 	.word	0x00030240

000d58a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <network_disconnect+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	68db      	ldr	r3, [r3, #12]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030240 	.word	0x00030240

000d58b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <network_ready+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	691b      	ldr	r3, [r3, #16]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030240 	.word	0x00030240

000d58c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <network_on+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	695b      	ldr	r3, [r3, #20]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030240 	.word	0x00030240

000d58d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <network_off+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	699b      	ldr	r3, [r3, #24]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030240 	.word	0x00030240

000d58e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <network_listen+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	69db      	ldr	r3, [r3, #28]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030240 	.word	0x00030240

000d58f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <network_listening+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6a1b      	ldr	r3, [r3, #32]
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030240 	.word	0x00030240

000d5900 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <network_set_listen_timeout+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	00030240 	.word	0x00030240

000d5910 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <network_get_listen_timeout+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030240 	.word	0x00030240

000d5920 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <malloc+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	681b      	ldr	r3, [r3, #0]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	0003021c 	.word	0x0003021c

000d5930 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <free+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	685b      	ldr	r3, [r3, #4]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	0003021c 	.word	0x0003021c

000d5940 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <realloc+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	689b      	ldr	r3, [r3, #8]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	0003021c 	.word	0x0003021c

000d5950 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <siscanf+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	699b      	ldr	r3, [r3, #24]
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	0003021c 	.word	0x0003021c

000d5960 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <snprintf+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	69db      	ldr	r3, [r3, #28]
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	0003021c 	.word	0x0003021c

000d5970 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <abort+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	0003021c 	.word	0x0003021c

000d5980 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <_malloc_r+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	0003021c 	.word	0x0003021c

000d5990 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5990:	2100      	movs	r1, #0
   d5992:	f7ff bedf 	b.w	d5754 <system_delay_ms>

000d5996 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5996:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5998:	6883      	ldr	r3, [r0, #8]
   d599a:	4604      	mov	r4, r0
   d599c:	b90b      	cbnz	r3, d59a2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d599e:	f001 fb7e 	bl	d709e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59a2:	68c3      	ldr	r3, [r0, #12]
   d59a4:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d59a6:	68a3      	ldr	r3, [r4, #8]
   d59a8:	b11b      	cbz	r3, d59b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d59aa:	2203      	movs	r2, #3
   d59ac:	4621      	mov	r1, r4
   d59ae:	4620      	mov	r0, r4
   d59b0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d59b2:	4620      	mov	r0, r4
   d59b4:	2110      	movs	r1, #16
}
   d59b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d59ba:	f001 bb6e 	b.w	d709a <_ZdlPvj>

000d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d59be:	680b      	ldr	r3, [r1, #0]
   d59c0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d59c2:	b113      	cbz	r3, d59ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d59c4:	685a      	ldr	r2, [r3, #4]
   d59c6:	3201      	adds	r2, #1
   d59c8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d59ca:	4770      	bx	lr

000d59cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d59cc:	4802      	ldr	r0, [pc, #8]	; (d59d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d59ce:	2300      	movs	r3, #0
   d59d0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d59d2:	f7ff bd37 	b.w	d5444 <os_mutex_recursive_create>
   d59d6:	bf00      	nop
   d59d8:	2003e368 	.word	0x2003e368

000d59dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59dc:	4770      	bx	lr

000d59de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d59de:	2000      	movs	r0, #0
   d59e0:	4770      	bx	lr

000d59e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59e2:	b510      	push	{r4, lr}
   d59e4:	2110      	movs	r1, #16
   d59e6:	4604      	mov	r4, r0
   d59e8:	f001 fb57 	bl	d709a <_ZdlPvj>
   d59ec:	4620      	mov	r0, r4
   d59ee:	bd10      	pop	{r4, pc}

000d59f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d59f0:	b508      	push	{r3, lr}
      { delete this; }
   d59f2:	b108      	cbz	r0, d59f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d59f4:	f7ff fff5 	bl	d59e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d59f8:	bd08      	pop	{r3, pc}

000d59fa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d59fa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d59fc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d59fe:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5a00:	b113      	cbz	r3, d5a08 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a02:	2203      	movs	r2, #3
   d5a04:	4601      	mov	r1, r0
   d5a06:	4798      	blx	r3
    }
   d5a08:	4620      	mov	r0, r4
   d5a0a:	bd10      	pop	{r4, pc}

000d5a0c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a0c:	2200      	movs	r2, #0
   d5a0e:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5a10:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a12:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5a16:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a18:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5a1c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a1e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a20:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a22:	680c      	ldr	r4, [r1, #0]
   d5a24:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a26:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5a28:	bd10      	pop	{r4, pc}

000d5a2a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5a2a:	b510      	push	{r4, lr}
   d5a2c:	4604      	mov	r4, r0
    free((void*)msg_);
   d5a2e:	6800      	ldr	r0, [r0, #0]
   d5a30:	f7ff ff7e 	bl	d5930 <free>
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}

000d5a38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5a38:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5a3a:	68c4      	ldr	r4, [r0, #12]
   d5a3c:	b1f4      	cbz	r4, d5a7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5a3e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5a40:	2b02      	cmp	r3, #2
   d5a42:	d103      	bne.n	d5a4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5a44:	f104 000c 	add.w	r0, r4, #12
   d5a48:	f7ff ffef 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5a4c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5a4e:	b135      	cbz	r5, d5a5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a50:	4628      	mov	r0, r5
   d5a52:	f7ff ffd2 	bl	d59fa <_ZNSt14_Function_baseD1Ev>
   d5a56:	2110      	movs	r1, #16
   d5a58:	4628      	mov	r0, r5
   d5a5a:	f001 fb1e 	bl	d709a <_ZdlPvj>
   d5a5e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5a60:	b135      	cbz	r5, d5a70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5a62:	4628      	mov	r0, r5
   d5a64:	f7ff ffc9 	bl	d59fa <_ZNSt14_Function_baseD1Ev>
   d5a68:	2110      	movs	r1, #16
   d5a6a:	4628      	mov	r0, r5
   d5a6c:	f001 fb15 	bl	d709a <_ZdlPvj>
   d5a70:	4620      	mov	r0, r4
   d5a72:	2114      	movs	r1, #20
   d5a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5a78:	f001 bb0f 	b.w	d709a <_ZdlPvj>
   d5a7c:	bd38      	pop	{r3, r4, r5, pc}

000d5a7e <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d5a7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5a80:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d5a82:	4668      	mov	r0, sp
   d5a84:	f000 fede 	bl	d6844 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a88:	68a3      	ldr	r3, [r4, #8]
   d5a8a:	b90b      	cbnz	r3, d5a90 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d5a8c:	f001 fb07 	bl	d709e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a90:	68e3      	ldr	r3, [r4, #12]
   d5a92:	4669      	mov	r1, sp
   d5a94:	4620      	mov	r0, r4
   d5a96:	4798      	blx	r3
   d5a98:	4604      	mov	r4, r0
   d5a9a:	4668      	mov	r0, sp
   d5a9c:	f000 fe8b 	bl	d67b6 <_ZN6StringD1Ev>
}
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	b004      	add	sp, #16
   d5aa4:	bd10      	pop	{r4, pc}

000d5aa6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5aa8:	2410      	movs	r4, #16
   d5aaa:	b085      	sub	sp, #20
   d5aac:	4607      	mov	r7, r0
   d5aae:	460e      	mov	r6, r1
   d5ab0:	4615      	mov	r5, r2
   d5ab2:	2100      	movs	r1, #0
   d5ab4:	4622      	mov	r2, r4
   d5ab6:	4668      	mov	r0, sp
   d5ab8:	f002 fa51 	bl	d7f5e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5abc:	2200      	movs	r2, #0
   d5abe:	4669      	mov	r1, sp
   d5ac0:	4610      	mov	r0, r2
         size = sizeof(*this);
   d5ac2:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d5ac6:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5ac8:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5aca:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5acc:	f7ff fe88 	bl	d57e0 <spark_function>
}
   d5ad0:	b005      	add	sp, #20
   d5ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ad4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5ad4:	b513      	push	{r0, r1, r4, lr}
   d5ad6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ad8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5adc:	2300      	movs	r3, #0
   d5ade:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5ae0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5ae2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ae4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ae6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5ae8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5aea:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5aec:	f7fe fc0e 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5af0:	4620      	mov	r0, r4
   d5af2:	b002      	add	sp, #8
   d5af4:	bd10      	pop	{r4, pc}

000d5af6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5af8:	460c      	mov	r4, r1
   d5afa:	ad02      	add	r5, sp, #8
   d5afc:	f854 3b04 	ldr.w	r3, [r4], #4
   d5b00:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5b04:	4606      	mov	r6, r0
   d5b06:	460f      	mov	r7, r1
   d5b08:	a801      	add	r0, sp, #4
   d5b0a:	4621      	mov	r1, r4
   d5b0c:	f7ff ff57 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5b10:	4629      	mov	r1, r5
   d5b12:	4630      	mov	r0, r6
   d5b14:	f7ff ffde 	bl	d5ad4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b18:	a801      	add	r0, sp, #4
   d5b1a:	f7fe fbf7 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b1e:	4620      	mov	r0, r4
   d5b20:	f7fe fbf4 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5b24:	4638      	mov	r0, r7
   d5b26:	2108      	movs	r1, #8
   d5b28:	f001 fab7 	bl	d709a <_ZdlPvj>
        return p;
    }
   d5b2c:	4630      	mov	r0, r6
   d5b2e:	b003      	add	sp, #12
   d5b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b32 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5b32:	b513      	push	{r0, r1, r4, lr}
   d5b34:	460b      	mov	r3, r1
   d5b36:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b38:	c803      	ldmia	r0, {r0, r1}
   d5b3a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b3e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5b42:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b46:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5b4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5b4e:	b002      	add	sp, #8
   d5b50:	bd10      	pop	{r4, pc}
	...

000d5b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b54:	b538      	push	{r3, r4, r5, lr}
   d5b56:	2300      	movs	r3, #0
   d5b58:	4604      	mov	r4, r0
   d5b5a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b5c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b5e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b60:	f7fe fa9b 	bl	d409a <_Znwj>
   d5b64:	b128      	cbz	r0, d5b72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5b66:	2301      	movs	r3, #1
   d5b68:	6043      	str	r3, [r0, #4]
   d5b6a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5b6c:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5b6e:	6003      	str	r3, [r0, #0]
   d5b70:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b72:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5b74:	4620      	mov	r0, r4
   d5b76:	bd38      	pop	{r3, r4, r5, pc}
   d5b78:	000d8bcc 	.word	0x000d8bcc

000d5b7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b7c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b7e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b80:	b90a      	cbnz	r2, d5b86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5b82:	f001 fa8c 	bl	d709e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b86:	68c3      	ldr	r3, [r0, #12]
    }
   d5b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b8c:	4718      	bx	r3

000d5b8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5b8e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5b90:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5b92:	f100 0110 	add.w	r1, r0, #16
   d5b96:	f7ff fff1 	bl	d5b7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5b9a:	bd08      	pop	{r3, pc}

000d5b9c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b9c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b9e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ba0:	b90a      	cbnz	r2, d5ba6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5ba2:	f001 fa7c 	bl	d709e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ba6:	68c3      	ldr	r3, [r0, #12]
    }
   d5ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bac:	4718      	bx	r3

000d5bae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5bae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5bb0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5bb2:	f100 0110 	add.w	r1, r0, #16
   d5bb6:	f7ff fff1 	bl	d5b9c <_ZNKSt8functionIFvRKbEEclES1_>
   d5bba:	bd08      	pop	{r3, pc}

000d5bbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bbc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5bbe:	2300      	movs	r3, #0
   d5bc0:	6083      	str	r3, [r0, #8]
   d5bc2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bc4:	4604      	mov	r4, r0
   d5bc6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5bc8:	b12b      	cbz	r3, d5bd6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bca:	2202      	movs	r2, #2
   d5bcc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5bce:	68eb      	ldr	r3, [r5, #12]
   d5bd0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5bd2:	68ab      	ldr	r3, [r5, #8]
   d5bd4:	60a3      	str	r3, [r4, #8]
	}
    }
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bde:	b089      	sub	sp, #36	; 0x24
   d5be0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5be2:	4668      	mov	r0, sp
   d5be4:	f7ff ff12 	bl	d5a0c <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5be8:	2300      	movs	r3, #0
   d5bea:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5bee:	f04f 0202 	mov.w	r2, #2
   d5bf2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5bf6:	2b00      	cmp	r3, #0
   d5bf8:	d103      	bne.n	d5c02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5bfa:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5bfe:	2900      	cmp	r1, #0
   d5c00:	d1f7      	bne.n	d5bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5c02:	d002      	beq.n	d5c0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5c04:	f88d 3008 	strb.w	r3, [sp, #8]
   d5c08:	e063      	b.n	d5cd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5c0a:	f114 050c 	adds.w	r5, r4, #12
   d5c0e:	d003      	beq.n	d5c18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5c10:	4669      	mov	r1, sp
   d5c12:	4628      	mov	r0, r5
   d5c14:	f7ff fefa 	bl	d5a0c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5c18:	f3bf 8f5f 	dmb	sy
   d5c1c:	2301      	movs	r3, #1
   d5c1e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c20:	2000      	movs	r0, #0
   d5c22:	f104 0308 	add.w	r3, r4, #8
   d5c26:	f3bf 8f5f 	dmb	sy
   d5c2a:	e853 6f00 	ldrex	r6, [r3]
   d5c2e:	e843 0200 	strex	r2, r0, [r3]
   d5c32:	2a00      	cmp	r2, #0
   d5c34:	d1f9      	bne.n	d5c2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5c36:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5c3a:	2e00      	cmp	r6, #0
   d5c3c:	d049      	beq.n	d5cd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5c3e:	f7ff fd91 	bl	d5764 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5c42:	b120      	cbz	r0, d5c4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c44:	4629      	mov	r1, r5
   d5c46:	4630      	mov	r0, r6
   d5c48:	f7ff ff98 	bl	d5b7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5c4c:	e03a      	b.n	d5cc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c4e:	4631      	mov	r1, r6
   d5c50:	a802      	add	r0, sp, #8
   d5c52:	f7ff ffb3 	bl	d5bbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5c56:	68e0      	ldr	r0, [r4, #12]
   d5c58:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5c5c:	b108      	cbz	r0, d5c62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5c5e:	f002 f9c1 	bl	d7fe4 <strdup>
   d5c62:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5c64:	2010      	movs	r0, #16
   d5c66:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5c6a:	f7fe fa16 	bl	d409a <_Znwj>
   d5c6e:	4605      	mov	r5, r0
   d5c70:	b1e8      	cbz	r0, d5cae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c72:	2700      	movs	r7, #0
   d5c74:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c76:	2018      	movs	r0, #24
   d5c78:	f7fe fa0f 	bl	d409a <_Znwj>
   d5c7c:	4604      	mov	r4, r0
   d5c7e:	b188      	cbz	r0, d5ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c80:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c82:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c84:	a802      	add	r0, sp, #8
   d5c86:	f7ff ff54 	bl	d5b32 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c8a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5c8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c8e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c90:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5c92:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5c94:	a906      	add	r1, sp, #24
   d5c96:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c98:	60e3      	str	r3, [r4, #12]
   d5c9a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5c9e:	9205      	str	r2, [sp, #20]
   d5ca0:	f7ff feb4 	bl	d5a0c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5ca4:	4b0d      	ldr	r3, [pc, #52]	; (d5cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5ca6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5ca8:	4b0d      	ldr	r3, [pc, #52]	; (d5ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5caa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5cac:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5cae:	a806      	add	r0, sp, #24
   d5cb0:	f7ff febb 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cb4:	a802      	add	r0, sp, #8
   d5cb6:	f7ff fea0 	bl	d59fa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5cba:	2200      	movs	r2, #0
   d5cbc:	4629      	mov	r1, r5
   d5cbe:	4809      	ldr	r0, [pc, #36]	; (d5ce4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5cc0:	f7ff fd58 	bl	d5774 <application_thread_invoke>
   d5cc4:	4630      	mov	r0, r6
   d5cc6:	f7ff fe98 	bl	d59fa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5cca:	2110      	movs	r1, #16
   d5ccc:	4630      	mov	r0, r6
   d5cce:	f001 f9e4 	bl	d709a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5cd2:	4668      	mov	r0, sp
   d5cd4:	f7ff fea9 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
    }
   d5cd8:	b009      	add	sp, #36	; 0x24
   d5cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cdc:	000d5b8f 	.word	0x000d5b8f
   d5ce0:	000d5e05 	.word	0x000d5e05
   d5ce4:	000d5997 	.word	0x000d5997

000d5ce8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cec:	b08b      	sub	sp, #44	; 0x2c
   d5cee:	4606      	mov	r6, r0
   d5cf0:	460f      	mov	r7, r1
   d5cf2:	4690      	mov	r8, r2
   d5cf4:	4699      	mov	r9, r3
   d5cf6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5cfa:	f7ff fd89 	bl	d5810 <spark_cloud_flag_connected>
   d5cfe:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5d00:	4683      	mov	fp, r0
   d5d02:	bb30      	cbnz	r0, d5d52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d04:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5d08:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d0a:	a905      	add	r1, sp, #20
   d5d0c:	4628      	mov	r0, r5
   d5d0e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5d12:	f7ff fe7b 	bl	d5a0c <_ZN8particle5ErrorC1EOS0_>
   d5d16:	2014      	movs	r0, #20
   d5d18:	f7fe f9bf 	bl	d409a <_Znwj>
   d5d1c:	4604      	mov	r4, r0
   d5d1e:	b158      	cbz	r0, d5d38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5d20:	2302      	movs	r3, #2
   d5d22:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d24:	2301      	movs	r3, #1
   d5d26:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d28:	f8c0 b004 	str.w	fp, [r0, #4]
   d5d2c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5d30:	4629      	mov	r1, r5
   d5d32:	300c      	adds	r0, #12
   d5d34:	f7ff fe6a 	bl	d5a0c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5d38:	4630      	mov	r0, r6
   d5d3a:	4621      	mov	r1, r4
   d5d3c:	f840 4b04 	str.w	r4, [r0], #4
   d5d40:	f7ff ff08 	bl	d5b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d44:	4628      	mov	r0, r5
   d5d46:	f7ff fe70 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5d4a:	a805      	add	r0, sp, #20
   d5d4c:	f7ff fe6d 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
   d5d50:	e052      	b.n	d5df8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5d52:	2400      	movs	r4, #0
   d5d54:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5d56:	2014      	movs	r0, #20
   d5d58:	606c      	str	r4, [r5, #4]
   d5d5a:	60ac      	str	r4, [r5, #8]
   d5d5c:	9307      	str	r3, [sp, #28]
   d5d5e:	f7fe f99c 	bl	d409a <_Znwj>
   d5d62:	4601      	mov	r1, r0
   d5d64:	b118      	cbz	r0, d5d6e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5d66:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d68:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d6a:	6044      	str	r4, [r0, #4]
   d5d6c:	6084      	str	r4, [r0, #8]
   d5d6e:	a804      	add	r0, sp, #16
   d5d70:	9103      	str	r1, [sp, #12]
   d5d72:	f7ff feef 	bl	d5b54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5d76:	4b22      	ldr	r3, [pc, #136]	; (d5e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5d78:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5d7a:	2008      	movs	r0, #8
   d5d7c:	f7fe f98d 	bl	d409a <_Znwj>
   d5d80:	4604      	mov	r4, r0
   d5d82:	b128      	cbz	r0, d5d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d84:	9b03      	ldr	r3, [sp, #12]
   d5d86:	f840 3b04 	str.w	r3, [r0], #4
   d5d8a:	a904      	add	r1, sp, #16
   d5d8c:	f7ff fe17 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d90:	9500      	str	r5, [sp, #0]
   d5d92:	fa5f f38a 	uxtb.w	r3, sl
   d5d96:	464a      	mov	r2, r9
   d5d98:	4641      	mov	r1, r8
   d5d9a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5d9c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d9e:	f7ff fd47 	bl	d5830 <spark_send_event>
   d5da2:	b920      	cbnz	r0, d5dae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5da4:	9b03      	ldr	r3, [sp, #12]
   d5da6:	785b      	ldrb	r3, [r3, #1]
   d5da8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5dac:	b183      	cbz	r3, d5dd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5dae:	9b03      	ldr	r3, [sp, #12]
   d5db0:	9305      	str	r3, [sp, #20]
   d5db2:	a904      	add	r1, sp, #16
   d5db4:	a806      	add	r0, sp, #24
   d5db6:	f7ff fe02 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5dba:	a905      	add	r1, sp, #20
   d5dbc:	4630      	mov	r0, r6
   d5dbe:	f7ff fe89 	bl	d5ad4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dc2:	a806      	add	r0, sp, #24
   d5dc4:	f7fe faa2 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dc8:	a804      	add	r0, sp, #16
   d5dca:	f7fe fa9f 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dce:	e013      	b.n	d5df8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5dd0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5dd4:	a905      	add	r1, sp, #20
   d5dd6:	a803      	add	r0, sp, #12
   d5dd8:	9205      	str	r2, [sp, #20]
   d5dda:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5dde:	f7ff fefd 	bl	d5bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5de2:	a805      	add	r0, sp, #20
   d5de4:	f7ff fe21 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5de8:	a805      	add	r0, sp, #20
   d5dea:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5dec:	f7ff fe83 	bl	d5af6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5df0:	a806      	add	r0, sp, #24
   d5df2:	f7fe fa8b 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5df6:	e7da      	b.n	d5dae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5df8:	4630      	mov	r0, r6
   d5dfa:	b00b      	add	sp, #44	; 0x2c
   d5dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5e00:	000d5f75 	.word	0x000d5f75

000d5e04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e0a:	d006      	beq.n	d5e1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5e0c:	2a03      	cmp	r2, #3
   d5e0e:	d017      	beq.n	d5e40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5e10:	2a01      	cmp	r2, #1
   d5e12:	d122      	bne.n	d5e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e16:	6003      	str	r3, [r0, #0]
	      break;
   d5e18:	e01f      	b.n	d5e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e1a:	2018      	movs	r0, #24
   d5e1c:	680e      	ldr	r6, [r1, #0]
   d5e1e:	f7fe f93c 	bl	d409a <_Znwj>
   d5e22:	4605      	mov	r5, r0
   d5e24:	b150      	cbz	r0, d5e3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e26:	4631      	mov	r1, r6
   d5e28:	f7ff fec8 	bl	d5bbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5e2c:	6930      	ldr	r0, [r6, #16]
   d5e2e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5e32:	b108      	cbz	r0, d5e38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5e34:	f002 f8d6 	bl	d7fe4 <strdup>
   d5e38:	6128      	str	r0, [r5, #16]
   d5e3a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e3c:	6025      	str	r5, [r4, #0]
   d5e3e:	e00c      	b.n	d5e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e40:	6804      	ldr	r4, [r0, #0]
   d5e42:	b154      	cbz	r4, d5e5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5e44:	f104 0010 	add.w	r0, r4, #16
   d5e48:	f7ff fdef 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	f7ff fdd4 	bl	d59fa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e52:	2118      	movs	r1, #24
   d5e54:	4620      	mov	r0, r4
   d5e56:	f001 f920 	bl	d709a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5e5a:	2000      	movs	r0, #0
   d5e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e5e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e5e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e60:	2300      	movs	r3, #0
   d5e62:	6083      	str	r3, [r0, #8]
   d5e64:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e66:	4604      	mov	r4, r0
   d5e68:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5e6a:	b12b      	cbz	r3, d5e78 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e6c:	2202      	movs	r2, #2
   d5e6e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e70:	68eb      	ldr	r3, [r5, #12]
   d5e72:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e74:	68ab      	ldr	r3, [r5, #8]
   d5e76:	60a3      	str	r3, [r4, #8]
	}
    }
   d5e78:	4620      	mov	r0, r4
   d5e7a:	bd38      	pop	{r3, r4, r5, pc}

000d5e7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e7c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e7e:	b570      	push	{r4, r5, r6, lr}
   d5e80:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e82:	d006      	beq.n	d5e92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5e84:	2a03      	cmp	r2, #3
   d5e86:	d011      	beq.n	d5eac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5e88:	2a01      	cmp	r2, #1
   d5e8a:	d118      	bne.n	d5ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e8c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e8e:	6003      	str	r3, [r0, #0]
	      break;
   d5e90:	e015      	b.n	d5ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e92:	2014      	movs	r0, #20
   d5e94:	680e      	ldr	r6, [r1, #0]
   d5e96:	f7fe f900 	bl	d409a <_Znwj>
   d5e9a:	4605      	mov	r5, r0
   d5e9c:	b120      	cbz	r0, d5ea8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e9e:	4631      	mov	r1, r6
   d5ea0:	f7ff ffdd 	bl	d5e5e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5ea4:	7c33      	ldrb	r3, [r6, #16]
   d5ea6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5ea8:	6025      	str	r5, [r4, #0]
   d5eaa:	e008      	b.n	d5ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5eac:	6804      	ldr	r4, [r0, #0]
   d5eae:	b134      	cbz	r4, d5ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5eb0:	4620      	mov	r0, r4
   d5eb2:	f7ff fda2 	bl	d59fa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5eb6:	2114      	movs	r1, #20
   d5eb8:	4620      	mov	r0, r4
   d5eba:	f001 f8ee 	bl	d709a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5ebe:	2000      	movs	r0, #0
   d5ec0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5ec4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5ec4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ec6:	2300      	movs	r3, #0
   d5ec8:	b087      	sub	sp, #28
   d5eca:	460c      	mov	r4, r1
   d5ecc:	f3bf 8f5f 	dmb	sy
   d5ed0:	e850 6f00 	ldrex	r6, [r0]
   d5ed4:	e840 3200 	strex	r2, r3, [r0]
   d5ed8:	2a00      	cmp	r2, #0
   d5eda:	d1f9      	bne.n	d5ed0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5edc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5ee0:	2e00      	cmp	r6, #0
   d5ee2:	d03f      	beq.n	d5f64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ee4:	4618      	mov	r0, r3
   d5ee6:	f7ff fc3d 	bl	d5764 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5eea:	4607      	mov	r7, r0
   d5eec:	b120      	cbz	r0, d5ef8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5eee:	4621      	mov	r1, r4
   d5ef0:	4630      	mov	r0, r6
   d5ef2:	f7ff fe53 	bl	d5b9c <_ZNKSt8functionIFvRKbEEclES1_>
   d5ef6:	e02e      	b.n	d5f56 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ef8:	4631      	mov	r1, r6
   d5efa:	a801      	add	r0, sp, #4
   d5efc:	f7ff ffaf 	bl	d5e5e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f00:	7823      	ldrb	r3, [r4, #0]
   d5f02:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f06:	2010      	movs	r0, #16
   d5f08:	f7fe f8c7 	bl	d409a <_Znwj>
   d5f0c:	4605      	mov	r5, r0
   d5f0e:	b1d0      	cbz	r0, d5f46 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f10:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f12:	2014      	movs	r0, #20
   d5f14:	f7fe f8c1 	bl	d409a <_Znwj>
   d5f18:	4604      	mov	r4, r0
   d5f1a:	b178      	cbz	r0, d5f3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f1c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f1e:	4601      	mov	r1, r0
   d5f20:	a801      	add	r0, sp, #4
   d5f22:	f7ff fe06 	bl	d5b32 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f26:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5f28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f2a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f2c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f2e:	9203      	str	r2, [sp, #12]
   d5f30:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f32:	60e3      	str	r3, [r4, #12]
   d5f34:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f38:	9204      	str	r2, [sp, #16]
   d5f3a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f3c:	4b0a      	ldr	r3, [pc, #40]	; (d5f68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5f3e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f40:	4b0a      	ldr	r3, [pc, #40]	; (d5f6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f42:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f44:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f46:	a801      	add	r0, sp, #4
   d5f48:	f7ff fd57 	bl	d59fa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f4c:	2200      	movs	r2, #0
   d5f4e:	4629      	mov	r1, r5
   d5f50:	4807      	ldr	r0, [pc, #28]	; (d5f70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5f52:	f7ff fc0f 	bl	d5774 <application_thread_invoke>
   d5f56:	4630      	mov	r0, r6
   d5f58:	f7ff fd4f 	bl	d59fa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5f5c:	2110      	movs	r1, #16
   d5f5e:	4630      	mov	r0, r6
   d5f60:	f001 f89b 	bl	d709a <_ZdlPvj>
        }
    }
   d5f64:	b007      	add	sp, #28
   d5f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f68:	000d5baf 	.word	0x000d5baf
   d5f6c:	000d5e7d 	.word	0x000d5e7d
   d5f70:	000d5997 	.word	0x000d5997

000d5f74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5f74:	b530      	push	{r4, r5, lr}
   d5f76:	b085      	sub	sp, #20
   d5f78:	4604      	mov	r4, r0
   d5f7a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5f7c:	4668      	mov	r0, sp
   d5f7e:	4611      	mov	r1, r2
   d5f80:	f7ff fdb9 	bl	d5af6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5f84:	b17c      	cbz	r4, d5fa6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5f86:	b224      	sxth	r4, r4
   d5f88:	4628      	mov	r0, r5
   d5f8a:	b10d      	cbz	r5, d5f90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5f8c:	f002 f82a 	bl	d7fe4 <strdup>
   d5f90:	9002      	str	r0, [sp, #8]
   d5f92:	a902      	add	r1, sp, #8
   d5f94:	4668      	mov	r0, sp
   d5f96:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5f9a:	f7ff fe1f 	bl	d5bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5f9e:	a802      	add	r0, sp, #8
   d5fa0:	f7ff fd43 	bl	d5a2a <_ZN8particle5ErrorD1Ev>
   d5fa4:	e01d      	b.n	d5fe2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5fa6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5fa8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5fac:	f04f 0201 	mov.w	r2, #1
   d5fb0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5fb4:	42a3      	cmp	r3, r4
   d5fb6:	d103      	bne.n	d5fc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5fb8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5fbc:	2900      	cmp	r1, #0
   d5fbe:	d1f7      	bne.n	d5fb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5fc0:	d002      	beq.n	d5fc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5fc2:	f88d 3008 	strb.w	r3, [sp, #8]
   d5fc6:	e00c      	b.n	d5fe2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5fc8:	f110 010c 	adds.w	r1, r0, #12
   d5fcc:	f04f 0301 	mov.w	r3, #1
   d5fd0:	bf18      	it	ne
   d5fd2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5fd4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5fd8:	3004      	adds	r0, #4
   d5fda:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5fde:	f7ff ff71 	bl	d5ec4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5fe2:	a801      	add	r0, sp, #4
   d5fe4:	f7fe f992 	bl	d430c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5fe8:	b005      	add	sp, #20
   d5fea:	bd30      	pop	{r4, r5, pc}

000d5fec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fec:	2200      	movs	r2, #0
   d5fee:	4611      	mov	r1, r2
   d5ff0:	6840      	ldr	r0, [r0, #4]
   d5ff2:	f7ff bc7d 	b.w	d58f0 <network_listening>

000d5ff6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ff6:	2200      	movs	r2, #0
   d5ff8:	4611      	mov	r1, r2
   d5ffa:	6840      	ldr	r0, [r0, #4]
   d5ffc:	f7ff bc88 	b.w	d5910 <network_get_listen_timeout>

000d6000 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6000:	2200      	movs	r2, #0
   d6002:	6840      	ldr	r0, [r0, #4]
   d6004:	f7ff bc7c 	b.w	d5900 <network_set_listen_timeout>

000d6008 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6008:	2200      	movs	r2, #0
   d600a:	f081 0101 	eor.w	r1, r1, #1
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	f7ff bc66 	b.w	d58e0 <network_listen>

000d6014 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6014:	2300      	movs	r3, #0
   d6016:	461a      	mov	r2, r3
   d6018:	4619      	mov	r1, r3
   d601a:	6840      	ldr	r0, [r0, #4]
   d601c:	f7ff bc58 	b.w	d58d0 <network_off>

000d6020 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6020:	2300      	movs	r3, #0
   d6022:	461a      	mov	r2, r3
   d6024:	4619      	mov	r1, r3
   d6026:	6840      	ldr	r0, [r0, #4]
   d6028:	f7ff bc4a 	b.w	d58c0 <network_on>

000d602c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d602c:	2200      	movs	r2, #0
   d602e:	4611      	mov	r1, r2
   d6030:	6840      	ldr	r0, [r0, #4]
   d6032:	f7ff bc3d 	b.w	d58b0 <network_ready>

000d6036 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6036:	2200      	movs	r2, #0
   d6038:	4611      	mov	r1, r2
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f7ff bc28 	b.w	d5890 <network_connecting>

000d6040 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6040:	2200      	movs	r2, #0
   d6042:	2102      	movs	r1, #2
   d6044:	6840      	ldr	r0, [r0, #4]
   d6046:	f7ff bc2b 	b.w	d58a0 <network_disconnect>

000d604a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d604a:	2300      	movs	r3, #0
   d604c:	461a      	mov	r2, r3
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7ff bc16 	b.w	d5880 <network_connect>

000d6054 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6054:	4b02      	ldr	r3, [pc, #8]	; (d6060 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6056:	2203      	movs	r2, #3
   d6058:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d605a:	4a02      	ldr	r2, [pc, #8]	; (d6064 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d605c:	601a      	str	r2, [r3, #0]
   d605e:	4770      	bx	lr
   d6060:	2003e36c 	.word	0x2003e36c
   d6064:	000d8be8 	.word	0x000d8be8

000d6068 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6068:	4770      	bx	lr

000d606a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d606a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d606c:	4606      	mov	r6, r0
   d606e:	4615      	mov	r5, r2
   d6070:	460c      	mov	r4, r1
   d6072:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6074:	42bc      	cmp	r4, r7
   d6076:	d006      	beq.n	d6086 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6078:	6833      	ldr	r3, [r6, #0]
   d607a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d607e:	689b      	ldr	r3, [r3, #8]
   d6080:	4630      	mov	r0, r6
   d6082:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6084:	e7f6      	b.n	d6074 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6086:	4628      	mov	r0, r5
   d6088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d608a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d608a:	2200      	movs	r2, #0
   d608c:	7c00      	ldrb	r0, [r0, #16]
   d608e:	f7ff ba69 	b.w	d5564 <HAL_I2C_Write_Data>

000d6092 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6092:	2100      	movs	r1, #0
   d6094:	7c00      	ldrb	r0, [r0, #16]
   d6096:	f7ff ba6d 	b.w	d5574 <HAL_I2C_Available_Data>

000d609a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d609a:	2100      	movs	r1, #0
   d609c:	7c00      	ldrb	r0, [r0, #16]
   d609e:	f7ff ba71 	b.w	d5584 <HAL_I2C_Read_Data>

000d60a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d60a2:	2100      	movs	r1, #0
   d60a4:	7c00      	ldrb	r0, [r0, #16]
   d60a6:	f7ff ba75 	b.w	d5594 <HAL_I2C_Peek_Data>

000d60aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d60aa:	2100      	movs	r1, #0
   d60ac:	7c00      	ldrb	r0, [r0, #16]
   d60ae:	f7ff ba79 	b.w	d55a4 <HAL_I2C_Flush_Data>

000d60b2 <_ZN7TwoWireD0Ev>:
   d60b2:	b510      	push	{r4, lr}
   d60b4:	2114      	movs	r1, #20
   d60b6:	4604      	mov	r4, r0
   d60b8:	f000 ffef 	bl	d709a <_ZdlPvj>
   d60bc:	4620      	mov	r0, r4
   d60be:	bd10      	pop	{r4, pc}

000d60c0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60c0:	b510      	push	{r4, lr}
   d60c2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d60c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60c8:	4608      	mov	r0, r1
   d60ca:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d60cc:	2100      	movs	r1, #0
   d60ce:	4b04      	ldr	r3, [pc, #16]	; (d60e0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d60d0:	7420      	strb	r0, [r4, #16]
   d60d2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60d4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d60d6:	f7ff fa75 	bl	d55c4 <HAL_I2C_Init>

}
   d60da:	4620      	mov	r0, r4
   d60dc:	bd10      	pop	{r4, pc}
   d60de:	bf00      	nop
   d60e0:	000d8c1c 	.word	0x000d8c1c

000d60e4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d60e4:	2100      	movs	r1, #0
   d60e6:	7c00      	ldrb	r0, [r0, #16]
   d60e8:	f7ff ba64 	b.w	d55b4 <HAL_I2C_Is_Enabled>

000d60ec <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d60ec:	f7ff ba2a 	b.w	d5544 <HAL_Interrupts_Disable_All>

000d60f0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d60f0:	f7ff ba20 	b.w	d5534 <HAL_Interrupts_Enable_All>

000d60f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d60f4:	4770      	bx	lr

000d60f6 <_ZN9IPAddressD0Ev>:
   d60f6:	b510      	push	{r4, lr}
   d60f8:	2118      	movs	r1, #24
   d60fa:	4604      	mov	r4, r0
   d60fc:	f000 ffcd 	bl	d709a <_ZdlPvj>
   d6100:	4620      	mov	r0, r4
   d6102:	bd10      	pop	{r4, pc}

000d6104 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6104:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6106:	7d03      	ldrb	r3, [r0, #20]
   d6108:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d610a:	b08d      	sub	sp, #52	; 0x34
   d610c:	460e      	mov	r6, r1
   d610e:	f100 0704 	add.w	r7, r0, #4
   d6112:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6116:	d002      	beq.n	d611e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6118:	f100 0508 	add.w	r5, r0, #8
   d611c:	e018      	b.n	d6150 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d611e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6120:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6122:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6126:	232f      	movs	r3, #47	; 0x2f
   d6128:	462a      	mov	r2, r5
   d612a:	200a      	movs	r0, #10
   d612c:	f7ff fa52 	bl	d55d4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6130:	4628      	mov	r0, r5
   d6132:	f001 ff72 	bl	d801a <strlen>
   d6136:	6833      	ldr	r3, [r6, #0]
   d6138:	4602      	mov	r2, r0
   d613a:	68db      	ldr	r3, [r3, #12]
   d613c:	4629      	mov	r1, r5
   d613e:	4630      	mov	r0, r6
   d6140:	4798      	blx	r3
   d6142:	e00f      	b.n	d6164 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6144:	b124      	cbz	r4, d6150 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6146:	212e      	movs	r1, #46	; 0x2e
   d6148:	4630      	mov	r0, r6
   d614a:	f000 f9c9 	bl	d64e0 <_ZN5Print5printEc>
   d614e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6150:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6154:	220a      	movs	r2, #10
   d6156:	4630      	mov	r0, r6
   d6158:	f000 fa08 	bl	d656c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d615c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d615e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6160:	d1f0      	bne.n	d6144 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6162:	4620      	mov	r0, r4
    }
    return n;
}
   d6164:	b00d      	add	sp, #52	; 0x34
   d6166:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6168 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6168:	b510      	push	{r4, lr}
   d616a:	4b05      	ldr	r3, [pc, #20]	; (d6180 <_ZN9IPAddressC1Ev+0x18>)
   d616c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d616e:	2211      	movs	r2, #17
   d6170:	f840 3b04 	str.w	r3, [r0], #4
   d6174:	2100      	movs	r1, #0
   d6176:	f001 fef2 	bl	d7f5e <memset>
{
    clear();
}
   d617a:	4620      	mov	r0, r4
   d617c:	bd10      	pop	{r4, pc}
   d617e:	bf00      	nop
   d6180:	000d8c44 	.word	0x000d8c44

000d6184 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6184:	4603      	mov	r3, r0
   d6186:	4a07      	ldr	r2, [pc, #28]	; (d61a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6188:	b510      	push	{r4, lr}
   d618a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d618e:	f101 0210 	add.w	r2, r1, #16
   d6192:	f851 4b04 	ldr.w	r4, [r1], #4
   d6196:	f843 4b04 	str.w	r4, [r3], #4
   d619a:	4291      	cmp	r1, r2
   d619c:	d1f9      	bne.n	d6192 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d619e:	780a      	ldrb	r2, [r1, #0]
   d61a0:	701a      	strb	r2, [r3, #0]
}
   d61a2:	bd10      	pop	{r4, pc}
   d61a4:	000d8c44 	.word	0x000d8c44

000d61a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d61a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d61aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d61ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d61b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d61b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d61ba:	2304      	movs	r3, #4
   d61bc:	6041      	str	r1, [r0, #4]
   d61be:	7503      	strb	r3, [r0, #20]
   d61c0:	bd10      	pop	{r4, pc}

000d61c2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d61c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d61c4:	780d      	ldrb	r5, [r1, #0]
   d61c6:	788b      	ldrb	r3, [r1, #2]
   d61c8:	784a      	ldrb	r2, [r1, #1]
   d61ca:	78c9      	ldrb	r1, [r1, #3]
   d61cc:	9100      	str	r1, [sp, #0]
   d61ce:	4629      	mov	r1, r5
   d61d0:	f7ff ffea 	bl	d61a8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d61d4:	b003      	add	sp, #12
   d61d6:	bd30      	pop	{r4, r5, pc}

000d61d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d61d8:	4b01      	ldr	r3, [pc, #4]	; (d61e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d61da:	4a02      	ldr	r2, [pc, #8]	; (d61e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d61dc:	601a      	str	r2, [r3, #0]
   d61de:	4770      	bx	lr
   d61e0:	2003e374 	.word	0x2003e374
   d61e4:	000d8cc3 	.word	0x000d8cc3

000d61e8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61e8:	2200      	movs	r2, #0
   d61ea:	4611      	mov	r1, r2
   d61ec:	6840      	ldr	r0, [r0, #4]
   d61ee:	f7ff bb7f 	b.w	d58f0 <network_listening>

000d61f2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d61f2:	2200      	movs	r2, #0
   d61f4:	4611      	mov	r1, r2
   d61f6:	6840      	ldr	r0, [r0, #4]
   d61f8:	f7ff bb8a 	b.w	d5910 <network_get_listen_timeout>

000d61fc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d61fc:	2200      	movs	r2, #0
   d61fe:	6840      	ldr	r0, [r0, #4]
   d6200:	f7ff bb7e 	b.w	d5900 <network_set_listen_timeout>

000d6204 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6204:	2200      	movs	r2, #0
   d6206:	f081 0101 	eor.w	r1, r1, #1
   d620a:	6840      	ldr	r0, [r0, #4]
   d620c:	f7ff bb68 	b.w	d58e0 <network_listen>

000d6210 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6210:	2300      	movs	r3, #0
   d6212:	461a      	mov	r2, r3
   d6214:	2101      	movs	r1, #1
   d6216:	6840      	ldr	r0, [r0, #4]
   d6218:	f7ff bb5a 	b.w	d58d0 <network_off>

000d621c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d621c:	2300      	movs	r3, #0
   d621e:	461a      	mov	r2, r3
   d6220:	4619      	mov	r1, r3
   d6222:	6840      	ldr	r0, [r0, #4]
   d6224:	f7ff bb4c 	b.w	d58c0 <network_on>

000d6228 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6228:	2200      	movs	r2, #0
   d622a:	4611      	mov	r1, r2
   d622c:	6840      	ldr	r0, [r0, #4]
   d622e:	f7ff bb3f 	b.w	d58b0 <network_ready>

000d6232 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6232:	2200      	movs	r2, #0
   d6234:	4611      	mov	r1, r2
   d6236:	6840      	ldr	r0, [r0, #4]
   d6238:	f7ff bb2a 	b.w	d5890 <network_connecting>

000d623c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d623c:	2200      	movs	r2, #0
   d623e:	2102      	movs	r1, #2
   d6240:	6840      	ldr	r0, [r0, #4]
   d6242:	f7ff bb2d 	b.w	d58a0 <network_disconnect>

000d6246 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6246:	2300      	movs	r3, #0
   d6248:	461a      	mov	r2, r3
   d624a:	6840      	ldr	r0, [r0, #4]
   d624c:	f7ff bb18 	b.w	d5880 <network_connect>

000d6250 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6250:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6252:	4605      	mov	r5, r0
   d6254:	b188      	cbz	r0, d627a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6256:	6804      	ldr	r4, [r0, #0]
   d6258:	b14c      	cbz	r4, d626e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d625a:	68a3      	ldr	r3, [r4, #8]
   d625c:	b11b      	cbz	r3, d6266 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d625e:	2203      	movs	r2, #3
   d6260:	4621      	mov	r1, r4
   d6262:	4620      	mov	r0, r4
   d6264:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6266:	2110      	movs	r1, #16
   d6268:	4620      	mov	r0, r4
   d626a:	f000 ff16 	bl	d709a <_ZdlPvj>
   d626e:	4628      	mov	r0, r5
   d6270:	2114      	movs	r1, #20
      }
   d6272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6276:	f000 bf10 	b.w	d709a <_ZdlPvj>
   d627a:	bd38      	pop	{r3, r4, r5, pc}

000d627c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d627c:	b110      	cbz	r0, d6284 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d627e:	6803      	ldr	r3, [r0, #0]
   d6280:	685b      	ldr	r3, [r3, #4]
   d6282:	4718      	bx	r3
   d6284:	4770      	bx	lr

000d6286 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6286:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6288:	6803      	ldr	r3, [r0, #0]
   d628a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d628c:	b1bb      	cbz	r3, d62be <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d628e:	6858      	ldr	r0, [r3, #4]
   d6290:	f7ff f8b8 	bl	d5404 <os_thread_is_current>
   d6294:	b978      	cbnz	r0, d62b6 <_ZN6ThreadD1Ev+0x30>
   d6296:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6298:	7c5a      	ldrb	r2, [r3, #17]
   d629a:	b912      	cbnz	r2, d62a2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d629c:	6858      	ldr	r0, [r3, #4]
   d629e:	f7ff f8b9 	bl	d5414 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d62a2:	6823      	ldr	r3, [r4, #0]
   d62a4:	6858      	ldr	r0, [r3, #4]
   d62a6:	f7ff f8bd 	bl	d5424 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62aa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62ac:	2300      	movs	r3, #0
   d62ae:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d62b0:	b128      	cbz	r0, d62be <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d62b2:	f7ff ffcd 	bl	d6250 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62b6:	6820      	ldr	r0, [r4, #0]
   d62b8:	b108      	cbz	r0, d62be <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d62ba:	f7ff ffc9 	bl	d6250 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d62be:	4620      	mov	r0, r4
   d62c0:	bd10      	pop	{r4, pc}
	...

000d62c4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62c4:	b538      	push	{r3, r4, r5, lr}
   d62c6:	4b0c      	ldr	r3, [pc, #48]	; (d62f8 <_ZN5spark9MeshClassD1Ev+0x34>)
   d62c8:	6003      	str	r3, [r0, #0]
   d62ca:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62cc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d62d0:	b108      	cbz	r0, d62d6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d62d2:	f7fd fee6 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62d6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d62da:	b135      	cbz	r5, d62ea <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62dc:	4628      	mov	r0, r5
   d62de:	f7ff ffd2 	bl	d6286 <_ZN6ThreadD1Ev>
   d62e2:	2104      	movs	r1, #4
   d62e4:	4628      	mov	r0, r5
   d62e6:	f000 fed8 	bl	d709a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62ea:	68a0      	ldr	r0, [r4, #8]
   d62ec:	b108      	cbz	r0, d62f2 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d62ee:	f7ff ffc5 	bl	d627c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d62f2:	4620      	mov	r0, r4
   d62f4:	bd38      	pop	{r3, r4, r5, pc}
   d62f6:	bf00      	nop
   d62f8:	000d8d34 	.word	0x000d8d34

000d62fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d62fc:	b538      	push	{r3, r4, r5, lr}
   d62fe:	4c0e      	ldr	r4, [pc, #56]	; (d6338 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6300:	4b0e      	ldr	r3, [pc, #56]	; (d633c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6302:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6304:	2500      	movs	r5, #0
   d6306:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6308:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d630c:	6063      	str	r3, [r4, #4]
   d630e:	60a5      	str	r5, [r4, #8]
   d6310:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6314:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6318:	f7ff f894 	bl	d5444 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d631c:	4b08      	ldr	r3, [pc, #32]	; (d6340 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d631e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6322:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6326:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6328:	4620      	mov	r0, r4
   d632a:	4a06      	ldr	r2, [pc, #24]	; (d6344 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d632c:	4906      	ldr	r1, [pc, #24]	; (d6348 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d632e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6332:	f000 bead 	b.w	d7090 <__aeabi_atexit>
   d6336:	bf00      	nop
   d6338:	2003e378 	.word	0x2003e378
   d633c:	000d8d68 	.word	0x000d8d68
   d6340:	000d8d34 	.word	0x000d8d34
   d6344:	2003e2b0 	.word	0x2003e2b0
   d6348:	000d62c5 	.word	0x000d62c5

000d634c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d634c:	2300      	movs	r3, #0
   d634e:	461a      	mov	r2, r3
   d6350:	6840      	ldr	r0, [r0, #4]
   d6352:	f7ff ba95 	b.w	d5880 <network_connect>

000d6356 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6356:	2200      	movs	r2, #0
   d6358:	2102      	movs	r1, #2
   d635a:	6840      	ldr	r0, [r0, #4]
   d635c:	f7ff baa0 	b.w	d58a0 <network_disconnect>

000d6360 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6360:	2200      	movs	r2, #0
   d6362:	4611      	mov	r1, r2
   d6364:	6840      	ldr	r0, [r0, #4]
   d6366:	f7ff ba93 	b.w	d5890 <network_connecting>

000d636a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d636a:	2200      	movs	r2, #0
   d636c:	4611      	mov	r1, r2
   d636e:	6840      	ldr	r0, [r0, #4]
   d6370:	f7ff ba9e 	b.w	d58b0 <network_ready>

000d6374 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6374:	2300      	movs	r3, #0
   d6376:	461a      	mov	r2, r3
   d6378:	4619      	mov	r1, r3
   d637a:	6840      	ldr	r0, [r0, #4]
   d637c:	f7ff baa0 	b.w	d58c0 <network_on>

000d6380 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6380:	2300      	movs	r3, #0
   d6382:	461a      	mov	r2, r3
   d6384:	4619      	mov	r1, r3
   d6386:	6840      	ldr	r0, [r0, #4]
   d6388:	f7ff baa2 	b.w	d58d0 <network_off>

000d638c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d638c:	2200      	movs	r2, #0
   d638e:	f081 0101 	eor.w	r1, r1, #1
   d6392:	6840      	ldr	r0, [r0, #4]
   d6394:	f7ff baa4 	b.w	d58e0 <network_listen>

000d6398 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6398:	2200      	movs	r2, #0
   d639a:	6840      	ldr	r0, [r0, #4]
   d639c:	f7ff bab0 	b.w	d5900 <network_set_listen_timeout>

000d63a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63a0:	2200      	movs	r2, #0
   d63a2:	4611      	mov	r1, r2
   d63a4:	6840      	ldr	r0, [r0, #4]
   d63a6:	f7ff bab3 	b.w	d5910 <network_get_listen_timeout>

000d63aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63aa:	2200      	movs	r2, #0
   d63ac:	4611      	mov	r1, r2
   d63ae:	6840      	ldr	r0, [r0, #4]
   d63b0:	f7ff ba9e 	b.w	d58f0 <network_listening>

000d63b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63b8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d63ba:	b095      	sub	sp, #84	; 0x54
   d63bc:	4616      	mov	r6, r2
   d63be:	460d      	mov	r5, r1
   d63c0:	4607      	mov	r7, r0
    IPAddress addr;
   d63c2:	f7ff fed1 	bl	d6168 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d63c6:	4621      	mov	r1, r4
   d63c8:	2220      	movs	r2, #32
   d63ca:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63cc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d63ce:	f001 fdc6 	bl	d7f5e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d63d2:	2340      	movs	r3, #64	; 0x40
   d63d4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d63d6:	4621      	mov	r1, r4
   d63d8:	466b      	mov	r3, sp
   d63da:	aa0c      	add	r2, sp, #48	; 0x30
   d63dc:	4630      	mov	r0, r6
   d63de:	f7ff f909 	bl	d55f4 <netdb_getaddrinfo>
    if (!r) {
   d63e2:	4604      	mov	r4, r0
   d63e4:	2800      	cmp	r0, #0
   d63e6:	d144      	bne.n	d6472 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63e8:	4602      	mov	r2, r0
   d63ea:	2101      	movs	r1, #1
   d63ec:	6868      	ldr	r0, [r5, #4]
   d63ee:	f7ff fa5f 	bl	d58b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63f2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63f4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63f6:	4622      	mov	r2, r4
   d63f8:	6868      	ldr	r0, [r5, #4]
   d63fa:	f7ff fa59 	bl	d58b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63fe:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6400:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6402:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6404:	2e00      	cmp	r6, #0
   d6406:	d034      	beq.n	d6472 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6408:	2900      	cmp	r1, #0
   d640a:	d132      	bne.n	d6472 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d640c:	6873      	ldr	r3, [r6, #4]
   d640e:	2b02      	cmp	r3, #2
   d6410:	d002      	beq.n	d6418 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6412:	2b0a      	cmp	r3, #10
   d6414:	d009      	beq.n	d642a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6416:	e02a      	b.n	d646e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6418:	f1b8 0f00 	cmp.w	r8, #0
   d641c:	d027      	beq.n	d646e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d641e:	6971      	ldr	r1, [r6, #20]
   d6420:	4638      	mov	r0, r7
   d6422:	3104      	adds	r1, #4
   d6424:	f7ff fecd 	bl	d61c2 <_ZN9IPAddressaSEPKh>
   d6428:	e020      	b.n	d646c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d642a:	f1b9 0f00 	cmp.w	r9, #0
   d642e:	d01e      	beq.n	d646e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6430:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6432:	2211      	movs	r2, #17
   d6434:	a801      	add	r0, sp, #4
   d6436:	f001 fd92 	bl	d7f5e <memset>
                    a.v = 6;
   d643a:	2306      	movs	r3, #6
   d643c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6440:	ad01      	add	r5, sp, #4
   d6442:	f104 0308 	add.w	r3, r4, #8
   d6446:	3418      	adds	r4, #24
   d6448:	6818      	ldr	r0, [r3, #0]
   d644a:	6859      	ldr	r1, [r3, #4]
   d644c:	462a      	mov	r2, r5
   d644e:	c203      	stmia	r2!, {r0, r1}
   d6450:	3308      	adds	r3, #8
   d6452:	42a3      	cmp	r3, r4
   d6454:	4615      	mov	r5, r2
   d6456:	d1f7      	bne.n	d6448 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6458:	a901      	add	r1, sp, #4
   d645a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d645c:	ad07      	add	r5, sp, #28
   d645e:	f7ff fe91 	bl	d6184 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6464:	1d3c      	adds	r4, r7, #4
   d6466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6468:	682b      	ldr	r3, [r5, #0]
   d646a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d646c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d646e:	69f6      	ldr	r6, [r6, #28]
   d6470:	e7c8      	b.n	d6404 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6472:	9800      	ldr	r0, [sp, #0]
   d6474:	f7ff f8b6 	bl	d55e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6478:	4638      	mov	r0, r7
   d647a:	b015      	add	sp, #84	; 0x54
   d647c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6480 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6480:	4b02      	ldr	r3, [pc, #8]	; (d648c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6482:	4a03      	ldr	r2, [pc, #12]	; (d6490 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6484:	601a      	str	r2, [r3, #0]
   d6486:	2200      	movs	r2, #0
   d6488:	605a      	str	r2, [r3, #4]
   d648a:	4770      	bx	lr
   d648c:	2003e54c 	.word	0x2003e54c
   d6490:	000d8d68 	.word	0x000d8d68

000d6494 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6496:	4606      	mov	r6, r0
   d6498:	460d      	mov	r5, r1
   d649a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d649c:	2400      	movs	r4, #0
  while (size--) {
   d649e:	42bd      	cmp	r5, r7
   d64a0:	d00c      	beq.n	d64bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d64a2:	6833      	ldr	r3, [r6, #0]
   d64a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64a8:	689b      	ldr	r3, [r3, #8]
   d64aa:	4630      	mov	r0, r6
   d64ac:	4798      	blx	r3
     if (chunk>=0)
   d64ae:	2800      	cmp	r0, #0
   d64b0:	db01      	blt.n	d64b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d64b2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d64b4:	e7f3      	b.n	d649e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d64b6:	2c00      	cmp	r4, #0
   d64b8:	bf08      	it	eq
   d64ba:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d64bc:	4620      	mov	r0, r4
   d64be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d64c0:	b570      	push	{r4, r5, r6, lr}
   d64c2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d64c4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d64c6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d64c8:	b149      	cbz	r1, d64de <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d64ca:	f001 fda6 	bl	d801a <strlen>
   d64ce:	682b      	ldr	r3, [r5, #0]
   d64d0:	4602      	mov	r2, r0
   d64d2:	4621      	mov	r1, r4
   d64d4:	4628      	mov	r0, r5
   d64d6:	68db      	ldr	r3, [r3, #12]
    }
   d64d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d64dc:	4718      	bx	r3
    }
   d64de:	bd70      	pop	{r4, r5, r6, pc}

000d64e0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d64e0:	6803      	ldr	r3, [r0, #0]
   d64e2:	689b      	ldr	r3, [r3, #8]
   d64e4:	4718      	bx	r3

000d64e6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64e6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64e8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64ea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64ec:	f7ff fff8 	bl	d64e0 <_ZN5Print5printEc>
  n += print('\n');
   d64f0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d64f2:	4604      	mov	r4, r0
  n += print('\n');
   d64f4:	4628      	mov	r0, r5
   d64f6:	f7ff fff3 	bl	d64e0 <_ZN5Print5printEc>
  return n;
}
   d64fa:	4420      	add	r0, r4
   d64fc:	bd38      	pop	{r3, r4, r5, pc}

000d64fe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d64fe:	b538      	push	{r3, r4, r5, lr}
   d6500:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6502:	f7ff ffdd 	bl	d64c0 <_ZN5Print5writeEPKc>
   d6506:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6508:	4628      	mov	r0, r5
   d650a:	f7ff ffec 	bl	d64e6 <_ZN5Print7printlnEv>
  return n;
}
   d650e:	4420      	add	r0, r4
   d6510:	bd38      	pop	{r3, r4, r5, pc}

000d6512 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6512:	b530      	push	{r4, r5, lr}
   d6514:	b08b      	sub	sp, #44	; 0x2c
   d6516:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6518:	2100      	movs	r1, #0
   d651a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d651e:	2a01      	cmp	r2, #1
   d6520:	bf98      	it	ls
   d6522:	220a      	movls	r2, #10
   d6524:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6528:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d652c:	fb05 3312 	mls	r3, r5, r2, r3
   d6530:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6534:	2b09      	cmp	r3, #9
   d6536:	bf94      	ite	ls
   d6538:	3330      	addls	r3, #48	; 0x30
   d653a:	3337      	addhi	r3, #55	; 0x37
   d653c:	b2db      	uxtb	r3, r3
   d653e:	4621      	mov	r1, r4
   d6540:	f804 3901 	strb.w	r3, [r4], #-1
   d6544:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6546:	2d00      	cmp	r5, #0
   d6548:	d1ee      	bne.n	d6528 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d654a:	f7ff ffb9 	bl	d64c0 <_ZN5Print5writeEPKc>
}
   d654e:	b00b      	add	sp, #44	; 0x2c
   d6550:	bd30      	pop	{r4, r5, pc}

000d6552 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6552:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6554:	b92a      	cbnz	r2, d6562 <_ZN5Print5printEmi+0x10>
   d6556:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6558:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d655c:	689b      	ldr	r3, [r3, #8]
   d655e:	b2c9      	uxtb	r1, r1
   d6560:	4718      	bx	r3
  else return printNumber(n, base);
   d6562:	b2d2      	uxtb	r2, r2
}
   d6564:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6568:	f7ff bfd3 	b.w	d6512 <_ZN5Print11printNumberEmh>

000d656c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d656c:	f7ff bff1 	b.w	d6552 <_ZN5Print5printEmi>

000d6570 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6574:	4607      	mov	r7, r0
   d6576:	460e      	mov	r6, r1
  if (base == 0) {
   d6578:	4615      	mov	r5, r2
   d657a:	b92a      	cbnz	r2, d6588 <_ZN5Print5printEli+0x18>
    return write(n);
   d657c:	6803      	ldr	r3, [r0, #0]
   d657e:	b2c9      	uxtb	r1, r1
   d6580:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6586:	4718      	bx	r3
  } else if (base == 10) {
   d6588:	2a0a      	cmp	r2, #10
   d658a:	d102      	bne.n	d6592 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d658c:	2900      	cmp	r1, #0
   d658e:	da01      	bge.n	d6594 <_ZN5Print5printEli+0x24>
   d6590:	e004      	b.n	d659c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6592:	b2d2      	uxtb	r2, r2
  }
}
   d6594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6598:	f7ff bfbb 	b.w	d6512 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d659c:	212d      	movs	r1, #45	; 0x2d
   d659e:	f7ff ff9f 	bl	d64e0 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d65a2:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d65a4:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d65a6:	4271      	negs	r1, r6
   d65a8:	4638      	mov	r0, r7
   d65aa:	f7ff ffb2 	bl	d6512 <_ZN5Print11printNumberEmh>
   d65ae:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d65b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65b4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d65b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d65b8:	ec57 6b10 	vmov	r6, r7, d0
   d65bc:	4682      	mov	sl, r0
   d65be:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d65c0:	ee10 2a10 	vmov	r2, s0
   d65c4:	463b      	mov	r3, r7
   d65c6:	ee10 0a10 	vmov	r0, s0
   d65ca:	4639      	mov	r1, r7
   d65cc:	f001 fb04 	bl	d7bd8 <__aeabi_dcmpun>
   d65d0:	b108      	cbz	r0, d65d6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65d2:	4948      	ldr	r1, [pc, #288]	; (d66f4 <_ZN5Print10printFloatEdh+0x140>)
   d65d4:	e012      	b.n	d65fc <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d65d6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d65da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d65de:	4b46      	ldr	r3, [pc, #280]	; (d66f8 <_ZN5Print10printFloatEdh+0x144>)
   d65e0:	4630      	mov	r0, r6
   d65e2:	4649      	mov	r1, r9
   d65e4:	f001 faf8 	bl	d7bd8 <__aeabi_dcmpun>
   d65e8:	b968      	cbnz	r0, d6606 <_ZN5Print10printFloatEdh+0x52>
   d65ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d65ee:	4b42      	ldr	r3, [pc, #264]	; (d66f8 <_ZN5Print10printFloatEdh+0x144>)
   d65f0:	4630      	mov	r0, r6
   d65f2:	4649      	mov	r1, r9
   d65f4:	f001 fad2 	bl	d7b9c <__aeabi_dcmple>
   d65f8:	b928      	cbnz	r0, d6606 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d65fa:	4940      	ldr	r1, [pc, #256]	; (d66fc <_ZN5Print10printFloatEdh+0x148>)
   d65fc:	4650      	mov	r0, sl
   d65fe:	f7ff ff5f 	bl	d64c0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6606:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d660a:	4b3d      	ldr	r3, [pc, #244]	; (d6700 <_ZN5Print10printFloatEdh+0x14c>)
   d660c:	4630      	mov	r0, r6
   d660e:	4639      	mov	r1, r7
   d6610:	f001 fad8 	bl	d7bc4 <__aeabi_dcmpgt>
   d6614:	b108      	cbz	r0, d661a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6616:	493b      	ldr	r1, [pc, #236]	; (d6704 <_ZN5Print10printFloatEdh+0x150>)
   d6618:	e7f0      	b.n	d65fc <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d661a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d661e:	4b3a      	ldr	r3, [pc, #232]	; (d6708 <_ZN5Print10printFloatEdh+0x154>)
   d6620:	4630      	mov	r0, r6
   d6622:	4639      	mov	r1, r7
   d6624:	f001 fab0 	bl	d7b88 <__aeabi_dcmplt>
   d6628:	2800      	cmp	r0, #0
   d662a:	d1f4      	bne.n	d6616 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d662c:	2200      	movs	r2, #0
   d662e:	2300      	movs	r3, #0
   d6630:	4630      	mov	r0, r6
   d6632:	4639      	mov	r1, r7
   d6634:	f001 faa8 	bl	d7b88 <__aeabi_dcmplt>
   d6638:	b140      	cbz	r0, d664c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d663a:	212d      	movs	r1, #45	; 0x2d
   d663c:	4650      	mov	r0, sl
   d663e:	f7ff ff4f 	bl	d64e0 <_ZN5Print5printEc>
     number = -number;
   d6642:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6646:	4604      	mov	r4, r0
     number = -number;
   d6648:	461f      	mov	r7, r3
   d664a:	e000      	b.n	d664e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d664c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d664e:	492f      	ldr	r1, [pc, #188]	; (d670c <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6650:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6654:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6656:	fa5f f388 	uxtb.w	r3, r8
   d665a:	429d      	cmp	r5, r3
   d665c:	d906      	bls.n	d666c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d665e:	2200      	movs	r2, #0
   d6660:	4b2b      	ldr	r3, [pc, #172]	; (d6710 <_ZN5Print10printFloatEdh+0x15c>)
   d6662:	f001 f949 	bl	d78f8 <__aeabi_ddiv>
   d6666:	f108 0801 	add.w	r8, r8, #1
   d666a:	e7f4      	b.n	d6656 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d666c:	4632      	mov	r2, r6
   d666e:	463b      	mov	r3, r7
   d6670:	f000 fe66 	bl	d7340 <__adddf3>
   d6674:	460f      	mov	r7, r1
   d6676:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6678:	f001 faec 	bl	d7c54 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d667c:	220a      	movs	r2, #10
   d667e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6680:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6682:	4650      	mov	r0, sl
   d6684:	f7ff ff45 	bl	d6512 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6688:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d668a:	b37d      	cbz	r5, d66ec <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d668c:	4640      	mov	r0, r8
   d668e:	f000 ff93 	bl	d75b8 <__aeabi_ui2d>
   d6692:	4602      	mov	r2, r0
   d6694:	460b      	mov	r3, r1
   d6696:	4630      	mov	r0, r6
   d6698:	4639      	mov	r1, r7
   d669a:	f000 fe4f 	bl	d733c <__aeabi_dsub>
   d669e:	4606      	mov	r6, r0
   d66a0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d66a2:	4650      	mov	r0, sl
   d66a4:	491b      	ldr	r1, [pc, #108]	; (d6714 <_ZN5Print10printFloatEdh+0x160>)
   d66a6:	f7ff ff0b 	bl	d64c0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d66aa:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d66ac:	4b18      	ldr	r3, [pc, #96]	; (d6710 <_ZN5Print10printFloatEdh+0x15c>)
   d66ae:	2200      	movs	r2, #0
   d66b0:	4630      	mov	r0, r6
   d66b2:	4639      	mov	r1, r7
   d66b4:	f000 fff6 	bl	d76a4 <__aeabi_dmul>
   d66b8:	460f      	mov	r7, r1
   d66ba:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d66bc:	f001 faa2 	bl	d7c04 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d66c0:	220a      	movs	r2, #10
   d66c2:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d66c4:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d66c6:	4650      	mov	r0, sl
   d66c8:	f7ff ff52 	bl	d6570 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d66cc:	4404      	add	r4, r0
    remainder -= toPrint;
   d66ce:	4640      	mov	r0, r8
   d66d0:	f000 ff82 	bl	d75d8 <__aeabi_i2d>
   d66d4:	4602      	mov	r2, r0
   d66d6:	460b      	mov	r3, r1
   d66d8:	4630      	mov	r0, r6
   d66da:	4639      	mov	r1, r7
   d66dc:	f000 fe2e 	bl	d733c <__aeabi_dsub>
   d66e0:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d66e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d66e6:	4606      	mov	r6, r0
   d66e8:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d66ea:	d1df      	bne.n	d66ac <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d66ec:	4620      	mov	r0, r4
   d66ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d66f2:	bf00      	nop
   d66f4:	000d8d94 	.word	0x000d8d94
   d66f8:	7fefffff 	.word	0x7fefffff
   d66fc:	000d8d9c 	.word	0x000d8d9c
   d6700:	41efffff 	.word	0x41efffff
   d6704:	000d8d98 	.word	0x000d8d98
   d6708:	c1efffff 	.word	0xc1efffff
   d670c:	3fe00000 	.word	0x3fe00000
   d6710:	40240000 	.word	0x40240000
   d6714:	000d89d4 	.word	0x000d89d4

000d6718 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6718:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d671a:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d671c:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d671e:	f7ff ff49 	bl	d65b4 <_ZN5Print10printFloatEdh>
   d6722:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6724:	4628      	mov	r0, r5
   d6726:	f7ff fede 	bl	d64e6 <_ZN5Print7printlnEv>
  return n;
}
   d672a:	4420      	add	r0, r4
   d672c:	bd38      	pop	{r3, r4, r5, pc}

000d672e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d672e:	b510      	push	{r4, lr}
   d6730:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6732:	f7ff f962 	bl	d59fa <_ZNSt14_Function_baseD1Ev>
   d6736:	4620      	mov	r0, r4
   d6738:	bd10      	pop	{r4, pc}
	...

000d673c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d673c:	4803      	ldr	r0, [pc, #12]	; (d674c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d673e:	4a04      	ldr	r2, [pc, #16]	; (d6750 <_GLOBAL__sub_I_RGB+0x14>)
   d6740:	4904      	ldr	r1, [pc, #16]	; (d6754 <_GLOBAL__sub_I_RGB+0x18>)
   d6742:	2300      	movs	r3, #0
   d6744:	6083      	str	r3, [r0, #8]
   d6746:	f000 bca3 	b.w	d7090 <__aeabi_atexit>
   d674a:	bf00      	nop
   d674c:	2003e554 	.word	0x2003e554
   d6750:	2003e2b0 	.word	0x2003e2b0
   d6754:	000d672f 	.word	0x000d672f

000d6758 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6758:	4770      	bx	lr

000d675a <_ZN8SPIClassD0Ev>:
   d675a:	b510      	push	{r4, lr}
   d675c:	2110      	movs	r1, #16
   d675e:	4604      	mov	r4, r0
   d6760:	f000 fc9b 	bl	d709a <_ZdlPvj>
   d6764:	4620      	mov	r0, r4
   d6766:	bd10      	pop	{r4, pc}

000d6768 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6768:	b570      	push	{r4, r5, r6, lr}
   d676a:	4b08      	ldr	r3, [pc, #32]	; (d678c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d676c:	6003      	str	r3, [r0, #0]
   d676e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6770:	2500      	movs	r5, #0
   d6772:	460e      	mov	r6, r1
   d6774:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6778:	f7fe fe5c 	bl	d5434 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d677c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d677e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6780:	f7fe ff40 	bl	d5604 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6784:	60a5      	str	r5, [r4, #8]
}
   d6786:	4620      	mov	r0, r4
   d6788:	bd70      	pop	{r4, r5, r6, pc}
   d678a:	bf00      	nop
   d678c:	000d8da8 	.word	0x000d8da8

000d6790 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6790:	7900      	ldrb	r0, [r0, #4]
   d6792:	f7fe bf3f 	b.w	d5614 <HAL_SPI_Is_Enabled>

000d6796 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6796:	2300      	movs	r3, #0
   d6798:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d679a:	6043      	str	r3, [r0, #4]
	len = 0;
   d679c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d679e:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d67a0:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d67a2:	680c      	ldr	r4, [r1, #0]
   d67a4:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d67a6:	684c      	ldr	r4, [r1, #4]
   d67a8:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d67aa:	688c      	ldr	r4, [r1, #8]
   d67ac:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d67ae:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d67b0:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d67b2:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d67b4:	bd10      	pop	{r4, pc}

000d67b6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d67b6:	b510      	push	{r4, lr}
   d67b8:	4604      	mov	r4, r0
{
	free(buffer);
   d67ba:	6800      	ldr	r0, [r0, #0]
   d67bc:	f7ff f8b8 	bl	d5930 <free>
}
   d67c0:	4620      	mov	r0, r4
   d67c2:	bd10      	pop	{r4, pc}

000d67c4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d67c4:	b510      	push	{r4, lr}
   d67c6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d67c8:	6800      	ldr	r0, [r0, #0]
   d67ca:	b108      	cbz	r0, d67d0 <_ZN6String10invalidateEv+0xc>
   d67cc:	f7ff f8b0 	bl	d5930 <free>
	buffer = NULL;
   d67d0:	2300      	movs	r3, #0
   d67d2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d67d4:	60a3      	str	r3, [r4, #8]
   d67d6:	6063      	str	r3, [r4, #4]
   d67d8:	bd10      	pop	{r4, pc}

000d67da <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d67da:	b538      	push	{r3, r4, r5, lr}
   d67dc:	4604      	mov	r4, r0
   d67de:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d67e0:	6800      	ldr	r0, [r0, #0]
   d67e2:	3101      	adds	r1, #1
   d67e4:	f7ff f8ac 	bl	d5940 <realloc>
	if (newbuffer) {
   d67e8:	b110      	cbz	r0, d67f0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d67ea:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d67ee:	2001      	movs	r0, #1
	}
	return 0;
}
   d67f0:	bd38      	pop	{r3, r4, r5, pc}

000d67f2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d67f2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d67f4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d67f6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d67f8:	b113      	cbz	r3, d6800 <_ZN6String7reserveEj+0xe>
   d67fa:	6843      	ldr	r3, [r0, #4]
   d67fc:	428b      	cmp	r3, r1
   d67fe:	d207      	bcs.n	d6810 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6800:	4620      	mov	r0, r4
   d6802:	f7ff ffea 	bl	d67da <_ZN6String12changeBufferEj>
   d6806:	b120      	cbz	r0, d6812 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6808:	68a3      	ldr	r3, [r4, #8]
   d680a:	b90b      	cbnz	r3, d6810 <_ZN6String7reserveEj+0x1e>
   d680c:	6822      	ldr	r2, [r4, #0]
   d680e:	7013      	strb	r3, [r2, #0]
   d6810:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6812:	bd10      	pop	{r4, pc}

000d6814 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6814:	b570      	push	{r4, r5, r6, lr}
   d6816:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6818:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d681a:	4604      	mov	r4, r0
   d681c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d681e:	f7ff ffe8 	bl	d67f2 <_ZN6String7reserveEj>
   d6822:	b918      	cbnz	r0, d682c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6824:	4620      	mov	r0, r4
   d6826:	f7ff ffcd 	bl	d67c4 <_ZN6String10invalidateEv>
		return *this;
   d682a:	e009      	b.n	d6840 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d682c:	462a      	mov	r2, r5
   d682e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6830:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6832:	6820      	ldr	r0, [r4, #0]
   d6834:	f001 fb88 	bl	d7f48 <memcpy>
	buffer[len] = 0;
   d6838:	6822      	ldr	r2, [r4, #0]
   d683a:	68a3      	ldr	r3, [r4, #8]
   d683c:	2100      	movs	r1, #0
   d683e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6840:	4620      	mov	r0, r4
   d6842:	bd70      	pop	{r4, r5, r6, pc}

000d6844 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6844:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6846:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6848:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d684a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d684c:	6043      	str	r3, [r0, #4]
	len = 0;
   d684e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6850:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6852:	460d      	mov	r5, r1
   d6854:	b139      	cbz	r1, d6866 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6856:	4608      	mov	r0, r1
   d6858:	f001 fbdf 	bl	d801a <strlen>
   d685c:	4629      	mov	r1, r5
   d685e:	4602      	mov	r2, r0
   d6860:	4620      	mov	r0, r4
   d6862:	f7ff ffd7 	bl	d6814 <_ZN6String4copyEPKcj>
}
   d6866:	4620      	mov	r0, r4
   d6868:	bd38      	pop	{r3, r4, r5, pc}

000d686a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d686a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d686c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d686e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6870:	b912      	cbnz	r2, d6878 <_ZNK6String6equalsEPKc+0xe>
   d6872:	b919      	cbnz	r1, d687c <_ZNK6String6equalsEPKc+0x12>
   d6874:	2001      	movs	r0, #1
   d6876:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6878:	b911      	cbnz	r1, d6880 <_ZNK6String6equalsEPKc+0x16>
   d687a:	6803      	ldr	r3, [r0, #0]
   d687c:	7818      	ldrb	r0, [r3, #0]
   d687e:	e002      	b.n	d6886 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6880:	6800      	ldr	r0, [r0, #0]
   d6882:	f001 fb9d 	bl	d7fc0 <strcmp>
   d6886:	fab0 f080 	clz	r0, r0
   d688a:	0940      	lsrs	r0, r0, #5
}
   d688c:	bd08      	pop	{r3, pc}

000d688e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d688e:	b570      	push	{r4, r5, r6, lr}
   d6890:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6892:	b19a      	cbz	r2, d68bc <_ZNK6String8getBytesEPhjj+0x2e>
   d6894:	b191      	cbz	r1, d68bc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6896:	6885      	ldr	r5, [r0, #8]
   d6898:	429d      	cmp	r5, r3
   d689a:	d802      	bhi.n	d68a2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d689c:	2300      	movs	r3, #0
   d689e:	700b      	strb	r3, [r1, #0]
		return;
   d68a0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d68a2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d68a4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d68a6:	6801      	ldr	r1, [r0, #0]
   d68a8:	42ac      	cmp	r4, r5
   d68aa:	bf28      	it	cs
   d68ac:	462c      	movcs	r4, r5
   d68ae:	4419      	add	r1, r3
   d68b0:	4622      	mov	r2, r4
   d68b2:	4630      	mov	r0, r6
   d68b4:	f001 fbce 	bl	d8054 <strncpy>
	buf[n] = 0;
   d68b8:	2300      	movs	r3, #0
   d68ba:	5533      	strb	r3, [r6, r4]
   d68bc:	bd70      	pop	{r4, r5, r6, pc}

000d68be <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d68be:	4601      	mov	r1, r0
   d68c0:	2200      	movs	r2, #0
   d68c2:	208c      	movs	r0, #140	; 0x8c
   d68c4:	f7fe bdc6 	b.w	d5454 <HAL_Core_System_Reset_Ex>

000d68c8 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d68c8:	2000      	movs	r0, #0
   d68ca:	f7ff bff8 	b.w	d68be <_ZN11SystemClass5resetEm>

000d68ce <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d68ce:	b510      	push	{r4, lr}
   d68d0:	2400      	movs	r4, #0
   d68d2:	7004      	strb	r4, [r0, #0]
   d68d4:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d68d6:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d68d8:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d68dc:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d68de:	dd07      	ble.n	d68f0 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d68e0:	3901      	subs	r1, #1
   d68e2:	4299      	cmp	r1, r3
   d68e4:	d209      	bcs.n	d68fa <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d68e6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d68ea:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d68ec:	2301      	movs	r3, #1
   d68ee:	e001      	b.n	d68f4 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d68f0:	d102      	bne.n	d68f8 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d68f2:	2302      	movs	r3, #2
   d68f4:	7003      	strb	r3, [r0, #0]
   d68f6:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d68f8:	8041      	strh	r1, [r0, #2]
    }
}
   d68fa:	bd10      	pop	{r4, pc}

000d68fc <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d68fc:	b570      	push	{r4, r5, r6, lr}
   d68fe:	b086      	sub	sp, #24
   d6900:	4616      	mov	r6, r2
   d6902:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6904:	2300      	movs	r3, #0
   d6906:	9302      	str	r3, [sp, #8]
   d6908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d690a:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d690c:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d690e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6910:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6912:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6916:	4631      	mov	r1, r6
   d6918:	4628      	mov	r0, r5
   d691a:	f7fe ff4f 	bl	d57bc <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d691e:	4633      	mov	r3, r6
   d6920:	462a      	mov	r2, r5
   d6922:	4601      	mov	r1, r0
   d6924:	a804      	add	r0, sp, #16
   d6926:	f7ff ffd2 	bl	d68ce <_ZN11SleepResultC1EiPKtj>
   d692a:	4b06      	ldr	r3, [pc, #24]	; (d6944 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d692c:	9804      	ldr	r0, [sp, #16]
   d692e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d6932:	6018      	str	r0, [r3, #0]
   d6934:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d6936:	681a      	ldr	r2, [r3, #0]
   d6938:	889b      	ldrh	r3, [r3, #4]
   d693a:	6022      	str	r2, [r4, #0]
}
   d693c:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d693e:	80a3      	strh	r3, [r4, #4]
}
   d6940:	b006      	add	sp, #24
   d6942:	bd70      	pop	{r4, r5, r6, pc}
   d6944:	2003e564 	.word	0x2003e564

000d6948 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6948:	4b04      	ldr	r3, [pc, #16]	; (d695c <_GLOBAL__sub_I_System+0x14>)
   d694a:	2000      	movs	r0, #0
   d694c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6950:	7018      	strb	r0, [r3, #0]
   d6952:	8058      	strh	r0, [r3, #2]
   d6954:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6956:	f7fe bef5 	b.w	d5744 <set_system_mode>
   d695a:	bf00      	nop
   d695c:	2003e564 	.word	0x2003e564

000d6960 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6960:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d6962:	4b14      	ldr	r3, [pc, #80]	; (d69b4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6964:	4f14      	ldr	r7, [pc, #80]	; (d69b8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6966:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6968:	4b14      	ldr	r3, [pc, #80]	; (d69bc <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d696a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d696c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d696e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6970:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d6972:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6974:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6976:	d01b      	beq.n	d69b0 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6978:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d697a:	ad01      	add	r5, sp, #4
   d697c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6980:	f001 f9ea 	bl	d7d58 <localtime>
	calendar_time->tm_year += 1900;
   d6984:	6943      	ldr	r3, [r0, #20]
   d6986:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d698a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d698c:	4604      	mov	r4, r0
   d698e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6996:	f8d4 e000 	ldr.w	lr, [r4]
   d699a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d699e:	ad01      	add	r5, sp, #4
   d69a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69a2:	4c07      	ldr	r4, [pc, #28]	; (d69c0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d69a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d69aa:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d69ac:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d69b0:	b00b      	add	sp, #44	; 0x2c
   d69b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d69b4:	2003e59c 	.word	0x2003e59c
   d69b8:	2003e598 	.word	0x2003e598
   d69bc:	2003e594 	.word	0x2003e594
   d69c0:	2003e56c 	.word	0x2003e56c

000d69c4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d69c4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d69c6:	2000      	movs	r0, #0
   d69c8:	f7fe ff4a 	bl	d5860 <spark_sync_time_pending>
   d69cc:	b128      	cbz	r0, d69da <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d69ce:	f7fe ff1f 	bl	d5810 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d69d2:	f080 0001 	eor.w	r0, r0, #1
   d69d6:	b2c0      	uxtb	r0, r0
   d69d8:	bd08      	pop	{r3, pc}
   d69da:	2001      	movs	r0, #1
    }
   d69dc:	bd08      	pop	{r3, pc}

000d69de <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d69de:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d69e0:	2000      	movs	r0, #0
   d69e2:	f7fe fd87 	bl	d54f4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d69e6:	4604      	mov	r4, r0
   d69e8:	b968      	cbnz	r0, d6a06 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d69ea:	f7fe fea3 	bl	d5734 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d69ee:	2801      	cmp	r0, #1
   d69f0:	d10b      	bne.n	d6a0a <_ZN9TimeClass7isValidEv+0x2c>
   d69f2:	4620      	mov	r0, r4
   d69f4:	f7fe fec6 	bl	d5784 <system_thread_get_state>
   d69f8:	b938      	cbnz	r0, d6a0a <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d69fa:	f7ff ffe3 	bl	d69c4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d69fe:	b930      	cbnz	r0, d6a0e <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6a00:	f7fe fef6 	bl	d57f0 <spark_process>
   d6a04:	e7f9      	b.n	d69fa <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6a06:	2001      	movs	r0, #1
   d6a08:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6a0a:	2000      	movs	r0, #0
   d6a0c:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6a0e:	f7ff ffd9 	bl	d69c4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6a12:	2000      	movs	r0, #0
   d6a14:	f7fe fd6e 	bl	d54f4 <HAL_RTC_Time_Is_Valid>
   d6a18:	3000      	adds	r0, #0
   d6a1a:	bf18      	it	ne
   d6a1c:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6a1e:	bd10      	pop	{r4, pc}

000d6a20 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6a20:	b508      	push	{r3, lr}
    (void)isValid();
   d6a22:	f7ff ffdc 	bl	d69de <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6a2a:	f7fe bd33 	b.w	d5494 <HAL_RTC_Get_UnixTime>
	...

000d6a30 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d6a30:	b508      	push	{r3, lr}
	return hour(now());
   d6a32:	f7ff fff5 	bl	d6a20 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6a36:	f7ff ff93 	bl	d6960 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d6a3a:	4b01      	ldr	r3, [pc, #4]	; (d6a40 <_ZN9TimeClass4hourEv+0x10>)
   d6a3c:	6898      	ldr	r0, [r3, #8]
   d6a3e:	bd08      	pop	{r3, pc}
   d6a40:	2003e56c 	.word	0x2003e56c

000d6a44 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d6a44:	b508      	push	{r3, lr}
	return minute(now());
   d6a46:	f7ff ffeb 	bl	d6a20 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6a4a:	f7ff ff89 	bl	d6960 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d6a4e:	4b01      	ldr	r3, [pc, #4]	; (d6a54 <_ZN9TimeClass6minuteEv+0x10>)
   d6a50:	6858      	ldr	r0, [r3, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	2003e56c 	.word	0x2003e56c

000d6a58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6a58:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6a5a:	681a      	ldr	r2, [r3, #0]
   d6a5c:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6a5e:	601a      	str	r2, [r3, #0]
   d6a60:	4770      	bx	lr
   d6a62:	bf00      	nop
   d6a64:	2003e1f8 	.word	0x2003e1f8
   d6a68:	2003e590 	.word	0x2003e590

000d6a6c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6a6c:	4770      	bx	lr

000d6a6e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a6e:	7441      	strb	r1, [r0, #17]
   d6a70:	4770      	bx	lr

000d6a72 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6a72:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6a74:	7c00      	ldrb	r0, [r0, #16]
   d6a76:	f7fe fe0d 	bl	d5694 <HAL_USART_Available_Data_For_Write>
}
   d6a7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a7e:	bd08      	pop	{r3, pc}

000d6a80 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6a80:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6a82:	7c00      	ldrb	r0, [r0, #16]
   d6a84:	f7fe fdde 	bl	d5644 <HAL_USART_Available_Data>
}
   d6a88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a8c:	bd08      	pop	{r3, pc}

000d6a8e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6a8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6a90:	7c00      	ldrb	r0, [r0, #16]
   d6a92:	f7fe fde7 	bl	d5664 <HAL_USART_Peek_Data>
}
   d6a96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a9a:	bf28      	it	cs
   d6a9c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6aa0:	bd08      	pop	{r3, pc}

000d6aa2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6aa2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6aa4:	7c00      	ldrb	r0, [r0, #16]
   d6aa6:	f7fe fdd5 	bl	d5654 <HAL_USART_Read_Data>
}
   d6aaa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6aae:	bf28      	it	cs
   d6ab0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ab4:	bd08      	pop	{r3, pc}

000d6ab6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6ab6:	7c00      	ldrb	r0, [r0, #16]
   d6ab8:	f7fe bddc 	b.w	d5674 <HAL_USART_Flush_Data>

000d6abc <_ZN11USARTSerialD0Ev>:
   d6abc:	b510      	push	{r4, lr}
   d6abe:	2114      	movs	r1, #20
   d6ac0:	4604      	mov	r4, r0
   d6ac2:	f000 faea 	bl	d709a <_ZdlPvj>
   d6ac6:	4620      	mov	r0, r4
   d6ac8:	bd10      	pop	{r4, pc}

000d6aca <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6aca:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6acc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6ace:	4604      	mov	r4, r0
   d6ad0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6ad2:	b925      	cbnz	r5, d6ade <_ZN11USARTSerial5writeEh+0x14>
   d6ad4:	7c00      	ldrb	r0, [r0, #16]
   d6ad6:	f7fe fddd 	bl	d5694 <HAL_USART_Available_Data_For_Write>
   d6ada:	2800      	cmp	r0, #0
   d6adc:	dd05      	ble.n	d6aea <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6ade:	4631      	mov	r1, r6
   d6ae0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6ae6:	f7fe bda5 	b.w	d5634 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6aea:	4628      	mov	r0, r5
   d6aec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6af0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6af0:	b510      	push	{r4, lr}
   d6af2:	4604      	mov	r4, r0
   d6af4:	4608      	mov	r0, r1
   d6af6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6af8:	2200      	movs	r2, #0
   d6afa:	6062      	str	r2, [r4, #4]
   d6afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b00:	60a2      	str	r2, [r4, #8]
   d6b02:	4a05      	ldr	r2, [pc, #20]	; (d6b18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6b04:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6b06:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6b08:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6b0a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6b0c:	461a      	mov	r2, r3
   d6b0e:	f7fe fd89 	bl	d5624 <HAL_USART_Init>
}
   d6b12:	4620      	mov	r0, r4
   d6b14:	bd10      	pop	{r4, pc}
   d6b16:	bf00      	nop
   d6b18:	000d8de0 	.word	0x000d8de0

000d6b1c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6b1c:	7c00      	ldrb	r0, [r0, #16]
   d6b1e:	f7fe bdb1 	b.w	d5684 <HAL_USART_Is_Enabled>
	...

000d6b24 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b24:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b26:	4d0c      	ldr	r5, [pc, #48]	; (d6b58 <_Z22__fetch_global_Serial1v+0x34>)
   d6b28:	6829      	ldr	r1, [r5, #0]
   d6b2a:	f011 0401 	ands.w	r4, r1, #1
   d6b2e:	d111      	bne.n	d6b54 <_Z22__fetch_global_Serial1v+0x30>
   d6b30:	4628      	mov	r0, r5
   d6b32:	f7fd fab8 	bl	d40a6 <__cxa_guard_acquire>
   d6b36:	b168      	cbz	r0, d6b54 <_Z22__fetch_global_Serial1v+0x30>
   d6b38:	4a08      	ldr	r2, [pc, #32]	; (d6b5c <_Z22__fetch_global_Serial1v+0x38>)
   d6b3a:	4b09      	ldr	r3, [pc, #36]	; (d6b60 <_Z22__fetch_global_Serial1v+0x3c>)
   d6b3c:	4809      	ldr	r0, [pc, #36]	; (d6b64 <_Z22__fetch_global_Serial1v+0x40>)
   d6b3e:	4621      	mov	r1, r4
   d6b40:	f7ff ffd6 	bl	d6af0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6b44:	4628      	mov	r0, r5
   d6b46:	f7fd fab3 	bl	d40b0 <__cxa_guard_release>
   d6b4a:	4a07      	ldr	r2, [pc, #28]	; (d6b68 <_Z22__fetch_global_Serial1v+0x44>)
   d6b4c:	4907      	ldr	r1, [pc, #28]	; (d6b6c <_Z22__fetch_global_Serial1v+0x48>)
   d6b4e:	4805      	ldr	r0, [pc, #20]	; (d6b64 <_Z22__fetch_global_Serial1v+0x40>)
   d6b50:	f000 fa9e 	bl	d7090 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6b54:	4803      	ldr	r0, [pc, #12]	; (d6b64 <_Z22__fetch_global_Serial1v+0x40>)
   d6b56:	bd38      	pop	{r3, r4, r5, pc}
   d6b58:	2003e638 	.word	0x2003e638
   d6b5c:	2003e63c 	.word	0x2003e63c
   d6b60:	2003e5b4 	.word	0x2003e5b4
   d6b64:	2003e5a0 	.word	0x2003e5a0
   d6b68:	2003e2b0 	.word	0x2003e2b0
   d6b6c:	000d6a6d 	.word	0x000d6a6d

000d6b70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b70:	7441      	strb	r1, [r0, #17]
   d6b72:	4770      	bx	lr

000d6b74 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6b74:	4770      	bx	lr

000d6b76 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6b76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6b78:	2100      	movs	r1, #0
   d6b7a:	7c00      	ldrb	r0, [r0, #16]
   d6b7c:	f7fe fdb2 	bl	d56e4 <HAL_USB_USART_Receive_Data>
}
   d6b80:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b84:	bf28      	it	cs
   d6b86:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b8a:	bd08      	pop	{r3, pc}

000d6b8c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6b8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6b8e:	2101      	movs	r1, #1
   d6b90:	7c00      	ldrb	r0, [r0, #16]
   d6b92:	f7fe fda7 	bl	d56e4 <HAL_USB_USART_Receive_Data>
}
   d6b96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b9a:	bf28      	it	cs
   d6b9c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ba0:	bd08      	pop	{r3, pc}

000d6ba2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6ba2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6ba4:	7c00      	ldrb	r0, [r0, #16]
   d6ba6:	f7fe fd95 	bl	d56d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d6baa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bae:	bd08      	pop	{r3, pc}

000d6bb0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6bb0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6bb2:	7c00      	ldrb	r0, [r0, #16]
   d6bb4:	f7fe fd86 	bl	d56c4 <HAL_USB_USART_Available_Data>
}
   d6bb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bbc:	bd08      	pop	{r3, pc}

000d6bbe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6bbe:	7c00      	ldrb	r0, [r0, #16]
   d6bc0:	f7fe bda0 	b.w	d5704 <HAL_USB_USART_Flush_Data>

000d6bc4 <_ZN9USBSerialD0Ev>:
   d6bc4:	b510      	push	{r4, lr}
   d6bc6:	2114      	movs	r1, #20
   d6bc8:	4604      	mov	r4, r0
   d6bca:	f000 fa66 	bl	d709a <_ZdlPvj>
   d6bce:	4620      	mov	r0, r4
   d6bd0:	bd10      	pop	{r4, pc}

000d6bd2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6bd2:	b538      	push	{r3, r4, r5, lr}
   d6bd4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6bd6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6bd8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6bda:	f7fe fd7b 	bl	d56d4 <HAL_USB_USART_Available_Data_For_Write>
   d6bde:	2800      	cmp	r0, #0
   d6be0:	dc01      	bgt.n	d6be6 <_ZN9USBSerial5writeEh+0x14>
   d6be2:	7c60      	ldrb	r0, [r4, #17]
   d6be4:	b128      	cbz	r0, d6bf2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6be6:	4629      	mov	r1, r5
   d6be8:	7c20      	ldrb	r0, [r4, #16]
   d6bea:	f7fe fd83 	bl	d56f4 <HAL_USB_USART_Send_Data>
   d6bee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6bf2:	bd38      	pop	{r3, r4, r5, pc}

000d6bf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	4604      	mov	r4, r0
   d6bf8:	2300      	movs	r3, #0
   d6bfa:	6063      	str	r3, [r4, #4]
   d6bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c00:	60a3      	str	r3, [r4, #8]
   d6c02:	4b05      	ldr	r3, [pc, #20]	; (d6c18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6c04:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6c06:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c08:	4608      	mov	r0, r1
{
  _serial = serial;
   d6c0a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6c0c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6c0e:	4611      	mov	r1, r2
   d6c10:	f7fe fd48 	bl	d56a4 <HAL_USB_USART_Init>
}
   d6c14:	4620      	mov	r0, r4
   d6c16:	bd10      	pop	{r4, pc}
   d6c18:	000d8e10 	.word	0x000d8e10

000d6c1c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6c1c:	2200      	movs	r2, #0
   d6c1e:	7c00      	ldrb	r0, [r0, #16]
   d6c20:	f7fe bd48 	b.w	d56b4 <HAL_USB_USART_Begin>

000d6c24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6c26:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c28:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6c2a:	2100      	movs	r1, #0
   d6c2c:	f001 f997 	bl	d7f5e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6c30:	4620      	mov	r0, r4
   d6c32:	bd10      	pop	{r4, pc}

000d6c34 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6c34:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c36:	4d0e      	ldr	r5, [pc, #56]	; (d6c70 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6c38:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6c3a:	a801      	add	r0, sp, #4
   d6c3c:	f7ff fff2 	bl	d6c24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c40:	6829      	ldr	r1, [r5, #0]
   d6c42:	f011 0401 	ands.w	r4, r1, #1
   d6c46:	d110      	bne.n	d6c6a <_Z16_fetch_usbserialv+0x36>
   d6c48:	4628      	mov	r0, r5
   d6c4a:	f7fd fa2c 	bl	d40a6 <__cxa_guard_acquire>
   d6c4e:	b160      	cbz	r0, d6c6a <_Z16_fetch_usbserialv+0x36>
   d6c50:	aa01      	add	r2, sp, #4
   d6c52:	4621      	mov	r1, r4
   d6c54:	4807      	ldr	r0, [pc, #28]	; (d6c74 <_Z16_fetch_usbserialv+0x40>)
   d6c56:	f7ff ffcd 	bl	d6bf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6c5a:	4628      	mov	r0, r5
   d6c5c:	f7fd fa28 	bl	d40b0 <__cxa_guard_release>
   d6c60:	4a05      	ldr	r2, [pc, #20]	; (d6c78 <_Z16_fetch_usbserialv+0x44>)
   d6c62:	4906      	ldr	r1, [pc, #24]	; (d6c7c <_Z16_fetch_usbserialv+0x48>)
   d6c64:	4803      	ldr	r0, [pc, #12]	; (d6c74 <_Z16_fetch_usbserialv+0x40>)
   d6c66:	f000 fa13 	bl	d7090 <__aeabi_atexit>
	return _usbserial;
}
   d6c6a:	4802      	ldr	r0, [pc, #8]	; (d6c74 <_Z16_fetch_usbserialv+0x40>)
   d6c6c:	b007      	add	sp, #28
   d6c6e:	bd30      	pop	{r4, r5, pc}
   d6c70:	2003e6c0 	.word	0x2003e6c0
   d6c74:	2003e6c4 	.word	0x2003e6c4
   d6c78:	2003e2b0 	.word	0x2003e2b0
   d6c7c:	000d6b75 	.word	0x000d6b75

000d6c80 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6c80:	4770      	bx	lr

000d6c82 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d6c82:	2001      	movs	r0, #1
   d6c84:	4770      	bx	lr
	...

000d6c88 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d6c88:	8983      	ldrh	r3, [r0, #12]
   d6c8a:	b11b      	cbz	r3, d6c94 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d6c8c:	6903      	ldr	r3, [r0, #16]
   d6c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6c92:	d102      	bne.n	d6c9a <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d6c94:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6cac <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d6c98:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d6c9a:	ee07 3a90 	vmov	s15, r3
   d6c9e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6cb0 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d6ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6ca6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6caa:	4770      	bx	lr
   d6cac:	00000000 	.word	0x00000000
   d6cb0:	42c80000 	.word	0x42c80000

000d6cb4 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d6cb4:	8983      	ldrh	r3, [r0, #12]
   d6cb6:	b11b      	cbz	r3, d6cc0 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d6cb8:	6983      	ldr	r3, [r0, #24]
   d6cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6cbe:	d102      	bne.n	d6cc6 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d6cc0:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6cd8 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d6cc4:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d6cc6:	ee07 3a90 	vmov	s15, r3
   d6cca:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6cdc <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d6cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6cd2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6cd6:	4770      	bx	lr
   d6cd8:	00000000 	.word	0x00000000
   d6cdc:	42c80000 	.word	0x42c80000

000d6ce0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6ce0:	2200      	movs	r2, #0
   d6ce2:	4611      	mov	r1, r2
   d6ce4:	6840      	ldr	r0, [r0, #4]
   d6ce6:	f7fe bde3 	b.w	d58b0 <network_ready>

000d6cea <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6cea:	b510      	push	{r4, lr}
   d6cec:	2124      	movs	r1, #36	; 0x24
   d6cee:	4604      	mov	r4, r0
   d6cf0:	f000 f9d3 	bl	d709a <_ZdlPvj>
   d6cf4:	4620      	mov	r0, r4
   d6cf6:	bd10      	pop	{r4, pc}

000d6cf8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cf8:	2200      	movs	r2, #0
   d6cfa:	4611      	mov	r1, r2
   d6cfc:	6840      	ldr	r0, [r0, #4]
   d6cfe:	f7fe bdf7 	b.w	d58f0 <network_listening>

000d6d02 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6d02:	2200      	movs	r2, #0
   d6d04:	4611      	mov	r1, r2
   d6d06:	6840      	ldr	r0, [r0, #4]
   d6d08:	f7fe be02 	b.w	d5910 <network_get_listen_timeout>

000d6d0c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6d0c:	2200      	movs	r2, #0
   d6d0e:	6840      	ldr	r0, [r0, #4]
   d6d10:	f7fe bdf6 	b.w	d5900 <network_set_listen_timeout>

000d6d14 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d14:	2200      	movs	r2, #0
   d6d16:	f081 0101 	eor.w	r1, r1, #1
   d6d1a:	6840      	ldr	r0, [r0, #4]
   d6d1c:	f7fe bde0 	b.w	d58e0 <network_listen>

000d6d20 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6d20:	2300      	movs	r3, #0
   d6d22:	461a      	mov	r2, r3
   d6d24:	4619      	mov	r1, r3
   d6d26:	6840      	ldr	r0, [r0, #4]
   d6d28:	f7fe bdd2 	b.w	d58d0 <network_off>

000d6d2c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6d2c:	2300      	movs	r3, #0
   d6d2e:	461a      	mov	r2, r3
   d6d30:	4619      	mov	r1, r3
   d6d32:	6840      	ldr	r0, [r0, #4]
   d6d34:	f7fe bdc4 	b.w	d58c0 <network_on>

000d6d38 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d38:	2200      	movs	r2, #0
   d6d3a:	4611      	mov	r1, r2
   d6d3c:	6840      	ldr	r0, [r0, #4]
   d6d3e:	f7fe bda7 	b.w	d5890 <network_connecting>

000d6d42 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d42:	2200      	movs	r2, #0
   d6d44:	2102      	movs	r1, #2
   d6d46:	6840      	ldr	r0, [r0, #4]
   d6d48:	f7fe bdaa 	b.w	d58a0 <network_disconnect>

000d6d4c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d4c:	2300      	movs	r3, #0
   d6d4e:	461a      	mov	r2, r3
   d6d50:	6840      	ldr	r0, [r0, #4]
   d6d52:	f7fe bd95 	b.w	d5880 <network_connect>
	...

000d6d58 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d6d58:	8983      	ldrh	r3, [r0, #12]
   d6d5a:	b17b      	cbz	r3, d6d7c <_ZNK10WiFiSignal10getQualityEv+0x24>
   d6d5c:	6a03      	ldr	r3, [r0, #32]
   d6d5e:	2b00      	cmp	r3, #0
   d6d60:	db0c      	blt.n	d6d7c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d6d62:	ee07 3a90 	vmov	s15, r3
   d6d66:	eddf 6a07 	vldr	s13, [pc, #28]	; d6d84 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d6d6a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6d88 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d6d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6d76:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6d7a:	4770      	bx	lr
    }
    return -1.0f;
   d6d7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6d80:	4770      	bx	lr
   d6d82:	bf00      	nop
   d6d84:	477fff00 	.word	0x477fff00
   d6d88:	42c80000 	.word	0x42c80000

000d6d8c <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d6d8c:	8983      	ldrh	r3, [r0, #12]
   d6d8e:	b17b      	cbz	r3, d6db0 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d6d90:	6943      	ldr	r3, [r0, #20]
   d6d92:	2b00      	cmp	r3, #0
   d6d94:	db0c      	blt.n	d6db0 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d6d96:	ee07 3a90 	vmov	s15, r3
   d6d9a:	eddf 6a07 	vldr	s13, [pc, #28]	; d6db8 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d6d9e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6dbc <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d6da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d6da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6daa:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6dae:	4770      	bx	lr
    }
    return -1.0f;
   d6db0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6db4:	4770      	bx	lr
   d6db6:	bf00      	nop
   d6db8:	477fff00 	.word	0x477fff00
   d6dbc:	42c80000 	.word	0x42c80000

000d6dc0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6dc0:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d6dc2:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6dc4:	4606      	mov	r6, r0
    inf_ = inf;
   d6dc6:	f100 040c 	add.w	r4, r0, #12
   d6dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6dce:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6dd2:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d6dd6:	6933      	ldr	r3, [r6, #16]
   d6dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6ddc:	bf0e      	itee	eq
   d6dde:	2302      	moveq	r3, #2
   d6de0:	2264      	movne	r2, #100	; 0x64
   d6de2:	fb93 f3f2 	sdivne	r3, r3, r2
   d6de6:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d6de8:	69b3      	ldr	r3, [r6, #24]
   d6dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6dee:	bf0e      	itee	eq
   d6df0:	2300      	moveq	r3, #0
   d6df2:	2264      	movne	r2, #100	; 0x64
   d6df4:	fb93 f3f2 	sdivne	r3, r3, r2
   d6df8:	60b3      	str	r3, [r6, #8]
    return true;
}
   d6dfa:	2001      	movs	r0, #1
   d6dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6e00 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d6e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d6e04:	4b16      	ldr	r3, [pc, #88]	; (d6e60 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d6e06:	6003      	str	r3, [r0, #0]
   d6e08:	2500      	movs	r5, #0
   d6e0a:	4688      	mov	r8, r1
   d6e0c:	2702      	movs	r7, #2
   d6e0e:	2618      	movs	r6, #24
   d6e10:	b086      	sub	sp, #24
   d6e12:	6047      	str	r7, [r0, #4]
   d6e14:	6085      	str	r5, [r0, #8]
   d6e16:	4632      	mov	r2, r6
   d6e18:	4629      	mov	r1, r5
   d6e1a:	4604      	mov	r4, r0
   d6e1c:	300c      	adds	r0, #12
   d6e1e:	f001 f89e 	bl	d7f5e <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6e22:	462a      	mov	r2, r5
   d6e24:	4629      	mov	r1, r5
   d6e26:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d6e2a:	f7fe fd41 	bl	d58b0 <network_ready>
   d6e2e:	b190      	cbz	r0, d6e56 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d6e30:	4632      	mov	r2, r6
   d6e32:	4629      	mov	r1, r5
   d6e34:	4668      	mov	r0, sp
   d6e36:	f001 f892 	bl	d7f5e <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d6e3a:	462a      	mov	r2, r5
   d6e3c:	4669      	mov	r1, sp
   d6e3e:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d6e40:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d6e44:	f7fe fc66 	bl	d5714 <wlan_connected_info>
        if (r == 0) {
   d6e48:	b920      	cbnz	r0, d6e54 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d6e4a:	4669      	mov	r1, sp
   d6e4c:	4620      	mov	r0, r4
   d6e4e:	f7ff ffb7 	bl	d6dc0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d6e52:	e000      	b.n	d6e56 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d6e54:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d6e56:	4620      	mov	r0, r4
   d6e58:	b006      	add	sp, #24
   d6e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e5e:	bf00      	nop
   d6e60:	000d8e74 	.word	0x000d8e74

000d6e64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6e64:	4b02      	ldr	r3, [pc, #8]	; (d6e70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6e66:	2204      	movs	r2, #4
   d6e68:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6e6a:	4a02      	ldr	r2, [pc, #8]	; (d6e74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6e6c:	601a      	str	r2, [r3, #0]
   d6e6e:	4770      	bx	lr
   d6e70:	2003e6d8 	.word	0x2003e6d8
   d6e74:	000d8e40 	.word	0x000d8e40

000d6e78 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6e78:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6e7a:	4b0c      	ldr	r3, [pc, #48]	; (d6eac <serialEventRun+0x34>)
   d6e7c:	b133      	cbz	r3, d6e8c <serialEventRun+0x14>
   d6e7e:	f7ff fed9 	bl	d6c34 <_Z16_fetch_usbserialv>
   d6e82:	6803      	ldr	r3, [r0, #0]
   d6e84:	691b      	ldr	r3, [r3, #16]
   d6e86:	4798      	blx	r3
   d6e88:	2800      	cmp	r0, #0
   d6e8a:	dc09      	bgt.n	d6ea0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6e8c:	4b08      	ldr	r3, [pc, #32]	; (d6eb0 <serialEventRun+0x38>)
   d6e8e:	b163      	cbz	r3, d6eaa <serialEventRun+0x32>
   d6e90:	f7ff fe48 	bl	d6b24 <_Z22__fetch_global_Serial1v>
   d6e94:	6803      	ldr	r3, [r0, #0]
   d6e96:	691b      	ldr	r3, [r3, #16]
   d6e98:	4798      	blx	r3
   d6e9a:	2800      	cmp	r0, #0
   d6e9c:	dc03      	bgt.n	d6ea6 <serialEventRun+0x2e>
   d6e9e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6ea0:	f3af 8000 	nop.w
   d6ea4:	e7f2      	b.n	d6e8c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6ea6:	f3af 8000 	nop.w
   d6eaa:	bd08      	pop	{r3, pc}
	...

000d6eb4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6eb4:	b508      	push	{r3, lr}
	serialEventRun();
   d6eb6:	f7ff ffdf 	bl	d6e78 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6eba:	f7fe fae3 	bl	d5484 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6ebe:	4b01      	ldr	r3, [pc, #4]	; (d6ec4 <_post_loop+0x10>)
   d6ec0:	6018      	str	r0, [r3, #0]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	2003e6e4 	.word	0x2003e6e4

000d6ec8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ec8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6eca:	2300      	movs	r3, #0
   d6ecc:	9300      	str	r3, [sp, #0]
   d6ece:	461a      	mov	r2, r3
   d6ed0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ed4:	f7fe fc68 	bl	d57a8 <system_ctrl_set_result>
}
   d6ed8:	b003      	add	sp, #12
   d6eda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ee0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6ee0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6ee2:	8843      	ldrh	r3, [r0, #2]
   d6ee4:	2b0a      	cmp	r3, #10
   d6ee6:	d008      	beq.n	d6efa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6ee8:	2b50      	cmp	r3, #80	; 0x50
   d6eea:	d109      	bne.n	d6f00 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6eec:	4b09      	ldr	r3, [pc, #36]	; (d6f14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6eee:	681b      	ldr	r3, [r3, #0]
   d6ef0:	b13b      	cbz	r3, d6f02 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6ef2:	b003      	add	sp, #12
   d6ef4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6ef8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6efa:	f7ff ffe5 	bl	d6ec8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6efe:	e006      	b.n	d6f0e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f00:	2300      	movs	r3, #0
   d6f02:	9300      	str	r3, [sp, #0]
   d6f04:	461a      	mov	r2, r3
   d6f06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f0a:	f7fe fc4d 	bl	d57a8 <system_ctrl_set_result>
        break;
    }
}
   d6f0e:	b003      	add	sp, #12
   d6f10:	f85d fb04 	ldr.w	pc, [sp], #4
   d6f14:	2003e6e0 	.word	0x2003e6e0

000d6f18 <module_user_init_hook>:

void module_user_init_hook()
{
   d6f18:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6f1a:	f7fe faa3 	bl	d5464 <HAL_RNG_GetRandomNumber>
   d6f1e:	4604      	mov	r4, r0
    srand(seed);
   d6f20:	f001 f826 	bl	d7f70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6f24:	4b07      	ldr	r3, [pc, #28]	; (d6f44 <module_user_init_hook+0x2c>)
   d6f26:	b113      	cbz	r3, d6f2e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6f28:	4620      	mov	r0, r4
   d6f2a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6f2e:	2100      	movs	r1, #0
   d6f30:	4804      	ldr	r0, [pc, #16]	; (d6f44 <module_user_init_hook+0x2c>)
   d6f32:	f7fe fc9d 	bl	d5870 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6f36:	2100      	movs	r1, #0
   d6f38:	4803      	ldr	r0, [pc, #12]	; (d6f48 <module_user_init_hook+0x30>)
}
   d6f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6f3e:	f7fe bc29 	b.w	d5794 <system_ctrl_set_app_request_handler>
   d6f42:	bf00      	nop
   d6f44:	00000000 	.word	0x00000000
   d6f48:	000d6ee1 	.word	0x000d6ee1

000d6f4c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6f4c:	b510      	push	{r4, lr}
   d6f4e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6f50:	480f      	ldr	r0, [pc, #60]	; (d6f90 <pinAvailable+0x44>)
   d6f52:	f7ff fc1d 	bl	d6790 <_ZN8SPIClass9isEnabledEv>
   d6f56:	b128      	cbz	r0, d6f64 <pinAvailable+0x18>
   d6f58:	f1a4 030b 	sub.w	r3, r4, #11
   d6f5c:	2b02      	cmp	r3, #2
   d6f5e:	d801      	bhi.n	d6f64 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6f60:	2000      	movs	r0, #0
   d6f62:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6f64:	f000 f852 	bl	d700c <_Z19__fetch_global_Wirev>
   d6f68:	f7ff f8bc 	bl	d60e4 <_ZN7TwoWire9isEnabledEv>
   d6f6c:	b108      	cbz	r0, d6f72 <pinAvailable+0x26>
   d6f6e:	2c01      	cmp	r4, #1
   d6f70:	d9f6      	bls.n	d6f60 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6f72:	f7ff fdd7 	bl	d6b24 <_Z22__fetch_global_Serial1v>
   d6f76:	f7ff fdd1 	bl	d6b1c <_ZN11USARTSerial9isEnabledEv>
   d6f7a:	b118      	cbz	r0, d6f84 <pinAvailable+0x38>
   d6f7c:	f1a4 0309 	sub.w	r3, r4, #9
   d6f80:	2b01      	cmp	r3, #1
   d6f82:	d9ed      	bls.n	d6f60 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6f84:	2c23      	cmp	r4, #35	; 0x23
   d6f86:	bf8c      	ite	hi
   d6f88:	2000      	movhi	r0, #0
   d6f8a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6f8c:	bd10      	pop	{r4, pc}
   d6f8e:	bf00      	nop
   d6f90:	2003e708 	.word	0x2003e708

000d6f94 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6f94:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6f96:	b538      	push	{r3, r4, r5, lr}
   d6f98:	4604      	mov	r4, r0
   d6f9a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6f9c:	d80a      	bhi.n	d6fb4 <pinMode+0x20>
   d6f9e:	29ff      	cmp	r1, #255	; 0xff
   d6fa0:	d008      	beq.n	d6fb4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6fa2:	f7ff ffd3 	bl	d6f4c <pinAvailable>
   d6fa6:	b128      	cbz	r0, d6fb4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6fa8:	4629      	mov	r1, r5
   d6faa:	4620      	mov	r0, r4
}
   d6fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6fb0:	f7fe bab8 	b.w	d5524 <HAL_Pin_Mode>
   d6fb4:	bd38      	pop	{r3, r4, r5, pc}

000d6fb6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6fb6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6fb8:	b510      	push	{r4, lr}
   d6fba:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6fbc:	bf9c      	itt	ls
   d6fbe:	340e      	addls	r4, #14
   d6fc0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6fc2:	4620      	mov	r0, r4
   d6fc4:	f7ff ffc2 	bl	d6f4c <pinAvailable>
   d6fc8:	b150      	cbz	r0, d6fe0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6fca:	2103      	movs	r1, #3
   d6fcc:	4620      	mov	r0, r4
   d6fce:	f7fe faa1 	bl	d5514 <HAL_Validate_Pin_Function>
   d6fd2:	2803      	cmp	r0, #3
   d6fd4:	d104      	bne.n	d6fe0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6fd6:	4620      	mov	r0, r4
}
   d6fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6fdc:	f7fe baba 	b.w	d5554 <HAL_ADC_Read>
}
   d6fe0:	2000      	movs	r0, #0
   d6fe2:	bd10      	pop	{r4, pc}

000d6fe4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6fe4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6fe6:	4c07      	ldr	r4, [pc, #28]	; (d7004 <_Z21__fetch_global_EEPROMv+0x20>)
   d6fe8:	6823      	ldr	r3, [r4, #0]
   d6fea:	07db      	lsls	r3, r3, #31
   d6fec:	d408      	bmi.n	d7000 <_Z21__fetch_global_EEPROMv+0x1c>
   d6fee:	4620      	mov	r0, r4
   d6ff0:	f7fd f859 	bl	d40a6 <__cxa_guard_acquire>
   d6ff4:	b120      	cbz	r0, d7000 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6ff6:	f7fe fa55 	bl	d54a4 <HAL_EEPROM_Init>
   d6ffa:	4620      	mov	r0, r4
   d6ffc:	f7fd f858 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d7000:	4801      	ldr	r0, [pc, #4]	; (d7008 <_Z21__fetch_global_EEPROMv+0x24>)
   d7002:	bd10      	pop	{r4, pc}
   d7004:	2003e6e8 	.word	0x2003e6e8
   d7008:	2003e6ec 	.word	0x2003e6ec

000d700c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d700c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d700e:	4d0b      	ldr	r5, [pc, #44]	; (d703c <_Z19__fetch_global_Wirev+0x30>)
   d7010:	6829      	ldr	r1, [r5, #0]
   d7012:	f011 0401 	ands.w	r4, r1, #1
   d7016:	d10f      	bne.n	d7038 <_Z19__fetch_global_Wirev+0x2c>
   d7018:	4628      	mov	r0, r5
   d701a:	f7fd f844 	bl	d40a6 <__cxa_guard_acquire>
   d701e:	b158      	cbz	r0, d7038 <_Z19__fetch_global_Wirev+0x2c>
   d7020:	4621      	mov	r1, r4
   d7022:	4807      	ldr	r0, [pc, #28]	; (d7040 <_Z19__fetch_global_Wirev+0x34>)
   d7024:	f7ff f84c 	bl	d60c0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7028:	4628      	mov	r0, r5
   d702a:	f7fd f841 	bl	d40b0 <__cxa_guard_release>
   d702e:	4a05      	ldr	r2, [pc, #20]	; (d7044 <_Z19__fetch_global_Wirev+0x38>)
   d7030:	4905      	ldr	r1, [pc, #20]	; (d7048 <_Z19__fetch_global_Wirev+0x3c>)
   d7032:	4803      	ldr	r0, [pc, #12]	; (d7040 <_Z19__fetch_global_Wirev+0x34>)
   d7034:	f000 f82c 	bl	d7090 <__aeabi_atexit>
	return wire;
}
   d7038:	4801      	ldr	r0, [pc, #4]	; (d7040 <_Z19__fetch_global_Wirev+0x34>)
   d703a:	bd38      	pop	{r3, r4, r5, pc}
   d703c:	2003e6f0 	.word	0x2003e6f0
   d7040:	2003e6f4 	.word	0x2003e6f4
   d7044:	2003e2b0 	.word	0x2003e2b0
   d7048:	000d6069 	.word	0x000d6069

000d704c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d704c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d704e:	4c0c      	ldr	r4, [pc, #48]	; (d7080 <_GLOBAL__sub_I_SPI+0x34>)
   d7050:	4e0c      	ldr	r6, [pc, #48]	; (d7084 <_GLOBAL__sub_I_SPI+0x38>)
   d7052:	4d0d      	ldr	r5, [pc, #52]	; (d7088 <_GLOBAL__sub_I_SPI+0x3c>)
   d7054:	2100      	movs	r1, #0
   d7056:	4620      	mov	r0, r4
   d7058:	f7ff fb86 	bl	d6768 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d705c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d705e:	4c0b      	ldr	r4, [pc, #44]	; (d708c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7060:	4632      	mov	r2, r6
   d7062:	4629      	mov	r1, r5
   d7064:	f000 f814 	bl	d7090 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7068:	2101      	movs	r1, #1
   d706a:	4620      	mov	r0, r4
   d706c:	f7ff fb7c 	bl	d6768 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7070:	4632      	mov	r2, r6
   d7072:	4629      	mov	r1, r5
   d7074:	4620      	mov	r0, r4
   d7076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d707a:	f000 b809 	b.w	d7090 <__aeabi_atexit>
   d707e:	bf00      	nop
   d7080:	2003e708 	.word	0x2003e708
   d7084:	2003e2b0 	.word	0x2003e2b0
   d7088:	000d6759 	.word	0x000d6759
   d708c:	2003e718 	.word	0x2003e718

000d7090 <__aeabi_atexit>:
   d7090:	460b      	mov	r3, r1
   d7092:	4601      	mov	r1, r0
   d7094:	4618      	mov	r0, r3
   d7096:	f000 be51 	b.w	d7d3c <__cxa_atexit>

000d709a <_ZdlPvj>:
   d709a:	f7fd b800 	b.w	d409e <_ZdlPv>

000d709e <_ZSt25__throw_bad_function_callv>:
   d709e:	b508      	push	{r3, lr}
   d70a0:	f7fe fc66 	bl	d5970 <abort>

000d70a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d70a4:	4b24      	ldr	r3, [pc, #144]	; (d7138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d70a6:	681a      	ldr	r2, [r3, #0]
   d70a8:	07d0      	lsls	r0, r2, #31
   d70aa:	bf5c      	itt	pl
   d70ac:	2201      	movpl	r2, #1
   d70ae:	601a      	strpl	r2, [r3, #0]
   d70b0:	4b22      	ldr	r3, [pc, #136]	; (d713c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d70b2:	681a      	ldr	r2, [r3, #0]
   d70b4:	07d1      	lsls	r1, r2, #31
   d70b6:	bf5c      	itt	pl
   d70b8:	2201      	movpl	r2, #1
   d70ba:	601a      	strpl	r2, [r3, #0]
   d70bc:	4b20      	ldr	r3, [pc, #128]	; (d7140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d70be:	681a      	ldr	r2, [r3, #0]
   d70c0:	07d2      	lsls	r2, r2, #31
   d70c2:	bf5c      	itt	pl
   d70c4:	2201      	movpl	r2, #1
   d70c6:	601a      	strpl	r2, [r3, #0]
   d70c8:	4b1e      	ldr	r3, [pc, #120]	; (d7144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d70ca:	681a      	ldr	r2, [r3, #0]
   d70cc:	07d0      	lsls	r0, r2, #31
   d70ce:	bf5c      	itt	pl
   d70d0:	2201      	movpl	r2, #1
   d70d2:	601a      	strpl	r2, [r3, #0]
   d70d4:	4b1c      	ldr	r3, [pc, #112]	; (d7148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d70d6:	681a      	ldr	r2, [r3, #0]
   d70d8:	07d1      	lsls	r1, r2, #31
   d70da:	bf5c      	itt	pl
   d70dc:	2201      	movpl	r2, #1
   d70de:	601a      	strpl	r2, [r3, #0]
   d70e0:	4b1a      	ldr	r3, [pc, #104]	; (d714c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d70e2:	681a      	ldr	r2, [r3, #0]
   d70e4:	07d2      	lsls	r2, r2, #31
   d70e6:	bf5c      	itt	pl
   d70e8:	2201      	movpl	r2, #1
   d70ea:	601a      	strpl	r2, [r3, #0]
   d70ec:	4b18      	ldr	r3, [pc, #96]	; (d7150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d70ee:	681a      	ldr	r2, [r3, #0]
   d70f0:	07d0      	lsls	r0, r2, #31
   d70f2:	bf5c      	itt	pl
   d70f4:	2201      	movpl	r2, #1
   d70f6:	601a      	strpl	r2, [r3, #0]
   d70f8:	4b16      	ldr	r3, [pc, #88]	; (d7154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d70fa:	681a      	ldr	r2, [r3, #0]
   d70fc:	07d1      	lsls	r1, r2, #31
   d70fe:	bf5c      	itt	pl
   d7100:	2201      	movpl	r2, #1
   d7102:	601a      	strpl	r2, [r3, #0]
   d7104:	4b14      	ldr	r3, [pc, #80]	; (d7158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7106:	681a      	ldr	r2, [r3, #0]
   d7108:	07d2      	lsls	r2, r2, #31
   d710a:	bf5c      	itt	pl
   d710c:	2201      	movpl	r2, #1
   d710e:	601a      	strpl	r2, [r3, #0]
   d7110:	4b12      	ldr	r3, [pc, #72]	; (d715c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7112:	681a      	ldr	r2, [r3, #0]
   d7114:	07d0      	lsls	r0, r2, #31
   d7116:	bf5c      	itt	pl
   d7118:	2201      	movpl	r2, #1
   d711a:	601a      	strpl	r2, [r3, #0]
   d711c:	4b10      	ldr	r3, [pc, #64]	; (d7160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d711e:	681a      	ldr	r2, [r3, #0]
   d7120:	07d1      	lsls	r1, r2, #31
   d7122:	bf5c      	itt	pl
   d7124:	2201      	movpl	r2, #1
   d7126:	601a      	strpl	r2, [r3, #0]
   d7128:	4b0e      	ldr	r3, [pc, #56]	; (d7164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d712a:	681a      	ldr	r2, [r3, #0]
   d712c:	07d2      	lsls	r2, r2, #31
   d712e:	bf5c      	itt	pl
   d7130:	2201      	movpl	r2, #1
   d7132:	601a      	strpl	r2, [r3, #0]
   d7134:	4770      	bx	lr
   d7136:	bf00      	nop
   d7138:	2003e754 	.word	0x2003e754
   d713c:	2003e750 	.word	0x2003e750
   d7140:	2003e74c 	.word	0x2003e74c
   d7144:	2003e748 	.word	0x2003e748
   d7148:	2003e744 	.word	0x2003e744
   d714c:	2003e740 	.word	0x2003e740
   d7150:	2003e73c 	.word	0x2003e73c
   d7154:	2003e738 	.word	0x2003e738
   d7158:	2003e734 	.word	0x2003e734
   d715c:	2003e730 	.word	0x2003e730
   d7160:	2003e72c 	.word	0x2003e72c
   d7164:	2003e728 	.word	0x2003e728

000d7168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7168:	4b18      	ldr	r3, [pc, #96]	; (d71cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d716a:	681a      	ldr	r2, [r3, #0]
   d716c:	07d1      	lsls	r1, r2, #31
   d716e:	bf5c      	itt	pl
   d7170:	2201      	movpl	r2, #1
   d7172:	601a      	strpl	r2, [r3, #0]
   d7174:	4b16      	ldr	r3, [pc, #88]	; (d71d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7176:	681a      	ldr	r2, [r3, #0]
   d7178:	07d2      	lsls	r2, r2, #31
   d717a:	bf5c      	itt	pl
   d717c:	2201      	movpl	r2, #1
   d717e:	601a      	strpl	r2, [r3, #0]
   d7180:	4b14      	ldr	r3, [pc, #80]	; (d71d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7182:	681a      	ldr	r2, [r3, #0]
   d7184:	07d0      	lsls	r0, r2, #31
   d7186:	bf5c      	itt	pl
   d7188:	2201      	movpl	r2, #1
   d718a:	601a      	strpl	r2, [r3, #0]
   d718c:	4b12      	ldr	r3, [pc, #72]	; (d71d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d718e:	681a      	ldr	r2, [r3, #0]
   d7190:	07d1      	lsls	r1, r2, #31
   d7192:	bf5c      	itt	pl
   d7194:	2201      	movpl	r2, #1
   d7196:	601a      	strpl	r2, [r3, #0]
   d7198:	4b10      	ldr	r3, [pc, #64]	; (d71dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d719a:	681a      	ldr	r2, [r3, #0]
   d719c:	07d2      	lsls	r2, r2, #31
   d719e:	bf5c      	itt	pl
   d71a0:	2201      	movpl	r2, #1
   d71a2:	601a      	strpl	r2, [r3, #0]
   d71a4:	4b0e      	ldr	r3, [pc, #56]	; (d71e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d71a6:	681a      	ldr	r2, [r3, #0]
   d71a8:	07d0      	lsls	r0, r2, #31
   d71aa:	bf5c      	itt	pl
   d71ac:	2201      	movpl	r2, #1
   d71ae:	601a      	strpl	r2, [r3, #0]
   d71b0:	4b0c      	ldr	r3, [pc, #48]	; (d71e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d71b2:	681a      	ldr	r2, [r3, #0]
   d71b4:	07d1      	lsls	r1, r2, #31
   d71b6:	bf5c      	itt	pl
   d71b8:	2201      	movpl	r2, #1
   d71ba:	601a      	strpl	r2, [r3, #0]
   d71bc:	4b0a      	ldr	r3, [pc, #40]	; (d71e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d71be:	681a      	ldr	r2, [r3, #0]
   d71c0:	07d2      	lsls	r2, r2, #31
   d71c2:	bf5c      	itt	pl
   d71c4:	2201      	movpl	r2, #1
   d71c6:	601a      	strpl	r2, [r3, #0]
   d71c8:	4770      	bx	lr
   d71ca:	bf00      	nop
   d71cc:	2003e774 	.word	0x2003e774
   d71d0:	2003e770 	.word	0x2003e770
   d71d4:	2003e76c 	.word	0x2003e76c
   d71d8:	2003e768 	.word	0x2003e768
   d71dc:	2003e764 	.word	0x2003e764
   d71e0:	2003e760 	.word	0x2003e760
   d71e4:	2003e75c 	.word	0x2003e75c
   d71e8:	2003e758 	.word	0x2003e758

000d71ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d71ec:	4b18      	ldr	r3, [pc, #96]	; (d7250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d71ee:	681a      	ldr	r2, [r3, #0]
   d71f0:	07d1      	lsls	r1, r2, #31
   d71f2:	bf5c      	itt	pl
   d71f4:	2201      	movpl	r2, #1
   d71f6:	601a      	strpl	r2, [r3, #0]
   d71f8:	4b16      	ldr	r3, [pc, #88]	; (d7254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d71fa:	681a      	ldr	r2, [r3, #0]
   d71fc:	07d2      	lsls	r2, r2, #31
   d71fe:	bf5c      	itt	pl
   d7200:	2201      	movpl	r2, #1
   d7202:	601a      	strpl	r2, [r3, #0]
   d7204:	4b14      	ldr	r3, [pc, #80]	; (d7258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7206:	681a      	ldr	r2, [r3, #0]
   d7208:	07d0      	lsls	r0, r2, #31
   d720a:	bf5c      	itt	pl
   d720c:	2201      	movpl	r2, #1
   d720e:	601a      	strpl	r2, [r3, #0]
   d7210:	4b12      	ldr	r3, [pc, #72]	; (d725c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7212:	681a      	ldr	r2, [r3, #0]
   d7214:	07d1      	lsls	r1, r2, #31
   d7216:	bf5c      	itt	pl
   d7218:	2201      	movpl	r2, #1
   d721a:	601a      	strpl	r2, [r3, #0]
   d721c:	4b10      	ldr	r3, [pc, #64]	; (d7260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d721e:	681a      	ldr	r2, [r3, #0]
   d7220:	07d2      	lsls	r2, r2, #31
   d7222:	bf5c      	itt	pl
   d7224:	2201      	movpl	r2, #1
   d7226:	601a      	strpl	r2, [r3, #0]
   d7228:	4b0e      	ldr	r3, [pc, #56]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d722a:	681a      	ldr	r2, [r3, #0]
   d722c:	07d0      	lsls	r0, r2, #31
   d722e:	bf5c      	itt	pl
   d7230:	2201      	movpl	r2, #1
   d7232:	601a      	strpl	r2, [r3, #0]
   d7234:	4b0c      	ldr	r3, [pc, #48]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7236:	681a      	ldr	r2, [r3, #0]
   d7238:	07d1      	lsls	r1, r2, #31
   d723a:	bf5c      	itt	pl
   d723c:	2201      	movpl	r2, #1
   d723e:	601a      	strpl	r2, [r3, #0]
   d7240:	4b0a      	ldr	r3, [pc, #40]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7242:	681a      	ldr	r2, [r3, #0]
   d7244:	07d2      	lsls	r2, r2, #31
   d7246:	bf5c      	itt	pl
   d7248:	2201      	movpl	r2, #1
   d724a:	601a      	strpl	r2, [r3, #0]
   d724c:	4770      	bx	lr
   d724e:	bf00      	nop
   d7250:	2003e794 	.word	0x2003e794
   d7254:	2003e790 	.word	0x2003e790
   d7258:	2003e78c 	.word	0x2003e78c
   d725c:	2003e788 	.word	0x2003e788
   d7260:	2003e784 	.word	0x2003e784
   d7264:	2003e780 	.word	0x2003e780
   d7268:	2003e77c 	.word	0x2003e77c
   d726c:	2003e778 	.word	0x2003e778

000d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7270:	4b24      	ldr	r3, [pc, #144]	; (d7304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7272:	681a      	ldr	r2, [r3, #0]
   d7274:	07d0      	lsls	r0, r2, #31
   d7276:	bf5c      	itt	pl
   d7278:	2201      	movpl	r2, #1
   d727a:	601a      	strpl	r2, [r3, #0]
   d727c:	4b22      	ldr	r3, [pc, #136]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d727e:	681a      	ldr	r2, [r3, #0]
   d7280:	07d1      	lsls	r1, r2, #31
   d7282:	bf5c      	itt	pl
   d7284:	2201      	movpl	r2, #1
   d7286:	601a      	strpl	r2, [r3, #0]
   d7288:	4b20      	ldr	r3, [pc, #128]	; (d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d728a:	681a      	ldr	r2, [r3, #0]
   d728c:	07d2      	lsls	r2, r2, #31
   d728e:	bf5c      	itt	pl
   d7290:	2201      	movpl	r2, #1
   d7292:	601a      	strpl	r2, [r3, #0]
   d7294:	4b1e      	ldr	r3, [pc, #120]	; (d7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7296:	681a      	ldr	r2, [r3, #0]
   d7298:	07d0      	lsls	r0, r2, #31
   d729a:	bf5c      	itt	pl
   d729c:	2201      	movpl	r2, #1
   d729e:	601a      	strpl	r2, [r3, #0]
   d72a0:	4b1c      	ldr	r3, [pc, #112]	; (d7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d72a2:	681a      	ldr	r2, [r3, #0]
   d72a4:	07d1      	lsls	r1, r2, #31
   d72a6:	bf5c      	itt	pl
   d72a8:	2201      	movpl	r2, #1
   d72aa:	601a      	strpl	r2, [r3, #0]
   d72ac:	4b1a      	ldr	r3, [pc, #104]	; (d7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d72ae:	681a      	ldr	r2, [r3, #0]
   d72b0:	07d2      	lsls	r2, r2, #31
   d72b2:	bf5c      	itt	pl
   d72b4:	2201      	movpl	r2, #1
   d72b6:	601a      	strpl	r2, [r3, #0]
   d72b8:	4b18      	ldr	r3, [pc, #96]	; (d731c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d72ba:	681a      	ldr	r2, [r3, #0]
   d72bc:	07d0      	lsls	r0, r2, #31
   d72be:	bf5c      	itt	pl
   d72c0:	2201      	movpl	r2, #1
   d72c2:	601a      	strpl	r2, [r3, #0]
   d72c4:	4b16      	ldr	r3, [pc, #88]	; (d7320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d72c6:	681a      	ldr	r2, [r3, #0]
   d72c8:	07d1      	lsls	r1, r2, #31
   d72ca:	bf5c      	itt	pl
   d72cc:	2201      	movpl	r2, #1
   d72ce:	601a      	strpl	r2, [r3, #0]
   d72d0:	4b14      	ldr	r3, [pc, #80]	; (d7324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d72d2:	681a      	ldr	r2, [r3, #0]
   d72d4:	07d2      	lsls	r2, r2, #31
   d72d6:	bf5c      	itt	pl
   d72d8:	2201      	movpl	r2, #1
   d72da:	601a      	strpl	r2, [r3, #0]
   d72dc:	4b12      	ldr	r3, [pc, #72]	; (d7328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d72de:	681a      	ldr	r2, [r3, #0]
   d72e0:	07d0      	lsls	r0, r2, #31
   d72e2:	bf5c      	itt	pl
   d72e4:	2201      	movpl	r2, #1
   d72e6:	601a      	strpl	r2, [r3, #0]
   d72e8:	4b10      	ldr	r3, [pc, #64]	; (d732c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d72ea:	681a      	ldr	r2, [r3, #0]
   d72ec:	07d1      	lsls	r1, r2, #31
   d72ee:	bf5c      	itt	pl
   d72f0:	2201      	movpl	r2, #1
   d72f2:	601a      	strpl	r2, [r3, #0]
   d72f4:	4b0e      	ldr	r3, [pc, #56]	; (d7330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d72f6:	681a      	ldr	r2, [r3, #0]
   d72f8:	07d2      	lsls	r2, r2, #31
   d72fa:	bf5c      	itt	pl
   d72fc:	2201      	movpl	r2, #1
   d72fe:	601a      	strpl	r2, [r3, #0]
   d7300:	4770      	bx	lr
   d7302:	bf00      	nop
   d7304:	2003e7c4 	.word	0x2003e7c4
   d7308:	2003e7c0 	.word	0x2003e7c0
   d730c:	2003e7bc 	.word	0x2003e7bc
   d7310:	2003e7b8 	.word	0x2003e7b8
   d7314:	2003e7b4 	.word	0x2003e7b4
   d7318:	2003e7b0 	.word	0x2003e7b0
   d731c:	2003e7ac 	.word	0x2003e7ac
   d7320:	2003e7a8 	.word	0x2003e7a8
   d7324:	2003e7a4 	.word	0x2003e7a4
   d7328:	2003e7a0 	.word	0x2003e7a0
   d732c:	2003e79c 	.word	0x2003e79c
   d7330:	2003e798 	.word	0x2003e798

000d7334 <__aeabi_drsub>:
   d7334:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7338:	e002      	b.n	d7340 <__adddf3>
   d733a:	bf00      	nop

000d733c <__aeabi_dsub>:
   d733c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7340 <__adddf3>:
   d7340:	b530      	push	{r4, r5, lr}
   d7342:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7346:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d734a:	ea94 0f05 	teq	r4, r5
   d734e:	bf08      	it	eq
   d7350:	ea90 0f02 	teqeq	r0, r2
   d7354:	bf1f      	itttt	ne
   d7356:	ea54 0c00 	orrsne.w	ip, r4, r0
   d735a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d735e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7362:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7366:	f000 80e2 	beq.w	d752e <__adddf3+0x1ee>
   d736a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d736e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7372:	bfb8      	it	lt
   d7374:	426d      	neglt	r5, r5
   d7376:	dd0c      	ble.n	d7392 <__adddf3+0x52>
   d7378:	442c      	add	r4, r5
   d737a:	ea80 0202 	eor.w	r2, r0, r2
   d737e:	ea81 0303 	eor.w	r3, r1, r3
   d7382:	ea82 0000 	eor.w	r0, r2, r0
   d7386:	ea83 0101 	eor.w	r1, r3, r1
   d738a:	ea80 0202 	eor.w	r2, r0, r2
   d738e:	ea81 0303 	eor.w	r3, r1, r3
   d7392:	2d36      	cmp	r5, #54	; 0x36
   d7394:	bf88      	it	hi
   d7396:	bd30      	pophi	{r4, r5, pc}
   d7398:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d739c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d73a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d73a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d73a8:	d002      	beq.n	d73b0 <__adddf3+0x70>
   d73aa:	4240      	negs	r0, r0
   d73ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d73b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d73b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d73bc:	d002      	beq.n	d73c4 <__adddf3+0x84>
   d73be:	4252      	negs	r2, r2
   d73c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d73c4:	ea94 0f05 	teq	r4, r5
   d73c8:	f000 80a7 	beq.w	d751a <__adddf3+0x1da>
   d73cc:	f1a4 0401 	sub.w	r4, r4, #1
   d73d0:	f1d5 0e20 	rsbs	lr, r5, #32
   d73d4:	db0d      	blt.n	d73f2 <__adddf3+0xb2>
   d73d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d73da:	fa22 f205 	lsr.w	r2, r2, r5
   d73de:	1880      	adds	r0, r0, r2
   d73e0:	f141 0100 	adc.w	r1, r1, #0
   d73e4:	fa03 f20e 	lsl.w	r2, r3, lr
   d73e8:	1880      	adds	r0, r0, r2
   d73ea:	fa43 f305 	asr.w	r3, r3, r5
   d73ee:	4159      	adcs	r1, r3
   d73f0:	e00e      	b.n	d7410 <__adddf3+0xd0>
   d73f2:	f1a5 0520 	sub.w	r5, r5, #32
   d73f6:	f10e 0e20 	add.w	lr, lr, #32
   d73fa:	2a01      	cmp	r2, #1
   d73fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7400:	bf28      	it	cs
   d7402:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7406:	fa43 f305 	asr.w	r3, r3, r5
   d740a:	18c0      	adds	r0, r0, r3
   d740c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7414:	d507      	bpl.n	d7426 <__adddf3+0xe6>
   d7416:	f04f 0e00 	mov.w	lr, #0
   d741a:	f1dc 0c00 	rsbs	ip, ip, #0
   d741e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7422:	eb6e 0101 	sbc.w	r1, lr, r1
   d7426:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d742a:	d31b      	bcc.n	d7464 <__adddf3+0x124>
   d742c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7430:	d30c      	bcc.n	d744c <__adddf3+0x10c>
   d7432:	0849      	lsrs	r1, r1, #1
   d7434:	ea5f 0030 	movs.w	r0, r0, rrx
   d7438:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d743c:	f104 0401 	add.w	r4, r4, #1
   d7440:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7444:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7448:	f080 809a 	bcs.w	d7580 <__adddf3+0x240>
   d744c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7450:	bf08      	it	eq
   d7452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7456:	f150 0000 	adcs.w	r0, r0, #0
   d745a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d745e:	ea41 0105 	orr.w	r1, r1, r5
   d7462:	bd30      	pop	{r4, r5, pc}
   d7464:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7468:	4140      	adcs	r0, r0
   d746a:	eb41 0101 	adc.w	r1, r1, r1
   d746e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7472:	f1a4 0401 	sub.w	r4, r4, #1
   d7476:	d1e9      	bne.n	d744c <__adddf3+0x10c>
   d7478:	f091 0f00 	teq	r1, #0
   d747c:	bf04      	itt	eq
   d747e:	4601      	moveq	r1, r0
   d7480:	2000      	moveq	r0, #0
   d7482:	fab1 f381 	clz	r3, r1
   d7486:	bf08      	it	eq
   d7488:	3320      	addeq	r3, #32
   d748a:	f1a3 030b 	sub.w	r3, r3, #11
   d748e:	f1b3 0220 	subs.w	r2, r3, #32
   d7492:	da0c      	bge.n	d74ae <__adddf3+0x16e>
   d7494:	320c      	adds	r2, #12
   d7496:	dd08      	ble.n	d74aa <__adddf3+0x16a>
   d7498:	f102 0c14 	add.w	ip, r2, #20
   d749c:	f1c2 020c 	rsb	r2, r2, #12
   d74a0:	fa01 f00c 	lsl.w	r0, r1, ip
   d74a4:	fa21 f102 	lsr.w	r1, r1, r2
   d74a8:	e00c      	b.n	d74c4 <__adddf3+0x184>
   d74aa:	f102 0214 	add.w	r2, r2, #20
   d74ae:	bfd8      	it	le
   d74b0:	f1c2 0c20 	rsble	ip, r2, #32
   d74b4:	fa01 f102 	lsl.w	r1, r1, r2
   d74b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d74bc:	bfdc      	itt	le
   d74be:	ea41 010c 	orrle.w	r1, r1, ip
   d74c2:	4090      	lslle	r0, r2
   d74c4:	1ae4      	subs	r4, r4, r3
   d74c6:	bfa2      	ittt	ge
   d74c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d74cc:	4329      	orrge	r1, r5
   d74ce:	bd30      	popge	{r4, r5, pc}
   d74d0:	ea6f 0404 	mvn.w	r4, r4
   d74d4:	3c1f      	subs	r4, #31
   d74d6:	da1c      	bge.n	d7512 <__adddf3+0x1d2>
   d74d8:	340c      	adds	r4, #12
   d74da:	dc0e      	bgt.n	d74fa <__adddf3+0x1ba>
   d74dc:	f104 0414 	add.w	r4, r4, #20
   d74e0:	f1c4 0220 	rsb	r2, r4, #32
   d74e4:	fa20 f004 	lsr.w	r0, r0, r4
   d74e8:	fa01 f302 	lsl.w	r3, r1, r2
   d74ec:	ea40 0003 	orr.w	r0, r0, r3
   d74f0:	fa21 f304 	lsr.w	r3, r1, r4
   d74f4:	ea45 0103 	orr.w	r1, r5, r3
   d74f8:	bd30      	pop	{r4, r5, pc}
   d74fa:	f1c4 040c 	rsb	r4, r4, #12
   d74fe:	f1c4 0220 	rsb	r2, r4, #32
   d7502:	fa20 f002 	lsr.w	r0, r0, r2
   d7506:	fa01 f304 	lsl.w	r3, r1, r4
   d750a:	ea40 0003 	orr.w	r0, r0, r3
   d750e:	4629      	mov	r1, r5
   d7510:	bd30      	pop	{r4, r5, pc}
   d7512:	fa21 f004 	lsr.w	r0, r1, r4
   d7516:	4629      	mov	r1, r5
   d7518:	bd30      	pop	{r4, r5, pc}
   d751a:	f094 0f00 	teq	r4, #0
   d751e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7522:	bf06      	itte	eq
   d7524:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7528:	3401      	addeq	r4, #1
   d752a:	3d01      	subne	r5, #1
   d752c:	e74e      	b.n	d73cc <__adddf3+0x8c>
   d752e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7532:	bf18      	it	ne
   d7534:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7538:	d029      	beq.n	d758e <__adddf3+0x24e>
   d753a:	ea94 0f05 	teq	r4, r5
   d753e:	bf08      	it	eq
   d7540:	ea90 0f02 	teqeq	r0, r2
   d7544:	d005      	beq.n	d7552 <__adddf3+0x212>
   d7546:	ea54 0c00 	orrs.w	ip, r4, r0
   d754a:	bf04      	itt	eq
   d754c:	4619      	moveq	r1, r3
   d754e:	4610      	moveq	r0, r2
   d7550:	bd30      	pop	{r4, r5, pc}
   d7552:	ea91 0f03 	teq	r1, r3
   d7556:	bf1e      	ittt	ne
   d7558:	2100      	movne	r1, #0
   d755a:	2000      	movne	r0, #0
   d755c:	bd30      	popne	{r4, r5, pc}
   d755e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7562:	d105      	bne.n	d7570 <__adddf3+0x230>
   d7564:	0040      	lsls	r0, r0, #1
   d7566:	4149      	adcs	r1, r1
   d7568:	bf28      	it	cs
   d756a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d756e:	bd30      	pop	{r4, r5, pc}
   d7570:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7574:	bf3c      	itt	cc
   d7576:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d757a:	bd30      	popcc	{r4, r5, pc}
   d757c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7580:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7584:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7588:	f04f 0000 	mov.w	r0, #0
   d758c:	bd30      	pop	{r4, r5, pc}
   d758e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7592:	bf1a      	itte	ne
   d7594:	4619      	movne	r1, r3
   d7596:	4610      	movne	r0, r2
   d7598:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d759c:	bf1c      	itt	ne
   d759e:	460b      	movne	r3, r1
   d75a0:	4602      	movne	r2, r0
   d75a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d75a6:	bf06      	itte	eq
   d75a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d75ac:	ea91 0f03 	teqeq	r1, r3
   d75b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d75b4:	bd30      	pop	{r4, r5, pc}
   d75b6:	bf00      	nop

000d75b8 <__aeabi_ui2d>:
   d75b8:	f090 0f00 	teq	r0, #0
   d75bc:	bf04      	itt	eq
   d75be:	2100      	moveq	r1, #0
   d75c0:	4770      	bxeq	lr
   d75c2:	b530      	push	{r4, r5, lr}
   d75c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d75c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d75cc:	f04f 0500 	mov.w	r5, #0
   d75d0:	f04f 0100 	mov.w	r1, #0
   d75d4:	e750      	b.n	d7478 <__adddf3+0x138>
   d75d6:	bf00      	nop

000d75d8 <__aeabi_i2d>:
   d75d8:	f090 0f00 	teq	r0, #0
   d75dc:	bf04      	itt	eq
   d75de:	2100      	moveq	r1, #0
   d75e0:	4770      	bxeq	lr
   d75e2:	b530      	push	{r4, r5, lr}
   d75e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d75e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d75ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d75f0:	bf48      	it	mi
   d75f2:	4240      	negmi	r0, r0
   d75f4:	f04f 0100 	mov.w	r1, #0
   d75f8:	e73e      	b.n	d7478 <__adddf3+0x138>
   d75fa:	bf00      	nop

000d75fc <__aeabi_f2d>:
   d75fc:	0042      	lsls	r2, r0, #1
   d75fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7602:	ea4f 0131 	mov.w	r1, r1, rrx
   d7606:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d760a:	bf1f      	itttt	ne
   d760c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7610:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7614:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7618:	4770      	bxne	lr
   d761a:	f092 0f00 	teq	r2, #0
   d761e:	bf14      	ite	ne
   d7620:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7624:	4770      	bxeq	lr
   d7626:	b530      	push	{r4, r5, lr}
   d7628:	f44f 7460 	mov.w	r4, #896	; 0x380
   d762c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7634:	e720      	b.n	d7478 <__adddf3+0x138>
   d7636:	bf00      	nop

000d7638 <__aeabi_ul2d>:
   d7638:	ea50 0201 	orrs.w	r2, r0, r1
   d763c:	bf08      	it	eq
   d763e:	4770      	bxeq	lr
   d7640:	b530      	push	{r4, r5, lr}
   d7642:	f04f 0500 	mov.w	r5, #0
   d7646:	e00a      	b.n	d765e <__aeabi_l2d+0x16>

000d7648 <__aeabi_l2d>:
   d7648:	ea50 0201 	orrs.w	r2, r0, r1
   d764c:	bf08      	it	eq
   d764e:	4770      	bxeq	lr
   d7650:	b530      	push	{r4, r5, lr}
   d7652:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7656:	d502      	bpl.n	d765e <__aeabi_l2d+0x16>
   d7658:	4240      	negs	r0, r0
   d765a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d765e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7662:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7666:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d766a:	f43f aedc 	beq.w	d7426 <__adddf3+0xe6>
   d766e:	f04f 0203 	mov.w	r2, #3
   d7672:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7676:	bf18      	it	ne
   d7678:	3203      	addne	r2, #3
   d767a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d767e:	bf18      	it	ne
   d7680:	3203      	addne	r2, #3
   d7682:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7686:	f1c2 0320 	rsb	r3, r2, #32
   d768a:	fa00 fc03 	lsl.w	ip, r0, r3
   d768e:	fa20 f002 	lsr.w	r0, r0, r2
   d7692:	fa01 fe03 	lsl.w	lr, r1, r3
   d7696:	ea40 000e 	orr.w	r0, r0, lr
   d769a:	fa21 f102 	lsr.w	r1, r1, r2
   d769e:	4414      	add	r4, r2
   d76a0:	e6c1      	b.n	d7426 <__adddf3+0xe6>
   d76a2:	bf00      	nop

000d76a4 <__aeabi_dmul>:
   d76a4:	b570      	push	{r4, r5, r6, lr}
   d76a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d76aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d76ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d76b2:	bf1d      	ittte	ne
   d76b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d76b8:	ea94 0f0c 	teqne	r4, ip
   d76bc:	ea95 0f0c 	teqne	r5, ip
   d76c0:	f000 f8de 	bleq	d7880 <__aeabi_dmul+0x1dc>
   d76c4:	442c      	add	r4, r5
   d76c6:	ea81 0603 	eor.w	r6, r1, r3
   d76ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d76ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d76d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d76d6:	bf18      	it	ne
   d76d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d76dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d76e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d76e4:	d038      	beq.n	d7758 <__aeabi_dmul+0xb4>
   d76e6:	fba0 ce02 	umull	ip, lr, r0, r2
   d76ea:	f04f 0500 	mov.w	r5, #0
   d76ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   d76f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d76f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d76fa:	f04f 0600 	mov.w	r6, #0
   d76fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7702:	f09c 0f00 	teq	ip, #0
   d7706:	bf18      	it	ne
   d7708:	f04e 0e01 	orrne.w	lr, lr, #1
   d770c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7710:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7714:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7718:	d204      	bcs.n	d7724 <__aeabi_dmul+0x80>
   d771a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d771e:	416d      	adcs	r5, r5
   d7720:	eb46 0606 	adc.w	r6, r6, r6
   d7724:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7728:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d772c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7730:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7734:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7738:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d773c:	bf88      	it	hi
   d773e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7742:	d81e      	bhi.n	d7782 <__aeabi_dmul+0xde>
   d7744:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7748:	bf08      	it	eq
   d774a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d774e:	f150 0000 	adcs.w	r0, r0, #0
   d7752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7756:	bd70      	pop	{r4, r5, r6, pc}
   d7758:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d775c:	ea46 0101 	orr.w	r1, r6, r1
   d7760:	ea40 0002 	orr.w	r0, r0, r2
   d7764:	ea81 0103 	eor.w	r1, r1, r3
   d7768:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d776c:	bfc2      	ittt	gt
   d776e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7776:	bd70      	popgt	{r4, r5, r6, pc}
   d7778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d777c:	f04f 0e00 	mov.w	lr, #0
   d7780:	3c01      	subs	r4, #1
   d7782:	f300 80ab 	bgt.w	d78dc <__aeabi_dmul+0x238>
   d7786:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d778a:	bfde      	ittt	le
   d778c:	2000      	movle	r0, #0
   d778e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7792:	bd70      	pople	{r4, r5, r6, pc}
   d7794:	f1c4 0400 	rsb	r4, r4, #0
   d7798:	3c20      	subs	r4, #32
   d779a:	da35      	bge.n	d7808 <__aeabi_dmul+0x164>
   d779c:	340c      	adds	r4, #12
   d779e:	dc1b      	bgt.n	d77d8 <__aeabi_dmul+0x134>
   d77a0:	f104 0414 	add.w	r4, r4, #20
   d77a4:	f1c4 0520 	rsb	r5, r4, #32
   d77a8:	fa00 f305 	lsl.w	r3, r0, r5
   d77ac:	fa20 f004 	lsr.w	r0, r0, r4
   d77b0:	fa01 f205 	lsl.w	r2, r1, r5
   d77b4:	ea40 0002 	orr.w	r0, r0, r2
   d77b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d77bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d77c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d77c4:	fa21 f604 	lsr.w	r6, r1, r4
   d77c8:	eb42 0106 	adc.w	r1, r2, r6
   d77cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d77d0:	bf08      	it	eq
   d77d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d77d6:	bd70      	pop	{r4, r5, r6, pc}
   d77d8:	f1c4 040c 	rsb	r4, r4, #12
   d77dc:	f1c4 0520 	rsb	r5, r4, #32
   d77e0:	fa00 f304 	lsl.w	r3, r0, r4
   d77e4:	fa20 f005 	lsr.w	r0, r0, r5
   d77e8:	fa01 f204 	lsl.w	r2, r1, r4
   d77ec:	ea40 0002 	orr.w	r0, r0, r2
   d77f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d77f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d77f8:	f141 0100 	adc.w	r1, r1, #0
   d77fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7800:	bf08      	it	eq
   d7802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7806:	bd70      	pop	{r4, r5, r6, pc}
   d7808:	f1c4 0520 	rsb	r5, r4, #32
   d780c:	fa00 f205 	lsl.w	r2, r0, r5
   d7810:	ea4e 0e02 	orr.w	lr, lr, r2
   d7814:	fa20 f304 	lsr.w	r3, r0, r4
   d7818:	fa01 f205 	lsl.w	r2, r1, r5
   d781c:	ea43 0302 	orr.w	r3, r3, r2
   d7820:	fa21 f004 	lsr.w	r0, r1, r4
   d7824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7828:	fa21 f204 	lsr.w	r2, r1, r4
   d782c:	ea20 0002 	bic.w	r0, r0, r2
   d7830:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7834:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7838:	bf08      	it	eq
   d783a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d783e:	bd70      	pop	{r4, r5, r6, pc}
   d7840:	f094 0f00 	teq	r4, #0
   d7844:	d10f      	bne.n	d7866 <__aeabi_dmul+0x1c2>
   d7846:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d784a:	0040      	lsls	r0, r0, #1
   d784c:	eb41 0101 	adc.w	r1, r1, r1
   d7850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7854:	bf08      	it	eq
   d7856:	3c01      	subeq	r4, #1
   d7858:	d0f7      	beq.n	d784a <__aeabi_dmul+0x1a6>
   d785a:	ea41 0106 	orr.w	r1, r1, r6
   d785e:	f095 0f00 	teq	r5, #0
   d7862:	bf18      	it	ne
   d7864:	4770      	bxne	lr
   d7866:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d786a:	0052      	lsls	r2, r2, #1
   d786c:	eb43 0303 	adc.w	r3, r3, r3
   d7870:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7874:	bf08      	it	eq
   d7876:	3d01      	subeq	r5, #1
   d7878:	d0f7      	beq.n	d786a <__aeabi_dmul+0x1c6>
   d787a:	ea43 0306 	orr.w	r3, r3, r6
   d787e:	4770      	bx	lr
   d7880:	ea94 0f0c 	teq	r4, ip
   d7884:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7888:	bf18      	it	ne
   d788a:	ea95 0f0c 	teqne	r5, ip
   d788e:	d00c      	beq.n	d78aa <__aeabi_dmul+0x206>
   d7890:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7894:	bf18      	it	ne
   d7896:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d789a:	d1d1      	bne.n	d7840 <__aeabi_dmul+0x19c>
   d789c:	ea81 0103 	eor.w	r1, r1, r3
   d78a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d78a4:	f04f 0000 	mov.w	r0, #0
   d78a8:	bd70      	pop	{r4, r5, r6, pc}
   d78aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d78ae:	bf06      	itte	eq
   d78b0:	4610      	moveq	r0, r2
   d78b2:	4619      	moveq	r1, r3
   d78b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d78b8:	d019      	beq.n	d78ee <__aeabi_dmul+0x24a>
   d78ba:	ea94 0f0c 	teq	r4, ip
   d78be:	d102      	bne.n	d78c6 <__aeabi_dmul+0x222>
   d78c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d78c4:	d113      	bne.n	d78ee <__aeabi_dmul+0x24a>
   d78c6:	ea95 0f0c 	teq	r5, ip
   d78ca:	d105      	bne.n	d78d8 <__aeabi_dmul+0x234>
   d78cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d78d0:	bf1c      	itt	ne
   d78d2:	4610      	movne	r0, r2
   d78d4:	4619      	movne	r1, r3
   d78d6:	d10a      	bne.n	d78ee <__aeabi_dmul+0x24a>
   d78d8:	ea81 0103 	eor.w	r1, r1, r3
   d78dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d78e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d78e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d78e8:	f04f 0000 	mov.w	r0, #0
   d78ec:	bd70      	pop	{r4, r5, r6, pc}
   d78ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d78f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d78f6:	bd70      	pop	{r4, r5, r6, pc}

000d78f8 <__aeabi_ddiv>:
   d78f8:	b570      	push	{r4, r5, r6, lr}
   d78fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d78fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7902:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7906:	bf1d      	ittte	ne
   d7908:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d790c:	ea94 0f0c 	teqne	r4, ip
   d7910:	ea95 0f0c 	teqne	r5, ip
   d7914:	f000 f8a7 	bleq	d7a66 <__aeabi_ddiv+0x16e>
   d7918:	eba4 0405 	sub.w	r4, r4, r5
   d791c:	ea81 0e03 	eor.w	lr, r1, r3
   d7920:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7924:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7928:	f000 8088 	beq.w	d7a3c <__aeabi_ddiv+0x144>
   d792c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7930:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7934:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7938:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d793c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7940:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7944:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7948:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d794c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7950:	429d      	cmp	r5, r3
   d7952:	bf08      	it	eq
   d7954:	4296      	cmpeq	r6, r2
   d7956:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d795a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d795e:	d202      	bcs.n	d7966 <__aeabi_ddiv+0x6e>
   d7960:	085b      	lsrs	r3, r3, #1
   d7962:	ea4f 0232 	mov.w	r2, r2, rrx
   d7966:	1ab6      	subs	r6, r6, r2
   d7968:	eb65 0503 	sbc.w	r5, r5, r3
   d796c:	085b      	lsrs	r3, r3, #1
   d796e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7972:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7976:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d797a:	ebb6 0e02 	subs.w	lr, r6, r2
   d797e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7982:	bf22      	ittt	cs
   d7984:	1ab6      	subcs	r6, r6, r2
   d7986:	4675      	movcs	r5, lr
   d7988:	ea40 000c 	orrcs.w	r0, r0, ip
   d798c:	085b      	lsrs	r3, r3, #1
   d798e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7992:	ebb6 0e02 	subs.w	lr, r6, r2
   d7996:	eb75 0e03 	sbcs.w	lr, r5, r3
   d799a:	bf22      	ittt	cs
   d799c:	1ab6      	subcs	r6, r6, r2
   d799e:	4675      	movcs	r5, lr
   d79a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d79a4:	085b      	lsrs	r3, r3, #1
   d79a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d79aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d79ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d79b2:	bf22      	ittt	cs
   d79b4:	1ab6      	subcs	r6, r6, r2
   d79b6:	4675      	movcs	r5, lr
   d79b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d79bc:	085b      	lsrs	r3, r3, #1
   d79be:	ea4f 0232 	mov.w	r2, r2, rrx
   d79c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d79c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d79ca:	bf22      	ittt	cs
   d79cc:	1ab6      	subcs	r6, r6, r2
   d79ce:	4675      	movcs	r5, lr
   d79d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d79d4:	ea55 0e06 	orrs.w	lr, r5, r6
   d79d8:	d018      	beq.n	d7a0c <__aeabi_ddiv+0x114>
   d79da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d79de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d79e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d79e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d79ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d79ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d79f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d79f6:	d1c0      	bne.n	d797a <__aeabi_ddiv+0x82>
   d79f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d79fc:	d10b      	bne.n	d7a16 <__aeabi_ddiv+0x11e>
   d79fe:	ea41 0100 	orr.w	r1, r1, r0
   d7a02:	f04f 0000 	mov.w	r0, #0
   d7a06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7a0a:	e7b6      	b.n	d797a <__aeabi_ddiv+0x82>
   d7a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a10:	bf04      	itt	eq
   d7a12:	4301      	orreq	r1, r0
   d7a14:	2000      	moveq	r0, #0
   d7a16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7a1a:	bf88      	it	hi
   d7a1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7a20:	f63f aeaf 	bhi.w	d7782 <__aeabi_dmul+0xde>
   d7a24:	ebb5 0c03 	subs.w	ip, r5, r3
   d7a28:	bf04      	itt	eq
   d7a2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7a2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7a32:	f150 0000 	adcs.w	r0, r0, #0
   d7a36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7a3a:	bd70      	pop	{r4, r5, r6, pc}
   d7a3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7a40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7a44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7a48:	bfc2      	ittt	gt
   d7a4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7a4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7a52:	bd70      	popgt	{r4, r5, r6, pc}
   d7a54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a58:	f04f 0e00 	mov.w	lr, #0
   d7a5c:	3c01      	subs	r4, #1
   d7a5e:	e690      	b.n	d7782 <__aeabi_dmul+0xde>
   d7a60:	ea45 0e06 	orr.w	lr, r5, r6
   d7a64:	e68d      	b.n	d7782 <__aeabi_dmul+0xde>
   d7a66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7a6a:	ea94 0f0c 	teq	r4, ip
   d7a6e:	bf08      	it	eq
   d7a70:	ea95 0f0c 	teqeq	r5, ip
   d7a74:	f43f af3b 	beq.w	d78ee <__aeabi_dmul+0x24a>
   d7a78:	ea94 0f0c 	teq	r4, ip
   d7a7c:	d10a      	bne.n	d7a94 <__aeabi_ddiv+0x19c>
   d7a7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7a82:	f47f af34 	bne.w	d78ee <__aeabi_dmul+0x24a>
   d7a86:	ea95 0f0c 	teq	r5, ip
   d7a8a:	f47f af25 	bne.w	d78d8 <__aeabi_dmul+0x234>
   d7a8e:	4610      	mov	r0, r2
   d7a90:	4619      	mov	r1, r3
   d7a92:	e72c      	b.n	d78ee <__aeabi_dmul+0x24a>
   d7a94:	ea95 0f0c 	teq	r5, ip
   d7a98:	d106      	bne.n	d7aa8 <__aeabi_ddiv+0x1b0>
   d7a9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7a9e:	f43f aefd 	beq.w	d789c <__aeabi_dmul+0x1f8>
   d7aa2:	4610      	mov	r0, r2
   d7aa4:	4619      	mov	r1, r3
   d7aa6:	e722      	b.n	d78ee <__aeabi_dmul+0x24a>
   d7aa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7aac:	bf18      	it	ne
   d7aae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7ab2:	f47f aec5 	bne.w	d7840 <__aeabi_dmul+0x19c>
   d7ab6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7aba:	f47f af0d 	bne.w	d78d8 <__aeabi_dmul+0x234>
   d7abe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7ac2:	f47f aeeb 	bne.w	d789c <__aeabi_dmul+0x1f8>
   d7ac6:	e712      	b.n	d78ee <__aeabi_dmul+0x24a>

000d7ac8 <__gedf2>:
   d7ac8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7acc:	e006      	b.n	d7adc <__cmpdf2+0x4>
   d7ace:	bf00      	nop

000d7ad0 <__ledf2>:
   d7ad0:	f04f 0c01 	mov.w	ip, #1
   d7ad4:	e002      	b.n	d7adc <__cmpdf2+0x4>
   d7ad6:	bf00      	nop

000d7ad8 <__cmpdf2>:
   d7ad8:	f04f 0c01 	mov.w	ip, #1
   d7adc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7aec:	bf18      	it	ne
   d7aee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7af2:	d01b      	beq.n	d7b2c <__cmpdf2+0x54>
   d7af4:	b001      	add	sp, #4
   d7af6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7afa:	bf0c      	ite	eq
   d7afc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7b00:	ea91 0f03 	teqne	r1, r3
   d7b04:	bf02      	ittt	eq
   d7b06:	ea90 0f02 	teqeq	r0, r2
   d7b0a:	2000      	moveq	r0, #0
   d7b0c:	4770      	bxeq	lr
   d7b0e:	f110 0f00 	cmn.w	r0, #0
   d7b12:	ea91 0f03 	teq	r1, r3
   d7b16:	bf58      	it	pl
   d7b18:	4299      	cmppl	r1, r3
   d7b1a:	bf08      	it	eq
   d7b1c:	4290      	cmpeq	r0, r2
   d7b1e:	bf2c      	ite	cs
   d7b20:	17d8      	asrcs	r0, r3, #31
   d7b22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7b26:	f040 0001 	orr.w	r0, r0, #1
   d7b2a:	4770      	bx	lr
   d7b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7b34:	d102      	bne.n	d7b3c <__cmpdf2+0x64>
   d7b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7b3a:	d107      	bne.n	d7b4c <__cmpdf2+0x74>
   d7b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7b44:	d1d6      	bne.n	d7af4 <__cmpdf2+0x1c>
   d7b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7b4a:	d0d3      	beq.n	d7af4 <__cmpdf2+0x1c>
   d7b4c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7b50:	4770      	bx	lr
   d7b52:	bf00      	nop

000d7b54 <__aeabi_cdrcmple>:
   d7b54:	4684      	mov	ip, r0
   d7b56:	4610      	mov	r0, r2
   d7b58:	4662      	mov	r2, ip
   d7b5a:	468c      	mov	ip, r1
   d7b5c:	4619      	mov	r1, r3
   d7b5e:	4663      	mov	r3, ip
   d7b60:	e000      	b.n	d7b64 <__aeabi_cdcmpeq>
   d7b62:	bf00      	nop

000d7b64 <__aeabi_cdcmpeq>:
   d7b64:	b501      	push	{r0, lr}
   d7b66:	f7ff ffb7 	bl	d7ad8 <__cmpdf2>
   d7b6a:	2800      	cmp	r0, #0
   d7b6c:	bf48      	it	mi
   d7b6e:	f110 0f00 	cmnmi.w	r0, #0
   d7b72:	bd01      	pop	{r0, pc}

000d7b74 <__aeabi_dcmpeq>:
   d7b74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7b78:	f7ff fff4 	bl	d7b64 <__aeabi_cdcmpeq>
   d7b7c:	bf0c      	ite	eq
   d7b7e:	2001      	moveq	r0, #1
   d7b80:	2000      	movne	r0, #0
   d7b82:	f85d fb08 	ldr.w	pc, [sp], #8
   d7b86:	bf00      	nop

000d7b88 <__aeabi_dcmplt>:
   d7b88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7b8c:	f7ff ffea 	bl	d7b64 <__aeabi_cdcmpeq>
   d7b90:	bf34      	ite	cc
   d7b92:	2001      	movcc	r0, #1
   d7b94:	2000      	movcs	r0, #0
   d7b96:	f85d fb08 	ldr.w	pc, [sp], #8
   d7b9a:	bf00      	nop

000d7b9c <__aeabi_dcmple>:
   d7b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7ba0:	f7ff ffe0 	bl	d7b64 <__aeabi_cdcmpeq>
   d7ba4:	bf94      	ite	ls
   d7ba6:	2001      	movls	r0, #1
   d7ba8:	2000      	movhi	r0, #0
   d7baa:	f85d fb08 	ldr.w	pc, [sp], #8
   d7bae:	bf00      	nop

000d7bb0 <__aeabi_dcmpge>:
   d7bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7bb4:	f7ff ffce 	bl	d7b54 <__aeabi_cdrcmple>
   d7bb8:	bf94      	ite	ls
   d7bba:	2001      	movls	r0, #1
   d7bbc:	2000      	movhi	r0, #0
   d7bbe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7bc2:	bf00      	nop

000d7bc4 <__aeabi_dcmpgt>:
   d7bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7bc8:	f7ff ffc4 	bl	d7b54 <__aeabi_cdrcmple>
   d7bcc:	bf34      	ite	cc
   d7bce:	2001      	movcc	r0, #1
   d7bd0:	2000      	movcs	r0, #0
   d7bd2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7bd6:	bf00      	nop

000d7bd8 <__aeabi_dcmpun>:
   d7bd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7bdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7be0:	d102      	bne.n	d7be8 <__aeabi_dcmpun+0x10>
   d7be2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7be6:	d10a      	bne.n	d7bfe <__aeabi_dcmpun+0x26>
   d7be8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7bec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7bf0:	d102      	bne.n	d7bf8 <__aeabi_dcmpun+0x20>
   d7bf2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7bf6:	d102      	bne.n	d7bfe <__aeabi_dcmpun+0x26>
   d7bf8:	f04f 0000 	mov.w	r0, #0
   d7bfc:	4770      	bx	lr
   d7bfe:	f04f 0001 	mov.w	r0, #1
   d7c02:	4770      	bx	lr

000d7c04 <__aeabi_d2iz>:
   d7c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7c08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7c0c:	d215      	bcs.n	d7c3a <__aeabi_d2iz+0x36>
   d7c0e:	d511      	bpl.n	d7c34 <__aeabi_d2iz+0x30>
   d7c10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7c14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7c18:	d912      	bls.n	d7c40 <__aeabi_d2iz+0x3c>
   d7c1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7c22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7c2a:	fa23 f002 	lsr.w	r0, r3, r2
   d7c2e:	bf18      	it	ne
   d7c30:	4240      	negne	r0, r0
   d7c32:	4770      	bx	lr
   d7c34:	f04f 0000 	mov.w	r0, #0
   d7c38:	4770      	bx	lr
   d7c3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7c3e:	d105      	bne.n	d7c4c <__aeabi_d2iz+0x48>
   d7c40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7c44:	bf08      	it	eq
   d7c46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7c4a:	4770      	bx	lr
   d7c4c:	f04f 0000 	mov.w	r0, #0
   d7c50:	4770      	bx	lr
   d7c52:	bf00      	nop

000d7c54 <__aeabi_d2uiz>:
   d7c54:	004a      	lsls	r2, r1, #1
   d7c56:	d211      	bcs.n	d7c7c <__aeabi_d2uiz+0x28>
   d7c58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7c5c:	d211      	bcs.n	d7c82 <__aeabi_d2uiz+0x2e>
   d7c5e:	d50d      	bpl.n	d7c7c <__aeabi_d2uiz+0x28>
   d7c60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7c64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7c68:	d40e      	bmi.n	d7c88 <__aeabi_d2uiz+0x34>
   d7c6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7c6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7c72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7c76:	fa23 f002 	lsr.w	r0, r3, r2
   d7c7a:	4770      	bx	lr
   d7c7c:	f04f 0000 	mov.w	r0, #0
   d7c80:	4770      	bx	lr
   d7c82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7c86:	d102      	bne.n	d7c8e <__aeabi_d2uiz+0x3a>
   d7c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7c8c:	4770      	bx	lr
   d7c8e:	f04f 0000 	mov.w	r0, #0
   d7c92:	4770      	bx	lr

000d7c94 <__aeabi_d2f>:
   d7c94:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7c98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7c9c:	bf24      	itt	cs
   d7c9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7ca2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7ca6:	d90d      	bls.n	d7cc4 <__aeabi_d2f+0x30>
   d7ca8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7cac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7cb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7cb4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7cb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7cbc:	bf08      	it	eq
   d7cbe:	f020 0001 	biceq.w	r0, r0, #1
   d7cc2:	4770      	bx	lr
   d7cc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7cc8:	d121      	bne.n	d7d0e <__aeabi_d2f+0x7a>
   d7cca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7cce:	bfbc      	itt	lt
   d7cd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7cd4:	4770      	bxlt	lr
   d7cd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7cda:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7cde:	f1c2 0218 	rsb	r2, r2, #24
   d7ce2:	f1c2 0c20 	rsb	ip, r2, #32
   d7ce6:	fa10 f30c 	lsls.w	r3, r0, ip
   d7cea:	fa20 f002 	lsr.w	r0, r0, r2
   d7cee:	bf18      	it	ne
   d7cf0:	f040 0001 	orrne.w	r0, r0, #1
   d7cf4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7cf8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7cfc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7d00:	ea40 000c 	orr.w	r0, r0, ip
   d7d04:	fa23 f302 	lsr.w	r3, r3, r2
   d7d08:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7d0c:	e7cc      	b.n	d7ca8 <__aeabi_d2f+0x14>
   d7d0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7d12:	d107      	bne.n	d7d24 <__aeabi_d2f+0x90>
   d7d14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7d18:	bf1e      	ittt	ne
   d7d1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7d1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7d22:	4770      	bxne	lr
   d7d24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7d28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7d30:	4770      	bx	lr
   d7d32:	bf00      	nop

000d7d34 <atoi>:
   d7d34:	220a      	movs	r2, #10
   d7d36:	2100      	movs	r1, #0
   d7d38:	f000 ba26 	b.w	d8188 <strtol>

000d7d3c <__cxa_atexit>:
   d7d3c:	b510      	push	{r4, lr}
   d7d3e:	4c05      	ldr	r4, [pc, #20]	; (d7d54 <__cxa_atexit+0x18>)
   d7d40:	4613      	mov	r3, r2
   d7d42:	b12c      	cbz	r4, d7d50 <__cxa_atexit+0x14>
   d7d44:	460a      	mov	r2, r1
   d7d46:	4601      	mov	r1, r0
   d7d48:	2002      	movs	r0, #2
   d7d4a:	f3af 8000 	nop.w
   d7d4e:	bd10      	pop	{r4, pc}
   d7d50:	4620      	mov	r0, r4
   d7d52:	bd10      	pop	{r4, pc}
   d7d54:	00000000 	.word	0x00000000

000d7d58 <localtime>:
   d7d58:	b538      	push	{r3, r4, r5, lr}
   d7d5a:	4b07      	ldr	r3, [pc, #28]	; (d7d78 <localtime+0x20>)
   d7d5c:	681c      	ldr	r4, [r3, #0]
   d7d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7d60:	4605      	mov	r5, r0
   d7d62:	b91b      	cbnz	r3, d7d6c <localtime+0x14>
   d7d64:	2024      	movs	r0, #36	; 0x24
   d7d66:	f7fd fddb 	bl	d5920 <malloc>
   d7d6a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7d6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7d6e:	4628      	mov	r0, r5
   d7d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7d74:	f000 b802 	b.w	d7d7c <localtime_r>
   d7d78:	2003e260 	.word	0x2003e260

000d7d7c <localtime_r>:
   d7d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d80:	460c      	mov	r4, r1
   d7d82:	4680      	mov	r8, r0
   d7d84:	f000 fd06 	bl	d8794 <__gettzinfo>
   d7d88:	4621      	mov	r1, r4
   d7d8a:	4607      	mov	r7, r0
   d7d8c:	4640      	mov	r0, r8
   d7d8e:	f000 fd05 	bl	d879c <gmtime_r>
   d7d92:	6946      	ldr	r6, [r0, #20]
   d7d94:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7d98:	07b3      	lsls	r3, r6, #30
   d7d9a:	4604      	mov	r4, r0
   d7d9c:	d105      	bne.n	d7daa <localtime_r+0x2e>
   d7d9e:	2264      	movs	r2, #100	; 0x64
   d7da0:	fb96 f3f2 	sdiv	r3, r6, r2
   d7da4:	fb02 6313 	mls	r3, r2, r3, r6
   d7da8:	b94b      	cbnz	r3, d7dbe <localtime_r+0x42>
   d7daa:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d7dae:	fb96 f3f5 	sdiv	r3, r6, r5
   d7db2:	fb05 6513 	mls	r5, r5, r3, r6
   d7db6:	fab5 f385 	clz	r3, r5
   d7dba:	095b      	lsrs	r3, r3, #5
   d7dbc:	e000      	b.n	d7dc0 <localtime_r+0x44>
   d7dbe:	2301      	movs	r3, #1
   d7dc0:	4a5f      	ldr	r2, [pc, #380]	; (d7f40 <localtime_r+0x1c4>)
   d7dc2:	2530      	movs	r5, #48	; 0x30
   d7dc4:	fb05 2503 	mla	r5, r5, r3, r2
   d7dc8:	f000 fb18 	bl	d83fc <__tz_lock>
   d7dcc:	f000 fb18 	bl	d8400 <_tzset_unlocked>
   d7dd0:	4b5c      	ldr	r3, [pc, #368]	; (d7f44 <localtime_r+0x1c8>)
   d7dd2:	681b      	ldr	r3, [r3, #0]
   d7dd4:	b1f3      	cbz	r3, d7e14 <localtime_r+0x98>
   d7dd6:	687b      	ldr	r3, [r7, #4]
   d7dd8:	429e      	cmp	r6, r3
   d7dda:	d105      	bne.n	d7de8 <localtime_r+0x6c>
   d7ddc:	6839      	ldr	r1, [r7, #0]
   d7dde:	f8d8 3000 	ldr.w	r3, [r8]
   d7de2:	69fa      	ldr	r2, [r7, #28]
   d7de4:	b941      	cbnz	r1, d7df8 <localtime_r+0x7c>
   d7de6:	e00a      	b.n	d7dfe <localtime_r+0x82>
   d7de8:	4630      	mov	r0, r6
   d7dea:	f000 fa5f 	bl	d82ac <__tzcalc_limits>
   d7dee:	2800      	cmp	r0, #0
   d7df0:	d1f4      	bne.n	d7ddc <localtime_r+0x60>
   d7df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7df6:	e00d      	b.n	d7e14 <localtime_r+0x98>
   d7df8:	4293      	cmp	r3, r2
   d7dfa:	db08      	blt.n	d7e0e <localtime_r+0x92>
   d7dfc:	e001      	b.n	d7e02 <localtime_r+0x86>
   d7dfe:	4293      	cmp	r3, r2
   d7e00:	da07      	bge.n	d7e12 <localtime_r+0x96>
   d7e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7e04:	4293      	cmp	r3, r2
   d7e06:	bfac      	ite	ge
   d7e08:	2300      	movge	r3, #0
   d7e0a:	2301      	movlt	r3, #1
   d7e0c:	e002      	b.n	d7e14 <localtime_r+0x98>
   d7e0e:	2300      	movs	r3, #0
   d7e10:	e000      	b.n	d7e14 <localtime_r+0x98>
   d7e12:	2301      	movs	r3, #1
   d7e14:	6223      	str	r3, [r4, #32]
   d7e16:	6a23      	ldr	r3, [r4, #32]
   d7e18:	2b01      	cmp	r3, #1
   d7e1a:	bf0c      	ite	eq
   d7e1c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d7e1e:	6a39      	ldrne	r1, [r7, #32]
   d7e20:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7e24:	203c      	movs	r0, #60	; 0x3c
   d7e26:	fb91 f6f3 	sdiv	r6, r1, r3
   d7e2a:	fb03 1316 	mls	r3, r3, r6, r1
   d7e2e:	6861      	ldr	r1, [r4, #4]
   d7e30:	fb93 f2f0 	sdiv	r2, r3, r0
   d7e34:	fb00 3012 	mls	r0, r0, r2, r3
   d7e38:	6823      	ldr	r3, [r4, #0]
   d7e3a:	1a89      	subs	r1, r1, r2
   d7e3c:	68a2      	ldr	r2, [r4, #8]
   d7e3e:	6061      	str	r1, [r4, #4]
   d7e40:	1a1b      	subs	r3, r3, r0
   d7e42:	1b92      	subs	r2, r2, r6
   d7e44:	2b3b      	cmp	r3, #59	; 0x3b
   d7e46:	6023      	str	r3, [r4, #0]
   d7e48:	60a2      	str	r2, [r4, #8]
   d7e4a:	dd03      	ble.n	d7e54 <localtime_r+0xd8>
   d7e4c:	3101      	adds	r1, #1
   d7e4e:	6061      	str	r1, [r4, #4]
   d7e50:	3b3c      	subs	r3, #60	; 0x3c
   d7e52:	e004      	b.n	d7e5e <localtime_r+0xe2>
   d7e54:	2b00      	cmp	r3, #0
   d7e56:	da03      	bge.n	d7e60 <localtime_r+0xe4>
   d7e58:	3901      	subs	r1, #1
   d7e5a:	6061      	str	r1, [r4, #4]
   d7e5c:	333c      	adds	r3, #60	; 0x3c
   d7e5e:	6023      	str	r3, [r4, #0]
   d7e60:	6863      	ldr	r3, [r4, #4]
   d7e62:	2b3b      	cmp	r3, #59	; 0x3b
   d7e64:	dd03      	ble.n	d7e6e <localtime_r+0xf2>
   d7e66:	3201      	adds	r2, #1
   d7e68:	60a2      	str	r2, [r4, #8]
   d7e6a:	3b3c      	subs	r3, #60	; 0x3c
   d7e6c:	e004      	b.n	d7e78 <localtime_r+0xfc>
   d7e6e:	2b00      	cmp	r3, #0
   d7e70:	da03      	bge.n	d7e7a <localtime_r+0xfe>
   d7e72:	3a01      	subs	r2, #1
   d7e74:	60a2      	str	r2, [r4, #8]
   d7e76:	333c      	adds	r3, #60	; 0x3c
   d7e78:	6063      	str	r3, [r4, #4]
   d7e7a:	68a3      	ldr	r3, [r4, #8]
   d7e7c:	2b17      	cmp	r3, #23
   d7e7e:	dd22      	ble.n	d7ec6 <localtime_r+0x14a>
   d7e80:	69e2      	ldr	r2, [r4, #28]
   d7e82:	3201      	adds	r2, #1
   d7e84:	61e2      	str	r2, [r4, #28]
   d7e86:	69a2      	ldr	r2, [r4, #24]
   d7e88:	3201      	adds	r2, #1
   d7e8a:	2a06      	cmp	r2, #6
   d7e8c:	bfc8      	it	gt
   d7e8e:	2200      	movgt	r2, #0
   d7e90:	61a2      	str	r2, [r4, #24]
   d7e92:	68e2      	ldr	r2, [r4, #12]
   d7e94:	3b18      	subs	r3, #24
   d7e96:	3201      	adds	r2, #1
   d7e98:	60a3      	str	r3, [r4, #8]
   d7e9a:	6923      	ldr	r3, [r4, #16]
   d7e9c:	60e2      	str	r2, [r4, #12]
   d7e9e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7ea2:	428a      	cmp	r2, r1
   d7ea4:	dd46      	ble.n	d7f34 <localtime_r+0x1b8>
   d7ea6:	3301      	adds	r3, #1
   d7ea8:	2b0c      	cmp	r3, #12
   d7eaa:	bf0c      	ite	eq
   d7eac:	6963      	ldreq	r3, [r4, #20]
   d7eae:	6123      	strne	r3, [r4, #16]
   d7eb0:	eba2 0201 	sub.w	r2, r2, r1
   d7eb4:	60e2      	str	r2, [r4, #12]
   d7eb6:	bf01      	itttt	eq
   d7eb8:	3301      	addeq	r3, #1
   d7eba:	2200      	moveq	r2, #0
   d7ebc:	6122      	streq	r2, [r4, #16]
   d7ebe:	6163      	streq	r3, [r4, #20]
   d7ec0:	bf08      	it	eq
   d7ec2:	61e2      	streq	r2, [r4, #28]
   d7ec4:	e036      	b.n	d7f34 <localtime_r+0x1b8>
   d7ec6:	2b00      	cmp	r3, #0
   d7ec8:	da34      	bge.n	d7f34 <localtime_r+0x1b8>
   d7eca:	69e2      	ldr	r2, [r4, #28]
   d7ecc:	3a01      	subs	r2, #1
   d7ece:	61e2      	str	r2, [r4, #28]
   d7ed0:	69a2      	ldr	r2, [r4, #24]
   d7ed2:	3a01      	subs	r2, #1
   d7ed4:	bf48      	it	mi
   d7ed6:	2206      	movmi	r2, #6
   d7ed8:	61a2      	str	r2, [r4, #24]
   d7eda:	68e2      	ldr	r2, [r4, #12]
   d7edc:	3318      	adds	r3, #24
   d7ede:	3a01      	subs	r2, #1
   d7ee0:	60e2      	str	r2, [r4, #12]
   d7ee2:	60a3      	str	r3, [r4, #8]
   d7ee4:	bb32      	cbnz	r2, d7f34 <localtime_r+0x1b8>
   d7ee6:	6923      	ldr	r3, [r4, #16]
   d7ee8:	3b01      	subs	r3, #1
   d7eea:	d401      	bmi.n	d7ef0 <localtime_r+0x174>
   d7eec:	6123      	str	r3, [r4, #16]
   d7eee:	e01d      	b.n	d7f2c <localtime_r+0x1b0>
   d7ef0:	230b      	movs	r3, #11
   d7ef2:	6123      	str	r3, [r4, #16]
   d7ef4:	6963      	ldr	r3, [r4, #20]
   d7ef6:	1e5a      	subs	r2, r3, #1
   d7ef8:	f012 0f03 	tst.w	r2, #3
   d7efc:	6162      	str	r2, [r4, #20]
   d7efe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7f02:	d105      	bne.n	d7f10 <localtime_r+0x194>
   d7f04:	2164      	movs	r1, #100	; 0x64
   d7f06:	fb93 f2f1 	sdiv	r2, r3, r1
   d7f0a:	fb01 3212 	mls	r2, r1, r2, r3
   d7f0e:	b94a      	cbnz	r2, d7f24 <localtime_r+0x1a8>
   d7f10:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7f14:	fb93 f2f1 	sdiv	r2, r3, r1
   d7f18:	fb01 3312 	mls	r3, r1, r2, r3
   d7f1c:	fab3 f383 	clz	r3, r3
   d7f20:	095b      	lsrs	r3, r3, #5
   d7f22:	e000      	b.n	d7f26 <localtime_r+0x1aa>
   d7f24:	2301      	movs	r3, #1
   d7f26:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d7f2a:	61e3      	str	r3, [r4, #28]
   d7f2c:	6923      	ldr	r3, [r4, #16]
   d7f2e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7f32:	60e3      	str	r3, [r4, #12]
   d7f34:	f000 fa63 	bl	d83fe <__tz_unlock>
   d7f38:	4620      	mov	r0, r4
   d7f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7f3e:	bf00      	nop
   d7f40:	000d8ff4 	.word	0x000d8ff4
   d7f44:	2003e7e4 	.word	0x2003e7e4

000d7f48 <memcpy>:
   d7f48:	b510      	push	{r4, lr}
   d7f4a:	1e43      	subs	r3, r0, #1
   d7f4c:	440a      	add	r2, r1
   d7f4e:	4291      	cmp	r1, r2
   d7f50:	d004      	beq.n	d7f5c <memcpy+0x14>
   d7f52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7f56:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7f5a:	e7f8      	b.n	d7f4e <memcpy+0x6>
   d7f5c:	bd10      	pop	{r4, pc}

000d7f5e <memset>:
   d7f5e:	4402      	add	r2, r0
   d7f60:	4603      	mov	r3, r0
   d7f62:	4293      	cmp	r3, r2
   d7f64:	d002      	beq.n	d7f6c <memset+0xe>
   d7f66:	f803 1b01 	strb.w	r1, [r3], #1
   d7f6a:	e7fa      	b.n	d7f62 <memset+0x4>
   d7f6c:	4770      	bx	lr
	...

000d7f70 <srand>:
   d7f70:	b538      	push	{r3, r4, r5, lr}
   d7f72:	4b12      	ldr	r3, [pc, #72]	; (d7fbc <srand+0x4c>)
   d7f74:	681c      	ldr	r4, [r3, #0]
   d7f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7f78:	4605      	mov	r5, r0
   d7f7a:	b9d3      	cbnz	r3, d7fb2 <srand+0x42>
   d7f7c:	2018      	movs	r0, #24
   d7f7e:	f7fd fccf 	bl	d5920 <malloc>
   d7f82:	f243 330e 	movw	r3, #13070	; 0x330e
   d7f86:	63a0      	str	r0, [r4, #56]	; 0x38
   d7f88:	8003      	strh	r3, [r0, #0]
   d7f8a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7f8e:	8043      	strh	r3, [r0, #2]
   d7f90:	f241 2334 	movw	r3, #4660	; 0x1234
   d7f94:	8083      	strh	r3, [r0, #4]
   d7f96:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7f9a:	80c3      	strh	r3, [r0, #6]
   d7f9c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7fa0:	8103      	strh	r3, [r0, #8]
   d7fa2:	2305      	movs	r3, #5
   d7fa4:	8143      	strh	r3, [r0, #10]
   d7fa6:	230b      	movs	r3, #11
   d7fa8:	8183      	strh	r3, [r0, #12]
   d7faa:	2201      	movs	r2, #1
   d7fac:	2300      	movs	r3, #0
   d7fae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7fb4:	2200      	movs	r2, #0
   d7fb6:	611d      	str	r5, [r3, #16]
   d7fb8:	615a      	str	r2, [r3, #20]
   d7fba:	bd38      	pop	{r3, r4, r5, pc}
   d7fbc:	2003e260 	.word	0x2003e260

000d7fc0 <strcmp>:
   d7fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7fc8:	2a01      	cmp	r2, #1
   d7fca:	bf28      	it	cs
   d7fcc:	429a      	cmpcs	r2, r3
   d7fce:	d0f7      	beq.n	d7fc0 <strcmp>
   d7fd0:	1ad0      	subs	r0, r2, r3
   d7fd2:	4770      	bx	lr

000d7fd4 <strcpy>:
   d7fd4:	4603      	mov	r3, r0
   d7fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7fda:	f803 2b01 	strb.w	r2, [r3], #1
   d7fde:	2a00      	cmp	r2, #0
   d7fe0:	d1f9      	bne.n	d7fd6 <strcpy+0x2>
   d7fe2:	4770      	bx	lr

000d7fe4 <strdup>:
   d7fe4:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <strdup+0xc>)
   d7fe6:	4601      	mov	r1, r0
   d7fe8:	6818      	ldr	r0, [r3, #0]
   d7fea:	f000 b803 	b.w	d7ff4 <_strdup_r>
   d7fee:	bf00      	nop
   d7ff0:	2003e260 	.word	0x2003e260

000d7ff4 <_strdup_r>:
   d7ff4:	b570      	push	{r4, r5, r6, lr}
   d7ff6:	4606      	mov	r6, r0
   d7ff8:	4608      	mov	r0, r1
   d7ffa:	460c      	mov	r4, r1
   d7ffc:	f000 f80d 	bl	d801a <strlen>
   d8000:	1c45      	adds	r5, r0, #1
   d8002:	4629      	mov	r1, r5
   d8004:	4630      	mov	r0, r6
   d8006:	f7fd fcbb 	bl	d5980 <_malloc_r>
   d800a:	4606      	mov	r6, r0
   d800c:	b118      	cbz	r0, d8016 <_strdup_r+0x22>
   d800e:	462a      	mov	r2, r5
   d8010:	4621      	mov	r1, r4
   d8012:	f7ff ff99 	bl	d7f48 <memcpy>
   d8016:	4630      	mov	r0, r6
   d8018:	bd70      	pop	{r4, r5, r6, pc}

000d801a <strlen>:
   d801a:	4603      	mov	r3, r0
   d801c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8020:	2a00      	cmp	r2, #0
   d8022:	d1fb      	bne.n	d801c <strlen+0x2>
   d8024:	1a18      	subs	r0, r3, r0
   d8026:	3801      	subs	r0, #1
   d8028:	4770      	bx	lr

000d802a <strncmp>:
   d802a:	b530      	push	{r4, r5, lr}
   d802c:	b182      	cbz	r2, d8050 <strncmp+0x26>
   d802e:	1e45      	subs	r5, r0, #1
   d8030:	3901      	subs	r1, #1
   d8032:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8036:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d803a:	42a3      	cmp	r3, r4
   d803c:	d106      	bne.n	d804c <strncmp+0x22>
   d803e:	43ec      	mvns	r4, r5
   d8040:	4414      	add	r4, r2
   d8042:	42e0      	cmn	r0, r4
   d8044:	d001      	beq.n	d804a <strncmp+0x20>
   d8046:	2b00      	cmp	r3, #0
   d8048:	d1f3      	bne.n	d8032 <strncmp+0x8>
   d804a:	461c      	mov	r4, r3
   d804c:	1b18      	subs	r0, r3, r4
   d804e:	bd30      	pop	{r4, r5, pc}
   d8050:	4610      	mov	r0, r2
   d8052:	bd30      	pop	{r4, r5, pc}

000d8054 <strncpy>:
   d8054:	b510      	push	{r4, lr}
   d8056:	4603      	mov	r3, r0
   d8058:	b142      	cbz	r2, d806c <strncpy+0x18>
   d805a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d805e:	f803 4b01 	strb.w	r4, [r3], #1
   d8062:	3a01      	subs	r2, #1
   d8064:	2c00      	cmp	r4, #0
   d8066:	d1f7      	bne.n	d8058 <strncpy+0x4>
   d8068:	441a      	add	r2, r3
   d806a:	e000      	b.n	d806e <strncpy+0x1a>
   d806c:	bd10      	pop	{r4, pc}
   d806e:	4293      	cmp	r3, r2
   d8070:	d002      	beq.n	d8078 <strncpy+0x24>
   d8072:	f803 4b01 	strb.w	r4, [r3], #1
   d8076:	e7fa      	b.n	d806e <strncpy+0x1a>
   d8078:	bd10      	pop	{r4, pc}
	...

000d807c <_strtol_r>:
   d807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8080:	4680      	mov	r8, r0
   d8082:	4840      	ldr	r0, [pc, #256]	; (d8184 <_strtol_r+0x108>)
   d8084:	f8d0 9000 	ldr.w	r9, [r0]
   d8088:	460f      	mov	r7, r1
   d808a:	463d      	mov	r5, r7
   d808c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8090:	eb09 0004 	add.w	r0, r9, r4
   d8094:	7840      	ldrb	r0, [r0, #1]
   d8096:	f000 0008 	and.w	r0, r0, #8
   d809a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d809e:	b108      	cbz	r0, d80a4 <_strtol_r+0x28>
   d80a0:	462f      	mov	r7, r5
   d80a2:	e7f2      	b.n	d808a <_strtol_r+0xe>
   d80a4:	2c2d      	cmp	r4, #45	; 0x2d
   d80a6:	d103      	bne.n	d80b0 <_strtol_r+0x34>
   d80a8:	1cbd      	adds	r5, r7, #2
   d80aa:	787c      	ldrb	r4, [r7, #1]
   d80ac:	2601      	movs	r6, #1
   d80ae:	e003      	b.n	d80b8 <_strtol_r+0x3c>
   d80b0:	2c2b      	cmp	r4, #43	; 0x2b
   d80b2:	bf04      	itt	eq
   d80b4:	787c      	ldrbeq	r4, [r7, #1]
   d80b6:	1cbd      	addeq	r5, r7, #2
   d80b8:	b113      	cbz	r3, d80c0 <_strtol_r+0x44>
   d80ba:	2b10      	cmp	r3, #16
   d80bc:	d10a      	bne.n	d80d4 <_strtol_r+0x58>
   d80be:	e05b      	b.n	d8178 <_strtol_r+0xfc>
   d80c0:	2c30      	cmp	r4, #48	; 0x30
   d80c2:	d157      	bne.n	d8174 <_strtol_r+0xf8>
   d80c4:	7828      	ldrb	r0, [r5, #0]
   d80c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d80ca:	2858      	cmp	r0, #88	; 0x58
   d80cc:	d14d      	bne.n	d816a <_strtol_r+0xee>
   d80ce:	786c      	ldrb	r4, [r5, #1]
   d80d0:	2310      	movs	r3, #16
   d80d2:	3502      	adds	r5, #2
   d80d4:	2e00      	cmp	r6, #0
   d80d6:	bf14      	ite	ne
   d80d8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d80dc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d80e0:	2700      	movs	r7, #0
   d80e2:	fbbc faf3 	udiv	sl, ip, r3
   d80e6:	4638      	mov	r0, r7
   d80e8:	fb03 cc1a 	mls	ip, r3, sl, ip
   d80ec:	eb09 0e04 	add.w	lr, r9, r4
   d80f0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d80f4:	f01e 0f04 	tst.w	lr, #4
   d80f8:	d001      	beq.n	d80fe <_strtol_r+0x82>
   d80fa:	3c30      	subs	r4, #48	; 0x30
   d80fc:	e00b      	b.n	d8116 <_strtol_r+0x9a>
   d80fe:	f01e 0e03 	ands.w	lr, lr, #3
   d8102:	d01b      	beq.n	d813c <_strtol_r+0xc0>
   d8104:	f1be 0f01 	cmp.w	lr, #1
   d8108:	bf0c      	ite	eq
   d810a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d810e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8112:	ebce 0404 	rsb	r4, lr, r4
   d8116:	42a3      	cmp	r3, r4
   d8118:	dd10      	ble.n	d813c <_strtol_r+0xc0>
   d811a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d811e:	d00a      	beq.n	d8136 <_strtol_r+0xba>
   d8120:	4550      	cmp	r0, sl
   d8122:	d806      	bhi.n	d8132 <_strtol_r+0xb6>
   d8124:	d101      	bne.n	d812a <_strtol_r+0xae>
   d8126:	4564      	cmp	r4, ip
   d8128:	dc03      	bgt.n	d8132 <_strtol_r+0xb6>
   d812a:	fb03 4000 	mla	r0, r3, r0, r4
   d812e:	2701      	movs	r7, #1
   d8130:	e001      	b.n	d8136 <_strtol_r+0xba>
   d8132:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8136:	f815 4b01 	ldrb.w	r4, [r5], #1
   d813a:	e7d7      	b.n	d80ec <_strtol_r+0x70>
   d813c:	1c7b      	adds	r3, r7, #1
   d813e:	d10c      	bne.n	d815a <_strtol_r+0xde>
   d8140:	2e00      	cmp	r6, #0
   d8142:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8146:	bf14      	ite	ne
   d8148:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d814c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8150:	f8c8 3000 	str.w	r3, [r8]
   d8154:	b92a      	cbnz	r2, d8162 <_strtol_r+0xe6>
   d8156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d815a:	b106      	cbz	r6, d815e <_strtol_r+0xe2>
   d815c:	4240      	negs	r0, r0
   d815e:	b172      	cbz	r2, d817e <_strtol_r+0x102>
   d8160:	b107      	cbz	r7, d8164 <_strtol_r+0xe8>
   d8162:	1e69      	subs	r1, r5, #1
   d8164:	6011      	str	r1, [r2, #0]
   d8166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d816a:	2430      	movs	r4, #48	; 0x30
   d816c:	2b00      	cmp	r3, #0
   d816e:	d1b1      	bne.n	d80d4 <_strtol_r+0x58>
   d8170:	2308      	movs	r3, #8
   d8172:	e7af      	b.n	d80d4 <_strtol_r+0x58>
   d8174:	230a      	movs	r3, #10
   d8176:	e7ad      	b.n	d80d4 <_strtol_r+0x58>
   d8178:	2c30      	cmp	r4, #48	; 0x30
   d817a:	d0a3      	beq.n	d80c4 <_strtol_r+0x48>
   d817c:	e7aa      	b.n	d80d4 <_strtol_r+0x58>
   d817e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8182:	bf00      	nop
   d8184:	2003e1fc 	.word	0x2003e1fc

000d8188 <strtol>:
   d8188:	4613      	mov	r3, r2
   d818a:	460a      	mov	r2, r1
   d818c:	4601      	mov	r1, r0
   d818e:	4802      	ldr	r0, [pc, #8]	; (d8198 <strtol+0x10>)
   d8190:	6800      	ldr	r0, [r0, #0]
   d8192:	f7ff bf73 	b.w	d807c <_strtol_r>
   d8196:	bf00      	nop
   d8198:	2003e260 	.word	0x2003e260

000d819c <_strtoul_r>:
   d819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d81a0:	4680      	mov	r8, r0
   d81a2:	483c      	ldr	r0, [pc, #240]	; (d8294 <_strtoul_r+0xf8>)
   d81a4:	f8d0 9000 	ldr.w	r9, [r0]
   d81a8:	460e      	mov	r6, r1
   d81aa:	4635      	mov	r5, r6
   d81ac:	f815 4b01 	ldrb.w	r4, [r5], #1
   d81b0:	eb09 0004 	add.w	r0, r9, r4
   d81b4:	7840      	ldrb	r0, [r0, #1]
   d81b6:	f000 0008 	and.w	r0, r0, #8
   d81ba:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d81be:	b108      	cbz	r0, d81c4 <_strtoul_r+0x28>
   d81c0:	462e      	mov	r6, r5
   d81c2:	e7f2      	b.n	d81aa <_strtoul_r+0xe>
   d81c4:	2c2d      	cmp	r4, #45	; 0x2d
   d81c6:	d103      	bne.n	d81d0 <_strtoul_r+0x34>
   d81c8:	1cb5      	adds	r5, r6, #2
   d81ca:	7874      	ldrb	r4, [r6, #1]
   d81cc:	2701      	movs	r7, #1
   d81ce:	e003      	b.n	d81d8 <_strtoul_r+0x3c>
   d81d0:	2c2b      	cmp	r4, #43	; 0x2b
   d81d2:	bf04      	itt	eq
   d81d4:	7874      	ldrbeq	r4, [r6, #1]
   d81d6:	1cb5      	addeq	r5, r6, #2
   d81d8:	b113      	cbz	r3, d81e0 <_strtoul_r+0x44>
   d81da:	2b10      	cmp	r3, #16
   d81dc:	d10a      	bne.n	d81f4 <_strtoul_r+0x58>
   d81de:	e053      	b.n	d8288 <_strtoul_r+0xec>
   d81e0:	2c30      	cmp	r4, #48	; 0x30
   d81e2:	d14f      	bne.n	d8284 <_strtoul_r+0xe8>
   d81e4:	7828      	ldrb	r0, [r5, #0]
   d81e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d81ea:	2858      	cmp	r0, #88	; 0x58
   d81ec:	d145      	bne.n	d827a <_strtoul_r+0xde>
   d81ee:	786c      	ldrb	r4, [r5, #1]
   d81f0:	2310      	movs	r3, #16
   d81f2:	3502      	adds	r5, #2
   d81f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d81f8:	2600      	movs	r6, #0
   d81fa:	fbbc fcf3 	udiv	ip, ip, r3
   d81fe:	fb03 fa0c 	mul.w	sl, r3, ip
   d8202:	ea6f 0a0a 	mvn.w	sl, sl
   d8206:	4630      	mov	r0, r6
   d8208:	eb09 0e04 	add.w	lr, r9, r4
   d820c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8210:	f01e 0f04 	tst.w	lr, #4
   d8214:	d001      	beq.n	d821a <_strtoul_r+0x7e>
   d8216:	3c30      	subs	r4, #48	; 0x30
   d8218:	e00b      	b.n	d8232 <_strtoul_r+0x96>
   d821a:	f01e 0e03 	ands.w	lr, lr, #3
   d821e:	d01a      	beq.n	d8256 <_strtoul_r+0xba>
   d8220:	f1be 0f01 	cmp.w	lr, #1
   d8224:	bf0c      	ite	eq
   d8226:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d822a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d822e:	ebce 0404 	rsb	r4, lr, r4
   d8232:	42a3      	cmp	r3, r4
   d8234:	dd0f      	ble.n	d8256 <_strtoul_r+0xba>
   d8236:	2e00      	cmp	r6, #0
   d8238:	db08      	blt.n	d824c <_strtoul_r+0xb0>
   d823a:	4560      	cmp	r0, ip
   d823c:	d806      	bhi.n	d824c <_strtoul_r+0xb0>
   d823e:	d101      	bne.n	d8244 <_strtoul_r+0xa8>
   d8240:	4554      	cmp	r4, sl
   d8242:	dc03      	bgt.n	d824c <_strtoul_r+0xb0>
   d8244:	fb03 4000 	mla	r0, r3, r0, r4
   d8248:	2601      	movs	r6, #1
   d824a:	e001      	b.n	d8250 <_strtoul_r+0xb4>
   d824c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8250:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8254:	e7d8      	b.n	d8208 <_strtoul_r+0x6c>
   d8256:	2e00      	cmp	r6, #0
   d8258:	da07      	bge.n	d826a <_strtoul_r+0xce>
   d825a:	2322      	movs	r3, #34	; 0x22
   d825c:	f8c8 3000 	str.w	r3, [r8]
   d8260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8264:	b92a      	cbnz	r2, d8272 <_strtoul_r+0xd6>
   d8266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d826a:	b107      	cbz	r7, d826e <_strtoul_r+0xd2>
   d826c:	4240      	negs	r0, r0
   d826e:	b172      	cbz	r2, d828e <_strtoul_r+0xf2>
   d8270:	b106      	cbz	r6, d8274 <_strtoul_r+0xd8>
   d8272:	1e69      	subs	r1, r5, #1
   d8274:	6011      	str	r1, [r2, #0]
   d8276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d827a:	2430      	movs	r4, #48	; 0x30
   d827c:	2b00      	cmp	r3, #0
   d827e:	d1b9      	bne.n	d81f4 <_strtoul_r+0x58>
   d8280:	2308      	movs	r3, #8
   d8282:	e7b7      	b.n	d81f4 <_strtoul_r+0x58>
   d8284:	230a      	movs	r3, #10
   d8286:	e7b5      	b.n	d81f4 <_strtoul_r+0x58>
   d8288:	2c30      	cmp	r4, #48	; 0x30
   d828a:	d0ab      	beq.n	d81e4 <_strtoul_r+0x48>
   d828c:	e7b2      	b.n	d81f4 <_strtoul_r+0x58>
   d828e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8292:	bf00      	nop
   d8294:	2003e1fc 	.word	0x2003e1fc

000d8298 <strtoul>:
   d8298:	4613      	mov	r3, r2
   d829a:	460a      	mov	r2, r1
   d829c:	4601      	mov	r1, r0
   d829e:	4802      	ldr	r0, [pc, #8]	; (d82a8 <strtoul+0x10>)
   d82a0:	6800      	ldr	r0, [r0, #0]
   d82a2:	f7ff bf7b 	b.w	d819c <_strtoul_r>
   d82a6:	bf00      	nop
   d82a8:	2003e260 	.word	0x2003e260

000d82ac <__tzcalc_limits>:
   d82ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d82b0:	4604      	mov	r4, r0
   d82b2:	f000 fa6f 	bl	d8794 <__gettzinfo>
   d82b6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d82ba:	429c      	cmp	r4, r3
   d82bc:	f340 8096 	ble.w	d83ec <__tzcalc_limits+0x140>
   d82c0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d82c4:	18e3      	adds	r3, r4, r3
   d82c6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d82ca:	109b      	asrs	r3, r3, #2
   d82cc:	f240 156d 	movw	r5, #365	; 0x16d
   d82d0:	fb05 3502 	mla	r5, r5, r2, r3
   d82d4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d82d8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d82dc:	fb92 f3f3 	sdiv	r3, r2, r3
   d82e0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d82e4:	442b      	add	r3, r5
   d82e6:	18a5      	adds	r5, r4, r2
   d82e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d82ec:	fb95 f5f2 	sdiv	r5, r5, r2
   d82f0:	441d      	add	r5, r3
   d82f2:	2364      	movs	r3, #100	; 0x64
   d82f4:	fb94 f7f2 	sdiv	r7, r4, r2
   d82f8:	fb94 f6f3 	sdiv	r6, r4, r3
   d82fc:	fb02 4717 	mls	r7, r2, r7, r4
   d8300:	fb03 4616 	mls	r6, r3, r6, r4
   d8304:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8308:	fab7 fe87 	clz	lr, r7
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	f004 0303 	and.w	r3, r4, #3
   d8312:	6044      	str	r4, [r0, #4]
   d8314:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8318:	4601      	mov	r1, r0
   d831a:	9300      	str	r3, [sp, #0]
   d831c:	f04f 0c07 	mov.w	ip, #7
   d8320:	7a0b      	ldrb	r3, [r1, #8]
   d8322:	2b4a      	cmp	r3, #74	; 0x4a
   d8324:	d10e      	bne.n	d8344 <__tzcalc_limits+0x98>
   d8326:	694b      	ldr	r3, [r1, #20]
   d8328:	9a00      	ldr	r2, [sp, #0]
   d832a:	18ec      	adds	r4, r5, r3
   d832c:	b902      	cbnz	r2, d8330 <__tzcalc_limits+0x84>
   d832e:	b906      	cbnz	r6, d8332 <__tzcalc_limits+0x86>
   d8330:	b927      	cbnz	r7, d833c <__tzcalc_limits+0x90>
   d8332:	2b3b      	cmp	r3, #59	; 0x3b
   d8334:	bfd4      	ite	le
   d8336:	2300      	movle	r3, #0
   d8338:	2301      	movgt	r3, #1
   d833a:	e000      	b.n	d833e <__tzcalc_limits+0x92>
   d833c:	2300      	movs	r3, #0
   d833e:	4423      	add	r3, r4
   d8340:	3b01      	subs	r3, #1
   d8342:	e03f      	b.n	d83c4 <__tzcalc_limits+0x118>
   d8344:	2b44      	cmp	r3, #68	; 0x44
   d8346:	d102      	bne.n	d834e <__tzcalc_limits+0xa2>
   d8348:	694b      	ldr	r3, [r1, #20]
   d834a:	442b      	add	r3, r5
   d834c:	e03a      	b.n	d83c4 <__tzcalc_limits+0x118>
   d834e:	9b00      	ldr	r3, [sp, #0]
   d8350:	b92b      	cbnz	r3, d835e <__tzcalc_limits+0xb2>
   d8352:	2e00      	cmp	r6, #0
   d8354:	bf0c      	ite	eq
   d8356:	46f0      	moveq	r8, lr
   d8358:	f04f 0801 	movne.w	r8, #1
   d835c:	e000      	b.n	d8360 <__tzcalc_limits+0xb4>
   d835e:	46f0      	mov	r8, lr
   d8360:	4b24      	ldr	r3, [pc, #144]	; (d83f4 <__tzcalc_limits+0x148>)
   d8362:	68cc      	ldr	r4, [r1, #12]
   d8364:	2230      	movs	r2, #48	; 0x30
   d8366:	fb02 3808 	mla	r8, r2, r8, r3
   d836a:	f1a8 0a04 	sub.w	sl, r8, #4
   d836e:	46a9      	mov	r9, r5
   d8370:	2301      	movs	r3, #1
   d8372:	42a3      	cmp	r3, r4
   d8374:	da04      	bge.n	d8380 <__tzcalc_limits+0xd4>
   d8376:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d837a:	3301      	adds	r3, #1
   d837c:	44d9      	add	r9, fp
   d837e:	e7f8      	b.n	d8372 <__tzcalc_limits+0xc6>
   d8380:	f109 0304 	add.w	r3, r9, #4
   d8384:	fb93 fbfc 	sdiv	fp, r3, ip
   d8388:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d838c:	2c01      	cmp	r4, #1
   d838e:	ebca 0a03 	rsb	sl, sl, r3
   d8392:	694b      	ldr	r3, [r1, #20]
   d8394:	bfb8      	it	lt
   d8396:	2401      	movlt	r4, #1
   d8398:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d839c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d83a0:	690b      	ldr	r3, [r1, #16]
   d83a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d83a6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d83aa:	bf48      	it	mi
   d83ac:	f10a 0a07 	addmi.w	sl, sl, #7
   d83b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d83b4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d83b8:	4453      	add	r3, sl
   d83ba:	42a3      	cmp	r3, r4
   d83bc:	db01      	blt.n	d83c2 <__tzcalc_limits+0x116>
   d83be:	3b07      	subs	r3, #7
   d83c0:	e7fb      	b.n	d83ba <__tzcalc_limits+0x10e>
   d83c2:	444b      	add	r3, r9
   d83c4:	698c      	ldr	r4, [r1, #24]
   d83c6:	4a0c      	ldr	r2, [pc, #48]	; (d83f8 <__tzcalc_limits+0x14c>)
   d83c8:	fb02 4303 	mla	r3, r2, r3, r4
   d83cc:	6a0c      	ldr	r4, [r1, #32]
   d83ce:	4423      	add	r3, r4
   d83d0:	f841 3f1c 	str.w	r3, [r1, #28]!
   d83d4:	9b01      	ldr	r3, [sp, #4]
   d83d6:	4299      	cmp	r1, r3
   d83d8:	d1a2      	bne.n	d8320 <__tzcalc_limits+0x74>
   d83da:	69c3      	ldr	r3, [r0, #28]
   d83dc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d83de:	4293      	cmp	r3, r2
   d83e0:	bfac      	ite	ge
   d83e2:	2300      	movge	r3, #0
   d83e4:	2301      	movlt	r3, #1
   d83e6:	6003      	str	r3, [r0, #0]
   d83e8:	2001      	movs	r0, #1
   d83ea:	e000      	b.n	d83ee <__tzcalc_limits+0x142>
   d83ec:	2000      	movs	r0, #0
   d83ee:	b003      	add	sp, #12
   d83f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d83f4:	000d8ff4 	.word	0x000d8ff4
   d83f8:	00015180 	.word	0x00015180

000d83fc <__tz_lock>:
   d83fc:	4770      	bx	lr

000d83fe <__tz_unlock>:
   d83fe:	4770      	bx	lr

000d8400 <_tzset_unlocked>:
   d8400:	4b01      	ldr	r3, [pc, #4]	; (d8408 <_tzset_unlocked+0x8>)
   d8402:	6818      	ldr	r0, [r3, #0]
   d8404:	f000 b802 	b.w	d840c <_tzset_unlocked_r>
   d8408:	2003e260 	.word	0x2003e260

000d840c <_tzset_unlocked_r>:
   d840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8410:	b08d      	sub	sp, #52	; 0x34
   d8412:	4607      	mov	r7, r0
   d8414:	f000 f9be 	bl	d8794 <__gettzinfo>
   d8418:	49b0      	ldr	r1, [pc, #704]	; (d86dc <_tzset_unlocked_r+0x2d0>)
   d841a:	4eb1      	ldr	r6, [pc, #708]	; (d86e0 <_tzset_unlocked_r+0x2d4>)
   d841c:	4604      	mov	r4, r0
   d841e:	4638      	mov	r0, r7
   d8420:	f000 f9b0 	bl	d8784 <_getenv_r>
   d8424:	4605      	mov	r5, r0
   d8426:	b960      	cbnz	r0, d8442 <_tzset_unlocked_r+0x36>
   d8428:	4bae      	ldr	r3, [pc, #696]	; (d86e4 <_tzset_unlocked_r+0x2d8>)
   d842a:	4aaf      	ldr	r2, [pc, #700]	; (d86e8 <_tzset_unlocked_r+0x2dc>)
   d842c:	6018      	str	r0, [r3, #0]
   d842e:	4baf      	ldr	r3, [pc, #700]	; (d86ec <_tzset_unlocked_r+0x2e0>)
   d8430:	6018      	str	r0, [r3, #0]
   d8432:	4baf      	ldr	r3, [pc, #700]	; (d86f0 <_tzset_unlocked_r+0x2e4>)
   d8434:	6830      	ldr	r0, [r6, #0]
   d8436:	601a      	str	r2, [r3, #0]
   d8438:	605a      	str	r2, [r3, #4]
   d843a:	f7fd fa79 	bl	d5930 <free>
   d843e:	6035      	str	r5, [r6, #0]
   d8440:	e148      	b.n	d86d4 <_tzset_unlocked_r+0x2c8>
   d8442:	6831      	ldr	r1, [r6, #0]
   d8444:	b979      	cbnz	r1, d8466 <_tzset_unlocked_r+0x5a>
   d8446:	6830      	ldr	r0, [r6, #0]
   d8448:	f7fd fa72 	bl	d5930 <free>
   d844c:	4628      	mov	r0, r5
   d844e:	f7ff fde4 	bl	d801a <strlen>
   d8452:	1c41      	adds	r1, r0, #1
   d8454:	4638      	mov	r0, r7
   d8456:	f7fd fa93 	bl	d5980 <_malloc_r>
   d845a:	6030      	str	r0, [r6, #0]
   d845c:	b148      	cbz	r0, d8472 <_tzset_unlocked_r+0x66>
   d845e:	4629      	mov	r1, r5
   d8460:	f7ff fdb8 	bl	d7fd4 <strcpy>
   d8464:	e005      	b.n	d8472 <_tzset_unlocked_r+0x66>
   d8466:	f7ff fdab 	bl	d7fc0 <strcmp>
   d846a:	2800      	cmp	r0, #0
   d846c:	f000 8132 	beq.w	d86d4 <_tzset_unlocked_r+0x2c8>
   d8470:	e7e9      	b.n	d8446 <_tzset_unlocked_r+0x3a>
   d8472:	782b      	ldrb	r3, [r5, #0]
   d8474:	4a9f      	ldr	r2, [pc, #636]	; (d86f4 <_tzset_unlocked_r+0x2e8>)
   d8476:	49a0      	ldr	r1, [pc, #640]	; (d86f8 <_tzset_unlocked_r+0x2ec>)
   d8478:	2b3a      	cmp	r3, #58	; 0x3a
   d847a:	bf08      	it	eq
   d847c:	3501      	addeq	r5, #1
   d847e:	ae0a      	add	r6, sp, #40	; 0x28
   d8480:	4633      	mov	r3, r6
   d8482:	4628      	mov	r0, r5
   d8484:	f7fd fa64 	bl	d5950 <siscanf>
   d8488:	2800      	cmp	r0, #0
   d848a:	f340 8123 	ble.w	d86d4 <_tzset_unlocked_r+0x2c8>
   d848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8490:	18ef      	adds	r7, r5, r3
   d8492:	5ceb      	ldrb	r3, [r5, r3]
   d8494:	2b2d      	cmp	r3, #45	; 0x2d
   d8496:	d103      	bne.n	d84a0 <_tzset_unlocked_r+0x94>
   d8498:	3701      	adds	r7, #1
   d849a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d849e:	e003      	b.n	d84a8 <_tzset_unlocked_r+0x9c>
   d84a0:	2b2b      	cmp	r3, #43	; 0x2b
   d84a2:	bf08      	it	eq
   d84a4:	3701      	addeq	r7, #1
   d84a6:	2501      	movs	r5, #1
   d84a8:	f10d 0a20 	add.w	sl, sp, #32
   d84ac:	f10d 0b1e 	add.w	fp, sp, #30
   d84b0:	f04f 0800 	mov.w	r8, #0
   d84b4:	9603      	str	r6, [sp, #12]
   d84b6:	f8cd a008 	str.w	sl, [sp, #8]
   d84ba:	9601      	str	r6, [sp, #4]
   d84bc:	f8cd b000 	str.w	fp, [sp]
   d84c0:	4633      	mov	r3, r6
   d84c2:	aa07      	add	r2, sp, #28
   d84c4:	498d      	ldr	r1, [pc, #564]	; (d86fc <_tzset_unlocked_r+0x2f0>)
   d84c6:	f8ad 801e 	strh.w	r8, [sp, #30]
   d84ca:	4638      	mov	r0, r7
   d84cc:	f8ad 8020 	strh.w	r8, [sp, #32]
   d84d0:	f7fd fa3e 	bl	d5950 <siscanf>
   d84d4:	4540      	cmp	r0, r8
   d84d6:	f340 80fd 	ble.w	d86d4 <_tzset_unlocked_r+0x2c8>
   d84da:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d84de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d84e2:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8708 <_tzset_unlocked_r+0x2fc>
   d84e6:	213c      	movs	r1, #60	; 0x3c
   d84e8:	fb01 3302 	mla	r3, r1, r2, r3
   d84ec:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d84f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d84f4:	fb01 3302 	mla	r3, r1, r2, r3
   d84f8:	435d      	muls	r5, r3
   d84fa:	6225      	str	r5, [r4, #32]
   d84fc:	4d7c      	ldr	r5, [pc, #496]	; (d86f0 <_tzset_unlocked_r+0x2e4>)
   d84fe:	4b7d      	ldr	r3, [pc, #500]	; (d86f4 <_tzset_unlocked_r+0x2e8>)
   d8500:	602b      	str	r3, [r5, #0]
   d8502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8504:	497c      	ldr	r1, [pc, #496]	; (d86f8 <_tzset_unlocked_r+0x2ec>)
   d8506:	441f      	add	r7, r3
   d8508:	464a      	mov	r2, r9
   d850a:	4633      	mov	r3, r6
   d850c:	4638      	mov	r0, r7
   d850e:	f7fd fa1f 	bl	d5950 <siscanf>
   d8512:	4540      	cmp	r0, r8
   d8514:	dc08      	bgt.n	d8528 <_tzset_unlocked_r+0x11c>
   d8516:	682b      	ldr	r3, [r5, #0]
   d8518:	606b      	str	r3, [r5, #4]
   d851a:	4b72      	ldr	r3, [pc, #456]	; (d86e4 <_tzset_unlocked_r+0x2d8>)
   d851c:	6a22      	ldr	r2, [r4, #32]
   d851e:	601a      	str	r2, [r3, #0]
   d8520:	4b72      	ldr	r3, [pc, #456]	; (d86ec <_tzset_unlocked_r+0x2e0>)
   d8522:	f8c3 8000 	str.w	r8, [r3]
   d8526:	e0d5      	b.n	d86d4 <_tzset_unlocked_r+0x2c8>
   d8528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d852a:	f8c5 9004 	str.w	r9, [r5, #4]
   d852e:	18fd      	adds	r5, r7, r3
   d8530:	5cfb      	ldrb	r3, [r7, r3]
   d8532:	2b2d      	cmp	r3, #45	; 0x2d
   d8534:	d103      	bne.n	d853e <_tzset_unlocked_r+0x132>
   d8536:	3501      	adds	r5, #1
   d8538:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d853c:	e003      	b.n	d8546 <_tzset_unlocked_r+0x13a>
   d853e:	2b2b      	cmp	r3, #43	; 0x2b
   d8540:	bf08      	it	eq
   d8542:	3501      	addeq	r5, #1
   d8544:	2701      	movs	r7, #1
   d8546:	2300      	movs	r3, #0
   d8548:	f8ad 301c 	strh.w	r3, [sp, #28]
   d854c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8550:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8554:	930a      	str	r3, [sp, #40]	; 0x28
   d8556:	9603      	str	r6, [sp, #12]
   d8558:	f8cd a008 	str.w	sl, [sp, #8]
   d855c:	9601      	str	r6, [sp, #4]
   d855e:	f8cd b000 	str.w	fp, [sp]
   d8562:	4633      	mov	r3, r6
   d8564:	aa07      	add	r2, sp, #28
   d8566:	4965      	ldr	r1, [pc, #404]	; (d86fc <_tzset_unlocked_r+0x2f0>)
   d8568:	4628      	mov	r0, r5
   d856a:	f7fd f9f1 	bl	d5950 <siscanf>
   d856e:	2800      	cmp	r0, #0
   d8570:	dc04      	bgt.n	d857c <_tzset_unlocked_r+0x170>
   d8572:	6a23      	ldr	r3, [r4, #32]
   d8574:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8578:	63e3      	str	r3, [r4, #60]	; 0x3c
   d857a:	e00e      	b.n	d859a <_tzset_unlocked_r+0x18e>
   d857c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8580:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8584:	213c      	movs	r1, #60	; 0x3c
   d8586:	fb01 3302 	mla	r3, r1, r2, r3
   d858a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d858e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8592:	fb01 3302 	mla	r3, r1, r2, r3
   d8596:	435f      	muls	r7, r3
   d8598:	63e7      	str	r7, [r4, #60]	; 0x3c
   d859a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d859c:	4627      	mov	r7, r4
   d859e:	441d      	add	r5, r3
   d85a0:	f04f 0900 	mov.w	r9, #0
   d85a4:	782b      	ldrb	r3, [r5, #0]
   d85a6:	2b2c      	cmp	r3, #44	; 0x2c
   d85a8:	bf08      	it	eq
   d85aa:	3501      	addeq	r5, #1
   d85ac:	f895 8000 	ldrb.w	r8, [r5]
   d85b0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d85b4:	d126      	bne.n	d8604 <_tzset_unlocked_r+0x1f8>
   d85b6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d85ba:	9302      	str	r3, [sp, #8]
   d85bc:	ab09      	add	r3, sp, #36	; 0x24
   d85be:	9300      	str	r3, [sp, #0]
   d85c0:	9603      	str	r6, [sp, #12]
   d85c2:	9601      	str	r6, [sp, #4]
   d85c4:	4633      	mov	r3, r6
   d85c6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d85ca:	494d      	ldr	r1, [pc, #308]	; (d8700 <_tzset_unlocked_r+0x2f4>)
   d85cc:	4628      	mov	r0, r5
   d85ce:	f7fd f9bf 	bl	d5950 <siscanf>
   d85d2:	2803      	cmp	r0, #3
   d85d4:	d17e      	bne.n	d86d4 <_tzset_unlocked_r+0x2c8>
   d85d6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d85da:	1e4b      	subs	r3, r1, #1
   d85dc:	2b0b      	cmp	r3, #11
   d85de:	d879      	bhi.n	d86d4 <_tzset_unlocked_r+0x2c8>
   d85e0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d85e4:	1e53      	subs	r3, r2, #1
   d85e6:	2b04      	cmp	r3, #4
   d85e8:	d874      	bhi.n	d86d4 <_tzset_unlocked_r+0x2c8>
   d85ea:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d85ee:	2b06      	cmp	r3, #6
   d85f0:	d870      	bhi.n	d86d4 <_tzset_unlocked_r+0x2c8>
   d85f2:	f887 8008 	strb.w	r8, [r7, #8]
   d85f6:	60f9      	str	r1, [r7, #12]
   d85f8:	613a      	str	r2, [r7, #16]
   d85fa:	617b      	str	r3, [r7, #20]
   d85fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d85fe:	eb05 0803 	add.w	r8, r5, r3
   d8602:	e02a      	b.n	d865a <_tzset_unlocked_r+0x24e>
   d8604:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8608:	bf06      	itte	eq
   d860a:	3501      	addeq	r5, #1
   d860c:	4643      	moveq	r3, r8
   d860e:	2344      	movne	r3, #68	; 0x44
   d8610:	220a      	movs	r2, #10
   d8612:	a90b      	add	r1, sp, #44	; 0x2c
   d8614:	4628      	mov	r0, r5
   d8616:	9305      	str	r3, [sp, #20]
   d8618:	f7ff fe3e 	bl	d8298 <strtoul>
   d861c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8620:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8624:	4545      	cmp	r5, r8
   d8626:	9b05      	ldr	r3, [sp, #20]
   d8628:	d114      	bne.n	d8654 <_tzset_unlocked_r+0x248>
   d862a:	234d      	movs	r3, #77	; 0x4d
   d862c:	f1b9 0f00 	cmp.w	r9, #0
   d8630:	d107      	bne.n	d8642 <_tzset_unlocked_r+0x236>
   d8632:	7223      	strb	r3, [r4, #8]
   d8634:	2303      	movs	r3, #3
   d8636:	60e3      	str	r3, [r4, #12]
   d8638:	2302      	movs	r3, #2
   d863a:	6123      	str	r3, [r4, #16]
   d863c:	f8c4 9014 	str.w	r9, [r4, #20]
   d8640:	e00b      	b.n	d865a <_tzset_unlocked_r+0x24e>
   d8642:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8646:	230b      	movs	r3, #11
   d8648:	62a3      	str	r3, [r4, #40]	; 0x28
   d864a:	2301      	movs	r3, #1
   d864c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d864e:	2300      	movs	r3, #0
   d8650:	6323      	str	r3, [r4, #48]	; 0x30
   d8652:	e002      	b.n	d865a <_tzset_unlocked_r+0x24e>
   d8654:	b280      	uxth	r0, r0
   d8656:	723b      	strb	r3, [r7, #8]
   d8658:	6178      	str	r0, [r7, #20]
   d865a:	2302      	movs	r3, #2
   d865c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8660:	2300      	movs	r3, #0
   d8662:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8666:	f8ad 3020 	strh.w	r3, [sp, #32]
   d866a:	930a      	str	r3, [sp, #40]	; 0x28
   d866c:	f898 3000 	ldrb.w	r3, [r8]
   d8670:	2b2f      	cmp	r3, #47	; 0x2f
   d8672:	d10b      	bne.n	d868c <_tzset_unlocked_r+0x280>
   d8674:	9603      	str	r6, [sp, #12]
   d8676:	f8cd a008 	str.w	sl, [sp, #8]
   d867a:	9601      	str	r6, [sp, #4]
   d867c:	f8cd b000 	str.w	fp, [sp]
   d8680:	4633      	mov	r3, r6
   d8682:	aa07      	add	r2, sp, #28
   d8684:	491f      	ldr	r1, [pc, #124]	; (d8704 <_tzset_unlocked_r+0x2f8>)
   d8686:	4640      	mov	r0, r8
   d8688:	f7fd f962 	bl	d5950 <siscanf>
   d868c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8690:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8694:	213c      	movs	r1, #60	; 0x3c
   d8696:	fb01 3302 	mla	r3, r1, r2, r3
   d869a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d869e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d86a2:	fb01 3302 	mla	r3, r1, r2, r3
   d86a6:	61bb      	str	r3, [r7, #24]
   d86a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d86aa:	f109 0901 	add.w	r9, r9, #1
   d86ae:	f1b9 0f02 	cmp.w	r9, #2
   d86b2:	4445      	add	r5, r8
   d86b4:	f107 071c 	add.w	r7, r7, #28
   d86b8:	f47f af74 	bne.w	d85a4 <_tzset_unlocked_r+0x198>
   d86bc:	6860      	ldr	r0, [r4, #4]
   d86be:	f7ff fdf5 	bl	d82ac <__tzcalc_limits>
   d86c2:	4b08      	ldr	r3, [pc, #32]	; (d86e4 <_tzset_unlocked_r+0x2d8>)
   d86c4:	6a22      	ldr	r2, [r4, #32]
   d86c6:	601a      	str	r2, [r3, #0]
   d86c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d86ca:	1a9b      	subs	r3, r3, r2
   d86cc:	4a07      	ldr	r2, [pc, #28]	; (d86ec <_tzset_unlocked_r+0x2e0>)
   d86ce:	bf18      	it	ne
   d86d0:	2301      	movne	r3, #1
   d86d2:	6013      	str	r3, [r2, #0]
   d86d4:	b00d      	add	sp, #52	; 0x34
   d86d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d86da:	bf00      	nop
   d86dc:	000d9054 	.word	0x000d9054
   d86e0:	2003e7e0 	.word	0x2003e7e0
   d86e4:	2003e7e8 	.word	0x2003e7e8
   d86e8:	000d9057 	.word	0x000d9057
   d86ec:	2003e7e4 	.word	0x2003e7e4
   d86f0:	2003e264 	.word	0x2003e264
   d86f4:	2003e7d3 	.word	0x2003e7d3
   d86f8:	000d905b 	.word	0x000d905b
   d86fc:	000d907e 	.word	0x000d907e
   d8700:	000d906a 	.word	0x000d906a
   d8704:	000d907d 	.word	0x000d907d
   d8708:	2003e7c8 	.word	0x2003e7c8

000d870c <_findenv_r>:
   d870c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8710:	4607      	mov	r7, r0
   d8712:	468b      	mov	fp, r1
   d8714:	4690      	mov	r8, r2
   d8716:	f000 f8d9 	bl	d88cc <__env_lock>
   d871a:	4b19      	ldr	r3, [pc, #100]	; (d8780 <_findenv_r+0x74>)
   d871c:	681d      	ldr	r5, [r3, #0]
   d871e:	469a      	mov	sl, r3
   d8720:	b13d      	cbz	r5, d8732 <_findenv_r+0x26>
   d8722:	465c      	mov	r4, fp
   d8724:	4623      	mov	r3, r4
   d8726:	f813 2b01 	ldrb.w	r2, [r3], #1
   d872a:	b142      	cbz	r2, d873e <_findenv_r+0x32>
   d872c:	2a3d      	cmp	r2, #61	; 0x3d
   d872e:	461c      	mov	r4, r3
   d8730:	d1f8      	bne.n	d8724 <_findenv_r+0x18>
   d8732:	4638      	mov	r0, r7
   d8734:	f000 f8cb 	bl	d88ce <__env_unlock>
   d8738:	2000      	movs	r0, #0
   d873a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d873e:	ebcb 0404 	rsb	r4, fp, r4
   d8742:	46a9      	mov	r9, r5
   d8744:	f859 0b04 	ldr.w	r0, [r9], #4
   d8748:	2800      	cmp	r0, #0
   d874a:	d0f2      	beq.n	d8732 <_findenv_r+0x26>
   d874c:	4622      	mov	r2, r4
   d874e:	4659      	mov	r1, fp
   d8750:	f7ff fc6b 	bl	d802a <strncmp>
   d8754:	b988      	cbnz	r0, d877a <_findenv_r+0x6e>
   d8756:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d875a:	191e      	adds	r6, r3, r4
   d875c:	5d1b      	ldrb	r3, [r3, r4]
   d875e:	2b3d      	cmp	r3, #61	; 0x3d
   d8760:	d10b      	bne.n	d877a <_findenv_r+0x6e>
   d8762:	f8da 3000 	ldr.w	r3, [sl]
   d8766:	1aed      	subs	r5, r5, r3
   d8768:	10ad      	asrs	r5, r5, #2
   d876a:	4638      	mov	r0, r7
   d876c:	f8c8 5000 	str.w	r5, [r8]
   d8770:	f000 f8ad 	bl	d88ce <__env_unlock>
   d8774:	1c70      	adds	r0, r6, #1
   d8776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d877a:	464d      	mov	r5, r9
   d877c:	e7e1      	b.n	d8742 <_findenv_r+0x36>
   d877e:	bf00      	nop
   d8780:	2003e2ac 	.word	0x2003e2ac

000d8784 <_getenv_r>:
   d8784:	b507      	push	{r0, r1, r2, lr}
   d8786:	aa01      	add	r2, sp, #4
   d8788:	f7ff ffc0 	bl	d870c <_findenv_r>
   d878c:	b003      	add	sp, #12
   d878e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8794 <__gettzinfo>:
   d8794:	4800      	ldr	r0, [pc, #0]	; (d8798 <__gettzinfo+0x4>)
   d8796:	4770      	bx	lr
   d8798:	2003e26c 	.word	0x2003e26c

000d879c <gmtime_r>:
   d879c:	6802      	ldr	r2, [r0, #0]
   d879e:	4b47      	ldr	r3, [pc, #284]	; (d88bc <gmtime_r+0x120>)
   d87a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d87a2:	fb92 f4f3 	sdiv	r4, r2, r3
   d87a6:	fb03 2214 	mls	r2, r3, r4, r2
   d87aa:	2a00      	cmp	r2, #0
   d87ac:	bfbc      	itt	lt
   d87ae:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d87b2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d87b6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d87ba:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d87be:	fb92 f3f0 	sdiv	r3, r2, r0
   d87c2:	fb00 2213 	mls	r2, r0, r3, r2
   d87c6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d87ca:	bfac      	ite	ge
   d87cc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d87d0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d87d4:	608b      	str	r3, [r1, #8]
   d87d6:	fb92 f3f0 	sdiv	r3, r2, r0
   d87da:	fb00 2213 	mls	r2, r0, r3, r2
   d87de:	604b      	str	r3, [r1, #4]
   d87e0:	600a      	str	r2, [r1, #0]
   d87e2:	2307      	movs	r3, #7
   d87e4:	1ce2      	adds	r2, r4, #3
   d87e6:	fb92 f3f3 	sdiv	r3, r2, r3
   d87ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d87ee:	1ad3      	subs	r3, r2, r3
   d87f0:	618b      	str	r3, [r1, #24]
   d87f2:	4b33      	ldr	r3, [pc, #204]	; (d88c0 <gmtime_r+0x124>)
   d87f4:	4d33      	ldr	r5, [pc, #204]	; (d88c4 <gmtime_r+0x128>)
   d87f6:	fb94 f5f5 	sdiv	r5, r4, r5
   d87fa:	fb03 4405 	mla	r4, r3, r5, r4
   d87fe:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8802:	fbb4 f2f2 	udiv	r2, r4, r2
   d8806:	4422      	add	r2, r4
   d8808:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d880c:	fbb4 f3f7 	udiv	r3, r4, r7
   d8810:	1ad2      	subs	r2, r2, r3
   d8812:	482d      	ldr	r0, [pc, #180]	; (d88c8 <gmtime_r+0x12c>)
   d8814:	fbb4 f0f0 	udiv	r0, r4, r0
   d8818:	f648 6694 	movw	r6, #36500	; 0x8e94
   d881c:	1a13      	subs	r3, r2, r0
   d881e:	fbb3 f6f6 	udiv	r6, r3, r6
   d8822:	4434      	add	r4, r6
   d8824:	f240 126d 	movw	r2, #365	; 0x16d
   d8828:	fbb3 f0f2 	udiv	r0, r3, r2
   d882c:	fbb3 f3f7 	udiv	r3, r3, r7
   d8830:	1ae3      	subs	r3, r4, r3
   d8832:	fb02 3310 	mls	r3, r2, r0, r3
   d8836:	2499      	movs	r4, #153	; 0x99
   d8838:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d883c:	3202      	adds	r2, #2
   d883e:	fbb2 f2f4 	udiv	r2, r2, r4
   d8842:	2a0a      	cmp	r2, #10
   d8844:	fb04 f402 	mul.w	r4, r4, r2
   d8848:	f104 0602 	add.w	r6, r4, #2
   d884c:	f04f 0405 	mov.w	r4, #5
   d8850:	fbb6 f4f4 	udiv	r4, r6, r4
   d8854:	bf34      	ite	cc
   d8856:	2602      	movcc	r6, #2
   d8858:	f06f 0609 	mvncs.w	r6, #9
   d885c:	4416      	add	r6, r2
   d885e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8862:	fb02 0505 	mla	r5, r2, r5, r0
   d8866:	1c5f      	adds	r7, r3, #1
   d8868:	2e01      	cmp	r6, #1
   d886a:	bf98      	it	ls
   d886c:	3501      	addls	r5, #1
   d886e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8872:	eba7 0704 	sub.w	r7, r7, r4
   d8876:	d302      	bcc.n	d887e <gmtime_r+0xe2>
   d8878:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d887c:	e014      	b.n	d88a8 <gmtime_r+0x10c>
   d887e:	0782      	lsls	r2, r0, #30
   d8880:	d105      	bne.n	d888e <gmtime_r+0xf2>
   d8882:	2464      	movs	r4, #100	; 0x64
   d8884:	fbb0 f2f4 	udiv	r2, r0, r4
   d8888:	fb04 0212 	mls	r2, r4, r2, r0
   d888c:	b94a      	cbnz	r2, d88a2 <gmtime_r+0x106>
   d888e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8892:	fbb0 f4f2 	udiv	r4, r0, r2
   d8896:	fb02 0014 	mls	r0, r2, r4, r0
   d889a:	fab0 f280 	clz	r2, r0
   d889e:	0952      	lsrs	r2, r2, #5
   d88a0:	e000      	b.n	d88a4 <gmtime_r+0x108>
   d88a2:	2201      	movs	r2, #1
   d88a4:	333b      	adds	r3, #59	; 0x3b
   d88a6:	441a      	add	r2, r3
   d88a8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d88ac:	2300      	movs	r3, #0
   d88ae:	61ca      	str	r2, [r1, #28]
   d88b0:	614d      	str	r5, [r1, #20]
   d88b2:	610e      	str	r6, [r1, #16]
   d88b4:	60cf      	str	r7, [r1, #12]
   d88b6:	620b      	str	r3, [r1, #32]
   d88b8:	4608      	mov	r0, r1
   d88ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d88bc:	00015180 	.word	0x00015180
   d88c0:	fffdc54f 	.word	0xfffdc54f
   d88c4:	00023ab1 	.word	0x00023ab1
   d88c8:	00023ab0 	.word	0x00023ab0

000d88cc <__env_lock>:
   d88cc:	4770      	bx	lr

000d88ce <__env_unlock>:
   d88ce:	4770      	bx	lr

000d88d0 <dynalib_user>:
   d88d0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d88e0:	0000 0000                                   ....

000d88e4 <_ZL13releaseNumber>:
   d88e4:	2e31 3032 0000 0030 4554 504d 5245 5441     1.20..0.TEMPERAT
   d88f4:	5255 2045 4e49 4320 2500 2e34 6631 2520     URE IN C.%4.1f %
   d8904:	0025 6554 706d 7265 7461 7275 2065 7266     %.Temperature fr
   d8914:	6d6f 7420 6b61 4d65 6165 7573 6572 656d     om takeMeasureme
   d8924:	746e 2073 7546 636e 6974 6e6f 2500 302e     nts Function.%.0
   d8934:	2566 0025 3325 312e 2066 0056 3325 312e     f%%.%3.1f V.%3.1
   d8944:	2066 6544 7267 6565 2073 0043 6553 736e     f Degrees C.Sens
   d8954:	726f 5220 6165 2064 6146 6c69 6465 202c     or Read Failed, 
   d8964:	7461 6574 706d 2074 6925 5300 6e65 6973     attempt %i.Sensi
   d8974:	676e 5600 7265 6f62 6573 4d20 646f 2065     ng.Verbose Mode 
   d8984:	7453 7261 6574 2e64 5600 7265 6f62 6573     Started..Verbose
   d8994:	4d20 646f 2065 6c41 6572 6461 2079 4e4f      Mode Already ON
   d89a4:	002e 6556 6272 736f 2065 6f4d 6564 5320     ..Verbose Mode S
   d89b4:	6f74 7070 6465 002e 6556 6272 736f 2065     topped..Verbose 
   d89c4:	6f4d 6564 6120 726c 6165 7964 4f20 4646     Mode already OFF
   d89d4:	002e 227b 6554 706d 7265 7461 7275 2265     ..{"Temperature"
   d89e4:	253a 2e33 6631 202c 4222 7461 6574 7972     :%3.1f, "Battery
   d89f4:	3a22 3325 312e 7d66 4100 7269 512d 6175     ":%3.1f}.Air-Qua
   d8a04:	696c 7974 482d 6f6f 006b 6f4e 4420 7461     lity-Hook.No Dat
   d8a14:	0061 6255 6469 746f 2073 6f48 6b6f 5300     a.Ubidots Hook.S
   d8a24:	6174 6574 5400 6172 736e 7469 6f69 3a6e     tate.Transition:
   d8a34:	2520 2073 6f74 2520 0073 654e 2077 6f48      %s to %s.New Ho
   d8a44:	7275 202d 6552 6f70 7472 6e69 0067 6942     ur- Reporting.Bi
   d8a54:	2067 6843 6e61 6567 2d20 5220 7061 6469     g Change - Rapid
   d8a64:	2620 5220 7065 726f 6974 676e 4300 6168      & Reporting.Cha
   d8a74:	676e 2065 6564 6574 7463 6465 2d20 5220     nge detected - R
   d8a84:	7065 726f 6974 676e 4e00 206f 6843 6e61     eporting.No Chan
   d8a94:	6567 2d20 4920 6c64 0065 6554 706d 7265     ge - Idle.Temper
   d8aa4:	7461 7275 0065 6144 6174 5320 6e65 2074     ature.Data Sent 
   d8ab4:	202f 6552 7073 6e6f 6573 5220 6365 6965     / Response Recei
   d8ac4:	6576 0064 7073 7261 2f6b 6564 6976 6563     ved.spark/device
   d8ad4:	732f 7365 6973 6e6f 652f 646e 5200 7365     /session/end.Res
   d8ae4:	7465 6974 676e 6920 206e 3033 7320 6365     etting in 30 sec
   d8af4:	6e6f 7364 4500 7272 726f 4700 696f 676e     onds.Error.Going
   d8b04:	7420 206f 6174 656b 6120 2520 2069 6573      to take a %i se
   d8b14:	6f63 646e 6e20 7061 4e00 7061 6970 676e     cond nap.Napping
   d8b24:	4600 6f72 206d 6c53 6565 0070 6f57 656b     .From Sleep.Woke
   d8b34:	7055 4300 6d6f 616d 646e 6120 6363 7065     Up.Command accep
   d8b44:	6574 2064 202d 6572 6f70 7472 6e69 2067     ted - reporting 
   d8b54:	6f6e 0077 6f43 6d6d 6e61 2064 6361 6563     now.Command acce
   d8b64:	7470 6465 2d20 7320 6e65 6973 676e 6e20     pted - sensing n
   d8b74:	776f 7600 7265 6f62 6573 6f4d 6564 4700     ow.verboseMode.G
   d8b84:	7465 522d 6165 6964 676e 5300 6e65 2d64     et-Reading.Send-
   d8b94:	6552 6f70 7472 4c00 776f 502d 776f 7265     Report.Low-Power
   d8ba4:	4d2d 646f 0065 6552 656c 7361 0065 6953     -Mode.Release.Si
   d8bb4:	6e67 6c61 4200 7461 6574 7972 0000 0000     gnal.Battery....

000d8bc4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8bcc:	59dd 000d 59e3 000d 5a39 000d 59f1 000d     .Y...Y..9Z...Y..
   d8bdc:	59df 000d                                   .Y..

000d8be0 <_ZTVN5spark13EthernetClassE>:
	...
   d8be8:	604b 000d 6041 000d 6037 000d 602d 000d     K`..A`..7`..-`..
   d8bf8:	6021 000d 6015 000d 6009 000d 6001 000d     !`...`...`...`..
   d8c08:	5ff7 000d 5fed 000d 63b5 000d               ._..._...c..

000d8c14 <_ZTV7TwoWire>:
	...
   d8c1c:	6069 000d 60b3 000d 608b 000d 606b 000d     i`...`...`..k`..
   d8c2c:	6093 000d 609b 000d 60a3 000d 60ab 000d     .`...`...`...`..

000d8c3c <_ZTV9IPAddress>:
	...
   d8c44:	6105 000d 60f5 000d 60f7 000d 6162 6475     .a...`...`..baud
   d8c54:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d8c64:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d8c74:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d8c84:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d8c94:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d8ca4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d8cb4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d8cc4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d8cd4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d8ce4:	203d 6400 7465 6961 736c 3d20 0020 0a0d     = .details = ...
   d8cf4:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d8d04:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d8d14:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d8d24:	696e 0063 6c61 006c                         nic.all.

000d8d2c <_ZTVN5spark9MeshClassE>:
	...
   d8d34:	6247 000d 623d 000d 6233 000d 6229 000d     Gb..=b..3b..)b..
   d8d44:	621d 000d 6211 000d 6205 000d 61fd 000d     .b...b...b...a..
   d8d54:	61f3 000d 61e9 000d 63b5 000d               .a...a...c..

000d8d60 <_ZTVN5spark12NetworkClassE>:
	...
   d8d68:	634d 000d 6357 000d 6361 000d 636b 000d     Mc..Wc..ac..kc..
   d8d78:	6375 000d 6381 000d 638d 000d 6399 000d     uc...c...c...c..
   d8d88:	63a1 000d 63ab 000d 63b5 000d 616e 006e     .c...c...c..nan.
   d8d98:	766f 0066 6e69 0066                         ovf.inf.

000d8da0 <_ZTV8SPIClass>:
	...
   d8da8:	6759 000d 675b 000d 2b25 3330 3a64 3025     Yg..[g..%+03d:%0
   d8db8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d8dc8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d8dd8 <_ZTV11USARTSerial>:
	...
   d8de0:	6a6d 000d 6abd 000d 6acb 000d 6495 000d     mj...j...j...d..
   d8df0:	6a81 000d 6aa3 000d 6a8f 000d 6ab7 000d     .j...j...j...j..
   d8e00:	6a6f 000d 6a73 000d                         oj..sj..

000d8e08 <_ZTV9USBSerial>:
	...
   d8e10:	6b75 000d 6bc5 000d 6bd3 000d 6495 000d     uk...k...k...d..
   d8e20:	6bb1 000d 6b77 000d 6b8d 000d 6bbf 000d     .k..wk...k...k..
   d8e30:	6ba3 000d 6b71 000d                         .k..qk..

000d8e38 <_ZTVN5spark9WiFiClassE>:
	...
   d8e40:	6d4d 000d 6d43 000d 6d39 000d 6ce1 000d     Mm..Cm..9m...l..
   d8e50:	6d2d 000d 6d21 000d 6d15 000d 6d0d 000d     -m..!m...m...m..
   d8e60:	6d03 000d 6cf9 000d 63b5 000d               .m...l...c..

000d8e6c <_ZTV10WiFiSignal>:
	...
   d8e74:	6c81 000d 6ceb 000d 6c83 000d 6d8d 000d     .l...l...l...m..
   d8e84:	6c89 000d 6d59 000d 6cb5 000d               .l..Ym...l..

000d8e90 <_ctype_>:
   d8e90:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8ea0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8eb0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8ec0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8ed0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8ee0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8ef0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8f00:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8f10:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8f94 <__sf_fake_stdin>:
	...

000d8fb4 <__sf_fake_stdout>:
	...

000d8fd4 <__sf_fake_stderr>:
	...

000d8ff4 <__month_lengths>:
   d8ff4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9004:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9014:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9024:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9034:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9044:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9054:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d9064:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d9074:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d9084:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d9090 <link_const_variable_data_end>:
   d9090:	000d4d75 	.word	0x000d4d75
   d9094:	000d5013 	.word	0x000d5013
   d9098:	000d53f5 	.word	0x000d53f5
   d909c:	000d59cd 	.word	0x000d59cd
   d90a0:	000d6055 	.word	0x000d6055
   d90a4:	000d61d9 	.word	0x000d61d9
   d90a8:	000d62fd 	.word	0x000d62fd
   d90ac:	000d6481 	.word	0x000d6481
   d90b0:	000d673d 	.word	0x000d673d
   d90b4:	000d6949 	.word	0x000d6949
   d90b8:	000d6a59 	.word	0x000d6a59
   d90bc:	000d6e65 	.word	0x000d6e65
   d90c0:	000d704d 	.word	0x000d704d
   d90c4:	000d70a5 	.word	0x000d70a5
   d90c8:	000d7169 	.word	0x000d7169
   d90cc:	000d71ed 	.word	0x000d71ed
   d90d0:	000d7271 	.word	0x000d7271

000d90d4 <link_constructors_end>:
	...
