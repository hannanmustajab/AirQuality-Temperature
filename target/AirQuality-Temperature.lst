
/Users/chipmc/Documents/Maker/Particle/Projects/AirQuality-Temperature/target/AirQuality-Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00018924  2**0
                  CONTENTS
  3 .data         000001f8  2003e0ec  000d8700  0000e0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000050c  2003e2e4  2003e2e4  0001e2e4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d88f8  000d88f8  000188f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8920  000d8920  00018920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000d2ffd  00000000  00000000  00018924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012464  00000000  00000000  000eb921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000168ad  00000000  00000000  000fdd85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000023c0  00000000  00000000  00114632  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039d8  00000000  00000000  001169f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00035ca4  00000000  00000000  0011a3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002adf2  00000000  00000000  0015006e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e24cd  00000000  00000000  0017ae60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c750  00000000  00000000  0025d330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	94 7f 0d 00                                         ....

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 faed 	bl	d760c <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 faf2 	bl	d7622 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e0ec 	.word	0x2003e0ec
   d4048:	000d8700 	.word	0x000d8700
   d404c:	2003e2e4 	.word	0x2003e2e4
   d4050:	2003e2e4 	.word	0x2003e2e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	f002 fbb9 	bl	d67d0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d86f8 	.word	0x000d86f8
   d4080:	000d86b8 	.word	0x000d86b8

000d4084 <module_user_setup>:
   d4084:	f000 bc20 	b.w	d48c8 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 fa0b 	bl	d44a4 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f002 bb6b 	b.w	d676c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 ba19 	b.w	d54cc <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 ba1f 	b.w	d54dc <free>

000d409e <_ZdaPv>:
   d409e:	f001 ba1d 	b.w	d54dc <free>

000d40a2 <__cxa_guard_acquire>:
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d002      	beq.n	d40bc <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d002      	beq.n	d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
   d40ba:	e004      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40bc:	6001      	str	r1, [r0, #0]
	      break;
   d40be:	e002      	b.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c0:	680b      	ldr	r3, [r1, #0]
   d40c2:	b100      	cbz	r0, d40c6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
   d40c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c6:	2000      	movs	r0, #0
   d40c8:	4770      	bx	lr

000d40ca <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40cc:	6804      	ldr	r4, [r0, #0]
   d40ce:	4668      	mov	r0, sp
   d40d0:	f001 fffd 	bl	d60ce <_ZN6StringC1EOS_>
   d40d4:	4668      	mov	r0, sp
   d40d6:	47a0      	blx	r4
   d40d8:	4604      	mov	r4, r0
   d40da:	4668      	mov	r0, sp
   d40dc:	f002 f807 	bl	d60ee <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40e0:	4620      	mov	r0, r4
   d40e2:	b004      	add	sp, #16
   d40e4:	bd10      	pop	{r4, pc}

000d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40ec:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ee:	f88d 3000 	strb.w	r3, [sp]
   d40f2:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f4:	4605      	mov	r5, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f6:	f001 fba7 	bl	d5848 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
   d40fa:	4628      	mov	r0, r5
   d40fc:	b003      	add	sp, #12
   d40fe:	bd30      	pop	{r4, r5, pc}

000d4100 <_Z20PublishDelayFunctionv>:
      break;
  }
}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
   d4100:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
   d4102:	4c07      	ldr	r4, [pc, #28]	; (d4120 <_Z20PublishDelayFunctionv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4104:	f000 ffd6 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	1ac0      	subs	r0, r0, r3
   d410c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4110:	d904      	bls.n	d411c <_Z20PublishDelayFunctionv+0x1c>
   d4112:	f000 ffcf 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>
    return 0;
  else {
    tstamp = millis();
   d4116:	6020      	str	r0, [r4, #0]
   d4118:	2001      	movs	r0, #1
   d411a:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time
bool PublishDelayFunction() {
  static unsigned long tstamp = 0;
  if (millis() - tstamp <= 1000)                                                  // Particle limits webhooks and publishes to once every second
    return 0;
   d411c:	2000      	movs	r0, #0
  else {
    tstamp = millis();
    return 1;
  }
}
   d411e:	bd10      	pop	{r4, pc}
   d4120:	2003e2fc 	.word	0x2003e2fc

000d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4124:	b508      	push	{r3, lr}

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
  if (Command == "1") {
    state = MEASURING_STATE;                                                      // Set the state to reporting
    waitUntil(PublishDelayFunction);  
   d4126:	f7ff ffeb 	bl	d4100 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d412a:	b118      	cbz	r0, d4134 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d412c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4130:	f7ff bfe6 	b.w	d4100 <_Z20PublishDelayFunctionv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4134:	f001 f93a 	bl	d53ac <spark_process>
   d4138:	e7f5      	b.n	d4126 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46+0x2>
	...

000d413c <_Z17getSignalStrengthv>:
  }
}

// Functions for mobile app reporting.
void getSignalStrength()
{
   d413c:	b500      	push	{lr}
   d413e:	b08d      	sub	sp, #52	; 0x34
  WiFiSignal sig = WiFi.RSSI();
   d4140:	490a      	ldr	r1, [pc, #40]	; (d416c <_Z17getSignalStrengthv+0x30>)
   d4142:	a803      	add	r0, sp, #12
   d4144:	f002 fab8 	bl	d66b8 <_ZN5spark9WiFiClass4RSSIEv>
  float rssi = sig.getStrength();
   d4148:	a803      	add	r0, sp, #12
   d414a:	f002 fa7b 	bl	d6644 <_ZNK10WiFiSignal11getStrengthEv>
  snprintf(signalString, sizeof(signalString), "%.0f%%", rssi);
   d414e:	ee10 0a10 	vmov	r0, s0
   d4152:	f002 fe9b 	bl	d6e8c <__aeabi_f2d>
   d4156:	4a06      	ldr	r2, [pc, #24]	; (d4170 <_Z17getSignalStrengthv+0x34>)
   d4158:	e9cd 0100 	strd	r0, r1, [sp]
   d415c:	2110      	movs	r1, #16
   d415e:	4805      	ldr	r0, [pc, #20]	; (d4174 <_Z17getSignalStrengthv+0x38>)
   d4160:	f001 f9d4 	bl	d550c <snprintf>
}
   d4164:	b00d      	add	sp, #52	; 0x34
   d4166:	f85d fb04 	ldr.w	pc, [sp], #4
   d416a:	bf00      	nop
   d416c:	2003e6e0 	.word	0x2003e6e0
   d4170:	000d7fae 	.word	0x000d7fae
   d4174:	2003e340 	.word	0x2003e340

000d4178 <_Z16getBatteryChargev>:

void getBatteryCharge()
{
   d4178:	b507      	push	{r0, r1, r2, lr}
  voltage = analogRead(BATT) * 0.0011224;
   d417a:	2021      	movs	r0, #33	; 0x21
   d417c:	f002 fb77 	bl	d686e <analogRead>
   d4180:	f002 fe72 	bl	d6e68 <__aeabi_i2d>
   d4184:	a30d      	add	r3, pc, #52	; (adr r3, d41bc <_Z16getBatteryChargev+0x44>)
   d4186:	e9d3 2300 	ldrd	r2, r3, [r3]
   d418a:	f002 fed3 	bl	d6f34 <__aeabi_dmul>
   d418e:	f003 f8e3 	bl	d7358 <__aeabi_d2f>
   d4192:	4b07      	ldr	r3, [pc, #28]	; (d41b0 <_Z16getBatteryChargev+0x38>)
   d4194:	6018      	str	r0, [r3, #0]
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
   d4196:	f002 fe79 	bl	d6e8c <__aeabi_f2d>
   d419a:	4a06      	ldr	r2, [pc, #24]	; (d41b4 <_Z16getBatteryChargev+0x3c>)
   d419c:	e9cd 0100 	strd	r0, r1, [sp]
   d41a0:	2110      	movs	r1, #16
   d41a2:	4805      	ldr	r0, [pc, #20]	; (d41b8 <_Z16getBatteryChargev+0x40>)
   d41a4:	f001 f9b2 	bl	d550c <snprintf>
}
   d41a8:	b003      	add	sp, #12
   d41aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ae:	bf00      	nop
   d41b0:	2003e358 	.word	0x2003e358
   d41b4:	000d7fb5 	.word	0x000d7fb5
   d41b8:	2003e35c 	.word	0x2003e35c
   d41bc:	d2c10294 	.word	0xd2c10294
   d41c0:	3f5263af 	.word	0x3f5263af

000d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d41c6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41c8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d41ca:	b17c      	cbz	r4, d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41cc:	6863      	ldr	r3, [r4, #4]
   d41ce:	3b01      	subs	r3, #1
   d41d0:	6063      	str	r3, [r4, #4]
   d41d2:	b95b      	cbnz	r3, d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d41d4:	6823      	ldr	r3, [r4, #0]
   d41d6:	4620      	mov	r0, r4
   d41d8:	689b      	ldr	r3, [r3, #8]
   d41da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41dc:	68a3      	ldr	r3, [r4, #8]
   d41de:	3b01      	subs	r3, #1
   d41e0:	60a3      	str	r3, [r4, #8]
   d41e2:	b91b      	cbnz	r3, d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d41e4:	6823      	ldr	r3, [r4, #0]
   d41e6:	4620      	mov	r0, r4
   d41e8:	68db      	ldr	r3, [r3, #12]
   d41ea:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d41ec:	4628      	mov	r0, r5
   d41ee:	bd38      	pop	{r3, r4, r5, pc}

000d41f0 <_Z14getTemperaturev>:
  getBatteryCharge();                                                             // Get Battery Charge Percentage
  if (getTemperature()) return 1;                                                 // Read Temperature from Sensor
  else return 0;                                                                  // Less than 1 degree difference detected
}

bool getTemperature() {                                                           // Function to get temperature value from DS18B20.
   d41f0:	b570      	push	{r4, r5, r6, lr}
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41f2:	4e1c      	ldr	r6, [pc, #112]	; (d4264 <_Z14getTemperaturev+0x74>)
   d41f4:	b08c      	sub	sp, #48	; 0x30
  char data[32];
  for (int i=1; i <= 10; i++) {
   d41f6:	2401      	movs	r4, #1
    if (sensor.read()) {
   d41f8:	481b      	ldr	r0, [pc, #108]	; (d4268 <_Z14getTemperaturev+0x78>)
   d41fa:	f000 fcfb 	bl	d4bf4 <_ZN4DS184readEv>
   d41fe:	4605      	mov	r5, r0
   d4200:	b188      	cbz	r0, d4226 <_Z14getTemperaturev+0x36>
      temperatureInC = sensor.celsius();
   d4202:	4819      	ldr	r0, [pc, #100]	; (d4268 <_Z14getTemperaturev+0x78>)
   d4204:	f000 fd1a 	bl	d4c3c <_ZN4DS187celsiusEv>
   d4208:	4b18      	ldr	r3, [pc, #96]	; (d426c <_Z14getTemperaturev+0x7c>)
   d420a:	ee10 0a10 	vmov	r0, s0
   d420e:	ed83 0a00 	vstr	s0, [r3]
      snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", temperatureInC);
   d4212:	f002 fe3b 	bl	d6e8c <__aeabi_f2d>
   d4216:	4a16      	ldr	r2, [pc, #88]	; (d4270 <_Z14getTemperaturev+0x80>)
   d4218:	e9cd 0100 	strd	r0, r1, [sp]
   d421c:	2110      	movs	r1, #16
   d421e:	4815      	ldr	r0, [pc, #84]	; (d4274 <_Z14getTemperaturev+0x84>)
   d4220:	f001 f974 	bl	d550c <snprintf>
   d4224:	e01b      	b.n	d425e <_Z14getTemperaturev+0x6e>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4226:	f000 ff45 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d422a:	6030      	str	r0, [r6, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d422c:	f001 f8be 	bl	d53ac <spark_process>
      return 1;
    }
    Particle.process();
    snprintf(data,sizeof(data),"Sensor Read Failed, attempt %i",i);
   d4230:	4623      	mov	r3, r4
   d4232:	4a11      	ldr	r2, [pc, #68]	; (d4278 <_Z14getTemperaturev+0x88>)
   d4234:	2120      	movs	r1, #32
   d4236:	a804      	add	r0, sp, #16
   d4238:	f001 f968 	bl	d550c <snprintf>
    waitUntil(PublishDelayFunction);
   d423c:	f7ff ff72 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d4240:	4b0e      	ldr	r3, [pc, #56]	; (d427c <_Z14getTemperaturev+0x8c>)
    Particle.publish("Sensing",data,PRIVATE);
   d4242:	490f      	ldr	r1, [pc, #60]	; (d4280 <_Z14getTemperaturev+0x90>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4244:	781b      	ldrb	r3, [r3, #0]
   d4246:	f88d 5000 	strb.w	r5, [sp]
   d424a:	aa04      	add	r2, sp, #16
   d424c:	a802      	add	r0, sp, #8
   d424e:	f7ff ff4a 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
  else return 0;                                                                  // Less than 1 degree difference detected
}

bool getTemperature() {                                                           // Function to get temperature value from DS18B20.
  char data[32];
  for (int i=1; i <= 10; i++) {
   d4252:	3401      	adds	r4, #1
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4254:	a803      	add	r0, sp, #12
   d4256:	f7ff ffb5 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d425a:	2c0b      	cmp	r4, #11
   d425c:	d1cc      	bne.n	d41f8 <_Z14getTemperaturev+0x8>
    snprintf(data,sizeof(data),"Sensor Read Failed, attempt %i",i);
    waitUntil(PublishDelayFunction);
    Particle.publish("Sensing",data,PRIVATE);
  }
  return 0;
}
   d425e:	4628      	mov	r0, r5
   d4260:	b00c      	add	sp, #48	; 0x30
   d4262:	bd70      	pop	{r4, r5, r6, pc}
   d4264:	2003e6ec 	.word	0x2003e6ec
   d4268:	2003e30c 	.word	0x2003e30c
   d426c:	2003e304 	.word	0x2003e304
   d4270:	000d7fbd 	.word	0x000d7fbd
   d4274:	2003e2e8 	.word	0x2003e2e8
   d4278:	000d7fcd 	.word	0x000d7fcd
   d427c:	2003e36c 	.word	0x2003e36c
   d4280:	000d7fec 	.word	0x000d7fec

000d4284 <_Z15getMeasurementsv>:
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}

bool getMeasurements()
{
   d4284:	b508      	push	{r3, lr}
  getSignalStrength();                                                            // Get Signal Strength
   d4286:	f7ff ff59 	bl	d413c <_Z17getSignalStrengthv>
  getBatteryCharge();                                                             // Get Battery Charge Percentage
   d428a:	f7ff ff75 	bl	d4178 <_Z16getBatteryChargev>
  if (getTemperature()) return 1;                                                 // Read Temperature from Sensor
  else return 0;                                                                  // Less than 1 degree difference detected
}
   d428e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

bool getMeasurements()
{
  getSignalStrength();                                                            // Get Signal Strength
  getBatteryCharge();                                                             // Get Battery Charge Percentage
  if (getTemperature()) return 1;                                                 // Read Temperature from Sensor
   d4292:	f7ff bfad 	b.w	d41f0 <_Z14getTemperaturev>
	...

000d4298 <_Z14SetVerboseMode6String>:
  }
  return 0;
}


bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
   d4298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d429a:	4929      	ldr	r1, [pc, #164]	; (d4340 <_Z14SetVerboseMode6String+0xa8>)
   d429c:	4605      	mov	r5, r0
   d429e:	f001 ff80 	bl	d61a2 <_ZNK6String6equalsEPKc>
  if (command == "1" && verboseMode == false)
   d42a2:	b110      	cbz	r0, d42aa <_Z14SetVerboseMode6String+0x12>
   d42a4:	4b27      	ldr	r3, [pc, #156]	; (d4344 <_Z14SetVerboseMode6String+0xac>)
   d42a6:	781e      	ldrb	r6, [r3, #0]
   d42a8:	b186      	cbz	r6, d42cc <_Z14SetVerboseMode6String+0x34>
   d42aa:	4925      	ldr	r1, [pc, #148]	; (d4340 <_Z14SetVerboseMode6String+0xa8>)
   d42ac:	4628      	mov	r0, r5
   d42ae:	f001 ff78 	bl	d61a2 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
    return 1;
  }

  if (command == "1" && verboseMode == true)
   d42b2:	b1a8      	cbz	r0, d42e0 <_Z14SetVerboseMode6String+0x48>
   d42b4:	4b23      	ldr	r3, [pc, #140]	; (d4344 <_Z14SetVerboseMode6String+0xac>)
   d42b6:	781b      	ldrb	r3, [r3, #0]
   d42b8:	b193      	cbz	r3, d42e0 <_Z14SetVerboseMode6String+0x48>
  {
    waitUntil(PublishDelayFunction);
   d42ba:	f7ff ff33 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d42be:	4b22      	ldr	r3, [pc, #136]	; (d4348 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
   d42c0:	4a22      	ldr	r2, [pc, #136]	; (d434c <_Z14SetVerboseMode6String+0xb4>)
   d42c2:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d42c4:	2400      	movs	r4, #0
   d42c6:	f88d 4000 	strb.w	r4, [sp]
   d42ca:	e02e      	b.n	d432a <_Z14SetVerboseMode6String+0x92>


bool SetVerboseMode(String command) {                                             // Function to Toggle VerboseMode.
  if (command == "1" && verboseMode == false)
  {
    verboseMode = true;
   d42cc:	2401      	movs	r4, #1
   d42ce:	701c      	strb	r4, [r3, #0]
    waitUntil(PublishDelayFunction);
   d42d0:	f7ff ff28 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d42d4:	4b1c      	ldr	r3, [pc, #112]	; (d4348 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Started.", PRIVATE);
   d42d6:	4a1e      	ldr	r2, [pc, #120]	; (d4350 <_Z14SetVerboseMode6String+0xb8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d42d8:	781b      	ldrb	r3, [r3, #0]
   d42da:	f88d 6000 	strb.w	r6, [sp]
   d42de:	e024      	b.n	d432a <_Z14SetVerboseMode6String+0x92>
   d42e0:	491c      	ldr	r1, [pc, #112]	; (d4354 <_Z14SetVerboseMode6String+0xbc>)
   d42e2:	4628      	mov	r0, r5
   d42e4:	f001 ff5d 	bl	d61a2 <_ZNK6String6equalsEPKc>
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode Already ON.", PRIVATE);
    return 0;
  }

  if (command == "0" && verboseMode == true)
   d42e8:	b160      	cbz	r0, d4304 <_Z14SetVerboseMode6String+0x6c>
   d42ea:	4b16      	ldr	r3, [pc, #88]	; (d4344 <_Z14SetVerboseMode6String+0xac>)
   d42ec:	781c      	ldrb	r4, [r3, #0]
   d42ee:	b14c      	cbz	r4, d4304 <_Z14SetVerboseMode6String+0x6c>
  {
    verboseMode = false;
   d42f0:	2500      	movs	r5, #0
   d42f2:	701d      	strb	r5, [r3, #0]
    waitUntil(PublishDelayFunction);
   d42f4:	f7ff ff16 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d42f8:	4b13      	ldr	r3, [pc, #76]	; (d4348 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode Stopped.", PRIVATE);
   d42fa:	4a17      	ldr	r2, [pc, #92]	; (d4358 <_Z14SetVerboseMode6String+0xc0>)
   d42fc:	781b      	ldrb	r3, [r3, #0]
   d42fe:	f88d 5000 	strb.w	r5, [sp]
   d4302:	e012      	b.n	d432a <_Z14SetVerboseMode6String+0x92>
   d4304:	4913      	ldr	r1, [pc, #76]	; (d4354 <_Z14SetVerboseMode6String+0xbc>)
   d4306:	4628      	mov	r0, r5
   d4308:	f001 ff4b 	bl	d61a2 <_ZNK6String6equalsEPKc>
    return 1;
  }

  if (command == "0" && verboseMode == false)
   d430c:	b120      	cbz	r0, d4318 <_Z14SetVerboseMode6String+0x80>
   d430e:	4b0d      	ldr	r3, [pc, #52]	; (d4344 <_Z14SetVerboseMode6String+0xac>)
   d4310:	781c      	ldrb	r4, [r3, #0]
   d4312:	b11c      	cbz	r4, d431c <_Z14SetVerboseMode6String+0x84>
  {
    waitUntil(PublishDelayFunction);
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
    return 0;
  }
  else return 0;
   d4314:	2400      	movs	r4, #0
   d4316:	e00f      	b.n	d4338 <_Z14SetVerboseMode6String+0xa0>
   d4318:	4604      	mov	r4, r0
   d431a:	e00d      	b.n	d4338 <_Z14SetVerboseMode6String+0xa0>
    return 1;
  }

  if (command == "0" && verboseMode == false)
  {
    waitUntil(PublishDelayFunction);
   d431c:	f7ff ff02 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d4320:	4b09      	ldr	r3, [pc, #36]	; (d4348 <_Z14SetVerboseMode6String+0xb0>)
    Particle.publish("Mode", "Verbose Mode already OFF.", PRIVATE);
   d4322:	4a0e      	ldr	r2, [pc, #56]	; (d435c <_Z14SetVerboseMode6String+0xc4>)
   d4324:	781b      	ldrb	r3, [r3, #0]
   d4326:	f88d 4000 	strb.w	r4, [sp]
   d432a:	a802      	add	r0, sp, #8
   d432c:	490c      	ldr	r1, [pc, #48]	; (d4360 <_Z14SetVerboseMode6String+0xc8>)
   d432e:	f7ff feda 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d4332:	a803      	add	r0, sp, #12
   d4334:	f7ff ff46 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 0;
  }
  else return 0;
}
   d4338:	4620      	mov	r0, r4
   d433a:	b004      	add	sp, #16
   d433c:	bd70      	pop	{r4, r5, r6, pc}
   d433e:	bf00      	nop
   d4340:	000d82d4 	.word	0x000d82d4
   d4344:	2003e0f0 	.word	0x2003e0f0
   d4348:	2003e36c 	.word	0x2003e36c
   d434c:	000d800a 	.word	0x000d800a
   d4350:	000d7ff4 	.word	0x000d7ff4
   d4354:	000d8023 	.word	0x000d8023
   d4358:	000d8025 	.word	0x000d8025
   d435c:	000d803b 	.word	0x000d803b
   d4360:	000d81b9 	.word	0x000d81b9

000d4364 <_Z11sendUBIDotsv>:

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
   d4364:	b500      	push	{lr}
  char data[256];
  snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", temperatureInC, voltage);
   d4366:	4b15      	ldr	r3, [pc, #84]	; (d43bc <_Z11sendUBIDotsv+0x58>)
  }
  else return 0;
}

void sendUBIDots()                                                                // Function that sends the JSON payload to Ubidots
{
   d4368:	b0c7      	sub	sp, #284	; 0x11c
  char data[256];
  snprintf(data, sizeof(data), "{\"Temperature\":%3.1f, \"Battery\":%3.1f}", temperatureInC, voltage);
   d436a:	6818      	ldr	r0, [r3, #0]
   d436c:	f002 fd8e 	bl	d6e8c <__aeabi_f2d>
   d4370:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4374:	4b12      	ldr	r3, [pc, #72]	; (d43c0 <_Z11sendUBIDotsv+0x5c>)
   d4376:	6818      	ldr	r0, [r3, #0]
   d4378:	f002 fd88 	bl	d6e8c <__aeabi_f2d>
   d437c:	4a11      	ldr	r2, [pc, #68]	; (d43c4 <_Z11sendUBIDotsv+0x60>)
   d437e:	e9cd 0100 	strd	r0, r1, [sp]
   d4382:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4386:	a806      	add	r0, sp, #24
   d4388:	f001 f8c0 	bl	d550c <snprintf>
   d438c:	4b0e      	ldr	r3, [pc, #56]	; (d43c8 <_Z11sendUBIDotsv+0x64>)
  Particle.publish("Air-Quality-Hook", data, PRIVATE);
   d438e:	490f      	ldr	r1, [pc, #60]	; (d43cc <_Z11sendUBIDotsv+0x68>)
   d4390:	781b      	ldrb	r3, [r3, #0]
   d4392:	2200      	movs	r2, #0
   d4394:	f88d 2000 	strb.w	r2, [sp]
   d4398:	a804      	add	r0, sp, #16
   d439a:	aa06      	add	r2, sp, #24
   d439c:	f7ff fea3 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d43a0:	a805      	add	r0, sp, #20
   d43a2:	f7ff ff0f 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43a6:	f000 fe85 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d43aa:	4b09      	ldr	r3, [pc, #36]	; (d43d0 <_Z11sendUBIDotsv+0x6c>)
   d43ac:	6018      	str	r0, [r3, #0]
  inTransit = true;
   d43ae:	4b09      	ldr	r3, [pc, #36]	; (d43d4 <_Z11sendUBIDotsv+0x70>)
   d43b0:	2201      	movs	r2, #1
   d43b2:	701a      	strb	r2, [r3, #0]
}
   d43b4:	b047      	add	sp, #284	; 0x11c
   d43b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d43ba:	bf00      	nop
   d43bc:	2003e358 	.word	0x2003e358
   d43c0:	2003e304 	.word	0x2003e304
   d43c4:	000d8055 	.word	0x000d8055
   d43c8:	2003e36c 	.word	0x2003e36c
   d43cc:	000d807c 	.word	0x000d807c
   d43d0:	2003e354 	.word	0x2003e354
   d43d4:	2003e2f8 	.word	0x2003e2f8

000d43d8 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                          // Looks at the response from Ubidots - Will reset Photon if no successful response
{
   d43d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
   d43da:	460c      	mov	r4, r1
   d43dc:	4e12      	ldr	r6, [pc, #72]	; (d4428 <_Z14UbidotsHandlerPKcS0_+0x50>)
   d43de:	b921      	cbnz	r1, d43ea <_Z14UbidotsHandlerPKcS0_+0x12>
   d43e0:	7833      	ldrb	r3, [r6, #0]
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d43e2:	f88d 1000 	strb.w	r1, [sp]
   d43e6:	4a11      	ldr	r2, [pc, #68]	; (d442c <_Z14UbidotsHandlerPKcS0_+0x54>)
   d43e8:	e015      	b.n	d4416 <_Z14UbidotsHandlerPKcS0_+0x3e>
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d43ea:	4608      	mov	r0, r1
   d43ec:	f003 f804 	bl	d73f8 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d43f0:	38c8      	subs	r0, #200	; 0xc8
   d43f2:	2500      	movs	r5, #0
   d43f4:	2801      	cmp	r0, #1
   d43f6:	7833      	ldrb	r3, [r6, #0]
  {
    Particle.publish("State", "Response Received", PRIVATE);
   d43f8:	f88d 5000 	strb.w	r5, [sp]
  if (!data) {                                                                    // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
   d43fc:	d80a      	bhi.n	d4414 <_Z14UbidotsHandlerPKcS0_+0x3c>
  {
    Particle.publish("State", "Response Received", PRIVATE);
   d43fe:	4a0c      	ldr	r2, [pc, #48]	; (d4430 <_Z14UbidotsHandlerPKcS0_+0x58>)
   d4400:	490c      	ldr	r1, [pc, #48]	; (d4434 <_Z14UbidotsHandlerPKcS0_+0x5c>)
   d4402:	a802      	add	r0, sp, #8
   d4404:	f7ff fe6f 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d4408:	a803      	add	r0, sp, #12
   d440a:	f7ff fedb 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    inTransit = false;                                                            // Data has been received
   d440e:	4b0a      	ldr	r3, [pc, #40]	; (d4438 <_Z14UbidotsHandlerPKcS0_+0x60>)
   d4410:	701d      	strb	r5, [r3, #0]
   d4412:	e007      	b.n	d4424 <_Z14UbidotsHandlerPKcS0_+0x4c>
  }
  else
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4414:	4622      	mov	r2, r4
   d4416:	a802      	add	r0, sp, #8
   d4418:	4908      	ldr	r1, [pc, #32]	; (d443c <_Z14UbidotsHandlerPKcS0_+0x64>)
   d441a:	f7ff fe64 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d441e:	a803      	add	r0, sp, #12
   d4420:	f7ff fed0 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4424:	b004      	add	sp, #16
   d4426:	bd70      	pop	{r4, r5, r6, pc}
   d4428:	2003e36c 	.word	0x2003e36c
   d442c:	000d808d 	.word	0x000d808d
   d4430:	000d80a2 	.word	0x000d80a2
   d4434:	000d80b4 	.word	0x000d80b4
   d4438:	2003e2f8 	.word	0x2003e2f8
   d443c:	000d8095 	.word	0x000d8095

000d4440 <_Z15transitionStatev>:

void transitionState(void) {                                                      // This function publishes change of state.
   d4440:	b530      	push	{r4, r5, lr}
  waitUntil(PublishDelayFunction);
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d4442:	4d12      	ldr	r5, [pc, #72]	; (d448c <_Z15transitionStatev+0x4c>)
   d4444:	4c12      	ldr	r4, [pc, #72]	; (d4490 <_Z15transitionStatev+0x50>)
  }
  else
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
}

void transitionState(void) {                                                      // This function publishes change of state.
   d4446:	b095      	sub	sp, #84	; 0x54
  waitUntil(PublishDelayFunction);
   d4448:	f7ff fe6c 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
  char stateTransitionString[64];                                                 // Declare a String to show state transition.
  snprintf(stateTransitionString, sizeof(stateTransitionString), "Transition: %s to %s", stateNames[oldState], stateNames[state]);
   d444c:	4911      	ldr	r1, [pc, #68]	; (d4494 <_Z15transitionStatev+0x54>)
   d444e:	782a      	ldrb	r2, [r5, #0]
   d4450:	7820      	ldrb	r0, [r4, #0]
   d4452:	232c      	movs	r3, #44	; 0x2c
   d4454:	fb03 1202 	mla	r2, r3, r2, r1
   d4458:	9200      	str	r2, [sp, #0]
   d445a:	fb03 1300 	mla	r3, r3, r0, r1
   d445e:	4a0e      	ldr	r2, [pc, #56]	; (d4498 <_Z15transitionStatev+0x58>)
   d4460:	2140      	movs	r1, #64	; 0x40
   d4462:	a804      	add	r0, sp, #16
   d4464:	f001 f852 	bl	d550c <snprintf>
  oldState = state;
   d4468:	782b      	ldrb	r3, [r5, #0]
   d446a:	7023      	strb	r3, [r4, #0]
   d446c:	4b0b      	ldr	r3, [pc, #44]	; (d449c <_Z15transitionStatev+0x5c>)
  Particle.publish("State", stateTransitionString, PRIVATE);
   d446e:	490c      	ldr	r1, [pc, #48]	; (d44a0 <_Z15transitionStatev+0x60>)
   d4470:	781b      	ldrb	r3, [r3, #0]
   d4472:	2200      	movs	r2, #0
   d4474:	f88d 2000 	strb.w	r2, [sp]
   d4478:	a802      	add	r0, sp, #8
   d447a:	aa04      	add	r2, sp, #16
   d447c:	f7ff fe33 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d4480:	a803      	add	r0, sp, #12
   d4482:	f7ff fe9f 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4486:	b015      	add	sp, #84	; 0x54
   d4488:	bd30      	pop	{r4, r5, pc}
   d448a:	bf00      	nop
   d448c:	2003e300 	.word	0x2003e300
   d4490:	2003e350 	.word	0x2003e350
   d4494:	2003e0f8 	.word	0x2003e0f8
   d4498:	000d80ba 	.word	0x000d80ba
   d449c:	2003e36c 	.word	0x2003e36c
   d44a0:	000d80b4 	.word	0x000d80b4

000d44a4 <loop>:

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
}

void loop()
{
   d44a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  switch (state)  {                                                               // In the main loop, all code execution must take place in a defined state
   d44a8:	4ca2      	ldr	r4, [pc, #648]	; (d4734 <loop+0x290>)
   d44aa:	7823      	ldrb	r3, [r4, #0]
   d44ac:	3b01      	subs	r3, #1
   d44ae:	2b05      	cmp	r3, #5
   d44b0:	f200 813c 	bhi.w	d472c <loop+0x288>
   d44b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d44b8:	00200006 	.word	0x00200006
   d44bc:	00bc0030 	.word	0x00bc0030
   d44c0:	010d00e2 	.word	0x010d00e2
    case IDLE_STATE:                                                              // IDLE State.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d44c4:	4b9c      	ldr	r3, [pc, #624]	; (d4738 <loop+0x294>)
   d44c6:	781b      	ldrb	r3, [r3, #0]
   d44c8:	b12b      	cbz	r3, d44d6 <loop+0x32>
   d44ca:	4b9c      	ldr	r3, [pc, #624]	; (d473c <loop+0x298>)
   d44cc:	781b      	ldrb	r3, [r3, #0]
   d44ce:	2b01      	cmp	r3, #1
   d44d0:	d001      	beq.n	d44d6 <loop+0x32>
   d44d2:	f7ff ffb5 	bl	d4440 <_Z15transitionStatev>
      static unsigned long TimePassed = 0;

      if ((Time.minute() - TimePassed >= sampleRate) || Time.minute()== 0) {     // Sample time or the top of the hour
   d44d6:	f001 ff15 	bl	d6304 <_ZN9TimeClass6minuteEv>
   d44da:	4b99      	ldr	r3, [pc, #612]	; (d4740 <loop+0x29c>)
   d44dc:	681a      	ldr	r2, [r3, #0]
   d44de:	1a80      	subs	r0, r0, r2
   d44e0:	4a98      	ldr	r2, [pc, #608]	; (d4744 <loop+0x2a0>)
   d44e2:	6812      	ldr	r2, [r2, #0]
   d44e4:	4290      	cmp	r0, r2
   d44e6:	461d      	mov	r5, r3
   d44e8:	f080 811b 	bcs.w	d4722 <loop+0x27e>
   d44ec:	f001 ff0a 	bl	d6304 <_ZN9TimeClass6minuteEv>
   d44f0:	2800      	cmp	r0, #0
   d44f2:	f000 8116 	beq.w	d4722 <loop+0x27e>
   d44f6:	e119      	b.n	d472c <loop+0x288>
        TimePassed = Time.minute();
      }
    } break;

    case MEASURING_STATE:                                                         // Measuring State.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d44f8:	4b8f      	ldr	r3, [pc, #572]	; (d4738 <loop+0x294>)
   d44fa:	781b      	ldrb	r3, [r3, #0]
   d44fc:	b12b      	cbz	r3, d450a <loop+0x66>
   d44fe:	4b8f      	ldr	r3, [pc, #572]	; (d473c <loop+0x298>)
   d4500:	781b      	ldrb	r3, [r3, #0]
   d4502:	2b02      	cmp	r3, #2
   d4504:	d001      	beq.n	d450a <loop+0x66>
   d4506:	f7ff ff9b 	bl	d4440 <_Z15transitionStatev>
      if (getMeasurements()) state = REPORTING_DETERMINATION;                     // Get the measurements and move to reporting determination
   d450a:	f7ff febb 	bl	d4284 <_Z15getMeasurementsv>
   d450e:	2800      	cmp	r0, #0
   d4510:	f000 80d8 	beq.w	d46c4 <loop+0x220>
   d4514:	2303      	movs	r3, #3
   d4516:	e0da      	b.n	d46ce <loop+0x22a>
      }
    break;

    case REPORTING_DETERMINATION:                                                 // Reporting determination state.
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4518:	4d87      	ldr	r5, [pc, #540]	; (d4738 <loop+0x294>)
   d451a:	782b      	ldrb	r3, [r5, #0]
   d451c:	b12b      	cbz	r3, d452a <loop+0x86>
   d451e:	4b87      	ldr	r3, [pc, #540]	; (d473c <loop+0x298>)
   d4520:	781b      	ldrb	r3, [r3, #0]
   d4522:	2b03      	cmp	r3, #3
   d4524:	d001      	beq.n	d452a <loop+0x86>
   d4526:	f7ff ff8b 	bl	d4440 <_Z15transitionStatev>
      static int currentHourlyPeriod = 0;                                         // keep track of when the hour changes
      static float lastTemperatureInC = 0;

      // Four possible outcomes: 1) Top of the hour - report, 2) Big change in Temp - report and move to rapid sampling, 3) small change in Temp - report and normal sampling, 4) No change in temp - back to Idle
      if (Time.hour() != currentHourlyPeriod) {                                   // Case 1 - If it is a new hour - report
   d452a:	f001 fee1 	bl	d62f0 <_ZN9TimeClass4hourEv>
   d452e:	4b86      	ldr	r3, [pc, #536]	; (d4748 <loop+0x2a4>)
   d4530:	681a      	ldr	r2, [r3, #0]
   d4532:	4290      	cmp	r0, r2
   d4534:	461e      	mov	r6, r3
   d4536:	d015      	beq.n	d4564 <loop+0xc0>
        if (verboseMode) {
   d4538:	782b      	ldrb	r3, [r5, #0]
   d453a:	b173      	cbz	r3, d455a <loop+0xb6>
          waitUntil(PublishDelayFunction);
   d453c:	f7ff fdf2 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d4540:	4b82      	ldr	r3, [pc, #520]	; (d474c <loop+0x2a8>)
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
   d4542:	4983      	ldr	r1, [pc, #524]	; (d4750 <loop+0x2ac>)
   d4544:	781b      	ldrb	r3, [r3, #0]
   d4546:	2200      	movs	r2, #0
   d4548:	f88d 2000 	strb.w	r2, [sp]
   d454c:	a802      	add	r0, sp, #8
   d454e:	4a81      	ldr	r2, [pc, #516]	; (d4754 <loop+0x2b0>)
   d4550:	f7ff fdc9 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d4554:	a803      	add	r0, sp, #12
   d4556:	f7ff fe35 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        currentHourlyPeriod = Time.hour();
   d455a:	f001 fec9 	bl	d62f0 <_ZN9TimeClass4hourEv>
        state = REPORTING_STATE;
   d455e:	2304      	movs	r3, #4
      if (Time.hour() != currentHourlyPeriod) {                                   // Case 1 - If it is a new hour - report
        if (verboseMode) {
          waitUntil(PublishDelayFunction);
          Particle.publish("State", "New Hour- Reporting", PRIVATE);              // Report for diagnotics
        }
        currentHourlyPeriod = Time.hour();
   d4560:	6030      	str	r0, [r6, #0]
   d4562:	e0b4      	b.n	d46ce <loop+0x22a>
        state = REPORTING_STATE;
        break;                                                                    // Leave this case and move on
      }
      if (abs(temperatureInC - lastTemperatureInC) >= tempChangeThreshold) {      // Case 2 - Big change in Temp - report and move to rapid sampling
   d4564:	4a7c      	ldr	r2, [pc, #496]	; (d4758 <loop+0x2b4>)
   d4566:	4b7d      	ldr	r3, [pc, #500]	; (d475c <loop+0x2b8>)
   d4568:	edd2 6a00 	vldr	s13, [r2]
   d456c:	ed93 7a00 	vldr	s14, [r3]
   d4570:	f8df 81d0 	ldr.w	r8, [pc, #464]	; d4744 <loop+0x2a0>
   d4574:	ee76 7ac7 	vsub.f32	s15, s13, s14
   d4578:	4617      	mov	r7, r2
   d457a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d457e:	461e      	mov	r6, r3
   d4580:	ee17 1a90 	vmov	r1, s15
   d4584:	2900      	cmp	r1, #0
   d4586:	bfb8      	it	lt
   d4588:	4249      	neglt	r1, r1
   d458a:	ee07 1a90 	vmov	s15, r1
   d458e:	4974      	ldr	r1, [pc, #464]	; (d4760 <loop+0x2bc>)
   d4590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4594:	ed91 6a00 	vldr	s12, [r1]
   d4598:	eef4 7ac6 	vcmpe.f32	s15, s12
   d459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45a0:	db16      	blt.n	d45d0 <loop+0x12c>
        if (verboseMode) {
   d45a2:	782b      	ldrb	r3, [r5, #0]
   d45a4:	b173      	cbz	r3, d45c4 <loop+0x120>
          waitUntil(PublishDelayFunction);
   d45a6:	f7ff fdbd 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d45aa:	4b68      	ldr	r3, [pc, #416]	; (d474c <loop+0x2a8>)
          Particle.publish("State", "Big Change - Rapid & Reporting", PRIVATE);   // Report for diagnostics
   d45ac:	4968      	ldr	r1, [pc, #416]	; (d4750 <loop+0x2ac>)
   d45ae:	781b      	ldrb	r3, [r3, #0]
   d45b0:	2200      	movs	r2, #0
   d45b2:	f88d 2000 	strb.w	r2, [sp]
   d45b6:	a802      	add	r0, sp, #8
   d45b8:	4a6a      	ldr	r2, [pc, #424]	; (d4764 <loop+0x2c0>)
   d45ba:	f7ff fd94 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d45be:	a803      	add	r0, sp, #12
   d45c0:	f7ff fe00 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d45c4:	683b      	ldr	r3, [r7, #0]
   d45c6:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;                                                  
   d45c8:	2304      	movs	r3, #4
   d45ca:	7023      	strb	r3, [r4, #0]
        sampleRate = rapidSamplePeriodMinutes;                                    // Move to rapid sampling
   d45cc:	2305      	movs	r3, #5
   d45ce:	e01a      	b.n	d4606 <loop+0x162>
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - smal change in Temp - report and normal sampling
   d45d0:	eef4 6a47 	vcmp.f32	s13, s14
   d45d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        if (verboseMode) {
   d45d8:	782b      	ldrb	r3, [r5, #0]
        lastTemperatureInC = temperatureInC;
        state = REPORTING_STATE;                                                  
        sampleRate = rapidSamplePeriodMinutes;                                    // Move to rapid sampling
        break;
      }
      else if (temperatureInC != lastTemperatureInC) {                            // Case 3 - smal change in Temp - report and normal sampling
   d45da:	d017      	beq.n	d460c <loop+0x168>
        if (verboseMode) {
   d45dc:	b173      	cbz	r3, d45fc <loop+0x158>
          waitUntil(PublishDelayFunction);
   d45de:	f7ff fda1 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d45e2:	4b5a      	ldr	r3, [pc, #360]	; (d474c <loop+0x2a8>)
          Particle.publish("State", "Change - Reporting", PRIVATE);               // Report for diagnostics
   d45e4:	495a      	ldr	r1, [pc, #360]	; (d4750 <loop+0x2ac>)
   d45e6:	781b      	ldrb	r3, [r3, #0]
   d45e8:	2200      	movs	r2, #0
   d45ea:	f88d 2000 	strb.w	r2, [sp]
   d45ee:	a802      	add	r0, sp, #8
   d45f0:	4a5d      	ldr	r2, [pc, #372]	; (d4768 <loop+0x2c4>)
   d45f2:	f7ff fd78 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d45f6:	a803      	add	r0, sp, #12
   d45f8:	f7ff fde4 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        lastTemperatureInC = temperatureInC;
   d45fc:	683b      	ldr	r3, [r7, #0]
   d45fe:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;
   d4600:	2304      	movs	r3, #4
   d4602:	7023      	strb	r3, [r4, #0]
        sampleRate = normalSamplePeriodMinutes;                                   // Small but non-zero change - move to normal sampling
   d4604:	230a      	movs	r3, #10
   d4606:	f8c8 3000 	str.w	r3, [r8]
        break;  
   d460a:	e08f      	b.n	d472c <loop+0x288>
      }
      else {                                                                      // Case 4 - No change in temp - go back to idle
        if (verboseMode) {
   d460c:	b173      	cbz	r3, d462c <loop+0x188>
          waitUntil(PublishDelayFunction);
   d460e:	f7ff fd89 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d4612:	4b4e      	ldr	r3, [pc, #312]	; (d474c <loop+0x2a8>)
          Particle.publish("State", "No Change - Idle", PRIVATE);                 // Report for diagnostics
   d4614:	494e      	ldr	r1, [pc, #312]	; (d4750 <loop+0x2ac>)
   d4616:	781b      	ldrb	r3, [r3, #0]
   d4618:	2200      	movs	r2, #0
   d461a:	f88d 2000 	strb.w	r2, [sp]
   d461e:	a802      	add	r0, sp, #8
   d4620:	4a52      	ldr	r2, [pc, #328]	; (d476c <loop+0x2c8>)
   d4622:	f7ff fd60 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d4626:	a803      	add	r0, sp, #12
   d4628:	f7ff fdcc 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        state = IDLE_STATE;                                                      
   d462c:	2301      	movs	r3, #1
   d462e:	e7e8      	b.n	d4602 <loop+0x15e>
        sampleRate = normalSamplePeriodMinutes;                                   // Small but non-zero change - move to normal sampling
      }
    } break;

    case REPORTING_STATE:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4630:	4b41      	ldr	r3, [pc, #260]	; (d4738 <loop+0x294>)
   d4632:	781a      	ldrb	r2, [r3, #0]
   d4634:	461d      	mov	r5, r3
   d4636:	b12a      	cbz	r2, d4644 <loop+0x1a0>
   d4638:	4b40      	ldr	r3, [pc, #256]	; (d473c <loop+0x298>)
   d463a:	781b      	ldrb	r3, [r3, #0]
   d463c:	2b04      	cmp	r3, #4
   d463e:	d001      	beq.n	d4644 <loop+0x1a0>
   d4640:	f7ff fefe 	bl	d4440 <_Z15transitionStatev>

      if (Time.hour() == 12) Particle.syncTime();                                 // SET CLOCK EACH DAY AT 12 NOON.
   d4644:	f001 fe54 	bl	d62f0 <_ZN9TimeClass4hourEv>
   d4648:	280c      	cmp	r0, #12
   d464a:	d102      	bne.n	d4652 <loop+0x1ae>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d464c:	2000      	movs	r0, #0
   d464e:	f000 fed5 	bl	d53fc <spark_sync_time>

      if (verboseMode) {
   d4652:	782b      	ldrb	r3, [r5, #0]
   d4654:	b173      	cbz	r3, d4674 <loop+0x1d0>
        waitUntil(PublishDelayFunction);
   d4656:	f7ff fd65 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d465a:	4b3c      	ldr	r3, [pc, #240]	; (d474c <loop+0x2a8>)
        Particle.publish("Temperature", temperatureString, PRIVATE);
   d465c:	4944      	ldr	r1, [pc, #272]	; (d4770 <loop+0x2cc>)
   d465e:	781b      	ldrb	r3, [r3, #0]
   d4660:	2200      	movs	r2, #0
   d4662:	f88d 2000 	strb.w	r2, [sp]
   d4666:	a802      	add	r0, sp, #8
   d4668:	4a42      	ldr	r2, [pc, #264]	; (d4774 <loop+0x2d0>)
   d466a:	f7ff fd3c 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d466e:	a803      	add	r0, sp, #12
   d4670:	f7ff fda8 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      sendUBIDots();
   d4674:	f7ff fe76 	bl	d4364 <_Z11sendUBIDotsv>
      state = RESPONSE_WAIT;
   d4678:	2305      	movs	r3, #5
   d467a:	e028      	b.n	d46ce <loop+0x22a>
      break;

    case RESPONSE_WAIT:
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d467c:	4b2e      	ldr	r3, [pc, #184]	; (d4738 <loop+0x294>)
   d467e:	781b      	ldrb	r3, [r3, #0]
   d4680:	b12b      	cbz	r3, d468e <loop+0x1ea>
   d4682:	4b2e      	ldr	r3, [pc, #184]	; (d473c <loop+0x298>)
   d4684:	781b      	ldrb	r3, [r3, #0]
   d4686:	2b05      	cmp	r3, #5
   d4688:	d001      	beq.n	d468e <loop+0x1ea>
   d468a:	f7ff fed9 	bl	d4440 <_Z15transitionStatev>

      if (!inTransit) state = IDLE_STATE;                                         // This checks for the response from UBIDOTS. 
   d468e:	4b3a      	ldr	r3, [pc, #232]	; (d4778 <loop+0x2d4>)
   d4690:	781b      	ldrb	r3, [r3, #0]
   d4692:	b90b      	cbnz	r3, d4698 <loop+0x1f4>
   d4694:	2301      	movs	r3, #1
   d4696:	7023      	strb	r3, [r4, #0]
   d4698:	f000 fd0c 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>

      if (millis() - webhookTimeStamp > webhookTimeout) {                         // If device does not respond in 45 Seconds, Then Reset it.
   d469c:	4b37      	ldr	r3, [pc, #220]	; (d477c <loop+0x2d8>)
   d469e:	681b      	ldr	r3, [r3, #0]
   d46a0:	1ac0      	subs	r0, r0, r3
   d46a2:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d46a6:	4298      	cmp	r0, r3
   d46a8:	d940      	bls.n	d472c <loop+0x288>
   d46aa:	4b28      	ldr	r3, [pc, #160]	; (d474c <loop+0x2a8>)
        Particle.publish("spark/device/session/end", "", PRIVATE); 
   d46ac:	4934      	ldr	r1, [pc, #208]	; (d4780 <loop+0x2dc>)
   d46ae:	781b      	ldrb	r3, [r3, #0]
   d46b0:	2200      	movs	r2, #0
   d46b2:	f88d 2000 	strb.w	r2, [sp]
   d46b6:	a802      	add	r0, sp, #8
   d46b8:	4a32      	ldr	r2, [pc, #200]	; (d4784 <loop+0x2e0>)
   d46ba:	f7ff fd14 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d46be:	a803      	add	r0, sp, #12
   d46c0:	f7ff fd80 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46c4:	f000 fcf6 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>
        resetStartTimeStamp = millis();                                           // Start the reset clock
   d46c8:	4b2f      	ldr	r3, [pc, #188]	; (d4788 <loop+0x2e4>)
   d46ca:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;                                                      // Send to the error state - webhook failed
   d46cc:	2306      	movs	r3, #6
   d46ce:	7023      	strb	r3, [r4, #0]
   d46d0:	e02c      	b.n	d472c <loop+0x288>
      }
      break;

    case ERROR_STATE: // This state RESETS the devices.
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d46d2:	4b19      	ldr	r3, [pc, #100]	; (d4738 <loop+0x294>)
   d46d4:	781b      	ldrb	r3, [r3, #0]
   d46d6:	b12b      	cbz	r3, d46e4 <loop+0x240>
   d46d8:	4b18      	ldr	r3, [pc, #96]	; (d473c <loop+0x298>)
   d46da:	781b      	ldrb	r3, [r3, #0]
   d46dc:	2b06      	cmp	r3, #6
   d46de:	d001      	beq.n	d46e4 <loop+0x240>
   d46e0:	f7ff feae 	bl	d4440 <_Z15transitionStatev>
   d46e4:	f000 fce6 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetStartTimeStamp >= resetDelayTime) {
   d46e8:	4b27      	ldr	r3, [pc, #156]	; (d4788 <loop+0x2e4>)
   d46ea:	681b      	ldr	r3, [r3, #0]
   d46ec:	1ac0      	subs	r0, r0, r3
   d46ee:	f247 532f 	movw	r3, #29999	; 0x752f
   d46f2:	4298      	cmp	r0, r3
   d46f4:	d91a      	bls.n	d472c <loop+0x288>
        waitUntil(PublishDelayFunction);
   d46f6:	f7ff fd15 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d46fa:	4b14      	ldr	r3, [pc, #80]	; (d474c <loop+0x2a8>)
        Particle.publish("Error", "Resetting in 30 seconds", PRIVATE);            // Reset the device and hope that fixes it
   d46fc:	4923      	ldr	r1, [pc, #140]	; (d478c <loop+0x2e8>)
   d46fe:	781b      	ldrb	r3, [r3, #0]
   d4700:	2200      	movs	r2, #0
   d4702:	f88d 2000 	strb.w	r2, [sp]
   d4706:	a802      	add	r0, sp, #8
   d4708:	4a21      	ldr	r2, [pc, #132]	; (d4790 <loop+0x2ec>)
   d470a:	f7ff fcec 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d470e:	a803      	add	r0, sp, #12
   d4710:	f7ff fd58 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);                                                              // Get the message out before resetting
   d4714:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4718:	f000 ff10 	bl	d553c <delay>
        System.reset();
   d471c:	f001 fd70 	bl	d6200 <_ZN11SystemClass5resetEv>
      }
      break;
  }
}
   d4720:	e004      	b.n	d472c <loop+0x288>
    {
      if (verboseMode && oldState != state) transitionState();                    // If verboseMode is on and state is changed, Then publish the state transition.
      static unsigned long TimePassed = 0;

      if ((Time.minute() - TimePassed >= sampleRate) || Time.minute()== 0) {     // Sample time or the top of the hour
        state = MEASURING_STATE;
   d4722:	2302      	movs	r3, #2
   d4724:	7023      	strb	r3, [r4, #0]
        TimePassed = Time.minute();
   d4726:	f001 fded 	bl	d6304 <_ZN9TimeClass6minuteEv>
   d472a:	6028      	str	r0, [r5, #0]
        delay(2000);                                                              // Get the message out before resetting
        System.reset();
      }
      break;
  }
}
   d472c:	b004      	add	sp, #16
   d472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4732:	bf00      	nop
   d4734:	2003e300 	.word	0x2003e300
   d4738:	2003e0f0 	.word	0x2003e0f0
   d473c:	2003e350 	.word	0x2003e350
   d4740:	2003e308 	.word	0x2003e308
   d4744:	2003e0f4 	.word	0x2003e0f4
   d4748:	2003e370 	.word	0x2003e370
   d474c:	2003e36c 	.word	0x2003e36c
   d4750:	000d80b4 	.word	0x000d80b4
   d4754:	000d80cf 	.word	0x000d80cf
   d4758:	2003e304 	.word	0x2003e304
   d475c:	2003e33c 	.word	0x2003e33c
   d4760:	2003e0ec 	.word	0x2003e0ec
   d4764:	000d80e3 	.word	0x000d80e3
   d4768:	000d8102 	.word	0x000d8102
   d476c:	000d8115 	.word	0x000d8115
   d4770:	000d8126 	.word	0x000d8126
   d4774:	2003e2e8 	.word	0x2003e2e8
   d4778:	2003e2f8 	.word	0x2003e2f8
   d477c:	2003e354 	.word	0x2003e354
   d4780:	000d8132 	.word	0x000d8132
   d4784:	000d8296 	.word	0x000d8296
   d4788:	2003e338 	.word	0x2003e338
   d478c:	000d8163 	.word	0x000d8163
   d4790:	000d814b 	.word	0x000d814b

000d4794 <_Z7sendNow6String>:
  Particle.publish("State", stateTransitionString, PRIVATE);
}


bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d4794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4796:	4911      	ldr	r1, [pc, #68]	; (d47dc <_Z7sendNow6String+0x48>)
   d4798:	4604      	mov	r4, r0
   d479a:	f001 fd02 	bl	d61a2 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d479e:	b198      	cbz	r0, d47c8 <_Z7sendNow6String+0x34>
    state = REPORTING_STATE;                                                      // Set the state to reporting
   d47a0:	4b0f      	ldr	r3, [pc, #60]	; (d47e0 <_Z7sendNow6String+0x4c>)
   d47a2:	2204      	movs	r2, #4
   d47a4:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d47a6:	f7ff fcbd 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d47aa:	4b0e      	ldr	r3, [pc, #56]	; (d47e4 <_Z7sendNow6String+0x50>)
    Particle.publish("Function", "Command accepted - reporting now",PRIVATE);     // Acknowledge receipt
   d47ac:	490e      	ldr	r1, [pc, #56]	; (d47e8 <_Z7sendNow6String+0x54>)
   d47ae:	781b      	ldrb	r3, [r3, #0]
   d47b0:	2200      	movs	r2, #0
   d47b2:	f88d 2000 	strb.w	r2, [sp]
   d47b6:	a802      	add	r0, sp, #8
   d47b8:	4a0c      	ldr	r2, [pc, #48]	; (d47ec <_Z7sendNow6String+0x58>)
   d47ba:	f7ff fc94 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d47be:	a803      	add	r0, sp, #12
   d47c0:	f7ff fd00 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47c4:	2001      	movs	r0, #1
   d47c6:	e006      	b.n	d47d6 <_Z7sendNow6String+0x42>
   d47c8:	4909      	ldr	r1, [pc, #36]	; (d47f0 <_Z7sendNow6String+0x5c>)
   d47ca:	4620      	mov	r0, r4
   d47cc:	f001 fce9 	bl	d61a2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d47d0:	3000      	adds	r0, #0
   d47d2:	bf18      	it	ne
   d47d4:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d47d6:	b004      	add	sp, #16
   d47d8:	bd10      	pop	{r4, pc}
   d47da:	bf00      	nop
   d47dc:	000d82d4 	.word	0x000d82d4
   d47e0:	2003e300 	.word	0x2003e300
   d47e4:	2003e36c 	.word	0x2003e36c
   d47e8:	000d818a 	.word	0x000d818a
   d47ec:	000d8169 	.word	0x000d8169
   d47f0:	000d8023 	.word	0x000d8023

000d47f4 <_Z8senseNow6String>:

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
   d47f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d47f6:	4911      	ldr	r1, [pc, #68]	; (d483c <_Z8senseNow6String+0x48>)
   d47f8:	4604      	mov	r4, r0
   d47fa:	f001 fcd2 	bl	d61a2 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
   d47fe:	b198      	cbz	r0, d4828 <_Z8senseNow6String+0x34>
    state = MEASURING_STATE;                                                      // Set the state to reporting
   d4800:	4b0f      	ldr	r3, [pc, #60]	; (d4840 <_Z8senseNow6String+0x4c>)
   d4802:	2202      	movs	r2, #2
   d4804:	701a      	strb	r2, [r3, #0]
    waitUntil(PublishDelayFunction);  
   d4806:	f7ff fc8d 	bl	d4124 <_ZN11SystemClass13waitConditionIZ14SetVerboseMode6StringEUlvE0_EEbT_.isra.46>
   d480a:	4b0e      	ldr	r3, [pc, #56]	; (d4844 <_Z8senseNow6String+0x50>)
    Particle.publish("Function", "Command accepted - sensing now",PRIVATE);       // Acknowledge receipt
   d480c:	490e      	ldr	r1, [pc, #56]	; (d4848 <_Z8senseNow6String+0x54>)
   d480e:	781b      	ldrb	r3, [r3, #0]
   d4810:	2200      	movs	r2, #0
   d4812:	f88d 2000 	strb.w	r2, [sp]
   d4816:	a802      	add	r0, sp, #8
   d4818:	4a0c      	ldr	r2, [pc, #48]	; (d484c <_Z8senseNow6String+0x58>)
   d481a:	f7ff fc64 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d481e:	a803      	add	r0, sp, #12
   d4820:	f7ff fcd0 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4824:	2001      	movs	r0, #1
   d4826:	e006      	b.n	d4836 <_Z8senseNow6String+0x42>
   d4828:	4909      	ldr	r1, [pc, #36]	; (d4850 <_Z8senseNow6String+0x5c>)
   d482a:	4620      	mov	r0, r4
   d482c:	f001 fcb9 	bl	d61a2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
   d4830:	3000      	adds	r0, #0
   d4832:	bf18      	it	ne
   d4834:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
   d4836:	b004      	add	sp, #16
   d4838:	bd10      	pop	{r4, pc}
   d483a:	bf00      	nop
   d483c:	000d82d4 	.word	0x000d82d4
   d4840:	2003e300 	.word	0x2003e300
   d4844:	2003e36c 	.word	0x2003e36c
   d4848:	000d818a 	.word	0x000d818a
   d484c:	000d8193 	.word	0x000d8193
   d4850:	000d8023 	.word	0x000d8023

000d4854 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
   d4854:	b530      	push	{r4, r5, lr}
   d4856:	b085      	sub	sp, #20
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4858:	2300      	movs	r3, #0
   d485a:	4605      	mov	r5, r0
   d485c:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   d485e:	b121      	cbz	r1, d486a <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4860:	4b14      	ldr	r3, [pc, #80]	; (d48b4 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
   d4862:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4864:	4b14      	ldr	r3, [pc, #80]	; (d48b8 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4866:	9100      	str	r1, [sp, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4868:	9302      	str	r3, [sp, #8]
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
   d486a:	9b02      	ldr	r3, [sp, #8]
   d486c:	b183      	cbz	r3, d4890 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d486e:	2010      	movs	r0, #16
   d4870:	f7ff fc11 	bl	d4096 <_Znwj>
   d4874:	4604      	mov	r4, r0
   d4876:	b158      	cbz	r0, d4890 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4878:	2300      	movs	r3, #0
   d487a:	6083      	str	r3, [r0, #8]
   d487c:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d487e:	b17b      	cbz	r3, d48a0 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4880:	2202      	movs	r2, #2
   d4882:	4669      	mov	r1, sp
   d4884:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4886:	9b03      	ldr	r3, [sp, #12]
   d4888:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d488a:	9b02      	ldr	r3, [sp, #8]
   d488c:	60a3      	str	r3, [r4, #8]
   d488e:	e007      	b.n	d48a0 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
   d4890:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4892:	9b02      	ldr	r3, [sp, #8]
   d4894:	b15b      	cbz	r3, d48ae <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4896:	2203      	movs	r2, #3
   d4898:	4669      	mov	r1, sp
   d489a:	4668      	mov	r0, sp
   d489c:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
   d489e:	e006      	b.n	d48ae <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d48a0:	4621      	mov	r1, r4
   d48a2:	462a      	mov	r2, r5
   d48a4:	4805      	ldr	r0, [pc, #20]	; (d48bc <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
   d48a6:	f000 feae 	bl	d5606 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d48aa:	4604      	mov	r4, r0
   d48ac:	e7f1      	b.n	d4892 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
   d48ae:	4620      	mov	r0, r4
   d48b0:	b005      	add	sp, #20
   d48b2:	bd30      	pop	{r4, r5, pc}
   d48b4:	000d40cb 	.word	0x000d40cb
   d48b8:	000d40b3 	.word	0x000d40b3
   d48bc:	000d55df 	.word	0x000d55df

000d48c0 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d48c0:	2300      	movs	r3, #0
   d48c2:	2204      	movs	r2, #4
   d48c4:	f000 bd62 	b.w	d538c <spark_variable>

000d48c8 <setup>:
float voltage;                                                                    // Voltage level of the LiPo battery - 3.6-4.2V range



void setup()
{
   d48c8:	b510      	push	{r4, lr}
   d48ca:	b0a8      	sub	sp, #160	; 0xa0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d48cc:	a804      	add	r0, sp, #16
   d48ce:	f000 fd7d 	bl	d53cc <spark_deviceID>
     */
    int publishVitals(system_tick_t period = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d48d2:	2400      	movs	r4, #0
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d48d4:	2300      	movs	r3, #0
   d48d6:	227d      	movs	r2, #125	; 0x7d
   d48d8:	a908      	add	r1, sp, #32
   d48da:	a804      	add	r0, sp, #16
   d48dc:	f001 fc73 	bl	d61c6 <_ZNK6String8getBytesEPhjj>
   d48e0:	4623      	mov	r3, r4
   d48e2:	4622      	mov	r2, r4
   d48e4:	491d      	ldr	r1, [pc, #116]	; (d495c <setup+0x94>)
   d48e6:	9401      	str	r4, [sp, #4]
   d48e8:	9400      	str	r4, [sp, #0]
   d48ea:	a808      	add	r0, sp, #32
   d48ec:	f000 fd7e 	bl	d53ec <spark_subscribe>
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic, 125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                  // Subscribe to the integration response event

  // Particle Functions.
  Particle.function("verboseMode", SetVerboseMode);                               // Added Particle Function For VerboseMode.
   d48f0:	491b      	ldr	r1, [pc, #108]	; (d4960 <setup+0x98>)
   d48f2:	481c      	ldr	r0, [pc, #112]	; (d4964 <setup+0x9c>)
   d48f4:	f7ff ffae 	bl	d4854 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Get-Reading", senseNow);                                     // This function will force it to get a reading and set the refresh rate to 15mins.
   d48f8:	491b      	ldr	r1, [pc, #108]	; (d4968 <setup+0xa0>)
   d48fa:	481c      	ldr	r0, [pc, #112]	; (d496c <setup+0xa4>)
   d48fc:	f7ff ffaa 	bl	d4854 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Report", sendNow);                                      // This function will force it to get a reading and set the refresh rate to 15mins.
   d4900:	491b      	ldr	r1, [pc, #108]	; (d4970 <setup+0xa8>)
   d4902:	481c      	ldr	r0, [pc, #112]	; (d4974 <setup+0xac>)
   d4904:	f7ff ffa6 	bl	d4854 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>

  // Particle Variables
  Particle.variable("Temperature", temperatureString);                            // Setup Particle Variable
   d4908:	491b      	ldr	r1, [pc, #108]	; (d4978 <setup+0xb0>)
   d490a:	481c      	ldr	r0, [pc, #112]	; (d497c <setup+0xb4>)
   d490c:	f7ff ffd8 	bl	d48c0 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Release", releaseNumber);                                    // So we can see what release is running from the console
   d4910:	491b      	ldr	r1, [pc, #108]	; (d4980 <setup+0xb8>)
   d4912:	481c      	ldr	r0, [pc, #112]	; (d4984 <setup+0xbc>)
   d4914:	f7ff ffd4 	bl	d48c0 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Signal", signalString);                                      // Particle variables that enable monitoring using the mobile app
   d4918:	491b      	ldr	r1, [pc, #108]	; (d4988 <setup+0xc0>)
   d491a:	481c      	ldr	r0, [pc, #112]	; (d498c <setup+0xc4>)
   d491c:	f7ff ffd0 	bl	d48c0 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("Battery", batteryString);                                    // Battery level in V as the Argon does not have a fuel cell
   d4920:	491b      	ldr	r1, [pc, #108]	; (d4990 <setup+0xc8>)
   d4922:	481c      	ldr	r0, [pc, #112]	; (d4994 <setup+0xcc>)
   d4924:	f7ff ffcc 	bl	d48c0 <_ZN10CloudClass8variableIA8_cIA16_cEEEbRKT_DpRKT0_>

  getTemperature();
   d4928:	f7ff fc62 	bl	d41f0 <_Z14getTemperaturev>

  if (verboseMode)
   d492c:	4b1a      	ldr	r3, [pc, #104]	; (d4998 <setup+0xd0>)
   d492e:	781b      	ldrb	r3, [r3, #0]
   d4930:	b15b      	cbz	r3, d494a <setup+0x82>
   d4932:	4b1a      	ldr	r3, [pc, #104]	; (d499c <setup+0xd4>)
    Particle.publish("State", "IDLE", PRIVATE);
   d4934:	4a1a      	ldr	r2, [pc, #104]	; (d49a0 <setup+0xd8>)
   d4936:	781b      	ldrb	r3, [r3, #0]
   d4938:	491a      	ldr	r1, [pc, #104]	; (d49a4 <setup+0xdc>)
   d493a:	f88d 4000 	strb.w	r4, [sp]
   d493e:	a802      	add	r0, sp, #8
   d4940:	f7ff fbd1 	bl	d40e6 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.65.constprop.78>
   d4944:	a803      	add	r0, sp, #12
   d4946:	f7ff fc3d 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
   d494a:	4b17      	ldr	r3, [pc, #92]	; (d49a8 <setup+0xe0>)
   d494c:	2201      	movs	r2, #1

void setup()
{
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.
  char responseTopic[125];
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
   d494e:	a804      	add	r0, sp, #16
  getTemperature();

  if (verboseMode)
    Particle.publish("State", "IDLE", PRIVATE);

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
   d4950:	701a      	strb	r2, [r3, #0]

void setup()
{
  // This part receives Response using Particle.subscribe() and tells the response received from Ubidots.
  char responseTopic[125];
  String deviceID = System.deviceID();                                            // Multiple Particle devices share the same hook - keeps things straight
   d4952:	f001 fbcc 	bl	d60ee <_ZN6StringD1Ev>

  if (verboseMode)
    Particle.publish("State", "IDLE", PRIVATE);

  state = IDLE_STATE;                                                             // If we made it this far, we are ready to go to IDLE in the main loop
}
   d4956:	b028      	add	sp, #160	; 0xa0
   d4958:	bd10      	pop	{r4, pc}
   d495a:	bf00      	nop
   d495c:	000d43d9 	.word	0x000d43d9
   d4960:	000d4299 	.word	0x000d4299
   d4964:	000d81b2 	.word	0x000d81b2
   d4968:	000d47f5 	.word	0x000d47f5
   d496c:	000d81be 	.word	0x000d81be
   d4970:	000d4795 	.word	0x000d4795
   d4974:	000d81ca 	.word	0x000d81ca
   d4978:	2003e2e8 	.word	0x2003e2e8
   d497c:	000d8126 	.word	0x000d8126
   d4980:	000d7fa8 	.word	0x000d7fa8
   d4984:	000d81d6 	.word	0x000d81d6
   d4988:	2003e340 	.word	0x2003e340
   d498c:	000d81de 	.word	0x000d81de
   d4990:	2003e35c 	.word	0x2003e35c
   d4994:	000d81e5 	.word	0x000d81e5
   d4998:	2003e0f0 	.word	0x2003e0f0
   d499c:	2003e36c 	.word	0x2003e36c
   d49a0:	000d81ed 	.word	0x000d81ed
   d49a4:	000d80b4 	.word	0x000d80b4
   d49a8:	2003e300 	.word	0x2003e300

000d49ac <_GLOBAL__sub_I_sensor>:
  }
  else if (Command == "0") {                                                      // No action required
    return 1;
  }
  return 0;
}
   d49ac:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d49ae:	4b06      	ldr	r3, [pc, #24]	; (d49c8 <_GLOBAL__sub_I_sensor+0x1c>)
   d49b0:	2201      	movs	r2, #1
   d49b2:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d49b4:	f000 fb96 	bl	d50e4 <HAL_Pin_Map>
const char releaseNumber[6] = "1.15"; // Displays the release on the menu

#include "DS18.h" // Include the OneWire library

// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d49b8:	2200      	movs	r2, #0
   d49ba:	2103      	movs	r1, #3
   d49bc:	4803      	ldr	r0, [pc, #12]	; (d49cc <_GLOBAL__sub_I_sensor+0x20>)
  }
  else if (Command == "0") {                                                      // No action required
    return 1;
  }
  return 0;
}
   d49be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const char releaseNumber[6] = "1.15"; // Displays the release on the menu

#include "DS18.h" // Include the OneWire library

// Initialize modules here
DS18 sensor(D3); // Initialize the temperature sensor object
   d49c2:	f000 b816 	b.w	d49f2 <_ZN4DS18C1Etb>
   d49c6:	bf00      	nop
   d49c8:	2003e36c 	.word	0x2003e36c
   d49cc:	2003e30c 	.word	0x2003e30c

000d49d0 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d49d0:	2300      	movs	r3, #0
  _celsius = 0;
   d49d2:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d49d4:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d49d6:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d49d8:	6183      	str	r3, [r0, #24]
   d49da:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d49dc:	6203      	str	r3, [r0, #32]
   d49de:	6243      	str	r3, [r0, #36]	; 0x24
   d49e0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d49e4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d49e8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d49ec:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d49f0:	4770      	bx	lr

000d49f2 <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d49f2:	b538      	push	{r3, r4, r5, lr}
   d49f4:	4604      	mov	r4, r0
   d49f6:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d49f8:	f000 f994 	bl	d4d24 <_ZN7OneWireC1Et>
   d49fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d4a00:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d4a02:	73a5      	strb	r5, [r4, #14]
   d4a04:	8223      	strh	r3, [r4, #16]
{
  init();
   d4a06:	f7ff ffe3 	bl	d49d0 <_ZN4DS184initEv>
}
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a10 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a12:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d4a16:	680b      	ldr	r3, [r1, #0]
   d4a18:	6183      	str	r3, [r0, #24]
   d4a1a:	f100 0518 	add.w	r5, r0, #24
   d4a1e:	684b      	ldr	r3, [r1, #4]
   d4a20:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4a22:	780b      	ldrb	r3, [r1, #0]
   d4a24:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4a26:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4a28:	d00a      	beq.n	d4a40 <_ZN4DS184readEPh+0x30>
   d4a2a:	d803      	bhi.n	d4a34 <_ZN4DS184readEPh+0x24>
   d4a2c:	2b10      	cmp	r3, #16
   d4a2e:	d142      	bne.n	d4ab6 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d4a30:	2301      	movs	r3, #1
   d4a32:	e008      	b.n	d4a46 <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4a34:	2b26      	cmp	r3, #38	; 0x26
   d4a36:	d005      	beq.n	d4a44 <_ZN4DS184readEPh+0x34>
   d4a38:	2b28      	cmp	r3, #40	; 0x28
   d4a3a:	d13c      	bne.n	d4ab6 <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d4a3c:	2302      	movs	r3, #2
   d4a3e:	e002      	b.n	d4a46 <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d4a40:	2303      	movs	r3, #3
   d4a42:	e000      	b.n	d4a46 <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d4a44:	2304      	movs	r3, #4
   d4a46:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	f000 f974 	bl	d4d38 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d4a50:	4629      	mov	r1, r5
   d4a52:	4620      	mov	r0, r4
   d4a54:	f000 fa30 	bl	d4eb8 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d4a58:	7ba2      	ldrb	r2, [r4, #14]
   d4a5a:	2144      	movs	r1, #68	; 0x44
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	f000 f9f8 	bl	d4e52 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d4a62:	8a20      	ldrh	r0, [r4, #16]
   d4a64:	f000 fd6a 	bl	d553c <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d4a68:	4620      	mov	r0, r4
   d4a6a:	f000 f965 	bl	d4d38 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4a6e:	4629      	mov	r1, r5
   d4a70:	4620      	mov	r0, r4
   d4a72:	f000 fa21 	bl	d4eb8 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d4a76:	2200      	movs	r2, #0
   d4a78:	21b8      	movs	r1, #184	; 0xb8
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	f000 f9e9 	bl	d4e52 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d4a80:	2200      	movs	r2, #0
   d4a82:	4611      	mov	r1, r2
   d4a84:	4620      	mov	r0, r4
   d4a86:	f000 f9e4 	bl	d4e52 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f000 f954 	bl	d4d38 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4a90:	4629      	mov	r1, r5
   d4a92:	4620      	mov	r0, r4
   d4a94:	f000 fa10 	bl	d4eb8 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d4a98:	2200      	movs	r2, #0
   d4a9a:	21be      	movs	r1, #190	; 0xbe
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f000 f9d8 	bl	d4e52 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d4aa2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d4aa6:	2b04      	cmp	r3, #4
   d4aa8:	d109      	bne.n	d4abe <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d4aaa:	2200      	movs	r2, #0
   d4aac:	4611      	mov	r1, r2
   d4aae:	4620      	mov	r0, r4
   d4ab0:	f000 f9cf 	bl	d4e52 <_ZN7OneWire5writeEhh>
   d4ab4:	e003      	b.n	d4abe <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d4ab6:	2000      	movs	r0, #0
   d4ab8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d4abc:	e094      	b.n	d4be8 <_ZN4DS184readEPh+0x1d8>
   d4abe:	f104 051f 	add.w	r5, r4, #31
   d4ac2:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	f000 f9e6 	bl	d4e98 <_ZN7OneWire4readEv>
   d4acc:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d4ad0:	42ae      	cmp	r6, r5
   d4ad2:	d1f8      	bne.n	d4ac6 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d4ad4:	2108      	movs	r1, #8
   d4ad6:	f104 0020 	add.w	r0, r4, #32
   d4ada:	f000 fa86 	bl	d4fea <_ZN7OneWire4crc8EPhh>
   d4ade:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d4ae2:	4283      	cmp	r3, r0
   d4ae4:	d004      	beq.n	d4af0 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d4ae6:	2301      	movs	r3, #1
   d4ae8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4aec:	2000      	movs	r0, #0
   d4aee:	e07b      	b.n	d4be8 <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4af0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d4af4:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d4af8:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4afc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d4b00:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d4b02:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d4b04:	d127      	bne.n	d4b56 <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d4b06:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4b0a:	ee07 3a90 	vmov	s15, r3
   d4b0e:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4b12:	08d2      	lsrs	r2, r2, #3
   d4b14:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d4b18:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d4b1c:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d4b20:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4b22:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d4b26:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d4b2a:	d045      	beq.n	d4bb8 <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d4b2c:	ee18 0a90 	vmov	r0, s17
   d4b30:	f002 f9ac 	bl	d6e8c <__aeabi_f2d>
   d4b34:	4606      	mov	r6, r0
   d4b36:	ee18 0a10 	vmov	r0, s16
   d4b3a:	460f      	mov	r7, r1
   d4b3c:	f002 f9a6 	bl	d6e8c <__aeabi_f2d>
   d4b40:	2200      	movs	r2, #0
   d4b42:	4b2b      	ldr	r3, [pc, #172]	; (d4bf0 <_ZN4DS184readEPh+0x1e0>)
   d4b44:	f002 f9f6 	bl	d6f34 <__aeabi_dmul>
   d4b48:	4602      	mov	r2, r0
   d4b4a:	460b      	mov	r3, r1
   d4b4c:	4630      	mov	r0, r6
   d4b4e:	4639      	mov	r1, r7
   d4b50:	f002 f83c 	bl	d6bcc <__aeabi_dsub>
   d4b54:	e044      	b.n	d4be0 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d4b56:	2901      	cmp	r1, #1
   d4b58:	d003      	beq.n	d4b62 <_ZN4DS184readEPh+0x152>
   d4b5a:	d344      	bcc.n	d4be6 <_ZN4DS184readEPh+0x1d6>
   d4b5c:	2903      	cmp	r1, #3
   d4b5e:	d910      	bls.n	d4b82 <_ZN4DS184readEPh+0x172>
   d4b60:	e041      	b.n	d4be6 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4b62:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4b66:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4b6a:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d4b6c:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4b6e:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4b70:	d119      	bne.n	d4ba6 <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d4b72:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d4b76:	f023 030f 	bic.w	r3, r3, #15
   d4b7a:	f1c2 020c 	rsb	r2, r2, #12
   d4b7e:	4413      	add	r3, r2
   d4b80:	e010      	b.n	d4ba4 <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d4b82:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d4b86:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d4b8a:	d102      	bne.n	d4b92 <_ZN4DS184readEPh+0x182>
   d4b8c:	f023 0307 	bic.w	r3, r3, #7
   d4b90:	e008      	b.n	d4ba4 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d4b92:	2a20      	cmp	r2, #32
   d4b94:	d102      	bne.n	d4b9c <_ZN4DS184readEPh+0x18c>
   d4b96:	f023 0303 	bic.w	r3, r3, #3
   d4b9a:	e003      	b.n	d4ba4 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4b9c:	2a40      	cmp	r2, #64	; 0x40
   d4b9e:	d102      	bne.n	d4ba6 <_ZN4DS184readEPh+0x196>
   d4ba0:	f023 0301 	bic.w	r3, r3, #1
   d4ba4:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d4ba6:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d4baa:	ee07 3a90 	vmov	s15, r3
   d4bae:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d4bb2:	edc4 7a05 	vstr	s15, [r4, #20]
   d4bb6:	e016      	b.n	d4be6 <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4bb8:	ee18 0a10 	vmov	r0, s16
   d4bbc:	f002 f966 	bl	d6e8c <__aeabi_f2d>
   d4bc0:	2200      	movs	r2, #0
   d4bc2:	4b0b      	ldr	r3, [pc, #44]	; (d4bf0 <_ZN4DS184readEPh+0x1e0>)
   d4bc4:	f002 f9b6 	bl	d6f34 <__aeabi_dmul>
   d4bc8:	4606      	mov	r6, r0
   d4bca:	ee18 0a90 	vmov	r0, s17
   d4bce:	460f      	mov	r7, r1
   d4bd0:	f002 f95c 	bl	d6e8c <__aeabi_f2d>
   d4bd4:	4602      	mov	r2, r0
   d4bd6:	460b      	mov	r3, r1
   d4bd8:	4630      	mov	r0, r6
   d4bda:	4639      	mov	r1, r7
   d4bdc:	f001 fff8 	bl	d6bd0 <__adddf3>
   d4be0:	f002 fbba 	bl	d7358 <__aeabi_d2f>
   d4be4:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d4be6:	2001      	movs	r0, #1
}
   d4be8:	ecbd 8b02 	vpop	{d8}
   d4bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4bee:	bf00      	nop
   d4bf0:	3fa00000 	.word	0x3fa00000

000d4bf4 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d4bf4:	b538      	push	{r3, r4, r5, lr}
   d4bf6:	4604      	mov	r4, r0
  init();
   d4bf8:	f7ff feea 	bl	d49d0 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d4bfc:	f100 0518 	add.w	r5, r0, #24
   d4c00:	4629      	mov	r1, r5
   d4c02:	f000 f977 	bl	d4ef4 <_ZN7OneWire6searchEPh>
   d4c06:	b930      	cbnz	r0, d4c16 <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d4c08:	2301      	movs	r3, #1
   d4c0a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d4c0e:	4620      	mov	r0, r4
   d4c10:	f000 f964 	bl	d4edc <_ZN7OneWire12reset_searchEv>
    return false;
   d4c14:	e010      	b.n	d4c38 <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d4c16:	2107      	movs	r1, #7
   d4c18:	4628      	mov	r0, r5
   d4c1a:	f000 f9e6 	bl	d4fea <_ZN7OneWire4crc8EPhh>
   d4c1e:	7fe3      	ldrb	r3, [r4, #31]
   d4c20:	4283      	cmp	r3, r0
   d4c22:	d003      	beq.n	d4c2c <_ZN4DS184readEv+0x38>
    _crcError = true;
   d4c24:	2301      	movs	r3, #1
   d4c26:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d4c2a:	e005      	b.n	d4c38 <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d4c2c:	4629      	mov	r1, r5
   d4c2e:	4620      	mov	r0, r4
}
   d4c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d4c34:	f7ff beec 	b.w	d4a10 <_ZN4DS184readEPh>
}
   d4c38:	2000      	movs	r0, #0
   d4c3a:	bd38      	pop	{r3, r4, r5, pc}

000d4c3c <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d4c3c:	ed90 0a05 	vldr	s0, [r0, #20]
   d4c40:	4770      	bx	lr

000d4c42 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4c42:	f000 ba4f 	b.w	d50e4 <HAL_Pin_Map>
	...

000d4c48 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4c48:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c4a:	6803      	ldr	r3, [r0, #0]
   d4c4c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4c4e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4c50:	d904      	bls.n	d4c5c <nrf_gpio_pin_port_decode+0x14>
   d4c52:	4a07      	ldr	r2, [pc, #28]	; (d4c70 <nrf_gpio_pin_port_decode+0x28>)
   d4c54:	2100      	movs	r1, #0
   d4c56:	200a      	movs	r0, #10
   d4c58:	f000 fb4c 	bl	d52f4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4c5c:	6823      	ldr	r3, [r4, #0]
   d4c5e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4c60:	bf83      	ittte	hi
   d4c62:	f003 031f 	andhi.w	r3, r3, #31
   d4c66:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4c68:	4802      	ldrhi	r0, [pc, #8]	; (d4c74 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4c6a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4c6e:	bd10      	pop	{r4, pc}
   d4c70:	000d50a5 	.word	0x000d50a5
   d4c74:	50000300 	.word	0x50000300

000d4c78 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d4c78:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4c7a:	4b0b      	ldr	r3, [pc, #44]	; (d4ca8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	0100      	lsls	r0, r0, #4
   d4c80:	1819      	adds	r1, r3, r0
   d4c82:	5c1a      	ldrb	r2, [r3, r0]
   d4c84:	784b      	ldrb	r3, [r1, #1]
   d4c86:	a802      	add	r0, sp, #8
   d4c88:	f003 031f 	and.w	r3, r3, #31
   d4c8c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4c90:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c94:	f7ff ffd8 	bl	d4c48 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4c98:	9a01      	ldr	r2, [sp, #4]
   d4c9a:	2301      	movs	r3, #1
   d4c9c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4c9e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4ca2:	b003      	add	sp, #12
   d4ca4:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ca8:	2003e374 	.word	0x2003e374

000d4cac <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4cac:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4cae:	4b0b      	ldr	r3, [pc, #44]	; (d4cdc <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	0100      	lsls	r0, r0, #4
   d4cb4:	1819      	adds	r1, r3, r0
   d4cb6:	5c1a      	ldrb	r2, [r3, r0]
   d4cb8:	784b      	ldrb	r3, [r1, #1]
   d4cba:	a802      	add	r0, sp, #8
   d4cbc:	f003 031f 	and.w	r3, r3, #31
   d4cc0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4cc4:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4cc8:	f7ff ffbe 	bl	d4c48 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4ccc:	9a01      	ldr	r2, [sp, #4]
   d4cce:	2301      	movs	r3, #1
   d4cd0:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4cd2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d4cd6:	b003      	add	sp, #12
   d4cd8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4cdc:	2003e374 	.word	0x2003e374

000d4ce0 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4ce0:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4ce2:	4b0f      	ldr	r3, [pc, #60]	; (d4d20 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	0100      	lsls	r0, r0, #4
   d4ce8:	181a      	adds	r2, r3, r0
   d4cea:	5c1c      	ldrb	r4, [r3, r0]
   d4cec:	7853      	ldrb	r3, [r2, #1]
   d4cee:	a802      	add	r0, sp, #8
   d4cf0:	f003 031f 	and.w	r3, r3, #31
   d4cf4:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4cf8:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4cfc:	f7ff ffa4 	bl	d4c48 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4d00:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4d04:	a802      	add	r0, sp, #8
   d4d06:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4d0a:	f7ff ff9d 	bl	d4c48 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4d0e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d4d12:	9800      	ldr	r0, [sp, #0]
   d4d14:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4d18:	f000 0001 	and.w	r0, r0, #1
   d4d1c:	b002      	add	sp, #8
   d4d1e:	bd10      	pop	{r4, pc}
   d4d20:	2003e374 	.word	0x2003e374

000d4d24 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d4d24:	b538      	push	{r3, r4, r5, lr}
   d4d26:	4604      	mov	r4, r0
   d4d28:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d4d2a:	4628      	mov	r0, r5
   d4d2c:	2100      	movs	r1, #0
   d4d2e:	f001 fd8d 	bl	d684c <pinMode>
    _pin = pin;
   d4d32:	8025      	strh	r5, [r4, #0]
}
   d4d34:	4620      	mov	r0, r4
   d4d36:	bd38      	pop	{r3, r4, r5, pc}

000d4d38 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d4d38:	b538      	push	{r3, r4, r5, lr}
   d4d3a:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d4d3c:	f000 ff6a 	bl	d5c14 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4d40:	2100      	movs	r1, #0
   d4d42:	8828      	ldrh	r0, [r5, #0]
   d4d44:	f000 f9de 	bl	d5104 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d4d48:	f000 ff66 	bl	d5c18 <_Z10interruptsv>
   d4d4c:	247d      	movs	r4, #125	; 0x7d
   d4d4e:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d4d50:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4d54:	d02b      	beq.n	d4dae <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4d56:	2002      	movs	r0, #2
   d4d58:	f000 f9a4 	bl	d50a4 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d4d5c:	8828      	ldrh	r0, [r5, #0]
   d4d5e:	f7ff ffbf 	bl	d4ce0 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d4d62:	2800      	cmp	r0, #0
   d4d64:	d0f3      	beq.n	d4d4e <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d4d66:	f000 ff55 	bl	d5c14 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4d6a:	8828      	ldrh	r0, [r5, #0]
   d4d6c:	f7ff ff84 	bl	d4c78 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4d70:	2101      	movs	r1, #1
   d4d72:	8828      	ldrh	r0, [r5, #0]
   d4d74:	f000 f9c6 	bl	d5104 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d4d78:	f000 ff4e 	bl	d5c18 <_Z10interruptsv>
   d4d7c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4d80:	f000 f990 	bl	d50a4 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4d84:	f000 ff46 	bl	d5c14 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4d88:	2100      	movs	r1, #0
   d4d8a:	8828      	ldrh	r0, [r5, #0]
   d4d8c:	f000 f9ba 	bl	d5104 <HAL_Pin_Mode>
   d4d90:	2046      	movs	r0, #70	; 0x46
   d4d92:	f000 f987 	bl	d50a4 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4d96:	8828      	ldrh	r0, [r5, #0]
   d4d98:	f7ff ffa2 	bl	d4ce0 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4d9c:	fab0 f480 	clz	r4, r0

    interrupts();
   d4da0:	f000 ff3a 	bl	d5c18 <_Z10interruptsv>
   d4da4:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4da8:	0964      	lsrs	r4, r4, #5
   d4daa:	f000 f97b 	bl	d50a4 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d4dae:	4620      	mov	r0, r4
   d4db0:	bd38      	pop	{r3, r4, r5, pc}

000d4db2 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d4db2:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4db4:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d4db8:	4604      	mov	r4, r0
    if (v & 1) {
   d4dba:	d013      	beq.n	d4de4 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4dbc:	f000 ff2a 	bl	d5c14 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4dc0:	8820      	ldrh	r0, [r4, #0]
   d4dc2:	f7ff ff59 	bl	d4c78 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4dc6:	2101      	movs	r1, #1
   d4dc8:	8820      	ldrh	r0, [r4, #0]
   d4dca:	f000 f99b 	bl	d5104 <HAL_Pin_Mode>
   d4dce:	200a      	movs	r0, #10
   d4dd0:	f000 f968 	bl	d50a4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4dd4:	8820      	ldrh	r0, [r4, #0]
   d4dd6:	2100      	movs	r1, #0
   d4dd8:	f000 f994 	bl	d5104 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4ddc:	f000 ff1c 	bl	d5c18 <_Z10interruptsv>
   d4de0:	2037      	movs	r0, #55	; 0x37
   d4de2:	e012      	b.n	d4e0a <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4de4:	f000 ff16 	bl	d5c14 <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4de8:	8820      	ldrh	r0, [r4, #0]
   d4dea:	f7ff ff45 	bl	d4c78 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4dee:	2101      	movs	r1, #1
   d4df0:	8820      	ldrh	r0, [r4, #0]
   d4df2:	f000 f987 	bl	d5104 <HAL_Pin_Mode>
   d4df6:	2041      	movs	r0, #65	; 0x41
   d4df8:	f000 f954 	bl	d50a4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4dfc:	8820      	ldrh	r0, [r4, #0]
   d4dfe:	4629      	mov	r1, r5
   d4e00:	f000 f980 	bl	d5104 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d4e04:	f000 ff08 	bl	d5c18 <_Z10interruptsv>
   d4e08:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d4e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e0e:	f000 b949 	b.w	d50a4 <HAL_Delay_Microseconds>

000d4e12 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d4e12:	b510      	push	{r4, lr}
   d4e14:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d4e16:	f000 fefd 	bl	d5c14 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4e1a:	8820      	ldrh	r0, [r4, #0]
   d4e1c:	f7ff ff2c 	bl	d4c78 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4e20:	2101      	movs	r1, #1
   d4e22:	8820      	ldrh	r0, [r4, #0]
   d4e24:	f000 f96e 	bl	d5104 <HAL_Pin_Mode>
   d4e28:	2003      	movs	r0, #3
   d4e2a:	f000 f93b 	bl	d50a4 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4e2e:	2100      	movs	r1, #0
   d4e30:	8820      	ldrh	r0, [r4, #0]
   d4e32:	f000 f967 	bl	d5104 <HAL_Pin_Mode>
   d4e36:	200a      	movs	r0, #10
   d4e38:	f000 f934 	bl	d50a4 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d4e3c:	8820      	ldrh	r0, [r4, #0]
   d4e3e:	f7ff ff4f 	bl	d4ce0 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4e42:	4604      	mov	r4, r0

    interrupts();
   d4e44:	f000 fee8 	bl	d5c18 <_Z10interruptsv>
   d4e48:	2035      	movs	r0, #53	; 0x35
   d4e4a:	f000 f92b 	bl	d50a4 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d4e4e:	4620      	mov	r0, r4
   d4e50:	bd10      	pop	{r4, pc}

000d4e52 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d4e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e56:	4605      	mov	r5, r0
   d4e58:	4688      	mov	r8, r1
   d4e5a:	4617      	mov	r7, r2
   d4e5c:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4e5e:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d4e60:	ea18 0f04 	tst.w	r8, r4
   d4e64:	bf14      	ite	ne
   d4e66:	2101      	movne	r1, #1
   d4e68:	2100      	moveq	r1, #0
   d4e6a:	4628      	mov	r0, r5
   d4e6c:	f7ff ffa1 	bl	d4db2 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4e70:	0064      	lsls	r4, r4, #1
   d4e72:	3e01      	subs	r6, #1
   d4e74:	b2e4      	uxtb	r4, r4
   d4e76:	d1f3      	bne.n	d4e60 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d4e78:	b167      	cbz	r7, d4e94 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d4e7a:	f000 fecb 	bl	d5c14 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d4e7e:	8828      	ldrh	r0, [r5, #0]
   d4e80:	f7ff ff14 	bl	d4cac <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4e84:	8828      	ldrh	r0, [r5, #0]
   d4e86:	2101      	movs	r1, #1
   d4e88:	f000 f93c 	bl	d5104 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d4e90:	f000 bec2 	b.w	d5c18 <_Z10interruptsv>
   d4e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e98 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d4e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e9a:	4607      	mov	r7, r0
   d4e9c:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4e9e:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4ea0:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4ea2:	4638      	mov	r0, r7
   d4ea4:	f7ff ffb5 	bl	d4e12 <_ZN7OneWire8read_bitEv>
   d4ea8:	b100      	cbz	r0, d4eac <_ZN7OneWire4readEv+0x14>
   d4eaa:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4eac:	0064      	lsls	r4, r4, #1
   d4eae:	3e01      	subs	r6, #1
   d4eb0:	b2e4      	uxtb	r4, r4
   d4eb2:	d1f6      	bne.n	d4ea2 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4eb4:	4628      	mov	r0, r5
   d4eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4eb8 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4eb8:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d4eba:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4ebc:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d4ebe:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4ec0:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4ec2:	f7ff ffc6 	bl	d4e52 <_ZN7OneWire5writeEhh>
   d4ec6:	1e65      	subs	r5, r4, #1
   d4ec8:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d4eca:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4ece:	2200      	movs	r2, #0
   d4ed0:	4630      	mov	r0, r6
   d4ed2:	f7ff ffbe 	bl	d4e52 <_ZN7OneWire5writeEhh>
   d4ed6:	42a5      	cmp	r5, r4
   d4ed8:	d1f7      	bne.n	d4eca <_ZN7OneWire6selectEPKh+0x12>
}
   d4eda:	bd70      	pop	{r4, r5, r6, pc}

000d4edc <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4edc:	2300      	movs	r3, #0
   d4ede:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4ee0:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4ee2:	72c3      	strb	r3, [r0, #11]
   d4ee4:	f100 020a 	add.w	r2, r0, #10
   d4ee8:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4eea:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d4eee:	4282      	cmp	r2, r0
   d4ef0:	d1fb      	bne.n	d4eea <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d4ef2:	4770      	bx	lr

000d4ef4 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4ef8:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4efa:	4604      	mov	r4, r0
   d4efc:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4efe:	2d00      	cmp	r5, #0
   d4f00:	d15e      	bne.n	d4fc0 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d4f02:	f7ff ff19 	bl	d4d38 <_ZN7OneWire5resetEv>
   d4f06:	b920      	cbnz	r0, d4f12 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4f08:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4f0a:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4f0c:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4f12:	462a      	mov	r2, r5
   d4f14:	21f0      	movs	r1, #240	; 0xf0
   d4f16:	4620      	mov	r0, r4
   d4f18:	f7ff ff9b 	bl	d4e52 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4f1c:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4f1e:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4f20:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4f22:	4620      	mov	r0, r4
   d4f24:	f7ff ff75 	bl	d4e12 <_ZN7OneWire8read_bitEv>
   d4f28:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	f7ff ff71 	bl	d4e12 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4f30:	f1b9 0f01 	cmp.w	r9, #1
   d4f34:	d102      	bne.n	d4f3c <_ZN7OneWire6searchEPh+0x48>
   d4f36:	2801      	cmp	r0, #1
   d4f38:	d11b      	bne.n	d4f72 <_ZN7OneWire6searchEPh+0x7e>
   d4f3a:	e037      	b.n	d4fac <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d4f3c:	4581      	cmp	r9, r0
   d4f3e:	eb04 0305 	add.w	r3, r4, r5
   d4f42:	d11e      	bne.n	d4f82 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4f44:	7aa2      	ldrb	r2, [r4, #10]
   d4f46:	4297      	cmp	r7, r2
   d4f48:	d207      	bcs.n	d4f5a <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d4f4a:	789a      	ldrb	r2, [r3, #2]
   d4f4c:	4216      	tst	r6, r2
   d4f4e:	bf14      	ite	ne
   d4f50:	f04f 0901 	movne.w	r9, #1
   d4f54:	f04f 0900 	moveq.w	r9, #0
   d4f58:	e004      	b.n	d4f64 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4f5a:	bf0c      	ite	eq
   d4f5c:	f04f 0901 	moveq.w	r9, #1
   d4f60:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4f64:	f1b9 0f00 	cmp.w	r9, #0
   d4f68:	d103      	bne.n	d4f72 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d4f6a:	2f08      	cmp	r7, #8
   d4f6c:	d808      	bhi.n	d4f80 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d4f6e:	72e7      	strb	r7, [r4, #11]
   d4f70:	e006      	b.n	d4f80 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d4f72:	1962      	adds	r2, r4, r5
   d4f74:	f04f 0901 	mov.w	r9, #1
   d4f78:	7893      	ldrb	r3, [r2, #2]
   d4f7a:	4333      	orrs	r3, r6
   d4f7c:	7093      	strb	r3, [r2, #2]
   d4f7e:	e004      	b.n	d4f8a <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4f80:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4f82:	789a      	ldrb	r2, [r3, #2]
   d4f84:	ea22 0206 	bic.w	r2, r2, r6
   d4f88:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4f8a:	4649      	mov	r1, r9
   d4f8c:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d4f8e:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d4f90:	f7ff ff0f 	bl	d4db2 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4f94:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4f98:	bf04      	itt	eq
   d4f9a:	3501      	addeq	r5, #1
   d4f9c:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4f9e:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4fa2:	bf08      	it	eq
   d4fa4:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4fa6:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4fa8:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4faa:	d9ba      	bls.n	d4f22 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4fac:	2f40      	cmp	r7, #64	; 0x40
   d4fae:	d907      	bls.n	d4fc0 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4fb0:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4fb4:	f1ba 0f00 	cmp.w	sl, #0
   d4fb8:	d112      	bne.n	d4fe0 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4fba:	2301      	movs	r3, #1
   d4fbc:	7323      	strb	r3, [r4, #12]
   d4fbe:	e00f      	b.n	d4fe0 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d4fc0:	2000      	movs	r0, #0
   d4fc2:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4fc4:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4fc6:	72e0      	strb	r0, [r4, #11]
   d4fc8:	1c63      	adds	r3, r4, #1
   d4fca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d4fce:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d4fd0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4fd4:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4fd8:	42a3      	cmp	r3, r4
   d4fda:	d1f9      	bne.n	d4fd0 <_ZN7OneWire6searchEPh+0xdc>
   d4fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d4fe0:	78a3      	ldrb	r3, [r4, #2]
   d4fe2:	2b00      	cmp	r3, #0
   d4fe4:	d0ec      	beq.n	d4fc0 <_ZN7OneWire6searchEPh+0xcc>
   d4fe6:	2001      	movs	r0, #1
   d4fe8:	e7ee      	b.n	d4fc8 <_ZN7OneWire6searchEPh+0xd4>

000d4fea <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4fea:	b530      	push	{r4, r5, lr}
   d4fec:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d4fee:	2000      	movs	r0, #0

    while (len--) {
   d4ff0:	3901      	subs	r1, #1
   d4ff2:	b2c9      	uxtb	r1, r1
   d4ff4:	29ff      	cmp	r1, #255	; 0xff
   d4ff6:	d013      	beq.n	d5020 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4ff8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4ffc:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4ffe:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d5002:	f013 0f01 	tst.w	r3, #1
   d5006:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d500a:	bf1c      	itt	ne
   d500c:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d5010:	b2d8      	uxtbne	r0, r3
   d5012:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d5014:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d5018:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d501c:	d1ef      	bne.n	d4ffe <_ZN7OneWire4crc8EPhh+0x14>
   d501e:	e7e7      	b.n	d4ff0 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d5020:	bd30      	pop	{r4, r5, pc}
	...

000d5024 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d5024:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5026:	f000 f85d 	bl	d50e4 <HAL_Pin_Map>
   d502a:	4b01      	ldr	r3, [pc, #4]	; (d5030 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d502c:	6018      	str	r0, [r3, #0]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	2003e374 	.word	0x2003e374

000d5034 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <os_thread_is_current+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	689b      	ldr	r3, [r3, #8]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030248 	.word	0x00030248

000d5044 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <os_thread_join+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	691b      	ldr	r3, [r3, #16]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030248 	.word	0x00030248

000d5054 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <os_thread_cleanup+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	695b      	ldr	r3, [r3, #20]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030248 	.word	0x00030248

000d5064 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <os_mutex_create+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030248 	.word	0x00030248

000d5074 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <os_mutex_recursive_create+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030248 	.word	0x00030248

000d5084 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_Core_System_Reset_Ex+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030234 	.word	0x00030234

000d5094 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_RNG_GetRandomNumber+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	685b      	ldr	r3, [r3, #4]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030218 	.word	0x00030218

000d50a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_Delay_Microseconds+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	68db      	ldr	r3, [r3, #12]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030218 	.word	0x00030218

000d50b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	695b      	ldr	r3, [r3, #20]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030218 	.word	0x00030218

000d50c4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_RTC_Get_UnixTime+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	69db      	ldr	r3, [r3, #28]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030218 	.word	0x00030218

000d50d4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_RTC_Time_Is_Valid+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030218 	.word	0x00030218

000d50e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <HAL_Pin_Map+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	681b      	ldr	r3, [r3, #0]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003022c 	.word	0x0003022c

000d50f4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <HAL_Validate_Pin_Function+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	685b      	ldr	r3, [r3, #4]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003022c 	.word	0x0003022c

000d5104 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <HAL_Pin_Mode+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	689b      	ldr	r3, [r3, #8]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	0003022c 	.word	0x0003022c

000d5114 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <HAL_Interrupts_Enable_All+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	6a1b      	ldr	r3, [r3, #32]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003022c 	.word	0x0003022c

000d5124 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <HAL_Interrupts_Disable_All+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003022c 	.word	0x0003022c

000d5134 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <HAL_ADC_Read+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003022c 	.word	0x0003022c

000d5144 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <HAL_I2C_Write_Data+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6a1b      	ldr	r3, [r3, #32]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	00030228 	.word	0x00030228

000d5154 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <HAL_I2C_Available_Data+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030228 	.word	0x00030228

000d5164 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_I2C_Read_Data+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030228 	.word	0x00030228

000d5174 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_I2C_Peek_Data+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030228 	.word	0x00030228

000d5184 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_I2C_Flush_Data+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030228 	.word	0x00030228

000d5194 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_I2C_Is_Enabled+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	00030228 	.word	0x00030228

000d51a4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_I2C_Init+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030228 	.word	0x00030228

000d51b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <inet_inet_ntop+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	695b      	ldr	r3, [r3, #20]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030264 	.word	0x00030264

000d51c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <netdb_freeaddrinfo+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	689b      	ldr	r3, [r3, #8]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030268 	.word	0x00030268

000d51d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <netdb_getaddrinfo+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	68db      	ldr	r3, [r3, #12]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030268 	.word	0x00030268

000d51e4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <HAL_SPI_Init+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	69db      	ldr	r3, [r3, #28]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030230 	.word	0x00030230

000d51f4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <HAL_SPI_Is_Enabled+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	6a1b      	ldr	r3, [r3, #32]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030230 	.word	0x00030230

000d5204 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <HAL_USART_Init+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	681b      	ldr	r3, [r3, #0]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	0003023c 	.word	0x0003023c

000d5214 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <HAL_USART_Write_Data+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	68db      	ldr	r3, [r3, #12]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	0003023c 	.word	0x0003023c

000d5224 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <HAL_USART_Available_Data+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	691b      	ldr	r3, [r3, #16]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003023c 	.word	0x0003023c

000d5234 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <HAL_USART_Read_Data+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	695b      	ldr	r3, [r3, #20]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003023c 	.word	0x0003023c

000d5244 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <HAL_USART_Peek_Data+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	699b      	ldr	r3, [r3, #24]
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003023c 	.word	0x0003023c

000d5254 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <HAL_USART_Flush_Data+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	69db      	ldr	r3, [r3, #28]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	0003023c 	.word	0x0003023c

000d5264 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <HAL_USART_Is_Enabled+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	6a1b      	ldr	r3, [r3, #32]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	0003023c 	.word	0x0003023c

000d5274 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <HAL_USART_Available_Data_For_Write+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	0003023c 	.word	0x0003023c

000d5284 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <HAL_USB_USART_Init+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	681b      	ldr	r3, [r3, #0]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	0003024c 	.word	0x0003024c

000d5294 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <HAL_USB_USART_Available_Data+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	691b      	ldr	r3, [r3, #16]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	0003024c 	.word	0x0003024c

000d52a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	695b      	ldr	r3, [r3, #20]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	0003024c 	.word	0x0003024c

000d52b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <HAL_USB_USART_Receive_Data+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	699b      	ldr	r3, [r3, #24]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	0003024c 	.word	0x0003024c

000d52c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <HAL_USB_USART_Send_Data+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	69db      	ldr	r3, [r3, #28]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	0003024c 	.word	0x0003024c

000d52d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <HAL_USB_USART_Flush_Data+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6a1b      	ldr	r3, [r3, #32]
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	0003024c 	.word	0x0003024c

000d52e4 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <wlan_connected_info+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	00030274 	.word	0x00030274

000d52f4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <panic_+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030260 	.word	0x00030260

000d5304 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <system_mode+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	681b      	ldr	r3, [r3, #0]
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030220 	.word	0x00030220

000d5314 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <set_system_mode+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	685b      	ldr	r3, [r3, #4]
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030220 	.word	0x00030220

000d5324 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <system_delay_ms+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	695b      	ldr	r3, [r3, #20]
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	00030220 	.word	0x00030220

000d5334 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <application_thread_current+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030220 	.word	0x00030220

000d5344 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <application_thread_invoke+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030220 	.word	0x00030220

000d5354 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <system_thread_get_state+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030220 	.word	0x00030220

000d5364 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b03      	ldr	r3, [pc, #12]	; (d5374 <system_ctrl_set_app_request_handler+0x10>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d536e:	9301      	str	r3, [sp, #4]
   d5370:	bd08      	pop	{r3, pc}
   d5372:	0000      	.short	0x0000
   d5374:	00030220 	.word	0x00030220

000d5378 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b03      	ldr	r3, [pc, #12]	; (d5388 <system_ctrl_set_result+0x10>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5382:	9301      	str	r3, [sp, #4]
   d5384:	bd08      	pop	{r3, pc}
   d5386:	0000      	.short	0x0000
   d5388:	00030220 	.word	0x00030220

000d538c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <spark_variable+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	681b      	ldr	r3, [r3, #0]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030244 	.word	0x00030244

000d539c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <spark_function+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	685b      	ldr	r3, [r3, #4]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030244 	.word	0x00030244

000d53ac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <spark_process+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	689b      	ldr	r3, [r3, #8]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030244 	.word	0x00030244

000d53bc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <spark_cloud_flag_connected+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	695b      	ldr	r3, [r3, #20]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030244 	.word	0x00030244

000d53cc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <spark_deviceID+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	69db      	ldr	r3, [r3, #28]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030244 	.word	0x00030244

000d53dc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <spark_send_event+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	6a1b      	ldr	r3, [r3, #32]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030244 	.word	0x00030244

000d53ec <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <spark_subscribe+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030244 	.word	0x00030244

000d53fc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <spark_sync_time+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030244 	.word	0x00030244

000d540c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <spark_sync_time_pending+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030244 	.word	0x00030244

000d541c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030244 	.word	0x00030244

000d542c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <network_connect+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	685b      	ldr	r3, [r3, #4]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030240 	.word	0x00030240

000d543c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <network_connecting+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	689b      	ldr	r3, [r3, #8]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030240 	.word	0x00030240

000d544c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <network_disconnect+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	68db      	ldr	r3, [r3, #12]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030240 	.word	0x00030240

000d545c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <network_ready+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	691b      	ldr	r3, [r3, #16]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030240 	.word	0x00030240

000d546c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <network_on+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	695b      	ldr	r3, [r3, #20]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030240 	.word	0x00030240

000d547c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <network_off+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	699b      	ldr	r3, [r3, #24]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030240 	.word	0x00030240

000d548c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <network_listen+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	69db      	ldr	r3, [r3, #28]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030240 	.word	0x00030240

000d549c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <network_listening+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6a1b      	ldr	r3, [r3, #32]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030240 	.word	0x00030240

000d54ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <network_set_listen_timeout+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030240 	.word	0x00030240

000d54bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <network_get_listen_timeout+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	00030240 	.word	0x00030240

000d54cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <malloc+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	681b      	ldr	r3, [r3, #0]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003021c 	.word	0x0003021c

000d54dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <free+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	685b      	ldr	r3, [r3, #4]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003021c 	.word	0x0003021c

000d54ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <realloc+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	689b      	ldr	r3, [r3, #8]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003021c 	.word	0x0003021c

000d54fc <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <siscanf+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	699b      	ldr	r3, [r3, #24]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003021c 	.word	0x0003021c

000d550c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <snprintf+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	69db      	ldr	r3, [r3, #28]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003021c 	.word	0x0003021c

000d551c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <abort+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	0003021c 	.word	0x0003021c

000d552c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <_malloc_r+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	0003021c 	.word	0x0003021c

000d553c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d553c:	2100      	movs	r1, #0
   d553e:	f7ff bef1 	b.w	d5324 <system_delay_ms>

000d5542 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5542:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5544:	6883      	ldr	r3, [r0, #8]
   d5546:	4604      	mov	r4, r0
   d5548:	b90b      	cbnz	r3, d554e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d554a:	f001 f9f0 	bl	d692e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d554e:	68c3      	ldr	r3, [r0, #12]
   d5550:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5552:	68a3      	ldr	r3, [r4, #8]
   d5554:	b11b      	cbz	r3, d555e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5556:	2203      	movs	r2, #3
   d5558:	4621      	mov	r1, r4
   d555a:	4620      	mov	r0, r4
   d555c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d555e:	4620      	mov	r0, r4
   d5560:	2110      	movs	r1, #16
}
   d5562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5566:	f001 b9e0 	b.w	d692a <_ZdlPvj>

000d556a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d556a:	4770      	bx	lr

000d556c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d556c:	2000      	movs	r0, #0
   d556e:	4770      	bx	lr

000d5570 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5570:	b510      	push	{r4, lr}
   d5572:	2110      	movs	r1, #16
   d5574:	4604      	mov	r4, r0
   d5576:	f001 f9d8 	bl	d692a <_ZdlPvj>
   d557a:	4620      	mov	r0, r4
   d557c:	bd10      	pop	{r4, pc}

000d557e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d557e:	b508      	push	{r3, lr}
      { delete this; }
   d5580:	b108      	cbz	r0, d5586 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5582:	f7ff fff5 	bl	d5570 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5586:	bd08      	pop	{r3, pc}

000d5588 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5588:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d558a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d558c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d558e:	b113      	cbz	r3, d5596 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5590:	2203      	movs	r2, #3
   d5592:	4601      	mov	r1, r0
   d5594:	4798      	blx	r3
    }
   d5596:	4620      	mov	r0, r4
   d5598:	bd10      	pop	{r4, pc}

000d559a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d559a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d559c:	68c4      	ldr	r4, [r0, #12]
   d559e:	b1ec      	cbz	r4, d55dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d55a0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d55a2:	2b02      	cmp	r3, #2
   d55a4:	d102      	bne.n	d55ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d55a6:	68e0      	ldr	r0, [r4, #12]
   d55a8:	f7ff ff98 	bl	d54dc <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d55ac:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d55ae:	b135      	cbz	r5, d55be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55b0:	4628      	mov	r0, r5
   d55b2:	f7ff ffe9 	bl	d5588 <_ZNSt14_Function_baseD1Ev>
   d55b6:	2110      	movs	r1, #16
   d55b8:	4628      	mov	r0, r5
   d55ba:	f001 f9b6 	bl	d692a <_ZdlPvj>
   d55be:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d55c0:	b135      	cbz	r5, d55d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d55c2:	4628      	mov	r0, r5
   d55c4:	f7ff ffe0 	bl	d5588 <_ZNSt14_Function_baseD1Ev>
   d55c8:	2110      	movs	r1, #16
   d55ca:	4628      	mov	r0, r5
   d55cc:	f001 f9ad 	bl	d692a <_ZdlPvj>
   d55d0:	4620      	mov	r0, r4
   d55d2:	2114      	movs	r1, #20
   d55d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d55d8:	f001 b9a7 	b.w	d692a <_ZdlPvj>
   d55dc:	bd38      	pop	{r3, r4, r5, pc}

000d55de <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d55de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d55e0:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d55e2:	4668      	mov	r0, sp
   d55e4:	f000 fdca 	bl	d617c <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d55e8:	68a3      	ldr	r3, [r4, #8]
   d55ea:	b90b      	cbnz	r3, d55f0 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d55ec:	f001 f99f 	bl	d692e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d55f0:	68e3      	ldr	r3, [r4, #12]
   d55f2:	4669      	mov	r1, sp
   d55f4:	4620      	mov	r0, r4
   d55f6:	4798      	blx	r3
   d55f8:	4604      	mov	r4, r0
   d55fa:	4668      	mov	r0, sp
   d55fc:	f000 fd77 	bl	d60ee <_ZN6StringD1Ev>
}
   d5600:	4620      	mov	r0, r4
   d5602:	b004      	add	sp, #16
   d5604:	bd10      	pop	{r4, pc}

000d5606 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5606:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5608:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d560a:	b085      	sub	sp, #20
   d560c:	4607      	mov	r7, r0
   d560e:	460e      	mov	r6, r1
   d5610:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5612:	2100      	movs	r1, #0
   d5614:	4622      	mov	r2, r4
   d5616:	4668      	mov	r0, sp
   d5618:	f002 f803 	bl	d7622 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d561c:	2200      	movs	r2, #0
   d561e:	4669      	mov	r1, sp
   d5620:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5622:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d5626:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5628:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d562a:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d562c:	f7ff feb6 	bl	d539c <spark_function>
}
   d5630:	b005      	add	sp, #20
   d5632:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5634 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5634:	b513      	push	{r0, r1, r4, lr}
   d5636:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5638:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d563c:	2300      	movs	r3, #0
   d563e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5640:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5642:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5644:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5646:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5648:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d564a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d564c:	f7fe fdba 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5650:	4620      	mov	r0, r4
   d5652:	b002      	add	sp, #8
   d5654:	bd10      	pop	{r4, pc}

000d5656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5656:	680b      	ldr	r3, [r1, #0]
   d5658:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d565a:	b113      	cbz	r3, d5662 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d565c:	685a      	ldr	r2, [r3, #4]
   d565e:	3201      	adds	r2, #1
   d5660:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5662:	4770      	bx	lr

000d5664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5666:	460c      	mov	r4, r1
   d5668:	ad02      	add	r5, sp, #8
   d566a:	f854 3b04 	ldr.w	r3, [r4], #4
   d566e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5672:	4606      	mov	r6, r0
   d5674:	460f      	mov	r7, r1
   d5676:	a801      	add	r0, sp, #4
   d5678:	4621      	mov	r1, r4
   d567a:	f7ff ffec 	bl	d5656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d567e:	4629      	mov	r1, r5
   d5680:	4630      	mov	r0, r6
   d5682:	f7ff ffd7 	bl	d5634 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5686:	a801      	add	r0, sp, #4
   d5688:	f7fe fd9c 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d568c:	4620      	mov	r0, r4
   d568e:	f7fe fd99 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5692:	4638      	mov	r0, r7
   d5694:	2108      	movs	r1, #8
   d5696:	f001 f948 	bl	d692a <_ZdlPvj>
        return p;
    }
   d569a:	4630      	mov	r0, r6
   d569c:	b003      	add	sp, #12
   d569e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56a0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d56a0:	b513      	push	{r0, r1, r4, lr}
   d56a2:	460b      	mov	r3, r1
   d56a4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56a6:	c803      	ldmia	r0, {r0, r1}
   d56a8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d56ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   d56b0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d56b4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d56b8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d56bc:	b002      	add	sp, #8
   d56be:	bd10      	pop	{r4, pc}

000d56c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56c0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d56c2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56c4:	b90a      	cbnz	r2, d56ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d56c6:	f001 f932 	bl	d692e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56ca:	68c3      	ldr	r3, [r0, #12]
    }
   d56cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56d0:	4718      	bx	r3

000d56d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d56d2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d56d4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d56d6:	f100 0110 	add.w	r1, r0, #16
   d56da:	f7ff fff1 	bl	d56c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d56de:	bd08      	pop	{r3, pc}

000d56e0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56e0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d56e2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56e4:	b90a      	cbnz	r2, d56ea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d56e6:	f001 f922 	bl	d692e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56ea:	68c3      	ldr	r3, [r0, #12]
    }
   d56ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56f0:	4718      	bx	r3

000d56f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d56f2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d56f4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d56f6:	f100 0110 	add.w	r1, r0, #16
   d56fa:	f7ff fff1 	bl	d56e0 <_ZNKSt8functionIFvRKbEEclES1_>
   d56fe:	bd08      	pop	{r3, pc}

000d5700 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5700:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5702:	2300      	movs	r3, #0
   d5704:	6083      	str	r3, [r0, #8]
   d5706:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5708:	4604      	mov	r4, r0
   d570a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d570c:	b12b      	cbz	r3, d571a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d570e:	2202      	movs	r2, #2
   d5710:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5712:	68eb      	ldr	r3, [r5, #12]
   d5714:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5716:	68ab      	ldr	r3, [r5, #8]
   d5718:	60a3      	str	r3, [r4, #8]
	}
    }
   d571a:	4620      	mov	r0, r4
   d571c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5720 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5724:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5728:	b086      	sub	sp, #24
   d572a:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d572c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5730:	808b      	strh	r3, [r1, #4]
   d5732:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5734:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5736:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d573a:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d573c:	f04f 0002 	mov.w	r0, #2
   d5740:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5744:	4299      	cmp	r1, r3
   d5746:	d103      	bne.n	d5750 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5748:	e8c4 0f45 	strexb	r5, r0, [r4]
   d574c:	2d00      	cmp	r5, #0
   d574e:	d1f7      	bne.n	d5740 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5750:	d002      	beq.n	d5758 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5752:	f88d 1000 	strb.w	r1, [sp]
   d5756:	e06b      	b.n	d5830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5758:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d575c:	bf1e      	ittt	ne
   d575e:	60e7      	strne	r7, [r4, #12]
   d5760:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5762:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5764:	2301      	movs	r3, #1
   d5766:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d576a:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d576c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d576e:	f104 0308 	add.w	r3, r4, #8
   d5772:	f3bf 8f5f 	dmb	sy
   d5776:	e853 6f00 	ldrex	r6, [r3]
   d577a:	e843 0200 	strex	r2, r0, [r3]
   d577e:	2a00      	cmp	r2, #0
   d5780:	d1f9      	bne.n	d5776 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5782:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5786:	2e00      	cmp	r6, #0
   d5788:	d052      	beq.n	d5830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d578a:	f7ff fdd3 	bl	d5334 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d578e:	b120      	cbz	r0, d579a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5790:	4629      	mov	r1, r5
   d5792:	4630      	mov	r0, r6
   d5794:	f7ff ff94 	bl	d56c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5798:	e043      	b.n	d5822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d579a:	4631      	mov	r1, r6
   d579c:	4668      	mov	r0, sp
   d579e:	f7ff ffaf 	bl	d5700 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d57a2:	68e0      	ldr	r0, [r4, #12]
   d57a4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d57a8:	b108      	cbz	r0, d57ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d57aa:	f001 ff7d 	bl	d76a8 <strdup>
   d57ae:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d57b0:	2010      	movs	r0, #16
   d57b2:	f8ad 5014 	strh.w	r5, [sp, #20]
   d57b6:	f7fe fc6e 	bl	d4096 <_Znwj>
   d57ba:	4605      	mov	r5, r0
   d57bc:	b330      	cbz	r0, d580c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57be:	f04f 0800 	mov.w	r8, #0
   d57c2:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d57c6:	2018      	movs	r0, #24
   d57c8:	f7fe fc65 	bl	d4096 <_Znwj>
   d57cc:	4604      	mov	r4, r0
   d57ce:	b1c0      	cbz	r0, d5802 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57d0:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d57d4:	4601      	mov	r1, r0
   d57d6:	4668      	mov	r0, sp
   d57d8:	f7ff ff62 	bl	d56a0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57dc:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d57de:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57e0:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57e2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d57e4:	9202      	str	r2, [sp, #8]
   d57e6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d57e8:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d57ee:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d57f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d57f4:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57f8:	9b04      	ldr	r3, [sp, #16]
   d57fa:	9203      	str	r2, [sp, #12]
   d57fc:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d57fe:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5802:	4b0e      	ldr	r3, [pc, #56]	; (d583c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5804:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5806:	4b0e      	ldr	r3, [pc, #56]	; (d5840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5808:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d580a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d580c:	9804      	ldr	r0, [sp, #16]
   d580e:	f7ff fe65 	bl	d54dc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5812:	4668      	mov	r0, sp
   d5814:	f7ff feb8 	bl	d5588 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5818:	2200      	movs	r2, #0
   d581a:	4629      	mov	r1, r5
   d581c:	4809      	ldr	r0, [pc, #36]	; (d5844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d581e:	f7ff fd91 	bl	d5344 <application_thread_invoke>
   d5822:	4630      	mov	r0, r6
   d5824:	f7ff feb0 	bl	d5588 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5828:	2110      	movs	r1, #16
   d582a:	4630      	mov	r0, r6
   d582c:	f001 f87d 	bl	d692a <_ZdlPvj>
   d5830:	4638      	mov	r0, r7
   d5832:	f7ff fe53 	bl	d54dc <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5836:	b006      	add	sp, #24
   d5838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d583c:	000d56d3 	.word	0x000d56d3
   d5840:	000d5931 	.word	0x000d5931
   d5844:	000d5543 	.word	0x000d5543

000d5848 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d584c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d584e:	ad07      	add	r5, sp, #28
   d5850:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5854:	4606      	mov	r6, r0
   d5856:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5858:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d585a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d585c:	460f      	mov	r7, r1
   d585e:	4690      	mov	r8, r2
   d5860:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5864:	f8c5 b004 	str.w	fp, [r5, #4]
   d5868:	f8c5 b008 	str.w	fp, [r5, #8]
   d586c:	9307      	str	r3, [sp, #28]
   d586e:	f7fe fc12 	bl	d4096 <_Znwj>
   d5872:	4604      	mov	r4, r0
   d5874:	b138      	cbz	r0, d5886 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5876:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d587a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d587e:	f8c0 b004 	str.w	fp, [r0, #4]
   d5882:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5886:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5888:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d588a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d588c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d588e:	f7fe fc02 	bl	d4096 <_Znwj>
   d5892:	b128      	cbz	r0, d58a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5894:	2301      	movs	r3, #1
   d5896:	6043      	str	r3, [r0, #4]
   d5898:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d589a:	4b23      	ldr	r3, [pc, #140]	; (d5928 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d589c:	6003      	str	r3, [r0, #0]
   d589e:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58a0:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d58a2:	4b22      	ldr	r3, [pc, #136]	; (d592c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d58a4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d58a6:	2008      	movs	r0, #8
   d58a8:	f7fe fbf5 	bl	d4096 <_Znwj>
   d58ac:	4604      	mov	r4, r0
   d58ae:	b128      	cbz	r0, d58bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58b0:	9b03      	ldr	r3, [sp, #12]
   d58b2:	f840 3b04 	str.w	r3, [r0], #4
   d58b6:	a904      	add	r1, sp, #16
   d58b8:	f7ff fecd 	bl	d5656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d58bc:	9500      	str	r5, [sp, #0]
   d58be:	fa5f f38a 	uxtb.w	r3, sl
   d58c2:	464a      	mov	r2, r9
   d58c4:	4641      	mov	r1, r8
   d58c6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d58c8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d58ca:	f7ff fd87 	bl	d53dc <spark_send_event>
   d58ce:	b9b8      	cbnz	r0, d5900 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d58d0:	9b03      	ldr	r3, [sp, #12]
   d58d2:	785b      	ldrb	r3, [r3, #1]
   d58d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d58d8:	b993      	cbnz	r3, d5900 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d58da:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d58de:	a905      	add	r1, sp, #20
   d58e0:	a803      	add	r0, sp, #12
   d58e2:	9205      	str	r2, [sp, #20]
   d58e4:	f8ad 3018 	strh.w	r3, [sp, #24]
   d58e8:	f7ff ff1a 	bl	d5720 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d58ec:	9805      	ldr	r0, [sp, #20]
   d58ee:	f7ff fdf5 	bl	d54dc <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d58f2:	a805      	add	r0, sp, #20
   d58f4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d58f6:	f7ff feb5 	bl	d5664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58fa:	a806      	add	r0, sp, #24
   d58fc:	f7fe fc62 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5900:	9b03      	ldr	r3, [sp, #12]
   d5902:	9305      	str	r3, [sp, #20]
   d5904:	a904      	add	r1, sp, #16
   d5906:	a806      	add	r0, sp, #24
   d5908:	f7ff fea5 	bl	d5656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d590c:	a905      	add	r1, sp, #20
   d590e:	4630      	mov	r0, r6
   d5910:	f7ff fe90 	bl	d5634 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5914:	a806      	add	r0, sp, #24
   d5916:	f7fe fc55 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d591a:	a804      	add	r0, sp, #16
   d591c:	f7fe fc52 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5920:	4630      	mov	r0, r6
   d5922:	b00b      	add	sp, #44	; 0x2c
   d5924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5928:	000d81fc 	.word	0x000d81fc
   d592c:	000d5a9d 	.word	0x000d5a9d

000d5930 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5930:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5934:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5936:	d006      	beq.n	d5946 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5938:	2a03      	cmp	r2, #3
   d593a:	d017      	beq.n	d596c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d593c:	2a01      	cmp	r2, #1
   d593e:	d121      	bne.n	d5984 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5940:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5942:	6003      	str	r3, [r0, #0]
	      break;
   d5944:	e01e      	b.n	d5984 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5946:	2018      	movs	r0, #24
   d5948:	680e      	ldr	r6, [r1, #0]
   d594a:	f7fe fba4 	bl	d4096 <_Znwj>
   d594e:	4605      	mov	r5, r0
   d5950:	b150      	cbz	r0, d5968 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5952:	4631      	mov	r1, r6
   d5954:	f7ff fed4 	bl	d5700 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5958:	6930      	ldr	r0, [r6, #16]
   d595a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d595e:	b108      	cbz	r0, d5964 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5960:	f001 fea2 	bl	d76a8 <strdup>
   d5964:	6128      	str	r0, [r5, #16]
   d5966:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5968:	6025      	str	r5, [r4, #0]
   d596a:	e00b      	b.n	d5984 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d596c:	6804      	ldr	r4, [r0, #0]
   d596e:	b14c      	cbz	r4, d5984 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5970:	6920      	ldr	r0, [r4, #16]
   d5972:	f7ff fdb3 	bl	d54dc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5976:	4620      	mov	r0, r4
   d5978:	f7ff fe06 	bl	d5588 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d597c:	2118      	movs	r1, #24
   d597e:	4620      	mov	r0, r4
   d5980:	f000 ffd3 	bl	d692a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5984:	2000      	movs	r0, #0
   d5986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5988 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5988:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d598a:	2300      	movs	r3, #0
   d598c:	6083      	str	r3, [r0, #8]
   d598e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5990:	4604      	mov	r4, r0
   d5992:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5994:	b12b      	cbz	r3, d59a2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5996:	2202      	movs	r2, #2
   d5998:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d599a:	68eb      	ldr	r3, [r5, #12]
   d599c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d599e:	68ab      	ldr	r3, [r5, #8]
   d59a0:	60a3      	str	r3, [r4, #8]
	}
    }
   d59a2:	4620      	mov	r0, r4
   d59a4:	bd38      	pop	{r3, r4, r5, pc}

000d59a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d59a6:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d59a8:	b570      	push	{r4, r5, r6, lr}
   d59aa:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d59ac:	d006      	beq.n	d59bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d59ae:	2a03      	cmp	r2, #3
   d59b0:	d011      	beq.n	d59d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d59b2:	2a01      	cmp	r2, #1
   d59b4:	d118      	bne.n	d59e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d59b6:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d59b8:	6003      	str	r3, [r0, #0]
	      break;
   d59ba:	e015      	b.n	d59e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d59bc:	2014      	movs	r0, #20
   d59be:	680e      	ldr	r6, [r1, #0]
   d59c0:	f7fe fb69 	bl	d4096 <_Znwj>
   d59c4:	4605      	mov	r5, r0
   d59c6:	b120      	cbz	r0, d59d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d59c8:	4631      	mov	r1, r6
   d59ca:	f7ff ffdd 	bl	d5988 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d59ce:	7c33      	ldrb	r3, [r6, #16]
   d59d0:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d59d2:	6025      	str	r5, [r4, #0]
   d59d4:	e008      	b.n	d59e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d59d6:	6804      	ldr	r4, [r0, #0]
   d59d8:	b134      	cbz	r4, d59e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59da:	4620      	mov	r0, r4
   d59dc:	f7ff fdd4 	bl	d5588 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d59e0:	2114      	movs	r1, #20
   d59e2:	4620      	mov	r0, r4
   d59e4:	f000 ffa1 	bl	d692a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d59e8:	2000      	movs	r0, #0
   d59ea:	bd70      	pop	{r4, r5, r6, pc}

000d59ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d59ec:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d59ee:	2300      	movs	r3, #0
   d59f0:	b087      	sub	sp, #28
   d59f2:	460c      	mov	r4, r1
   d59f4:	f3bf 8f5f 	dmb	sy
   d59f8:	e850 6f00 	ldrex	r6, [r0]
   d59fc:	e840 3200 	strex	r2, r3, [r0]
   d5a00:	2a00      	cmp	r2, #0
   d5a02:	d1f9      	bne.n	d59f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5a04:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5a08:	2e00      	cmp	r6, #0
   d5a0a:	d03f      	beq.n	d5a8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a0c:	4618      	mov	r0, r3
   d5a0e:	f7ff fc91 	bl	d5334 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5a12:	4607      	mov	r7, r0
   d5a14:	b120      	cbz	r0, d5a20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5a16:	4621      	mov	r1, r4
   d5a18:	4630      	mov	r0, r6
   d5a1a:	f7ff fe61 	bl	d56e0 <_ZNKSt8functionIFvRKbEEclES1_>
   d5a1e:	e02e      	b.n	d5a7e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a20:	4631      	mov	r1, r6
   d5a22:	a801      	add	r0, sp, #4
   d5a24:	f7ff ffb0 	bl	d5988 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a28:	7823      	ldrb	r3, [r4, #0]
   d5a2a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a2e:	2010      	movs	r0, #16
   d5a30:	f7fe fb31 	bl	d4096 <_Znwj>
   d5a34:	4605      	mov	r5, r0
   d5a36:	b1d0      	cbz	r0, d5a6e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a38:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a3a:	2014      	movs	r0, #20
   d5a3c:	f7fe fb2b 	bl	d4096 <_Znwj>
   d5a40:	4604      	mov	r4, r0
   d5a42:	b178      	cbz	r0, d5a64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a44:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a46:	4601      	mov	r1, r0
   d5a48:	a801      	add	r0, sp, #4
   d5a4a:	f7ff fe29 	bl	d56a0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a4e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5a50:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a52:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a54:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a56:	9203      	str	r2, [sp, #12]
   d5a58:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a5a:	60e3      	str	r3, [r4, #12]
   d5a5c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a60:	9204      	str	r2, [sp, #16]
   d5a62:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a64:	4b0a      	ldr	r3, [pc, #40]	; (d5a90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5a66:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a68:	4b0a      	ldr	r3, [pc, #40]	; (d5a94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a6a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a6c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a6e:	a801      	add	r0, sp, #4
   d5a70:	f7ff fd8a 	bl	d5588 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a74:	2200      	movs	r2, #0
   d5a76:	4629      	mov	r1, r5
   d5a78:	4807      	ldr	r0, [pc, #28]	; (d5a98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5a7a:	f7ff fc63 	bl	d5344 <application_thread_invoke>
   d5a7e:	4630      	mov	r0, r6
   d5a80:	f7ff fd82 	bl	d5588 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a84:	2110      	movs	r1, #16
   d5a86:	4630      	mov	r0, r6
   d5a88:	f000 ff4f 	bl	d692a <_ZdlPvj>
        }
    }
   d5a8c:	b007      	add	sp, #28
   d5a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a90:	000d56f3 	.word	0x000d56f3
   d5a94:	000d59a7 	.word	0x000d59a7
   d5a98:	000d5543 	.word	0x000d5543

000d5a9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5a9c:	b530      	push	{r4, r5, lr}
   d5a9e:	b085      	sub	sp, #20
   d5aa0:	4604      	mov	r4, r0
   d5aa2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5aa4:	4668      	mov	r0, sp
   d5aa6:	4611      	mov	r1, r2
   d5aa8:	f7ff fddc 	bl	d5664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5aac:	b17c      	cbz	r4, d5ace <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5aae:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5ab0:	4628      	mov	r0, r5
   d5ab2:	b10d      	cbz	r5, d5ab8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5ab4:	f001 fdf8 	bl	d76a8 <strdup>
   d5ab8:	9002      	str	r0, [sp, #8]
   d5aba:	a902      	add	r1, sp, #8
   d5abc:	4668      	mov	r0, sp
   d5abe:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5ac2:	f7ff fe2d 	bl	d5720 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5ac6:	9802      	ldr	r0, [sp, #8]
   d5ac8:	f7ff fd08 	bl	d54dc <free>
   d5acc:	e01d      	b.n	d5b0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5ace:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5ad0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5ad4:	f04f 0201 	mov.w	r2, #1
   d5ad8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5adc:	42a3      	cmp	r3, r4
   d5ade:	d103      	bne.n	d5ae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5ae0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5ae4:	2900      	cmp	r1, #0
   d5ae6:	d1f7      	bne.n	d5ad8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5ae8:	d002      	beq.n	d5af0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5aea:	f88d 3008 	strb.w	r3, [sp, #8]
   d5aee:	e00c      	b.n	d5b0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5af0:	f110 010c 	adds.w	r1, r0, #12
   d5af4:	f04f 0301 	mov.w	r3, #1
   d5af8:	bf18      	it	ne
   d5afa:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5afc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5b00:	3004      	adds	r0, #4
   d5b02:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5b06:	f7ff ff71 	bl	d59ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5b0a:	a801      	add	r0, sp, #4
   d5b0c:	f7fe fb5a 	bl	d41c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5b10:	b005      	add	sp, #20
   d5b12:	bd30      	pop	{r4, r5, pc}

000d5b14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b14:	2200      	movs	r2, #0
   d5b16:	4611      	mov	r1, r2
   d5b18:	6840      	ldr	r0, [r0, #4]
   d5b1a:	f7ff bcbf 	b.w	d549c <network_listening>

000d5b1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b1e:	2200      	movs	r2, #0
   d5b20:	4611      	mov	r1, r2
   d5b22:	6840      	ldr	r0, [r0, #4]
   d5b24:	f7ff bcca 	b.w	d54bc <network_get_listen_timeout>

000d5b28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b28:	2200      	movs	r2, #0
   d5b2a:	6840      	ldr	r0, [r0, #4]
   d5b2c:	f7ff bcbe 	b.w	d54ac <network_set_listen_timeout>

000d5b30 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b30:	2200      	movs	r2, #0
   d5b32:	f081 0101 	eor.w	r1, r1, #1
   d5b36:	6840      	ldr	r0, [r0, #4]
   d5b38:	f7ff bca8 	b.w	d548c <network_listen>

000d5b3c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b3c:	2300      	movs	r3, #0
   d5b3e:	461a      	mov	r2, r3
   d5b40:	4619      	mov	r1, r3
   d5b42:	6840      	ldr	r0, [r0, #4]
   d5b44:	f7ff bc9a 	b.w	d547c <network_off>

000d5b48 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b48:	2300      	movs	r3, #0
   d5b4a:	461a      	mov	r2, r3
   d5b4c:	4619      	mov	r1, r3
   d5b4e:	6840      	ldr	r0, [r0, #4]
   d5b50:	f7ff bc8c 	b.w	d546c <network_on>

000d5b54 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b54:	2200      	movs	r2, #0
   d5b56:	4611      	mov	r1, r2
   d5b58:	6840      	ldr	r0, [r0, #4]
   d5b5a:	f7ff bc7f 	b.w	d545c <network_ready>

000d5b5e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b5e:	2200      	movs	r2, #0
   d5b60:	4611      	mov	r1, r2
   d5b62:	6840      	ldr	r0, [r0, #4]
   d5b64:	f7ff bc6a 	b.w	d543c <network_connecting>

000d5b68 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b68:	2200      	movs	r2, #0
   d5b6a:	2102      	movs	r1, #2
   d5b6c:	6840      	ldr	r0, [r0, #4]
   d5b6e:	f7ff bc6d 	b.w	d544c <network_disconnect>

000d5b72 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b72:	2300      	movs	r3, #0
   d5b74:	461a      	mov	r2, r3
   d5b76:	6840      	ldr	r0, [r0, #4]
   d5b78:	f7ff bc58 	b.w	d542c <network_connect>

000d5b7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b7c:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b7e:	2203      	movs	r2, #3
   d5b80:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b82:	4a02      	ldr	r2, [pc, #8]	; (d5b8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b84:	601a      	str	r2, [r3, #0]
   d5b86:	4770      	bx	lr
   d5b88:	2003e378 	.word	0x2003e378
   d5b8c:	000d8218 	.word	0x000d8218

000d5b90 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5b90:	4770      	bx	lr

000d5b92 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b94:	4606      	mov	r6, r0
   d5b96:	4615      	mov	r5, r2
   d5b98:	460c      	mov	r4, r1
   d5b9a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b9c:	42bc      	cmp	r4, r7
   d5b9e:	d006      	beq.n	d5bae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5ba0:	6833      	ldr	r3, [r6, #0]
   d5ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5ba6:	689b      	ldr	r3, [r3, #8]
   d5ba8:	4630      	mov	r0, r6
   d5baa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5bac:	e7f6      	b.n	d5b9c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5bae:	4628      	mov	r0, r5
   d5bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5bb2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5bb2:	2200      	movs	r2, #0
   d5bb4:	7c00      	ldrb	r0, [r0, #16]
   d5bb6:	f7ff bac5 	b.w	d5144 <HAL_I2C_Write_Data>

000d5bba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5bba:	2100      	movs	r1, #0
   d5bbc:	7c00      	ldrb	r0, [r0, #16]
   d5bbe:	f7ff bac9 	b.w	d5154 <HAL_I2C_Available_Data>

000d5bc2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5bc2:	2100      	movs	r1, #0
   d5bc4:	7c00      	ldrb	r0, [r0, #16]
   d5bc6:	f7ff bacd 	b.w	d5164 <HAL_I2C_Read_Data>

000d5bca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5bca:	2100      	movs	r1, #0
   d5bcc:	7c00      	ldrb	r0, [r0, #16]
   d5bce:	f7ff bad1 	b.w	d5174 <HAL_I2C_Peek_Data>

000d5bd2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5bd2:	2100      	movs	r1, #0
   d5bd4:	7c00      	ldrb	r0, [r0, #16]
   d5bd6:	f7ff bad5 	b.w	d5184 <HAL_I2C_Flush_Data>

000d5bda <_ZN7TwoWireD0Ev>:
   d5bda:	b510      	push	{r4, lr}
   d5bdc:	2114      	movs	r1, #20
   d5bde:	4604      	mov	r4, r0
   d5be0:	f000 fea3 	bl	d692a <_ZdlPvj>
   d5be4:	4620      	mov	r0, r4
   d5be6:	bd10      	pop	{r4, pc}

000d5be8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5be8:	b510      	push	{r4, lr}
   d5bea:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5bf0:	4608      	mov	r0, r1
   d5bf2:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5bf4:	2100      	movs	r1, #0
   d5bf6:	4b04      	ldr	r3, [pc, #16]	; (d5c08 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5bf8:	7420      	strb	r0, [r4, #16]
   d5bfa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5bfc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5bfe:	f7ff fad1 	bl	d51a4 <HAL_I2C_Init>

}
   d5c02:	4620      	mov	r0, r4
   d5c04:	bd10      	pop	{r4, pc}
   d5c06:	bf00      	nop
   d5c08:	000d824c 	.word	0x000d824c

000d5c0c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5c0c:	2100      	movs	r1, #0
   d5c0e:	7c00      	ldrb	r0, [r0, #16]
   d5c10:	f7ff bac0 	b.w	d5194 <HAL_I2C_Is_Enabled>

000d5c14 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5c14:	f7ff ba86 	b.w	d5124 <HAL_Interrupts_Disable_All>

000d5c18 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5c18:	f7ff ba7c 	b.w	d5114 <HAL_Interrupts_Enable_All>

000d5c1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5c1c:	4770      	bx	lr

000d5c1e <_ZN9IPAddressD0Ev>:
   d5c1e:	b510      	push	{r4, lr}
   d5c20:	2118      	movs	r1, #24
   d5c22:	4604      	mov	r4, r0
   d5c24:	f000 fe81 	bl	d692a <_ZdlPvj>
   d5c28:	4620      	mov	r0, r4
   d5c2a:	bd10      	pop	{r4, pc}

000d5c2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5c2e:	7d03      	ldrb	r3, [r0, #20]
   d5c30:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5c32:	b08d      	sub	sp, #52	; 0x34
   d5c34:	460e      	mov	r6, r1
   d5c36:	f100 0704 	add.w	r7, r0, #4
   d5c3a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5c3e:	d002      	beq.n	d5c46 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5c40:	f100 0508 	add.w	r5, r0, #8
   d5c44:	e018      	b.n	d5c78 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5c46:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c48:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5c4a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5c4e:	232f      	movs	r3, #47	; 0x2f
   d5c50:	462a      	mov	r2, r5
   d5c52:	200a      	movs	r0, #10
   d5c54:	f7ff faae 	bl	d51b4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c58:	4628      	mov	r0, r5
   d5c5a:	f001 fd40 	bl	d76de <strlen>
   d5c5e:	6833      	ldr	r3, [r6, #0]
   d5c60:	4602      	mov	r2, r0
   d5c62:	68db      	ldr	r3, [r3, #12]
   d5c64:	4629      	mov	r1, r5
   d5c66:	4630      	mov	r0, r6
   d5c68:	4798      	blx	r3
   d5c6a:	e00f      	b.n	d5c8c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5c6c:	b124      	cbz	r4, d5c78 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5c6e:	212e      	movs	r1, #46	; 0x2e
   d5c70:	4630      	mov	r0, r6
   d5c72:	f000 f9c7 	bl	d6004 <_ZN5Print5printEc>
   d5c76:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5c78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c7c:	220a      	movs	r2, #10
   d5c7e:	4630      	mov	r0, r6
   d5c80:	f000 f9f0 	bl	d6064 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c84:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c86:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c88:	d1f0      	bne.n	d5c6c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c8a:	4620      	mov	r0, r4
    }
    return n;
}
   d5c8c:	b00d      	add	sp, #52	; 0x34
   d5c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c90 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5c90:	b510      	push	{r4, lr}
   d5c92:	4b05      	ldr	r3, [pc, #20]	; (d5ca8 <_ZN9IPAddressC1Ev+0x18>)
   d5c94:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c96:	2211      	movs	r2, #17
   d5c98:	f840 3b04 	str.w	r3, [r0], #4
   d5c9c:	2100      	movs	r1, #0
   d5c9e:	f001 fcc0 	bl	d7622 <memset>
{
    clear();
}
   d5ca2:	4620      	mov	r0, r4
   d5ca4:	bd10      	pop	{r4, pc}
   d5ca6:	bf00      	nop
   d5ca8:	000d8274 	.word	0x000d8274

000d5cac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5cac:	4603      	mov	r3, r0
   d5cae:	4a07      	ldr	r2, [pc, #28]	; (d5ccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5cb0:	b510      	push	{r4, lr}
   d5cb2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5cb6:	f101 0210 	add.w	r2, r1, #16
   d5cba:	f851 4b04 	ldr.w	r4, [r1], #4
   d5cbe:	f843 4b04 	str.w	r4, [r3], #4
   d5cc2:	4291      	cmp	r1, r2
   d5cc4:	d1f9      	bne.n	d5cba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5cc6:	780a      	ldrb	r2, [r1, #0]
   d5cc8:	701a      	strb	r2, [r3, #0]
}
   d5cca:	bd10      	pop	{r4, pc}
   d5ccc:	000d8274 	.word	0x000d8274

000d5cd0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5cd0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5cd2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5cd6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5cda:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5cde:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5ce2:	2304      	movs	r3, #4
   d5ce4:	6041      	str	r1, [r0, #4]
   d5ce6:	7503      	strb	r3, [r0, #20]
   d5ce8:	bd10      	pop	{r4, pc}

000d5cea <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5cec:	780d      	ldrb	r5, [r1, #0]
   d5cee:	788b      	ldrb	r3, [r1, #2]
   d5cf0:	784a      	ldrb	r2, [r1, #1]
   d5cf2:	78c9      	ldrb	r1, [r1, #3]
   d5cf4:	9100      	str	r1, [sp, #0]
   d5cf6:	4629      	mov	r1, r5
   d5cf8:	f7ff ffea 	bl	d5cd0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5cfc:	b003      	add	sp, #12
   d5cfe:	bd30      	pop	{r4, r5, pc}

000d5d00 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d00:	4b01      	ldr	r3, [pc, #4]	; (d5d08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d02:	4a02      	ldr	r2, [pc, #8]	; (d5d0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d04:	601a      	str	r2, [r3, #0]
   d5d06:	4770      	bx	lr
   d5d08:	2003e380 	.word	0x2003e380
   d5d0c:	000d8335 	.word	0x000d8335

000d5d10 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d10:	2200      	movs	r2, #0
   d5d12:	4611      	mov	r1, r2
   d5d14:	6840      	ldr	r0, [r0, #4]
   d5d16:	f7ff bbc1 	b.w	d549c <network_listening>

000d5d1a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d1a:	2200      	movs	r2, #0
   d5d1c:	4611      	mov	r1, r2
   d5d1e:	6840      	ldr	r0, [r0, #4]
   d5d20:	f7ff bbcc 	b.w	d54bc <network_get_listen_timeout>

000d5d24 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d24:	2200      	movs	r2, #0
   d5d26:	6840      	ldr	r0, [r0, #4]
   d5d28:	f7ff bbc0 	b.w	d54ac <network_set_listen_timeout>

000d5d2c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d2c:	2200      	movs	r2, #0
   d5d2e:	f081 0101 	eor.w	r1, r1, #1
   d5d32:	6840      	ldr	r0, [r0, #4]
   d5d34:	f7ff bbaa 	b.w	d548c <network_listen>

000d5d38 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5d38:	2300      	movs	r3, #0
   d5d3a:	461a      	mov	r2, r3
   d5d3c:	4619      	mov	r1, r3
   d5d3e:	6840      	ldr	r0, [r0, #4]
   d5d40:	f7ff bb9c 	b.w	d547c <network_off>

000d5d44 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5d44:	2300      	movs	r3, #0
   d5d46:	461a      	mov	r2, r3
   d5d48:	4619      	mov	r1, r3
   d5d4a:	6840      	ldr	r0, [r0, #4]
   d5d4c:	f7ff bb8e 	b.w	d546c <network_on>

000d5d50 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d50:	2200      	movs	r2, #0
   d5d52:	4611      	mov	r1, r2
   d5d54:	6840      	ldr	r0, [r0, #4]
   d5d56:	f7ff bb81 	b.w	d545c <network_ready>

000d5d5a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d5a:	2200      	movs	r2, #0
   d5d5c:	4611      	mov	r1, r2
   d5d5e:	6840      	ldr	r0, [r0, #4]
   d5d60:	f7ff bb6c 	b.w	d543c <network_connecting>

000d5d64 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d64:	2200      	movs	r2, #0
   d5d66:	2102      	movs	r1, #2
   d5d68:	6840      	ldr	r0, [r0, #4]
   d5d6a:	f7ff bb6f 	b.w	d544c <network_disconnect>

000d5d6e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d6e:	2300      	movs	r3, #0
   d5d70:	461a      	mov	r2, r3
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	f7ff bb5a 	b.w	d542c <network_connect>

000d5d78 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5d78:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d7a:	4605      	mov	r5, r0
   d5d7c:	b188      	cbz	r0, d5da2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d7e:	6804      	ldr	r4, [r0, #0]
   d5d80:	b14c      	cbz	r4, d5d96 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5d82:	68a3      	ldr	r3, [r4, #8]
   d5d84:	b11b      	cbz	r3, d5d8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d86:	2203      	movs	r2, #3
   d5d88:	4621      	mov	r1, r4
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d8e:	2110      	movs	r1, #16
   d5d90:	4620      	mov	r0, r4
   d5d92:	f000 fdca 	bl	d692a <_ZdlPvj>
   d5d96:	4628      	mov	r0, r5
   d5d98:	2114      	movs	r1, #20
      }
   d5d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d9e:	f000 bdc4 	b.w	d692a <_ZdlPvj>
   d5da2:	bd38      	pop	{r3, r4, r5, pc}

000d5da4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5da4:	b110      	cbz	r0, d5dac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5da6:	6803      	ldr	r3, [r0, #0]
   d5da8:	685b      	ldr	r3, [r3, #4]
   d5daa:	4718      	bx	r3
   d5dac:	4770      	bx	lr

000d5dae <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5dae:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5db0:	6803      	ldr	r3, [r0, #0]
   d5db2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5db4:	b1bb      	cbz	r3, d5de6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5db6:	6858      	ldr	r0, [r3, #4]
   d5db8:	f7ff f93c 	bl	d5034 <os_thread_is_current>
   d5dbc:	b978      	cbnz	r0, d5dde <_ZN6ThreadD1Ev+0x30>
   d5dbe:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5dc0:	7c5a      	ldrb	r2, [r3, #17]
   d5dc2:	b912      	cbnz	r2, d5dca <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5dc4:	6858      	ldr	r0, [r3, #4]
   d5dc6:	f7ff f93d 	bl	d5044 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5dca:	6823      	ldr	r3, [r4, #0]
   d5dcc:	6858      	ldr	r0, [r3, #4]
   d5dce:	f7ff f941 	bl	d5054 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dd2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5dd4:	2300      	movs	r3, #0
   d5dd6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5dd8:	b128      	cbz	r0, d5de6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5dda:	f7ff ffcd 	bl	d5d78 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5dde:	6820      	ldr	r0, [r4, #0]
   d5de0:	b108      	cbz	r0, d5de6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5de2:	f7ff ffc9 	bl	d5d78 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5de6:	4620      	mov	r0, r4
   d5de8:	bd10      	pop	{r4, pc}
	...

000d5dec <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5dec:	b538      	push	{r3, r4, r5, lr}
   d5dee:	4b0c      	ldr	r3, [pc, #48]	; (d5e20 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5df0:	6003      	str	r3, [r0, #0]
   d5df2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5df4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5df8:	b108      	cbz	r0, d5dfe <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5dfa:	f7fe f950 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5dfe:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5e02:	b135      	cbz	r5, d5e12 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e04:	4628      	mov	r0, r5
   d5e06:	f7ff ffd2 	bl	d5dae <_ZN6ThreadD1Ev>
   d5e0a:	2104      	movs	r1, #4
   d5e0c:	4628      	mov	r0, r5
   d5e0e:	f000 fd8c 	bl	d692a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e12:	68a0      	ldr	r0, [r4, #8]
   d5e14:	b108      	cbz	r0, d5e1a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5e16:	f7ff ffc5 	bl	d5da4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	bd38      	pop	{r3, r4, r5, pc}
   d5e1e:	bf00      	nop
   d5e20:	000d8368 	.word	0x000d8368

000d5e24 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5e24:	b538      	push	{r3, r4, r5, lr}
   d5e26:	4c0d      	ldr	r4, [pc, #52]	; (d5e5c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5e28:	4b0d      	ldr	r3, [pc, #52]	; (d5e60 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5e2a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5e2c:	2500      	movs	r5, #0
   d5e2e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5e30:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5e34:	6063      	str	r3, [r4, #4]
   d5e36:	60a5      	str	r5, [r4, #8]
   d5e38:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e3c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5e40:	f7ff f918 	bl	d5074 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5e44:	4b07      	ldr	r3, [pc, #28]	; (d5e64 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5e46:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5e4a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	4a06      	ldr	r2, [pc, #24]	; (d5e68 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5e50:	4906      	ldr	r1, [pc, #24]	; (d5e6c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5e56:	f000 bd63 	b.w	d6920 <__aeabi_atexit>
   d5e5a:	bf00      	nop
   d5e5c:	2003e384 	.word	0x2003e384
   d5e60:	000d839c 	.word	0x000d839c
   d5e64:	000d8368 	.word	0x000d8368
   d5e68:	2003e2e4 	.word	0x2003e2e4
   d5e6c:	000d5ded 	.word	0x000d5ded

000d5e70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e70:	2300      	movs	r3, #0
   d5e72:	461a      	mov	r2, r3
   d5e74:	6840      	ldr	r0, [r0, #4]
   d5e76:	f7ff bad9 	b.w	d542c <network_connect>

000d5e7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5e7a:	2200      	movs	r2, #0
   d5e7c:	2102      	movs	r1, #2
   d5e7e:	6840      	ldr	r0, [r0, #4]
   d5e80:	f7ff bae4 	b.w	d544c <network_disconnect>

000d5e84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e84:	2200      	movs	r2, #0
   d5e86:	4611      	mov	r1, r2
   d5e88:	6840      	ldr	r0, [r0, #4]
   d5e8a:	f7ff bad7 	b.w	d543c <network_connecting>

000d5e8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5e8e:	2200      	movs	r2, #0
   d5e90:	4611      	mov	r1, r2
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	f7ff bae2 	b.w	d545c <network_ready>

000d5e98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e98:	2300      	movs	r3, #0
   d5e9a:	461a      	mov	r2, r3
   d5e9c:	4619      	mov	r1, r3
   d5e9e:	6840      	ldr	r0, [r0, #4]
   d5ea0:	f7ff bae4 	b.w	d546c <network_on>

000d5ea4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ea4:	2300      	movs	r3, #0
   d5ea6:	461a      	mov	r2, r3
   d5ea8:	4619      	mov	r1, r3
   d5eaa:	6840      	ldr	r0, [r0, #4]
   d5eac:	f7ff bae6 	b.w	d547c <network_off>

000d5eb0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5eb0:	2200      	movs	r2, #0
   d5eb2:	f081 0101 	eor.w	r1, r1, #1
   d5eb6:	6840      	ldr	r0, [r0, #4]
   d5eb8:	f7ff bae8 	b.w	d548c <network_listen>

000d5ebc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5ebc:	2200      	movs	r2, #0
   d5ebe:	6840      	ldr	r0, [r0, #4]
   d5ec0:	f7ff baf4 	b.w	d54ac <network_set_listen_timeout>

000d5ec4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ec4:	2200      	movs	r2, #0
   d5ec6:	4611      	mov	r1, r2
   d5ec8:	6840      	ldr	r0, [r0, #4]
   d5eca:	f7ff baf7 	b.w	d54bc <network_get_listen_timeout>

000d5ece <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5ece:	2200      	movs	r2, #0
   d5ed0:	4611      	mov	r1, r2
   d5ed2:	6840      	ldr	r0, [r0, #4]
   d5ed4:	f7ff bae2 	b.w	d549c <network_listening>

000d5ed8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5edc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ede:	b095      	sub	sp, #84	; 0x54
   d5ee0:	4616      	mov	r6, r2
   d5ee2:	460d      	mov	r5, r1
   d5ee4:	4607      	mov	r7, r0
    IPAddress addr;
   d5ee6:	f7ff fed3 	bl	d5c90 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5eea:	4621      	mov	r1, r4
   d5eec:	2220      	movs	r2, #32
   d5eee:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ef0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5ef2:	f001 fb96 	bl	d7622 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5ef6:	2340      	movs	r3, #64	; 0x40
   d5ef8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5efa:	4621      	mov	r1, r4
   d5efc:	466b      	mov	r3, sp
   d5efe:	aa0c      	add	r2, sp, #48	; 0x30
   d5f00:	4630      	mov	r0, r6
   d5f02:	f7ff f967 	bl	d51d4 <netdb_getaddrinfo>
    if (!r) {
   d5f06:	4604      	mov	r4, r0
   d5f08:	2800      	cmp	r0, #0
   d5f0a:	d144      	bne.n	d5f96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f0c:	4602      	mov	r2, r0
   d5f0e:	2101      	movs	r1, #1
   d5f10:	6868      	ldr	r0, [r5, #4]
   d5f12:	f7ff faa3 	bl	d545c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f16:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5f18:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f1a:	4622      	mov	r2, r4
   d5f1c:	6868      	ldr	r0, [r5, #4]
   d5f1e:	f7ff fa9d 	bl	d545c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f22:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5f24:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5f26:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f28:	2e00      	cmp	r6, #0
   d5f2a:	d034      	beq.n	d5f96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5f2c:	2900      	cmp	r1, #0
   d5f2e:	d132      	bne.n	d5f96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5f30:	6873      	ldr	r3, [r6, #4]
   d5f32:	2b02      	cmp	r3, #2
   d5f34:	d002      	beq.n	d5f3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5f36:	2b0a      	cmp	r3, #10
   d5f38:	d009      	beq.n	d5f4e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5f3a:	e02a      	b.n	d5f92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5f3c:	f1b8 0f00 	cmp.w	r8, #0
   d5f40:	d027      	beq.n	d5f92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5f42:	6971      	ldr	r1, [r6, #20]
   d5f44:	4638      	mov	r0, r7
   d5f46:	3104      	adds	r1, #4
   d5f48:	f7ff fecf 	bl	d5cea <_ZN9IPAddressaSEPKh>
   d5f4c:	e020      	b.n	d5f90 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5f4e:	f1b9 0f00 	cmp.w	r9, #0
   d5f52:	d01e      	beq.n	d5f92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5f54:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5f56:	2211      	movs	r2, #17
   d5f58:	a801      	add	r0, sp, #4
   d5f5a:	f001 fb62 	bl	d7622 <memset>
                    a.v = 6;
   d5f5e:	2306      	movs	r3, #6
   d5f60:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5f64:	ad01      	add	r5, sp, #4
   d5f66:	f104 0308 	add.w	r3, r4, #8
   d5f6a:	3418      	adds	r4, #24
   d5f6c:	6818      	ldr	r0, [r3, #0]
   d5f6e:	6859      	ldr	r1, [r3, #4]
   d5f70:	462a      	mov	r2, r5
   d5f72:	c203      	stmia	r2!, {r0, r1}
   d5f74:	3308      	adds	r3, #8
   d5f76:	42a3      	cmp	r3, r4
   d5f78:	4615      	mov	r5, r2
   d5f7a:	d1f7      	bne.n	d5f6c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5f7c:	a901      	add	r1, sp, #4
   d5f7e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f80:	ad07      	add	r5, sp, #28
   d5f82:	f7ff fe93 	bl	d5cac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f88:	1d3c      	adds	r4, r7, #4
   d5f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f8c:	682b      	ldr	r3, [r5, #0]
   d5f8e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5f90:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f92:	69f6      	ldr	r6, [r6, #28]
   d5f94:	e7c8      	b.n	d5f28 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5f96:	9800      	ldr	r0, [sp, #0]
   d5f98:	f7ff f914 	bl	d51c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f9c:	4638      	mov	r0, r7
   d5f9e:	b015      	add	sp, #84	; 0x54
   d5fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5fa4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5fa4:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5fa6:	4a03      	ldr	r2, [pc, #12]	; (d5fb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5fa8:	601a      	str	r2, [r3, #0]
   d5faa:	2200      	movs	r2, #0
   d5fac:	605a      	str	r2, [r3, #4]
   d5fae:	4770      	bx	lr
   d5fb0:	2003e554 	.word	0x2003e554
   d5fb4:	000d839c 	.word	0x000d839c

000d5fb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fba:	4606      	mov	r6, r0
   d5fbc:	460d      	mov	r5, r1
   d5fbe:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5fc0:	2400      	movs	r4, #0
  while (size--) {
   d5fc2:	42bd      	cmp	r5, r7
   d5fc4:	d00c      	beq.n	d5fe0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5fc6:	6833      	ldr	r3, [r6, #0]
   d5fc8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5fcc:	689b      	ldr	r3, [r3, #8]
   d5fce:	4630      	mov	r0, r6
   d5fd0:	4798      	blx	r3
     if (chunk>=0)
   d5fd2:	2800      	cmp	r0, #0
   d5fd4:	db01      	blt.n	d5fda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5fd6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5fd8:	e7f3      	b.n	d5fc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5fda:	2c00      	cmp	r4, #0
   d5fdc:	bf08      	it	eq
   d5fde:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fe4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5fe4:	b570      	push	{r4, r5, r6, lr}
   d5fe6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5fe8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5fea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5fec:	b149      	cbz	r1, d6002 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5fee:	f001 fb76 	bl	d76de <strlen>
   d5ff2:	682b      	ldr	r3, [r5, #0]
   d5ff4:	4602      	mov	r2, r0
   d5ff6:	4621      	mov	r1, r4
   d5ff8:	4628      	mov	r0, r5
   d5ffa:	68db      	ldr	r3, [r3, #12]
    }
   d5ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6000:	4718      	bx	r3
    }
   d6002:	bd70      	pop	{r4, r5, r6, pc}

000d6004 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6004:	6803      	ldr	r3, [r0, #0]
   d6006:	689b      	ldr	r3, [r3, #8]
   d6008:	4718      	bx	r3

000d600a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d600a:	b530      	push	{r4, r5, lr}
   d600c:	b08b      	sub	sp, #44	; 0x2c
   d600e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6010:	2100      	movs	r1, #0
   d6012:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6016:	2a01      	cmp	r2, #1
   d6018:	bf98      	it	ls
   d601a:	220a      	movls	r2, #10
   d601c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6020:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6024:	fb05 3312 	mls	r3, r5, r2, r3
   d6028:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d602c:	2b09      	cmp	r3, #9
   d602e:	bf94      	ite	ls
   d6030:	3330      	addls	r3, #48	; 0x30
   d6032:	3337      	addhi	r3, #55	; 0x37
   d6034:	b2db      	uxtb	r3, r3
   d6036:	4621      	mov	r1, r4
   d6038:	f804 3901 	strb.w	r3, [r4], #-1
   d603c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d603e:	2d00      	cmp	r5, #0
   d6040:	d1ee      	bne.n	d6020 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6042:	f7ff ffcf 	bl	d5fe4 <_ZN5Print5writeEPKc>
}
   d6046:	b00b      	add	sp, #44	; 0x2c
   d6048:	bd30      	pop	{r4, r5, pc}

000d604a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d604a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d604c:	b92a      	cbnz	r2, d605a <_ZN5Print5printEmi+0x10>
   d604e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6050:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6054:	689b      	ldr	r3, [r3, #8]
   d6056:	b2c9      	uxtb	r1, r1
   d6058:	4718      	bx	r3
  else return printNumber(n, base);
   d605a:	b2d2      	uxtb	r2, r2
}
   d605c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6060:	f7ff bfd3 	b.w	d600a <_ZN5Print11printNumberEmh>

000d6064 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6064:	f7ff bff1 	b.w	d604a <_ZN5Print5printEmi>

000d6068 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6068:	b510      	push	{r4, lr}
   d606a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d606c:	f7ff fa8c 	bl	d5588 <_ZNSt14_Function_baseD1Ev>
   d6070:	4620      	mov	r0, r4
   d6072:	bd10      	pop	{r4, pc}

000d6074 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6074:	4803      	ldr	r0, [pc, #12]	; (d6084 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6076:	4a04      	ldr	r2, [pc, #16]	; (d6088 <_GLOBAL__sub_I_RGB+0x14>)
   d6078:	4904      	ldr	r1, [pc, #16]	; (d608c <_GLOBAL__sub_I_RGB+0x18>)
   d607a:	2300      	movs	r3, #0
   d607c:	6083      	str	r3, [r0, #8]
   d607e:	f000 bc4f 	b.w	d6920 <__aeabi_atexit>
   d6082:	bf00      	nop
   d6084:	2003e55c 	.word	0x2003e55c
   d6088:	2003e2e4 	.word	0x2003e2e4
   d608c:	000d6069 	.word	0x000d6069

000d6090 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6090:	4770      	bx	lr

000d6092 <_ZN8SPIClassD0Ev>:
   d6092:	b510      	push	{r4, lr}
   d6094:	2110      	movs	r1, #16
   d6096:	4604      	mov	r4, r0
   d6098:	f000 fc47 	bl	d692a <_ZdlPvj>
   d609c:	4620      	mov	r0, r4
   d609e:	bd10      	pop	{r4, pc}

000d60a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d60a0:	b570      	push	{r4, r5, r6, lr}
   d60a2:	4b08      	ldr	r3, [pc, #32]	; (d60c4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d60a4:	6003      	str	r3, [r0, #0]
   d60a6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d60a8:	2500      	movs	r5, #0
   d60aa:	460e      	mov	r6, r1
   d60ac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d60b0:	f7fe ffd8 	bl	d5064 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d60b4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d60b6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d60b8:	f7ff f894 	bl	d51e4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d60bc:	60a5      	str	r5, [r4, #8]
}
   d60be:	4620      	mov	r0, r4
   d60c0:	bd70      	pop	{r4, r5, r6, pc}
   d60c2:	bf00      	nop
   d60c4:	000d83d0 	.word	0x000d83d0

000d60c8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d60c8:	7900      	ldrb	r0, [r0, #4]
   d60ca:	f7ff b893 	b.w	d51f4 <HAL_SPI_Is_Enabled>

000d60ce <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d60ce:	2300      	movs	r3, #0
   d60d0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d60d2:	6043      	str	r3, [r0, #4]
	len = 0;
   d60d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d60d6:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d60d8:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d60da:	680c      	ldr	r4, [r1, #0]
   d60dc:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d60de:	684c      	ldr	r4, [r1, #4]
   d60e0:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d60e2:	688c      	ldr	r4, [r1, #8]
   d60e4:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d60e6:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d60e8:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d60ea:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d60ec:	bd10      	pop	{r4, pc}

000d60ee <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d60ee:	b510      	push	{r4, lr}
   d60f0:	4604      	mov	r4, r0
{
	free(buffer);
   d60f2:	6800      	ldr	r0, [r0, #0]
   d60f4:	f7ff f9f2 	bl	d54dc <free>
}
   d60f8:	4620      	mov	r0, r4
   d60fa:	bd10      	pop	{r4, pc}

000d60fc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d60fc:	b510      	push	{r4, lr}
   d60fe:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6100:	6800      	ldr	r0, [r0, #0]
   d6102:	b108      	cbz	r0, d6108 <_ZN6String10invalidateEv+0xc>
   d6104:	f7ff f9ea 	bl	d54dc <free>
	buffer = NULL;
   d6108:	2300      	movs	r3, #0
   d610a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d610c:	60a3      	str	r3, [r4, #8]
   d610e:	6063      	str	r3, [r4, #4]
   d6110:	bd10      	pop	{r4, pc}

000d6112 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6112:	b538      	push	{r3, r4, r5, lr}
   d6114:	4604      	mov	r4, r0
   d6116:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6118:	6800      	ldr	r0, [r0, #0]
   d611a:	3101      	adds	r1, #1
   d611c:	f7ff f9e6 	bl	d54ec <realloc>
	if (newbuffer) {
   d6120:	b110      	cbz	r0, d6128 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6122:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6126:	2001      	movs	r0, #1
	}
	return 0;
}
   d6128:	bd38      	pop	{r3, r4, r5, pc}

000d612a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d612a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d612c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d612e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6130:	b113      	cbz	r3, d6138 <_ZN6String7reserveEj+0xe>
   d6132:	6843      	ldr	r3, [r0, #4]
   d6134:	428b      	cmp	r3, r1
   d6136:	d207      	bcs.n	d6148 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6138:	4620      	mov	r0, r4
   d613a:	f7ff ffea 	bl	d6112 <_ZN6String12changeBufferEj>
   d613e:	b120      	cbz	r0, d614a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6140:	68a3      	ldr	r3, [r4, #8]
   d6142:	b90b      	cbnz	r3, d6148 <_ZN6String7reserveEj+0x1e>
   d6144:	6822      	ldr	r2, [r4, #0]
   d6146:	7013      	strb	r3, [r2, #0]
   d6148:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d614a:	bd10      	pop	{r4, pc}

000d614c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d614c:	b570      	push	{r4, r5, r6, lr}
   d614e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6150:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6152:	4604      	mov	r4, r0
   d6154:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6156:	f7ff ffe8 	bl	d612a <_ZN6String7reserveEj>
   d615a:	b918      	cbnz	r0, d6164 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d615c:	4620      	mov	r0, r4
   d615e:	f7ff ffcd 	bl	d60fc <_ZN6String10invalidateEv>
		return *this;
   d6162:	e009      	b.n	d6178 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6164:	462a      	mov	r2, r5
   d6166:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6168:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d616a:	6820      	ldr	r0, [r4, #0]
   d616c:	f001 fa4e 	bl	d760c <memcpy>
	buffer[len] = 0;
   d6170:	6822      	ldr	r2, [r4, #0]
   d6172:	68a3      	ldr	r3, [r4, #8]
   d6174:	2100      	movs	r1, #0
   d6176:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6178:	4620      	mov	r0, r4
   d617a:	bd70      	pop	{r4, r5, r6, pc}

000d617c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d617c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d617e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6180:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6182:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6184:	6043      	str	r3, [r0, #4]
	len = 0;
   d6186:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6188:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d618a:	460d      	mov	r5, r1
   d618c:	b139      	cbz	r1, d619e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d618e:	4608      	mov	r0, r1
   d6190:	f001 faa5 	bl	d76de <strlen>
   d6194:	4629      	mov	r1, r5
   d6196:	4602      	mov	r2, r0
   d6198:	4620      	mov	r0, r4
   d619a:	f7ff ffd7 	bl	d614c <_ZN6String4copyEPKcj>
}
   d619e:	4620      	mov	r0, r4
   d61a0:	bd38      	pop	{r3, r4, r5, pc}

000d61a2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61a2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61a4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61a6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61a8:	b912      	cbnz	r2, d61b0 <_ZNK6String6equalsEPKc+0xe>
   d61aa:	b919      	cbnz	r1, d61b4 <_ZNK6String6equalsEPKc+0x12>
   d61ac:	2001      	movs	r0, #1
   d61ae:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d61b0:	b911      	cbnz	r1, d61b8 <_ZNK6String6equalsEPKc+0x16>
   d61b2:	6803      	ldr	r3, [r0, #0]
   d61b4:	7818      	ldrb	r0, [r3, #0]
   d61b6:	e002      	b.n	d61be <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d61b8:	6800      	ldr	r0, [r0, #0]
   d61ba:	f001 fa63 	bl	d7684 <strcmp>
   d61be:	fab0 f080 	clz	r0, r0
   d61c2:	0940      	lsrs	r0, r0, #5
}
   d61c4:	bd08      	pop	{r3, pc}

000d61c6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d61c6:	b570      	push	{r4, r5, r6, lr}
   d61c8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d61ca:	b19a      	cbz	r2, d61f4 <_ZNK6String8getBytesEPhjj+0x2e>
   d61cc:	b191      	cbz	r1, d61f4 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d61ce:	6885      	ldr	r5, [r0, #8]
   d61d0:	429d      	cmp	r5, r3
   d61d2:	d802      	bhi.n	d61da <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d61d4:	2300      	movs	r3, #0
   d61d6:	700b      	strb	r3, [r1, #0]
		return;
   d61d8:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d61da:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d61dc:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d61de:	6801      	ldr	r1, [r0, #0]
   d61e0:	42ac      	cmp	r4, r5
   d61e2:	bf28      	it	cs
   d61e4:	462c      	movcs	r4, r5
   d61e6:	4419      	add	r1, r3
   d61e8:	4622      	mov	r2, r4
   d61ea:	4630      	mov	r0, r6
   d61ec:	f001 fa94 	bl	d7718 <strncpy>
	buf[n] = 0;
   d61f0:	2300      	movs	r3, #0
   d61f2:	5533      	strb	r3, [r6, r4]
   d61f4:	bd70      	pop	{r4, r5, r6, pc}

000d61f6 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d61f6:	4601      	mov	r1, r0
   d61f8:	2200      	movs	r2, #0
   d61fa:	208c      	movs	r0, #140	; 0x8c
   d61fc:	f7fe bf42 	b.w	d5084 <HAL_Core_System_Reset_Ex>

000d6200 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6200:	2000      	movs	r0, #0
   d6202:	f7ff bff8 	b.w	d61f6 <_ZN11SystemClass5resetEm>
	...

000d6208 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6208:	4b04      	ldr	r3, [pc, #16]	; (d621c <_GLOBAL__sub_I_System+0x14>)
   d620a:	2000      	movs	r0, #0
   d620c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6210:	7018      	strb	r0, [r3, #0]
   d6212:	8058      	strh	r0, [r3, #2]
   d6214:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6216:	f7ff b87d 	b.w	d5314 <set_system_mode>
   d621a:	bf00      	nop
   d621c:	2003e56c 	.word	0x2003e56c

000d6220 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6220:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d6222:	4b14      	ldr	r3, [pc, #80]	; (d6274 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6224:	4f14      	ldr	r7, [pc, #80]	; (d6278 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6226:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6228:	4b14      	ldr	r3, [pc, #80]	; (d627c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d622a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d622c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d622e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6230:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d6232:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6234:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6236:	d01b      	beq.n	d6270 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6238:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d623a:	ad01      	add	r5, sp, #4
   d623c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6240:	f001 f8ec 	bl	d741c <localtime>
	calendar_time->tm_year += 1900;
   d6244:	6943      	ldr	r3, [r0, #20]
   d6246:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d624a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d624c:	4604      	mov	r4, r0
   d624e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6256:	f8d4 e000 	ldr.w	lr, [r4]
   d625a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d625e:	ad01      	add	r5, sp, #4
   d6260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6262:	4c07      	ldr	r4, [pc, #28]	; (d6280 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d6264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d626a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d626c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d6270:	b00b      	add	sp, #44	; 0x2c
   d6272:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6274:	2003e5a4 	.word	0x2003e5a4
   d6278:	2003e5a0 	.word	0x2003e5a0
   d627c:	2003e59c 	.word	0x2003e59c
   d6280:	2003e574 	.word	0x2003e574

000d6284 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d6284:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6286:	2000      	movs	r0, #0
   d6288:	f7ff f8c0 	bl	d540c <spark_sync_time_pending>
   d628c:	b128      	cbz	r0, d629a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d628e:	f7ff f895 	bl	d53bc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6292:	f080 0001 	eor.w	r0, r0, #1
   d6296:	b2c0      	uxtb	r0, r0
   d6298:	bd08      	pop	{r3, pc}
   d629a:	2001      	movs	r0, #1
    }
   d629c:	bd08      	pop	{r3, pc}

000d629e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d629e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d62a0:	2000      	movs	r0, #0
   d62a2:	f7fe ff17 	bl	d50d4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d62a6:	4604      	mov	r4, r0
   d62a8:	b968      	cbnz	r0, d62c6 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d62aa:	f7ff f82b 	bl	d5304 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d62ae:	2801      	cmp	r0, #1
   d62b0:	d10b      	bne.n	d62ca <_ZN9TimeClass7isValidEv+0x2c>
   d62b2:	4620      	mov	r0, r4
   d62b4:	f7ff f84e 	bl	d5354 <system_thread_get_state>
   d62b8:	b938      	cbnz	r0, d62ca <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d62ba:	f7ff ffe3 	bl	d6284 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d62be:	b930      	cbnz	r0, d62ce <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d62c0:	f7ff f874 	bl	d53ac <spark_process>
   d62c4:	e7f9      	b.n	d62ba <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d62c6:	2001      	movs	r0, #1
   d62c8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d62ca:	2000      	movs	r0, #0
   d62cc:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d62ce:	f7ff ffd9 	bl	d6284 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d62d2:	2000      	movs	r0, #0
   d62d4:	f7fe fefe 	bl	d50d4 <HAL_RTC_Time_Is_Valid>
   d62d8:	3000      	adds	r0, #0
   d62da:	bf18      	it	ne
   d62dc:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d62de:	bd10      	pop	{r4, pc}

000d62e0 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d62e0:	b508      	push	{r3, lr}
    (void)isValid();
   d62e2:	f7ff ffdc 	bl	d629e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d62e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d62ea:	f7fe beeb 	b.w	d50c4 <HAL_RTC_Get_UnixTime>
	...

000d62f0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d62f0:	b508      	push	{r3, lr}
	return hour(now());
   d62f2:	f7ff fff5 	bl	d62e0 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d62f6:	f7ff ff93 	bl	d6220 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d62fa:	4b01      	ldr	r3, [pc, #4]	; (d6300 <_ZN9TimeClass4hourEv+0x10>)
   d62fc:	6898      	ldr	r0, [r3, #8]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	2003e574 	.word	0x2003e574

000d6304 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d6304:	b508      	push	{r3, lr}
	return minute(now());
   d6306:	f7ff ffeb 	bl	d62e0 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d630a:	f7ff ff89 	bl	d6220 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d630e:	4b01      	ldr	r3, [pc, #4]	; (d6314 <_ZN9TimeClass6minuteEv+0x10>)
   d6310:	6858      	ldr	r0, [r3, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	2003e574 	.word	0x2003e574

000d6318 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6318:	4b02      	ldr	r3, [pc, #8]	; (d6324 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	4b02      	ldr	r3, [pc, #8]	; (d6328 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d631e:	601a      	str	r2, [r3, #0]
   d6320:	4770      	bx	lr
   d6322:	bf00      	nop
   d6324:	2003e22c 	.word	0x2003e22c
   d6328:	2003e598 	.word	0x2003e598

000d632c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d632c:	4770      	bx	lr

000d632e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d632e:	7441      	strb	r1, [r0, #17]
   d6330:	4770      	bx	lr

000d6332 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6332:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6334:	7c00      	ldrb	r0, [r0, #16]
   d6336:	f7fe ff9d 	bl	d5274 <HAL_USART_Available_Data_For_Write>
}
   d633a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d633e:	bd08      	pop	{r3, pc}

000d6340 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6340:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6342:	7c00      	ldrb	r0, [r0, #16]
   d6344:	f7fe ff6e 	bl	d5224 <HAL_USART_Available_Data>
}
   d6348:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d634c:	bd08      	pop	{r3, pc}

000d634e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d634e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6350:	7c00      	ldrb	r0, [r0, #16]
   d6352:	f7fe ff77 	bl	d5244 <HAL_USART_Peek_Data>
}
   d6356:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d635a:	bf28      	it	cs
   d635c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6360:	bd08      	pop	{r3, pc}

000d6362 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6362:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6364:	7c00      	ldrb	r0, [r0, #16]
   d6366:	f7fe ff65 	bl	d5234 <HAL_USART_Read_Data>
}
   d636a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d636e:	bf28      	it	cs
   d6370:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6374:	bd08      	pop	{r3, pc}

000d6376 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6376:	7c00      	ldrb	r0, [r0, #16]
   d6378:	f7fe bf6c 	b.w	d5254 <HAL_USART_Flush_Data>

000d637c <_ZN11USARTSerialD0Ev>:
   d637c:	b510      	push	{r4, lr}
   d637e:	2114      	movs	r1, #20
   d6380:	4604      	mov	r4, r0
   d6382:	f000 fad2 	bl	d692a <_ZdlPvj>
   d6386:	4620      	mov	r0, r4
   d6388:	bd10      	pop	{r4, pc}

000d638a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d638a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d638c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d638e:	4604      	mov	r4, r0
   d6390:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6392:	b925      	cbnz	r5, d639e <_ZN11USARTSerial5writeEh+0x14>
   d6394:	7c00      	ldrb	r0, [r0, #16]
   d6396:	f7fe ff6d 	bl	d5274 <HAL_USART_Available_Data_For_Write>
   d639a:	2800      	cmp	r0, #0
   d639c:	dd05      	ble.n	d63aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d639e:	4631      	mov	r1, r6
   d63a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d63a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d63a6:	f7fe bf35 	b.w	d5214 <HAL_USART_Write_Data>
  }
  return 0;
}
   d63aa:	4628      	mov	r0, r5
   d63ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d63b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d63b0:	b510      	push	{r4, lr}
   d63b2:	4604      	mov	r4, r0
   d63b4:	4608      	mov	r0, r1
   d63b6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d63b8:	2200      	movs	r2, #0
   d63ba:	6062      	str	r2, [r4, #4]
   d63bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d63c0:	60a2      	str	r2, [r4, #8]
   d63c2:	4a05      	ldr	r2, [pc, #20]	; (d63d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d63c4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d63c6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d63c8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d63ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d63cc:	461a      	mov	r2, r3
   d63ce:	f7fe ff19 	bl	d5204 <HAL_USART_Init>
}
   d63d2:	4620      	mov	r0, r4
   d63d4:	bd10      	pop	{r4, pc}
   d63d6:	bf00      	nop
   d63d8:	000d8408 	.word	0x000d8408

000d63dc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d63dc:	7c00      	ldrb	r0, [r0, #16]
   d63de:	f7fe bf41 	b.w	d5264 <HAL_USART_Is_Enabled>
	...

000d63e4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d63e4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d63e6:	4d0c      	ldr	r5, [pc, #48]	; (d6418 <_Z22__fetch_global_Serial1v+0x34>)
   d63e8:	6829      	ldr	r1, [r5, #0]
   d63ea:	f011 0401 	ands.w	r4, r1, #1
   d63ee:	d111      	bne.n	d6414 <_Z22__fetch_global_Serial1v+0x30>
   d63f0:	4628      	mov	r0, r5
   d63f2:	f7fd fe56 	bl	d40a2 <__cxa_guard_acquire>
   d63f6:	b168      	cbz	r0, d6414 <_Z22__fetch_global_Serial1v+0x30>
   d63f8:	4a08      	ldr	r2, [pc, #32]	; (d641c <_Z22__fetch_global_Serial1v+0x38>)
   d63fa:	4b09      	ldr	r3, [pc, #36]	; (d6420 <_Z22__fetch_global_Serial1v+0x3c>)
   d63fc:	4809      	ldr	r0, [pc, #36]	; (d6424 <_Z22__fetch_global_Serial1v+0x40>)
   d63fe:	4621      	mov	r1, r4
   d6400:	f7ff ffd6 	bl	d63b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6404:	4628      	mov	r0, r5
   d6406:	f7fd fe51 	bl	d40ac <__cxa_guard_release>
   d640a:	4a07      	ldr	r2, [pc, #28]	; (d6428 <_Z22__fetch_global_Serial1v+0x44>)
   d640c:	4907      	ldr	r1, [pc, #28]	; (d642c <_Z22__fetch_global_Serial1v+0x48>)
   d640e:	4805      	ldr	r0, [pc, #20]	; (d6424 <_Z22__fetch_global_Serial1v+0x40>)
   d6410:	f000 fa86 	bl	d6920 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6414:	4803      	ldr	r0, [pc, #12]	; (d6424 <_Z22__fetch_global_Serial1v+0x40>)
   d6416:	bd38      	pop	{r3, r4, r5, pc}
   d6418:	2003e640 	.word	0x2003e640
   d641c:	2003e644 	.word	0x2003e644
   d6420:	2003e5bc 	.word	0x2003e5bc
   d6424:	2003e5a8 	.word	0x2003e5a8
   d6428:	2003e2e4 	.word	0x2003e2e4
   d642c:	000d632d 	.word	0x000d632d

000d6430 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6430:	7441      	strb	r1, [r0, #17]
   d6432:	4770      	bx	lr

000d6434 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6434:	4770      	bx	lr

000d6436 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6436:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6438:	2100      	movs	r1, #0
   d643a:	7c00      	ldrb	r0, [r0, #16]
   d643c:	f7fe ff3a 	bl	d52b4 <HAL_USB_USART_Receive_Data>
}
   d6440:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6444:	bf28      	it	cs
   d6446:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d644a:	bd08      	pop	{r3, pc}

000d644c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d644c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d644e:	2101      	movs	r1, #1
   d6450:	7c00      	ldrb	r0, [r0, #16]
   d6452:	f7fe ff2f 	bl	d52b4 <HAL_USB_USART_Receive_Data>
}
   d6456:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d645a:	bf28      	it	cs
   d645c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6460:	bd08      	pop	{r3, pc}

000d6462 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6462:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6464:	7c00      	ldrb	r0, [r0, #16]
   d6466:	f7fe ff1d 	bl	d52a4 <HAL_USB_USART_Available_Data_For_Write>
}
   d646a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d646e:	bd08      	pop	{r3, pc}

000d6470 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6470:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6472:	7c00      	ldrb	r0, [r0, #16]
   d6474:	f7fe ff0e 	bl	d5294 <HAL_USB_USART_Available_Data>
}
   d6478:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d647c:	bd08      	pop	{r3, pc}

000d647e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d647e:	7c00      	ldrb	r0, [r0, #16]
   d6480:	f7fe bf28 	b.w	d52d4 <HAL_USB_USART_Flush_Data>

000d6484 <_ZN9USBSerialD0Ev>:
   d6484:	b510      	push	{r4, lr}
   d6486:	2114      	movs	r1, #20
   d6488:	4604      	mov	r4, r0
   d648a:	f000 fa4e 	bl	d692a <_ZdlPvj>
   d648e:	4620      	mov	r0, r4
   d6490:	bd10      	pop	{r4, pc}

000d6492 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6492:	b538      	push	{r3, r4, r5, lr}
   d6494:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6496:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6498:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d649a:	f7fe ff03 	bl	d52a4 <HAL_USB_USART_Available_Data_For_Write>
   d649e:	2800      	cmp	r0, #0
   d64a0:	dc01      	bgt.n	d64a6 <_ZN9USBSerial5writeEh+0x14>
   d64a2:	7c60      	ldrb	r0, [r4, #17]
   d64a4:	b128      	cbz	r0, d64b2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d64a6:	4629      	mov	r1, r5
   d64a8:	7c20      	ldrb	r0, [r4, #16]
   d64aa:	f7fe ff0b 	bl	d52c4 <HAL_USB_USART_Send_Data>
   d64ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d64b2:	bd38      	pop	{r3, r4, r5, pc}

000d64b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d64b4:	b510      	push	{r4, lr}
   d64b6:	4604      	mov	r4, r0
   d64b8:	2300      	movs	r3, #0
   d64ba:	6063      	str	r3, [r4, #4]
   d64bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d64c0:	60a3      	str	r3, [r4, #8]
   d64c2:	4b05      	ldr	r3, [pc, #20]	; (d64d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d64c4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d64c6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d64c8:	4608      	mov	r0, r1
{
  _serial = serial;
   d64ca:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d64cc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d64ce:	4611      	mov	r1, r2
   d64d0:	f7fe fed8 	bl	d5284 <HAL_USB_USART_Init>
}
   d64d4:	4620      	mov	r0, r4
   d64d6:	bd10      	pop	{r4, pc}
   d64d8:	000d8438 	.word	0x000d8438

000d64dc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d64dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d64de:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d64e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d64e2:	2100      	movs	r1, #0
   d64e4:	f001 f89d 	bl	d7622 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d64e8:	4620      	mov	r0, r4
   d64ea:	bd10      	pop	{r4, pc}

000d64ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d64ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d64ee:	4d0e      	ldr	r5, [pc, #56]	; (d6528 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d64f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d64f2:	a801      	add	r0, sp, #4
   d64f4:	f7ff fff2 	bl	d64dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d64f8:	6829      	ldr	r1, [r5, #0]
   d64fa:	f011 0401 	ands.w	r4, r1, #1
   d64fe:	d110      	bne.n	d6522 <_Z16_fetch_usbserialv+0x36>
   d6500:	4628      	mov	r0, r5
   d6502:	f7fd fdce 	bl	d40a2 <__cxa_guard_acquire>
   d6506:	b160      	cbz	r0, d6522 <_Z16_fetch_usbserialv+0x36>
   d6508:	aa01      	add	r2, sp, #4
   d650a:	4621      	mov	r1, r4
   d650c:	4807      	ldr	r0, [pc, #28]	; (d652c <_Z16_fetch_usbserialv+0x40>)
   d650e:	f7ff ffd1 	bl	d64b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6512:	4628      	mov	r0, r5
   d6514:	f7fd fdca 	bl	d40ac <__cxa_guard_release>
   d6518:	4a05      	ldr	r2, [pc, #20]	; (d6530 <_Z16_fetch_usbserialv+0x44>)
   d651a:	4906      	ldr	r1, [pc, #24]	; (d6534 <_Z16_fetch_usbserialv+0x48>)
   d651c:	4803      	ldr	r0, [pc, #12]	; (d652c <_Z16_fetch_usbserialv+0x40>)
   d651e:	f000 f9ff 	bl	d6920 <__aeabi_atexit>
	return _usbserial;
}
   d6522:	4802      	ldr	r0, [pc, #8]	; (d652c <_Z16_fetch_usbserialv+0x40>)
   d6524:	b007      	add	sp, #28
   d6526:	bd30      	pop	{r4, r5, pc}
   d6528:	2003e6c8 	.word	0x2003e6c8
   d652c:	2003e6cc 	.word	0x2003e6cc
   d6530:	2003e2e4 	.word	0x2003e2e4
   d6534:	000d6435 	.word	0x000d6435

000d6538 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d6538:	4770      	bx	lr

000d653a <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   d653a:	2001      	movs	r0, #1
   d653c:	4770      	bx	lr
	...

000d6540 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   d6540:	8983      	ldrh	r3, [r0, #12]
   d6542:	b11b      	cbz	r3, d654c <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   d6544:	6903      	ldr	r3, [r0, #16]
   d6546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d654a:	d102      	bne.n	d6552 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   d654c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6564 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   d6550:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   d6552:	ee07 3a90 	vmov	s15, r3
   d6556:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6568 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   d655a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d655e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d6562:	4770      	bx	lr
   d6564:	00000000 	.word	0x00000000
   d6568:	42c80000 	.word	0x42c80000

000d656c <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   d656c:	8983      	ldrh	r3, [r0, #12]
   d656e:	b11b      	cbz	r3, d6578 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   d6570:	6983      	ldr	r3, [r0, #24]
   d6572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6576:	d102      	bne.n	d657e <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   d6578:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6590 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   d657c:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   d657e:	ee07 3a90 	vmov	s15, r3
   d6582:	ed9f 7a04 	vldr	s14, [pc, #16]	; d6594 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   d6586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d658a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   d658e:	4770      	bx	lr
   d6590:	00000000 	.word	0x00000000
   d6594:	42c80000 	.word	0x42c80000

000d6598 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6598:	2200      	movs	r2, #0
   d659a:	4611      	mov	r1, r2
   d659c:	6840      	ldr	r0, [r0, #4]
   d659e:	f7fe bf5d 	b.w	d545c <network_ready>

000d65a2 <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   d65a2:	b510      	push	{r4, lr}
   d65a4:	2124      	movs	r1, #36	; 0x24
   d65a6:	4604      	mov	r4, r0
   d65a8:	f000 f9bf 	bl	d692a <_ZdlPvj>
   d65ac:	4620      	mov	r0, r4
   d65ae:	bd10      	pop	{r4, pc}

000d65b0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d65b0:	2200      	movs	r2, #0
   d65b2:	4611      	mov	r1, r2
   d65b4:	6840      	ldr	r0, [r0, #4]
   d65b6:	f7fe bf71 	b.w	d549c <network_listening>

000d65ba <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d65ba:	2200      	movs	r2, #0
   d65bc:	4611      	mov	r1, r2
   d65be:	6840      	ldr	r0, [r0, #4]
   d65c0:	f7fe bf7c 	b.w	d54bc <network_get_listen_timeout>

000d65c4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d65c4:	2200      	movs	r2, #0
   d65c6:	6840      	ldr	r0, [r0, #4]
   d65c8:	f7fe bf70 	b.w	d54ac <network_set_listen_timeout>

000d65cc <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d65cc:	2200      	movs	r2, #0
   d65ce:	f081 0101 	eor.w	r1, r1, #1
   d65d2:	6840      	ldr	r0, [r0, #4]
   d65d4:	f7fe bf5a 	b.w	d548c <network_listen>

000d65d8 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d65d8:	2300      	movs	r3, #0
   d65da:	461a      	mov	r2, r3
   d65dc:	4619      	mov	r1, r3
   d65de:	6840      	ldr	r0, [r0, #4]
   d65e0:	f7fe bf4c 	b.w	d547c <network_off>

000d65e4 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d65e4:	2300      	movs	r3, #0
   d65e6:	461a      	mov	r2, r3
   d65e8:	4619      	mov	r1, r3
   d65ea:	6840      	ldr	r0, [r0, #4]
   d65ec:	f7fe bf3e 	b.w	d546c <network_on>

000d65f0 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d65f0:	2200      	movs	r2, #0
   d65f2:	4611      	mov	r1, r2
   d65f4:	6840      	ldr	r0, [r0, #4]
   d65f6:	f7fe bf21 	b.w	d543c <network_connecting>

000d65fa <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d65fa:	2200      	movs	r2, #0
   d65fc:	2102      	movs	r1, #2
   d65fe:	6840      	ldr	r0, [r0, #4]
   d6600:	f7fe bf24 	b.w	d544c <network_disconnect>

000d6604 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6604:	2300      	movs	r3, #0
   d6606:	461a      	mov	r2, r3
   d6608:	6840      	ldr	r0, [r0, #4]
   d660a:	f7fe bf0f 	b.w	d542c <network_connect>
	...

000d6610 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   d6610:	8983      	ldrh	r3, [r0, #12]
   d6612:	b17b      	cbz	r3, d6634 <_ZNK10WiFiSignal10getQualityEv+0x24>
   d6614:	6a03      	ldr	r3, [r0, #32]
   d6616:	2b00      	cmp	r3, #0
   d6618:	db0c      	blt.n	d6634 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   d661a:	ee07 3a90 	vmov	s15, r3
   d661e:	eddf 6a07 	vldr	s13, [pc, #28]	; d663c <_ZNK10WiFiSignal10getQualityEv+0x2c>
   d6622:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6640 <_ZNK10WiFiSignal10getQualityEv+0x30>
   d6626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d662a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d662e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6632:	4770      	bx	lr
    }
    return -1.0f;
   d6634:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d6638:	4770      	bx	lr
   d663a:	bf00      	nop
   d663c:	477fff00 	.word	0x477fff00
   d6640:	42c80000 	.word	0x42c80000

000d6644 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   d6644:	8983      	ldrh	r3, [r0, #12]
   d6646:	b17b      	cbz	r3, d6668 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   d6648:	6943      	ldr	r3, [r0, #20]
   d664a:	2b00      	cmp	r3, #0
   d664c:	db0c      	blt.n	d6668 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   d664e:	ee07 3a90 	vmov	s15, r3
   d6652:	eddf 6a07 	vldr	s13, [pc, #28]	; d6670 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   d6656:	ed9f 0a07 	vldr	s0, [pc, #28]	; d6674 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   d665a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d665e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d6662:	ee27 0a80 	vmul.f32	s0, s15, s0
   d6666:	4770      	bx	lr
    }
    return -1.0f;
   d6668:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d666c:	4770      	bx	lr
   d666e:	bf00      	nop
   d6670:	477fff00 	.word	0x477fff00
   d6674:	42c80000 	.word	0x42c80000

000d6678 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d6678:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   d667a:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   d667c:	4606      	mov	r6, r0
    inf_ = inf;
   d667e:	f100 040c 	add.w	r4, r0, #12
   d6682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6686:	e895 0003 	ldmia.w	r5, {r0, r1}
   d668a:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   d668e:	6933      	ldr	r3, [r6, #16]
   d6690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d6694:	bf0e      	itee	eq
   d6696:	2302      	moveq	r3, #2
   d6698:	2264      	movne	r2, #100	; 0x64
   d669a:	fb93 f3f2 	sdivne	r3, r3, r2
   d669e:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   d66a0:	69b3      	ldr	r3, [r6, #24]
   d66a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d66a6:	bf0e      	itee	eq
   d66a8:	2300      	moveq	r3, #0
   d66aa:	2264      	movne	r2, #100	; 0x64
   d66ac:	fb93 f3f2 	sdivne	r3, r3, r2
   d66b0:	60b3      	str	r3, [r6, #8]
    return true;
}
   d66b2:	2001      	movs	r0, #1
   d66b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d66b8 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   d66b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   d66bc:	4b16      	ldr	r3, [pc, #88]	; (d6718 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   d66be:	6003      	str	r3, [r0, #0]
   d66c0:	2500      	movs	r5, #0
   d66c2:	4688      	mov	r8, r1
   d66c4:	2702      	movs	r7, #2
   d66c6:	2618      	movs	r6, #24
   d66c8:	b086      	sub	sp, #24
   d66ca:	6047      	str	r7, [r0, #4]
   d66cc:	6085      	str	r5, [r0, #8]
   d66ce:	4632      	mov	r2, r6
   d66d0:	4629      	mov	r1, r5
   d66d2:	4604      	mov	r4, r0
   d66d4:	300c      	adds	r0, #12
   d66d6:	f000 ffa4 	bl	d7622 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d66da:	462a      	mov	r2, r5
   d66dc:	4629      	mov	r1, r5
   d66de:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d66e2:	f7fe febb 	bl	d545c <network_ready>
   d66e6:	b190      	cbz	r0, d670e <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   d66e8:	4632      	mov	r2, r6
   d66ea:	4629      	mov	r1, r5
   d66ec:	4668      	mov	r0, sp
   d66ee:	f000 ff98 	bl	d7622 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d66f2:	462a      	mov	r2, r5
   d66f4:	4669      	mov	r1, sp
   d66f6:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   d66f8:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   d66fc:	f7fe fdf2 	bl	d52e4 <wlan_connected_info>
        if (r == 0) {
   d6700:	b920      	cbnz	r0, d670c <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   d6702:	4669      	mov	r1, sp
   d6704:	4620      	mov	r0, r4
   d6706:	f7ff ffb7 	bl	d6678 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   d670a:	e000      	b.n	d670e <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   d670c:	6067      	str	r7, [r4, #4]
        return sig;
    }
   d670e:	4620      	mov	r0, r4
   d6710:	b006      	add	sp, #24
   d6712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6716:	bf00      	nop
   d6718:	000d849c 	.word	0x000d849c

000d671c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d671c:	4b02      	ldr	r3, [pc, #8]	; (d6728 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d671e:	2204      	movs	r2, #4
   d6720:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6722:	4a02      	ldr	r2, [pc, #8]	; (d672c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6724:	601a      	str	r2, [r3, #0]
   d6726:	4770      	bx	lr
   d6728:	2003e6e0 	.word	0x2003e6e0
   d672c:	000d8468 	.word	0x000d8468

000d6730 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6730:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6732:	4b0c      	ldr	r3, [pc, #48]	; (d6764 <serialEventRun+0x34>)
   d6734:	b133      	cbz	r3, d6744 <serialEventRun+0x14>
   d6736:	f7ff fed9 	bl	d64ec <_Z16_fetch_usbserialv>
   d673a:	6803      	ldr	r3, [r0, #0]
   d673c:	691b      	ldr	r3, [r3, #16]
   d673e:	4798      	blx	r3
   d6740:	2800      	cmp	r0, #0
   d6742:	dc09      	bgt.n	d6758 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6744:	4b08      	ldr	r3, [pc, #32]	; (d6768 <serialEventRun+0x38>)
   d6746:	b163      	cbz	r3, d6762 <serialEventRun+0x32>
   d6748:	f7ff fe4c 	bl	d63e4 <_Z22__fetch_global_Serial1v>
   d674c:	6803      	ldr	r3, [r0, #0]
   d674e:	691b      	ldr	r3, [r3, #16]
   d6750:	4798      	blx	r3
   d6752:	2800      	cmp	r0, #0
   d6754:	dc03      	bgt.n	d675e <serialEventRun+0x2e>
   d6756:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6758:	f3af 8000 	nop.w
   d675c:	e7f2      	b.n	d6744 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d675e:	f3af 8000 	nop.w
   d6762:	bd08      	pop	{r3, pc}
	...

000d676c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d676c:	b508      	push	{r3, lr}
	serialEventRun();
   d676e:	f7ff ffdf 	bl	d6730 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6772:	f7fe fc9f 	bl	d50b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6776:	4b01      	ldr	r3, [pc, #4]	; (d677c <_post_loop+0x10>)
   d6778:	6018      	str	r0, [r3, #0]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	2003e6ec 	.word	0x2003e6ec

000d6780 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6780:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6782:	2300      	movs	r3, #0
   d6784:	9300      	str	r3, [sp, #0]
   d6786:	461a      	mov	r2, r3
   d6788:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d678c:	f7fe fdf4 	bl	d5378 <system_ctrl_set_result>
}
   d6790:	b003      	add	sp, #12
   d6792:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6798 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6798:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d679a:	8843      	ldrh	r3, [r0, #2]
   d679c:	2b0a      	cmp	r3, #10
   d679e:	d008      	beq.n	d67b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d67a0:	2b50      	cmp	r3, #80	; 0x50
   d67a2:	d109      	bne.n	d67b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d67a4:	4b09      	ldr	r3, [pc, #36]	; (d67cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d67a6:	681b      	ldr	r3, [r3, #0]
   d67a8:	b13b      	cbz	r3, d67ba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d67aa:	b003      	add	sp, #12
   d67ac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d67b0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d67b2:	f7ff ffe5 	bl	d6780 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d67b6:	e006      	b.n	d67c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67b8:	2300      	movs	r3, #0
   d67ba:	9300      	str	r3, [sp, #0]
   d67bc:	461a      	mov	r2, r3
   d67be:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67c2:	f7fe fdd9 	bl	d5378 <system_ctrl_set_result>
        break;
    }
}
   d67c6:	b003      	add	sp, #12
   d67c8:	f85d fb04 	ldr.w	pc, [sp], #4
   d67cc:	2003e6e8 	.word	0x2003e6e8

000d67d0 <module_user_init_hook>:

void module_user_init_hook()
{
   d67d0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d67d2:	f7fe fc5f 	bl	d5094 <HAL_RNG_GetRandomNumber>
   d67d6:	4604      	mov	r4, r0
    srand(seed);
   d67d8:	f000 ff2c 	bl	d7634 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d67dc:	4b07      	ldr	r3, [pc, #28]	; (d67fc <module_user_init_hook+0x2c>)
   d67de:	b113      	cbz	r3, d67e6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d67e0:	4620      	mov	r0, r4
   d67e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d67e6:	2100      	movs	r1, #0
   d67e8:	4804      	ldr	r0, [pc, #16]	; (d67fc <module_user_init_hook+0x2c>)
   d67ea:	f7fe fe17 	bl	d541c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67ee:	2100      	movs	r1, #0
   d67f0:	4803      	ldr	r0, [pc, #12]	; (d6800 <module_user_init_hook+0x30>)
}
   d67f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67f6:	f7fe bdb5 	b.w	d5364 <system_ctrl_set_app_request_handler>
   d67fa:	bf00      	nop
   d67fc:	00000000 	.word	0x00000000
   d6800:	000d6799 	.word	0x000d6799

000d6804 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6804:	b510      	push	{r4, lr}
   d6806:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6808:	480f      	ldr	r0, [pc, #60]	; (d6848 <pinAvailable+0x44>)
   d680a:	f7ff fc5d 	bl	d60c8 <_ZN8SPIClass9isEnabledEv>
   d680e:	b128      	cbz	r0, d681c <pinAvailable+0x18>
   d6810:	f1a4 030b 	sub.w	r3, r4, #11
   d6814:	2b02      	cmp	r3, #2
   d6816:	d801      	bhi.n	d681c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6818:	2000      	movs	r0, #0
   d681a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d681c:	f000 f83e 	bl	d689c <_Z19__fetch_global_Wirev>
   d6820:	f7ff f9f4 	bl	d5c0c <_ZN7TwoWire9isEnabledEv>
   d6824:	b108      	cbz	r0, d682a <pinAvailable+0x26>
   d6826:	2c01      	cmp	r4, #1
   d6828:	d9f6      	bls.n	d6818 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d682a:	f7ff fddb 	bl	d63e4 <_Z22__fetch_global_Serial1v>
   d682e:	f7ff fdd5 	bl	d63dc <_ZN11USARTSerial9isEnabledEv>
   d6832:	b118      	cbz	r0, d683c <pinAvailable+0x38>
   d6834:	f1a4 0309 	sub.w	r3, r4, #9
   d6838:	2b01      	cmp	r3, #1
   d683a:	d9ed      	bls.n	d6818 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d683c:	2c23      	cmp	r4, #35	; 0x23
   d683e:	bf8c      	ite	hi
   d6840:	2000      	movhi	r0, #0
   d6842:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6844:	bd10      	pop	{r4, pc}
   d6846:	bf00      	nop
   d6848:	2003e708 	.word	0x2003e708

000d684c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d684c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d684e:	b538      	push	{r3, r4, r5, lr}
   d6850:	4604      	mov	r4, r0
   d6852:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6854:	d80a      	bhi.n	d686c <pinMode+0x20>
   d6856:	29ff      	cmp	r1, #255	; 0xff
   d6858:	d008      	beq.n	d686c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d685a:	f7ff ffd3 	bl	d6804 <pinAvailable>
   d685e:	b128      	cbz	r0, d686c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6860:	4629      	mov	r1, r5
   d6862:	4620      	mov	r0, r4
}
   d6864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6868:	f7fe bc4c 	b.w	d5104 <HAL_Pin_Mode>
   d686c:	bd38      	pop	{r3, r4, r5, pc}

000d686e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d686e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6870:	b510      	push	{r4, lr}
   d6872:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6874:	bf9c      	itt	ls
   d6876:	340e      	addls	r4, #14
   d6878:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d687a:	4620      	mov	r0, r4
   d687c:	f7ff ffc2 	bl	d6804 <pinAvailable>
   d6880:	b150      	cbz	r0, d6898 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6882:	2103      	movs	r1, #3
   d6884:	4620      	mov	r0, r4
   d6886:	f7fe fc35 	bl	d50f4 <HAL_Validate_Pin_Function>
   d688a:	2803      	cmp	r0, #3
   d688c:	d104      	bne.n	d6898 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d688e:	4620      	mov	r0, r4
}
   d6890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6894:	f7fe bc4e 	b.w	d5134 <HAL_ADC_Read>
}
   d6898:	2000      	movs	r0, #0
   d689a:	bd10      	pop	{r4, pc}

000d689c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d689c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d689e:	4d0b      	ldr	r5, [pc, #44]	; (d68cc <_Z19__fetch_global_Wirev+0x30>)
   d68a0:	6829      	ldr	r1, [r5, #0]
   d68a2:	f011 0401 	ands.w	r4, r1, #1
   d68a6:	d10f      	bne.n	d68c8 <_Z19__fetch_global_Wirev+0x2c>
   d68a8:	4628      	mov	r0, r5
   d68aa:	f7fd fbfa 	bl	d40a2 <__cxa_guard_acquire>
   d68ae:	b158      	cbz	r0, d68c8 <_Z19__fetch_global_Wirev+0x2c>
   d68b0:	4621      	mov	r1, r4
   d68b2:	4807      	ldr	r0, [pc, #28]	; (d68d0 <_Z19__fetch_global_Wirev+0x34>)
   d68b4:	f7ff f998 	bl	d5be8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d68b8:	4628      	mov	r0, r5
   d68ba:	f7fd fbf7 	bl	d40ac <__cxa_guard_release>
   d68be:	4a05      	ldr	r2, [pc, #20]	; (d68d4 <_Z19__fetch_global_Wirev+0x38>)
   d68c0:	4905      	ldr	r1, [pc, #20]	; (d68d8 <_Z19__fetch_global_Wirev+0x3c>)
   d68c2:	4803      	ldr	r0, [pc, #12]	; (d68d0 <_Z19__fetch_global_Wirev+0x34>)
   d68c4:	f000 f82c 	bl	d6920 <__aeabi_atexit>
	return wire;
}
   d68c8:	4801      	ldr	r0, [pc, #4]	; (d68d0 <_Z19__fetch_global_Wirev+0x34>)
   d68ca:	bd38      	pop	{r3, r4, r5, pc}
   d68cc:	2003e6f0 	.word	0x2003e6f0
   d68d0:	2003e6f4 	.word	0x2003e6f4
   d68d4:	2003e2e4 	.word	0x2003e2e4
   d68d8:	000d5b91 	.word	0x000d5b91

000d68dc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68dc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d68de:	4c0c      	ldr	r4, [pc, #48]	; (d6910 <_GLOBAL__sub_I_SPI+0x34>)
   d68e0:	4e0c      	ldr	r6, [pc, #48]	; (d6914 <_GLOBAL__sub_I_SPI+0x38>)
   d68e2:	4d0d      	ldr	r5, [pc, #52]	; (d6918 <_GLOBAL__sub_I_SPI+0x3c>)
   d68e4:	2100      	movs	r1, #0
   d68e6:	4620      	mov	r0, r4
   d68e8:	f7ff fbda 	bl	d60a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d68ec:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68ee:	4c0b      	ldr	r4, [pc, #44]	; (d691c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d68f0:	4632      	mov	r2, r6
   d68f2:	4629      	mov	r1, r5
   d68f4:	f000 f814 	bl	d6920 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68f8:	2101      	movs	r1, #1
   d68fa:	4620      	mov	r0, r4
   d68fc:	f7ff fbd0 	bl	d60a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6900:	4632      	mov	r2, r6
   d6902:	4629      	mov	r1, r5
   d6904:	4620      	mov	r0, r4
   d6906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d690a:	f000 b809 	b.w	d6920 <__aeabi_atexit>
   d690e:	bf00      	nop
   d6910:	2003e708 	.word	0x2003e708
   d6914:	2003e2e4 	.word	0x2003e2e4
   d6918:	000d6091 	.word	0x000d6091
   d691c:	2003e718 	.word	0x2003e718

000d6920 <__aeabi_atexit>:
   d6920:	460b      	mov	r3, r1
   d6922:	4601      	mov	r1, r0
   d6924:	4618      	mov	r0, r3
   d6926:	f000 bd6b 	b.w	d7400 <__cxa_atexit>

000d692a <_ZdlPvj>:
   d692a:	f7fd bbb6 	b.w	d409a <_ZdlPv>

000d692e <_ZSt25__throw_bad_function_callv>:
   d692e:	b508      	push	{r3, lr}
   d6930:	f7fe fdf4 	bl	d551c <abort>

000d6934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6934:	4b24      	ldr	r3, [pc, #144]	; (d69c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6936:	681a      	ldr	r2, [r3, #0]
   d6938:	07d0      	lsls	r0, r2, #31
   d693a:	bf5c      	itt	pl
   d693c:	2201      	movpl	r2, #1
   d693e:	601a      	strpl	r2, [r3, #0]
   d6940:	4b22      	ldr	r3, [pc, #136]	; (d69cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6942:	681a      	ldr	r2, [r3, #0]
   d6944:	07d1      	lsls	r1, r2, #31
   d6946:	bf5c      	itt	pl
   d6948:	2201      	movpl	r2, #1
   d694a:	601a      	strpl	r2, [r3, #0]
   d694c:	4b20      	ldr	r3, [pc, #128]	; (d69d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d694e:	681a      	ldr	r2, [r3, #0]
   d6950:	07d2      	lsls	r2, r2, #31
   d6952:	bf5c      	itt	pl
   d6954:	2201      	movpl	r2, #1
   d6956:	601a      	strpl	r2, [r3, #0]
   d6958:	4b1e      	ldr	r3, [pc, #120]	; (d69d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d695a:	681a      	ldr	r2, [r3, #0]
   d695c:	07d0      	lsls	r0, r2, #31
   d695e:	bf5c      	itt	pl
   d6960:	2201      	movpl	r2, #1
   d6962:	601a      	strpl	r2, [r3, #0]
   d6964:	4b1c      	ldr	r3, [pc, #112]	; (d69d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6966:	681a      	ldr	r2, [r3, #0]
   d6968:	07d1      	lsls	r1, r2, #31
   d696a:	bf5c      	itt	pl
   d696c:	2201      	movpl	r2, #1
   d696e:	601a      	strpl	r2, [r3, #0]
   d6970:	4b1a      	ldr	r3, [pc, #104]	; (d69dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6972:	681a      	ldr	r2, [r3, #0]
   d6974:	07d2      	lsls	r2, r2, #31
   d6976:	bf5c      	itt	pl
   d6978:	2201      	movpl	r2, #1
   d697a:	601a      	strpl	r2, [r3, #0]
   d697c:	4b18      	ldr	r3, [pc, #96]	; (d69e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d697e:	681a      	ldr	r2, [r3, #0]
   d6980:	07d0      	lsls	r0, r2, #31
   d6982:	bf5c      	itt	pl
   d6984:	2201      	movpl	r2, #1
   d6986:	601a      	strpl	r2, [r3, #0]
   d6988:	4b16      	ldr	r3, [pc, #88]	; (d69e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d698a:	681a      	ldr	r2, [r3, #0]
   d698c:	07d1      	lsls	r1, r2, #31
   d698e:	bf5c      	itt	pl
   d6990:	2201      	movpl	r2, #1
   d6992:	601a      	strpl	r2, [r3, #0]
   d6994:	4b14      	ldr	r3, [pc, #80]	; (d69e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6996:	681a      	ldr	r2, [r3, #0]
   d6998:	07d2      	lsls	r2, r2, #31
   d699a:	bf5c      	itt	pl
   d699c:	2201      	movpl	r2, #1
   d699e:	601a      	strpl	r2, [r3, #0]
   d69a0:	4b12      	ldr	r3, [pc, #72]	; (d69ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d69a2:	681a      	ldr	r2, [r3, #0]
   d69a4:	07d0      	lsls	r0, r2, #31
   d69a6:	bf5c      	itt	pl
   d69a8:	2201      	movpl	r2, #1
   d69aa:	601a      	strpl	r2, [r3, #0]
   d69ac:	4b10      	ldr	r3, [pc, #64]	; (d69f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d69ae:	681a      	ldr	r2, [r3, #0]
   d69b0:	07d1      	lsls	r1, r2, #31
   d69b2:	bf5c      	itt	pl
   d69b4:	2201      	movpl	r2, #1
   d69b6:	601a      	strpl	r2, [r3, #0]
   d69b8:	4b0e      	ldr	r3, [pc, #56]	; (d69f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d69ba:	681a      	ldr	r2, [r3, #0]
   d69bc:	07d2      	lsls	r2, r2, #31
   d69be:	bf5c      	itt	pl
   d69c0:	2201      	movpl	r2, #1
   d69c2:	601a      	strpl	r2, [r3, #0]
   d69c4:	4770      	bx	lr
   d69c6:	bf00      	nop
   d69c8:	2003e754 	.word	0x2003e754
   d69cc:	2003e750 	.word	0x2003e750
   d69d0:	2003e74c 	.word	0x2003e74c
   d69d4:	2003e748 	.word	0x2003e748
   d69d8:	2003e744 	.word	0x2003e744
   d69dc:	2003e740 	.word	0x2003e740
   d69e0:	2003e73c 	.word	0x2003e73c
   d69e4:	2003e738 	.word	0x2003e738
   d69e8:	2003e734 	.word	0x2003e734
   d69ec:	2003e730 	.word	0x2003e730
   d69f0:	2003e72c 	.word	0x2003e72c
   d69f4:	2003e728 	.word	0x2003e728

000d69f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d69f8:	4b18      	ldr	r3, [pc, #96]	; (d6a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d69fa:	681a      	ldr	r2, [r3, #0]
   d69fc:	07d1      	lsls	r1, r2, #31
   d69fe:	bf5c      	itt	pl
   d6a00:	2201      	movpl	r2, #1
   d6a02:	601a      	strpl	r2, [r3, #0]
   d6a04:	4b16      	ldr	r3, [pc, #88]	; (d6a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a06:	681a      	ldr	r2, [r3, #0]
   d6a08:	07d2      	lsls	r2, r2, #31
   d6a0a:	bf5c      	itt	pl
   d6a0c:	2201      	movpl	r2, #1
   d6a0e:	601a      	strpl	r2, [r3, #0]
   d6a10:	4b14      	ldr	r3, [pc, #80]	; (d6a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a12:	681a      	ldr	r2, [r3, #0]
   d6a14:	07d0      	lsls	r0, r2, #31
   d6a16:	bf5c      	itt	pl
   d6a18:	2201      	movpl	r2, #1
   d6a1a:	601a      	strpl	r2, [r3, #0]
   d6a1c:	4b12      	ldr	r3, [pc, #72]	; (d6a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a1e:	681a      	ldr	r2, [r3, #0]
   d6a20:	07d1      	lsls	r1, r2, #31
   d6a22:	bf5c      	itt	pl
   d6a24:	2201      	movpl	r2, #1
   d6a26:	601a      	strpl	r2, [r3, #0]
   d6a28:	4b10      	ldr	r3, [pc, #64]	; (d6a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a2a:	681a      	ldr	r2, [r3, #0]
   d6a2c:	07d2      	lsls	r2, r2, #31
   d6a2e:	bf5c      	itt	pl
   d6a30:	2201      	movpl	r2, #1
   d6a32:	601a      	strpl	r2, [r3, #0]
   d6a34:	4b0e      	ldr	r3, [pc, #56]	; (d6a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a36:	681a      	ldr	r2, [r3, #0]
   d6a38:	07d0      	lsls	r0, r2, #31
   d6a3a:	bf5c      	itt	pl
   d6a3c:	2201      	movpl	r2, #1
   d6a3e:	601a      	strpl	r2, [r3, #0]
   d6a40:	4b0c      	ldr	r3, [pc, #48]	; (d6a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a42:	681a      	ldr	r2, [r3, #0]
   d6a44:	07d1      	lsls	r1, r2, #31
   d6a46:	bf5c      	itt	pl
   d6a48:	2201      	movpl	r2, #1
   d6a4a:	601a      	strpl	r2, [r3, #0]
   d6a4c:	4b0a      	ldr	r3, [pc, #40]	; (d6a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6a4e:	681a      	ldr	r2, [r3, #0]
   d6a50:	07d2      	lsls	r2, r2, #31
   d6a52:	bf5c      	itt	pl
   d6a54:	2201      	movpl	r2, #1
   d6a56:	601a      	strpl	r2, [r3, #0]
   d6a58:	4770      	bx	lr
   d6a5a:	bf00      	nop
   d6a5c:	2003e774 	.word	0x2003e774
   d6a60:	2003e770 	.word	0x2003e770
   d6a64:	2003e76c 	.word	0x2003e76c
   d6a68:	2003e768 	.word	0x2003e768
   d6a6c:	2003e764 	.word	0x2003e764
   d6a70:	2003e760 	.word	0x2003e760
   d6a74:	2003e75c 	.word	0x2003e75c
   d6a78:	2003e758 	.word	0x2003e758

000d6a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a7c:	4b18      	ldr	r3, [pc, #96]	; (d6ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a7e:	681a      	ldr	r2, [r3, #0]
   d6a80:	07d1      	lsls	r1, r2, #31
   d6a82:	bf5c      	itt	pl
   d6a84:	2201      	movpl	r2, #1
   d6a86:	601a      	strpl	r2, [r3, #0]
   d6a88:	4b16      	ldr	r3, [pc, #88]	; (d6ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d2      	lsls	r2, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b14      	ldr	r3, [pc, #80]	; (d6ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d0      	lsls	r0, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b12      	ldr	r3, [pc, #72]	; (d6aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d1      	lsls	r1, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b10      	ldr	r3, [pc, #64]	; (d6af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d2      	lsls	r2, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4b0e      	ldr	r3, [pc, #56]	; (d6af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d0      	lsls	r0, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b0c      	ldr	r3, [pc, #48]	; (d6af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d1      	lsls	r1, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4b0a      	ldr	r3, [pc, #40]	; (d6afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d2      	lsls	r2, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4770      	bx	lr
   d6ade:	bf00      	nop
   d6ae0:	2003e794 	.word	0x2003e794
   d6ae4:	2003e790 	.word	0x2003e790
   d6ae8:	2003e78c 	.word	0x2003e78c
   d6aec:	2003e788 	.word	0x2003e788
   d6af0:	2003e784 	.word	0x2003e784
   d6af4:	2003e780 	.word	0x2003e780
   d6af8:	2003e77c 	.word	0x2003e77c
   d6afc:	2003e778 	.word	0x2003e778

000d6b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6b00:	4b24      	ldr	r3, [pc, #144]	; (d6b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6b02:	681a      	ldr	r2, [r3, #0]
   d6b04:	07d0      	lsls	r0, r2, #31
   d6b06:	bf5c      	itt	pl
   d6b08:	2201      	movpl	r2, #1
   d6b0a:	601a      	strpl	r2, [r3, #0]
   d6b0c:	4b22      	ldr	r3, [pc, #136]	; (d6b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d1      	lsls	r1, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b20      	ldr	r3, [pc, #128]	; (d6b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d2      	lsls	r2, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b1e      	ldr	r3, [pc, #120]	; (d6ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d0      	lsls	r0, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b1c      	ldr	r3, [pc, #112]	; (d6ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d1      	lsls	r1, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b1a      	ldr	r3, [pc, #104]	; (d6ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d2      	lsls	r2, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4b18      	ldr	r3, [pc, #96]	; (d6bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6b4a:	681a      	ldr	r2, [r3, #0]
   d6b4c:	07d0      	lsls	r0, r2, #31
   d6b4e:	bf5c      	itt	pl
   d6b50:	2201      	movpl	r2, #1
   d6b52:	601a      	strpl	r2, [r3, #0]
   d6b54:	4b16      	ldr	r3, [pc, #88]	; (d6bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6b56:	681a      	ldr	r2, [r3, #0]
   d6b58:	07d1      	lsls	r1, r2, #31
   d6b5a:	bf5c      	itt	pl
   d6b5c:	2201      	movpl	r2, #1
   d6b5e:	601a      	strpl	r2, [r3, #0]
   d6b60:	4b14      	ldr	r3, [pc, #80]	; (d6bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6b62:	681a      	ldr	r2, [r3, #0]
   d6b64:	07d2      	lsls	r2, r2, #31
   d6b66:	bf5c      	itt	pl
   d6b68:	2201      	movpl	r2, #1
   d6b6a:	601a      	strpl	r2, [r3, #0]
   d6b6c:	4b12      	ldr	r3, [pc, #72]	; (d6bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6b6e:	681a      	ldr	r2, [r3, #0]
   d6b70:	07d0      	lsls	r0, r2, #31
   d6b72:	bf5c      	itt	pl
   d6b74:	2201      	movpl	r2, #1
   d6b76:	601a      	strpl	r2, [r3, #0]
   d6b78:	4b10      	ldr	r3, [pc, #64]	; (d6bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6b7a:	681a      	ldr	r2, [r3, #0]
   d6b7c:	07d1      	lsls	r1, r2, #31
   d6b7e:	bf5c      	itt	pl
   d6b80:	2201      	movpl	r2, #1
   d6b82:	601a      	strpl	r2, [r3, #0]
   d6b84:	4b0e      	ldr	r3, [pc, #56]	; (d6bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6b86:	681a      	ldr	r2, [r3, #0]
   d6b88:	07d2      	lsls	r2, r2, #31
   d6b8a:	bf5c      	itt	pl
   d6b8c:	2201      	movpl	r2, #1
   d6b8e:	601a      	strpl	r2, [r3, #0]
   d6b90:	4770      	bx	lr
   d6b92:	bf00      	nop
   d6b94:	2003e7c4 	.word	0x2003e7c4
   d6b98:	2003e7c0 	.word	0x2003e7c0
   d6b9c:	2003e7bc 	.word	0x2003e7bc
   d6ba0:	2003e7b8 	.word	0x2003e7b8
   d6ba4:	2003e7b4 	.word	0x2003e7b4
   d6ba8:	2003e7b0 	.word	0x2003e7b0
   d6bac:	2003e7ac 	.word	0x2003e7ac
   d6bb0:	2003e7a8 	.word	0x2003e7a8
   d6bb4:	2003e7a4 	.word	0x2003e7a4
   d6bb8:	2003e7a0 	.word	0x2003e7a0
   d6bbc:	2003e79c 	.word	0x2003e79c
   d6bc0:	2003e798 	.word	0x2003e798

000d6bc4 <__aeabi_drsub>:
   d6bc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6bc8:	e002      	b.n	d6bd0 <__adddf3>
   d6bca:	bf00      	nop

000d6bcc <__aeabi_dsub>:
   d6bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6bd0 <__adddf3>:
   d6bd0:	b530      	push	{r4, r5, lr}
   d6bd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6bd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6bda:	ea94 0f05 	teq	r4, r5
   d6bde:	bf08      	it	eq
   d6be0:	ea90 0f02 	teqeq	r0, r2
   d6be4:	bf1f      	itttt	ne
   d6be6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6bea:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6bee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6bf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6bf6:	f000 80e2 	beq.w	d6dbe <__adddf3+0x1ee>
   d6bfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6bfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c02:	bfb8      	it	lt
   d6c04:	426d      	neglt	r5, r5
   d6c06:	dd0c      	ble.n	d6c22 <__adddf3+0x52>
   d6c08:	442c      	add	r4, r5
   d6c0a:	ea80 0202 	eor.w	r2, r0, r2
   d6c0e:	ea81 0303 	eor.w	r3, r1, r3
   d6c12:	ea82 0000 	eor.w	r0, r2, r0
   d6c16:	ea83 0101 	eor.w	r1, r3, r1
   d6c1a:	ea80 0202 	eor.w	r2, r0, r2
   d6c1e:	ea81 0303 	eor.w	r3, r1, r3
   d6c22:	2d36      	cmp	r5, #54	; 0x36
   d6c24:	bf88      	it	hi
   d6c26:	bd30      	pophi	{r4, r5, pc}
   d6c28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c38:	d002      	beq.n	d6c40 <__adddf3+0x70>
   d6c3a:	4240      	negs	r0, r0
   d6c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c4c:	d002      	beq.n	d6c54 <__adddf3+0x84>
   d6c4e:	4252      	negs	r2, r2
   d6c50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c54:	ea94 0f05 	teq	r4, r5
   d6c58:	f000 80a7 	beq.w	d6daa <__adddf3+0x1da>
   d6c5c:	f1a4 0401 	sub.w	r4, r4, #1
   d6c60:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c64:	db0d      	blt.n	d6c82 <__adddf3+0xb2>
   d6c66:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c6a:	fa22 f205 	lsr.w	r2, r2, r5
   d6c6e:	1880      	adds	r0, r0, r2
   d6c70:	f141 0100 	adc.w	r1, r1, #0
   d6c74:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c78:	1880      	adds	r0, r0, r2
   d6c7a:	fa43 f305 	asr.w	r3, r3, r5
   d6c7e:	4159      	adcs	r1, r3
   d6c80:	e00e      	b.n	d6ca0 <__adddf3+0xd0>
   d6c82:	f1a5 0520 	sub.w	r5, r5, #32
   d6c86:	f10e 0e20 	add.w	lr, lr, #32
   d6c8a:	2a01      	cmp	r2, #1
   d6c8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c90:	bf28      	it	cs
   d6c92:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c96:	fa43 f305 	asr.w	r3, r3, r5
   d6c9a:	18c0      	adds	r0, r0, r3
   d6c9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ca4:	d507      	bpl.n	d6cb6 <__adddf3+0xe6>
   d6ca6:	f04f 0e00 	mov.w	lr, #0
   d6caa:	f1dc 0c00 	rsbs	ip, ip, #0
   d6cae:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6cb2:	eb6e 0101 	sbc.w	r1, lr, r1
   d6cb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6cba:	d31b      	bcc.n	d6cf4 <__adddf3+0x124>
   d6cbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6cc0:	d30c      	bcc.n	d6cdc <__adddf3+0x10c>
   d6cc2:	0849      	lsrs	r1, r1, #1
   d6cc4:	ea5f 0030 	movs.w	r0, r0, rrx
   d6cc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6ccc:	f104 0401 	add.w	r4, r4, #1
   d6cd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6cd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6cd8:	f080 809a 	bcs.w	d6e10 <__adddf3+0x240>
   d6cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6ce0:	bf08      	it	eq
   d6ce2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6ce6:	f150 0000 	adcs.w	r0, r0, #0
   d6cea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6cee:	ea41 0105 	orr.w	r1, r1, r5
   d6cf2:	bd30      	pop	{r4, r5, pc}
   d6cf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6cf8:	4140      	adcs	r0, r0
   d6cfa:	eb41 0101 	adc.w	r1, r1, r1
   d6cfe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d02:	f1a4 0401 	sub.w	r4, r4, #1
   d6d06:	d1e9      	bne.n	d6cdc <__adddf3+0x10c>
   d6d08:	f091 0f00 	teq	r1, #0
   d6d0c:	bf04      	itt	eq
   d6d0e:	4601      	moveq	r1, r0
   d6d10:	2000      	moveq	r0, #0
   d6d12:	fab1 f381 	clz	r3, r1
   d6d16:	bf08      	it	eq
   d6d18:	3320      	addeq	r3, #32
   d6d1a:	f1a3 030b 	sub.w	r3, r3, #11
   d6d1e:	f1b3 0220 	subs.w	r2, r3, #32
   d6d22:	da0c      	bge.n	d6d3e <__adddf3+0x16e>
   d6d24:	320c      	adds	r2, #12
   d6d26:	dd08      	ble.n	d6d3a <__adddf3+0x16a>
   d6d28:	f102 0c14 	add.w	ip, r2, #20
   d6d2c:	f1c2 020c 	rsb	r2, r2, #12
   d6d30:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d34:	fa21 f102 	lsr.w	r1, r1, r2
   d6d38:	e00c      	b.n	d6d54 <__adddf3+0x184>
   d6d3a:	f102 0214 	add.w	r2, r2, #20
   d6d3e:	bfd8      	it	le
   d6d40:	f1c2 0c20 	rsble	ip, r2, #32
   d6d44:	fa01 f102 	lsl.w	r1, r1, r2
   d6d48:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d4c:	bfdc      	itt	le
   d6d4e:	ea41 010c 	orrle.w	r1, r1, ip
   d6d52:	4090      	lslle	r0, r2
   d6d54:	1ae4      	subs	r4, r4, r3
   d6d56:	bfa2      	ittt	ge
   d6d58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d5c:	4329      	orrge	r1, r5
   d6d5e:	bd30      	popge	{r4, r5, pc}
   d6d60:	ea6f 0404 	mvn.w	r4, r4
   d6d64:	3c1f      	subs	r4, #31
   d6d66:	da1c      	bge.n	d6da2 <__adddf3+0x1d2>
   d6d68:	340c      	adds	r4, #12
   d6d6a:	dc0e      	bgt.n	d6d8a <__adddf3+0x1ba>
   d6d6c:	f104 0414 	add.w	r4, r4, #20
   d6d70:	f1c4 0220 	rsb	r2, r4, #32
   d6d74:	fa20 f004 	lsr.w	r0, r0, r4
   d6d78:	fa01 f302 	lsl.w	r3, r1, r2
   d6d7c:	ea40 0003 	orr.w	r0, r0, r3
   d6d80:	fa21 f304 	lsr.w	r3, r1, r4
   d6d84:	ea45 0103 	orr.w	r1, r5, r3
   d6d88:	bd30      	pop	{r4, r5, pc}
   d6d8a:	f1c4 040c 	rsb	r4, r4, #12
   d6d8e:	f1c4 0220 	rsb	r2, r4, #32
   d6d92:	fa20 f002 	lsr.w	r0, r0, r2
   d6d96:	fa01 f304 	lsl.w	r3, r1, r4
   d6d9a:	ea40 0003 	orr.w	r0, r0, r3
   d6d9e:	4629      	mov	r1, r5
   d6da0:	bd30      	pop	{r4, r5, pc}
   d6da2:	fa21 f004 	lsr.w	r0, r1, r4
   d6da6:	4629      	mov	r1, r5
   d6da8:	bd30      	pop	{r4, r5, pc}
   d6daa:	f094 0f00 	teq	r4, #0
   d6dae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6db2:	bf06      	itte	eq
   d6db4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6db8:	3401      	addeq	r4, #1
   d6dba:	3d01      	subne	r5, #1
   d6dbc:	e74e      	b.n	d6c5c <__adddf3+0x8c>
   d6dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dc2:	bf18      	it	ne
   d6dc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6dc8:	d029      	beq.n	d6e1e <__adddf3+0x24e>
   d6dca:	ea94 0f05 	teq	r4, r5
   d6dce:	bf08      	it	eq
   d6dd0:	ea90 0f02 	teqeq	r0, r2
   d6dd4:	d005      	beq.n	d6de2 <__adddf3+0x212>
   d6dd6:	ea54 0c00 	orrs.w	ip, r4, r0
   d6dda:	bf04      	itt	eq
   d6ddc:	4619      	moveq	r1, r3
   d6dde:	4610      	moveq	r0, r2
   d6de0:	bd30      	pop	{r4, r5, pc}
   d6de2:	ea91 0f03 	teq	r1, r3
   d6de6:	bf1e      	ittt	ne
   d6de8:	2100      	movne	r1, #0
   d6dea:	2000      	movne	r0, #0
   d6dec:	bd30      	popne	{r4, r5, pc}
   d6dee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6df2:	d105      	bne.n	d6e00 <__adddf3+0x230>
   d6df4:	0040      	lsls	r0, r0, #1
   d6df6:	4149      	adcs	r1, r1
   d6df8:	bf28      	it	cs
   d6dfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6dfe:	bd30      	pop	{r4, r5, pc}
   d6e00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e04:	bf3c      	itt	cc
   d6e06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e0a:	bd30      	popcc	{r4, r5, pc}
   d6e0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e18:	f04f 0000 	mov.w	r0, #0
   d6e1c:	bd30      	pop	{r4, r5, pc}
   d6e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e22:	bf1a      	itte	ne
   d6e24:	4619      	movne	r1, r3
   d6e26:	4610      	movne	r0, r2
   d6e28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e2c:	bf1c      	itt	ne
   d6e2e:	460b      	movne	r3, r1
   d6e30:	4602      	movne	r2, r0
   d6e32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e36:	bf06      	itte	eq
   d6e38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e3c:	ea91 0f03 	teqeq	r1, r3
   d6e40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e44:	bd30      	pop	{r4, r5, pc}
   d6e46:	bf00      	nop

000d6e48 <__aeabi_ui2d>:
   d6e48:	f090 0f00 	teq	r0, #0
   d6e4c:	bf04      	itt	eq
   d6e4e:	2100      	moveq	r1, #0
   d6e50:	4770      	bxeq	lr
   d6e52:	b530      	push	{r4, r5, lr}
   d6e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e5c:	f04f 0500 	mov.w	r5, #0
   d6e60:	f04f 0100 	mov.w	r1, #0
   d6e64:	e750      	b.n	d6d08 <__adddf3+0x138>
   d6e66:	bf00      	nop

000d6e68 <__aeabi_i2d>:
   d6e68:	f090 0f00 	teq	r0, #0
   d6e6c:	bf04      	itt	eq
   d6e6e:	2100      	moveq	r1, #0
   d6e70:	4770      	bxeq	lr
   d6e72:	b530      	push	{r4, r5, lr}
   d6e74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e80:	bf48      	it	mi
   d6e82:	4240      	negmi	r0, r0
   d6e84:	f04f 0100 	mov.w	r1, #0
   d6e88:	e73e      	b.n	d6d08 <__adddf3+0x138>
   d6e8a:	bf00      	nop

000d6e8c <__aeabi_f2d>:
   d6e8c:	0042      	lsls	r2, r0, #1
   d6e8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e92:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e9a:	bf1f      	itttt	ne
   d6e9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6ea0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ea4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6ea8:	4770      	bxne	lr
   d6eaa:	f092 0f00 	teq	r2, #0
   d6eae:	bf14      	ite	ne
   d6eb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6eb4:	4770      	bxeq	lr
   d6eb6:	b530      	push	{r4, r5, lr}
   d6eb8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ec4:	e720      	b.n	d6d08 <__adddf3+0x138>
   d6ec6:	bf00      	nop

000d6ec8 <__aeabi_ul2d>:
   d6ec8:	ea50 0201 	orrs.w	r2, r0, r1
   d6ecc:	bf08      	it	eq
   d6ece:	4770      	bxeq	lr
   d6ed0:	b530      	push	{r4, r5, lr}
   d6ed2:	f04f 0500 	mov.w	r5, #0
   d6ed6:	e00a      	b.n	d6eee <__aeabi_l2d+0x16>

000d6ed8 <__aeabi_l2d>:
   d6ed8:	ea50 0201 	orrs.w	r2, r0, r1
   d6edc:	bf08      	it	eq
   d6ede:	4770      	bxeq	lr
   d6ee0:	b530      	push	{r4, r5, lr}
   d6ee2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6ee6:	d502      	bpl.n	d6eee <__aeabi_l2d+0x16>
   d6ee8:	4240      	negs	r0, r0
   d6eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6eee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ef2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ef6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6efa:	f43f aedc 	beq.w	d6cb6 <__adddf3+0xe6>
   d6efe:	f04f 0203 	mov.w	r2, #3
   d6f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f06:	bf18      	it	ne
   d6f08:	3203      	addne	r2, #3
   d6f0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f0e:	bf18      	it	ne
   d6f10:	3203      	addne	r2, #3
   d6f12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f16:	f1c2 0320 	rsb	r3, r2, #32
   d6f1a:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f1e:	fa20 f002 	lsr.w	r0, r0, r2
   d6f22:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f26:	ea40 000e 	orr.w	r0, r0, lr
   d6f2a:	fa21 f102 	lsr.w	r1, r1, r2
   d6f2e:	4414      	add	r4, r2
   d6f30:	e6c1      	b.n	d6cb6 <__adddf3+0xe6>
   d6f32:	bf00      	nop

000d6f34 <__aeabi_dmul>:
   d6f34:	b570      	push	{r4, r5, r6, lr}
   d6f36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f42:	bf1d      	ittte	ne
   d6f44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f48:	ea94 0f0c 	teqne	r4, ip
   d6f4c:	ea95 0f0c 	teqne	r5, ip
   d6f50:	f000 f8de 	bleq	d7110 <__aeabi_dmul+0x1dc>
   d6f54:	442c      	add	r4, r5
   d6f56:	ea81 0603 	eor.w	r6, r1, r3
   d6f5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f66:	bf18      	it	ne
   d6f68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f74:	d038      	beq.n	d6fe8 <__aeabi_dmul+0xb4>
   d6f76:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f7a:	f04f 0500 	mov.w	r5, #0
   d6f7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f86:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f8a:	f04f 0600 	mov.w	r6, #0
   d6f8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f92:	f09c 0f00 	teq	ip, #0
   d6f96:	bf18      	it	ne
   d6f98:	f04e 0e01 	orrne.w	lr, lr, #1
   d6f9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6fa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6fa8:	d204      	bcs.n	d6fb4 <__aeabi_dmul+0x80>
   d6faa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6fae:	416d      	adcs	r5, r5
   d6fb0:	eb46 0606 	adc.w	r6, r6, r6
   d6fb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6fb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6fbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6fc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6fc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6fc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6fcc:	bf88      	it	hi
   d6fce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6fd2:	d81e      	bhi.n	d7012 <__aeabi_dmul+0xde>
   d6fd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6fd8:	bf08      	it	eq
   d6fda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6fde:	f150 0000 	adcs.w	r0, r0, #0
   d6fe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6fe6:	bd70      	pop	{r4, r5, r6, pc}
   d6fe8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6fec:	ea46 0101 	orr.w	r1, r6, r1
   d6ff0:	ea40 0002 	orr.w	r0, r0, r2
   d6ff4:	ea81 0103 	eor.w	r1, r1, r3
   d6ff8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6ffc:	bfc2      	ittt	gt
   d6ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7006:	bd70      	popgt	{r4, r5, r6, pc}
   d7008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d700c:	f04f 0e00 	mov.w	lr, #0
   d7010:	3c01      	subs	r4, #1
   d7012:	f300 80ab 	bgt.w	d716c <__aeabi_dmul+0x238>
   d7016:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d701a:	bfde      	ittt	le
   d701c:	2000      	movle	r0, #0
   d701e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7022:	bd70      	pople	{r4, r5, r6, pc}
   d7024:	f1c4 0400 	rsb	r4, r4, #0
   d7028:	3c20      	subs	r4, #32
   d702a:	da35      	bge.n	d7098 <__aeabi_dmul+0x164>
   d702c:	340c      	adds	r4, #12
   d702e:	dc1b      	bgt.n	d7068 <__aeabi_dmul+0x134>
   d7030:	f104 0414 	add.w	r4, r4, #20
   d7034:	f1c4 0520 	rsb	r5, r4, #32
   d7038:	fa00 f305 	lsl.w	r3, r0, r5
   d703c:	fa20 f004 	lsr.w	r0, r0, r4
   d7040:	fa01 f205 	lsl.w	r2, r1, r5
   d7044:	ea40 0002 	orr.w	r0, r0, r2
   d7048:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d704c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7054:	fa21 f604 	lsr.w	r6, r1, r4
   d7058:	eb42 0106 	adc.w	r1, r2, r6
   d705c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7060:	bf08      	it	eq
   d7062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7066:	bd70      	pop	{r4, r5, r6, pc}
   d7068:	f1c4 040c 	rsb	r4, r4, #12
   d706c:	f1c4 0520 	rsb	r5, r4, #32
   d7070:	fa00 f304 	lsl.w	r3, r0, r4
   d7074:	fa20 f005 	lsr.w	r0, r0, r5
   d7078:	fa01 f204 	lsl.w	r2, r1, r4
   d707c:	ea40 0002 	orr.w	r0, r0, r2
   d7080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7088:	f141 0100 	adc.w	r1, r1, #0
   d708c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7090:	bf08      	it	eq
   d7092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7096:	bd70      	pop	{r4, r5, r6, pc}
   d7098:	f1c4 0520 	rsb	r5, r4, #32
   d709c:	fa00 f205 	lsl.w	r2, r0, r5
   d70a0:	ea4e 0e02 	orr.w	lr, lr, r2
   d70a4:	fa20 f304 	lsr.w	r3, r0, r4
   d70a8:	fa01 f205 	lsl.w	r2, r1, r5
   d70ac:	ea43 0302 	orr.w	r3, r3, r2
   d70b0:	fa21 f004 	lsr.w	r0, r1, r4
   d70b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70b8:	fa21 f204 	lsr.w	r2, r1, r4
   d70bc:	ea20 0002 	bic.w	r0, r0, r2
   d70c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d70c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70c8:	bf08      	it	eq
   d70ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70ce:	bd70      	pop	{r4, r5, r6, pc}
   d70d0:	f094 0f00 	teq	r4, #0
   d70d4:	d10f      	bne.n	d70f6 <__aeabi_dmul+0x1c2>
   d70d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d70da:	0040      	lsls	r0, r0, #1
   d70dc:	eb41 0101 	adc.w	r1, r1, r1
   d70e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d70e4:	bf08      	it	eq
   d70e6:	3c01      	subeq	r4, #1
   d70e8:	d0f7      	beq.n	d70da <__aeabi_dmul+0x1a6>
   d70ea:	ea41 0106 	orr.w	r1, r1, r6
   d70ee:	f095 0f00 	teq	r5, #0
   d70f2:	bf18      	it	ne
   d70f4:	4770      	bxne	lr
   d70f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d70fa:	0052      	lsls	r2, r2, #1
   d70fc:	eb43 0303 	adc.w	r3, r3, r3
   d7100:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7104:	bf08      	it	eq
   d7106:	3d01      	subeq	r5, #1
   d7108:	d0f7      	beq.n	d70fa <__aeabi_dmul+0x1c6>
   d710a:	ea43 0306 	orr.w	r3, r3, r6
   d710e:	4770      	bx	lr
   d7110:	ea94 0f0c 	teq	r4, ip
   d7114:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7118:	bf18      	it	ne
   d711a:	ea95 0f0c 	teqne	r5, ip
   d711e:	d00c      	beq.n	d713a <__aeabi_dmul+0x206>
   d7120:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7124:	bf18      	it	ne
   d7126:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d712a:	d1d1      	bne.n	d70d0 <__aeabi_dmul+0x19c>
   d712c:	ea81 0103 	eor.w	r1, r1, r3
   d7130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7134:	f04f 0000 	mov.w	r0, #0
   d7138:	bd70      	pop	{r4, r5, r6, pc}
   d713a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d713e:	bf06      	itte	eq
   d7140:	4610      	moveq	r0, r2
   d7142:	4619      	moveq	r1, r3
   d7144:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7148:	d019      	beq.n	d717e <__aeabi_dmul+0x24a>
   d714a:	ea94 0f0c 	teq	r4, ip
   d714e:	d102      	bne.n	d7156 <__aeabi_dmul+0x222>
   d7150:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7154:	d113      	bne.n	d717e <__aeabi_dmul+0x24a>
   d7156:	ea95 0f0c 	teq	r5, ip
   d715a:	d105      	bne.n	d7168 <__aeabi_dmul+0x234>
   d715c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7160:	bf1c      	itt	ne
   d7162:	4610      	movne	r0, r2
   d7164:	4619      	movne	r1, r3
   d7166:	d10a      	bne.n	d717e <__aeabi_dmul+0x24a>
   d7168:	ea81 0103 	eor.w	r1, r1, r3
   d716c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7170:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7174:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7178:	f04f 0000 	mov.w	r0, #0
   d717c:	bd70      	pop	{r4, r5, r6, pc}
   d717e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7182:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7186:	bd70      	pop	{r4, r5, r6, pc}

000d7188 <__aeabi_ddiv>:
   d7188:	b570      	push	{r4, r5, r6, lr}
   d718a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d718e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7196:	bf1d      	ittte	ne
   d7198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d719c:	ea94 0f0c 	teqne	r4, ip
   d71a0:	ea95 0f0c 	teqne	r5, ip
   d71a4:	f000 f8a7 	bleq	d72f6 <__aeabi_ddiv+0x16e>
   d71a8:	eba4 0405 	sub.w	r4, r4, r5
   d71ac:	ea81 0e03 	eor.w	lr, r1, r3
   d71b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d71b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d71b8:	f000 8088 	beq.w	d72cc <__aeabi_ddiv+0x144>
   d71bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d71c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d71c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d71c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d71cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d71d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d71d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d71d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d71dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d71e0:	429d      	cmp	r5, r3
   d71e2:	bf08      	it	eq
   d71e4:	4296      	cmpeq	r6, r2
   d71e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d71ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d71ee:	d202      	bcs.n	d71f6 <__aeabi_ddiv+0x6e>
   d71f0:	085b      	lsrs	r3, r3, #1
   d71f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d71f6:	1ab6      	subs	r6, r6, r2
   d71f8:	eb65 0503 	sbc.w	r5, r5, r3
   d71fc:	085b      	lsrs	r3, r3, #1
   d71fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d7202:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7206:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d720a:	ebb6 0e02 	subs.w	lr, r6, r2
   d720e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7212:	bf22      	ittt	cs
   d7214:	1ab6      	subcs	r6, r6, r2
   d7216:	4675      	movcs	r5, lr
   d7218:	ea40 000c 	orrcs.w	r0, r0, ip
   d721c:	085b      	lsrs	r3, r3, #1
   d721e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7222:	ebb6 0e02 	subs.w	lr, r6, r2
   d7226:	eb75 0e03 	sbcs.w	lr, r5, r3
   d722a:	bf22      	ittt	cs
   d722c:	1ab6      	subcs	r6, r6, r2
   d722e:	4675      	movcs	r5, lr
   d7230:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7234:	085b      	lsrs	r3, r3, #1
   d7236:	ea4f 0232 	mov.w	r2, r2, rrx
   d723a:	ebb6 0e02 	subs.w	lr, r6, r2
   d723e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7242:	bf22      	ittt	cs
   d7244:	1ab6      	subcs	r6, r6, r2
   d7246:	4675      	movcs	r5, lr
   d7248:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d724c:	085b      	lsrs	r3, r3, #1
   d724e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7252:	ebb6 0e02 	subs.w	lr, r6, r2
   d7256:	eb75 0e03 	sbcs.w	lr, r5, r3
   d725a:	bf22      	ittt	cs
   d725c:	1ab6      	subcs	r6, r6, r2
   d725e:	4675      	movcs	r5, lr
   d7260:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7264:	ea55 0e06 	orrs.w	lr, r5, r6
   d7268:	d018      	beq.n	d729c <__aeabi_ddiv+0x114>
   d726a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d726e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7272:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7276:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d727a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d727e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7282:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7286:	d1c0      	bne.n	d720a <__aeabi_ddiv+0x82>
   d7288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d728c:	d10b      	bne.n	d72a6 <__aeabi_ddiv+0x11e>
   d728e:	ea41 0100 	orr.w	r1, r1, r0
   d7292:	f04f 0000 	mov.w	r0, #0
   d7296:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d729a:	e7b6      	b.n	d720a <__aeabi_ddiv+0x82>
   d729c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72a0:	bf04      	itt	eq
   d72a2:	4301      	orreq	r1, r0
   d72a4:	2000      	moveq	r0, #0
   d72a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d72aa:	bf88      	it	hi
   d72ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d72b0:	f63f aeaf 	bhi.w	d7012 <__aeabi_dmul+0xde>
   d72b4:	ebb5 0c03 	subs.w	ip, r5, r3
   d72b8:	bf04      	itt	eq
   d72ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   d72be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d72c2:	f150 0000 	adcs.w	r0, r0, #0
   d72c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d72ca:	bd70      	pop	{r4, r5, r6, pc}
   d72cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d72d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d72d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d72d8:	bfc2      	ittt	gt
   d72da:	ebd4 050c 	rsbsgt	r5, r4, ip
   d72de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d72e2:	bd70      	popgt	{r4, r5, r6, pc}
   d72e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72e8:	f04f 0e00 	mov.w	lr, #0
   d72ec:	3c01      	subs	r4, #1
   d72ee:	e690      	b.n	d7012 <__aeabi_dmul+0xde>
   d72f0:	ea45 0e06 	orr.w	lr, r5, r6
   d72f4:	e68d      	b.n	d7012 <__aeabi_dmul+0xde>
   d72f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d72fa:	ea94 0f0c 	teq	r4, ip
   d72fe:	bf08      	it	eq
   d7300:	ea95 0f0c 	teqeq	r5, ip
   d7304:	f43f af3b 	beq.w	d717e <__aeabi_dmul+0x24a>
   d7308:	ea94 0f0c 	teq	r4, ip
   d730c:	d10a      	bne.n	d7324 <__aeabi_ddiv+0x19c>
   d730e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7312:	f47f af34 	bne.w	d717e <__aeabi_dmul+0x24a>
   d7316:	ea95 0f0c 	teq	r5, ip
   d731a:	f47f af25 	bne.w	d7168 <__aeabi_dmul+0x234>
   d731e:	4610      	mov	r0, r2
   d7320:	4619      	mov	r1, r3
   d7322:	e72c      	b.n	d717e <__aeabi_dmul+0x24a>
   d7324:	ea95 0f0c 	teq	r5, ip
   d7328:	d106      	bne.n	d7338 <__aeabi_ddiv+0x1b0>
   d732a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d732e:	f43f aefd 	beq.w	d712c <__aeabi_dmul+0x1f8>
   d7332:	4610      	mov	r0, r2
   d7334:	4619      	mov	r1, r3
   d7336:	e722      	b.n	d717e <__aeabi_dmul+0x24a>
   d7338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d733c:	bf18      	it	ne
   d733e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7342:	f47f aec5 	bne.w	d70d0 <__aeabi_dmul+0x19c>
   d7346:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d734a:	f47f af0d 	bne.w	d7168 <__aeabi_dmul+0x234>
   d734e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7352:	f47f aeeb 	bne.w	d712c <__aeabi_dmul+0x1f8>
   d7356:	e712      	b.n	d717e <__aeabi_dmul+0x24a>

000d7358 <__aeabi_d2f>:
   d7358:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d735c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7360:	bf24      	itt	cs
   d7362:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7366:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d736a:	d90d      	bls.n	d7388 <__aeabi_d2f+0x30>
   d736c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7370:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7374:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7378:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d737c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7380:	bf08      	it	eq
   d7382:	f020 0001 	biceq.w	r0, r0, #1
   d7386:	4770      	bx	lr
   d7388:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d738c:	d121      	bne.n	d73d2 <__aeabi_d2f+0x7a>
   d738e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7392:	bfbc      	itt	lt
   d7394:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7398:	4770      	bxlt	lr
   d739a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d739e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d73a2:	f1c2 0218 	rsb	r2, r2, #24
   d73a6:	f1c2 0c20 	rsb	ip, r2, #32
   d73aa:	fa10 f30c 	lsls.w	r3, r0, ip
   d73ae:	fa20 f002 	lsr.w	r0, r0, r2
   d73b2:	bf18      	it	ne
   d73b4:	f040 0001 	orrne.w	r0, r0, #1
   d73b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d73bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d73c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d73c4:	ea40 000c 	orr.w	r0, r0, ip
   d73c8:	fa23 f302 	lsr.w	r3, r3, r2
   d73cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d73d0:	e7cc      	b.n	d736c <__aeabi_d2f+0x14>
   d73d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d73d6:	d107      	bne.n	d73e8 <__aeabi_d2f+0x90>
   d73d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d73dc:	bf1e      	ittt	ne
   d73de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d73e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d73e6:	4770      	bxne	lr
   d73e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d73ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d73f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d73f4:	4770      	bx	lr
   d73f6:	bf00      	nop

000d73f8 <atoi>:
   d73f8:	220a      	movs	r2, #10
   d73fa:	2100      	movs	r1, #0
   d73fc:	f000 ba26 	b.w	d784c <strtol>

000d7400 <__cxa_atexit>:
   d7400:	b510      	push	{r4, lr}
   d7402:	4c05      	ldr	r4, [pc, #20]	; (d7418 <__cxa_atexit+0x18>)
   d7404:	4613      	mov	r3, r2
   d7406:	b12c      	cbz	r4, d7414 <__cxa_atexit+0x14>
   d7408:	460a      	mov	r2, r1
   d740a:	4601      	mov	r1, r0
   d740c:	2002      	movs	r0, #2
   d740e:	f3af 8000 	nop.w
   d7412:	bd10      	pop	{r4, pc}
   d7414:	4620      	mov	r0, r4
   d7416:	bd10      	pop	{r4, pc}
   d7418:	00000000 	.word	0x00000000

000d741c <localtime>:
   d741c:	b538      	push	{r3, r4, r5, lr}
   d741e:	4b07      	ldr	r3, [pc, #28]	; (d743c <localtime+0x20>)
   d7420:	681c      	ldr	r4, [r3, #0]
   d7422:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7424:	4605      	mov	r5, r0
   d7426:	b91b      	cbnz	r3, d7430 <localtime+0x14>
   d7428:	2024      	movs	r0, #36	; 0x24
   d742a:	f7fe f84f 	bl	d54cc <malloc>
   d742e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7430:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7432:	4628      	mov	r0, r5
   d7434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7438:	f000 b802 	b.w	d7440 <localtime_r>
   d743c:	2003e294 	.word	0x2003e294

000d7440 <localtime_r>:
   d7440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7444:	460c      	mov	r4, r1
   d7446:	4680      	mov	r8, r0
   d7448:	f000 fd06 	bl	d7e58 <__gettzinfo>
   d744c:	4621      	mov	r1, r4
   d744e:	4607      	mov	r7, r0
   d7450:	4640      	mov	r0, r8
   d7452:	f000 fd05 	bl	d7e60 <gmtime_r>
   d7456:	6946      	ldr	r6, [r0, #20]
   d7458:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d745c:	07b3      	lsls	r3, r6, #30
   d745e:	4604      	mov	r4, r0
   d7460:	d105      	bne.n	d746e <localtime_r+0x2e>
   d7462:	2264      	movs	r2, #100	; 0x64
   d7464:	fb96 f3f2 	sdiv	r3, r6, r2
   d7468:	fb02 6313 	mls	r3, r2, r3, r6
   d746c:	b94b      	cbnz	r3, d7482 <localtime_r+0x42>
   d746e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d7472:	fb96 f3f5 	sdiv	r3, r6, r5
   d7476:	fb05 6513 	mls	r5, r5, r3, r6
   d747a:	fab5 f385 	clz	r3, r5
   d747e:	095b      	lsrs	r3, r3, #5
   d7480:	e000      	b.n	d7484 <localtime_r+0x44>
   d7482:	2301      	movs	r3, #1
   d7484:	4a5f      	ldr	r2, [pc, #380]	; (d7604 <localtime_r+0x1c4>)
   d7486:	2530      	movs	r5, #48	; 0x30
   d7488:	fb05 2503 	mla	r5, r5, r3, r2
   d748c:	f000 fb18 	bl	d7ac0 <__tz_lock>
   d7490:	f000 fb18 	bl	d7ac4 <_tzset_unlocked>
   d7494:	4b5c      	ldr	r3, [pc, #368]	; (d7608 <localtime_r+0x1c8>)
   d7496:	681b      	ldr	r3, [r3, #0]
   d7498:	b1f3      	cbz	r3, d74d8 <localtime_r+0x98>
   d749a:	687b      	ldr	r3, [r7, #4]
   d749c:	429e      	cmp	r6, r3
   d749e:	d105      	bne.n	d74ac <localtime_r+0x6c>
   d74a0:	6839      	ldr	r1, [r7, #0]
   d74a2:	f8d8 3000 	ldr.w	r3, [r8]
   d74a6:	69fa      	ldr	r2, [r7, #28]
   d74a8:	b941      	cbnz	r1, d74bc <localtime_r+0x7c>
   d74aa:	e00a      	b.n	d74c2 <localtime_r+0x82>
   d74ac:	4630      	mov	r0, r6
   d74ae:	f000 fa5f 	bl	d7970 <__tzcalc_limits>
   d74b2:	2800      	cmp	r0, #0
   d74b4:	d1f4      	bne.n	d74a0 <localtime_r+0x60>
   d74b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d74ba:	e00d      	b.n	d74d8 <localtime_r+0x98>
   d74bc:	4293      	cmp	r3, r2
   d74be:	db08      	blt.n	d74d2 <localtime_r+0x92>
   d74c0:	e001      	b.n	d74c6 <localtime_r+0x86>
   d74c2:	4293      	cmp	r3, r2
   d74c4:	da07      	bge.n	d74d6 <localtime_r+0x96>
   d74c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d74c8:	4293      	cmp	r3, r2
   d74ca:	bfac      	ite	ge
   d74cc:	2300      	movge	r3, #0
   d74ce:	2301      	movlt	r3, #1
   d74d0:	e002      	b.n	d74d8 <localtime_r+0x98>
   d74d2:	2300      	movs	r3, #0
   d74d4:	e000      	b.n	d74d8 <localtime_r+0x98>
   d74d6:	2301      	movs	r3, #1
   d74d8:	6223      	str	r3, [r4, #32]
   d74da:	6a23      	ldr	r3, [r4, #32]
   d74dc:	2b01      	cmp	r3, #1
   d74de:	bf0c      	ite	eq
   d74e0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d74e2:	6a39      	ldrne	r1, [r7, #32]
   d74e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d74e8:	203c      	movs	r0, #60	; 0x3c
   d74ea:	fb91 f6f3 	sdiv	r6, r1, r3
   d74ee:	fb03 1316 	mls	r3, r3, r6, r1
   d74f2:	6861      	ldr	r1, [r4, #4]
   d74f4:	fb93 f2f0 	sdiv	r2, r3, r0
   d74f8:	fb00 3012 	mls	r0, r0, r2, r3
   d74fc:	6823      	ldr	r3, [r4, #0]
   d74fe:	1a89      	subs	r1, r1, r2
   d7500:	68a2      	ldr	r2, [r4, #8]
   d7502:	6061      	str	r1, [r4, #4]
   d7504:	1a1b      	subs	r3, r3, r0
   d7506:	1b92      	subs	r2, r2, r6
   d7508:	2b3b      	cmp	r3, #59	; 0x3b
   d750a:	6023      	str	r3, [r4, #0]
   d750c:	60a2      	str	r2, [r4, #8]
   d750e:	dd03      	ble.n	d7518 <localtime_r+0xd8>
   d7510:	3101      	adds	r1, #1
   d7512:	6061      	str	r1, [r4, #4]
   d7514:	3b3c      	subs	r3, #60	; 0x3c
   d7516:	e004      	b.n	d7522 <localtime_r+0xe2>
   d7518:	2b00      	cmp	r3, #0
   d751a:	da03      	bge.n	d7524 <localtime_r+0xe4>
   d751c:	3901      	subs	r1, #1
   d751e:	6061      	str	r1, [r4, #4]
   d7520:	333c      	adds	r3, #60	; 0x3c
   d7522:	6023      	str	r3, [r4, #0]
   d7524:	6863      	ldr	r3, [r4, #4]
   d7526:	2b3b      	cmp	r3, #59	; 0x3b
   d7528:	dd03      	ble.n	d7532 <localtime_r+0xf2>
   d752a:	3201      	adds	r2, #1
   d752c:	60a2      	str	r2, [r4, #8]
   d752e:	3b3c      	subs	r3, #60	; 0x3c
   d7530:	e004      	b.n	d753c <localtime_r+0xfc>
   d7532:	2b00      	cmp	r3, #0
   d7534:	da03      	bge.n	d753e <localtime_r+0xfe>
   d7536:	3a01      	subs	r2, #1
   d7538:	60a2      	str	r2, [r4, #8]
   d753a:	333c      	adds	r3, #60	; 0x3c
   d753c:	6063      	str	r3, [r4, #4]
   d753e:	68a3      	ldr	r3, [r4, #8]
   d7540:	2b17      	cmp	r3, #23
   d7542:	dd22      	ble.n	d758a <localtime_r+0x14a>
   d7544:	69e2      	ldr	r2, [r4, #28]
   d7546:	3201      	adds	r2, #1
   d7548:	61e2      	str	r2, [r4, #28]
   d754a:	69a2      	ldr	r2, [r4, #24]
   d754c:	3201      	adds	r2, #1
   d754e:	2a06      	cmp	r2, #6
   d7550:	bfc8      	it	gt
   d7552:	2200      	movgt	r2, #0
   d7554:	61a2      	str	r2, [r4, #24]
   d7556:	68e2      	ldr	r2, [r4, #12]
   d7558:	3b18      	subs	r3, #24
   d755a:	3201      	adds	r2, #1
   d755c:	60a3      	str	r3, [r4, #8]
   d755e:	6923      	ldr	r3, [r4, #16]
   d7560:	60e2      	str	r2, [r4, #12]
   d7562:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7566:	428a      	cmp	r2, r1
   d7568:	dd46      	ble.n	d75f8 <localtime_r+0x1b8>
   d756a:	3301      	adds	r3, #1
   d756c:	2b0c      	cmp	r3, #12
   d756e:	bf0c      	ite	eq
   d7570:	6963      	ldreq	r3, [r4, #20]
   d7572:	6123      	strne	r3, [r4, #16]
   d7574:	eba2 0201 	sub.w	r2, r2, r1
   d7578:	60e2      	str	r2, [r4, #12]
   d757a:	bf01      	itttt	eq
   d757c:	3301      	addeq	r3, #1
   d757e:	2200      	moveq	r2, #0
   d7580:	6122      	streq	r2, [r4, #16]
   d7582:	6163      	streq	r3, [r4, #20]
   d7584:	bf08      	it	eq
   d7586:	61e2      	streq	r2, [r4, #28]
   d7588:	e036      	b.n	d75f8 <localtime_r+0x1b8>
   d758a:	2b00      	cmp	r3, #0
   d758c:	da34      	bge.n	d75f8 <localtime_r+0x1b8>
   d758e:	69e2      	ldr	r2, [r4, #28]
   d7590:	3a01      	subs	r2, #1
   d7592:	61e2      	str	r2, [r4, #28]
   d7594:	69a2      	ldr	r2, [r4, #24]
   d7596:	3a01      	subs	r2, #1
   d7598:	bf48      	it	mi
   d759a:	2206      	movmi	r2, #6
   d759c:	61a2      	str	r2, [r4, #24]
   d759e:	68e2      	ldr	r2, [r4, #12]
   d75a0:	3318      	adds	r3, #24
   d75a2:	3a01      	subs	r2, #1
   d75a4:	60e2      	str	r2, [r4, #12]
   d75a6:	60a3      	str	r3, [r4, #8]
   d75a8:	bb32      	cbnz	r2, d75f8 <localtime_r+0x1b8>
   d75aa:	6923      	ldr	r3, [r4, #16]
   d75ac:	3b01      	subs	r3, #1
   d75ae:	d401      	bmi.n	d75b4 <localtime_r+0x174>
   d75b0:	6123      	str	r3, [r4, #16]
   d75b2:	e01d      	b.n	d75f0 <localtime_r+0x1b0>
   d75b4:	230b      	movs	r3, #11
   d75b6:	6123      	str	r3, [r4, #16]
   d75b8:	6963      	ldr	r3, [r4, #20]
   d75ba:	1e5a      	subs	r2, r3, #1
   d75bc:	f012 0f03 	tst.w	r2, #3
   d75c0:	6162      	str	r2, [r4, #20]
   d75c2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d75c6:	d105      	bne.n	d75d4 <localtime_r+0x194>
   d75c8:	2164      	movs	r1, #100	; 0x64
   d75ca:	fb93 f2f1 	sdiv	r2, r3, r1
   d75ce:	fb01 3212 	mls	r2, r1, r2, r3
   d75d2:	b94a      	cbnz	r2, d75e8 <localtime_r+0x1a8>
   d75d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d75d8:	fb93 f2f1 	sdiv	r2, r3, r1
   d75dc:	fb01 3312 	mls	r3, r1, r2, r3
   d75e0:	fab3 f383 	clz	r3, r3
   d75e4:	095b      	lsrs	r3, r3, #5
   d75e6:	e000      	b.n	d75ea <localtime_r+0x1aa>
   d75e8:	2301      	movs	r3, #1
   d75ea:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d75ee:	61e3      	str	r3, [r4, #28]
   d75f0:	6923      	ldr	r3, [r4, #16]
   d75f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d75f6:	60e3      	str	r3, [r4, #12]
   d75f8:	f000 fa63 	bl	d7ac2 <__tz_unlock>
   d75fc:	4620      	mov	r0, r4
   d75fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7602:	bf00      	nop
   d7604:	000d861c 	.word	0x000d861c
   d7608:	2003e7e4 	.word	0x2003e7e4

000d760c <memcpy>:
   d760c:	b510      	push	{r4, lr}
   d760e:	1e43      	subs	r3, r0, #1
   d7610:	440a      	add	r2, r1
   d7612:	4291      	cmp	r1, r2
   d7614:	d004      	beq.n	d7620 <memcpy+0x14>
   d7616:	f811 4b01 	ldrb.w	r4, [r1], #1
   d761a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d761e:	e7f8      	b.n	d7612 <memcpy+0x6>
   d7620:	bd10      	pop	{r4, pc}

000d7622 <memset>:
   d7622:	4402      	add	r2, r0
   d7624:	4603      	mov	r3, r0
   d7626:	4293      	cmp	r3, r2
   d7628:	d002      	beq.n	d7630 <memset+0xe>
   d762a:	f803 1b01 	strb.w	r1, [r3], #1
   d762e:	e7fa      	b.n	d7626 <memset+0x4>
   d7630:	4770      	bx	lr
	...

000d7634 <srand>:
   d7634:	b538      	push	{r3, r4, r5, lr}
   d7636:	4b12      	ldr	r3, [pc, #72]	; (d7680 <srand+0x4c>)
   d7638:	681c      	ldr	r4, [r3, #0]
   d763a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d763c:	4605      	mov	r5, r0
   d763e:	b9d3      	cbnz	r3, d7676 <srand+0x42>
   d7640:	2018      	movs	r0, #24
   d7642:	f7fd ff43 	bl	d54cc <malloc>
   d7646:	f243 330e 	movw	r3, #13070	; 0x330e
   d764a:	63a0      	str	r0, [r4, #56]	; 0x38
   d764c:	8003      	strh	r3, [r0, #0]
   d764e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7652:	8043      	strh	r3, [r0, #2]
   d7654:	f241 2334 	movw	r3, #4660	; 0x1234
   d7658:	8083      	strh	r3, [r0, #4]
   d765a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d765e:	80c3      	strh	r3, [r0, #6]
   d7660:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7664:	8103      	strh	r3, [r0, #8]
   d7666:	2305      	movs	r3, #5
   d7668:	8143      	strh	r3, [r0, #10]
   d766a:	230b      	movs	r3, #11
   d766c:	8183      	strh	r3, [r0, #12]
   d766e:	2201      	movs	r2, #1
   d7670:	2300      	movs	r3, #0
   d7672:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7678:	2200      	movs	r2, #0
   d767a:	611d      	str	r5, [r3, #16]
   d767c:	615a      	str	r2, [r3, #20]
   d767e:	bd38      	pop	{r3, r4, r5, pc}
   d7680:	2003e294 	.word	0x2003e294

000d7684 <strcmp>:
   d7684:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7688:	f811 3b01 	ldrb.w	r3, [r1], #1
   d768c:	2a01      	cmp	r2, #1
   d768e:	bf28      	it	cs
   d7690:	429a      	cmpcs	r2, r3
   d7692:	d0f7      	beq.n	d7684 <strcmp>
   d7694:	1ad0      	subs	r0, r2, r3
   d7696:	4770      	bx	lr

000d7698 <strcpy>:
   d7698:	4603      	mov	r3, r0
   d769a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d769e:	f803 2b01 	strb.w	r2, [r3], #1
   d76a2:	2a00      	cmp	r2, #0
   d76a4:	d1f9      	bne.n	d769a <strcpy+0x2>
   d76a6:	4770      	bx	lr

000d76a8 <strdup>:
   d76a8:	4b02      	ldr	r3, [pc, #8]	; (d76b4 <strdup+0xc>)
   d76aa:	4601      	mov	r1, r0
   d76ac:	6818      	ldr	r0, [r3, #0]
   d76ae:	f000 b803 	b.w	d76b8 <_strdup_r>
   d76b2:	bf00      	nop
   d76b4:	2003e294 	.word	0x2003e294

000d76b8 <_strdup_r>:
   d76b8:	b570      	push	{r4, r5, r6, lr}
   d76ba:	4606      	mov	r6, r0
   d76bc:	4608      	mov	r0, r1
   d76be:	460c      	mov	r4, r1
   d76c0:	f000 f80d 	bl	d76de <strlen>
   d76c4:	1c45      	adds	r5, r0, #1
   d76c6:	4629      	mov	r1, r5
   d76c8:	4630      	mov	r0, r6
   d76ca:	f7fd ff2f 	bl	d552c <_malloc_r>
   d76ce:	4606      	mov	r6, r0
   d76d0:	b118      	cbz	r0, d76da <_strdup_r+0x22>
   d76d2:	462a      	mov	r2, r5
   d76d4:	4621      	mov	r1, r4
   d76d6:	f7ff ff99 	bl	d760c <memcpy>
   d76da:	4630      	mov	r0, r6
   d76dc:	bd70      	pop	{r4, r5, r6, pc}

000d76de <strlen>:
   d76de:	4603      	mov	r3, r0
   d76e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d76e4:	2a00      	cmp	r2, #0
   d76e6:	d1fb      	bne.n	d76e0 <strlen+0x2>
   d76e8:	1a18      	subs	r0, r3, r0
   d76ea:	3801      	subs	r0, #1
   d76ec:	4770      	bx	lr

000d76ee <strncmp>:
   d76ee:	b530      	push	{r4, r5, lr}
   d76f0:	b182      	cbz	r2, d7714 <strncmp+0x26>
   d76f2:	1e45      	subs	r5, r0, #1
   d76f4:	3901      	subs	r1, #1
   d76f6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d76fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d76fe:	42a3      	cmp	r3, r4
   d7700:	d106      	bne.n	d7710 <strncmp+0x22>
   d7702:	43ec      	mvns	r4, r5
   d7704:	4414      	add	r4, r2
   d7706:	42e0      	cmn	r0, r4
   d7708:	d001      	beq.n	d770e <strncmp+0x20>
   d770a:	2b00      	cmp	r3, #0
   d770c:	d1f3      	bne.n	d76f6 <strncmp+0x8>
   d770e:	461c      	mov	r4, r3
   d7710:	1b18      	subs	r0, r3, r4
   d7712:	bd30      	pop	{r4, r5, pc}
   d7714:	4610      	mov	r0, r2
   d7716:	bd30      	pop	{r4, r5, pc}

000d7718 <strncpy>:
   d7718:	b510      	push	{r4, lr}
   d771a:	4603      	mov	r3, r0
   d771c:	b142      	cbz	r2, d7730 <strncpy+0x18>
   d771e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7722:	f803 4b01 	strb.w	r4, [r3], #1
   d7726:	3a01      	subs	r2, #1
   d7728:	2c00      	cmp	r4, #0
   d772a:	d1f7      	bne.n	d771c <strncpy+0x4>
   d772c:	441a      	add	r2, r3
   d772e:	e000      	b.n	d7732 <strncpy+0x1a>
   d7730:	bd10      	pop	{r4, pc}
   d7732:	4293      	cmp	r3, r2
   d7734:	d002      	beq.n	d773c <strncpy+0x24>
   d7736:	f803 4b01 	strb.w	r4, [r3], #1
   d773a:	e7fa      	b.n	d7732 <strncpy+0x1a>
   d773c:	bd10      	pop	{r4, pc}
	...

000d7740 <_strtol_r>:
   d7740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7744:	4680      	mov	r8, r0
   d7746:	4840      	ldr	r0, [pc, #256]	; (d7848 <_strtol_r+0x108>)
   d7748:	f8d0 9000 	ldr.w	r9, [r0]
   d774c:	460f      	mov	r7, r1
   d774e:	463d      	mov	r5, r7
   d7750:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7754:	eb09 0004 	add.w	r0, r9, r4
   d7758:	7840      	ldrb	r0, [r0, #1]
   d775a:	f000 0008 	and.w	r0, r0, #8
   d775e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7762:	b108      	cbz	r0, d7768 <_strtol_r+0x28>
   d7764:	462f      	mov	r7, r5
   d7766:	e7f2      	b.n	d774e <_strtol_r+0xe>
   d7768:	2c2d      	cmp	r4, #45	; 0x2d
   d776a:	d103      	bne.n	d7774 <_strtol_r+0x34>
   d776c:	1cbd      	adds	r5, r7, #2
   d776e:	787c      	ldrb	r4, [r7, #1]
   d7770:	2601      	movs	r6, #1
   d7772:	e003      	b.n	d777c <_strtol_r+0x3c>
   d7774:	2c2b      	cmp	r4, #43	; 0x2b
   d7776:	bf04      	itt	eq
   d7778:	787c      	ldrbeq	r4, [r7, #1]
   d777a:	1cbd      	addeq	r5, r7, #2
   d777c:	b113      	cbz	r3, d7784 <_strtol_r+0x44>
   d777e:	2b10      	cmp	r3, #16
   d7780:	d10a      	bne.n	d7798 <_strtol_r+0x58>
   d7782:	e05b      	b.n	d783c <_strtol_r+0xfc>
   d7784:	2c30      	cmp	r4, #48	; 0x30
   d7786:	d157      	bne.n	d7838 <_strtol_r+0xf8>
   d7788:	7828      	ldrb	r0, [r5, #0]
   d778a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d778e:	2858      	cmp	r0, #88	; 0x58
   d7790:	d14d      	bne.n	d782e <_strtol_r+0xee>
   d7792:	786c      	ldrb	r4, [r5, #1]
   d7794:	2310      	movs	r3, #16
   d7796:	3502      	adds	r5, #2
   d7798:	2e00      	cmp	r6, #0
   d779a:	bf14      	ite	ne
   d779c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d77a0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d77a4:	2700      	movs	r7, #0
   d77a6:	fbbc faf3 	udiv	sl, ip, r3
   d77aa:	4638      	mov	r0, r7
   d77ac:	fb03 cc1a 	mls	ip, r3, sl, ip
   d77b0:	eb09 0e04 	add.w	lr, r9, r4
   d77b4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d77b8:	f01e 0f04 	tst.w	lr, #4
   d77bc:	d001      	beq.n	d77c2 <_strtol_r+0x82>
   d77be:	3c30      	subs	r4, #48	; 0x30
   d77c0:	e00b      	b.n	d77da <_strtol_r+0x9a>
   d77c2:	f01e 0e03 	ands.w	lr, lr, #3
   d77c6:	d01b      	beq.n	d7800 <_strtol_r+0xc0>
   d77c8:	f1be 0f01 	cmp.w	lr, #1
   d77cc:	bf0c      	ite	eq
   d77ce:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d77d2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d77d6:	ebce 0404 	rsb	r4, lr, r4
   d77da:	42a3      	cmp	r3, r4
   d77dc:	dd10      	ble.n	d7800 <_strtol_r+0xc0>
   d77de:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d77e2:	d00a      	beq.n	d77fa <_strtol_r+0xba>
   d77e4:	4550      	cmp	r0, sl
   d77e6:	d806      	bhi.n	d77f6 <_strtol_r+0xb6>
   d77e8:	d101      	bne.n	d77ee <_strtol_r+0xae>
   d77ea:	4564      	cmp	r4, ip
   d77ec:	dc03      	bgt.n	d77f6 <_strtol_r+0xb6>
   d77ee:	fb03 4000 	mla	r0, r3, r0, r4
   d77f2:	2701      	movs	r7, #1
   d77f4:	e001      	b.n	d77fa <_strtol_r+0xba>
   d77f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d77fa:	f815 4b01 	ldrb.w	r4, [r5], #1
   d77fe:	e7d7      	b.n	d77b0 <_strtol_r+0x70>
   d7800:	1c7b      	adds	r3, r7, #1
   d7802:	d10c      	bne.n	d781e <_strtol_r+0xde>
   d7804:	2e00      	cmp	r6, #0
   d7806:	f04f 0322 	mov.w	r3, #34	; 0x22
   d780a:	bf14      	ite	ne
   d780c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7810:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7814:	f8c8 3000 	str.w	r3, [r8]
   d7818:	b92a      	cbnz	r2, d7826 <_strtol_r+0xe6>
   d781a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d781e:	b106      	cbz	r6, d7822 <_strtol_r+0xe2>
   d7820:	4240      	negs	r0, r0
   d7822:	b172      	cbz	r2, d7842 <_strtol_r+0x102>
   d7824:	b107      	cbz	r7, d7828 <_strtol_r+0xe8>
   d7826:	1e69      	subs	r1, r5, #1
   d7828:	6011      	str	r1, [r2, #0]
   d782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d782e:	2430      	movs	r4, #48	; 0x30
   d7830:	2b00      	cmp	r3, #0
   d7832:	d1b1      	bne.n	d7798 <_strtol_r+0x58>
   d7834:	2308      	movs	r3, #8
   d7836:	e7af      	b.n	d7798 <_strtol_r+0x58>
   d7838:	230a      	movs	r3, #10
   d783a:	e7ad      	b.n	d7798 <_strtol_r+0x58>
   d783c:	2c30      	cmp	r4, #48	; 0x30
   d783e:	d0a3      	beq.n	d7788 <_strtol_r+0x48>
   d7840:	e7aa      	b.n	d7798 <_strtol_r+0x58>
   d7842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7846:	bf00      	nop
   d7848:	2003e230 	.word	0x2003e230

000d784c <strtol>:
   d784c:	4613      	mov	r3, r2
   d784e:	460a      	mov	r2, r1
   d7850:	4601      	mov	r1, r0
   d7852:	4802      	ldr	r0, [pc, #8]	; (d785c <strtol+0x10>)
   d7854:	6800      	ldr	r0, [r0, #0]
   d7856:	f7ff bf73 	b.w	d7740 <_strtol_r>
   d785a:	bf00      	nop
   d785c:	2003e294 	.word	0x2003e294

000d7860 <_strtoul_r>:
   d7860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7864:	4680      	mov	r8, r0
   d7866:	483c      	ldr	r0, [pc, #240]	; (d7958 <_strtoul_r+0xf8>)
   d7868:	f8d0 9000 	ldr.w	r9, [r0]
   d786c:	460e      	mov	r6, r1
   d786e:	4635      	mov	r5, r6
   d7870:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7874:	eb09 0004 	add.w	r0, r9, r4
   d7878:	7840      	ldrb	r0, [r0, #1]
   d787a:	f000 0008 	and.w	r0, r0, #8
   d787e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7882:	b108      	cbz	r0, d7888 <_strtoul_r+0x28>
   d7884:	462e      	mov	r6, r5
   d7886:	e7f2      	b.n	d786e <_strtoul_r+0xe>
   d7888:	2c2d      	cmp	r4, #45	; 0x2d
   d788a:	d103      	bne.n	d7894 <_strtoul_r+0x34>
   d788c:	1cb5      	adds	r5, r6, #2
   d788e:	7874      	ldrb	r4, [r6, #1]
   d7890:	2701      	movs	r7, #1
   d7892:	e003      	b.n	d789c <_strtoul_r+0x3c>
   d7894:	2c2b      	cmp	r4, #43	; 0x2b
   d7896:	bf04      	itt	eq
   d7898:	7874      	ldrbeq	r4, [r6, #1]
   d789a:	1cb5      	addeq	r5, r6, #2
   d789c:	b113      	cbz	r3, d78a4 <_strtoul_r+0x44>
   d789e:	2b10      	cmp	r3, #16
   d78a0:	d10a      	bne.n	d78b8 <_strtoul_r+0x58>
   d78a2:	e053      	b.n	d794c <_strtoul_r+0xec>
   d78a4:	2c30      	cmp	r4, #48	; 0x30
   d78a6:	d14f      	bne.n	d7948 <_strtoul_r+0xe8>
   d78a8:	7828      	ldrb	r0, [r5, #0]
   d78aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d78ae:	2858      	cmp	r0, #88	; 0x58
   d78b0:	d145      	bne.n	d793e <_strtoul_r+0xde>
   d78b2:	786c      	ldrb	r4, [r5, #1]
   d78b4:	2310      	movs	r3, #16
   d78b6:	3502      	adds	r5, #2
   d78b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d78bc:	2600      	movs	r6, #0
   d78be:	fbbc fcf3 	udiv	ip, ip, r3
   d78c2:	fb03 fa0c 	mul.w	sl, r3, ip
   d78c6:	ea6f 0a0a 	mvn.w	sl, sl
   d78ca:	4630      	mov	r0, r6
   d78cc:	eb09 0e04 	add.w	lr, r9, r4
   d78d0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d78d4:	f01e 0f04 	tst.w	lr, #4
   d78d8:	d001      	beq.n	d78de <_strtoul_r+0x7e>
   d78da:	3c30      	subs	r4, #48	; 0x30
   d78dc:	e00b      	b.n	d78f6 <_strtoul_r+0x96>
   d78de:	f01e 0e03 	ands.w	lr, lr, #3
   d78e2:	d01a      	beq.n	d791a <_strtoul_r+0xba>
   d78e4:	f1be 0f01 	cmp.w	lr, #1
   d78e8:	bf0c      	ite	eq
   d78ea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d78ee:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d78f2:	ebce 0404 	rsb	r4, lr, r4
   d78f6:	42a3      	cmp	r3, r4
   d78f8:	dd0f      	ble.n	d791a <_strtoul_r+0xba>
   d78fa:	2e00      	cmp	r6, #0
   d78fc:	db08      	blt.n	d7910 <_strtoul_r+0xb0>
   d78fe:	4560      	cmp	r0, ip
   d7900:	d806      	bhi.n	d7910 <_strtoul_r+0xb0>
   d7902:	d101      	bne.n	d7908 <_strtoul_r+0xa8>
   d7904:	4554      	cmp	r4, sl
   d7906:	dc03      	bgt.n	d7910 <_strtoul_r+0xb0>
   d7908:	fb03 4000 	mla	r0, r3, r0, r4
   d790c:	2601      	movs	r6, #1
   d790e:	e001      	b.n	d7914 <_strtoul_r+0xb4>
   d7910:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7914:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7918:	e7d8      	b.n	d78cc <_strtoul_r+0x6c>
   d791a:	2e00      	cmp	r6, #0
   d791c:	da07      	bge.n	d792e <_strtoul_r+0xce>
   d791e:	2322      	movs	r3, #34	; 0x22
   d7920:	f8c8 3000 	str.w	r3, [r8]
   d7924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7928:	b92a      	cbnz	r2, d7936 <_strtoul_r+0xd6>
   d792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d792e:	b107      	cbz	r7, d7932 <_strtoul_r+0xd2>
   d7930:	4240      	negs	r0, r0
   d7932:	b172      	cbz	r2, d7952 <_strtoul_r+0xf2>
   d7934:	b106      	cbz	r6, d7938 <_strtoul_r+0xd8>
   d7936:	1e69      	subs	r1, r5, #1
   d7938:	6011      	str	r1, [r2, #0]
   d793a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d793e:	2430      	movs	r4, #48	; 0x30
   d7940:	2b00      	cmp	r3, #0
   d7942:	d1b9      	bne.n	d78b8 <_strtoul_r+0x58>
   d7944:	2308      	movs	r3, #8
   d7946:	e7b7      	b.n	d78b8 <_strtoul_r+0x58>
   d7948:	230a      	movs	r3, #10
   d794a:	e7b5      	b.n	d78b8 <_strtoul_r+0x58>
   d794c:	2c30      	cmp	r4, #48	; 0x30
   d794e:	d0ab      	beq.n	d78a8 <_strtoul_r+0x48>
   d7950:	e7b2      	b.n	d78b8 <_strtoul_r+0x58>
   d7952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7956:	bf00      	nop
   d7958:	2003e230 	.word	0x2003e230

000d795c <strtoul>:
   d795c:	4613      	mov	r3, r2
   d795e:	460a      	mov	r2, r1
   d7960:	4601      	mov	r1, r0
   d7962:	4802      	ldr	r0, [pc, #8]	; (d796c <strtoul+0x10>)
   d7964:	6800      	ldr	r0, [r0, #0]
   d7966:	f7ff bf7b 	b.w	d7860 <_strtoul_r>
   d796a:	bf00      	nop
   d796c:	2003e294 	.word	0x2003e294

000d7970 <__tzcalc_limits>:
   d7970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7974:	4604      	mov	r4, r0
   d7976:	f000 fa6f 	bl	d7e58 <__gettzinfo>
   d797a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d797e:	429c      	cmp	r4, r3
   d7980:	f340 8096 	ble.w	d7ab0 <__tzcalc_limits+0x140>
   d7984:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7988:	18e3      	adds	r3, r4, r3
   d798a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d798e:	109b      	asrs	r3, r3, #2
   d7990:	f240 156d 	movw	r5, #365	; 0x16d
   d7994:	fb05 3502 	mla	r5, r5, r2, r3
   d7998:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d799c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d79a0:	fb92 f3f3 	sdiv	r3, r2, r3
   d79a4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d79a8:	442b      	add	r3, r5
   d79aa:	18a5      	adds	r5, r4, r2
   d79ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d79b0:	fb95 f5f2 	sdiv	r5, r5, r2
   d79b4:	441d      	add	r5, r3
   d79b6:	2364      	movs	r3, #100	; 0x64
   d79b8:	fb94 f7f2 	sdiv	r7, r4, r2
   d79bc:	fb94 f6f3 	sdiv	r6, r4, r3
   d79c0:	fb02 4717 	mls	r7, r2, r7, r4
   d79c4:	fb03 4616 	mls	r6, r3, r6, r4
   d79c8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d79cc:	fab7 fe87 	clz	lr, r7
   d79d0:	9301      	str	r3, [sp, #4]
   d79d2:	f004 0303 	and.w	r3, r4, #3
   d79d6:	6044      	str	r4, [r0, #4]
   d79d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d79dc:	4601      	mov	r1, r0
   d79de:	9300      	str	r3, [sp, #0]
   d79e0:	f04f 0c07 	mov.w	ip, #7
   d79e4:	7a0b      	ldrb	r3, [r1, #8]
   d79e6:	2b4a      	cmp	r3, #74	; 0x4a
   d79e8:	d10e      	bne.n	d7a08 <__tzcalc_limits+0x98>
   d79ea:	694b      	ldr	r3, [r1, #20]
   d79ec:	9a00      	ldr	r2, [sp, #0]
   d79ee:	18ec      	adds	r4, r5, r3
   d79f0:	b902      	cbnz	r2, d79f4 <__tzcalc_limits+0x84>
   d79f2:	b906      	cbnz	r6, d79f6 <__tzcalc_limits+0x86>
   d79f4:	b927      	cbnz	r7, d7a00 <__tzcalc_limits+0x90>
   d79f6:	2b3b      	cmp	r3, #59	; 0x3b
   d79f8:	bfd4      	ite	le
   d79fa:	2300      	movle	r3, #0
   d79fc:	2301      	movgt	r3, #1
   d79fe:	e000      	b.n	d7a02 <__tzcalc_limits+0x92>
   d7a00:	2300      	movs	r3, #0
   d7a02:	4423      	add	r3, r4
   d7a04:	3b01      	subs	r3, #1
   d7a06:	e03f      	b.n	d7a88 <__tzcalc_limits+0x118>
   d7a08:	2b44      	cmp	r3, #68	; 0x44
   d7a0a:	d102      	bne.n	d7a12 <__tzcalc_limits+0xa2>
   d7a0c:	694b      	ldr	r3, [r1, #20]
   d7a0e:	442b      	add	r3, r5
   d7a10:	e03a      	b.n	d7a88 <__tzcalc_limits+0x118>
   d7a12:	9b00      	ldr	r3, [sp, #0]
   d7a14:	b92b      	cbnz	r3, d7a22 <__tzcalc_limits+0xb2>
   d7a16:	2e00      	cmp	r6, #0
   d7a18:	bf0c      	ite	eq
   d7a1a:	46f0      	moveq	r8, lr
   d7a1c:	f04f 0801 	movne.w	r8, #1
   d7a20:	e000      	b.n	d7a24 <__tzcalc_limits+0xb4>
   d7a22:	46f0      	mov	r8, lr
   d7a24:	4b24      	ldr	r3, [pc, #144]	; (d7ab8 <__tzcalc_limits+0x148>)
   d7a26:	68cc      	ldr	r4, [r1, #12]
   d7a28:	2230      	movs	r2, #48	; 0x30
   d7a2a:	fb02 3808 	mla	r8, r2, r8, r3
   d7a2e:	f1a8 0a04 	sub.w	sl, r8, #4
   d7a32:	46a9      	mov	r9, r5
   d7a34:	2301      	movs	r3, #1
   d7a36:	42a3      	cmp	r3, r4
   d7a38:	da04      	bge.n	d7a44 <__tzcalc_limits+0xd4>
   d7a3a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7a3e:	3301      	adds	r3, #1
   d7a40:	44d9      	add	r9, fp
   d7a42:	e7f8      	b.n	d7a36 <__tzcalc_limits+0xc6>
   d7a44:	f109 0304 	add.w	r3, r9, #4
   d7a48:	fb93 fbfc 	sdiv	fp, r3, ip
   d7a4c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7a50:	2c01      	cmp	r4, #1
   d7a52:	ebca 0a03 	rsb	sl, sl, r3
   d7a56:	694b      	ldr	r3, [r1, #20]
   d7a58:	bfb8      	it	lt
   d7a5a:	2401      	movlt	r4, #1
   d7a5c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7a60:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7a64:	690b      	ldr	r3, [r1, #16]
   d7a66:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7a6a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7a6e:	bf48      	it	mi
   d7a70:	f10a 0a07 	addmi.w	sl, sl, #7
   d7a74:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7a78:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7a7c:	4453      	add	r3, sl
   d7a7e:	42a3      	cmp	r3, r4
   d7a80:	db01      	blt.n	d7a86 <__tzcalc_limits+0x116>
   d7a82:	3b07      	subs	r3, #7
   d7a84:	e7fb      	b.n	d7a7e <__tzcalc_limits+0x10e>
   d7a86:	444b      	add	r3, r9
   d7a88:	698c      	ldr	r4, [r1, #24]
   d7a8a:	4a0c      	ldr	r2, [pc, #48]	; (d7abc <__tzcalc_limits+0x14c>)
   d7a8c:	fb02 4303 	mla	r3, r2, r3, r4
   d7a90:	6a0c      	ldr	r4, [r1, #32]
   d7a92:	4423      	add	r3, r4
   d7a94:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7a98:	9b01      	ldr	r3, [sp, #4]
   d7a9a:	4299      	cmp	r1, r3
   d7a9c:	d1a2      	bne.n	d79e4 <__tzcalc_limits+0x74>
   d7a9e:	69c3      	ldr	r3, [r0, #28]
   d7aa0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7aa2:	4293      	cmp	r3, r2
   d7aa4:	bfac      	ite	ge
   d7aa6:	2300      	movge	r3, #0
   d7aa8:	2301      	movlt	r3, #1
   d7aaa:	6003      	str	r3, [r0, #0]
   d7aac:	2001      	movs	r0, #1
   d7aae:	e000      	b.n	d7ab2 <__tzcalc_limits+0x142>
   d7ab0:	2000      	movs	r0, #0
   d7ab2:	b003      	add	sp, #12
   d7ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7ab8:	000d861c 	.word	0x000d861c
   d7abc:	00015180 	.word	0x00015180

000d7ac0 <__tz_lock>:
   d7ac0:	4770      	bx	lr

000d7ac2 <__tz_unlock>:
   d7ac2:	4770      	bx	lr

000d7ac4 <_tzset_unlocked>:
   d7ac4:	4b01      	ldr	r3, [pc, #4]	; (d7acc <_tzset_unlocked+0x8>)
   d7ac6:	6818      	ldr	r0, [r3, #0]
   d7ac8:	f000 b802 	b.w	d7ad0 <_tzset_unlocked_r>
   d7acc:	2003e294 	.word	0x2003e294

000d7ad0 <_tzset_unlocked_r>:
   d7ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ad4:	b08d      	sub	sp, #52	; 0x34
   d7ad6:	4607      	mov	r7, r0
   d7ad8:	f000 f9be 	bl	d7e58 <__gettzinfo>
   d7adc:	49b0      	ldr	r1, [pc, #704]	; (d7da0 <_tzset_unlocked_r+0x2d0>)
   d7ade:	4eb1      	ldr	r6, [pc, #708]	; (d7da4 <_tzset_unlocked_r+0x2d4>)
   d7ae0:	4604      	mov	r4, r0
   d7ae2:	4638      	mov	r0, r7
   d7ae4:	f000 f9b0 	bl	d7e48 <_getenv_r>
   d7ae8:	4605      	mov	r5, r0
   d7aea:	b960      	cbnz	r0, d7b06 <_tzset_unlocked_r+0x36>
   d7aec:	4bae      	ldr	r3, [pc, #696]	; (d7da8 <_tzset_unlocked_r+0x2d8>)
   d7aee:	4aaf      	ldr	r2, [pc, #700]	; (d7dac <_tzset_unlocked_r+0x2dc>)
   d7af0:	6018      	str	r0, [r3, #0]
   d7af2:	4baf      	ldr	r3, [pc, #700]	; (d7db0 <_tzset_unlocked_r+0x2e0>)
   d7af4:	6018      	str	r0, [r3, #0]
   d7af6:	4baf      	ldr	r3, [pc, #700]	; (d7db4 <_tzset_unlocked_r+0x2e4>)
   d7af8:	6830      	ldr	r0, [r6, #0]
   d7afa:	601a      	str	r2, [r3, #0]
   d7afc:	605a      	str	r2, [r3, #4]
   d7afe:	f7fd fced 	bl	d54dc <free>
   d7b02:	6035      	str	r5, [r6, #0]
   d7b04:	e148      	b.n	d7d98 <_tzset_unlocked_r+0x2c8>
   d7b06:	6831      	ldr	r1, [r6, #0]
   d7b08:	b979      	cbnz	r1, d7b2a <_tzset_unlocked_r+0x5a>
   d7b0a:	6830      	ldr	r0, [r6, #0]
   d7b0c:	f7fd fce6 	bl	d54dc <free>
   d7b10:	4628      	mov	r0, r5
   d7b12:	f7ff fde4 	bl	d76de <strlen>
   d7b16:	1c41      	adds	r1, r0, #1
   d7b18:	4638      	mov	r0, r7
   d7b1a:	f7fd fd07 	bl	d552c <_malloc_r>
   d7b1e:	6030      	str	r0, [r6, #0]
   d7b20:	b148      	cbz	r0, d7b36 <_tzset_unlocked_r+0x66>
   d7b22:	4629      	mov	r1, r5
   d7b24:	f7ff fdb8 	bl	d7698 <strcpy>
   d7b28:	e005      	b.n	d7b36 <_tzset_unlocked_r+0x66>
   d7b2a:	f7ff fdab 	bl	d7684 <strcmp>
   d7b2e:	2800      	cmp	r0, #0
   d7b30:	f000 8132 	beq.w	d7d98 <_tzset_unlocked_r+0x2c8>
   d7b34:	e7e9      	b.n	d7b0a <_tzset_unlocked_r+0x3a>
   d7b36:	782b      	ldrb	r3, [r5, #0]
   d7b38:	4a9f      	ldr	r2, [pc, #636]	; (d7db8 <_tzset_unlocked_r+0x2e8>)
   d7b3a:	49a0      	ldr	r1, [pc, #640]	; (d7dbc <_tzset_unlocked_r+0x2ec>)
   d7b3c:	2b3a      	cmp	r3, #58	; 0x3a
   d7b3e:	bf08      	it	eq
   d7b40:	3501      	addeq	r5, #1
   d7b42:	ae0a      	add	r6, sp, #40	; 0x28
   d7b44:	4633      	mov	r3, r6
   d7b46:	4628      	mov	r0, r5
   d7b48:	f7fd fcd8 	bl	d54fc <siscanf>
   d7b4c:	2800      	cmp	r0, #0
   d7b4e:	f340 8123 	ble.w	d7d98 <_tzset_unlocked_r+0x2c8>
   d7b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b54:	18ef      	adds	r7, r5, r3
   d7b56:	5ceb      	ldrb	r3, [r5, r3]
   d7b58:	2b2d      	cmp	r3, #45	; 0x2d
   d7b5a:	d103      	bne.n	d7b64 <_tzset_unlocked_r+0x94>
   d7b5c:	3701      	adds	r7, #1
   d7b5e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7b62:	e003      	b.n	d7b6c <_tzset_unlocked_r+0x9c>
   d7b64:	2b2b      	cmp	r3, #43	; 0x2b
   d7b66:	bf08      	it	eq
   d7b68:	3701      	addeq	r7, #1
   d7b6a:	2501      	movs	r5, #1
   d7b6c:	f10d 0a20 	add.w	sl, sp, #32
   d7b70:	f10d 0b1e 	add.w	fp, sp, #30
   d7b74:	f04f 0800 	mov.w	r8, #0
   d7b78:	9603      	str	r6, [sp, #12]
   d7b7a:	f8cd a008 	str.w	sl, [sp, #8]
   d7b7e:	9601      	str	r6, [sp, #4]
   d7b80:	f8cd b000 	str.w	fp, [sp]
   d7b84:	4633      	mov	r3, r6
   d7b86:	aa07      	add	r2, sp, #28
   d7b88:	498d      	ldr	r1, [pc, #564]	; (d7dc0 <_tzset_unlocked_r+0x2f0>)
   d7b8a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7b8e:	4638      	mov	r0, r7
   d7b90:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7b94:	f7fd fcb2 	bl	d54fc <siscanf>
   d7b98:	4540      	cmp	r0, r8
   d7b9a:	f340 80fd 	ble.w	d7d98 <_tzset_unlocked_r+0x2c8>
   d7b9e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7ba2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7ba6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7dcc <_tzset_unlocked_r+0x2fc>
   d7baa:	213c      	movs	r1, #60	; 0x3c
   d7bac:	fb01 3302 	mla	r3, r1, r2, r3
   d7bb0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7bb4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7bb8:	fb01 3302 	mla	r3, r1, r2, r3
   d7bbc:	435d      	muls	r5, r3
   d7bbe:	6225      	str	r5, [r4, #32]
   d7bc0:	4d7c      	ldr	r5, [pc, #496]	; (d7db4 <_tzset_unlocked_r+0x2e4>)
   d7bc2:	4b7d      	ldr	r3, [pc, #500]	; (d7db8 <_tzset_unlocked_r+0x2e8>)
   d7bc4:	602b      	str	r3, [r5, #0]
   d7bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7bc8:	497c      	ldr	r1, [pc, #496]	; (d7dbc <_tzset_unlocked_r+0x2ec>)
   d7bca:	441f      	add	r7, r3
   d7bcc:	464a      	mov	r2, r9
   d7bce:	4633      	mov	r3, r6
   d7bd0:	4638      	mov	r0, r7
   d7bd2:	f7fd fc93 	bl	d54fc <siscanf>
   d7bd6:	4540      	cmp	r0, r8
   d7bd8:	dc08      	bgt.n	d7bec <_tzset_unlocked_r+0x11c>
   d7bda:	682b      	ldr	r3, [r5, #0]
   d7bdc:	606b      	str	r3, [r5, #4]
   d7bde:	4b72      	ldr	r3, [pc, #456]	; (d7da8 <_tzset_unlocked_r+0x2d8>)
   d7be0:	6a22      	ldr	r2, [r4, #32]
   d7be2:	601a      	str	r2, [r3, #0]
   d7be4:	4b72      	ldr	r3, [pc, #456]	; (d7db0 <_tzset_unlocked_r+0x2e0>)
   d7be6:	f8c3 8000 	str.w	r8, [r3]
   d7bea:	e0d5      	b.n	d7d98 <_tzset_unlocked_r+0x2c8>
   d7bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7bee:	f8c5 9004 	str.w	r9, [r5, #4]
   d7bf2:	18fd      	adds	r5, r7, r3
   d7bf4:	5cfb      	ldrb	r3, [r7, r3]
   d7bf6:	2b2d      	cmp	r3, #45	; 0x2d
   d7bf8:	d103      	bne.n	d7c02 <_tzset_unlocked_r+0x132>
   d7bfa:	3501      	adds	r5, #1
   d7bfc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7c00:	e003      	b.n	d7c0a <_tzset_unlocked_r+0x13a>
   d7c02:	2b2b      	cmp	r3, #43	; 0x2b
   d7c04:	bf08      	it	eq
   d7c06:	3501      	addeq	r5, #1
   d7c08:	2701      	movs	r7, #1
   d7c0a:	2300      	movs	r3, #0
   d7c0c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7c10:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7c14:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7c18:	930a      	str	r3, [sp, #40]	; 0x28
   d7c1a:	9603      	str	r6, [sp, #12]
   d7c1c:	f8cd a008 	str.w	sl, [sp, #8]
   d7c20:	9601      	str	r6, [sp, #4]
   d7c22:	f8cd b000 	str.w	fp, [sp]
   d7c26:	4633      	mov	r3, r6
   d7c28:	aa07      	add	r2, sp, #28
   d7c2a:	4965      	ldr	r1, [pc, #404]	; (d7dc0 <_tzset_unlocked_r+0x2f0>)
   d7c2c:	4628      	mov	r0, r5
   d7c2e:	f7fd fc65 	bl	d54fc <siscanf>
   d7c32:	2800      	cmp	r0, #0
   d7c34:	dc04      	bgt.n	d7c40 <_tzset_unlocked_r+0x170>
   d7c36:	6a23      	ldr	r3, [r4, #32]
   d7c38:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7c3c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7c3e:	e00e      	b.n	d7c5e <_tzset_unlocked_r+0x18e>
   d7c40:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7c44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7c48:	213c      	movs	r1, #60	; 0x3c
   d7c4a:	fb01 3302 	mla	r3, r1, r2, r3
   d7c4e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7c52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7c56:	fb01 3302 	mla	r3, r1, r2, r3
   d7c5a:	435f      	muls	r7, r3
   d7c5c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7c60:	4627      	mov	r7, r4
   d7c62:	441d      	add	r5, r3
   d7c64:	f04f 0900 	mov.w	r9, #0
   d7c68:	782b      	ldrb	r3, [r5, #0]
   d7c6a:	2b2c      	cmp	r3, #44	; 0x2c
   d7c6c:	bf08      	it	eq
   d7c6e:	3501      	addeq	r5, #1
   d7c70:	f895 8000 	ldrb.w	r8, [r5]
   d7c74:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7c78:	d126      	bne.n	d7cc8 <_tzset_unlocked_r+0x1f8>
   d7c7a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7c7e:	9302      	str	r3, [sp, #8]
   d7c80:	ab09      	add	r3, sp, #36	; 0x24
   d7c82:	9300      	str	r3, [sp, #0]
   d7c84:	9603      	str	r6, [sp, #12]
   d7c86:	9601      	str	r6, [sp, #4]
   d7c88:	4633      	mov	r3, r6
   d7c8a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7c8e:	494d      	ldr	r1, [pc, #308]	; (d7dc4 <_tzset_unlocked_r+0x2f4>)
   d7c90:	4628      	mov	r0, r5
   d7c92:	f7fd fc33 	bl	d54fc <siscanf>
   d7c96:	2803      	cmp	r0, #3
   d7c98:	d17e      	bne.n	d7d98 <_tzset_unlocked_r+0x2c8>
   d7c9a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7c9e:	1e4b      	subs	r3, r1, #1
   d7ca0:	2b0b      	cmp	r3, #11
   d7ca2:	d879      	bhi.n	d7d98 <_tzset_unlocked_r+0x2c8>
   d7ca4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7ca8:	1e53      	subs	r3, r2, #1
   d7caa:	2b04      	cmp	r3, #4
   d7cac:	d874      	bhi.n	d7d98 <_tzset_unlocked_r+0x2c8>
   d7cae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7cb2:	2b06      	cmp	r3, #6
   d7cb4:	d870      	bhi.n	d7d98 <_tzset_unlocked_r+0x2c8>
   d7cb6:	f887 8008 	strb.w	r8, [r7, #8]
   d7cba:	60f9      	str	r1, [r7, #12]
   d7cbc:	613a      	str	r2, [r7, #16]
   d7cbe:	617b      	str	r3, [r7, #20]
   d7cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7cc2:	eb05 0803 	add.w	r8, r5, r3
   d7cc6:	e02a      	b.n	d7d1e <_tzset_unlocked_r+0x24e>
   d7cc8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7ccc:	bf06      	itte	eq
   d7cce:	3501      	addeq	r5, #1
   d7cd0:	4643      	moveq	r3, r8
   d7cd2:	2344      	movne	r3, #68	; 0x44
   d7cd4:	220a      	movs	r2, #10
   d7cd6:	a90b      	add	r1, sp, #44	; 0x2c
   d7cd8:	4628      	mov	r0, r5
   d7cda:	9305      	str	r3, [sp, #20]
   d7cdc:	f7ff fe3e 	bl	d795c <strtoul>
   d7ce0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7ce4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7ce8:	4545      	cmp	r5, r8
   d7cea:	9b05      	ldr	r3, [sp, #20]
   d7cec:	d114      	bne.n	d7d18 <_tzset_unlocked_r+0x248>
   d7cee:	234d      	movs	r3, #77	; 0x4d
   d7cf0:	f1b9 0f00 	cmp.w	r9, #0
   d7cf4:	d107      	bne.n	d7d06 <_tzset_unlocked_r+0x236>
   d7cf6:	7223      	strb	r3, [r4, #8]
   d7cf8:	2303      	movs	r3, #3
   d7cfa:	60e3      	str	r3, [r4, #12]
   d7cfc:	2302      	movs	r3, #2
   d7cfe:	6123      	str	r3, [r4, #16]
   d7d00:	f8c4 9014 	str.w	r9, [r4, #20]
   d7d04:	e00b      	b.n	d7d1e <_tzset_unlocked_r+0x24e>
   d7d06:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7d0a:	230b      	movs	r3, #11
   d7d0c:	62a3      	str	r3, [r4, #40]	; 0x28
   d7d0e:	2301      	movs	r3, #1
   d7d10:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7d12:	2300      	movs	r3, #0
   d7d14:	6323      	str	r3, [r4, #48]	; 0x30
   d7d16:	e002      	b.n	d7d1e <_tzset_unlocked_r+0x24e>
   d7d18:	b280      	uxth	r0, r0
   d7d1a:	723b      	strb	r3, [r7, #8]
   d7d1c:	6178      	str	r0, [r7, #20]
   d7d1e:	2302      	movs	r3, #2
   d7d20:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7d24:	2300      	movs	r3, #0
   d7d26:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7d2a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7d2e:	930a      	str	r3, [sp, #40]	; 0x28
   d7d30:	f898 3000 	ldrb.w	r3, [r8]
   d7d34:	2b2f      	cmp	r3, #47	; 0x2f
   d7d36:	d10b      	bne.n	d7d50 <_tzset_unlocked_r+0x280>
   d7d38:	9603      	str	r6, [sp, #12]
   d7d3a:	f8cd a008 	str.w	sl, [sp, #8]
   d7d3e:	9601      	str	r6, [sp, #4]
   d7d40:	f8cd b000 	str.w	fp, [sp]
   d7d44:	4633      	mov	r3, r6
   d7d46:	aa07      	add	r2, sp, #28
   d7d48:	491f      	ldr	r1, [pc, #124]	; (d7dc8 <_tzset_unlocked_r+0x2f8>)
   d7d4a:	4640      	mov	r0, r8
   d7d4c:	f7fd fbd6 	bl	d54fc <siscanf>
   d7d50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7d54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7d58:	213c      	movs	r1, #60	; 0x3c
   d7d5a:	fb01 3302 	mla	r3, r1, r2, r3
   d7d5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7d62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7d66:	fb01 3302 	mla	r3, r1, r2, r3
   d7d6a:	61bb      	str	r3, [r7, #24]
   d7d6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7d6e:	f109 0901 	add.w	r9, r9, #1
   d7d72:	f1b9 0f02 	cmp.w	r9, #2
   d7d76:	4445      	add	r5, r8
   d7d78:	f107 071c 	add.w	r7, r7, #28
   d7d7c:	f47f af74 	bne.w	d7c68 <_tzset_unlocked_r+0x198>
   d7d80:	6860      	ldr	r0, [r4, #4]
   d7d82:	f7ff fdf5 	bl	d7970 <__tzcalc_limits>
   d7d86:	4b08      	ldr	r3, [pc, #32]	; (d7da8 <_tzset_unlocked_r+0x2d8>)
   d7d88:	6a22      	ldr	r2, [r4, #32]
   d7d8a:	601a      	str	r2, [r3, #0]
   d7d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7d8e:	1a9b      	subs	r3, r3, r2
   d7d90:	4a07      	ldr	r2, [pc, #28]	; (d7db0 <_tzset_unlocked_r+0x2e0>)
   d7d92:	bf18      	it	ne
   d7d94:	2301      	movne	r3, #1
   d7d96:	6013      	str	r3, [r2, #0]
   d7d98:	b00d      	add	sp, #52	; 0x34
   d7d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d9e:	bf00      	nop
   d7da0:	000d867c 	.word	0x000d867c
   d7da4:	2003e7e0 	.word	0x2003e7e0
   d7da8:	2003e7e8 	.word	0x2003e7e8
   d7dac:	000d867f 	.word	0x000d867f
   d7db0:	2003e7e4 	.word	0x2003e7e4
   d7db4:	2003e298 	.word	0x2003e298
   d7db8:	2003e7d3 	.word	0x2003e7d3
   d7dbc:	000d8683 	.word	0x000d8683
   d7dc0:	000d86a6 	.word	0x000d86a6
   d7dc4:	000d8692 	.word	0x000d8692
   d7dc8:	000d86a5 	.word	0x000d86a5
   d7dcc:	2003e7c8 	.word	0x2003e7c8

000d7dd0 <_findenv_r>:
   d7dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7dd4:	4607      	mov	r7, r0
   d7dd6:	468b      	mov	fp, r1
   d7dd8:	4690      	mov	r8, r2
   d7dda:	f000 f8d9 	bl	d7f90 <__env_lock>
   d7dde:	4b19      	ldr	r3, [pc, #100]	; (d7e44 <_findenv_r+0x74>)
   d7de0:	681d      	ldr	r5, [r3, #0]
   d7de2:	469a      	mov	sl, r3
   d7de4:	b13d      	cbz	r5, d7df6 <_findenv_r+0x26>
   d7de6:	465c      	mov	r4, fp
   d7de8:	4623      	mov	r3, r4
   d7dea:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7dee:	b142      	cbz	r2, d7e02 <_findenv_r+0x32>
   d7df0:	2a3d      	cmp	r2, #61	; 0x3d
   d7df2:	461c      	mov	r4, r3
   d7df4:	d1f8      	bne.n	d7de8 <_findenv_r+0x18>
   d7df6:	4638      	mov	r0, r7
   d7df8:	f000 f8cb 	bl	d7f92 <__env_unlock>
   d7dfc:	2000      	movs	r0, #0
   d7dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e02:	ebcb 0404 	rsb	r4, fp, r4
   d7e06:	46a9      	mov	r9, r5
   d7e08:	f859 0b04 	ldr.w	r0, [r9], #4
   d7e0c:	2800      	cmp	r0, #0
   d7e0e:	d0f2      	beq.n	d7df6 <_findenv_r+0x26>
   d7e10:	4622      	mov	r2, r4
   d7e12:	4659      	mov	r1, fp
   d7e14:	f7ff fc6b 	bl	d76ee <strncmp>
   d7e18:	b988      	cbnz	r0, d7e3e <_findenv_r+0x6e>
   d7e1a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7e1e:	191e      	adds	r6, r3, r4
   d7e20:	5d1b      	ldrb	r3, [r3, r4]
   d7e22:	2b3d      	cmp	r3, #61	; 0x3d
   d7e24:	d10b      	bne.n	d7e3e <_findenv_r+0x6e>
   d7e26:	f8da 3000 	ldr.w	r3, [sl]
   d7e2a:	1aed      	subs	r5, r5, r3
   d7e2c:	10ad      	asrs	r5, r5, #2
   d7e2e:	4638      	mov	r0, r7
   d7e30:	f8c8 5000 	str.w	r5, [r8]
   d7e34:	f000 f8ad 	bl	d7f92 <__env_unlock>
   d7e38:	1c70      	adds	r0, r6, #1
   d7e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e3e:	464d      	mov	r5, r9
   d7e40:	e7e1      	b.n	d7e06 <_findenv_r+0x36>
   d7e42:	bf00      	nop
   d7e44:	2003e2e0 	.word	0x2003e2e0

000d7e48 <_getenv_r>:
   d7e48:	b507      	push	{r0, r1, r2, lr}
   d7e4a:	aa01      	add	r2, sp, #4
   d7e4c:	f7ff ffc0 	bl	d7dd0 <_findenv_r>
   d7e50:	b003      	add	sp, #12
   d7e52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7e58 <__gettzinfo>:
   d7e58:	4800      	ldr	r0, [pc, #0]	; (d7e5c <__gettzinfo+0x4>)
   d7e5a:	4770      	bx	lr
   d7e5c:	2003e2a0 	.word	0x2003e2a0

000d7e60 <gmtime_r>:
   d7e60:	6802      	ldr	r2, [r0, #0]
   d7e62:	4b47      	ldr	r3, [pc, #284]	; (d7f80 <gmtime_r+0x120>)
   d7e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e66:	fb92 f4f3 	sdiv	r4, r2, r3
   d7e6a:	fb03 2214 	mls	r2, r3, r4, r2
   d7e6e:	2a00      	cmp	r2, #0
   d7e70:	bfbc      	itt	lt
   d7e72:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7e76:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7e7a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7e7e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7e82:	fb92 f3f0 	sdiv	r3, r2, r0
   d7e86:	fb00 2213 	mls	r2, r0, r3, r2
   d7e8a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7e8e:	bfac      	ite	ge
   d7e90:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7e94:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7e98:	608b      	str	r3, [r1, #8]
   d7e9a:	fb92 f3f0 	sdiv	r3, r2, r0
   d7e9e:	fb00 2213 	mls	r2, r0, r3, r2
   d7ea2:	604b      	str	r3, [r1, #4]
   d7ea4:	600a      	str	r2, [r1, #0]
   d7ea6:	2307      	movs	r3, #7
   d7ea8:	1ce2      	adds	r2, r4, #3
   d7eaa:	fb92 f3f3 	sdiv	r3, r2, r3
   d7eae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7eb2:	1ad3      	subs	r3, r2, r3
   d7eb4:	618b      	str	r3, [r1, #24]
   d7eb6:	4b33      	ldr	r3, [pc, #204]	; (d7f84 <gmtime_r+0x124>)
   d7eb8:	4d33      	ldr	r5, [pc, #204]	; (d7f88 <gmtime_r+0x128>)
   d7eba:	fb94 f5f5 	sdiv	r5, r4, r5
   d7ebe:	fb03 4405 	mla	r4, r3, r5, r4
   d7ec2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7ec6:	fbb4 f2f2 	udiv	r2, r4, r2
   d7eca:	4422      	add	r2, r4
   d7ecc:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7ed0:	fbb4 f3f7 	udiv	r3, r4, r7
   d7ed4:	1ad2      	subs	r2, r2, r3
   d7ed6:	482d      	ldr	r0, [pc, #180]	; (d7f8c <gmtime_r+0x12c>)
   d7ed8:	fbb4 f0f0 	udiv	r0, r4, r0
   d7edc:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7ee0:	1a13      	subs	r3, r2, r0
   d7ee2:	fbb3 f6f6 	udiv	r6, r3, r6
   d7ee6:	4434      	add	r4, r6
   d7ee8:	f240 126d 	movw	r2, #365	; 0x16d
   d7eec:	fbb3 f0f2 	udiv	r0, r3, r2
   d7ef0:	fbb3 f3f7 	udiv	r3, r3, r7
   d7ef4:	1ae3      	subs	r3, r4, r3
   d7ef6:	fb02 3310 	mls	r3, r2, r0, r3
   d7efa:	2499      	movs	r4, #153	; 0x99
   d7efc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d7f00:	3202      	adds	r2, #2
   d7f02:	fbb2 f2f4 	udiv	r2, r2, r4
   d7f06:	2a0a      	cmp	r2, #10
   d7f08:	fb04 f402 	mul.w	r4, r4, r2
   d7f0c:	f104 0602 	add.w	r6, r4, #2
   d7f10:	f04f 0405 	mov.w	r4, #5
   d7f14:	fbb6 f4f4 	udiv	r4, r6, r4
   d7f18:	bf34      	ite	cc
   d7f1a:	2602      	movcc	r6, #2
   d7f1c:	f06f 0609 	mvncs.w	r6, #9
   d7f20:	4416      	add	r6, r2
   d7f22:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7f26:	fb02 0505 	mla	r5, r2, r5, r0
   d7f2a:	1c5f      	adds	r7, r3, #1
   d7f2c:	2e01      	cmp	r6, #1
   d7f2e:	bf98      	it	ls
   d7f30:	3501      	addls	r5, #1
   d7f32:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7f36:	eba7 0704 	sub.w	r7, r7, r4
   d7f3a:	d302      	bcc.n	d7f42 <gmtime_r+0xe2>
   d7f3c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7f40:	e014      	b.n	d7f6c <gmtime_r+0x10c>
   d7f42:	0782      	lsls	r2, r0, #30
   d7f44:	d105      	bne.n	d7f52 <gmtime_r+0xf2>
   d7f46:	2464      	movs	r4, #100	; 0x64
   d7f48:	fbb0 f2f4 	udiv	r2, r0, r4
   d7f4c:	fb04 0212 	mls	r2, r4, r2, r0
   d7f50:	b94a      	cbnz	r2, d7f66 <gmtime_r+0x106>
   d7f52:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7f56:	fbb0 f4f2 	udiv	r4, r0, r2
   d7f5a:	fb02 0014 	mls	r0, r2, r4, r0
   d7f5e:	fab0 f280 	clz	r2, r0
   d7f62:	0952      	lsrs	r2, r2, #5
   d7f64:	e000      	b.n	d7f68 <gmtime_r+0x108>
   d7f66:	2201      	movs	r2, #1
   d7f68:	333b      	adds	r3, #59	; 0x3b
   d7f6a:	441a      	add	r2, r3
   d7f6c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7f70:	2300      	movs	r3, #0
   d7f72:	61ca      	str	r2, [r1, #28]
   d7f74:	614d      	str	r5, [r1, #20]
   d7f76:	610e      	str	r6, [r1, #16]
   d7f78:	60cf      	str	r7, [r1, #12]
   d7f7a:	620b      	str	r3, [r1, #32]
   d7f7c:	4608      	mov	r0, r1
   d7f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f80:	00015180 	.word	0x00015180
   d7f84:	fffdc54f 	.word	0xfffdc54f
   d7f88:	00023ab1 	.word	0x00023ab1
   d7f8c:	00023ab0 	.word	0x00023ab0

000d7f90 <__env_lock>:
   d7f90:	4770      	bx	lr

000d7f92 <__env_unlock>:
   d7f92:	4770      	bx	lr

000d7f94 <dynalib_user>:
   d7f94:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7fa4:	0000 0000                                   ....

000d7fa8 <_ZL13releaseNumber>:
   d7fa8:	2e31 3531 0000 2e25 6630 2525 2500 2e33     1.15..%.0f%%.%3.
   d7fb8:	6631 5620 2500 2e33 6631 4420 6765 6572     1f V.%3.1f Degre
   d7fc8:	7365 4320 5300 6e65 6f73 2072 6552 6461     es C.Sensor Read
   d7fd8:	4620 6961 656c 2c64 6120 7474 6d65 7470      Failed, attempt
   d7fe8:	2520 0069 6553 736e 6e69 0067 6556 6272      %i.Sensing.Verb
   d7ff8:	736f 2065 6f4d 6564 5320 6174 7472 6465     ose Mode Started
   d8008:	002e 6556 6272 736f 2065 6f4d 6564 4120     ..Verbose Mode A
   d8018:	726c 6165 7964 4f20 2e4e 3000 5600 7265     lready ON..0.Ver
   d8028:	6f62 6573 4d20 646f 2065 7453 706f 6570     bose Mode Stoppe
   d8038:	2e64 5600 7265 6f62 6573 4d20 646f 2065     d..Verbose Mode 
   d8048:	6c61 6572 6461 2079 464f 2e46 7b00 5422     already OFF..{"T
   d8058:	6d65 6570 6172 7574 6572 3a22 3325 312e     emperature":%3.1
   d8068:	2c66 2220 6142 7474 7265 2279 253a 2e33     f, "Battery":%3.
   d8078:	6631 007d 6941 2d72 7551 6c61 7469 2d79     1f}.Air-Quality-
   d8088:	6f48 6b6f 4e00 206f 6144 6174 5500 6962     Hook.No Data.Ubi
   d8098:	6f64 7374 4820 6f6f 006b 6552 7073 6e6f     dots Hook.Respon
   d80a8:	6573 5220 6365 6965 6576 0064 7453 7461     se Received.Stat
   d80b8:	0065 7254 6e61 6973 6974 6e6f 203a 7325     e.Transition: %s
   d80c8:	7420 206f 7325 4e00 7765 4820 756f 2d72      to %s.New Hour-
   d80d8:	5220 7065 726f 6974 676e 4200 6769 4320      Reporting.Big C
   d80e8:	6168 676e 2065 202d 6152 6970 2064 2026     hange - Rapid & 
   d80f8:	6552 6f70 7472 6e69 0067 6843 6e61 6567     Reporting.Change
   d8108:	2d20 5220 7065 726f 6974 676e 4e00 206f      - Reporting.No 
   d8118:	6843 6e61 6567 2d20 4920 6c64 0065 6554     Change - Idle.Te
   d8128:	706d 7265 7461 7275 0065 7073 7261 2f6b     mperature.spark/
   d8138:	6564 6976 6563 732f 7365 6973 6e6f 652f     device/session/e
   d8148:	646e 5200 7365 7465 6974 676e 6920 206e     nd.Resetting in 
   d8158:	3033 7320 6365 6e6f 7364 4500 7272 726f     30 seconds.Error
   d8168:	4300 6d6f 616d 646e 6120 6363 7065 6574     .Command accepte
   d8178:	2064 202d 6572 6f70 7472 6e69 2067 6f6e     d - reporting no
   d8188:	0077 7546 636e 6974 6e6f 4300 6d6f 616d     w.Function.Comma
   d8198:	646e 6120 6363 7065 6574 2064 202d 6573     nd accepted - se
   d81a8:	736e 6e69 2067 6f6e 0077 6576 6272 736f     nsing now.verbos
   d81b8:	4d65 646f 0065 6547 2d74 6552 6461 6e69     eMode.Get-Readin
   d81c8:	0067 6553 646e 522d 7065 726f 0074 6552     g.Send-Report.Re
   d81d8:	656c 7361 0065 6953 6e67 6c61 4200 7461     lease.Signal.Bat
   d81e8:	6574 7972 4900 4c44 0045 0000               tery.IDLE...

000d81f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d81fc:	556b 000d 5571 000d 559b 000d 557f 000d     kU..qU...U...U..
   d820c:	556d 000d                                   mU..

000d8210 <_ZTVN5spark13EthernetClassE>:
	...
   d8218:	5b73 000d 5b69 000d 5b5f 000d 5b55 000d     s[..i[.._[..U[..
   d8228:	5b49 000d 5b3d 000d 5b31 000d 5b29 000d     I[..=[..1[..)[..
   d8238:	5b1f 000d 5b15 000d 5ed9 000d               .[...[...^..

000d8244 <_ZTV7TwoWire>:
	...
   d824c:	5b91 000d 5bdb 000d 5bb3 000d 5b93 000d     .[...[...[...[..
   d825c:	5bbb 000d 5bc3 000d 5bcb 000d 5bd3 000d     .[...[...[...[..

000d826c <_ZTV9IPAddress>:
	...
   d8274:	5c2d 000d 5c1d 000d 5c1f 000d 0066 6e6c     -\...\...\..f.ln
   d8284:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d8294:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d82a4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d82b4:	203d 6400 7465 6961 736c 3d20 0020 6162     = .details = .ba
   d82c4:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d82d4:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d82e4:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d82f4:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d8304:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d8314:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d8324:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d8334:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d8344:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d8354:	6170 696e 0063 6c61 006c 0000               panic.all...

000d8360 <_ZTVN5spark9MeshClassE>:
	...
   d8368:	5d6f 000d 5d65 000d 5d5b 000d 5d51 000d     o]..e]..[]..Q]..
   d8378:	5d45 000d 5d39 000d 5d2d 000d 5d25 000d     E]..9]..-]..%]..
   d8388:	5d1b 000d 5d11 000d 5ed9 000d               .]...]...^..

000d8394 <_ZTVN5spark12NetworkClassE>:
	...
   d839c:	5e71 000d 5e7b 000d 5e85 000d 5e8f 000d     q^..{^...^...^..
   d83ac:	5e99 000d 5ea5 000d 5eb1 000d 5ebd 000d     .^...^...^...^..
   d83bc:	5ec5 000d 5ecf 000d 5ed9 000d               .^...^...^..

000d83c8 <_ZTV8SPIClass>:
	...
   d83d0:	6091 000d 6093 000d 2b25 3330 3a64 3025     .`...`..%+03d:%0
   d83e0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d83f0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d8400 <_ZTV11USARTSerial>:
	...
   d8408:	632d 000d 637d 000d 638b 000d 5fb9 000d     -c..}c...c..._..
   d8418:	6341 000d 6363 000d 634f 000d 6377 000d     Ac..cc..Oc..wc..
   d8428:	632f 000d 6333 000d                         /c..3c..

000d8430 <_ZTV9USBSerial>:
	...
   d8438:	6435 000d 6485 000d 6493 000d 5fb9 000d     5d...d...d..._..
   d8448:	6471 000d 6437 000d 644d 000d 647f 000d     qd..7d..Md...d..
   d8458:	6463 000d 6431 000d                         cd..1d..

000d8460 <_ZTVN5spark9WiFiClassE>:
	...
   d8468:	6605 000d 65fb 000d 65f1 000d 6599 000d     .f...e...e...e..
   d8478:	65e5 000d 65d9 000d 65cd 000d 65c5 000d     .e...e...e...e..
   d8488:	65bb 000d 65b1 000d 5ed9 000d               .e...e...^..

000d8494 <_ZTV10WiFiSignal>:
	...
   d849c:	6539 000d 65a3 000d 653b 000d 6645 000d     9e...e..;e..Ef..
   d84ac:	6541 000d 6611 000d 656d 000d               Ae...f..me..

000d84b8 <_ctype_>:
   d84b8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d84c8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d84d8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d84e8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d84f8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8508:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8518:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8528:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8538:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d85bc <__sf_fake_stdin>:
	...

000d85dc <__sf_fake_stdout>:
	...

000d85fc <__sf_fake_stderr>:
	...

000d861c <__month_lengths>:
   d861c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d862c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d863c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d864c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d865c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d866c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d867c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d868c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d869c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d86ac:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d86b8 <link_const_variable_data_end>:
   d86b8:	000d49ad 	.word	0x000d49ad
   d86bc:	000d4c43 	.word	0x000d4c43
   d86c0:	000d5025 	.word	0x000d5025
   d86c4:	000d5b7d 	.word	0x000d5b7d
   d86c8:	000d5d01 	.word	0x000d5d01
   d86cc:	000d5e25 	.word	0x000d5e25
   d86d0:	000d5fa5 	.word	0x000d5fa5
   d86d4:	000d6075 	.word	0x000d6075
   d86d8:	000d6209 	.word	0x000d6209
   d86dc:	000d6319 	.word	0x000d6319
   d86e0:	000d671d 	.word	0x000d671d
   d86e4:	000d68dd 	.word	0x000d68dd
   d86e8:	000d6935 	.word	0x000d6935
   d86ec:	000d69f9 	.word	0x000d69f9
   d86f0:	000d6a7d 	.word	0x000d6a7d
   d86f4:	000d6b01 	.word	0x000d6b01

000d86f8 <link_constructors_end>:
	...
