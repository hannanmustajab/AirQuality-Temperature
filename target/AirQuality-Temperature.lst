
/Users/chipmc/Documents/Maker/Particle/Projects/AirQuality-Temperature/target/AirQuality-Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016b78  2**0
                  CONTENTS
  3 .data         0000006c  2003e318  000d6ae0  0000e318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000046c  2003e384  2003e384  0001e384  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6b4c  000d6b4c  00016b4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6b74  000d6b74  00016b74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bde6d  00000000  00000000  00016b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010f81  00000000  00000000  000d49e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012bae  00000000  00000000  000e5966  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001df8  00000000  00000000  000f8514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003058  00000000  00000000  000fa30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000345dd  00000000  00000000  000fd364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00028a8a  00000000  00000000  00131941  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d86bd  00000000  00000000  0015a3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b3e4  00000000  00000000  00232a88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	48 67 0d 00                                         Hg..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb2b 	bl	d6688 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb30 	bl	d669e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e318 	.word	0x2003e318
   d4048:	000d6ae0 	.word	0x000d6ae0
   d404c:	2003e384 	.word	0x2003e384
   d4050:	2003e384 	.word	0x2003e384
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fd0b 	bl	d5a74 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6ad8 	.word	0x000d6ad8
   d4080:	000d6a98 	.word	0x000d6a98

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bcbd 	b.w	d5a10 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bda3 	b.w	d4be0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bda9 	b.w	d4bf0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bda7 	b.w	d4bf0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
char temperatureString[16];

unsigned long updateRate = 5000; // Define Update Rate


void setup() {
   d40b4:	b508      	push	{r3, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d40b6:	2204      	movs	r2, #4
   d40b8:	2300      	movs	r3, #0
   d40ba:	4907      	ldr	r1, [pc, #28]	; (d40d8 <setup+0x24>)
   d40bc:	4807      	ldr	r0, [pc, #28]	; (d40dc <setup+0x28>)
   d40be:	f000 fd1f 	bl	d4b00 <spark_variable>
   d40c2:	2300      	movs	r3, #0
   d40c4:	2204      	movs	r2, #4
   d40c6:	4906      	ldr	r1, [pc, #24]	; (d40e0 <setup+0x2c>)
   d40c8:	4806      	ldr	r0, [pc, #24]	; (d40e4 <setup+0x30>)
   d40ca:	f000 fd19 	bl	d4b00 <spark_variable>
  Particle.variable("celsius",temperatureString);// Setup Particle Variable
  // Particle.variable("version",VERSION); // Particle Variable for Version
  Particle.variable("Release",releaseNumber);

  state= IDLE_STATE;
   d40ce:	4b06      	ldr	r3, [pc, #24]	; (d40e8 <setup+0x34>)
   d40d0:	2201      	movs	r2, #1
   d40d2:	701a      	strb	r2, [r3, #0]
   d40d4:	bd08      	pop	{r3, pc}
   d40d6:	bf00      	nop
   d40d8:	2003e388 	.word	0x2003e388
   d40dc:	000d6762 	.word	0x000d6762
   d40e0:	000d675c 	.word	0x000d675c
   d40e4:	000d676a 	.word	0x000d676a
   d40e8:	2003e3c4 	.word	0x2003e3c4

000d40ec <_Z20PublishDelayFunctionv>:
   Particle.publish("Temperature",temperatureString,PRIVATE);  
  }

// Function to create a delay in the publish time 
bool PublishDelayFunction()
{
   d40ec:	b510      	push	{r4, lr}
  static unsigned long tstamp = 0;                      // Static variables are defined once and retain their value
  if (millis() - tstamp  <= updateRate) return 0;
   d40ee:	4c08      	ldr	r4, [pc, #32]	; (d4110 <_Z20PublishDelayFunctionv+0x24>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40f0:	f000 fbd2 	bl	d4898 <HAL_Timer_Get_Milli_Seconds>
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	1ac0      	subs	r0, r0, r3
   d40f8:	4b06      	ldr	r3, [pc, #24]	; (d4114 <_Z20PublishDelayFunctionv+0x28>)
   d40fa:	681b      	ldr	r3, [r3, #0]
   d40fc:	4298      	cmp	r0, r3
   d40fe:	d904      	bls.n	d410a <_Z20PublishDelayFunctionv+0x1e>
   d4100:	f000 fbca 	bl	d4898 <HAL_Timer_Get_Milli_Seconds>
  else 
  {
    tstamp = millis();
   d4104:	6020      	str	r0, [r4, #0]
   d4106:	2001      	movs	r0, #1
   d4108:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time 
bool PublishDelayFunction()
{
  static unsigned long tstamp = 0;                      // Static variables are defined once and retain their value
  if (millis() - tstamp  <= updateRate) return 0;
   d410a:	2000      	movs	r0, #0
  Measuring state where you update the temperatureString
  Reporting state where you publish the results
  Then back to the idle state for the next samples
  Give it a shot and let me know if you get stuck.  Your main loop should only be the Switch case statement on "state"
  */
}
   d410c:	bd10      	pop	{r4, pc}
   d410e:	bf00      	nop
   d4110:	2003e3c8 	.word	0x2003e3c8
   d4114:	2003e318 	.word	0x2003e318

000d4118 <loop>:

  state= IDLE_STATE;
}


void loop() {
   d4118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
// Reading data from the sensor.    
   if (sensor.read()) {
   d411a:	481c      	ldr	r0, [pc, #112]	; (d418c <loop+0x74>)
   d411c:	f000 f964 	bl	d43e8 <_ZN4DS184readEv>
   d4120:	b168      	cbz	r0, d413e <loop+0x26>
      snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", sensor.celsius());  // Ensures you get the size right and prevent memory overflow2
   d4122:	481a      	ldr	r0, [pc, #104]	; (d418c <loop+0x74>)
   d4124:	f000 f984 	bl	d4430 <_ZN4DS187celsiusEv>
   d4128:	ee10 0a10 	vmov	r0, s0
   d412c:	f001 ffe8 	bl	d6100 <__aeabi_f2d>
   d4130:	4a17      	ldr	r2, [pc, #92]	; (d4190 <loop+0x78>)
   d4132:	e9cd 0100 	strd	r0, r1, [sp]
   d4136:	2110      	movs	r1, #16
   d4138:	4816      	ldr	r0, [pc, #88]	; (d4194 <loop+0x7c>)
   d413a:	f000 fd61 	bl	d4c00 <snprintf>
   }
   waitUntil(PublishDelayFunction);
   d413e:	f7ff ffd5 	bl	d40ec <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4142:	b910      	cbnz	r0, d414a <loop+0x32>
            spark_process();
   d4144:	f000 fce4 	bl	d4b10 <spark_process>
   d4148:	e7f9      	b.n	d413e <loop+0x26>
   d414a:	f7ff ffcf 	bl	d40ec <_Z20PublishDelayFunctionv>
   d414e:	4b12      	ldr	r3, [pc, #72]	; (d4198 <loop+0x80>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4150:	4a10      	ldr	r2, [pc, #64]	; (d4194 <loop+0x7c>)
   d4152:	781b      	ldrb	r3, [r3, #0]
   d4154:	f88d 3000 	strb.w	r3, [sp]
   d4158:	4910      	ldr	r1, [pc, #64]	; (d419c <loop+0x84>)
   d415a:	233c      	movs	r3, #60	; 0x3c
   d415c:	a802      	add	r0, sp, #8
   d415e:	f000 fed1 	bl	d4f04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4162:	9c03      	ldr	r4, [sp, #12]
   d4164:	b17c      	cbz	r4, d4186 <loop+0x6e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4166:	6863      	ldr	r3, [r4, #4]
   d4168:	3b01      	subs	r3, #1
   d416a:	6063      	str	r3, [r4, #4]
   d416c:	b95b      	cbnz	r3, d4186 <loop+0x6e>
        {
          _M_dispose();
   d416e:	6823      	ldr	r3, [r4, #0]
   d4170:	4620      	mov	r0, r4
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4176:	68a3      	ldr	r3, [r4, #8]
   d4178:	3b01      	subs	r3, #1
   d417a:	60a3      	str	r3, [r4, #8]
   d417c:	b91b      	cbnz	r3, d4186 <loop+0x6e>
            _M_destroy();
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	4620      	mov	r0, r4
   d4182:	68db      	ldr	r3, [r3, #12]
   d4184:	4798      	blx	r3
   Particle.publish("Temperature",temperatureString,PRIVATE);  
  }
   d4186:	b004      	add	sp, #16
   d4188:	bd10      	pop	{r4, pc}
   d418a:	bf00      	nop
   d418c:	2003e398 	.word	0x2003e398
   d4190:	000d6772 	.word	0x000d6772
   d4194:	2003e388 	.word	0x2003e388
   d4198:	2003e3c5 	.word	0x2003e3c5
   d419c:	000d6782 	.word	0x000d6782

000d41a0 <_GLOBAL__sub_I_sensor>:
  Measuring state where you update the temperatureString
  Reporting state where you publish the results
  Then back to the idle state for the next samples
  Give it a shot and let me know if you get stuck.  Your main loop should only be the Switch case statement on "state"
  */
}
   d41a0:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d41a2:	4b06      	ldr	r3, [pc, #24]	; (d41bc <_GLOBAL__sub_I_sensor+0x1c>)
   d41a4:	2201      	movs	r2, #1
   d41a6:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41a8:	f000 fb7e 	bl	d48a8 <HAL_Pin_Map>


#include "DS18.h"

// Initialize sensor object
DS18 sensor(D6);
   d41ac:	2200      	movs	r2, #0
   d41ae:	2106      	movs	r1, #6
   d41b0:	4803      	ldr	r0, [pc, #12]	; (d41c0 <_GLOBAL__sub_I_sensor+0x20>)
  Measuring state where you update the temperatureString
  Reporting state where you publish the results
  Then back to the idle state for the next samples
  Give it a shot and let me know if you get stuck.  Your main loop should only be the Switch case statement on "state"
  */
}
   d41b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


#include "DS18.h"

// Initialize sensor object
DS18 sensor(D6);
   d41b6:	f000 b816 	b.w	d41e6 <_ZN4DS18C1Etb>
   d41ba:	bf00      	nop
   d41bc:	2003e3c5 	.word	0x2003e3c5
   d41c0:	2003e398 	.word	0x2003e398

000d41c4 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d41c4:	2300      	movs	r3, #0
  _celsius = 0;
   d41c6:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
   d41c8:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d41ca:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d41cc:	6183      	str	r3, [r0, #24]
   d41ce:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d41d0:	6203      	str	r3, [r0, #32]
   d41d2:	6243      	str	r3, [r0, #36]	; 0x24
   d41d4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d41d8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d41dc:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  _crcError = false;
   d41e0:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   d41e4:	4770      	bx	lr

000d41e6 <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
   d41e6:	b538      	push	{r3, r4, r5, lr}
   d41e8:	4604      	mov	r4, r0
   d41ea:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d41ec:	f000 f994 	bl	d4518 <_ZN7OneWireC1Et>
   d41f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
   d41f4:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
   d41f6:	73a5      	strb	r5, [r4, #14]
   d41f8:	8223      	strh	r3, [r4, #16]
{
  init();
   d41fa:	f7ff ffe3 	bl	d41c4 <_ZN4DS184initEv>
}
   d41fe:	4620      	mov	r0, r4
   d4200:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4204 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4206:	ed2d 8b02 	vpush	{d8}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d420a:	680b      	ldr	r3, [r1, #0]
   d420c:	6183      	str	r3, [r0, #24]
   d420e:	f100 0518 	add.w	r5, r0, #24
   d4212:	684b      	ldr	r3, [r1, #4]
   d4214:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4216:	780b      	ldrb	r3, [r1, #0]
   d4218:	2b22      	cmp	r3, #34	; 0x22

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d421a:	4604      	mov	r4, r0

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d421c:	d00a      	beq.n	d4234 <_ZN4DS184readEPh+0x30>
   d421e:	d803      	bhi.n	d4228 <_ZN4DS184readEPh+0x24>
   d4220:	2b10      	cmp	r3, #16
   d4222:	d142      	bne.n	d42aa <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
   d4224:	2301      	movs	r3, #1
   d4226:	e008      	b.n	d423a <_ZN4DS184readEPh+0x36>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4228:	2b26      	cmp	r3, #38	; 0x26
   d422a:	d005      	beq.n	d4238 <_ZN4DS184readEPh+0x34>
   d422c:	2b28      	cmp	r3, #40	; 0x28
   d422e:	d13c      	bne.n	d42aa <_ZN4DS184readEPh+0xa6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
   d4230:	2302      	movs	r3, #2
   d4232:	e002      	b.n	d423a <_ZN4DS184readEPh+0x36>
    case 0x22: _type = WIRE_DS1822; break;
   d4234:	2303      	movs	r3, #3
   d4236:	e000      	b.n	d423a <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d4238:	2304      	movs	r3, #4
   d423a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
   d423e:	4620      	mov	r0, r4
   d4240:	f000 f974 	bl	d452c <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d4244:	4629      	mov	r1, r5
   d4246:	4620      	mov	r0, r4
   d4248:	f000 fa30 	bl	d46ac <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
   d424c:	7ba2      	ldrb	r2, [r4, #14]
   d424e:	2144      	movs	r1, #68	; 0x44
   d4250:	4620      	mov	r0, r4
   d4252:	f000 f9f8 	bl	d4646 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
   d4256:	8a20      	ldrh	r0, [r4, #16]
   d4258:	f000 fcea 	bl	d4c30 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
   d425c:	4620      	mov	r0, r4
   d425e:	f000 f965 	bl	d452c <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4262:	4629      	mov	r1, r5
   d4264:	4620      	mov	r0, r4
   d4266:	f000 fa21 	bl	d46ac <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d426a:	2200      	movs	r2, #0
   d426c:	21b8      	movs	r1, #184	; 0xb8
   d426e:	4620      	mov	r0, r4
   d4270:	f000 f9e9 	bl	d4646 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d4274:	2200      	movs	r2, #0
   d4276:	4611      	mov	r1, r2
   d4278:	4620      	mov	r0, r4
   d427a:	f000 f9e4 	bl	d4646 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
   d427e:	4620      	mov	r0, r4
   d4280:	f000 f954 	bl	d452c <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4284:	4629      	mov	r1, r5
   d4286:	4620      	mov	r0, r4
   d4288:	f000 fa10 	bl	d46ac <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d428c:	2200      	movs	r2, #0
   d428e:	21be      	movs	r1, #190	; 0xbe
   d4290:	4620      	mov	r0, r4
   d4292:	f000 f9d8 	bl	d4646 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d4296:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d429a:	2b04      	cmp	r3, #4
   d429c:	d109      	bne.n	d42b2 <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d429e:	2200      	movs	r2, #0
   d42a0:	4611      	mov	r1, r2
   d42a2:	4620      	mov	r0, r4
   d42a4:	f000 f9cf 	bl	d4646 <_ZN7OneWire5writeEhh>
   d42a8:	e003      	b.n	d42b2 <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d42aa:	2000      	movs	r0, #0
   d42ac:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
   d42b0:	e094      	b.n	d43dc <_ZN4DS184readEPh+0x1d8>
   d42b2:	f104 051f 	add.w	r5, r4, #31
   d42b6:	f104 0628 	add.w	r6, r4, #40	; 0x28
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
   d42ba:	4620      	mov	r0, r4
   d42bc:	f000 f9e6 	bl	d468c <_ZN7OneWire4readEv>
   d42c0:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d42c4:	42ae      	cmp	r6, r5
   d42c6:	d1f8      	bne.n	d42ba <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d42c8:	2108      	movs	r1, #8
   d42ca:	f104 0020 	add.w	r0, r4, #32
   d42ce:	f000 fa86 	bl	d47de <_ZN7OneWire4crc8EPhh>
   d42d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d42d6:	4283      	cmp	r3, r0
   d42d8:	d004      	beq.n	d42e4 <_ZN4DS184readEPh+0xe0>
    _crcError = true;
   d42da:	2301      	movs	r3, #1
   d42dc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d42e0:	2000      	movs	r0, #0
   d42e2:	e07b      	b.n	d43dc <_ZN4DS184readEPh+0x1d8>

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d42e4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   d42e8:	f894 3020 	ldrb.w	r3, [r4, #32]
  if (_type == WIRE_DS2438) {
   d42ec:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d42f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (_type == WIRE_DS2438) {
   d42f4:	2904      	cmp	r1, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
   d42f6:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d42f8:	d127      	bne.n	d434a <_ZN4DS184readEPh+0x146>
    _raw = (_data[2] << 8) | _data[1];
   d42fa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d42fe:	ee07 3a90 	vmov	s15, r3
   d4302:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4306:	08d2      	lsrs	r2, r2, #3
   d4308:	eef8 8a67 	vcvt.f32.u32	s17, s15
   d430c:	ee07 2a90 	vmov	s15, r2
      if (_data[2] > 127) {
   d4310:	f013 0f80 	tst.w	r3, #128	; 0x80
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
   d4314:	8261      	strh	r1, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4316:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d431a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
      if (_data[2] > 127) {
   d431e:	d045      	beq.n	d43ac <_ZN4DS184readEPh+0x1a8>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d4320:	ee18 0a90 	vmov	r0, s17
   d4324:	f001 feec 	bl	d6100 <__aeabi_f2d>
   d4328:	4606      	mov	r6, r0
   d432a:	ee18 0a10 	vmov	r0, s16
   d432e:	460f      	mov	r7, r1
   d4330:	f001 fee6 	bl	d6100 <__aeabi_f2d>
   d4334:	2200      	movs	r2, #0
   d4336:	4b2b      	ldr	r3, [pc, #172]	; (d43e4 <_ZN4DS184readEPh+0x1e0>)
   d4338:	f001 ff36 	bl	d61a8 <__aeabi_dmul>
   d433c:	4602      	mov	r2, r0
   d433e:	460b      	mov	r3, r1
   d4340:	4630      	mov	r0, r6
   d4342:	4639      	mov	r1, r7
   d4344:	f001 fd7c 	bl	d5e40 <__aeabi_dsub>
   d4348:	e044      	b.n	d43d4 <_ZN4DS184readEPh+0x1d0>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
   d434a:	2901      	cmp	r1, #1
   d434c:	d003      	beq.n	d4356 <_ZN4DS184readEPh+0x152>
   d434e:	d344      	bcc.n	d43da <_ZN4DS184readEPh+0x1d6>
   d4350:	2903      	cmp	r1, #3
   d4352:	d910      	bls.n	d4376 <_ZN4DS184readEPh+0x172>
   d4354:	e041      	b.n	d43da <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4356:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d435a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d435e:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d4360:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
   d4362:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d4364:	d119      	bne.n	d439a <_ZN4DS184readEPh+0x196>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d4366:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d436a:	f023 030f 	bic.w	r3, r3, #15
   d436e:	f1c2 020c 	rsb	r2, r2, #12
   d4372:	4413      	add	r3, r2
   d4374:	e010      	b.n	d4398 <_ZN4DS184readEPh+0x194>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
   d4376:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d437a:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d437e:	d102      	bne.n	d4386 <_ZN4DS184readEPh+0x182>
   d4380:	f023 0307 	bic.w	r3, r3, #7
   d4384:	e008      	b.n	d4398 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d4386:	2a20      	cmp	r2, #32
   d4388:	d102      	bne.n	d4390 <_ZN4DS184readEPh+0x18c>
   d438a:	f023 0303 	bic.w	r3, r3, #3
   d438e:	e003      	b.n	d4398 <_ZN4DS184readEPh+0x194>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4390:	2a40      	cmp	r2, #64	; 0x40
   d4392:	d102      	bne.n	d439a <_ZN4DS184readEPh+0x196>
   d4394:	f023 0301 	bic.w	r3, r3, #1
   d4398:	8263      	strh	r3, [r4, #18]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
   d439a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d439e:	ee07 3a90 	vmov	s15, r3
   d43a2:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d43a6:	edc4 7a05 	vstr	s15, [r4, #20]
   d43aa:	e016      	b.n	d43da <_ZN4DS184readEPh+0x1d6>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d43ac:	ee18 0a10 	vmov	r0, s16
   d43b0:	f001 fea6 	bl	d6100 <__aeabi_f2d>
   d43b4:	2200      	movs	r2, #0
   d43b6:	4b0b      	ldr	r3, [pc, #44]	; (d43e4 <_ZN4DS184readEPh+0x1e0>)
   d43b8:	f001 fef6 	bl	d61a8 <__aeabi_dmul>
   d43bc:	4606      	mov	r6, r0
   d43be:	ee18 0a90 	vmov	r0, s17
   d43c2:	460f      	mov	r7, r1
   d43c4:	f001 fe9c 	bl	d6100 <__aeabi_f2d>
   d43c8:	4602      	mov	r2, r0
   d43ca:	460b      	mov	r3, r1
   d43cc:	4630      	mov	r0, r6
   d43ce:	4639      	mov	r1, r7
   d43d0:	f001 fd38 	bl	d5e44 <__adddf3>
   d43d4:	f002 f8fa 	bl	d65cc <__aeabi_d2f>
   d43d8:	6160      	str	r0, [r4, #20]
      }
  }

  // Got a good reading!
  return true;
   d43da:	2001      	movs	r0, #1
}
   d43dc:	ecbd 8b02 	vpop	{d8}
   d43e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d43e2:	bf00      	nop
   d43e4:	3fa00000 	.word	0x3fa00000

000d43e8 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
   d43e8:	b538      	push	{r3, r4, r5, lr}
   d43ea:	4604      	mov	r4, r0
  init();
   d43ec:	f7ff feea 	bl	d41c4 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
   d43f0:	f100 0518 	add.w	r5, r0, #24
   d43f4:	4629      	mov	r1, r5
   d43f6:	f000 f977 	bl	d46e8 <_ZN7OneWire6searchEPh>
   d43fa:	b930      	cbnz	r0, d440a <_ZN4DS184readEv+0x22>
    _searchDone = true;
   d43fc:	2301      	movs	r3, #1
   d43fe:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d4402:	4620      	mov	r0, r4
   d4404:	f000 f964 	bl	d46d0 <_ZN7OneWire12reset_searchEv>
    return false;
   d4408:	e010      	b.n	d442c <_ZN4DS184readEv+0x44>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d440a:	2107      	movs	r1, #7
   d440c:	4628      	mov	r0, r5
   d440e:	f000 f9e6 	bl	d47de <_ZN7OneWire4crc8EPhh>
   d4412:	7fe3      	ldrb	r3, [r4, #31]
   d4414:	4283      	cmp	r3, r0
   d4416:	d003      	beq.n	d4420 <_ZN4DS184readEv+0x38>
    _crcError = true;
   d4418:	2301      	movs	r3, #1
   d441a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d441e:	e005      	b.n	d442c <_ZN4DS184readEv+0x44>
  }

  // Read the temperature from that chip
  return read(_addr);
   d4420:	4629      	mov	r1, r5
   d4422:	4620      	mov	r0, r4
}
   d4424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
   d4428:	f7ff beec 	b.w	d4204 <_ZN4DS184readEPh>
}
   d442c:	2000      	movs	r0, #0
   d442e:	bd38      	pop	{r3, r4, r5, pc}

000d4430 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
   d4430:	ed90 0a05 	vldr	s0, [r0, #20]
   d4434:	4770      	bx	lr

000d4436 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4436:	f000 ba37 	b.w	d48a8 <HAL_Pin_Map>
	...

000d443c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d443c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d443e:	6803      	ldr	r3, [r0, #0]
   d4440:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4442:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4444:	d904      	bls.n	d4450 <nrf_gpio_pin_port_decode+0x14>
   d4446:	4a07      	ldr	r2, [pc, #28]	; (d4464 <nrf_gpio_pin_port_decode+0x28>)
   d4448:	2100      	movs	r1, #0
   d444a:	200a      	movs	r0, #10
   d444c:	f000 fb1c 	bl	d4a88 <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d4450:	6823      	ldr	r3, [r4, #0]
   d4452:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4454:	bf83      	ittte	hi
   d4456:	f003 031f 	andhi.w	r3, r3, #31
   d445a:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d445c:	4802      	ldrhi	r0, [pc, #8]	; (d4468 <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d445e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4462:	bd10      	pop	{r4, pc}
   d4464:	000d4889 	.word	0x000d4889
   d4468:	50000300 	.word	0x50000300

000d446c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d446c:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d446e:	4b0b      	ldr	r3, [pc, #44]	; (d449c <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	0100      	lsls	r0, r0, #4
   d4474:	1819      	adds	r1, r3, r0
   d4476:	5c1a      	ldrb	r2, [r3, r0]
   d4478:	784b      	ldrb	r3, [r1, #1]
   d447a:	a802      	add	r0, sp, #8
   d447c:	f003 031f 	and.w	r3, r3, #31
   d4480:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4484:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4488:	f7ff ffd8 	bl	d443c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d448c:	9a01      	ldr	r2, [sp, #4]
   d448e:	2301      	movs	r3, #1
   d4490:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4492:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4496:	b003      	add	sp, #12
   d4498:	f85d fb04 	ldr.w	pc, [sp], #4
   d449c:	2003e3cc 	.word	0x2003e3cc

000d44a0 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d44a0:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d44a2:	4b0b      	ldr	r3, [pc, #44]	; (d44d0 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	0100      	lsls	r0, r0, #4
   d44a8:	1819      	adds	r1, r3, r0
   d44aa:	5c1a      	ldrb	r2, [r3, r0]
   d44ac:	784b      	ldrb	r3, [r1, #1]
   d44ae:	a802      	add	r0, sp, #8
   d44b0:	f003 031f 	and.w	r3, r3, #31
   d44b4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d44b8:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44bc:	f7ff ffbe 	bl	d443c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d44c0:	9a01      	ldr	r2, [sp, #4]
   d44c2:	2301      	movs	r3, #1
   d44c4:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d44c6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d44ca:	b003      	add	sp, #12
   d44cc:	f85d fb04 	ldr.w	pc, [sp], #4
   d44d0:	2003e3cc 	.word	0x2003e3cc

000d44d4 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d44d4:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d44d6:	4b0f      	ldr	r3, [pc, #60]	; (d4514 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	0100      	lsls	r0, r0, #4
   d44dc:	181a      	adds	r2, r3, r0
   d44de:	5c1c      	ldrb	r4, [r3, r0]
   d44e0:	7853      	ldrb	r3, [r2, #1]
   d44e2:	a802      	add	r0, sp, #8
   d44e4:	f003 031f 	and.w	r3, r3, #31
   d44e8:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d44ec:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44f0:	f7ff ffa4 	bl	d443c <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d44f4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d44f8:	a802      	add	r0, sp, #8
   d44fa:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44fe:	f7ff ff9d 	bl	d443c <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4502:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d4506:	9800      	ldr	r0, [sp, #0]
   d4508:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d450c:	f000 0001 	and.w	r0, r0, #1
   d4510:	b002      	add	sp, #8
   d4512:	bd10      	pop	{r4, pc}
   d4514:	2003e3cc 	.word	0x2003e3cc

000d4518 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d4518:	b538      	push	{r3, r4, r5, lr}
   d451a:	4604      	mov	r4, r0
   d451c:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d451e:	4628      	mov	r0, r5
   d4520:	2100      	movs	r1, #0
   d4522:	f001 fae5 	bl	d5af0 <pinMode>
    _pin = pin;
   d4526:	8025      	strh	r5, [r4, #0]
}
   d4528:	4620      	mov	r0, r4
   d452a:	bd38      	pop	{r3, r4, r5, pc}

000d452c <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d452c:	b538      	push	{r3, r4, r5, lr}
   d452e:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d4530:	f000 fecc 	bl	d52cc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4534:	2100      	movs	r1, #0
   d4536:	8828      	ldrh	r0, [r5, #0]
   d4538:	f000 f9be 	bl	d48b8 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d453c:	f000 fec8 	bl	d52d0 <_Z10interruptsv>
   d4540:	247d      	movs	r4, #125	; 0x7d
   d4542:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d4544:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4548:	d02b      	beq.n	d45a2 <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d454a:	2002      	movs	r0, #2
   d454c:	f000 f99c 	bl	d4888 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d4550:	8828      	ldrh	r0, [r5, #0]
   d4552:	f7ff ffbf 	bl	d44d4 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d4556:	2800      	cmp	r0, #0
   d4558:	d0f3      	beq.n	d4542 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d455a:	f000 feb7 	bl	d52cc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d455e:	8828      	ldrh	r0, [r5, #0]
   d4560:	f7ff ff84 	bl	d446c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4564:	2101      	movs	r1, #1
   d4566:	8828      	ldrh	r0, [r5, #0]
   d4568:	f000 f9a6 	bl	d48b8 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d456c:	f000 feb0 	bl	d52d0 <_Z10interruptsv>
   d4570:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4574:	f000 f988 	bl	d4888 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4578:	f000 fea8 	bl	d52cc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d457c:	2100      	movs	r1, #0
   d457e:	8828      	ldrh	r0, [r5, #0]
   d4580:	f000 f99a 	bl	d48b8 <HAL_Pin_Mode>
   d4584:	2046      	movs	r0, #70	; 0x46
   d4586:	f000 f97f 	bl	d4888 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d458a:	8828      	ldrh	r0, [r5, #0]
   d458c:	f7ff ffa2 	bl	d44d4 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4590:	fab0 f480 	clz	r4, r0

    interrupts();
   d4594:	f000 fe9c 	bl	d52d0 <_Z10interruptsv>
   d4598:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d459c:	0964      	lsrs	r4, r4, #5
   d459e:	f000 f973 	bl	d4888 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d45a2:	4620      	mov	r0, r4
   d45a4:	bd38      	pop	{r3, r4, r5, pc}

000d45a6 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d45a6:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d45a8:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d45ac:	4604      	mov	r4, r0
    if (v & 1) {
   d45ae:	d013      	beq.n	d45d8 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d45b0:	f000 fe8c 	bl	d52cc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d45b4:	8820      	ldrh	r0, [r4, #0]
   d45b6:	f7ff ff59 	bl	d446c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d45ba:	2101      	movs	r1, #1
   d45bc:	8820      	ldrh	r0, [r4, #0]
   d45be:	f000 f97b 	bl	d48b8 <HAL_Pin_Mode>
   d45c2:	200a      	movs	r0, #10
   d45c4:	f000 f960 	bl	d4888 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d45c8:	8820      	ldrh	r0, [r4, #0]
   d45ca:	2100      	movs	r1, #0
   d45cc:	f000 f974 	bl	d48b8 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d45d0:	f000 fe7e 	bl	d52d0 <_Z10interruptsv>
   d45d4:	2037      	movs	r0, #55	; 0x37
   d45d6:	e012      	b.n	d45fe <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d45d8:	f000 fe78 	bl	d52cc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d45dc:	8820      	ldrh	r0, [r4, #0]
   d45de:	f7ff ff45 	bl	d446c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d45e2:	2101      	movs	r1, #1
   d45e4:	8820      	ldrh	r0, [r4, #0]
   d45e6:	f000 f967 	bl	d48b8 <HAL_Pin_Mode>
   d45ea:	2041      	movs	r0, #65	; 0x41
   d45ec:	f000 f94c 	bl	d4888 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d45f0:	8820      	ldrh	r0, [r4, #0]
   d45f2:	4629      	mov	r1, r5
   d45f4:	f000 f960 	bl	d48b8 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d45f8:	f000 fe6a 	bl	d52d0 <_Z10interruptsv>
   d45fc:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d45fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4602:	f000 b941 	b.w	d4888 <HAL_Delay_Microseconds>

000d4606 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d4606:	b510      	push	{r4, lr}
   d4608:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d460a:	f000 fe5f 	bl	d52cc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d460e:	8820      	ldrh	r0, [r4, #0]
   d4610:	f7ff ff2c 	bl	d446c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4614:	2101      	movs	r1, #1
   d4616:	8820      	ldrh	r0, [r4, #0]
   d4618:	f000 f94e 	bl	d48b8 <HAL_Pin_Mode>
   d461c:	2003      	movs	r0, #3
   d461e:	f000 f933 	bl	d4888 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4622:	2100      	movs	r1, #0
   d4624:	8820      	ldrh	r0, [r4, #0]
   d4626:	f000 f947 	bl	d48b8 <HAL_Pin_Mode>
   d462a:	200a      	movs	r0, #10
   d462c:	f000 f92c 	bl	d4888 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d4630:	8820      	ldrh	r0, [r4, #0]
   d4632:	f7ff ff4f 	bl	d44d4 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4636:	4604      	mov	r4, r0

    interrupts();
   d4638:	f000 fe4a 	bl	d52d0 <_Z10interruptsv>
   d463c:	2035      	movs	r0, #53	; 0x35
   d463e:	f000 f923 	bl	d4888 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d4642:	4620      	mov	r0, r4
   d4644:	bd10      	pop	{r4, pc}

000d4646 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d4646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d464a:	4605      	mov	r5, r0
   d464c:	4688      	mov	r8, r1
   d464e:	4617      	mov	r7, r2
   d4650:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4652:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d4654:	ea18 0f04 	tst.w	r8, r4
   d4658:	bf14      	ite	ne
   d465a:	2101      	movne	r1, #1
   d465c:	2100      	moveq	r1, #0
   d465e:	4628      	mov	r0, r5
   d4660:	f7ff ffa1 	bl	d45a6 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4664:	0064      	lsls	r4, r4, #1
   d4666:	3e01      	subs	r6, #1
   d4668:	b2e4      	uxtb	r4, r4
   d466a:	d1f3      	bne.n	d4654 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d466c:	b167      	cbz	r7, d4688 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d466e:	f000 fe2d 	bl	d52cc <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d4672:	8828      	ldrh	r0, [r5, #0]
   d4674:	f7ff ff14 	bl	d44a0 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4678:	8828      	ldrh	r0, [r5, #0]
   d467a:	2101      	movs	r1, #1
   d467c:	f000 f91c 	bl	d48b8 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d4684:	f000 be24 	b.w	d52d0 <_Z10interruptsv>
   d4688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d468c <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d468e:	4607      	mov	r7, r0
   d4690:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4692:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4694:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4696:	4638      	mov	r0, r7
   d4698:	f7ff ffb5 	bl	d4606 <_ZN7OneWire8read_bitEv>
   d469c:	b100      	cbz	r0, d46a0 <_ZN7OneWire4readEv+0x14>
   d469e:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d46a0:	0064      	lsls	r4, r4, #1
   d46a2:	3e01      	subs	r6, #1
   d46a4:	b2e4      	uxtb	r4, r4
   d46a6:	d1f6      	bne.n	d4696 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d46a8:	4628      	mov	r0, r5
   d46aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46ac <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d46ac:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d46ae:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d46b0:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d46b2:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d46b4:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d46b6:	f7ff ffc6 	bl	d4646 <_ZN7OneWire5writeEhh>
   d46ba:	1e65      	subs	r5, r4, #1
   d46bc:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d46be:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d46c2:	2200      	movs	r2, #0
   d46c4:	4630      	mov	r0, r6
   d46c6:	f7ff ffbe 	bl	d4646 <_ZN7OneWire5writeEhh>
   d46ca:	42a5      	cmp	r5, r4
   d46cc:	d1f7      	bne.n	d46be <_ZN7OneWire6selectEPKh+0x12>
}
   d46ce:	bd70      	pop	{r4, r5, r6, pc}

000d46d0 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d46d0:	2300      	movs	r3, #0
   d46d2:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d46d4:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d46d6:	72c3      	strb	r3, [r0, #11]
   d46d8:	f100 020a 	add.w	r2, r0, #10
   d46dc:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d46de:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d46e2:	4282      	cmp	r2, r0
   d46e4:	d1fb      	bne.n	d46de <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d46e6:	4770      	bx	lr

000d46e8 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d46e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d46ec:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d46ee:	4604      	mov	r4, r0
   d46f0:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d46f2:	2d00      	cmp	r5, #0
   d46f4:	d15e      	bne.n	d47b4 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d46f6:	f7ff ff19 	bl	d452c <_ZN7OneWire5resetEv>
   d46fa:	b920      	cbnz	r0, d4706 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d46fc:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d46fe:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4700:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4706:	462a      	mov	r2, r5
   d4708:	21f0      	movs	r1, #240	; 0xf0
   d470a:	4620      	mov	r0, r4
   d470c:	f7ff ff9b 	bl	d4646 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4710:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4712:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4714:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4716:	4620      	mov	r0, r4
   d4718:	f7ff ff75 	bl	d4606 <_ZN7OneWire8read_bitEv>
   d471c:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d471e:	4620      	mov	r0, r4
   d4720:	f7ff ff71 	bl	d4606 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4724:	f1b9 0f01 	cmp.w	r9, #1
   d4728:	d102      	bne.n	d4730 <_ZN7OneWire6searchEPh+0x48>
   d472a:	2801      	cmp	r0, #1
   d472c:	d11b      	bne.n	d4766 <_ZN7OneWire6searchEPh+0x7e>
   d472e:	e037      	b.n	d47a0 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d4730:	4581      	cmp	r9, r0
   d4732:	eb04 0305 	add.w	r3, r4, r5
   d4736:	d11e      	bne.n	d4776 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4738:	7aa2      	ldrb	r2, [r4, #10]
   d473a:	4297      	cmp	r7, r2
   d473c:	d207      	bcs.n	d474e <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d473e:	789a      	ldrb	r2, [r3, #2]
   d4740:	4216      	tst	r6, r2
   d4742:	bf14      	ite	ne
   d4744:	f04f 0901 	movne.w	r9, #1
   d4748:	f04f 0900 	moveq.w	r9, #0
   d474c:	e004      	b.n	d4758 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d474e:	bf0c      	ite	eq
   d4750:	f04f 0901 	moveq.w	r9, #1
   d4754:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4758:	f1b9 0f00 	cmp.w	r9, #0
   d475c:	d103      	bne.n	d4766 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d475e:	2f08      	cmp	r7, #8
   d4760:	d808      	bhi.n	d4774 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d4762:	72e7      	strb	r7, [r4, #11]
   d4764:	e006      	b.n	d4774 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d4766:	1962      	adds	r2, r4, r5
   d4768:	f04f 0901 	mov.w	r9, #1
   d476c:	7893      	ldrb	r3, [r2, #2]
   d476e:	4333      	orrs	r3, r6
   d4770:	7093      	strb	r3, [r2, #2]
   d4772:	e004      	b.n	d477e <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4774:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4776:	789a      	ldrb	r2, [r3, #2]
   d4778:	ea22 0206 	bic.w	r2, r2, r6
   d477c:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d477e:	4649      	mov	r1, r9
   d4780:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d4782:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d4784:	f7ff ff0f 	bl	d45a6 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4788:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d478c:	bf04      	itt	eq
   d478e:	3501      	addeq	r5, #1
   d4790:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4792:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4796:	bf08      	it	eq
   d4798:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d479a:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d479c:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d479e:	d9ba      	bls.n	d4716 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d47a0:	2f40      	cmp	r7, #64	; 0x40
   d47a2:	d907      	bls.n	d47b4 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d47a4:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d47a8:	f1ba 0f00 	cmp.w	sl, #0
   d47ac:	d112      	bne.n	d47d4 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d47ae:	2301      	movs	r3, #1
   d47b0:	7323      	strb	r3, [r4, #12]
   d47b2:	e00f      	b.n	d47d4 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d47b4:	2000      	movs	r0, #0
   d47b6:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d47b8:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d47ba:	72e0      	strb	r0, [r4, #11]
   d47bc:	1c63      	adds	r3, r4, #1
   d47be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d47c2:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d47c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d47c8:	f808 2f01 	strb.w	r2, [r8, #1]!
   d47cc:	42a3      	cmp	r3, r4
   d47ce:	d1f9      	bne.n	d47c4 <_ZN7OneWire6searchEPh+0xdc>
   d47d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d47d4:	78a3      	ldrb	r3, [r4, #2]
   d47d6:	2b00      	cmp	r3, #0
   d47d8:	d0ec      	beq.n	d47b4 <_ZN7OneWire6searchEPh+0xcc>
   d47da:	2001      	movs	r0, #1
   d47dc:	e7ee      	b.n	d47bc <_ZN7OneWire6searchEPh+0xd4>

000d47de <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d47de:	b530      	push	{r4, r5, lr}
   d47e0:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d47e2:	2000      	movs	r0, #0

    while (len--) {
   d47e4:	3901      	subs	r1, #1
   d47e6:	b2c9      	uxtb	r1, r1
   d47e8:	29ff      	cmp	r1, #255	; 0xff
   d47ea:	d013      	beq.n	d4814 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d47ec:	f815 4b01 	ldrb.w	r4, [r5], #1
   d47f0:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d47f2:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d47f6:	f013 0f01 	tst.w	r3, #1
   d47fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d47fe:	bf1c      	itt	ne
   d4800:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4804:	b2d8      	uxtbne	r0, r3
   d4806:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4808:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d480c:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4810:	d1ef      	bne.n	d47f2 <_ZN7OneWire4crc8EPhh+0x14>
   d4812:	e7e7      	b.n	d47e4 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d4814:	bd30      	pop	{r4, r5, pc}
	...

000d4818 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4818:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d481a:	f000 f845 	bl	d48a8 <HAL_Pin_Map>
   d481e:	4b01      	ldr	r3, [pc, #4]	; (d4824 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4820:	6018      	str	r0, [r3, #0]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	2003e3cc 	.word	0x2003e3cc

000d4828 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <os_thread_is_current+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	689b      	ldr	r3, [r3, #8]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030248 	.word	0x00030248

000d4838 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <os_thread_join+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	691b      	ldr	r3, [r3, #16]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030248 	.word	0x00030248

000d4848 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <os_thread_cleanup+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030248 	.word	0x00030248

000d4858 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <os_mutex_create+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030248 	.word	0x00030248

000d4868 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <os_mutex_recursive_create+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030248 	.word	0x00030248

000d4878 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_RNG_GetRandomNumber+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	685b      	ldr	r3, [r3, #4]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030218 	.word	0x00030218

000d4888 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_Delay_Microseconds+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	68db      	ldr	r3, [r3, #12]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030218 	.word	0x00030218

000d4898 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	695b      	ldr	r3, [r3, #20]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030218 	.word	0x00030218

000d48a8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_Pin_Map+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	681b      	ldr	r3, [r3, #0]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003022c 	.word	0x0003022c

000d48b8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_Pin_Mode+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	689b      	ldr	r3, [r3, #8]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003022c 	.word	0x0003022c

000d48c8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_Interrupts_Enable_All+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6a1b      	ldr	r3, [r3, #32]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003022c 	.word	0x0003022c

000d48d8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_Interrupts_Disable_All+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	0003022c 	.word	0x0003022c

000d48e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_I2C_Write_Data+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6a1b      	ldr	r3, [r3, #32]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030228 	.word	0x00030228

000d48f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_I2C_Available_Data+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030228 	.word	0x00030228

000d4908 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_I2C_Read_Data+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030228 	.word	0x00030228

000d4918 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_I2C_Peek_Data+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030228 	.word	0x00030228

000d4928 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_I2C_Flush_Data+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030228 	.word	0x00030228

000d4938 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_I2C_Is_Enabled+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030228 	.word	0x00030228

000d4948 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_I2C_Init+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030228 	.word	0x00030228

000d4958 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <inet_inet_ntop+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	695b      	ldr	r3, [r3, #20]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030264 	.word	0x00030264

000d4968 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <netdb_freeaddrinfo+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	689b      	ldr	r3, [r3, #8]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030268 	.word	0x00030268

000d4978 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <netdb_getaddrinfo+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	68db      	ldr	r3, [r3, #12]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030268 	.word	0x00030268

000d4988 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_SPI_Init+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	69db      	ldr	r3, [r3, #28]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030230 	.word	0x00030230

000d4998 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_SPI_Is_Enabled+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6a1b      	ldr	r3, [r3, #32]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030230 	.word	0x00030230

000d49a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_USART_Init+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	681b      	ldr	r3, [r3, #0]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003023c 	.word	0x0003023c

000d49b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_USART_Write_Data+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	68db      	ldr	r3, [r3, #12]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003023c 	.word	0x0003023c

000d49c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_USART_Available_Data+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	691b      	ldr	r3, [r3, #16]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003023c 	.word	0x0003023c

000d49d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_USART_Read_Data+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	695b      	ldr	r3, [r3, #20]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003023c 	.word	0x0003023c

000d49e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_USART_Peek_Data+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	699b      	ldr	r3, [r3, #24]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003023c 	.word	0x0003023c

000d49f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <HAL_USART_Flush_Data+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	69db      	ldr	r3, [r3, #28]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003023c 	.word	0x0003023c

000d4a08 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <HAL_USART_Is_Enabled+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6a1b      	ldr	r3, [r3, #32]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003023c 	.word	0x0003023c

000d4a18 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003023c 	.word	0x0003023c

000d4a28 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <HAL_USB_USART_Init+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	0003024c 	.word	0x0003024c

000d4a38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <HAL_USB_USART_Available_Data+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	691b      	ldr	r3, [r3, #16]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	0003024c 	.word	0x0003024c

000d4a48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	695b      	ldr	r3, [r3, #20]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003024c 	.word	0x0003024c

000d4a58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <HAL_USB_USART_Receive_Data+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	699b      	ldr	r3, [r3, #24]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003024c 	.word	0x0003024c

000d4a68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <HAL_USB_USART_Send_Data+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	69db      	ldr	r3, [r3, #28]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	0003024c 	.word	0x0003024c

000d4a78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <HAL_USB_USART_Flush_Data+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	6a1b      	ldr	r3, [r3, #32]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003024c 	.word	0x0003024c

000d4a88 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <panic_+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030260 	.word	0x00030260

000d4a98 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <set_system_mode+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	685b      	ldr	r3, [r3, #4]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030220 	.word	0x00030220

000d4aa8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <system_delay_ms+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	695b      	ldr	r3, [r3, #20]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	00030220 	.word	0x00030220

000d4ab8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <application_thread_current+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	00030220 	.word	0x00030220

000d4ac8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <application_thread_invoke+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	00030220 	.word	0x00030220

000d4ad8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b03      	ldr	r3, [pc, #12]	; (d4ae8 <system_ctrl_set_app_request_handler+0x10>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ae2:	9301      	str	r3, [sp, #4]
   d4ae4:	bd08      	pop	{r3, pc}
   d4ae6:	0000      	.short	0x0000
   d4ae8:	00030220 	.word	0x00030220

000d4aec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b03      	ldr	r3, [pc, #12]	; (d4afc <system_ctrl_set_result+0x10>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4af6:	9301      	str	r3, [sp, #4]
   d4af8:	bd08      	pop	{r3, pc}
   d4afa:	0000      	.short	0x0000
   d4afc:	00030220 	.word	0x00030220

000d4b00 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <spark_variable+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	681b      	ldr	r3, [r3, #0]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030244 	.word	0x00030244

000d4b10 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <spark_process+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	689b      	ldr	r3, [r3, #8]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030244 	.word	0x00030244

000d4b20 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <spark_send_event+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6a1b      	ldr	r3, [r3, #32]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030244 	.word	0x00030244

000d4b30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030244 	.word	0x00030244

000d4b40 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <network_connect+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	685b      	ldr	r3, [r3, #4]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030240 	.word	0x00030240

000d4b50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <network_connecting+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	689b      	ldr	r3, [r3, #8]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030240 	.word	0x00030240

000d4b60 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <network_disconnect+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	68db      	ldr	r3, [r3, #12]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030240 	.word	0x00030240

000d4b70 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <network_ready+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	691b      	ldr	r3, [r3, #16]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030240 	.word	0x00030240

000d4b80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <network_on+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	695b      	ldr	r3, [r3, #20]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030240 	.word	0x00030240

000d4b90 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <network_off+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	699b      	ldr	r3, [r3, #24]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030240 	.word	0x00030240

000d4ba0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <network_listen+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	69db      	ldr	r3, [r3, #28]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030240 	.word	0x00030240

000d4bb0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <network_listening+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6a1b      	ldr	r3, [r3, #32]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030240 	.word	0x00030240

000d4bc0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <network_set_listen_timeout+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030240 	.word	0x00030240

000d4bd0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <network_get_listen_timeout+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030240 	.word	0x00030240

000d4be0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <malloc+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	681b      	ldr	r3, [r3, #0]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	0003021c 	.word	0x0003021c

000d4bf0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <free+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	685b      	ldr	r3, [r3, #4]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	0003021c 	.word	0x0003021c

000d4c00 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <snprintf+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	69db      	ldr	r3, [r3, #28]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	0003021c 	.word	0x0003021c

000d4c10 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <abort+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	0003021c 	.word	0x0003021c

000d4c20 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <_malloc_r+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	0003021c 	.word	0x0003021c

000d4c30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c30:	2100      	movs	r1, #0
   d4c32:	f7ff bf39 	b.w	d4aa8 <system_delay_ms>

000d4c36 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4c36:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4c38:	6883      	ldr	r3, [r0, #8]
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	b90b      	cbnz	r3, d4c42 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4c3e:	f000 ffb0 	bl	d5ba2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c42:	68c3      	ldr	r3, [r0, #12]
   d4c44:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4c46:	68a3      	ldr	r3, [r4, #8]
   d4c48:	b11b      	cbz	r3, d4c52 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c4a:	2203      	movs	r2, #3
   d4c4c:	4621      	mov	r1, r4
   d4c4e:	4620      	mov	r0, r4
   d4c50:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4c52:	4620      	mov	r0, r4
}
   d4c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4c58:	f7ff ba1f 	b.w	d409a <_ZdlPv>

000d4c5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c5c:	4770      	bx	lr

000d4c5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4c5e:	2000      	movs	r0, #0
   d4c60:	4770      	bx	lr

000d4c62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4c62:	b510      	push	{r4, lr}
   d4c64:	4604      	mov	r4, r0
   d4c66:	f7ff fa18 	bl	d409a <_ZdlPv>
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	bd10      	pop	{r4, pc}

000d4c6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4c6e:	b508      	push	{r3, lr}
      { delete this; }
   d4c70:	b108      	cbz	r0, d4c76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4c72:	f7ff fff6 	bl	d4c62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4c76:	bd08      	pop	{r3, pc}

000d4c78 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c78:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c7a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c7c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c7e:	b113      	cbz	r3, d4c86 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c80:	2203      	movs	r2, #3
   d4c82:	4601      	mov	r1, r0
   d4c84:	4798      	blx	r3
    }
   d4c86:	4620      	mov	r0, r4
   d4c88:	bd10      	pop	{r4, pc}

000d4c8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4c8a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4c8c:	68c4      	ldr	r4, [r0, #12]
   d4c8e:	b1d4      	cbz	r4, d4cc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4c90:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4c92:	2b02      	cmp	r3, #2
   d4c94:	d102      	bne.n	d4c9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4c96:	68e0      	ldr	r0, [r4, #12]
   d4c98:	f7ff ffaa 	bl	d4bf0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4c9c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4c9e:	b12d      	cbz	r5, d4cac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ca0:	4628      	mov	r0, r5
   d4ca2:	f7ff ffe9 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
   d4ca6:	4628      	mov	r0, r5
   d4ca8:	f7ff f9f7 	bl	d409a <_ZdlPv>
   d4cac:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4cae:	b12d      	cbz	r5, d4cbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d4cb0:	4628      	mov	r0, r5
   d4cb2:	f7ff ffe1 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
   d4cb6:	4628      	mov	r0, r5
   d4cb8:	f7ff f9ef 	bl	d409a <_ZdlPv>
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4cc2:	f7ff b9ea 	b.w	d409a <_ZdlPv>
   d4cc6:	bd38      	pop	{r3, r4, r5, pc}

000d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4cc8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4cca:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4ccc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4cce:	b17c      	cbz	r4, d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4cd0:	6863      	ldr	r3, [r4, #4]
   d4cd2:	3b01      	subs	r3, #1
   d4cd4:	6063      	str	r3, [r4, #4]
   d4cd6:	b95b      	cbnz	r3, d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4cd8:	6823      	ldr	r3, [r4, #0]
   d4cda:	4620      	mov	r0, r4
   d4cdc:	689b      	ldr	r3, [r3, #8]
   d4cde:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ce0:	68a3      	ldr	r3, [r4, #8]
   d4ce2:	3b01      	subs	r3, #1
   d4ce4:	60a3      	str	r3, [r4, #8]
   d4ce6:	b91b      	cbnz	r3, d4cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4ce8:	6823      	ldr	r3, [r4, #0]
   d4cea:	4620      	mov	r0, r4
   d4cec:	68db      	ldr	r3, [r3, #12]
   d4cee:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4cf0:	4628      	mov	r0, r5
   d4cf2:	bd38      	pop	{r3, r4, r5, pc}

000d4cf4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4cf4:	b513      	push	{r0, r1, r4, lr}
   d4cf6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4cf8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4cfc:	2300      	movs	r3, #0
   d4cfe:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d00:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d02:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4d04:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d06:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4d08:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d0a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d0c:	f7ff ffdc 	bl	d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d10:	4620      	mov	r0, r4
   d4d12:	b002      	add	sp, #8
   d4d14:	bd10      	pop	{r4, pc}

000d4d16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4d16:	680b      	ldr	r3, [r1, #0]
   d4d18:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4d1a:	b113      	cbz	r3, d4d22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4d1c:	685a      	ldr	r2, [r3, #4]
   d4d1e:	3201      	adds	r2, #1
   d4d20:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4d22:	4770      	bx	lr

000d4d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d26:	460c      	mov	r4, r1
   d4d28:	ad02      	add	r5, sp, #8
   d4d2a:	f854 3b04 	ldr.w	r3, [r4], #4
   d4d2e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4d32:	4606      	mov	r6, r0
   d4d34:	460f      	mov	r7, r1
   d4d36:	a801      	add	r0, sp, #4
   d4d38:	4621      	mov	r1, r4
   d4d3a:	f7ff ffec 	bl	d4d16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4d3e:	4629      	mov	r1, r5
   d4d40:	4630      	mov	r0, r6
   d4d42:	f7ff ffd7 	bl	d4cf4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d46:	a801      	add	r0, sp, #4
   d4d48:	f7ff ffbe 	bl	d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	f7ff ffbb 	bl	d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4d52:	4638      	mov	r0, r7
   d4d54:	f7ff f9a1 	bl	d409a <_ZdlPv>
        return p;
    }
   d4d58:	4630      	mov	r0, r6
   d4d5a:	b003      	add	sp, #12
   d4d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d5e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4d5e:	b513      	push	{r0, r1, r4, lr}
   d4d60:	460b      	mov	r3, r1
   d4d62:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d64:	c803      	ldmia	r0, {r0, r1}
   d4d66:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4d6e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4d72:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4d76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4d7a:	b002      	add	sp, #8
   d4d7c:	bd10      	pop	{r4, pc}

000d4d7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d7e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d80:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d82:	b90a      	cbnz	r2, d4d88 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4d84:	f000 ff0d 	bl	d5ba2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d88:	68c3      	ldr	r3, [r0, #12]
    }
   d4d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d8e:	4718      	bx	r3

000d4d90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d90:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d92:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d94:	f100 0110 	add.w	r1, r0, #16
   d4d98:	f7ff fff1 	bl	d4d7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4d9c:	bd08      	pop	{r3, pc}

000d4d9e <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d9e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4da0:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4da2:	b90a      	cbnz	r2, d4da8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4da4:	f000 fefd 	bl	d5ba2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4da8:	68c3      	ldr	r3, [r0, #12]
    }
   d4daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dae:	4718      	bx	r3

000d4db0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4db0:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4db2:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4db4:	f100 0110 	add.w	r1, r0, #16
   d4db8:	f7ff fff1 	bl	d4d9e <_ZNKSt8functionIFvRKbEEclES1_>
   d4dbc:	bd08      	pop	{r3, pc}

000d4dbe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dbe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dc0:	2300      	movs	r3, #0
   d4dc2:	6083      	str	r3, [r0, #8]
   d4dc4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4dc6:	4604      	mov	r4, r0
   d4dc8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4dca:	b12b      	cbz	r3, d4dd8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4dcc:	2202      	movs	r2, #2
   d4dce:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4dd0:	68eb      	ldr	r3, [r5, #12]
   d4dd2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dd4:	68ab      	ldr	r3, [r5, #8]
   d4dd6:	60a3      	str	r3, [r4, #8]
	}
    }
   d4dd8:	4620      	mov	r0, r4
   d4dda:	bd38      	pop	{r3, r4, r5, pc}

000d4ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4de0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4de4:	b086      	sub	sp, #24
   d4de6:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4de8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4dec:	808b      	strh	r3, [r1, #4]
   d4dee:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4df0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4df2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4df6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4df8:	f04f 0002 	mov.w	r0, #2
   d4dfc:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4e00:	4299      	cmp	r1, r3
   d4e02:	d103      	bne.n	d4e0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4e04:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4e08:	2d00      	cmp	r5, #0
   d4e0a:	d1f7      	bne.n	d4dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4e0c:	d002      	beq.n	d4e14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4e0e:	f88d 1000 	strb.w	r1, [sp]
   d4e12:	e06a      	b.n	d4eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4e14:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e18:	bf1e      	ittt	ne
   d4e1a:	60e7      	strne	r7, [r4, #12]
   d4e1c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e1e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4e20:	2301      	movs	r3, #1
   d4e22:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e26:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4e28:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4e2a:	f104 0308 	add.w	r3, r4, #8
   d4e2e:	f3bf 8f5f 	dmb	sy
   d4e32:	e853 6f00 	ldrex	r6, [r3]
   d4e36:	e843 0200 	strex	r2, r0, [r3]
   d4e3a:	2a00      	cmp	r2, #0
   d4e3c:	d1f9      	bne.n	d4e32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4e3e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e42:	2e00      	cmp	r6, #0
   d4e44:	d051      	beq.n	d4eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e46:	f7ff fe37 	bl	d4ab8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e4a:	b120      	cbz	r0, d4e56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e4c:	4629      	mov	r1, r5
   d4e4e:	4630      	mov	r0, r6
   d4e50:	f7ff ff95 	bl	d4d7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e54:	e043      	b.n	d4ede <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e56:	4631      	mov	r1, r6
   d4e58:	4668      	mov	r0, sp
   d4e5a:	f7ff ffb0 	bl	d4dbe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4e5e:	68e0      	ldr	r0, [r4, #12]
   d4e60:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4e64:	b108      	cbz	r0, d4e6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4e66:	f001 fc4b 	bl	d6700 <strdup>
   d4e6a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e6c:	2010      	movs	r0, #16
   d4e6e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4e72:	f7ff f910 	bl	d4096 <_Znwj>
   d4e76:	4605      	mov	r5, r0
   d4e78:	b330      	cbz	r0, d4ec8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e7a:	f04f 0800 	mov.w	r8, #0
   d4e7e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e82:	2018      	movs	r0, #24
   d4e84:	f7ff f907 	bl	d4096 <_Znwj>
   d4e88:	4604      	mov	r4, r0
   d4e8a:	b1c0      	cbz	r0, d4ebe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e8c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e90:	4601      	mov	r1, r0
   d4e92:	4668      	mov	r0, sp
   d4e94:	f7ff ff63 	bl	d4d5e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e98:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4e9a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e9c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e9e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ea0:	9202      	str	r2, [sp, #8]
   d4ea2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ea4:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ea6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4eaa:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eac:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4eb0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4eb4:	9b04      	ldr	r3, [sp, #16]
   d4eb6:	9203      	str	r2, [sp, #12]
   d4eb8:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eba:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ebe:	4b0e      	ldr	r3, [pc, #56]	; (d4ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4ec0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ec2:	4b0e      	ldr	r3, [pc, #56]	; (d4efc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ec4:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ec6:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4ec8:	9804      	ldr	r0, [sp, #16]
   d4eca:	f7ff fe91 	bl	d4bf0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ece:	4668      	mov	r0, sp
   d4ed0:	f7ff fed2 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ed4:	2200      	movs	r2, #0
   d4ed6:	4629      	mov	r1, r5
   d4ed8:	4809      	ldr	r0, [pc, #36]	; (d4f00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4eda:	f7ff fdf5 	bl	d4ac8 <application_thread_invoke>
   d4ede:	4630      	mov	r0, r6
   d4ee0:	f7ff feca 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4ee4:	4630      	mov	r0, r6
   d4ee6:	f7ff f8d8 	bl	d409a <_ZdlPv>
   d4eea:	4638      	mov	r0, r7
   d4eec:	f7ff fe80 	bl	d4bf0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4ef0:	b006      	add	sp, #24
   d4ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ef6:	bf00      	nop
   d4ef8:	000d4d91 	.word	0x000d4d91
   d4efc:	000d4fed 	.word	0x000d4fed
   d4f00:	000d4c37 	.word	0x000d4c37

000d4f04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f08:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f0a:	ad07      	add	r5, sp, #28
   d4f0c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f10:	4606      	mov	r6, r0
   d4f12:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4f14:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f16:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f18:	460f      	mov	r7, r1
   d4f1a:	4690      	mov	r8, r2
   d4f1c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f20:	f8c5 b004 	str.w	fp, [r5, #4]
   d4f24:	f8c5 b008 	str.w	fp, [r5, #8]
   d4f28:	9307      	str	r3, [sp, #28]
   d4f2a:	f7ff f8b4 	bl	d4096 <_Znwj>
   d4f2e:	4604      	mov	r4, r0
   d4f30:	b138      	cbz	r0, d4f42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4f32:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f36:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f3a:	f8c0 b004 	str.w	fp, [r0, #4]
   d4f3e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4f42:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f44:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4f46:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4f48:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f4a:	f7ff f8a4 	bl	d4096 <_Znwj>
   d4f4e:	b128      	cbz	r0, d4f5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4f50:	2301      	movs	r3, #1
   d4f52:	6043      	str	r3, [r0, #4]
   d4f54:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4f56:	4b23      	ldr	r3, [pc, #140]	; (d4fe4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4f58:	6003      	str	r3, [r0, #0]
   d4f5a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f5c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4f5e:	4b22      	ldr	r3, [pc, #136]	; (d4fe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4f60:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4f62:	2008      	movs	r0, #8
   d4f64:	f7ff f897 	bl	d4096 <_Znwj>
   d4f68:	4604      	mov	r4, r0
   d4f6a:	b128      	cbz	r0, d4f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f6c:	9b03      	ldr	r3, [sp, #12]
   d4f6e:	f840 3b04 	str.w	r3, [r0], #4
   d4f72:	a904      	add	r1, sp, #16
   d4f74:	f7ff fecf 	bl	d4d16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f78:	9500      	str	r5, [sp, #0]
   d4f7a:	fa5f f38a 	uxtb.w	r3, sl
   d4f7e:	464a      	mov	r2, r9
   d4f80:	4641      	mov	r1, r8
   d4f82:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4f84:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f86:	f7ff fdcb 	bl	d4b20 <spark_send_event>
   d4f8a:	b9b8      	cbnz	r0, d4fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4f8c:	9b03      	ldr	r3, [sp, #12]
   d4f8e:	785b      	ldrb	r3, [r3, #1]
   d4f90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4f94:	b993      	cbnz	r3, d4fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f96:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4f9a:	a905      	add	r1, sp, #20
   d4f9c:	a803      	add	r0, sp, #12
   d4f9e:	9205      	str	r2, [sp, #20]
   d4fa0:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4fa4:	f7ff ff1a 	bl	d4ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4fa8:	9805      	ldr	r0, [sp, #20]
   d4faa:	f7ff fe21 	bl	d4bf0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4fae:	a805      	add	r0, sp, #20
   d4fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4fb2:	f7ff feb7 	bl	d4d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fb6:	a806      	add	r0, sp, #24
   d4fb8:	f7ff fe86 	bl	d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fbc:	9b03      	ldr	r3, [sp, #12]
   d4fbe:	9305      	str	r3, [sp, #20]
   d4fc0:	a904      	add	r1, sp, #16
   d4fc2:	a806      	add	r0, sp, #24
   d4fc4:	f7ff fea7 	bl	d4d16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4fc8:	a905      	add	r1, sp, #20
   d4fca:	4630      	mov	r0, r6
   d4fcc:	f7ff fe92 	bl	d4cf4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fd0:	a806      	add	r0, sp, #24
   d4fd2:	f7ff fe79 	bl	d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fd6:	a804      	add	r0, sp, #16
   d4fd8:	f7ff fe76 	bl	d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4fdc:	4630      	mov	r0, r6
   d4fde:	b00b      	add	sp, #44	; 0x2c
   d4fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fe4:	000d6798 	.word	0x000d6798
   d4fe8:	000d5155 	.word	0x000d5155

000d4fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ff0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ff2:	d006      	beq.n	d5002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4ff4:	2a03      	cmp	r2, #3
   d4ff6:	d017      	beq.n	d5028 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4ff8:	2a01      	cmp	r2, #1
   d4ffa:	d120      	bne.n	d503e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ffc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ffe:	6003      	str	r3, [r0, #0]
	      break;
   d5000:	e01d      	b.n	d503e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5002:	2018      	movs	r0, #24
   d5004:	680e      	ldr	r6, [r1, #0]
   d5006:	f7ff f846 	bl	d4096 <_Znwj>
   d500a:	4605      	mov	r5, r0
   d500c:	b150      	cbz	r0, d5024 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d500e:	4631      	mov	r1, r6
   d5010:	f7ff fed5 	bl	d4dbe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5014:	6930      	ldr	r0, [r6, #16]
   d5016:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d501a:	b108      	cbz	r0, d5020 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d501c:	f001 fb70 	bl	d6700 <strdup>
   d5020:	6128      	str	r0, [r5, #16]
   d5022:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5024:	6025      	str	r5, [r4, #0]
   d5026:	e00a      	b.n	d503e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5028:	6804      	ldr	r4, [r0, #0]
   d502a:	b144      	cbz	r4, d503e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d502c:	6920      	ldr	r0, [r4, #16]
   d502e:	f7ff fddf 	bl	d4bf0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5032:	4620      	mov	r0, r4
   d5034:	f7ff fe20 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5038:	4620      	mov	r0, r4
   d503a:	f7ff f82e 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d503e:	2000      	movs	r0, #0
   d5040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5042 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5042:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5044:	2300      	movs	r3, #0
   d5046:	6083      	str	r3, [r0, #8]
   d5048:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d504a:	4604      	mov	r4, r0
   d504c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d504e:	b12b      	cbz	r3, d505c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5050:	2202      	movs	r2, #2
   d5052:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5054:	68eb      	ldr	r3, [r5, #12]
   d5056:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5058:	68ab      	ldr	r3, [r5, #8]
   d505a:	60a3      	str	r3, [r4, #8]
	}
    }
   d505c:	4620      	mov	r0, r4
   d505e:	bd38      	pop	{r3, r4, r5, pc}

000d5060 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5060:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5062:	b570      	push	{r4, r5, r6, lr}
   d5064:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5066:	d006      	beq.n	d5076 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5068:	2a03      	cmp	r2, #3
   d506a:	d011      	beq.n	d5090 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d506c:	2a01      	cmp	r2, #1
   d506e:	d117      	bne.n	d50a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5070:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5072:	6003      	str	r3, [r0, #0]
	      break;
   d5074:	e014      	b.n	d50a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5076:	2014      	movs	r0, #20
   d5078:	680e      	ldr	r6, [r1, #0]
   d507a:	f7ff f80c 	bl	d4096 <_Znwj>
   d507e:	4605      	mov	r5, r0
   d5080:	b120      	cbz	r0, d508c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5082:	4631      	mov	r1, r6
   d5084:	f7ff ffdd 	bl	d5042 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5088:	7c33      	ldrb	r3, [r6, #16]
   d508a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d508c:	6025      	str	r5, [r4, #0]
   d508e:	e007      	b.n	d50a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5090:	6804      	ldr	r4, [r0, #0]
   d5092:	b12c      	cbz	r4, d50a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5094:	4620      	mov	r0, r4
   d5096:	f7ff fdef 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d509a:	4620      	mov	r0, r4
   d509c:	f7fe fffd 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50a0:	2000      	movs	r0, #0
   d50a2:	bd70      	pop	{r4, r5, r6, pc}

000d50a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d50a4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50a6:	2300      	movs	r3, #0
   d50a8:	b087      	sub	sp, #28
   d50aa:	460c      	mov	r4, r1
   d50ac:	f3bf 8f5f 	dmb	sy
   d50b0:	e850 6f00 	ldrex	r6, [r0]
   d50b4:	e840 3200 	strex	r2, r3, [r0]
   d50b8:	2a00      	cmp	r2, #0
   d50ba:	d1f9      	bne.n	d50b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d50bc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50c0:	2e00      	cmp	r6, #0
   d50c2:	d03e      	beq.n	d5142 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50c4:	4618      	mov	r0, r3
   d50c6:	f7ff fcf7 	bl	d4ab8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50ca:	4607      	mov	r7, r0
   d50cc:	b120      	cbz	r0, d50d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50ce:	4621      	mov	r1, r4
   d50d0:	4630      	mov	r0, r6
   d50d2:	f7ff fe64 	bl	d4d9e <_ZNKSt8functionIFvRKbEEclES1_>
   d50d6:	e02e      	b.n	d5136 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50d8:	4631      	mov	r1, r6
   d50da:	a801      	add	r0, sp, #4
   d50dc:	f7ff ffb1 	bl	d5042 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50e0:	7823      	ldrb	r3, [r4, #0]
   d50e2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50e6:	2010      	movs	r0, #16
   d50e8:	f7fe ffd5 	bl	d4096 <_Znwj>
   d50ec:	4605      	mov	r5, r0
   d50ee:	b1d0      	cbz	r0, d5126 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50f0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50f2:	2014      	movs	r0, #20
   d50f4:	f7fe ffcf 	bl	d4096 <_Znwj>
   d50f8:	4604      	mov	r4, r0
   d50fa:	b178      	cbz	r0, d511c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50fc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d50fe:	4601      	mov	r1, r0
   d5100:	a801      	add	r0, sp, #4
   d5102:	f7ff fe2c 	bl	d4d5e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5106:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5108:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d510a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d510c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d510e:	9203      	str	r2, [sp, #12]
   d5110:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5112:	60e3      	str	r3, [r4, #12]
   d5114:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5118:	9204      	str	r2, [sp, #16]
   d511a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d511c:	4b0a      	ldr	r3, [pc, #40]	; (d5148 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d511e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5120:	4b0a      	ldr	r3, [pc, #40]	; (d514c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5122:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5124:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5126:	a801      	add	r0, sp, #4
   d5128:	f7ff fda6 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d512c:	2200      	movs	r2, #0
   d512e:	4629      	mov	r1, r5
   d5130:	4807      	ldr	r0, [pc, #28]	; (d5150 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5132:	f7ff fcc9 	bl	d4ac8 <application_thread_invoke>
   d5136:	4630      	mov	r0, r6
   d5138:	f7ff fd9e 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d513c:	4630      	mov	r0, r6
   d513e:	f7fe ffac 	bl	d409a <_ZdlPv>
        }
    }
   d5142:	b007      	add	sp, #28
   d5144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5146:	bf00      	nop
   d5148:	000d4db1 	.word	0x000d4db1
   d514c:	000d5061 	.word	0x000d5061
   d5150:	000d4c37 	.word	0x000d4c37

000d5154 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5154:	b530      	push	{r4, r5, lr}
   d5156:	b085      	sub	sp, #20
   d5158:	4604      	mov	r4, r0
   d515a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d515c:	4668      	mov	r0, sp
   d515e:	4611      	mov	r1, r2
   d5160:	f7ff fde0 	bl	d4d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5164:	b17c      	cbz	r4, d5186 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5166:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5168:	4628      	mov	r0, r5
   d516a:	b10d      	cbz	r5, d5170 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d516c:	f001 fac8 	bl	d6700 <strdup>
   d5170:	9002      	str	r0, [sp, #8]
   d5172:	a902      	add	r1, sp, #8
   d5174:	4668      	mov	r0, sp
   d5176:	f8ad 400c 	strh.w	r4, [sp, #12]
   d517a:	f7ff fe2f 	bl	d4ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d517e:	9802      	ldr	r0, [sp, #8]
   d5180:	f7ff fd36 	bl	d4bf0 <free>
   d5184:	e01d      	b.n	d51c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5186:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5188:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d518c:	f04f 0201 	mov.w	r2, #1
   d5190:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5194:	42a3      	cmp	r3, r4
   d5196:	d103      	bne.n	d51a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5198:	e8c0 2f41 	strexb	r1, r2, [r0]
   d519c:	2900      	cmp	r1, #0
   d519e:	d1f7      	bne.n	d5190 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d51a0:	d002      	beq.n	d51a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d51a2:	f88d 3008 	strb.w	r3, [sp, #8]
   d51a6:	e00c      	b.n	d51c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d51a8:	f110 010c 	adds.w	r1, r0, #12
   d51ac:	f04f 0301 	mov.w	r3, #1
   d51b0:	bf18      	it	ne
   d51b2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51b4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d51b8:	3004      	adds	r0, #4
   d51ba:	f800 3c03 	strb.w	r3, [r0, #-3]
   d51be:	f7ff ff71 	bl	d50a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d51c2:	a801      	add	r0, sp, #4
   d51c4:	f7ff fd80 	bl	d4cc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d51c8:	b005      	add	sp, #20
   d51ca:	bd30      	pop	{r4, r5, pc}

000d51cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51cc:	2200      	movs	r2, #0
   d51ce:	4611      	mov	r1, r2
   d51d0:	6840      	ldr	r0, [r0, #4]
   d51d2:	f7ff bced 	b.w	d4bb0 <network_listening>

000d51d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d51d6:	2200      	movs	r2, #0
   d51d8:	4611      	mov	r1, r2
   d51da:	6840      	ldr	r0, [r0, #4]
   d51dc:	f7ff bcf8 	b.w	d4bd0 <network_get_listen_timeout>

000d51e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d51e0:	2200      	movs	r2, #0
   d51e2:	6840      	ldr	r0, [r0, #4]
   d51e4:	f7ff bcec 	b.w	d4bc0 <network_set_listen_timeout>

000d51e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51e8:	2200      	movs	r2, #0
   d51ea:	f081 0101 	eor.w	r1, r1, #1
   d51ee:	6840      	ldr	r0, [r0, #4]
   d51f0:	f7ff bcd6 	b.w	d4ba0 <network_listen>

000d51f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d51f4:	2300      	movs	r3, #0
   d51f6:	461a      	mov	r2, r3
   d51f8:	4619      	mov	r1, r3
   d51fa:	6840      	ldr	r0, [r0, #4]
   d51fc:	f7ff bcc8 	b.w	d4b90 <network_off>

000d5200 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5200:	2300      	movs	r3, #0
   d5202:	461a      	mov	r2, r3
   d5204:	4619      	mov	r1, r3
   d5206:	6840      	ldr	r0, [r0, #4]
   d5208:	f7ff bcba 	b.w	d4b80 <network_on>

000d520c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d520c:	2200      	movs	r2, #0
   d520e:	4611      	mov	r1, r2
   d5210:	6840      	ldr	r0, [r0, #4]
   d5212:	f7ff bcad 	b.w	d4b70 <network_ready>

000d5216 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5216:	2200      	movs	r2, #0
   d5218:	4611      	mov	r1, r2
   d521a:	6840      	ldr	r0, [r0, #4]
   d521c:	f7ff bc98 	b.w	d4b50 <network_connecting>

000d5220 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5220:	2200      	movs	r2, #0
   d5222:	2102      	movs	r1, #2
   d5224:	6840      	ldr	r0, [r0, #4]
   d5226:	f7ff bc9b 	b.w	d4b60 <network_disconnect>

000d522a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d522a:	2300      	movs	r3, #0
   d522c:	461a      	mov	r2, r3
   d522e:	6840      	ldr	r0, [r0, #4]
   d5230:	f7ff bc86 	b.w	d4b40 <network_connect>

000d5234 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5234:	4b02      	ldr	r3, [pc, #8]	; (d5240 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5236:	2203      	movs	r2, #3
   d5238:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d523a:	4a02      	ldr	r2, [pc, #8]	; (d5244 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d523c:	601a      	str	r2, [r3, #0]
   d523e:	4770      	bx	lr
   d5240:	2003e3d0 	.word	0x2003e3d0
   d5244:	000d67b4 	.word	0x000d67b4

000d5248 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5248:	4770      	bx	lr

000d524a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d524a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d524c:	4606      	mov	r6, r0
   d524e:	4615      	mov	r5, r2
   d5250:	460c      	mov	r4, r1
   d5252:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5254:	42bc      	cmp	r4, r7
   d5256:	d006      	beq.n	d5266 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5258:	6833      	ldr	r3, [r6, #0]
   d525a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d525e:	689b      	ldr	r3, [r3, #8]
   d5260:	4630      	mov	r0, r6
   d5262:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5264:	e7f6      	b.n	d5254 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5266:	4628      	mov	r0, r5
   d5268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d526a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d526a:	2200      	movs	r2, #0
   d526c:	7c00      	ldrb	r0, [r0, #16]
   d526e:	f7ff bb3b 	b.w	d48e8 <HAL_I2C_Write_Data>

000d5272 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5272:	2100      	movs	r1, #0
   d5274:	7c00      	ldrb	r0, [r0, #16]
   d5276:	f7ff bb3f 	b.w	d48f8 <HAL_I2C_Available_Data>

000d527a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d527a:	2100      	movs	r1, #0
   d527c:	7c00      	ldrb	r0, [r0, #16]
   d527e:	f7ff bb43 	b.w	d4908 <HAL_I2C_Read_Data>

000d5282 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5282:	2100      	movs	r1, #0
   d5284:	7c00      	ldrb	r0, [r0, #16]
   d5286:	f7ff bb47 	b.w	d4918 <HAL_I2C_Peek_Data>

000d528a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d528a:	2100      	movs	r1, #0
   d528c:	7c00      	ldrb	r0, [r0, #16]
   d528e:	f7ff bb4b 	b.w	d4928 <HAL_I2C_Flush_Data>

000d5292 <_ZN7TwoWireD0Ev>:
   d5292:	b510      	push	{r4, lr}
   d5294:	4604      	mov	r4, r0
   d5296:	f7fe ff00 	bl	d409a <_ZdlPv>
   d529a:	4620      	mov	r0, r4
   d529c:	bd10      	pop	{r4, pc}
	...

000d52a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d52a0:	b510      	push	{r4, lr}
   d52a2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d52a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52a8:	4608      	mov	r0, r1
   d52aa:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d52ac:	2100      	movs	r1, #0
   d52ae:	4b04      	ldr	r3, [pc, #16]	; (d52c0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d52b0:	7420      	strb	r0, [r4, #16]
   d52b2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d52b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d52b6:	f7ff fb47 	bl	d4948 <HAL_I2C_Init>

}
   d52ba:	4620      	mov	r0, r4
   d52bc:	bd10      	pop	{r4, pc}
   d52be:	bf00      	nop
   d52c0:	000d67e8 	.word	0x000d67e8

000d52c4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d52c4:	2100      	movs	r1, #0
   d52c6:	7c00      	ldrb	r0, [r0, #16]
   d52c8:	f7ff bb36 	b.w	d4938 <HAL_I2C_Is_Enabled>

000d52cc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d52cc:	f7ff bb04 	b.w	d48d8 <HAL_Interrupts_Disable_All>

000d52d0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d52d0:	f7ff bafa 	b.w	d48c8 <HAL_Interrupts_Enable_All>

000d52d4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d52d4:	4770      	bx	lr

000d52d6 <_ZN9IPAddressD0Ev>:
   d52d6:	b510      	push	{r4, lr}
   d52d8:	4604      	mov	r4, r0
   d52da:	f7fe fede 	bl	d409a <_ZdlPv>
   d52de:	4620      	mov	r0, r4
   d52e0:	bd10      	pop	{r4, pc}

000d52e2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d52e2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d52e4:	7d03      	ldrb	r3, [r0, #20]
   d52e6:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d52e8:	b08d      	sub	sp, #52	; 0x34
   d52ea:	460e      	mov	r6, r1
   d52ec:	f100 0704 	add.w	r7, r0, #4
   d52f0:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d52f4:	d002      	beq.n	d52fc <_ZNK9IPAddress7printToER5Print+0x1a>
   d52f6:	f100 0508 	add.w	r5, r0, #8
   d52fa:	e018      	b.n	d532e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d52fc:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d52fe:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5300:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5304:	232f      	movs	r3, #47	; 0x2f
   d5306:	462a      	mov	r2, r5
   d5308:	200a      	movs	r0, #10
   d530a:	f7ff fb25 	bl	d4958 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d530e:	4628      	mov	r0, r5
   d5310:	f001 fa11 	bl	d6736 <strlen>
   d5314:	6833      	ldr	r3, [r6, #0]
   d5316:	4602      	mov	r2, r0
   d5318:	68db      	ldr	r3, [r3, #12]
   d531a:	4629      	mov	r1, r5
   d531c:	4630      	mov	r0, r6
   d531e:	4798      	blx	r3
   d5320:	e00f      	b.n	d5342 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5322:	b124      	cbz	r4, d532e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5324:	212e      	movs	r1, #46	; 0x2e
   d5326:	4630      	mov	r0, r6
   d5328:	f000 f9c4 	bl	d56b4 <_ZN5Print5printEc>
   d532c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d532e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5332:	220a      	movs	r2, #10
   d5334:	4630      	mov	r0, r6
   d5336:	f000 f9ed 	bl	d5714 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d533a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d533c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d533e:	d1f0      	bne.n	d5322 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5340:	4620      	mov	r0, r4
    }
    return n;
}
   d5342:	b00d      	add	sp, #52	; 0x34
   d5344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5348 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5348:	b510      	push	{r4, lr}
   d534a:	4b05      	ldr	r3, [pc, #20]	; (d5360 <_ZN9IPAddressC1Ev+0x18>)
   d534c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d534e:	2211      	movs	r2, #17
   d5350:	f840 3b04 	str.w	r3, [r0], #4
   d5354:	2100      	movs	r1, #0
   d5356:	f001 f9a2 	bl	d669e <memset>
{
    clear();
}
   d535a:	4620      	mov	r0, r4
   d535c:	bd10      	pop	{r4, pc}
   d535e:	bf00      	nop
   d5360:	000d6810 	.word	0x000d6810

000d5364 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5364:	4603      	mov	r3, r0
   d5366:	4a07      	ldr	r2, [pc, #28]	; (d5384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5368:	b510      	push	{r4, lr}
   d536a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d536e:	f101 0210 	add.w	r2, r1, #16
   d5372:	f851 4b04 	ldr.w	r4, [r1], #4
   d5376:	f843 4b04 	str.w	r4, [r3], #4
   d537a:	4291      	cmp	r1, r2
   d537c:	d1f9      	bne.n	d5372 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d537e:	780a      	ldrb	r2, [r1, #0]
   d5380:	701a      	strb	r2, [r3, #0]
}
   d5382:	bd10      	pop	{r4, pc}
   d5384:	000d6810 	.word	0x000d6810

000d5388 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5388:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d538a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d538e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5392:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5396:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d539a:	2304      	movs	r3, #4
   d539c:	6041      	str	r1, [r0, #4]
   d539e:	7503      	strb	r3, [r0, #20]
   d53a0:	bd10      	pop	{r4, pc}

000d53a2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d53a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d53a4:	780d      	ldrb	r5, [r1, #0]
   d53a6:	788b      	ldrb	r3, [r1, #2]
   d53a8:	784a      	ldrb	r2, [r1, #1]
   d53aa:	78c9      	ldrb	r1, [r1, #3]
   d53ac:	9100      	str	r1, [sp, #0]
   d53ae:	4629      	mov	r1, r5
   d53b0:	f7ff ffea 	bl	d5388 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d53b4:	b003      	add	sp, #12
   d53b6:	bd30      	pop	{r4, r5, pc}

000d53b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d53b8:	4b01      	ldr	r3, [pc, #4]	; (d53c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d53ba:	4a02      	ldr	r2, [pc, #8]	; (d53c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d53bc:	601a      	str	r2, [r3, #0]
   d53be:	4770      	bx	lr
   d53c0:	2003e3d8 	.word	0x2003e3d8
   d53c4:	000d68d4 	.word	0x000d68d4

000d53c8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53c8:	2200      	movs	r2, #0
   d53ca:	4611      	mov	r1, r2
   d53cc:	6840      	ldr	r0, [r0, #4]
   d53ce:	f7ff bbef 	b.w	d4bb0 <network_listening>

000d53d2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53d2:	2200      	movs	r2, #0
   d53d4:	4611      	mov	r1, r2
   d53d6:	6840      	ldr	r0, [r0, #4]
   d53d8:	f7ff bbfa 	b.w	d4bd0 <network_get_listen_timeout>

000d53dc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53dc:	2200      	movs	r2, #0
   d53de:	6840      	ldr	r0, [r0, #4]
   d53e0:	f7ff bbee 	b.w	d4bc0 <network_set_listen_timeout>

000d53e4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d53e4:	2200      	movs	r2, #0
   d53e6:	f081 0101 	eor.w	r1, r1, #1
   d53ea:	6840      	ldr	r0, [r0, #4]
   d53ec:	f7ff bbd8 	b.w	d4ba0 <network_listen>

000d53f0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d53f0:	2300      	movs	r3, #0
   d53f2:	461a      	mov	r2, r3
   d53f4:	4619      	mov	r1, r3
   d53f6:	6840      	ldr	r0, [r0, #4]
   d53f8:	f7ff bbca 	b.w	d4b90 <network_off>

000d53fc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d53fc:	2300      	movs	r3, #0
   d53fe:	461a      	mov	r2, r3
   d5400:	4619      	mov	r1, r3
   d5402:	6840      	ldr	r0, [r0, #4]
   d5404:	f7ff bbbc 	b.w	d4b80 <network_on>

000d5408 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5408:	2200      	movs	r2, #0
   d540a:	4611      	mov	r1, r2
   d540c:	6840      	ldr	r0, [r0, #4]
   d540e:	f7ff bbaf 	b.w	d4b70 <network_ready>

000d5412 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5412:	2200      	movs	r2, #0
   d5414:	4611      	mov	r1, r2
   d5416:	6840      	ldr	r0, [r0, #4]
   d5418:	f7ff bb9a 	b.w	d4b50 <network_connecting>

000d541c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d541c:	2200      	movs	r2, #0
   d541e:	2102      	movs	r1, #2
   d5420:	6840      	ldr	r0, [r0, #4]
   d5422:	f7ff bb9d 	b.w	d4b60 <network_disconnect>

000d5426 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5426:	2300      	movs	r3, #0
   d5428:	461a      	mov	r2, r3
   d542a:	6840      	ldr	r0, [r0, #4]
   d542c:	f7ff bb88 	b.w	d4b40 <network_connect>

000d5430 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5430:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5432:	4605      	mov	r5, r0
   d5434:	b178      	cbz	r0, d5456 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5436:	6804      	ldr	r4, [r0, #0]
   d5438:	b144      	cbz	r4, d544c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d543a:	68a3      	ldr	r3, [r4, #8]
   d543c:	b11b      	cbz	r3, d5446 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d543e:	2203      	movs	r2, #3
   d5440:	4621      	mov	r1, r4
   d5442:	4620      	mov	r0, r4
   d5444:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5446:	4620      	mov	r0, r4
   d5448:	f7fe fe27 	bl	d409a <_ZdlPv>
   d544c:	4628      	mov	r0, r5
      }
   d544e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5452:	f7fe be22 	b.w	d409a <_ZdlPv>
   d5456:	bd38      	pop	{r3, r4, r5, pc}

000d5458 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5458:	b110      	cbz	r0, d5460 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d545a:	6803      	ldr	r3, [r0, #0]
   d545c:	685b      	ldr	r3, [r3, #4]
   d545e:	4718      	bx	r3
   d5460:	4770      	bx	lr

000d5462 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5462:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5464:	6803      	ldr	r3, [r0, #0]
   d5466:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5468:	b1bb      	cbz	r3, d549a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d546a:	6858      	ldr	r0, [r3, #4]
   d546c:	f7ff f9dc 	bl	d4828 <os_thread_is_current>
   d5470:	b978      	cbnz	r0, d5492 <_ZN6ThreadD1Ev+0x30>
   d5472:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5474:	7c5a      	ldrb	r2, [r3, #17]
   d5476:	b912      	cbnz	r2, d547e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5478:	6858      	ldr	r0, [r3, #4]
   d547a:	f7ff f9dd 	bl	d4838 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d547e:	6823      	ldr	r3, [r4, #0]
   d5480:	6858      	ldr	r0, [r3, #4]
   d5482:	f7ff f9e1 	bl	d4848 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5486:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5488:	2300      	movs	r3, #0
   d548a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d548c:	b128      	cbz	r0, d549a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d548e:	f7ff ffcf 	bl	d5430 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5492:	6820      	ldr	r0, [r4, #0]
   d5494:	b108      	cbz	r0, d549a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5496:	f7ff ffcb 	bl	d5430 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d549a:	4620      	mov	r0, r4
   d549c:	bd10      	pop	{r4, pc}
	...

000d54a0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d54a0:	b538      	push	{r3, r4, r5, lr}
   d54a2:	4b0b      	ldr	r3, [pc, #44]	; (d54d0 <_ZN5spark9MeshClassD1Ev+0x30>)
   d54a4:	6003      	str	r3, [r0, #0]
   d54a6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54a8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d54ac:	b108      	cbz	r0, d54b2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d54ae:	f7fe fdf6 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54b2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d54b6:	b12d      	cbz	r5, d54c4 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d54b8:	4628      	mov	r0, r5
   d54ba:	f7ff ffd2 	bl	d5462 <_ZN6ThreadD1Ev>
   d54be:	4628      	mov	r0, r5
   d54c0:	f7fe fdeb 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54c4:	68a0      	ldr	r0, [r4, #8]
   d54c6:	b108      	cbz	r0, d54cc <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d54c8:	f7ff ffc6 	bl	d5458 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d54cc:	4620      	mov	r0, r4
   d54ce:	bd38      	pop	{r3, r4, r5, pc}
   d54d0:	000d6908 	.word	0x000d6908

000d54d4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d54d4:	b538      	push	{r3, r4, r5, lr}
   d54d6:	4c0d      	ldr	r4, [pc, #52]	; (d550c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d54d8:	4b0d      	ldr	r3, [pc, #52]	; (d5510 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d54da:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d54dc:	2500      	movs	r5, #0
   d54de:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d54e0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d54e4:	6063      	str	r3, [r4, #4]
   d54e6:	60a5      	str	r5, [r4, #8]
   d54e8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54ec:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d54f0:	f7ff f9ba 	bl	d4868 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d54f4:	4b07      	ldr	r3, [pc, #28]	; (d5514 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d54f6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d54fa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d54fc:	4620      	mov	r0, r4
   d54fe:	4a06      	ldr	r2, [pc, #24]	; (d5518 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5500:	4906      	ldr	r1, [pc, #24]	; (d551c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5506:	f000 bb47 	b.w	d5b98 <__aeabi_atexit>
   d550a:	bf00      	nop
   d550c:	2003e3dc 	.word	0x2003e3dc
   d5510:	000d693c 	.word	0x000d693c
   d5514:	000d6908 	.word	0x000d6908
   d5518:	2003e384 	.word	0x2003e384
   d551c:	000d54a1 	.word	0x000d54a1

000d5520 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5520:	2300      	movs	r3, #0
   d5522:	461a      	mov	r2, r3
   d5524:	6840      	ldr	r0, [r0, #4]
   d5526:	f7ff bb0b 	b.w	d4b40 <network_connect>

000d552a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d552a:	2200      	movs	r2, #0
   d552c:	2102      	movs	r1, #2
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	f7ff bb16 	b.w	d4b60 <network_disconnect>

000d5534 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5534:	2200      	movs	r2, #0
   d5536:	4611      	mov	r1, r2
   d5538:	6840      	ldr	r0, [r0, #4]
   d553a:	f7ff bb09 	b.w	d4b50 <network_connecting>

000d553e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d553e:	2200      	movs	r2, #0
   d5540:	4611      	mov	r1, r2
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	f7ff bb14 	b.w	d4b70 <network_ready>

000d5548 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5548:	2300      	movs	r3, #0
   d554a:	461a      	mov	r2, r3
   d554c:	4619      	mov	r1, r3
   d554e:	6840      	ldr	r0, [r0, #4]
   d5550:	f7ff bb16 	b.w	d4b80 <network_on>

000d5554 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5554:	2300      	movs	r3, #0
   d5556:	461a      	mov	r2, r3
   d5558:	4619      	mov	r1, r3
   d555a:	6840      	ldr	r0, [r0, #4]
   d555c:	f7ff bb18 	b.w	d4b90 <network_off>

000d5560 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5560:	2200      	movs	r2, #0
   d5562:	f081 0101 	eor.w	r1, r1, #1
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	f7ff bb1a 	b.w	d4ba0 <network_listen>

000d556c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d556c:	2200      	movs	r2, #0
   d556e:	6840      	ldr	r0, [r0, #4]
   d5570:	f7ff bb26 	b.w	d4bc0 <network_set_listen_timeout>

000d5574 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5574:	2200      	movs	r2, #0
   d5576:	4611      	mov	r1, r2
   d5578:	6840      	ldr	r0, [r0, #4]
   d557a:	f7ff bb29 	b.w	d4bd0 <network_get_listen_timeout>

000d557e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d557e:	2200      	movs	r2, #0
   d5580:	4611      	mov	r1, r2
   d5582:	6840      	ldr	r0, [r0, #4]
   d5584:	f7ff bb14 	b.w	d4bb0 <network_listening>

000d5588 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d558c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d558e:	b095      	sub	sp, #84	; 0x54
   d5590:	4616      	mov	r6, r2
   d5592:	460d      	mov	r5, r1
   d5594:	4607      	mov	r7, r0
    IPAddress addr;
   d5596:	f7ff fed7 	bl	d5348 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d559a:	4621      	mov	r1, r4
   d559c:	2220      	movs	r2, #32
   d559e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55a0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d55a2:	f001 f87c 	bl	d669e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d55a6:	2340      	movs	r3, #64	; 0x40
   d55a8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d55aa:	4621      	mov	r1, r4
   d55ac:	466b      	mov	r3, sp
   d55ae:	aa0c      	add	r2, sp, #48	; 0x30
   d55b0:	4630      	mov	r0, r6
   d55b2:	f7ff f9e1 	bl	d4978 <netdb_getaddrinfo>
    if (!r) {
   d55b6:	4604      	mov	r4, r0
   d55b8:	2800      	cmp	r0, #0
   d55ba:	d144      	bne.n	d5646 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55bc:	4602      	mov	r2, r0
   d55be:	2101      	movs	r1, #1
   d55c0:	6868      	ldr	r0, [r5, #4]
   d55c2:	f7ff fad5 	bl	d4b70 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55c6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55c8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55ca:	4622      	mov	r2, r4
   d55cc:	6868      	ldr	r0, [r5, #4]
   d55ce:	f7ff facf 	bl	d4b70 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55d2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55d4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d55d6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55d8:	2e00      	cmp	r6, #0
   d55da:	d034      	beq.n	d5646 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d55dc:	2900      	cmp	r1, #0
   d55de:	d132      	bne.n	d5646 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d55e0:	6873      	ldr	r3, [r6, #4]
   d55e2:	2b02      	cmp	r3, #2
   d55e4:	d002      	beq.n	d55ec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d55e6:	2b0a      	cmp	r3, #10
   d55e8:	d009      	beq.n	d55fe <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d55ea:	e02a      	b.n	d5642 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d55ec:	f1b8 0f00 	cmp.w	r8, #0
   d55f0:	d027      	beq.n	d5642 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d55f2:	6971      	ldr	r1, [r6, #20]
   d55f4:	4638      	mov	r0, r7
   d55f6:	3104      	adds	r1, #4
   d55f8:	f7ff fed3 	bl	d53a2 <_ZN9IPAddressaSEPKh>
   d55fc:	e020      	b.n	d5640 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d55fe:	f1b9 0f00 	cmp.w	r9, #0
   d5602:	d01e      	beq.n	d5642 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5604:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5606:	2211      	movs	r2, #17
   d5608:	a801      	add	r0, sp, #4
   d560a:	f001 f848 	bl	d669e <memset>
                    a.v = 6;
   d560e:	2306      	movs	r3, #6
   d5610:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5614:	ad01      	add	r5, sp, #4
   d5616:	f104 0308 	add.w	r3, r4, #8
   d561a:	3418      	adds	r4, #24
   d561c:	6818      	ldr	r0, [r3, #0]
   d561e:	6859      	ldr	r1, [r3, #4]
   d5620:	462a      	mov	r2, r5
   d5622:	c203      	stmia	r2!, {r0, r1}
   d5624:	3308      	adds	r3, #8
   d5626:	42a3      	cmp	r3, r4
   d5628:	4615      	mov	r5, r2
   d562a:	d1f7      	bne.n	d561c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d562c:	a901      	add	r1, sp, #4
   d562e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5630:	ad07      	add	r5, sp, #28
   d5632:	f7ff fe97 	bl	d5364 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5638:	1d3c      	adds	r4, r7, #4
   d563a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d563c:	682b      	ldr	r3, [r5, #0]
   d563e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5640:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5642:	69f6      	ldr	r6, [r6, #28]
   d5644:	e7c8      	b.n	d55d8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5646:	9800      	ldr	r0, [sp, #0]
   d5648:	f7ff f98e 	bl	d4968 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d564c:	4638      	mov	r0, r7
   d564e:	b015      	add	sp, #84	; 0x54
   d5650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5654 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5654:	4b02      	ldr	r3, [pc, #8]	; (d5660 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5656:	4a03      	ldr	r2, [pc, #12]	; (d5664 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5658:	601a      	str	r2, [r3, #0]
   d565a:	2200      	movs	r2, #0
   d565c:	605a      	str	r2, [r3, #4]
   d565e:	4770      	bx	lr
   d5660:	2003e5ac 	.word	0x2003e5ac
   d5664:	000d693c 	.word	0x000d693c

000d5668 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d566a:	4606      	mov	r6, r0
   d566c:	460d      	mov	r5, r1
   d566e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5670:	2400      	movs	r4, #0
  while (size--) {
   d5672:	42bd      	cmp	r5, r7
   d5674:	d00c      	beq.n	d5690 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5676:	6833      	ldr	r3, [r6, #0]
   d5678:	f815 1b01 	ldrb.w	r1, [r5], #1
   d567c:	689b      	ldr	r3, [r3, #8]
   d567e:	4630      	mov	r0, r6
   d5680:	4798      	blx	r3
     if (chunk>=0)
   d5682:	2800      	cmp	r0, #0
   d5684:	db01      	blt.n	d568a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5686:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5688:	e7f3      	b.n	d5672 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d568a:	2c00      	cmp	r4, #0
   d568c:	bf08      	it	eq
   d568e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5690:	4620      	mov	r0, r4
   d5692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5694 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5694:	b570      	push	{r4, r5, r6, lr}
   d5696:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5698:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d569a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d569c:	b149      	cbz	r1, d56b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d569e:	f001 f84a 	bl	d6736 <strlen>
   d56a2:	682b      	ldr	r3, [r5, #0]
   d56a4:	4602      	mov	r2, r0
   d56a6:	4621      	mov	r1, r4
   d56a8:	4628      	mov	r0, r5
   d56aa:	68db      	ldr	r3, [r3, #12]
    }
   d56ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d56b0:	4718      	bx	r3
    }
   d56b2:	bd70      	pop	{r4, r5, r6, pc}

000d56b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d56b4:	6803      	ldr	r3, [r0, #0]
   d56b6:	689b      	ldr	r3, [r3, #8]
   d56b8:	4718      	bx	r3

000d56ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d56ba:	b530      	push	{r4, r5, lr}
   d56bc:	b08b      	sub	sp, #44	; 0x2c
   d56be:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d56c0:	2100      	movs	r1, #0
   d56c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d56c6:	2a01      	cmp	r2, #1
   d56c8:	bf98      	it	ls
   d56ca:	220a      	movls	r2, #10
   d56cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d56d0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d56d4:	fb05 3312 	mls	r3, r5, r2, r3
   d56d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d56dc:	2b09      	cmp	r3, #9
   d56de:	bf94      	ite	ls
   d56e0:	3330      	addls	r3, #48	; 0x30
   d56e2:	3337      	addhi	r3, #55	; 0x37
   d56e4:	b2db      	uxtb	r3, r3
   d56e6:	4621      	mov	r1, r4
   d56e8:	f804 3901 	strb.w	r3, [r4], #-1
   d56ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d56ee:	2d00      	cmp	r5, #0
   d56f0:	d1ee      	bne.n	d56d0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d56f2:	f7ff ffcf 	bl	d5694 <_ZN5Print5writeEPKc>
}
   d56f6:	b00b      	add	sp, #44	; 0x2c
   d56f8:	bd30      	pop	{r4, r5, pc}

000d56fa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d56fa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d56fc:	b92a      	cbnz	r2, d570a <_ZN5Print5printEmi+0x10>
   d56fe:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5700:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5704:	689b      	ldr	r3, [r3, #8]
   d5706:	b2c9      	uxtb	r1, r1
   d5708:	4718      	bx	r3
  else return printNumber(n, base);
   d570a:	b2d2      	uxtb	r2, r2
}
   d570c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5710:	f7ff bfd3 	b.w	d56ba <_ZN5Print11printNumberEmh>

000d5714 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5714:	f7ff bff1 	b.w	d56fa <_ZN5Print5printEmi>

000d5718 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5718:	b510      	push	{r4, lr}
   d571a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d571c:	f7ff faac 	bl	d4c78 <_ZNSt14_Function_baseD1Ev>
   d5720:	4620      	mov	r0, r4
   d5722:	bd10      	pop	{r4, pc}

000d5724 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5724:	4803      	ldr	r0, [pc, #12]	; (d5734 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5726:	4a04      	ldr	r2, [pc, #16]	; (d5738 <_GLOBAL__sub_I_RGB+0x14>)
   d5728:	4904      	ldr	r1, [pc, #16]	; (d573c <_GLOBAL__sub_I_RGB+0x18>)
   d572a:	2300      	movs	r3, #0
   d572c:	6083      	str	r3, [r0, #8]
   d572e:	f000 ba33 	b.w	d5b98 <__aeabi_atexit>
   d5732:	bf00      	nop
   d5734:	2003e5b4 	.word	0x2003e5b4
   d5738:	2003e384 	.word	0x2003e384
   d573c:	000d5719 	.word	0x000d5719

000d5740 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5740:	4770      	bx	lr

000d5742 <_ZN8SPIClassD0Ev>:
   d5742:	b510      	push	{r4, lr}
   d5744:	4604      	mov	r4, r0
   d5746:	f7fe fca8 	bl	d409a <_ZdlPv>
   d574a:	4620      	mov	r0, r4
   d574c:	bd10      	pop	{r4, pc}
	...

000d5750 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5750:	b570      	push	{r4, r5, r6, lr}
   d5752:	4b08      	ldr	r3, [pc, #32]	; (d5774 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5754:	6003      	str	r3, [r0, #0]
   d5756:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5758:	2500      	movs	r5, #0
   d575a:	460e      	mov	r6, r1
   d575c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5760:	f7ff f87a 	bl	d4858 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5764:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5766:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5768:	f7ff f90e 	bl	d4988 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d576c:	60a5      	str	r5, [r4, #8]
}
   d576e:	4620      	mov	r0, r4
   d5770:	bd70      	pop	{r4, r5, r6, pc}
   d5772:	bf00      	nop
   d5774:	000d6970 	.word	0x000d6970

000d5778 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5778:	7900      	ldrb	r0, [r0, #4]
   d577a:	f7ff b90d 	b.w	d4998 <HAL_SPI_Is_Enabled>
	...

000d5780 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5780:	4b04      	ldr	r3, [pc, #16]	; (d5794 <_GLOBAL__sub_I_System+0x14>)
   d5782:	2000      	movs	r0, #0
   d5784:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5788:	7018      	strb	r0, [r3, #0]
   d578a:	8058      	strh	r0, [r3, #2]
   d578c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d578e:	f7ff b983 	b.w	d4a98 <set_system_mode>
   d5792:	bf00      	nop
   d5794:	2003e5c4 	.word	0x2003e5c4

000d5798 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5798:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d579a:	681a      	ldr	r2, [r3, #0]
   d579c:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d579e:	601a      	str	r2, [r3, #0]
   d57a0:	4770      	bx	lr
   d57a2:	bf00      	nop
   d57a4:	2003e31c 	.word	0x2003e31c
   d57a8:	2003e5cc 	.word	0x2003e5cc

000d57ac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d57ac:	4770      	bx	lr

000d57ae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57ae:	7441      	strb	r1, [r0, #17]
   d57b0:	4770      	bx	lr

000d57b2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d57b2:	7c00      	ldrb	r0, [r0, #16]
   d57b4:	f7ff b930 	b.w	d4a18 <HAL_USART_Available_Data_For_Write>

000d57b8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d57b8:	7c00      	ldrb	r0, [r0, #16]
   d57ba:	f7ff b905 	b.w	d49c8 <HAL_USART_Available_Data>

000d57be <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d57be:	7c00      	ldrb	r0, [r0, #16]
   d57c0:	f7ff b912 	b.w	d49e8 <HAL_USART_Peek_Data>

000d57c4 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d57c4:	7c00      	ldrb	r0, [r0, #16]
   d57c6:	f7ff b907 	b.w	d49d8 <HAL_USART_Read_Data>

000d57ca <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d57ca:	7c00      	ldrb	r0, [r0, #16]
   d57cc:	f7ff b914 	b.w	d49f8 <HAL_USART_Flush_Data>

000d57d0 <_ZN11USARTSerialD0Ev>:
   d57d0:	b510      	push	{r4, lr}
   d57d2:	4604      	mov	r4, r0
   d57d4:	f7fe fc61 	bl	d409a <_ZdlPv>
   d57d8:	4620      	mov	r0, r4
   d57da:	bd10      	pop	{r4, pc}

000d57dc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d57dc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57de:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d57e0:	4604      	mov	r4, r0
   d57e2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57e4:	b925      	cbnz	r5, d57f0 <_ZN11USARTSerial5writeEh+0x14>
   d57e6:	7c00      	ldrb	r0, [r0, #16]
   d57e8:	f7ff f916 	bl	d4a18 <HAL_USART_Available_Data_For_Write>
   d57ec:	2800      	cmp	r0, #0
   d57ee:	dd05      	ble.n	d57fc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57f0:	4631      	mov	r1, r6
   d57f2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d57f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57f8:	f7ff b8de 	b.w	d49b8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d57fc:	4628      	mov	r0, r5
   d57fe:	bd70      	pop	{r4, r5, r6, pc}

000d5800 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5800:	b510      	push	{r4, lr}
   d5802:	4604      	mov	r4, r0
   d5804:	4608      	mov	r0, r1
   d5806:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5808:	2200      	movs	r2, #0
   d580a:	6062      	str	r2, [r4, #4]
   d580c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5810:	60a2      	str	r2, [r4, #8]
   d5812:	4a05      	ldr	r2, [pc, #20]	; (d5828 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5814:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5816:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5818:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d581a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d581c:	461a      	mov	r2, r3
   d581e:	f7ff f8c3 	bl	d49a8 <HAL_USART_Init>
}
   d5822:	4620      	mov	r0, r4
   d5824:	bd10      	pop	{r4, pc}
   d5826:	bf00      	nop
   d5828:	000d69ac 	.word	0x000d69ac

000d582c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d582c:	7c00      	ldrb	r0, [r0, #16]
   d582e:	f7ff b8eb 	b.w	d4a08 <HAL_USART_Is_Enabled>
	...

000d5834 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5834:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5836:	4d0c      	ldr	r5, [pc, #48]	; (d5868 <_Z22__fetch_global_Serial1v+0x34>)
   d5838:	6829      	ldr	r1, [r5, #0]
   d583a:	f011 0401 	ands.w	r4, r1, #1
   d583e:	d111      	bne.n	d5864 <_Z22__fetch_global_Serial1v+0x30>
   d5840:	4628      	mov	r0, r5
   d5842:	f7fe fc2e 	bl	d40a2 <__cxa_guard_acquire>
   d5846:	b168      	cbz	r0, d5864 <_Z22__fetch_global_Serial1v+0x30>
   d5848:	4a08      	ldr	r2, [pc, #32]	; (d586c <_Z22__fetch_global_Serial1v+0x38>)
   d584a:	4b09      	ldr	r3, [pc, #36]	; (d5870 <_Z22__fetch_global_Serial1v+0x3c>)
   d584c:	4809      	ldr	r0, [pc, #36]	; (d5874 <_Z22__fetch_global_Serial1v+0x40>)
   d584e:	4621      	mov	r1, r4
   d5850:	f7ff ffd6 	bl	d5800 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5854:	4628      	mov	r0, r5
   d5856:	f7fe fc29 	bl	d40ac <__cxa_guard_release>
   d585a:	4a07      	ldr	r2, [pc, #28]	; (d5878 <_Z22__fetch_global_Serial1v+0x44>)
   d585c:	4907      	ldr	r1, [pc, #28]	; (d587c <_Z22__fetch_global_Serial1v+0x48>)
   d585e:	4805      	ldr	r0, [pc, #20]	; (d5874 <_Z22__fetch_global_Serial1v+0x40>)
   d5860:	f000 f99a 	bl	d5b98 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5864:	4803      	ldr	r0, [pc, #12]	; (d5874 <_Z22__fetch_global_Serial1v+0x40>)
   d5866:	bd38      	pop	{r3, r4, r5, pc}
   d5868:	2003e668 	.word	0x2003e668
   d586c:	2003e66c 	.word	0x2003e66c
   d5870:	2003e5e4 	.word	0x2003e5e4
   d5874:	2003e5d0 	.word	0x2003e5d0
   d5878:	2003e384 	.word	0x2003e384
   d587c:	000d57ad 	.word	0x000d57ad

000d5880 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5880:	7441      	strb	r1, [r0, #17]
   d5882:	4770      	bx	lr

000d5884 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5884:	4770      	bx	lr

000d5886 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5886:	2100      	movs	r1, #0
   d5888:	7c00      	ldrb	r0, [r0, #16]
   d588a:	f7ff b8e5 	b.w	d4a58 <HAL_USB_USART_Receive_Data>

000d588e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d588e:	2101      	movs	r1, #1
   d5890:	7c00      	ldrb	r0, [r0, #16]
   d5892:	f7ff b8e1 	b.w	d4a58 <HAL_USB_USART_Receive_Data>

000d5896 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5896:	7c00      	ldrb	r0, [r0, #16]
   d5898:	f7ff b8d6 	b.w	d4a48 <HAL_USB_USART_Available_Data_For_Write>

000d589c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d589c:	7c00      	ldrb	r0, [r0, #16]
   d589e:	f7ff b8cb 	b.w	d4a38 <HAL_USB_USART_Available_Data>

000d58a2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d58a2:	b538      	push	{r3, r4, r5, lr}
   d58a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58a6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d58a8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d58aa:	f7ff f8cd 	bl	d4a48 <HAL_USB_USART_Available_Data_For_Write>
   d58ae:	2800      	cmp	r0, #0
   d58b0:	dc01      	bgt.n	d58b6 <_ZN9USBSerial5writeEh+0x14>
   d58b2:	7c60      	ldrb	r0, [r4, #17]
   d58b4:	b120      	cbz	r0, d58c0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d58b6:	4629      	mov	r1, r5
   d58b8:	7c20      	ldrb	r0, [r4, #16]
   d58ba:	f7ff f8d5 	bl	d4a68 <HAL_USB_USART_Send_Data>
    return 1;
   d58be:	2001      	movs	r0, #1
  }
  return 0;
}
   d58c0:	bd38      	pop	{r3, r4, r5, pc}

000d58c2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d58c2:	7c00      	ldrb	r0, [r0, #16]
   d58c4:	f7ff b8d8 	b.w	d4a78 <HAL_USB_USART_Flush_Data>

000d58c8 <_ZN9USBSerialD0Ev>:
   d58c8:	b510      	push	{r4, lr}
   d58ca:	4604      	mov	r4, r0
   d58cc:	f7fe fbe5 	bl	d409a <_ZdlPv>
   d58d0:	4620      	mov	r0, r4
   d58d2:	bd10      	pop	{r4, pc}

000d58d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58d4:	b510      	push	{r4, lr}
   d58d6:	4604      	mov	r4, r0
   d58d8:	2300      	movs	r3, #0
   d58da:	6063      	str	r3, [r4, #4]
   d58dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58e0:	60a3      	str	r3, [r4, #8]
   d58e2:	4b05      	ldr	r3, [pc, #20]	; (d58f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d58e4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d58e6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58e8:	4608      	mov	r0, r1
{
  _serial = serial;
   d58ea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d58ec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d58ee:	4611      	mov	r1, r2
   d58f0:	f7ff f89a 	bl	d4a28 <HAL_USB_USART_Init>
}
   d58f4:	4620      	mov	r0, r4
   d58f6:	bd10      	pop	{r4, pc}
   d58f8:	000d69dc 	.word	0x000d69dc

000d58fc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d58fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d58fe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5900:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5902:	2100      	movs	r1, #0
   d5904:	f000 fecb 	bl	d669e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5908:	4620      	mov	r0, r4
   d590a:	bd10      	pop	{r4, pc}

000d590c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d590c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d590e:	4d0e      	ldr	r5, [pc, #56]	; (d5948 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5910:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5912:	a801      	add	r0, sp, #4
   d5914:	f7ff fff2 	bl	d58fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5918:	6829      	ldr	r1, [r5, #0]
   d591a:	f011 0401 	ands.w	r4, r1, #1
   d591e:	d110      	bne.n	d5942 <_Z16_fetch_usbserialv+0x36>
   d5920:	4628      	mov	r0, r5
   d5922:	f7fe fbbe 	bl	d40a2 <__cxa_guard_acquire>
   d5926:	b160      	cbz	r0, d5942 <_Z16_fetch_usbserialv+0x36>
   d5928:	aa01      	add	r2, sp, #4
   d592a:	4621      	mov	r1, r4
   d592c:	4807      	ldr	r0, [pc, #28]	; (d594c <_Z16_fetch_usbserialv+0x40>)
   d592e:	f7ff ffd1 	bl	d58d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5932:	4628      	mov	r0, r5
   d5934:	f7fe fbba 	bl	d40ac <__cxa_guard_release>
   d5938:	4a05      	ldr	r2, [pc, #20]	; (d5950 <_Z16_fetch_usbserialv+0x44>)
   d593a:	4906      	ldr	r1, [pc, #24]	; (d5954 <_Z16_fetch_usbserialv+0x48>)
   d593c:	4803      	ldr	r0, [pc, #12]	; (d594c <_Z16_fetch_usbserialv+0x40>)
   d593e:	f000 f92b 	bl	d5b98 <__aeabi_atexit>
	return _usbserial;
}
   d5942:	4802      	ldr	r0, [pc, #8]	; (d594c <_Z16_fetch_usbserialv+0x40>)
   d5944:	b007      	add	sp, #28
   d5946:	bd30      	pop	{r4, r5, pc}
   d5948:	2003e6f0 	.word	0x2003e6f0
   d594c:	2003e6f4 	.word	0x2003e6f4
   d5950:	2003e384 	.word	0x2003e384
   d5954:	000d5885 	.word	0x000d5885

000d5958 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5958:	2200      	movs	r2, #0
   d595a:	4611      	mov	r1, r2
   d595c:	6840      	ldr	r0, [r0, #4]
   d595e:	f7ff b907 	b.w	d4b70 <network_ready>

000d5962 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5962:	2200      	movs	r2, #0
   d5964:	4611      	mov	r1, r2
   d5966:	6840      	ldr	r0, [r0, #4]
   d5968:	f7ff b922 	b.w	d4bb0 <network_listening>

000d596c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d596c:	2200      	movs	r2, #0
   d596e:	4611      	mov	r1, r2
   d5970:	6840      	ldr	r0, [r0, #4]
   d5972:	f7ff b92d 	b.w	d4bd0 <network_get_listen_timeout>

000d5976 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5976:	2200      	movs	r2, #0
   d5978:	6840      	ldr	r0, [r0, #4]
   d597a:	f7ff b921 	b.w	d4bc0 <network_set_listen_timeout>

000d597e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d597e:	2200      	movs	r2, #0
   d5980:	f081 0101 	eor.w	r1, r1, #1
   d5984:	6840      	ldr	r0, [r0, #4]
   d5986:	f7ff b90b 	b.w	d4ba0 <network_listen>

000d598a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d598a:	2300      	movs	r3, #0
   d598c:	461a      	mov	r2, r3
   d598e:	4619      	mov	r1, r3
   d5990:	6840      	ldr	r0, [r0, #4]
   d5992:	f7ff b8fd 	b.w	d4b90 <network_off>

000d5996 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5996:	2300      	movs	r3, #0
   d5998:	461a      	mov	r2, r3
   d599a:	4619      	mov	r1, r3
   d599c:	6840      	ldr	r0, [r0, #4]
   d599e:	f7ff b8ef 	b.w	d4b80 <network_on>

000d59a2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59a2:	2200      	movs	r2, #0
   d59a4:	4611      	mov	r1, r2
   d59a6:	6840      	ldr	r0, [r0, #4]
   d59a8:	f7ff b8d2 	b.w	d4b50 <network_connecting>

000d59ac <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59ac:	2200      	movs	r2, #0
   d59ae:	2102      	movs	r1, #2
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	f7ff b8d5 	b.w	d4b60 <network_disconnect>

000d59b6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59b6:	2300      	movs	r3, #0
   d59b8:	461a      	mov	r2, r3
   d59ba:	6840      	ldr	r0, [r0, #4]
   d59bc:	f7ff b8c0 	b.w	d4b40 <network_connect>

000d59c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d59c0:	4b02      	ldr	r3, [pc, #8]	; (d59cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d59c2:	2204      	movs	r2, #4
   d59c4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d59c6:	4a02      	ldr	r2, [pc, #8]	; (d59d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d59c8:	601a      	str	r2, [r3, #0]
   d59ca:	4770      	bx	lr
   d59cc:	2003e708 	.word	0x2003e708
   d59d0:	000d6a0c 	.word	0x000d6a0c

000d59d4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d59d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d59d6:	4b0c      	ldr	r3, [pc, #48]	; (d5a08 <serialEventRun+0x34>)
   d59d8:	b133      	cbz	r3, d59e8 <serialEventRun+0x14>
   d59da:	f7ff ff97 	bl	d590c <_Z16_fetch_usbserialv>
   d59de:	6803      	ldr	r3, [r0, #0]
   d59e0:	691b      	ldr	r3, [r3, #16]
   d59e2:	4798      	blx	r3
   d59e4:	2800      	cmp	r0, #0
   d59e6:	dc09      	bgt.n	d59fc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d59e8:	4b08      	ldr	r3, [pc, #32]	; (d5a0c <serialEventRun+0x38>)
   d59ea:	b163      	cbz	r3, d5a06 <serialEventRun+0x32>
   d59ec:	f7ff ff22 	bl	d5834 <_Z22__fetch_global_Serial1v>
   d59f0:	6803      	ldr	r3, [r0, #0]
   d59f2:	691b      	ldr	r3, [r3, #16]
   d59f4:	4798      	blx	r3
   d59f6:	2800      	cmp	r0, #0
   d59f8:	dc03      	bgt.n	d5a02 <serialEventRun+0x2e>
   d59fa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d59fc:	f3af 8000 	nop.w
   d5a00:	e7f2      	b.n	d59e8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5a02:	f3af 8000 	nop.w
   d5a06:	bd08      	pop	{r3, pc}
	...

000d5a10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5a10:	b508      	push	{r3, lr}
	serialEventRun();
   d5a12:	f7ff ffdf 	bl	d59d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5a16:	f7fe ff3f 	bl	d4898 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5a1a:	4b01      	ldr	r3, [pc, #4]	; (d5a20 <_post_loop+0x10>)
   d5a1c:	6018      	str	r0, [r3, #0]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	2003e714 	.word	0x2003e714

000d5a24 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5a24:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a26:	2300      	movs	r3, #0
   d5a28:	9300      	str	r3, [sp, #0]
   d5a2a:	461a      	mov	r2, r3
   d5a2c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a30:	f7ff f85c 	bl	d4aec <system_ctrl_set_result>
}
   d5a34:	b003      	add	sp, #12
   d5a36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a3c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5a3c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5a3e:	8843      	ldrh	r3, [r0, #2]
   d5a40:	2b0a      	cmp	r3, #10
   d5a42:	d008      	beq.n	d5a56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5a44:	2b50      	cmp	r3, #80	; 0x50
   d5a46:	d109      	bne.n	d5a5c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5a48:	4b09      	ldr	r3, [pc, #36]	; (d5a70 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5a4a:	681b      	ldr	r3, [r3, #0]
   d5a4c:	b13b      	cbz	r3, d5a5e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5a4e:	b003      	add	sp, #12
   d5a50:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5a54:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5a56:	f7ff ffe5 	bl	d5a24 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5a5a:	e006      	b.n	d5a6a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	9300      	str	r3, [sp, #0]
   d5a60:	461a      	mov	r2, r3
   d5a62:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a66:	f7ff f841 	bl	d4aec <system_ctrl_set_result>
        break;
    }
}
   d5a6a:	b003      	add	sp, #12
   d5a6c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a70:	2003e710 	.word	0x2003e710

000d5a74 <module_user_init_hook>:

void module_user_init_hook()
{
   d5a74:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5a76:	f7fe feff 	bl	d4878 <HAL_RNG_GetRandomNumber>
   d5a7a:	4604      	mov	r4, r0
    srand(seed);
   d5a7c:	f000 fe18 	bl	d66b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5a80:	4b07      	ldr	r3, [pc, #28]	; (d5aa0 <module_user_init_hook+0x2c>)
   d5a82:	b113      	cbz	r3, d5a8a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5a84:	4620      	mov	r0, r4
   d5a86:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5a8a:	2100      	movs	r1, #0
   d5a8c:	4804      	ldr	r0, [pc, #16]	; (d5aa0 <module_user_init_hook+0x2c>)
   d5a8e:	f7ff f84f 	bl	d4b30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a92:	2100      	movs	r1, #0
   d5a94:	4803      	ldr	r0, [pc, #12]	; (d5aa4 <module_user_init_hook+0x30>)
}
   d5a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a9a:	f7ff b81d 	b.w	d4ad8 <system_ctrl_set_app_request_handler>
   d5a9e:	bf00      	nop
   d5aa0:	00000000 	.word	0x00000000
   d5aa4:	000d5a3d 	.word	0x000d5a3d

000d5aa8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5aa8:	b510      	push	{r4, lr}
   d5aaa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5aac:	480f      	ldr	r0, [pc, #60]	; (d5aec <pinAvailable+0x44>)
   d5aae:	f7ff fe63 	bl	d5778 <_ZN8SPIClass9isEnabledEv>
   d5ab2:	b128      	cbz	r0, d5ac0 <pinAvailable+0x18>
   d5ab4:	f1a4 030b 	sub.w	r3, r4, #11
   d5ab8:	2b02      	cmp	r3, #2
   d5aba:	d801      	bhi.n	d5ac0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5abc:	2000      	movs	r0, #0
   d5abe:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5ac0:	f000 f828 	bl	d5b14 <_Z19__fetch_global_Wirev>
   d5ac4:	f7ff fbfe 	bl	d52c4 <_ZN7TwoWire9isEnabledEv>
   d5ac8:	b108      	cbz	r0, d5ace <pinAvailable+0x26>
   d5aca:	2c01      	cmp	r4, #1
   d5acc:	d9f6      	bls.n	d5abc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5ace:	f7ff feb1 	bl	d5834 <_Z22__fetch_global_Serial1v>
   d5ad2:	f7ff feab 	bl	d582c <_ZN11USARTSerial9isEnabledEv>
   d5ad6:	b118      	cbz	r0, d5ae0 <pinAvailable+0x38>
   d5ad8:	f1a4 0309 	sub.w	r3, r4, #9
   d5adc:	2b01      	cmp	r3, #1
   d5ade:	d9ed      	bls.n	d5abc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5ae0:	2c23      	cmp	r4, #35	; 0x23
   d5ae2:	bf8c      	ite	hi
   d5ae4:	2000      	movhi	r0, #0
   d5ae6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5ae8:	bd10      	pop	{r4, pc}
   d5aea:	bf00      	nop
   d5aec:	2003e730 	.word	0x2003e730

000d5af0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5af0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5af2:	b538      	push	{r3, r4, r5, lr}
   d5af4:	4604      	mov	r4, r0
   d5af6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5af8:	d80a      	bhi.n	d5b10 <pinMode+0x20>
   d5afa:	29ff      	cmp	r1, #255	; 0xff
   d5afc:	d008      	beq.n	d5b10 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5afe:	f7ff ffd3 	bl	d5aa8 <pinAvailable>
   d5b02:	b128      	cbz	r0, d5b10 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5b04:	4629      	mov	r1, r5
   d5b06:	4620      	mov	r0, r4
}
   d5b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5b0c:	f7fe bed4 	b.w	d48b8 <HAL_Pin_Mode>
   d5b10:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b14 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5b14:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5b16:	4d0b      	ldr	r5, [pc, #44]	; (d5b44 <_Z19__fetch_global_Wirev+0x30>)
   d5b18:	6829      	ldr	r1, [r5, #0]
   d5b1a:	f011 0401 	ands.w	r4, r1, #1
   d5b1e:	d10f      	bne.n	d5b40 <_Z19__fetch_global_Wirev+0x2c>
   d5b20:	4628      	mov	r0, r5
   d5b22:	f7fe fabe 	bl	d40a2 <__cxa_guard_acquire>
   d5b26:	b158      	cbz	r0, d5b40 <_Z19__fetch_global_Wirev+0x2c>
   d5b28:	4621      	mov	r1, r4
   d5b2a:	4807      	ldr	r0, [pc, #28]	; (d5b48 <_Z19__fetch_global_Wirev+0x34>)
   d5b2c:	f7ff fbb8 	bl	d52a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5b30:	4628      	mov	r0, r5
   d5b32:	f7fe fabb 	bl	d40ac <__cxa_guard_release>
   d5b36:	4a05      	ldr	r2, [pc, #20]	; (d5b4c <_Z19__fetch_global_Wirev+0x38>)
   d5b38:	4905      	ldr	r1, [pc, #20]	; (d5b50 <_Z19__fetch_global_Wirev+0x3c>)
   d5b3a:	4803      	ldr	r0, [pc, #12]	; (d5b48 <_Z19__fetch_global_Wirev+0x34>)
   d5b3c:	f000 f82c 	bl	d5b98 <__aeabi_atexit>
	return wire;
}
   d5b40:	4801      	ldr	r0, [pc, #4]	; (d5b48 <_Z19__fetch_global_Wirev+0x34>)
   d5b42:	bd38      	pop	{r3, r4, r5, pc}
   d5b44:	2003e718 	.word	0x2003e718
   d5b48:	2003e71c 	.word	0x2003e71c
   d5b4c:	2003e384 	.word	0x2003e384
   d5b50:	000d5249 	.word	0x000d5249

000d5b54 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5b54:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5b56:	4c0c      	ldr	r4, [pc, #48]	; (d5b88 <_GLOBAL__sub_I_SPI+0x34>)
   d5b58:	4e0c      	ldr	r6, [pc, #48]	; (d5b8c <_GLOBAL__sub_I_SPI+0x38>)
   d5b5a:	4d0d      	ldr	r5, [pc, #52]	; (d5b90 <_GLOBAL__sub_I_SPI+0x3c>)
   d5b5c:	2100      	movs	r1, #0
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f7ff fdf6 	bl	d5750 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5b64:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5b66:	4c0b      	ldr	r4, [pc, #44]	; (d5b94 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5b68:	4632      	mov	r2, r6
   d5b6a:	4629      	mov	r1, r5
   d5b6c:	f000 f814 	bl	d5b98 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5b70:	2101      	movs	r1, #1
   d5b72:	4620      	mov	r0, r4
   d5b74:	f7ff fdec 	bl	d5750 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5b78:	4632      	mov	r2, r6
   d5b7a:	4629      	mov	r1, r5
   d5b7c:	4620      	mov	r0, r4
   d5b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5b82:	f000 b809 	b.w	d5b98 <__aeabi_atexit>
   d5b86:	bf00      	nop
   d5b88:	2003e730 	.word	0x2003e730
   d5b8c:	2003e384 	.word	0x2003e384
   d5b90:	000d5741 	.word	0x000d5741
   d5b94:	2003e740 	.word	0x2003e740

000d5b98 <__aeabi_atexit>:
   d5b98:	460b      	mov	r3, r1
   d5b9a:	4601      	mov	r1, r0
   d5b9c:	4618      	mov	r0, r3
   d5b9e:	f000 bd65 	b.w	d666c <__cxa_atexit>

000d5ba2 <_ZSt25__throw_bad_function_callv>:
   d5ba2:	b508      	push	{r3, lr}
   d5ba4:	f7ff f834 	bl	d4c10 <abort>

000d5ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ba8:	4b24      	ldr	r3, [pc, #144]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d0      	lsls	r0, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b22      	ldr	r3, [pc, #136]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d1      	lsls	r1, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b20      	ldr	r3, [pc, #128]	; (d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d2      	lsls	r2, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b1e      	ldr	r3, [pc, #120]	; (d5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d0      	lsls	r0, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b1c      	ldr	r3, [pc, #112]	; (d5c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d1      	lsls	r1, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b1a      	ldr	r3, [pc, #104]	; (d5c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d2      	lsls	r2, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b18      	ldr	r3, [pc, #96]	; (d5c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d0      	lsls	r0, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b16      	ldr	r3, [pc, #88]	; (d5c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d1      	lsls	r1, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4b14      	ldr	r3, [pc, #80]	; (d5c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5c0a:	681a      	ldr	r2, [r3, #0]
   d5c0c:	07d2      	lsls	r2, r2, #31
   d5c0e:	bf5c      	itt	pl
   d5c10:	2201      	movpl	r2, #1
   d5c12:	601a      	strpl	r2, [r3, #0]
   d5c14:	4b12      	ldr	r3, [pc, #72]	; (d5c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5c16:	681a      	ldr	r2, [r3, #0]
   d5c18:	07d0      	lsls	r0, r2, #31
   d5c1a:	bf5c      	itt	pl
   d5c1c:	2201      	movpl	r2, #1
   d5c1e:	601a      	strpl	r2, [r3, #0]
   d5c20:	4b10      	ldr	r3, [pc, #64]	; (d5c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5c22:	681a      	ldr	r2, [r3, #0]
   d5c24:	07d1      	lsls	r1, r2, #31
   d5c26:	bf5c      	itt	pl
   d5c28:	2201      	movpl	r2, #1
   d5c2a:	601a      	strpl	r2, [r3, #0]
   d5c2c:	4b0e      	ldr	r3, [pc, #56]	; (d5c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5c2e:	681a      	ldr	r2, [r3, #0]
   d5c30:	07d2      	lsls	r2, r2, #31
   d5c32:	bf5c      	itt	pl
   d5c34:	2201      	movpl	r2, #1
   d5c36:	601a      	strpl	r2, [r3, #0]
   d5c38:	4770      	bx	lr
   d5c3a:	bf00      	nop
   d5c3c:	2003e77c 	.word	0x2003e77c
   d5c40:	2003e778 	.word	0x2003e778
   d5c44:	2003e774 	.word	0x2003e774
   d5c48:	2003e770 	.word	0x2003e770
   d5c4c:	2003e76c 	.word	0x2003e76c
   d5c50:	2003e768 	.word	0x2003e768
   d5c54:	2003e764 	.word	0x2003e764
   d5c58:	2003e760 	.word	0x2003e760
   d5c5c:	2003e75c 	.word	0x2003e75c
   d5c60:	2003e758 	.word	0x2003e758
   d5c64:	2003e754 	.word	0x2003e754
   d5c68:	2003e750 	.word	0x2003e750

000d5c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c6c:	4b18      	ldr	r3, [pc, #96]	; (d5cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d1      	lsls	r1, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4b16      	ldr	r3, [pc, #88]	; (d5cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d2      	lsls	r2, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b14      	ldr	r3, [pc, #80]	; (d5cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d0      	lsls	r0, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b12      	ldr	r3, [pc, #72]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d1      	lsls	r1, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4b10      	ldr	r3, [pc, #64]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d2      	lsls	r2, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4b0e      	ldr	r3, [pc, #56]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5caa:	681a      	ldr	r2, [r3, #0]
   d5cac:	07d0      	lsls	r0, r2, #31
   d5cae:	bf5c      	itt	pl
   d5cb0:	2201      	movpl	r2, #1
   d5cb2:	601a      	strpl	r2, [r3, #0]
   d5cb4:	4b0c      	ldr	r3, [pc, #48]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5cb6:	681a      	ldr	r2, [r3, #0]
   d5cb8:	07d1      	lsls	r1, r2, #31
   d5cba:	bf5c      	itt	pl
   d5cbc:	2201      	movpl	r2, #1
   d5cbe:	601a      	strpl	r2, [r3, #0]
   d5cc0:	4b0a      	ldr	r3, [pc, #40]	; (d5cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5cc2:	681a      	ldr	r2, [r3, #0]
   d5cc4:	07d2      	lsls	r2, r2, #31
   d5cc6:	bf5c      	itt	pl
   d5cc8:	2201      	movpl	r2, #1
   d5cca:	601a      	strpl	r2, [r3, #0]
   d5ccc:	4770      	bx	lr
   d5cce:	bf00      	nop
   d5cd0:	2003e79c 	.word	0x2003e79c
   d5cd4:	2003e798 	.word	0x2003e798
   d5cd8:	2003e794 	.word	0x2003e794
   d5cdc:	2003e790 	.word	0x2003e790
   d5ce0:	2003e78c 	.word	0x2003e78c
   d5ce4:	2003e788 	.word	0x2003e788
   d5ce8:	2003e784 	.word	0x2003e784
   d5cec:	2003e780 	.word	0x2003e780

000d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5cf0:	4b18      	ldr	r3, [pc, #96]	; (d5d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5cf2:	681a      	ldr	r2, [r3, #0]
   d5cf4:	07d1      	lsls	r1, r2, #31
   d5cf6:	bf5c      	itt	pl
   d5cf8:	2201      	movpl	r2, #1
   d5cfa:	601a      	strpl	r2, [r3, #0]
   d5cfc:	4b16      	ldr	r3, [pc, #88]	; (d5d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5cfe:	681a      	ldr	r2, [r3, #0]
   d5d00:	07d2      	lsls	r2, r2, #31
   d5d02:	bf5c      	itt	pl
   d5d04:	2201      	movpl	r2, #1
   d5d06:	601a      	strpl	r2, [r3, #0]
   d5d08:	4b14      	ldr	r3, [pc, #80]	; (d5d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d0a:	681a      	ldr	r2, [r3, #0]
   d5d0c:	07d0      	lsls	r0, r2, #31
   d5d0e:	bf5c      	itt	pl
   d5d10:	2201      	movpl	r2, #1
   d5d12:	601a      	strpl	r2, [r3, #0]
   d5d14:	4b12      	ldr	r3, [pc, #72]	; (d5d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d1      	lsls	r1, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4b10      	ldr	r3, [pc, #64]	; (d5d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d2      	lsls	r2, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4b0e      	ldr	r3, [pc, #56]	; (d5d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d2e:	681a      	ldr	r2, [r3, #0]
   d5d30:	07d0      	lsls	r0, r2, #31
   d5d32:	bf5c      	itt	pl
   d5d34:	2201      	movpl	r2, #1
   d5d36:	601a      	strpl	r2, [r3, #0]
   d5d38:	4b0c      	ldr	r3, [pc, #48]	; (d5d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d3a:	681a      	ldr	r2, [r3, #0]
   d5d3c:	07d1      	lsls	r1, r2, #31
   d5d3e:	bf5c      	itt	pl
   d5d40:	2201      	movpl	r2, #1
   d5d42:	601a      	strpl	r2, [r3, #0]
   d5d44:	4b0a      	ldr	r3, [pc, #40]	; (d5d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d2      	lsls	r2, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4770      	bx	lr
   d5d52:	bf00      	nop
   d5d54:	2003e7bc 	.word	0x2003e7bc
   d5d58:	2003e7b8 	.word	0x2003e7b8
   d5d5c:	2003e7b4 	.word	0x2003e7b4
   d5d60:	2003e7b0 	.word	0x2003e7b0
   d5d64:	2003e7ac 	.word	0x2003e7ac
   d5d68:	2003e7a8 	.word	0x2003e7a8
   d5d6c:	2003e7a4 	.word	0x2003e7a4
   d5d70:	2003e7a0 	.word	0x2003e7a0

000d5d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5d74:	4b24      	ldr	r3, [pc, #144]	; (d5e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d0      	lsls	r0, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4b22      	ldr	r3, [pc, #136]	; (d5e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5d82:	681a      	ldr	r2, [r3, #0]
   d5d84:	07d1      	lsls	r1, r2, #31
   d5d86:	bf5c      	itt	pl
   d5d88:	2201      	movpl	r2, #1
   d5d8a:	601a      	strpl	r2, [r3, #0]
   d5d8c:	4b20      	ldr	r3, [pc, #128]	; (d5e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5d8e:	681a      	ldr	r2, [r3, #0]
   d5d90:	07d2      	lsls	r2, r2, #31
   d5d92:	bf5c      	itt	pl
   d5d94:	2201      	movpl	r2, #1
   d5d96:	601a      	strpl	r2, [r3, #0]
   d5d98:	4b1e      	ldr	r3, [pc, #120]	; (d5e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5d9a:	681a      	ldr	r2, [r3, #0]
   d5d9c:	07d0      	lsls	r0, r2, #31
   d5d9e:	bf5c      	itt	pl
   d5da0:	2201      	movpl	r2, #1
   d5da2:	601a      	strpl	r2, [r3, #0]
   d5da4:	4b1c      	ldr	r3, [pc, #112]	; (d5e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5da6:	681a      	ldr	r2, [r3, #0]
   d5da8:	07d1      	lsls	r1, r2, #31
   d5daa:	bf5c      	itt	pl
   d5dac:	2201      	movpl	r2, #1
   d5dae:	601a      	strpl	r2, [r3, #0]
   d5db0:	4b1a      	ldr	r3, [pc, #104]	; (d5e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5db2:	681a      	ldr	r2, [r3, #0]
   d5db4:	07d2      	lsls	r2, r2, #31
   d5db6:	bf5c      	itt	pl
   d5db8:	2201      	movpl	r2, #1
   d5dba:	601a      	strpl	r2, [r3, #0]
   d5dbc:	4b18      	ldr	r3, [pc, #96]	; (d5e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5dbe:	681a      	ldr	r2, [r3, #0]
   d5dc0:	07d0      	lsls	r0, r2, #31
   d5dc2:	bf5c      	itt	pl
   d5dc4:	2201      	movpl	r2, #1
   d5dc6:	601a      	strpl	r2, [r3, #0]
   d5dc8:	4b16      	ldr	r3, [pc, #88]	; (d5e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5dca:	681a      	ldr	r2, [r3, #0]
   d5dcc:	07d1      	lsls	r1, r2, #31
   d5dce:	bf5c      	itt	pl
   d5dd0:	2201      	movpl	r2, #1
   d5dd2:	601a      	strpl	r2, [r3, #0]
   d5dd4:	4b14      	ldr	r3, [pc, #80]	; (d5e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5dd6:	681a      	ldr	r2, [r3, #0]
   d5dd8:	07d2      	lsls	r2, r2, #31
   d5dda:	bf5c      	itt	pl
   d5ddc:	2201      	movpl	r2, #1
   d5dde:	601a      	strpl	r2, [r3, #0]
   d5de0:	4b12      	ldr	r3, [pc, #72]	; (d5e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5de2:	681a      	ldr	r2, [r3, #0]
   d5de4:	07d0      	lsls	r0, r2, #31
   d5de6:	bf5c      	itt	pl
   d5de8:	2201      	movpl	r2, #1
   d5dea:	601a      	strpl	r2, [r3, #0]
   d5dec:	4b10      	ldr	r3, [pc, #64]	; (d5e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5dee:	681a      	ldr	r2, [r3, #0]
   d5df0:	07d1      	lsls	r1, r2, #31
   d5df2:	bf5c      	itt	pl
   d5df4:	2201      	movpl	r2, #1
   d5df6:	601a      	strpl	r2, [r3, #0]
   d5df8:	4b0e      	ldr	r3, [pc, #56]	; (d5e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5dfa:	681a      	ldr	r2, [r3, #0]
   d5dfc:	07d2      	lsls	r2, r2, #31
   d5dfe:	bf5c      	itt	pl
   d5e00:	2201      	movpl	r2, #1
   d5e02:	601a      	strpl	r2, [r3, #0]
   d5e04:	4770      	bx	lr
   d5e06:	bf00      	nop
   d5e08:	2003e7ec 	.word	0x2003e7ec
   d5e0c:	2003e7e8 	.word	0x2003e7e8
   d5e10:	2003e7e4 	.word	0x2003e7e4
   d5e14:	2003e7e0 	.word	0x2003e7e0
   d5e18:	2003e7dc 	.word	0x2003e7dc
   d5e1c:	2003e7d8 	.word	0x2003e7d8
   d5e20:	2003e7d4 	.word	0x2003e7d4
   d5e24:	2003e7d0 	.word	0x2003e7d0
   d5e28:	2003e7cc 	.word	0x2003e7cc
   d5e2c:	2003e7c8 	.word	0x2003e7c8
   d5e30:	2003e7c4 	.word	0x2003e7c4
   d5e34:	2003e7c0 	.word	0x2003e7c0

000d5e38 <__aeabi_drsub>:
   d5e38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5e3c:	e002      	b.n	d5e44 <__adddf3>
   d5e3e:	bf00      	nop

000d5e40 <__aeabi_dsub>:
   d5e40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5e44 <__adddf3>:
   d5e44:	b530      	push	{r4, r5, lr}
   d5e46:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5e4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5e4e:	ea94 0f05 	teq	r4, r5
   d5e52:	bf08      	it	eq
   d5e54:	ea90 0f02 	teqeq	r0, r2
   d5e58:	bf1f      	itttt	ne
   d5e5a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5e5e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5e62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5e66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e6a:	f000 80e2 	beq.w	d6032 <__adddf3+0x1ee>
   d5e6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5e72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5e76:	bfb8      	it	lt
   d5e78:	426d      	neglt	r5, r5
   d5e7a:	dd0c      	ble.n	d5e96 <__adddf3+0x52>
   d5e7c:	442c      	add	r4, r5
   d5e7e:	ea80 0202 	eor.w	r2, r0, r2
   d5e82:	ea81 0303 	eor.w	r3, r1, r3
   d5e86:	ea82 0000 	eor.w	r0, r2, r0
   d5e8a:	ea83 0101 	eor.w	r1, r3, r1
   d5e8e:	ea80 0202 	eor.w	r2, r0, r2
   d5e92:	ea81 0303 	eor.w	r3, r1, r3
   d5e96:	2d36      	cmp	r5, #54	; 0x36
   d5e98:	bf88      	it	hi
   d5e9a:	bd30      	pophi	{r4, r5, pc}
   d5e9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5ea0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ea4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5ea8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5eac:	d002      	beq.n	d5eb4 <__adddf3+0x70>
   d5eae:	4240      	negs	r0, r0
   d5eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5eb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5eb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5ebc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5ec0:	d002      	beq.n	d5ec8 <__adddf3+0x84>
   d5ec2:	4252      	negs	r2, r2
   d5ec4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5ec8:	ea94 0f05 	teq	r4, r5
   d5ecc:	f000 80a7 	beq.w	d601e <__adddf3+0x1da>
   d5ed0:	f1a4 0401 	sub.w	r4, r4, #1
   d5ed4:	f1d5 0e20 	rsbs	lr, r5, #32
   d5ed8:	db0d      	blt.n	d5ef6 <__adddf3+0xb2>
   d5eda:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5ede:	fa22 f205 	lsr.w	r2, r2, r5
   d5ee2:	1880      	adds	r0, r0, r2
   d5ee4:	f141 0100 	adc.w	r1, r1, #0
   d5ee8:	fa03 f20e 	lsl.w	r2, r3, lr
   d5eec:	1880      	adds	r0, r0, r2
   d5eee:	fa43 f305 	asr.w	r3, r3, r5
   d5ef2:	4159      	adcs	r1, r3
   d5ef4:	e00e      	b.n	d5f14 <__adddf3+0xd0>
   d5ef6:	f1a5 0520 	sub.w	r5, r5, #32
   d5efa:	f10e 0e20 	add.w	lr, lr, #32
   d5efe:	2a01      	cmp	r2, #1
   d5f00:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5f04:	bf28      	it	cs
   d5f06:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5f0a:	fa43 f305 	asr.w	r3, r3, r5
   d5f0e:	18c0      	adds	r0, r0, r3
   d5f10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f18:	d507      	bpl.n	d5f2a <__adddf3+0xe6>
   d5f1a:	f04f 0e00 	mov.w	lr, #0
   d5f1e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5f22:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5f26:	eb6e 0101 	sbc.w	r1, lr, r1
   d5f2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5f2e:	d31b      	bcc.n	d5f68 <__adddf3+0x124>
   d5f30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5f34:	d30c      	bcc.n	d5f50 <__adddf3+0x10c>
   d5f36:	0849      	lsrs	r1, r1, #1
   d5f38:	ea5f 0030 	movs.w	r0, r0, rrx
   d5f3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5f40:	f104 0401 	add.w	r4, r4, #1
   d5f44:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5f48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5f4c:	f080 809a 	bcs.w	d6084 <__adddf3+0x240>
   d5f50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5f54:	bf08      	it	eq
   d5f56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f5a:	f150 0000 	adcs.w	r0, r0, #0
   d5f5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f62:	ea41 0105 	orr.w	r1, r1, r5
   d5f66:	bd30      	pop	{r4, r5, pc}
   d5f68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5f6c:	4140      	adcs	r0, r0
   d5f6e:	eb41 0101 	adc.w	r1, r1, r1
   d5f72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5f76:	f1a4 0401 	sub.w	r4, r4, #1
   d5f7a:	d1e9      	bne.n	d5f50 <__adddf3+0x10c>
   d5f7c:	f091 0f00 	teq	r1, #0
   d5f80:	bf04      	itt	eq
   d5f82:	4601      	moveq	r1, r0
   d5f84:	2000      	moveq	r0, #0
   d5f86:	fab1 f381 	clz	r3, r1
   d5f8a:	bf08      	it	eq
   d5f8c:	3320      	addeq	r3, #32
   d5f8e:	f1a3 030b 	sub.w	r3, r3, #11
   d5f92:	f1b3 0220 	subs.w	r2, r3, #32
   d5f96:	da0c      	bge.n	d5fb2 <__adddf3+0x16e>
   d5f98:	320c      	adds	r2, #12
   d5f9a:	dd08      	ble.n	d5fae <__adddf3+0x16a>
   d5f9c:	f102 0c14 	add.w	ip, r2, #20
   d5fa0:	f1c2 020c 	rsb	r2, r2, #12
   d5fa4:	fa01 f00c 	lsl.w	r0, r1, ip
   d5fa8:	fa21 f102 	lsr.w	r1, r1, r2
   d5fac:	e00c      	b.n	d5fc8 <__adddf3+0x184>
   d5fae:	f102 0214 	add.w	r2, r2, #20
   d5fb2:	bfd8      	it	le
   d5fb4:	f1c2 0c20 	rsble	ip, r2, #32
   d5fb8:	fa01 f102 	lsl.w	r1, r1, r2
   d5fbc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5fc0:	bfdc      	itt	le
   d5fc2:	ea41 010c 	orrle.w	r1, r1, ip
   d5fc6:	4090      	lslle	r0, r2
   d5fc8:	1ae4      	subs	r4, r4, r3
   d5fca:	bfa2      	ittt	ge
   d5fcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5fd0:	4329      	orrge	r1, r5
   d5fd2:	bd30      	popge	{r4, r5, pc}
   d5fd4:	ea6f 0404 	mvn.w	r4, r4
   d5fd8:	3c1f      	subs	r4, #31
   d5fda:	da1c      	bge.n	d6016 <__adddf3+0x1d2>
   d5fdc:	340c      	adds	r4, #12
   d5fde:	dc0e      	bgt.n	d5ffe <__adddf3+0x1ba>
   d5fe0:	f104 0414 	add.w	r4, r4, #20
   d5fe4:	f1c4 0220 	rsb	r2, r4, #32
   d5fe8:	fa20 f004 	lsr.w	r0, r0, r4
   d5fec:	fa01 f302 	lsl.w	r3, r1, r2
   d5ff0:	ea40 0003 	orr.w	r0, r0, r3
   d5ff4:	fa21 f304 	lsr.w	r3, r1, r4
   d5ff8:	ea45 0103 	orr.w	r1, r5, r3
   d5ffc:	bd30      	pop	{r4, r5, pc}
   d5ffe:	f1c4 040c 	rsb	r4, r4, #12
   d6002:	f1c4 0220 	rsb	r2, r4, #32
   d6006:	fa20 f002 	lsr.w	r0, r0, r2
   d600a:	fa01 f304 	lsl.w	r3, r1, r4
   d600e:	ea40 0003 	orr.w	r0, r0, r3
   d6012:	4629      	mov	r1, r5
   d6014:	bd30      	pop	{r4, r5, pc}
   d6016:	fa21 f004 	lsr.w	r0, r1, r4
   d601a:	4629      	mov	r1, r5
   d601c:	bd30      	pop	{r4, r5, pc}
   d601e:	f094 0f00 	teq	r4, #0
   d6022:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6026:	bf06      	itte	eq
   d6028:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d602c:	3401      	addeq	r4, #1
   d602e:	3d01      	subne	r5, #1
   d6030:	e74e      	b.n	d5ed0 <__adddf3+0x8c>
   d6032:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6036:	bf18      	it	ne
   d6038:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d603c:	d029      	beq.n	d6092 <__adddf3+0x24e>
   d603e:	ea94 0f05 	teq	r4, r5
   d6042:	bf08      	it	eq
   d6044:	ea90 0f02 	teqeq	r0, r2
   d6048:	d005      	beq.n	d6056 <__adddf3+0x212>
   d604a:	ea54 0c00 	orrs.w	ip, r4, r0
   d604e:	bf04      	itt	eq
   d6050:	4619      	moveq	r1, r3
   d6052:	4610      	moveq	r0, r2
   d6054:	bd30      	pop	{r4, r5, pc}
   d6056:	ea91 0f03 	teq	r1, r3
   d605a:	bf1e      	ittt	ne
   d605c:	2100      	movne	r1, #0
   d605e:	2000      	movne	r0, #0
   d6060:	bd30      	popne	{r4, r5, pc}
   d6062:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6066:	d105      	bne.n	d6074 <__adddf3+0x230>
   d6068:	0040      	lsls	r0, r0, #1
   d606a:	4149      	adcs	r1, r1
   d606c:	bf28      	it	cs
   d606e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6072:	bd30      	pop	{r4, r5, pc}
   d6074:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6078:	bf3c      	itt	cc
   d607a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d607e:	bd30      	popcc	{r4, r5, pc}
   d6080:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6084:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6088:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d608c:	f04f 0000 	mov.w	r0, #0
   d6090:	bd30      	pop	{r4, r5, pc}
   d6092:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6096:	bf1a      	itte	ne
   d6098:	4619      	movne	r1, r3
   d609a:	4610      	movne	r0, r2
   d609c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d60a0:	bf1c      	itt	ne
   d60a2:	460b      	movne	r3, r1
   d60a4:	4602      	movne	r2, r0
   d60a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d60aa:	bf06      	itte	eq
   d60ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d60b0:	ea91 0f03 	teqeq	r1, r3
   d60b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d60b8:	bd30      	pop	{r4, r5, pc}
   d60ba:	bf00      	nop

000d60bc <__aeabi_ui2d>:
   d60bc:	f090 0f00 	teq	r0, #0
   d60c0:	bf04      	itt	eq
   d60c2:	2100      	moveq	r1, #0
   d60c4:	4770      	bxeq	lr
   d60c6:	b530      	push	{r4, r5, lr}
   d60c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60d0:	f04f 0500 	mov.w	r5, #0
   d60d4:	f04f 0100 	mov.w	r1, #0
   d60d8:	e750      	b.n	d5f7c <__adddf3+0x138>
   d60da:	bf00      	nop

000d60dc <__aeabi_i2d>:
   d60dc:	f090 0f00 	teq	r0, #0
   d60e0:	bf04      	itt	eq
   d60e2:	2100      	moveq	r1, #0
   d60e4:	4770      	bxeq	lr
   d60e6:	b530      	push	{r4, r5, lr}
   d60e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d60ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d60f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d60f4:	bf48      	it	mi
   d60f6:	4240      	negmi	r0, r0
   d60f8:	f04f 0100 	mov.w	r1, #0
   d60fc:	e73e      	b.n	d5f7c <__adddf3+0x138>
   d60fe:	bf00      	nop

000d6100 <__aeabi_f2d>:
   d6100:	0042      	lsls	r2, r0, #1
   d6102:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6106:	ea4f 0131 	mov.w	r1, r1, rrx
   d610a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d610e:	bf1f      	itttt	ne
   d6110:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6114:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6118:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d611c:	4770      	bxne	lr
   d611e:	f092 0f00 	teq	r2, #0
   d6122:	bf14      	ite	ne
   d6124:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6128:	4770      	bxeq	lr
   d612a:	b530      	push	{r4, r5, lr}
   d612c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6130:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6134:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6138:	e720      	b.n	d5f7c <__adddf3+0x138>
   d613a:	bf00      	nop

000d613c <__aeabi_ul2d>:
   d613c:	ea50 0201 	orrs.w	r2, r0, r1
   d6140:	bf08      	it	eq
   d6142:	4770      	bxeq	lr
   d6144:	b530      	push	{r4, r5, lr}
   d6146:	f04f 0500 	mov.w	r5, #0
   d614a:	e00a      	b.n	d6162 <__aeabi_l2d+0x16>

000d614c <__aeabi_l2d>:
   d614c:	ea50 0201 	orrs.w	r2, r0, r1
   d6150:	bf08      	it	eq
   d6152:	4770      	bxeq	lr
   d6154:	b530      	push	{r4, r5, lr}
   d6156:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d615a:	d502      	bpl.n	d6162 <__aeabi_l2d+0x16>
   d615c:	4240      	negs	r0, r0
   d615e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6162:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6166:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d616a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d616e:	f43f aedc 	beq.w	d5f2a <__adddf3+0xe6>
   d6172:	f04f 0203 	mov.w	r2, #3
   d6176:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d617a:	bf18      	it	ne
   d617c:	3203      	addne	r2, #3
   d617e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6182:	bf18      	it	ne
   d6184:	3203      	addne	r2, #3
   d6186:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d618a:	f1c2 0320 	rsb	r3, r2, #32
   d618e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6192:	fa20 f002 	lsr.w	r0, r0, r2
   d6196:	fa01 fe03 	lsl.w	lr, r1, r3
   d619a:	ea40 000e 	orr.w	r0, r0, lr
   d619e:	fa21 f102 	lsr.w	r1, r1, r2
   d61a2:	4414      	add	r4, r2
   d61a4:	e6c1      	b.n	d5f2a <__adddf3+0xe6>
   d61a6:	bf00      	nop

000d61a8 <__aeabi_dmul>:
   d61a8:	b570      	push	{r4, r5, r6, lr}
   d61aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d61ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d61b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d61b6:	bf1d      	ittte	ne
   d61b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d61bc:	ea94 0f0c 	teqne	r4, ip
   d61c0:	ea95 0f0c 	teqne	r5, ip
   d61c4:	f000 f8de 	bleq	d6384 <__aeabi_dmul+0x1dc>
   d61c8:	442c      	add	r4, r5
   d61ca:	ea81 0603 	eor.w	r6, r1, r3
   d61ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d61d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d61d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d61da:	bf18      	it	ne
   d61dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d61e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d61e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d61e8:	d038      	beq.n	d625c <__aeabi_dmul+0xb4>
   d61ea:	fba0 ce02 	umull	ip, lr, r0, r2
   d61ee:	f04f 0500 	mov.w	r5, #0
   d61f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d61f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d61fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d61fe:	f04f 0600 	mov.w	r6, #0
   d6202:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6206:	f09c 0f00 	teq	ip, #0
   d620a:	bf18      	it	ne
   d620c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6210:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6214:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6218:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d621c:	d204      	bcs.n	d6228 <__aeabi_dmul+0x80>
   d621e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6222:	416d      	adcs	r5, r5
   d6224:	eb46 0606 	adc.w	r6, r6, r6
   d6228:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d622c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6230:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6234:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6238:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d623c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6240:	bf88      	it	hi
   d6242:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6246:	d81e      	bhi.n	d6286 <__aeabi_dmul+0xde>
   d6248:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d624c:	bf08      	it	eq
   d624e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6252:	f150 0000 	adcs.w	r0, r0, #0
   d6256:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d625a:	bd70      	pop	{r4, r5, r6, pc}
   d625c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6260:	ea46 0101 	orr.w	r1, r6, r1
   d6264:	ea40 0002 	orr.w	r0, r0, r2
   d6268:	ea81 0103 	eor.w	r1, r1, r3
   d626c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6270:	bfc2      	ittt	gt
   d6272:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6276:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d627a:	bd70      	popgt	{r4, r5, r6, pc}
   d627c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6280:	f04f 0e00 	mov.w	lr, #0
   d6284:	3c01      	subs	r4, #1
   d6286:	f300 80ab 	bgt.w	d63e0 <__aeabi_dmul+0x238>
   d628a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d628e:	bfde      	ittt	le
   d6290:	2000      	movle	r0, #0
   d6292:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6296:	bd70      	pople	{r4, r5, r6, pc}
   d6298:	f1c4 0400 	rsb	r4, r4, #0
   d629c:	3c20      	subs	r4, #32
   d629e:	da35      	bge.n	d630c <__aeabi_dmul+0x164>
   d62a0:	340c      	adds	r4, #12
   d62a2:	dc1b      	bgt.n	d62dc <__aeabi_dmul+0x134>
   d62a4:	f104 0414 	add.w	r4, r4, #20
   d62a8:	f1c4 0520 	rsb	r5, r4, #32
   d62ac:	fa00 f305 	lsl.w	r3, r0, r5
   d62b0:	fa20 f004 	lsr.w	r0, r0, r4
   d62b4:	fa01 f205 	lsl.w	r2, r1, r5
   d62b8:	ea40 0002 	orr.w	r0, r0, r2
   d62bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d62c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d62c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d62c8:	fa21 f604 	lsr.w	r6, r1, r4
   d62cc:	eb42 0106 	adc.w	r1, r2, r6
   d62d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d62d4:	bf08      	it	eq
   d62d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d62da:	bd70      	pop	{r4, r5, r6, pc}
   d62dc:	f1c4 040c 	rsb	r4, r4, #12
   d62e0:	f1c4 0520 	rsb	r5, r4, #32
   d62e4:	fa00 f304 	lsl.w	r3, r0, r4
   d62e8:	fa20 f005 	lsr.w	r0, r0, r5
   d62ec:	fa01 f204 	lsl.w	r2, r1, r4
   d62f0:	ea40 0002 	orr.w	r0, r0, r2
   d62f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d62f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d62fc:	f141 0100 	adc.w	r1, r1, #0
   d6300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6304:	bf08      	it	eq
   d6306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d630a:	bd70      	pop	{r4, r5, r6, pc}
   d630c:	f1c4 0520 	rsb	r5, r4, #32
   d6310:	fa00 f205 	lsl.w	r2, r0, r5
   d6314:	ea4e 0e02 	orr.w	lr, lr, r2
   d6318:	fa20 f304 	lsr.w	r3, r0, r4
   d631c:	fa01 f205 	lsl.w	r2, r1, r5
   d6320:	ea43 0302 	orr.w	r3, r3, r2
   d6324:	fa21 f004 	lsr.w	r0, r1, r4
   d6328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d632c:	fa21 f204 	lsr.w	r2, r1, r4
   d6330:	ea20 0002 	bic.w	r0, r0, r2
   d6334:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d633c:	bf08      	it	eq
   d633e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6342:	bd70      	pop	{r4, r5, r6, pc}
   d6344:	f094 0f00 	teq	r4, #0
   d6348:	d10f      	bne.n	d636a <__aeabi_dmul+0x1c2>
   d634a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d634e:	0040      	lsls	r0, r0, #1
   d6350:	eb41 0101 	adc.w	r1, r1, r1
   d6354:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6358:	bf08      	it	eq
   d635a:	3c01      	subeq	r4, #1
   d635c:	d0f7      	beq.n	d634e <__aeabi_dmul+0x1a6>
   d635e:	ea41 0106 	orr.w	r1, r1, r6
   d6362:	f095 0f00 	teq	r5, #0
   d6366:	bf18      	it	ne
   d6368:	4770      	bxne	lr
   d636a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d636e:	0052      	lsls	r2, r2, #1
   d6370:	eb43 0303 	adc.w	r3, r3, r3
   d6374:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6378:	bf08      	it	eq
   d637a:	3d01      	subeq	r5, #1
   d637c:	d0f7      	beq.n	d636e <__aeabi_dmul+0x1c6>
   d637e:	ea43 0306 	orr.w	r3, r3, r6
   d6382:	4770      	bx	lr
   d6384:	ea94 0f0c 	teq	r4, ip
   d6388:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d638c:	bf18      	it	ne
   d638e:	ea95 0f0c 	teqne	r5, ip
   d6392:	d00c      	beq.n	d63ae <__aeabi_dmul+0x206>
   d6394:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6398:	bf18      	it	ne
   d639a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d639e:	d1d1      	bne.n	d6344 <__aeabi_dmul+0x19c>
   d63a0:	ea81 0103 	eor.w	r1, r1, r3
   d63a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63a8:	f04f 0000 	mov.w	r0, #0
   d63ac:	bd70      	pop	{r4, r5, r6, pc}
   d63ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d63b2:	bf06      	itte	eq
   d63b4:	4610      	moveq	r0, r2
   d63b6:	4619      	moveq	r1, r3
   d63b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d63bc:	d019      	beq.n	d63f2 <__aeabi_dmul+0x24a>
   d63be:	ea94 0f0c 	teq	r4, ip
   d63c2:	d102      	bne.n	d63ca <__aeabi_dmul+0x222>
   d63c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d63c8:	d113      	bne.n	d63f2 <__aeabi_dmul+0x24a>
   d63ca:	ea95 0f0c 	teq	r5, ip
   d63ce:	d105      	bne.n	d63dc <__aeabi_dmul+0x234>
   d63d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d63d4:	bf1c      	itt	ne
   d63d6:	4610      	movne	r0, r2
   d63d8:	4619      	movne	r1, r3
   d63da:	d10a      	bne.n	d63f2 <__aeabi_dmul+0x24a>
   d63dc:	ea81 0103 	eor.w	r1, r1, r3
   d63e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d63e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d63e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d63ec:	f04f 0000 	mov.w	r0, #0
   d63f0:	bd70      	pop	{r4, r5, r6, pc}
   d63f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d63f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d63fa:	bd70      	pop	{r4, r5, r6, pc}

000d63fc <__aeabi_ddiv>:
   d63fc:	b570      	push	{r4, r5, r6, lr}
   d63fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6402:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6406:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d640a:	bf1d      	ittte	ne
   d640c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6410:	ea94 0f0c 	teqne	r4, ip
   d6414:	ea95 0f0c 	teqne	r5, ip
   d6418:	f000 f8a7 	bleq	d656a <__aeabi_ddiv+0x16e>
   d641c:	eba4 0405 	sub.w	r4, r4, r5
   d6420:	ea81 0e03 	eor.w	lr, r1, r3
   d6424:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6428:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d642c:	f000 8088 	beq.w	d6540 <__aeabi_ddiv+0x144>
   d6430:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6434:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6438:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d643c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6440:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6444:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6448:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d644c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6450:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6454:	429d      	cmp	r5, r3
   d6456:	bf08      	it	eq
   d6458:	4296      	cmpeq	r6, r2
   d645a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d645e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6462:	d202      	bcs.n	d646a <__aeabi_ddiv+0x6e>
   d6464:	085b      	lsrs	r3, r3, #1
   d6466:	ea4f 0232 	mov.w	r2, r2, rrx
   d646a:	1ab6      	subs	r6, r6, r2
   d646c:	eb65 0503 	sbc.w	r5, r5, r3
   d6470:	085b      	lsrs	r3, r3, #1
   d6472:	ea4f 0232 	mov.w	r2, r2, rrx
   d6476:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d647a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d647e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6482:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6486:	bf22      	ittt	cs
   d6488:	1ab6      	subcs	r6, r6, r2
   d648a:	4675      	movcs	r5, lr
   d648c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6490:	085b      	lsrs	r3, r3, #1
   d6492:	ea4f 0232 	mov.w	r2, r2, rrx
   d6496:	ebb6 0e02 	subs.w	lr, r6, r2
   d649a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d649e:	bf22      	ittt	cs
   d64a0:	1ab6      	subcs	r6, r6, r2
   d64a2:	4675      	movcs	r5, lr
   d64a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d64a8:	085b      	lsrs	r3, r3, #1
   d64aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d64ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d64b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64b6:	bf22      	ittt	cs
   d64b8:	1ab6      	subcs	r6, r6, r2
   d64ba:	4675      	movcs	r5, lr
   d64bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d64c0:	085b      	lsrs	r3, r3, #1
   d64c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d64c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d64ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64ce:	bf22      	ittt	cs
   d64d0:	1ab6      	subcs	r6, r6, r2
   d64d2:	4675      	movcs	r5, lr
   d64d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d64d8:	ea55 0e06 	orrs.w	lr, r5, r6
   d64dc:	d018      	beq.n	d6510 <__aeabi_ddiv+0x114>
   d64de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d64e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d64e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d64ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d64ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d64f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d64f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d64fa:	d1c0      	bne.n	d647e <__aeabi_ddiv+0x82>
   d64fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6500:	d10b      	bne.n	d651a <__aeabi_ddiv+0x11e>
   d6502:	ea41 0100 	orr.w	r1, r1, r0
   d6506:	f04f 0000 	mov.w	r0, #0
   d650a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d650e:	e7b6      	b.n	d647e <__aeabi_ddiv+0x82>
   d6510:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6514:	bf04      	itt	eq
   d6516:	4301      	orreq	r1, r0
   d6518:	2000      	moveq	r0, #0
   d651a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d651e:	bf88      	it	hi
   d6520:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6524:	f63f aeaf 	bhi.w	d6286 <__aeabi_dmul+0xde>
   d6528:	ebb5 0c03 	subs.w	ip, r5, r3
   d652c:	bf04      	itt	eq
   d652e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6532:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6536:	f150 0000 	adcs.w	r0, r0, #0
   d653a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d653e:	bd70      	pop	{r4, r5, r6, pc}
   d6540:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6544:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6548:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d654c:	bfc2      	ittt	gt
   d654e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6552:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6556:	bd70      	popgt	{r4, r5, r6, pc}
   d6558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d655c:	f04f 0e00 	mov.w	lr, #0
   d6560:	3c01      	subs	r4, #1
   d6562:	e690      	b.n	d6286 <__aeabi_dmul+0xde>
   d6564:	ea45 0e06 	orr.w	lr, r5, r6
   d6568:	e68d      	b.n	d6286 <__aeabi_dmul+0xde>
   d656a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d656e:	ea94 0f0c 	teq	r4, ip
   d6572:	bf08      	it	eq
   d6574:	ea95 0f0c 	teqeq	r5, ip
   d6578:	f43f af3b 	beq.w	d63f2 <__aeabi_dmul+0x24a>
   d657c:	ea94 0f0c 	teq	r4, ip
   d6580:	d10a      	bne.n	d6598 <__aeabi_ddiv+0x19c>
   d6582:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6586:	f47f af34 	bne.w	d63f2 <__aeabi_dmul+0x24a>
   d658a:	ea95 0f0c 	teq	r5, ip
   d658e:	f47f af25 	bne.w	d63dc <__aeabi_dmul+0x234>
   d6592:	4610      	mov	r0, r2
   d6594:	4619      	mov	r1, r3
   d6596:	e72c      	b.n	d63f2 <__aeabi_dmul+0x24a>
   d6598:	ea95 0f0c 	teq	r5, ip
   d659c:	d106      	bne.n	d65ac <__aeabi_ddiv+0x1b0>
   d659e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65a2:	f43f aefd 	beq.w	d63a0 <__aeabi_dmul+0x1f8>
   d65a6:	4610      	mov	r0, r2
   d65a8:	4619      	mov	r1, r3
   d65aa:	e722      	b.n	d63f2 <__aeabi_dmul+0x24a>
   d65ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d65b0:	bf18      	it	ne
   d65b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d65b6:	f47f aec5 	bne.w	d6344 <__aeabi_dmul+0x19c>
   d65ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d65be:	f47f af0d 	bne.w	d63dc <__aeabi_dmul+0x234>
   d65c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d65c6:	f47f aeeb 	bne.w	d63a0 <__aeabi_dmul+0x1f8>
   d65ca:	e712      	b.n	d63f2 <__aeabi_dmul+0x24a>

000d65cc <__aeabi_d2f>:
   d65cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d65d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d65d4:	bf24      	itt	cs
   d65d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d65da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d65de:	d90d      	bls.n	d65fc <__aeabi_d2f+0x30>
   d65e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d65e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d65e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d65ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d65f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d65f4:	bf08      	it	eq
   d65f6:	f020 0001 	biceq.w	r0, r0, #1
   d65fa:	4770      	bx	lr
   d65fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6600:	d121      	bne.n	d6646 <__aeabi_d2f+0x7a>
   d6602:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6606:	bfbc      	itt	lt
   d6608:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d660c:	4770      	bxlt	lr
   d660e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6612:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6616:	f1c2 0218 	rsb	r2, r2, #24
   d661a:	f1c2 0c20 	rsb	ip, r2, #32
   d661e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6622:	fa20 f002 	lsr.w	r0, r0, r2
   d6626:	bf18      	it	ne
   d6628:	f040 0001 	orrne.w	r0, r0, #1
   d662c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6630:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6634:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6638:	ea40 000c 	orr.w	r0, r0, ip
   d663c:	fa23 f302 	lsr.w	r3, r3, r2
   d6640:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6644:	e7cc      	b.n	d65e0 <__aeabi_d2f+0x14>
   d6646:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d664a:	d107      	bne.n	d665c <__aeabi_d2f+0x90>
   d664c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6650:	bf1e      	ittt	ne
   d6652:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6656:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d665a:	4770      	bxne	lr
   d665c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6660:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6664:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6668:	4770      	bx	lr
   d666a:	bf00      	nop

000d666c <__cxa_atexit>:
   d666c:	b510      	push	{r4, lr}
   d666e:	4c05      	ldr	r4, [pc, #20]	; (d6684 <__cxa_atexit+0x18>)
   d6670:	4613      	mov	r3, r2
   d6672:	b12c      	cbz	r4, d6680 <__cxa_atexit+0x14>
   d6674:	460a      	mov	r2, r1
   d6676:	4601      	mov	r1, r0
   d6678:	2002      	movs	r0, #2
   d667a:	f3af 8000 	nop.w
   d667e:	bd10      	pop	{r4, pc}
   d6680:	4620      	mov	r0, r4
   d6682:	bd10      	pop	{r4, pc}
   d6684:	00000000 	.word	0x00000000

000d6688 <memcpy>:
   d6688:	b510      	push	{r4, lr}
   d668a:	1e43      	subs	r3, r0, #1
   d668c:	440a      	add	r2, r1
   d668e:	4291      	cmp	r1, r2
   d6690:	d004      	beq.n	d669c <memcpy+0x14>
   d6692:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6696:	f803 4f01 	strb.w	r4, [r3, #1]!
   d669a:	e7f8      	b.n	d668e <memcpy+0x6>
   d669c:	bd10      	pop	{r4, pc}

000d669e <memset>:
   d669e:	4402      	add	r2, r0
   d66a0:	4603      	mov	r3, r0
   d66a2:	4293      	cmp	r3, r2
   d66a4:	d002      	beq.n	d66ac <memset+0xe>
   d66a6:	f803 1b01 	strb.w	r1, [r3], #1
   d66aa:	e7fa      	b.n	d66a2 <memset+0x4>
   d66ac:	4770      	bx	lr
	...

000d66b0 <srand>:
   d66b0:	b538      	push	{r3, r4, r5, lr}
   d66b2:	4b12      	ldr	r3, [pc, #72]	; (d66fc <srand+0x4c>)
   d66b4:	681c      	ldr	r4, [r3, #0]
   d66b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66b8:	4605      	mov	r5, r0
   d66ba:	b9d3      	cbnz	r3, d66f2 <srand+0x42>
   d66bc:	2018      	movs	r0, #24
   d66be:	f7fe fa8f 	bl	d4be0 <malloc>
   d66c2:	f243 330e 	movw	r3, #13070	; 0x330e
   d66c6:	63a0      	str	r0, [r4, #56]	; 0x38
   d66c8:	8003      	strh	r3, [r0, #0]
   d66ca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d66ce:	8043      	strh	r3, [r0, #2]
   d66d0:	f241 2334 	movw	r3, #4660	; 0x1234
   d66d4:	8083      	strh	r3, [r0, #4]
   d66d6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d66da:	80c3      	strh	r3, [r0, #6]
   d66dc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d66e0:	8103      	strh	r3, [r0, #8]
   d66e2:	2305      	movs	r3, #5
   d66e4:	8143      	strh	r3, [r0, #10]
   d66e6:	230b      	movs	r3, #11
   d66e8:	8183      	strh	r3, [r0, #12]
   d66ea:	2201      	movs	r2, #1
   d66ec:	2300      	movs	r3, #0
   d66ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d66f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66f4:	2200      	movs	r2, #0
   d66f6:	611d      	str	r5, [r3, #16]
   d66f8:	615a      	str	r2, [r3, #20]
   d66fa:	bd38      	pop	{r3, r4, r5, pc}
   d66fc:	2003e380 	.word	0x2003e380

000d6700 <strdup>:
   d6700:	4b02      	ldr	r3, [pc, #8]	; (d670c <strdup+0xc>)
   d6702:	4601      	mov	r1, r0
   d6704:	6818      	ldr	r0, [r3, #0]
   d6706:	f000 b803 	b.w	d6710 <_strdup_r>
   d670a:	bf00      	nop
   d670c:	2003e380 	.word	0x2003e380

000d6710 <_strdup_r>:
   d6710:	b570      	push	{r4, r5, r6, lr}
   d6712:	4606      	mov	r6, r0
   d6714:	4608      	mov	r0, r1
   d6716:	460c      	mov	r4, r1
   d6718:	f000 f80d 	bl	d6736 <strlen>
   d671c:	1c45      	adds	r5, r0, #1
   d671e:	4629      	mov	r1, r5
   d6720:	4630      	mov	r0, r6
   d6722:	f7fe fa7d 	bl	d4c20 <_malloc_r>
   d6726:	4606      	mov	r6, r0
   d6728:	b118      	cbz	r0, d6732 <_strdup_r+0x22>
   d672a:	462a      	mov	r2, r5
   d672c:	4621      	mov	r1, r4
   d672e:	f7ff ffab 	bl	d6688 <memcpy>
   d6732:	4630      	mov	r0, r6
   d6734:	bd70      	pop	{r4, r5, r6, pc}

000d6736 <strlen>:
   d6736:	4603      	mov	r3, r0
   d6738:	f813 2b01 	ldrb.w	r2, [r3], #1
   d673c:	2a00      	cmp	r2, #0
   d673e:	d1fb      	bne.n	d6738 <strlen+0x2>
   d6740:	1a18      	subs	r0, r3, r0
   d6742:	3801      	subs	r0, #1
   d6744:	4770      	bx	lr

000d6746 <link_code_end>:
	...

000d6748 <dynalib_user>:
   d6748:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6758:	0000 0000                                   ....

000d675c <_ZL13releaseNumber>:
   d675c:	2e31 3230 0000 6563 736c 7569 0073 6552     1.02..celsius.Re
   d676c:	656c 7361 0065 3325 312e 2066 6544 7267     lease.%3.1f Degr
   d677c:	6565 2073 0043 6554 706d 7265 7461 7275     ees C.Temperatur
   d678c:	0065 0000                                   e...

000d6790 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6798:	4c5d 000d 4c63 000d 4c8b 000d 4c6f 000d     ]L..cL...L..oL..
   d67a8:	4c5f 000d                                   _L..

000d67ac <_ZTVN5spark13EthernetClassE>:
	...
   d67b4:	522b 000d 5221 000d 5217 000d 520d 000d     +R..!R...R...R..
   d67c4:	5201 000d 51f5 000d 51e9 000d 51e1 000d     .R...Q...Q...Q..
   d67d4:	51d7 000d 51cd 000d 5589 000d               .Q...Q...U..

000d67e0 <_ZTV7TwoWire>:
	...
   d67e8:	5249 000d 5293 000d 526b 000d 524b 000d     IR...R..kR..KR..
   d67f8:	5273 000d 527b 000d 5283 000d 528b 000d     sR..{R...R...R..

000d6808 <_ZTV9IPAddress>:
	...
   d6810:	52e3 000d 52d5 000d 52d7 000d 0066 6e6c     .R...R...R..f.ln
   d6820:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6830:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d6840:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d6850:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d6860:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d6870:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d6880:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d6890:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d68a0:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d68b0:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d68c0:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d68d0:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d68e0:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d68f0:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d6900 <_ZTVN5spark9MeshClassE>:
	...
   d6908:	5427 000d 541d 000d 5413 000d 5409 000d     'T...T...T...T..
   d6918:	53fd 000d 53f1 000d 53e5 000d 53dd 000d     .S...S...S...S..
   d6928:	53d3 000d 53c9 000d 5589 000d               .S...S...U..

000d6934 <_ZTVN5spark12NetworkClassE>:
	...
   d693c:	5521 000d 552b 000d 5535 000d 553f 000d     !U..+U..5U..?U..
   d694c:	5549 000d 5555 000d 5561 000d 556d 000d     IU..UU..aU..mU..
   d695c:	5575 000d 557f 000d 5589 000d               uU...U...U..

000d6968 <_ZTV8SPIClass>:
	...
   d6970:	5741 000d 5743 000d 005a 2b25 3330 3a64     AW..CW..Z.%+03d:
   d6980:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6990:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d69a0:	0000 0000                                   ....

000d69a4 <_ZTV11USARTSerial>:
	...
   d69ac:	57ad 000d 57d1 000d 57dd 000d 5669 000d     .W...W...W..iV..
   d69bc:	57b9 000d 57c5 000d 57bf 000d 57cb 000d     .W...W...W...W..
   d69cc:	57af 000d 57b3 000d                         .W...W..

000d69d4 <_ZTV9USBSerial>:
	...
   d69dc:	5885 000d 58c9 000d 58a3 000d 5669 000d     .X...X...X..iV..
   d69ec:	589d 000d 5887 000d 588f 000d 58c3 000d     .X...X...X...X..
   d69fc:	5897 000d 5881 000d                         .X...X..

000d6a04 <_ZTVN5spark9WiFiClassE>:
	...
   d6a0c:	59b7 000d 59ad 000d 59a3 000d 5959 000d     .Y...Y...Y..YY..
   d6a1c:	5997 000d 598b 000d 597f 000d 5977 000d     .Y...Y...Y..wY..
   d6a2c:	596d 000d 5963 000d 5589 000d               mY..cY...U..

000d6a38 <__sf_fake_stdin>:
	...

000d6a58 <__sf_fake_stdout>:
	...

000d6a78 <__sf_fake_stderr>:
	...

000d6a98 <link_const_variable_data_end>:
   d6a98:	000d41a1 	.word	0x000d41a1
   d6a9c:	000d4437 	.word	0x000d4437
   d6aa0:	000d4819 	.word	0x000d4819
   d6aa4:	000d5235 	.word	0x000d5235
   d6aa8:	000d53b9 	.word	0x000d53b9
   d6aac:	000d54d5 	.word	0x000d54d5
   d6ab0:	000d5655 	.word	0x000d5655
   d6ab4:	000d5725 	.word	0x000d5725
   d6ab8:	000d5781 	.word	0x000d5781
   d6abc:	000d5799 	.word	0x000d5799
   d6ac0:	000d59c1 	.word	0x000d59c1
   d6ac4:	000d5b55 	.word	0x000d5b55
   d6ac8:	000d5ba9 	.word	0x000d5ba9
   d6acc:	000d5c6d 	.word	0x000d5c6d
   d6ad0:	000d5cf1 	.word	0x000d5cf1
   d6ad4:	000d5d75 	.word	0x000d5d75

000d6ad8 <link_constructors_end>:
	...
