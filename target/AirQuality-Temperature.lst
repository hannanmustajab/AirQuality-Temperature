
/Users/chipmc/Documents/Maker/Particle/Projects/AirQuality-Temperature/target/AirQuality-Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2cf0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a2cf4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005d8  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a2d60  080a2d60  00022d60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a2d88  080a2d88  00022d88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a9028  00000000  00000000  00022d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fcf3  00000000  00000000  000cbdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010ce9  00000000  00000000  000dbaa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001cb8  00000000  00000000  000ec790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002e60  00000000  00000000  000ee448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025bc3  00000000  00000000  000f12a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024222  00000000  00000000  00116e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a3f65  00000000  00000000  0013b08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b038  00000000  00000000  001deff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	c4 29 0a 08                                         .)..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fc69 	bl	80a2904 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fc6e 	bl	80a291a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2cf4 	.word	0x080a2cf4
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	20000944 	.word	0x20000944
 80a0058:	20000944 	.word	0x20000944

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fbbf 	bl	80a17e0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2cac 	.word	0x080a2cac
 80a0084:	080a2ce8 	.word	0x080a2ce8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f83f 	bl	80a0110 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bb65 	b.w	80a1764 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd05 	b.w	80a0aa8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd0b 	b.w	80a0ab8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
char temperatureString[16];

unsigned long updateRate = 5000; // Define Update Rate


void setup() {
 80a00b4:	b510      	push	{r4, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a00b6:	2300      	movs	r3, #0
 80a00b8:	2204      	movs	r2, #4
 80a00ba:	4906      	ldr	r1, [pc, #24]	; (80a00d4 <setup+0x20>)
 80a00bc:	4806      	ldr	r0, [pc, #24]	; (80a00d8 <setup+0x24>)
 80a00be:	f000 fc83 	bl	80a09c8 <spark_variable>
  Particle.variable("celsius",temperatureString);// Setup Particle Variable
  // Particle.variable("version",VERSION); // Particle Variable for Version
  Particle.variable("Release",releaseNumber);
}
 80a00c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a00c6:	2300      	movs	r3, #0
 80a00c8:	2204      	movs	r2, #4
 80a00ca:	4904      	ldr	r1, [pc, #16]	; (80a00dc <setup+0x28>)
 80a00cc:	4804      	ldr	r0, [pc, #16]	; (80a00e0 <setup+0x2c>)
 80a00ce:	f000 bc7b 	b.w	80a09c8 <spark_variable>
 80a00d2:	bf00      	nop
 80a00d4:	20000370 	.word	0x20000370
 80a00d8:	080a29de 	.word	0x080a29de
 80a00dc:	080a29d8 	.word	0x080a29d8
 80a00e0:	080a29e6 	.word	0x080a29e6

080a00e4 <_Z20PublishDelayFunctionv>:
   Particle.publish("Temperature",temperatureString,PRIVATE);  
  }

// Function to create a delay in the publish time 
bool PublishDelayFunction()
{
 80a00e4:	b510      	push	{r4, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00e6:	f000 fb49 	bl	80a077c <HAL_Timer_Get_Milli_Seconds>
  static unsigned long tstamp = 0;                      // Static variables are defined once and retain their value
  if (millis() - tstamp  <= updateRate) return 0;
 80a00ea:	4c07      	ldr	r4, [pc, #28]	; (80a0108 <_Z20PublishDelayFunctionv+0x24>)
 80a00ec:	6823      	ldr	r3, [r4, #0]
 80a00ee:	1ac0      	subs	r0, r0, r3
 80a00f0:	4b06      	ldr	r3, [pc, #24]	; (80a010c <_Z20PublishDelayFunctionv+0x28>)
 80a00f2:	681b      	ldr	r3, [r3, #0]
 80a00f4:	4298      	cmp	r0, r3
 80a00f6:	d904      	bls.n	80a0102 <_Z20PublishDelayFunctionv+0x1e>
 80a00f8:	f000 fb40 	bl	80a077c <HAL_Timer_Get_Milli_Seconds>
  else 
  {
    tstamp = millis();
 80a00fc:	6020      	str	r0, [r4, #0]
 80a00fe:	2001      	movs	r0, #1
 80a0100:	bd10      	pop	{r4, pc}

// Function to create a delay in the publish time 
bool PublishDelayFunction()
{
  static unsigned long tstamp = 0;                      // Static variables are defined once and retain their value
  if (millis() - tstamp  <= updateRate) return 0;
 80a0102:	2000      	movs	r0, #0
  else 
  {
    tstamp = millis();
    return 1;
  }
}
 80a0104:	bd10      	pop	{r4, pc}
 80a0106:	bf00      	nop
 80a0108:	200003b8 	.word	0x200003b8
 80a010c:	20000300 	.word	0x20000300

080a0110 <loop>:
  // Particle.variable("version",VERSION); // Particle Variable for Version
  Particle.variable("Release",releaseNumber);
}


void loop() {
 80a0110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
// Reading data from the sensor.    
   if (sensor.read()) {
 80a0112:	481b      	ldr	r0, [pc, #108]	; (80a0180 <loop+0x70>)
 80a0114:	f000 f95c 	bl	80a03d0 <_ZN4DS184readEv>
 80a0118:	b158      	cbz	r0, 80a0132 <loop+0x22>
      snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", sensor.celsius());  // Ensures you get the size right and prevent memory overflow2
 80a011a:	4819      	ldr	r0, [pc, #100]	; (80a0180 <loop+0x70>)
 80a011c:	f000 f97d 	bl	80a041a <_ZN4DS187celsiusEv>
 80a0120:	f001 fece 	bl	80a1ec0 <__aeabi_f2d>
 80a0124:	4a17      	ldr	r2, [pc, #92]	; (80a0184 <loop+0x74>)
 80a0126:	e9cd 0100 	strd	r0, r1, [sp]
 80a012a:	2110      	movs	r1, #16
 80a012c:	4816      	ldr	r0, [pc, #88]	; (80a0188 <loop+0x78>)
 80a012e:	f000 fccb 	bl	80a0ac8 <snprintf>
   }
   waitUntil(PublishDelayFunction);
 80a0132:	f7ff ffd7 	bl	80a00e4 <_Z20PublishDelayFunctionv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0136:	b910      	cbnz	r0, 80a013e <loop+0x2e>
            spark_process();
 80a0138:	f000 fc4e 	bl	80a09d8 <spark_process>
 80a013c:	e7f9      	b.n	80a0132 <loop+0x22>
 80a013e:	f7ff ffd1 	bl	80a00e4 <_Z20PublishDelayFunctionv>
 80a0142:	4b12      	ldr	r3, [pc, #72]	; (80a018c <loop+0x7c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0144:	4a10      	ldr	r2, [pc, #64]	; (80a0188 <loop+0x78>)
 80a0146:	781b      	ldrb	r3, [r3, #0]
 80a0148:	4911      	ldr	r1, [pc, #68]	; (80a0190 <loop+0x80>)
 80a014a:	f88d 3000 	strb.w	r3, [sp]
 80a014e:	a802      	add	r0, sp, #8
 80a0150:	233c      	movs	r3, #60	; 0x3c
 80a0152:	f000 fe3b 	bl	80a0dcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0156:	9c03      	ldr	r4, [sp, #12]
 80a0158:	b17c      	cbz	r4, 80a017a <loop+0x6a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a015a:	6863      	ldr	r3, [r4, #4]
 80a015c:	3b01      	subs	r3, #1
 80a015e:	6063      	str	r3, [r4, #4]
 80a0160:	b95b      	cbnz	r3, 80a017a <loop+0x6a>
        {
          _M_dispose();
 80a0162:	6823      	ldr	r3, [r4, #0]
 80a0164:	4620      	mov	r0, r4
 80a0166:	689b      	ldr	r3, [r3, #8]
 80a0168:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a016a:	68a3      	ldr	r3, [r4, #8]
 80a016c:	3b01      	subs	r3, #1
 80a016e:	60a3      	str	r3, [r4, #8]
 80a0170:	b91b      	cbnz	r3, 80a017a <loop+0x6a>
            _M_destroy();
 80a0172:	6823      	ldr	r3, [r4, #0]
 80a0174:	4620      	mov	r0, r4
 80a0176:	68db      	ldr	r3, [r3, #12]
 80a0178:	4798      	blx	r3
   Particle.publish("Temperature",temperatureString,PRIVATE);  
  }
 80a017a:	b004      	add	sp, #16
 80a017c:	bd10      	pop	{r4, pc}
 80a017e:	bf00      	nop
 80a0180:	20000380 	.word	0x20000380
 80a0184:	080a29ee 	.word	0x080a29ee
 80a0188:	20000370 	.word	0x20000370
 80a018c:	200003b4 	.word	0x200003b4
 80a0190:	080a29fe 	.word	0x080a29fe

080a0194 <_GLOBAL__sub_I_sensor>:
  else 
  {
    tstamp = millis();
    return 1;
  }
}
 80a0194:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0196:	4b06      	ldr	r3, [pc, #24]	; (80a01b0 <_GLOBAL__sub_I_sensor+0x1c>)
 80a0198:	2201      	movs	r2, #1
 80a019a:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a019c:	f000 faf6 	bl	80a078c <HAL_Pin_Map>
 80a01a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


#include "DS18.h"

// Initialize sensor object
DS18 sensor(D7);
 80a01a4:	2200      	movs	r2, #0
 80a01a6:	2107      	movs	r1, #7
 80a01a8:	4802      	ldr	r0, [pc, #8]	; (80a01b4 <_GLOBAL__sub_I_sensor+0x20>)
 80a01aa:	f000 b816 	b.w	80a01da <_ZN4DS18C1Etb>
 80a01ae:	bf00      	nop
 80a01b0:	200003b4 	.word	0x200003b4
 80a01b4:	20000380 	.word	0x20000380

080a01b8 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a01b8:	2300      	movs	r3, #0
  _celsius = 0;
 80a01ba:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
 80a01bc:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 80a01be:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 80a01c0:	6203      	str	r3, [r0, #32]
 80a01c2:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 80a01c4:	6283      	str	r3, [r0, #40]	; 0x28
 80a01c6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a01c8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 80a01cc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 80a01d0:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  _crcError = false;
 80a01d4:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 80a01d8:	4770      	bx	lr

080a01da <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
 80a01da:	b538      	push	{r3, r4, r5, lr}
 80a01dc:	4604      	mov	r4, r0
 80a01de:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 80a01e0:	f000 f928 	bl	80a0434 <_ZN7OneWireC1Et>
 80a01e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
 80a01e8:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 80a01ea:	7525      	strb	r5, [r4, #20]
 80a01ec:	82e3      	strh	r3, [r4, #22]
{
  init();
 80a01ee:	f7ff ffe3 	bl	80a01b8 <_ZN4DS184initEv>
}
 80a01f2:	4620      	mov	r0, r4
 80a01f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a01f8 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a01f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a01fc:	680b      	ldr	r3, [r1, #0]
 80a01fe:	f100 0520 	add.w	r5, r0, #32
 80a0202:	6203      	str	r3, [r0, #32]
 80a0204:	684b      	ldr	r3, [r1, #4]

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80a0206:	4604      	mov	r4, r0
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80a0208:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a020a:	780b      	ldrb	r3, [r1, #0]
 80a020c:	2b22      	cmp	r3, #34	; 0x22
 80a020e:	d00a      	beq.n	80a0226 <_ZN4DS184readEPh+0x2e>
 80a0210:	d803      	bhi.n	80a021a <_ZN4DS184readEPh+0x22>
 80a0212:	2b10      	cmp	r3, #16
 80a0214:	d142      	bne.n	80a029c <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
 80a0216:	2301      	movs	r3, #1
 80a0218:	e008      	b.n	80a022c <_ZN4DS184readEPh+0x34>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80a021a:	2b26      	cmp	r3, #38	; 0x26
 80a021c:	d005      	beq.n	80a022a <_ZN4DS184readEPh+0x32>
 80a021e:	2b28      	cmp	r3, #40	; 0x28
 80a0220:	d13c      	bne.n	80a029c <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
 80a0222:	2302      	movs	r3, #2
 80a0224:	e002      	b.n	80a022c <_ZN4DS184readEPh+0x34>
    case 0x22: _type = WIRE_DS1822; break;
 80a0226:	2303      	movs	r3, #3
 80a0228:	e000      	b.n	80a022c <_ZN4DS184readEPh+0x34>
    case 0x26: _type = WIRE_DS2438; break;
 80a022a:	2304      	movs	r3, #4
 80a022c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
 80a0230:	4620      	mov	r0, r4
 80a0232:	f000 f90c 	bl	80a044e <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80a0236:	4629      	mov	r1, r5
 80a0238:	4620      	mov	r0, r4
 80a023a:	f000 f9cf 	bl	80a05dc <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
 80a023e:	7d22      	ldrb	r2, [r4, #20]
 80a0240:	2144      	movs	r1, #68	; 0x44
 80a0242:	4620      	mov	r0, r4
 80a0244:	f000 f992 	bl	80a056c <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
 80a0248:	8ae0      	ldrh	r0, [r4, #22]
 80a024a:	f000 fc55 	bl	80a0af8 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
 80a024e:	4620      	mov	r0, r4
 80a0250:	f000 f8fd 	bl	80a044e <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a0254:	4629      	mov	r1, r5
 80a0256:	4620      	mov	r0, r4
 80a0258:	f000 f9c0 	bl	80a05dc <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 80a025c:	2200      	movs	r2, #0
 80a025e:	21b8      	movs	r1, #184	; 0xb8
 80a0260:	4620      	mov	r0, r4
 80a0262:	f000 f983 	bl	80a056c <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 80a0266:	2200      	movs	r2, #0
 80a0268:	4611      	mov	r1, r2
 80a026a:	4620      	mov	r0, r4
 80a026c:	f000 f97e 	bl	80a056c <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
 80a0270:	4620      	mov	r0, r4
 80a0272:	f000 f8ec 	bl	80a044e <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80a0276:	4629      	mov	r1, r5
 80a0278:	4620      	mov	r0, r4
 80a027a:	f000 f9af 	bl	80a05dc <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 80a027e:	2200      	movs	r2, #0
 80a0280:	21be      	movs	r1, #190	; 0xbe
 80a0282:	4620      	mov	r0, r4
 80a0284:	f000 f972 	bl	80a056c <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 80a0288:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80a028c:	2b04      	cmp	r3, #4
 80a028e:	d10a      	bne.n	80a02a6 <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 80a0290:	2200      	movs	r2, #0
 80a0292:	4611      	mov	r1, r2
 80a0294:	4620      	mov	r0, r4
 80a0296:	f000 f969 	bl	80a056c <_ZN7OneWire5writeEhh>
 80a029a:	e004      	b.n	80a02a6 <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 80a029c:	2000      	movs	r0, #0
 80a029e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 80a02a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a02a6:	f104 0527 	add.w	r5, r4, #39	; 0x27
 80a02aa:	f104 0630 	add.w	r6, r4, #48	; 0x30
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
 80a02ae:	4620      	mov	r0, r4
 80a02b0:	f000 f984 	bl	80a05bc <_ZN7OneWire4readEv>
 80a02b4:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 80a02b8:	42ae      	cmp	r6, r5
 80a02ba:	d1f8      	bne.n	80a02ae <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
 80a02bc:	2108      	movs	r1, #8
 80a02be:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a02c2:	f000 fa24 	bl	80a070e <_ZN7OneWire4crc8EPhh>
 80a02c6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a02ca:	4283      	cmp	r3, r0
 80a02cc:	d005      	beq.n	80a02da <_ZN4DS184readEPh+0xe2>
    _crcError = true;
 80a02ce:	2301      	movs	r3, #1
 80a02d0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a02d4:	2000      	movs	r0, #0
 80a02d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 80a02da:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 80a02de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  if (_type == WIRE_DS2438) {
 80a02e2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 80a02e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (_type == WIRE_DS2438) {
 80a02ea:	2a04      	cmp	r2, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 80a02ec:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 80a02ee:	d120      	bne.n	80a0332 <_ZN4DS184readEPh+0x13a>
    _raw = (_data[2] << 8) | _data[1];
 80a02f0:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 80a02f4:	ea45 2306 	orr.w	r3, r5, r6, lsl #8
 80a02f8:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a02fa:	08ed      	lsrs	r5, r5, #3
      if (_data[2] > 127) {
 80a02fc:	0633      	lsls	r3, r6, #24
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80a02fe:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
      if (_data[2] > 127) {
 80a0302:	d547      	bpl.n	80a0394 <_ZN4DS184readEPh+0x19c>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80a0304:	4630      	mov	r0, r6
 80a0306:	f002 f947 	bl	80a2598 <__aeabi_ui2f>
 80a030a:	f001 fdd9 	bl	80a1ec0 <__aeabi_f2d>
 80a030e:	4606      	mov	r6, r0
 80a0310:	4628      	mov	r0, r5
 80a0312:	460f      	mov	r7, r1
 80a0314:	f002 f940 	bl	80a2598 <__aeabi_ui2f>
 80a0318:	f001 fdd2 	bl	80a1ec0 <__aeabi_f2d>
 80a031c:	2200      	movs	r2, #0
 80a031e:	4b2b      	ldr	r3, [pc, #172]	; (80a03cc <_ZN4DS184readEPh+0x1d4>)
 80a0320:	f001 fe22 	bl	80a1f68 <__aeabi_dmul>
 80a0324:	4602      	mov	r2, r0
 80a0326:	460b      	mov	r3, r1
 80a0328:	4630      	mov	r0, r6
 80a032a:	4639      	mov	r1, r7
 80a032c:	f001 fc68 	bl	80a1c00 <__aeabi_dsub>
 80a0330:	e046      	b.n	80a03c0 <_ZN4DS184readEPh+0x1c8>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
 80a0332:	2a01      	cmp	r2, #1
 80a0334:	d003      	beq.n	80a033e <_ZN4DS184readEPh+0x146>
 80a0336:	d346      	bcc.n	80a03c6 <_ZN4DS184readEPh+0x1ce>
 80a0338:	2a03      	cmp	r2, #3
 80a033a:	d910      	bls.n	80a035e <_ZN4DS184readEPh+0x166>
 80a033c:	e043      	b.n	80a03c6 <_ZN4DS184readEPh+0x1ce>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80a033e:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a0342:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80a0346:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80a0348:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80a034a:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80a034c:	d119      	bne.n	80a0382 <_ZN4DS184readEPh+0x18a>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 80a034e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80a0352:	f023 030f 	bic.w	r3, r3, #15
 80a0356:	f1c2 020c 	rsb	r2, r2, #12
 80a035a:	4413      	add	r3, r2
 80a035c:	e010      	b.n	80a0380 <_ZN4DS184readEPh+0x188>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
 80a035e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 80a0362:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 80a0366:	d102      	bne.n	80a036e <_ZN4DS184readEPh+0x176>
 80a0368:	f023 0307 	bic.w	r3, r3, #7
 80a036c:	e008      	b.n	80a0380 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 80a036e:	2a20      	cmp	r2, #32
 80a0370:	d102      	bne.n	80a0378 <_ZN4DS184readEPh+0x180>
 80a0372:	f023 0303 	bic.w	r3, r3, #3
 80a0376:	e003      	b.n	80a0380 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 80a0378:	2a40      	cmp	r2, #64	; 0x40
 80a037a:	d102      	bne.n	80a0382 <_ZN4DS184readEPh+0x18a>
 80a037c:	f023 0301 	bic.w	r3, r3, #1
 80a0380:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
 80a0382:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 80a0386:	f002 f90b 	bl	80a25a0 <__aeabi_i2f>
 80a038a:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a038e:	f002 f95b 	bl	80a2648 <__aeabi_fmul>
 80a0392:	e017      	b.n	80a03c4 <_ZN4DS184readEPh+0x1cc>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 80a0394:	4628      	mov	r0, r5
 80a0396:	f002 f8ff 	bl	80a2598 <__aeabi_ui2f>
 80a039a:	f001 fd91 	bl	80a1ec0 <__aeabi_f2d>
 80a039e:	2200      	movs	r2, #0
 80a03a0:	4b0a      	ldr	r3, [pc, #40]	; (80a03cc <_ZN4DS184readEPh+0x1d4>)
 80a03a2:	f001 fde1 	bl	80a1f68 <__aeabi_dmul>
 80a03a6:	4680      	mov	r8, r0
 80a03a8:	4630      	mov	r0, r6
 80a03aa:	4689      	mov	r9, r1
 80a03ac:	f002 f8f4 	bl	80a2598 <__aeabi_ui2f>
 80a03b0:	f001 fd86 	bl	80a1ec0 <__aeabi_f2d>
 80a03b4:	4602      	mov	r2, r0
 80a03b6:	460b      	mov	r3, r1
 80a03b8:	4640      	mov	r0, r8
 80a03ba:	4649      	mov	r1, r9
 80a03bc:	f001 fc22 	bl	80a1c04 <__adddf3>
 80a03c0:	f001 ffe4 	bl	80a238c <__aeabi_d2f>
 80a03c4:	61e0      	str	r0, [r4, #28]
      }
  }

  // Got a good reading!
  return true;
 80a03c6:	2001      	movs	r0, #1
}
 80a03c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a03cc:	3fa00000 	.word	0x3fa00000

080a03d0 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
 80a03d0:	b538      	push	{r3, r4, r5, lr}
 80a03d2:	4604      	mov	r4, r0
  init();
 80a03d4:	f7ff fef0 	bl	80a01b8 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
 80a03d8:	f100 0520 	add.w	r5, r0, #32
 80a03dc:	4629      	mov	r1, r5
 80a03de:	f000 f91b 	bl	80a0618 <_ZN7OneWire6searchEPh>
 80a03e2:	b930      	cbnz	r0, 80a03f2 <_ZN4DS184readEv+0x22>
    _searchDone = true;
 80a03e4:	2301      	movs	r3, #1
 80a03e6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	f000 f908 	bl	80a0600 <_ZN7OneWire12reset_searchEv>
    return false;
 80a03f0:	e011      	b.n	80a0416 <_ZN4DS184readEv+0x46>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 80a03f2:	2107      	movs	r1, #7
 80a03f4:	4628      	mov	r0, r5
 80a03f6:	f000 f98a 	bl	80a070e <_ZN7OneWire4crc8EPhh>
 80a03fa:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a03fe:	4283      	cmp	r3, r0
 80a0400:	d003      	beq.n	80a040a <_ZN4DS184readEv+0x3a>
    _crcError = true;
 80a0402:	2301      	movs	r3, #1
 80a0404:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80a0408:	e005      	b.n	80a0416 <_ZN4DS184readEv+0x46>
  }

  // Read the temperature from that chip
  return read(_addr);
 80a040a:	4629      	mov	r1, r5
 80a040c:	4620      	mov	r0, r4
}
 80a040e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
 80a0412:	f7ff bef1 	b.w	80a01f8 <_ZN4DS184readEPh>
}
 80a0416:	2000      	movs	r0, #0
 80a0418:	bd38      	pop	{r3, r4, r5, pc}

080a041a <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80a041a:	69c0      	ldr	r0, [r0, #28]
 80a041c:	4770      	bx	lr

080a041e <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a041e:	f000 b9b5 	b.w	80a078c <HAL_Pin_Map>

080a0422 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0422:	8802      	ldrh	r2, [r0, #0]
 80a0424:	231c      	movs	r3, #28
 80a0426:	4353      	muls	r3, r2
 80a0428:	6842      	ldr	r2, [r0, #4]
 80a042a:	18d1      	adds	r1, r2, r3
 80a042c:	58d3      	ldr	r3, [r2, r3]
 80a042e:	888a      	ldrh	r2, [r1, #4]
 80a0430:	835a      	strh	r2, [r3, #26]
 80a0432:	4770      	bx	lr

080a0434 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0434:	b538      	push	{r3, r4, r5, lr}
 80a0436:	4604      	mov	r4, r0
 80a0438:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a043a:	f000 f9a7 	bl	80a078c <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a043e:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0440:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a0442:	4628      	mov	r0, r5
 80a0444:	f001 fa1c 	bl	80a1880 <pinMode>
    _pin = pin;
 80a0448:	8025      	strh	r5, [r4, #0]
}
 80a044a:	4620      	mov	r0, r4
 80a044c:	bd38      	pop	{r3, r4, r5, pc}

080a044e <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a044e:	b538      	push	{r3, r4, r5, lr}
 80a0450:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a0452:	f000 fe61 	bl	80a1118 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0456:	2100      	movs	r1, #0
 80a0458:	8828      	ldrh	r0, [r5, #0]
 80a045a:	f000 f99f 	bl	80a079c <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a045e:	f000 fe5d 	bl	80a111c <_Z10interruptsv>
 80a0462:	247d      	movs	r4, #125	; 0x7d
 80a0464:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 80a0466:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a046a:	d02d      	beq.n	80a04c8 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a046c:	2002      	movs	r0, #2
 80a046e:	f000 f97d 	bl	80a076c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0472:	8828      	ldrh	r0, [r5, #0]
 80a0474:	f000 f99a 	bl	80a07ac <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 80a0478:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a047c:	d0f2      	beq.n	80a0464 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 80a047e:	f000 fe4b 	bl	80a1118 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a0482:	4628      	mov	r0, r5
 80a0484:	f7ff ffcd 	bl	80a0422 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0488:	2101      	movs	r1, #1
 80a048a:	8828      	ldrh	r0, [r5, #0]
 80a048c:	f000 f986 	bl	80a079c <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 80a0490:	f000 fe44 	bl	80a111c <_Z10interruptsv>
 80a0494:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a0498:	f000 f968 	bl	80a076c <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 80a049c:	f000 fe3c 	bl	80a1118 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a04a0:	2100      	movs	r1, #0
 80a04a2:	8828      	ldrh	r0, [r5, #0]
 80a04a4:	f000 f97a 	bl	80a079c <HAL_Pin_Mode>
 80a04a8:	2046      	movs	r0, #70	; 0x46
 80a04aa:	f000 f95f 	bl	80a076c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a04ae:	8828      	ldrh	r0, [r5, #0]
 80a04b0:	f000 f97c 	bl	80a07ac <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a04b4:	b2c0      	uxtb	r0, r0
 80a04b6:	fab0 f480 	clz	r4, r0

    interrupts();
 80a04ba:	f000 fe2f 	bl	80a111c <_Z10interruptsv>
 80a04be:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a04c2:	0964      	lsrs	r4, r4, #5
 80a04c4:	f000 f952 	bl	80a076c <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 80a04c8:	4620      	mov	r0, r4
 80a04ca:	bd38      	pop	{r3, r4, r5, pc}

080a04cc <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a04cc:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a04ce:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a04d2:	4604      	mov	r4, r0
    if (v & 1) {
 80a04d4:	d013      	beq.n	80a04fe <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a04d6:	f000 fe1f 	bl	80a1118 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a04da:	4620      	mov	r0, r4
 80a04dc:	f7ff ffa1 	bl	80a0422 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a04e0:	2101      	movs	r1, #1
 80a04e2:	8820      	ldrh	r0, [r4, #0]
 80a04e4:	f000 f95a 	bl	80a079c <HAL_Pin_Mode>
 80a04e8:	200a      	movs	r0, #10
 80a04ea:	f000 f93f 	bl	80a076c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a04ee:	8820      	ldrh	r0, [r4, #0]
 80a04f0:	2100      	movs	r1, #0
 80a04f2:	f000 f953 	bl	80a079c <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80a04f6:	f000 fe11 	bl	80a111c <_Z10interruptsv>
 80a04fa:	2037      	movs	r0, #55	; 0x37
 80a04fc:	e012      	b.n	80a0524 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80a04fe:	f000 fe0b 	bl	80a1118 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a0502:	4620      	mov	r0, r4
 80a0504:	f7ff ff8d 	bl	80a0422 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0508:	2101      	movs	r1, #1
 80a050a:	8820      	ldrh	r0, [r4, #0]
 80a050c:	f000 f946 	bl	80a079c <HAL_Pin_Mode>
 80a0510:	2041      	movs	r0, #65	; 0x41
 80a0512:	f000 f92b 	bl	80a076c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0516:	8820      	ldrh	r0, [r4, #0]
 80a0518:	4629      	mov	r1, r5
 80a051a:	f000 f93f 	bl	80a079c <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80a051e:	f000 fdfd 	bl	80a111c <_Z10interruptsv>
 80a0522:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80a0524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0528:	f000 b920 	b.w	80a076c <HAL_Delay_Microseconds>

080a052c <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a052c:	b510      	push	{r4, lr}
 80a052e:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80a0530:	f000 fdf2 	bl	80a1118 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a0534:	4620      	mov	r0, r4
 80a0536:	f7ff ff74 	bl	80a0422 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a053a:	2101      	movs	r1, #1
 80a053c:	8820      	ldrh	r0, [r4, #0]
 80a053e:	f000 f92d 	bl	80a079c <HAL_Pin_Mode>
 80a0542:	2003      	movs	r0, #3
 80a0544:	f000 f912 	bl	80a076c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0548:	2100      	movs	r1, #0
 80a054a:	8820      	ldrh	r0, [r4, #0]
 80a054c:	f000 f926 	bl	80a079c <HAL_Pin_Mode>
 80a0550:	200a      	movs	r0, #10
 80a0552:	f000 f90b 	bl	80a076c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0556:	8820      	ldrh	r0, [r4, #0]
 80a0558:	f000 f928 	bl	80a07ac <HAL_GPIO_Read>
 80a055c:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 80a055e:	f000 fddd 	bl	80a111c <_Z10interruptsv>
 80a0562:	2035      	movs	r0, #53	; 0x35
 80a0564:	f000 f902 	bl	80a076c <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 80a0568:	b2e0      	uxtb	r0, r4
 80a056a:	bd10      	pop	{r4, pc}

080a056c <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 80a056c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0570:	4605      	mov	r5, r0
 80a0572:	4688      	mov	r8, r1
 80a0574:	4617      	mov	r7, r2
 80a0576:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0578:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a057a:	ea18 0f04 	tst.w	r8, r4
 80a057e:	bf14      	ite	ne
 80a0580:	2101      	movne	r1, #1
 80a0582:	2100      	moveq	r1, #0
 80a0584:	4628      	mov	r0, r5
 80a0586:	f7ff ffa1 	bl	80a04cc <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a058a:	0064      	lsls	r4, r4, #1
 80a058c:	3e01      	subs	r6, #1
 80a058e:	b2e4      	uxtb	r4, r4
 80a0590:	d1f3      	bne.n	80a057a <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 80a0592:	b18f      	cbz	r7, 80a05b8 <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 80a0594:	f000 fdc0 	bl	80a1118 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0598:	882a      	ldrh	r2, [r5, #0]
 80a059a:	231c      	movs	r3, #28
 80a059c:	4353      	muls	r3, r2
 80a059e:	686a      	ldr	r2, [r5, #4]
 80a05a0:	18d1      	adds	r1, r2, r3
 80a05a2:	58d3      	ldr	r3, [r2, r3]
 80a05a4:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a05a6:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a05a8:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a05aa:	8828      	ldrh	r0, [r5, #0]
 80a05ac:	f000 f8f6 	bl	80a079c <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a05b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 80a05b4:	f000 bdb2 	b.w	80a111c <_Z10interruptsv>
 80a05b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a05bc <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 80a05bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05be:	4607      	mov	r7, r0
 80a05c0:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a05c2:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a05c4:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a05c6:	4638      	mov	r0, r7
 80a05c8:	f7ff ffb0 	bl	80a052c <_ZN7OneWire8read_bitEv>
 80a05cc:	b100      	cbz	r0, 80a05d0 <_ZN7OneWire4readEv+0x14>
 80a05ce:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a05d0:	0064      	lsls	r4, r4, #1
 80a05d2:	3e01      	subs	r6, #1
 80a05d4:	b2e4      	uxtb	r4, r4
 80a05d6:	d1f6      	bne.n	80a05c6 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 80a05d8:	4628      	mov	r0, r5
 80a05da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05dc <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a05dc:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a05de:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a05e0:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 80a05e2:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a05e4:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 80a05e6:	f7ff ffc1 	bl	80a056c <_ZN7OneWire5writeEhh>
 80a05ea:	1e65      	subs	r5, r4, #1
 80a05ec:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80a05ee:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a05f2:	2200      	movs	r2, #0
 80a05f4:	4630      	mov	r0, r6
 80a05f6:	f7ff ffb9 	bl	80a056c <_ZN7OneWire5writeEhh>
 80a05fa:	42a5      	cmp	r5, r4
 80a05fc:	d1f7      	bne.n	80a05ee <_ZN7OneWire6selectEPKh+0x12>
}
 80a05fe:	bd70      	pop	{r4, r5, r6, pc}

080a0600 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a0600:	2300      	movs	r3, #0
 80a0602:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a0604:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a0606:	7443      	strb	r3, [r0, #17]
 80a0608:	f100 0210 	add.w	r2, r0, #16
 80a060c:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a060e:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80a0612:	4282      	cmp	r2, r0
 80a0614:	d1fb      	bne.n	80a060e <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80a0616:	4770      	bx	lr

080a0618 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a061c:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a061e:	4604      	mov	r4, r0
 80a0620:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0622:	2d00      	cmp	r5, #0
 80a0624:	d15e      	bne.n	80a06e4 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80a0626:	f7ff ff12 	bl	80a044e <_ZN7OneWire5resetEv>
 80a062a:	b920      	cbnz	r0, 80a0636 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80a062c:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a062e:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a0630:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a0632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a0636:	462a      	mov	r2, r5
 80a0638:	21f0      	movs	r1, #240	; 0xf0
 80a063a:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a063c:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a063e:	f7ff ff95 	bl	80a056c <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a0642:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0644:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a0646:	4620      	mov	r0, r4
 80a0648:	f7ff ff70 	bl	80a052c <_ZN7OneWire8read_bitEv>
 80a064c:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a064e:	4620      	mov	r0, r4
 80a0650:	f7ff ff6c 	bl	80a052c <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a0654:	f1b9 0f01 	cmp.w	r9, #1
 80a0658:	d102      	bne.n	80a0660 <_ZN7OneWire6searchEPh+0x48>
 80a065a:	2801      	cmp	r0, #1
 80a065c:	d11b      	bne.n	80a0696 <_ZN7OneWire6searchEPh+0x7e>
 80a065e:	e037      	b.n	80a06d0 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 80a0660:	4581      	cmp	r9, r0
 80a0662:	eb04 0305 	add.w	r3, r4, r5
 80a0666:	d11e      	bne.n	80a06a6 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a0668:	7c22      	ldrb	r2, [r4, #16]
 80a066a:	4297      	cmp	r7, r2
 80a066c:	d207      	bcs.n	80a067e <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a066e:	7a1a      	ldrb	r2, [r3, #8]
 80a0670:	4216      	tst	r6, r2
 80a0672:	bf14      	ite	ne
 80a0674:	f04f 0901 	movne.w	r9, #1
 80a0678:	f04f 0900 	moveq.w	r9, #0
 80a067c:	e004      	b.n	80a0688 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a067e:	bf0c      	ite	eq
 80a0680:	f04f 0901 	moveq.w	r9, #1
 80a0684:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 80a0688:	f1b9 0f00 	cmp.w	r9, #0
 80a068c:	d103      	bne.n	80a0696 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a068e:	2f08      	cmp	r7, #8
 80a0690:	d808      	bhi.n	80a06a4 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a0692:	7467      	strb	r7, [r4, #17]
 80a0694:	e006      	b.n	80a06a4 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a0696:	1962      	adds	r2, r4, r5
 80a0698:	7a13      	ldrb	r3, [r2, #8]
 80a069a:	f04f 0901 	mov.w	r9, #1
 80a069e:	4333      	orrs	r3, r6
 80a06a0:	7213      	strb	r3, [r2, #8]
 80a06a2:	e004      	b.n	80a06ae <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a06a4:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a06a6:	7a1a      	ldrb	r2, [r3, #8]
 80a06a8:	ea22 0206 	bic.w	r2, r2, r6
 80a06ac:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a06ae:	4649      	mov	r1, r9
 80a06b0:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a06b2:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a06b4:	f7ff ff0a 	bl	80a04cc <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a06b8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a06bc:	bf04      	itt	eq
 80a06be:	3501      	addeq	r5, #1
 80a06c0:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a06c2:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a06c6:	bf08      	it	eq
 80a06c8:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a06ca:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a06cc:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a06ce:	d9ba      	bls.n	80a0646 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a06d0:	2f40      	cmp	r7, #64	; 0x40
 80a06d2:	d907      	bls.n	80a06e4 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a06d4:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a06d8:	f1ba 0f00 	cmp.w	sl, #0
 80a06dc:	d112      	bne.n	80a0704 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a06de:	2301      	movs	r3, #1
 80a06e0:	74a3      	strb	r3, [r4, #18]
 80a06e2:	e00f      	b.n	80a0704 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a06e4:	2000      	movs	r0, #0
 80a06e6:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a06e8:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a06ea:	7460      	strb	r0, [r4, #17]
 80a06ec:	1de3      	adds	r3, r4, #7
 80a06ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a06f2:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a06f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a06f8:	42a3      	cmp	r3, r4
 80a06fa:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a06fe:	d1f9      	bne.n	80a06f4 <_ZN7OneWire6searchEPh+0xdc>
 80a0700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80a0704:	7a23      	ldrb	r3, [r4, #8]
 80a0706:	2b00      	cmp	r3, #0
 80a0708:	d0ec      	beq.n	80a06e4 <_ZN7OneWire6searchEPh+0xcc>
 80a070a:	2001      	movs	r0, #1
 80a070c:	e7ee      	b.n	80a06ec <_ZN7OneWire6searchEPh+0xd4>

080a070e <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a070e:	b530      	push	{r4, r5, lr}
 80a0710:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a0712:	2000      	movs	r0, #0

    while (len--) {
 80a0714:	3901      	subs	r1, #1
 80a0716:	b2c9      	uxtb	r1, r1
 80a0718:	29ff      	cmp	r1, #255	; 0xff
 80a071a:	d013      	beq.n	80a0744 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80a071c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0720:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a0722:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a0726:	f013 0f01 	tst.w	r3, #1
 80a072a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a072e:	bf1c      	itt	ne
 80a0730:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a0734:	b2d8      	uxtbne	r0, r3
 80a0736:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0738:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80a073c:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0740:	d1ef      	bne.n	80a0722 <_ZN7OneWire4crc8EPhh+0x14>
 80a0742:	e7e7      	b.n	80a0714 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80a0744:	bd30      	pop	{r4, r5, pc}

080a0746 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a0746:	f000 b821 	b.w	80a078c <HAL_Pin_Map>
	...

080a074c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <os_mutex_create+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601d0 	.word	0x080601d0

080a075c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <HAL_RNG_GetRandomNumber+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	685b      	ldr	r3, [r3, #4]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	0806019c 	.word	0x0806019c

080a076c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <HAL_Delay_Microseconds+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	68db      	ldr	r3, [r3, #12]
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	0806019c 	.word	0x0806019c

080a077c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	695b      	ldr	r3, [r3, #20]
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	0806019c 	.word	0x0806019c

080a078c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <HAL_Pin_Map+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	681b      	ldr	r3, [r3, #0]
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601b0 	.word	0x080601b0

080a079c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <HAL_Pin_Mode+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	689b      	ldr	r3, [r3, #8]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601b0 	.word	0x080601b0

080a07ac <HAL_GPIO_Read>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <HAL_GPIO_Read+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	695b      	ldr	r3, [r3, #20]
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601b0 	.word	0x080601b0

080a07bc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <HAL_Interrupts_Enable_All+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6a1b      	ldr	r3, [r3, #32]
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601b0 	.word	0x080601b0

080a07cc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <HAL_Interrupts_Disable_All+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601b0 	.word	0x080601b0

080a07dc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <HAL_I2C_Write_Data+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601ac 	.word	0x080601ac

080a07ec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <HAL_I2C_Available_Data+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601ac 	.word	0x080601ac

080a07fc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <HAL_I2C_Read_Data+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601ac 	.word	0x080601ac

080a080c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <HAL_I2C_Peek_Data+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601ac 	.word	0x080601ac

080a081c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <HAL_I2C_Flush_Data+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601ac 	.word	0x080601ac

080a082c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <HAL_I2C_Is_Enabled+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601ac 	.word	0x080601ac

080a083c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b03      	ldr	r3, [pc, #12]	; (80a084c <HAL_I2C_Init+0x10>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0846:	9301      	str	r3, [sp, #4]
 80a0848:	bd08      	pop	{r3, pc}
 80a084a:	0000      	.short	0x0000
 80a084c:	080601ac 	.word	0x080601ac

080a0850 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <HAL_SPI_Init+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	69db      	ldr	r3, [r3, #28]
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	080601b4 	.word	0x080601b4

080a0860 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <HAL_SPI_Is_Enabled+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	6a1b      	ldr	r3, [r3, #32]
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	080601b4 	.word	0x080601b4

080a0870 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <HAL_USART_Init+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	699b      	ldr	r3, [r3, #24]
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080601c4 	.word	0x080601c4

080a0880 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <HAL_USART_Write_Data+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080601c4 	.word	0x080601c4

080a0890 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <HAL_USART_Available_Data+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601c4 	.word	0x080601c4

080a08a0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <HAL_USART_Read_Data+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601c4 	.word	0x080601c4

080a08b0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <HAL_USART_Peek_Data+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601c4 	.word	0x080601c4

080a08c0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b02      	ldr	r3, [pc, #8]	; (80a08cc <HAL_USART_Flush_Data+0xc>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08c8:	9301      	str	r3, [sp, #4]
 80a08ca:	bd08      	pop	{r3, pc}
 80a08cc:	080601c4 	.word	0x080601c4

080a08d0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b02      	ldr	r3, [pc, #8]	; (80a08dc <HAL_USART_Is_Enabled+0xc>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a08d8:	9301      	str	r3, [sp, #4]
 80a08da:	bd08      	pop	{r3, pc}
 80a08dc:	080601c4 	.word	0x080601c4

080a08e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a08e0:	b508      	push	{r3, lr}
 80a08e2:	4b02      	ldr	r3, [pc, #8]	; (80a08ec <HAL_USART_Available_Data_For_Write+0xc>)
 80a08e4:	681b      	ldr	r3, [r3, #0]
 80a08e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08e8:	9301      	str	r3, [sp, #4]
 80a08ea:	bd08      	pop	{r3, pc}
 80a08ec:	080601c4 	.word	0x080601c4

080a08f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a08f0:	b508      	push	{r3, lr}
 80a08f2:	4b02      	ldr	r3, [pc, #8]	; (80a08fc <HAL_USB_USART_Init+0xc>)
 80a08f4:	681b      	ldr	r3, [r3, #0]
 80a08f6:	681b      	ldr	r3, [r3, #0]
 80a08f8:	9301      	str	r3, [sp, #4]
 80a08fa:	bd08      	pop	{r3, pc}
 80a08fc:	080601d8 	.word	0x080601d8

080a0900 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0900:	b508      	push	{r3, lr}
 80a0902:	4b02      	ldr	r3, [pc, #8]	; (80a090c <HAL_USB_USART_Available_Data+0xc>)
 80a0904:	681b      	ldr	r3, [r3, #0]
 80a0906:	691b      	ldr	r3, [r3, #16]
 80a0908:	9301      	str	r3, [sp, #4]
 80a090a:	bd08      	pop	{r3, pc}
 80a090c:	080601d8 	.word	0x080601d8

080a0910 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0910:	b508      	push	{r3, lr}
 80a0912:	4b02      	ldr	r3, [pc, #8]	; (80a091c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0914:	681b      	ldr	r3, [r3, #0]
 80a0916:	695b      	ldr	r3, [r3, #20]
 80a0918:	9301      	str	r3, [sp, #4]
 80a091a:	bd08      	pop	{r3, pc}
 80a091c:	080601d8 	.word	0x080601d8

080a0920 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <HAL_USB_USART_Receive_Data+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	699b      	ldr	r3, [r3, #24]
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	080601d8 	.word	0x080601d8

080a0930 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <HAL_USB_USART_Send_Data+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	69db      	ldr	r3, [r3, #28]
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	080601d8 	.word	0x080601d8

080a0940 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <HAL_USB_USART_Flush_Data+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	6a1b      	ldr	r3, [r3, #32]
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	080601d8 	.word	0x080601d8

080a0950 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <inet_gethostbyname+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	080601c0 	.word	0x080601c0

080a0960 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <set_system_mode+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	685b      	ldr	r3, [r3, #4]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601a4 	.word	0x080601a4

080a0970 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <system_delay_ms+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	695b      	ldr	r3, [r3, #20]
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601a4 	.word	0x080601a4

080a0980 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <application_thread_current+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601a4 	.word	0x080601a4

080a0990 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <application_thread_invoke+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601a4 	.word	0x080601a4

080a09a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b03      	ldr	r3, [pc, #12]	; (80a09b0 <system_ctrl_set_app_request_handler+0x10>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a09aa:	9301      	str	r3, [sp, #4]
 80a09ac:	bd08      	pop	{r3, pc}
 80a09ae:	0000      	.short	0x0000
 80a09b0:	080601a4 	.word	0x080601a4

080a09b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b03      	ldr	r3, [pc, #12]	; (80a09c4 <system_ctrl_set_result+0x10>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a09be:	9301      	str	r3, [sp, #4]
 80a09c0:	bd08      	pop	{r3, pc}
 80a09c2:	0000      	.short	0x0000
 80a09c4:	080601a4 	.word	0x080601a4

080a09c8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <spark_variable+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	681b      	ldr	r3, [r3, #0]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601cc 	.word	0x080601cc

080a09d8 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <spark_process+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	689b      	ldr	r3, [r3, #8]
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601cc 	.word	0x080601cc

080a09e8 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <spark_send_event+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	6a1b      	ldr	r3, [r3, #32]
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601cc 	.word	0x080601cc

080a09f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601cc 	.word	0x080601cc

080a0a08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <network_connect+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	685b      	ldr	r3, [r3, #4]
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	080601c8 	.word	0x080601c8

080a0a18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <network_connecting+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	689b      	ldr	r3, [r3, #8]
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	080601c8 	.word	0x080601c8

080a0a28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <network_disconnect+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	68db      	ldr	r3, [r3, #12]
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601c8 	.word	0x080601c8

080a0a38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <network_ready+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	691b      	ldr	r3, [r3, #16]
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601c8 	.word	0x080601c8

080a0a48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <network_on+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	695b      	ldr	r3, [r3, #20]
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601c8 	.word	0x080601c8

080a0a58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <network_off+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	699b      	ldr	r3, [r3, #24]
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601c8 	.word	0x080601c8

080a0a68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <network_listen+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	69db      	ldr	r3, [r3, #28]
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601c8 	.word	0x080601c8

080a0a78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <network_listening+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	6a1b      	ldr	r3, [r3, #32]
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	080601c8 	.word	0x080601c8

080a0a88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <network_set_listen_timeout+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601c8 	.word	0x080601c8

080a0a98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <network_get_listen_timeout+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601c8 	.word	0x080601c8

080a0aa8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <malloc+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	681b      	ldr	r3, [r3, #0]
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601a0 	.word	0x080601a0

080a0ab8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <free+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	685b      	ldr	r3, [r3, #4]
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601a0 	.word	0x080601a0

080a0ac8 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <snprintf+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	69db      	ldr	r3, [r3, #28]
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601a0 	.word	0x080601a0

080a0ad8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <abort+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601a0 	.word	0x080601a0

080a0ae8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <_malloc_r+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601a0 	.word	0x080601a0

080a0af8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0af8:	2100      	movs	r1, #0
 80a0afa:	f7ff bf39 	b.w	80a0970 <system_delay_ms>

080a0afe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0afe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0b00:	6883      	ldr	r3, [r0, #8]
 80a0b02:	4604      	mov	r4, r0
 80a0b04:	b90b      	cbnz	r3, 80a0b0a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0b06:	f000 ff2c 	bl	80a1962 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0b0a:	68c3      	ldr	r3, [r0, #12]
 80a0b0c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0b0e:	68a3      	ldr	r3, [r4, #8]
 80a0b10:	b11b      	cbz	r3, 80a0b1a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0b12:	2203      	movs	r2, #3
 80a0b14:	4621      	mov	r1, r4
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0b1a:	4620      	mov	r0, r4
}
 80a0b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0b20:	f7ff babd 	b.w	80a009e <_ZdlPv>

080a0b24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0b24:	4770      	bx	lr

080a0b26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0b26:	2000      	movs	r0, #0
 80a0b28:	4770      	bx	lr

080a0b2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0b2a:	b510      	push	{r4, lr}
 80a0b2c:	4604      	mov	r4, r0
 80a0b2e:	f7ff fab6 	bl	80a009e <_ZdlPv>
 80a0b32:	4620      	mov	r0, r4
 80a0b34:	bd10      	pop	{r4, pc}

080a0b36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0b36:	b508      	push	{r3, lr}
      { delete this; }
 80a0b38:	b108      	cbz	r0, 80a0b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0b3a:	f7ff fff6 	bl	80a0b2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0b3e:	bd08      	pop	{r3, pc}

080a0b40 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b40:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0b42:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b44:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0b46:	b113      	cbz	r3, 80a0b4e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0b48:	2203      	movs	r2, #3
 80a0b4a:	4601      	mov	r1, r0
 80a0b4c:	4798      	blx	r3
    }
 80a0b4e:	4620      	mov	r0, r4
 80a0b50:	bd10      	pop	{r4, pc}

080a0b52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0b52:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0b54:	68c4      	ldr	r4, [r0, #12]
 80a0b56:	b1d4      	cbz	r4, 80a0b8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0b58:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0b5a:	2b02      	cmp	r3, #2
 80a0b5c:	d102      	bne.n	80a0b64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0b5e:	68e0      	ldr	r0, [r4, #12]
 80a0b60:	f7ff ffaa 	bl	80a0ab8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0b64:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0b66:	b12d      	cbz	r5, 80a0b74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b68:	4628      	mov	r0, r5
 80a0b6a:	f7ff ffe9 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>
 80a0b6e:	4628      	mov	r0, r5
 80a0b70:	f7ff fa95 	bl	80a009e <_ZdlPv>
 80a0b74:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0b76:	b12d      	cbz	r5, 80a0b84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a0b78:	4628      	mov	r0, r5
 80a0b7a:	f7ff ffe1 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>
 80a0b7e:	4628      	mov	r0, r5
 80a0b80:	f7ff fa8d 	bl	80a009e <_ZdlPv>
 80a0b84:	4620      	mov	r0, r4
 80a0b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0b8a:	f7ff ba88 	b.w	80a009e <_ZdlPv>
 80a0b8e:	bd38      	pop	{r3, r4, r5, pc}

080a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0b90:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0b92:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0b94:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0b96:	b17c      	cbz	r4, 80a0bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0b98:	6863      	ldr	r3, [r4, #4]
 80a0b9a:	3b01      	subs	r3, #1
 80a0b9c:	6063      	str	r3, [r4, #4]
 80a0b9e:	b95b      	cbnz	r3, 80a0bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0ba0:	6823      	ldr	r3, [r4, #0]
 80a0ba2:	4620      	mov	r0, r4
 80a0ba4:	689b      	ldr	r3, [r3, #8]
 80a0ba6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0ba8:	68a3      	ldr	r3, [r4, #8]
 80a0baa:	3b01      	subs	r3, #1
 80a0bac:	60a3      	str	r3, [r4, #8]
 80a0bae:	b91b      	cbnz	r3, 80a0bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0bb0:	6823      	ldr	r3, [r4, #0]
 80a0bb2:	4620      	mov	r0, r4
 80a0bb4:	68db      	ldr	r3, [r3, #12]
 80a0bb6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0bb8:	4628      	mov	r0, r5
 80a0bba:	bd38      	pop	{r3, r4, r5, pc}

080a0bbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0bbc:	b513      	push	{r0, r1, r4, lr}
 80a0bbe:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0bc0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0bc4:	2300      	movs	r3, #0
 80a0bc6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0bc8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0bca:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0bcc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bce:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0bd0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0bd2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bd4:	f7ff ffdc 	bl	80a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	b002      	add	sp, #8
 80a0bdc:	bd10      	pop	{r4, pc}

080a0bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0bde:	680b      	ldr	r3, [r1, #0]
 80a0be0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0be2:	b113      	cbz	r3, 80a0bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0be4:	685a      	ldr	r2, [r3, #4]
 80a0be6:	3201      	adds	r2, #1
 80a0be8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0bea:	4770      	bx	lr

080a0bec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0bee:	460c      	mov	r4, r1
 80a0bf0:	4606      	mov	r6, r0
 80a0bf2:	460f      	mov	r7, r1
 80a0bf4:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0bf8:	ad02      	add	r5, sp, #8
 80a0bfa:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0bfe:	4621      	mov	r1, r4
 80a0c00:	a801      	add	r0, sp, #4
 80a0c02:	f7ff ffec 	bl	80a0bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0c06:	4629      	mov	r1, r5
 80a0c08:	4630      	mov	r0, r6
 80a0c0a:	f7ff ffd7 	bl	80a0bbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0c0e:	a801      	add	r0, sp, #4
 80a0c10:	f7ff ffbe 	bl	80a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	f7ff ffbb 	bl	80a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0c1a:	4638      	mov	r0, r7
 80a0c1c:	f7ff fa3f 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a0c20:	4630      	mov	r0, r6
 80a0c22:	b003      	add	sp, #12
 80a0c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c26 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0c26:	b513      	push	{r0, r1, r4, lr}
 80a0c28:	460b      	mov	r3, r1
 80a0c2a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0c2c:	c803      	ldmia	r0, {r0, r1}
 80a0c2e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0c32:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0c36:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c3a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0c3e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0c42:	b002      	add	sp, #8
 80a0c44:	bd10      	pop	{r4, pc}

080a0c46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c46:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0c48:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c4a:	b90a      	cbnz	r2, 80a0c50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0c4c:	f000 fe89 	bl	80a1962 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c50:	68c3      	ldr	r3, [r0, #12]
    }
 80a0c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c56:	4718      	bx	r3

080a0c58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0c58:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c5a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0c5c:	f100 0110 	add.w	r1, r0, #16
 80a0c60:	f7ff fff1 	bl	80a0c46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0c64:	bd08      	pop	{r3, pc}

080a0c66 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c66:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0c68:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c6a:	b90a      	cbnz	r2, 80a0c70 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0c6c:	f000 fe79 	bl	80a1962 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c70:	68c3      	ldr	r3, [r0, #12]
    }
 80a0c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c76:	4718      	bx	r3

080a0c78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0c78:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c7a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0c7c:	f100 0110 	add.w	r1, r0, #16
 80a0c80:	f7ff fff1 	bl	80a0c66 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0c84:	bd08      	pop	{r3, pc}

080a0c86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c86:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c88:	2300      	movs	r3, #0
 80a0c8a:	6083      	str	r3, [r0, #8]
 80a0c8c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c8e:	4604      	mov	r4, r0
 80a0c90:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0c92:	b12b      	cbz	r3, 80a0ca0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0c94:	2202      	movs	r2, #2
 80a0c96:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0c98:	68eb      	ldr	r3, [r5, #12]
 80a0c9a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0c9c:	68ab      	ldr	r3, [r5, #8]
 80a0c9e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0ca0:	4620      	mov	r0, r4
 80a0ca2:	bd38      	pop	{r3, r4, r5, pc}

080a0ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ca8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0cac:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0cae:	f04f 0002 	mov.w	r0, #2
 80a0cb2:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0cb4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cb8:	808b      	strh	r3, [r1, #4]
 80a0cba:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0cbc:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0cbe:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cc2:	600b      	str	r3, [r1, #0]
 80a0cc4:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a0cc8:	4299      	cmp	r1, r3
 80a0cca:	d103      	bne.n	80a0cd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a0ccc:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a0cd0:	2d00      	cmp	r5, #0
 80a0cd2:	d1f7      	bne.n	80a0cc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0cd4:	d002      	beq.n	80a0cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a0cd6:	f88d 1000 	strb.w	r1, [sp]
 80a0cda:	e06b      	b.n	80a0db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0cdc:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ce0:	bf1c      	itt	ne
 80a0ce2:	60e7      	strne	r7, [r4, #12]
 80a0ce4:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0ce6:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cea:	bf18      	it	ne
 80a0cec:	461f      	movne	r7, r3
 80a0cee:	2301      	movs	r3, #1
 80a0cf0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0cf2:	f3bf 8f5f 	dmb	sy
 80a0cf6:	f104 0308 	add.w	r3, r4, #8
 80a0cfa:	2000      	movs	r0, #0
 80a0cfc:	e853 6f00 	ldrex	r6, [r3]
 80a0d00:	e843 0200 	strex	r2, r0, [r3]
 80a0d04:	2a00      	cmp	r2, #0
 80a0d06:	d1f9      	bne.n	80a0cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a0d08:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0d0c:	2e00      	cmp	r6, #0
 80a0d0e:	d051      	beq.n	80a0db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0d10:	f7ff fe36 	bl	80a0980 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0d14:	b120      	cbz	r0, 80a0d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0d16:	4629      	mov	r1, r5
 80a0d18:	4630      	mov	r0, r6
 80a0d1a:	f7ff ff94 	bl	80a0c46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0d1e:	e043      	b.n	80a0da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0d20:	4631      	mov	r1, r6
 80a0d22:	4668      	mov	r0, sp
 80a0d24:	f7ff ffaf 	bl	80a0c86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0d28:	68e0      	ldr	r0, [r4, #12]
 80a0d2a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0d2e:	b108      	cbz	r0, 80a0d34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a0d30:	f001 fe24 	bl	80a297c <strdup>
 80a0d34:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0d36:	2010      	movs	r0, #16
 80a0d38:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a0d3c:	f7ff f9ad 	bl	80a009a <_Znwj>
 80a0d40:	4605      	mov	r5, r0
 80a0d42:	b330      	cbz	r0, 80a0d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d44:	f04f 0800 	mov.w	r8, #0
 80a0d48:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d4c:	2018      	movs	r0, #24
 80a0d4e:	f7ff f9a4 	bl	80a009a <_Znwj>
 80a0d52:	4604      	mov	r4, r0
 80a0d54:	b1c0      	cbz	r0, 80a0d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d56:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0d5a:	4601      	mov	r1, r0
 80a0d5c:	4668      	mov	r0, sp
 80a0d5e:	f7ff ff62 	bl	80a0c26 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d62:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a0d64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d66:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d68:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0d6a:	9202      	str	r2, [sp, #8]
 80a0d6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d6e:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a0d74:	9203      	str	r2, [sp, #12]
 80a0d76:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d78:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0d7c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d80:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d82:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d86:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d88:	4b0d      	ldr	r3, [pc, #52]	; (80a0dc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d8a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0d8e:	4b0d      	ldr	r3, [pc, #52]	; (80a0dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a0d90:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0d92:	9804      	ldr	r0, [sp, #16]
 80a0d94:	f7ff fe90 	bl	80a0ab8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d98:	4668      	mov	r0, sp
 80a0d9a:	f7ff fed1 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0d9e:	2200      	movs	r2, #0
 80a0da0:	4629      	mov	r1, r5
 80a0da2:	4809      	ldr	r0, [pc, #36]	; (80a0dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a0da4:	f7ff fdf4 	bl	80a0990 <application_thread_invoke>
 80a0da8:	4630      	mov	r0, r6
 80a0daa:	f7ff fec9 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0dae:	4630      	mov	r0, r6
 80a0db0:	f7ff f975 	bl	80a009e <_ZdlPv>
 80a0db4:	4638      	mov	r0, r7
 80a0db6:	f7ff fe7f 	bl	80a0ab8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a0dba:	b006      	add	sp, #24
 80a0dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0dc0:	080a0c59 	.word	0x080a0c59
 80a0dc4:	080a0eb5 	.word	0x080a0eb5
 80a0dc8:	080a0aff 	.word	0x080a0aff

080a0dcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0dd0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0dd2:	ad07      	add	r5, sp, #28
 80a0dd4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0dd8:	4606      	mov	r6, r0
 80a0dda:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0ddc:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0dde:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0de0:	460f      	mov	r7, r1
 80a0de2:	4690      	mov	r8, r2
 80a0de4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0de8:	f8c5 b004 	str.w	fp, [r5, #4]
 80a0dec:	f8c5 b008 	str.w	fp, [r5, #8]
 80a0df0:	9307      	str	r3, [sp, #28]
 80a0df2:	f7ff f952 	bl	80a009a <_Znwj>
 80a0df6:	4604      	mov	r4, r0
 80a0df8:	b138      	cbz	r0, 80a0e0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0dfa:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0dfe:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0e02:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0e06:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e0a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e0c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0e0e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e10:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e12:	f7ff f942 	bl	80a009a <_Znwj>
 80a0e16:	b128      	cbz	r0, 80a0e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0e18:	2301      	movs	r3, #1
 80a0e1a:	6043      	str	r3, [r0, #4]
 80a0e1c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0e1e:	4b23      	ldr	r3, [pc, #140]	; (80a0eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a0e20:	60c4      	str	r4, [r0, #12]
 80a0e22:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0e24:	4b22      	ldr	r3, [pc, #136]	; (80a0eb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e26:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0e28:	2008      	movs	r0, #8
 80a0e2a:	9308      	str	r3, [sp, #32]
 80a0e2c:	f7ff f935 	bl	80a009a <_Znwj>
 80a0e30:	4604      	mov	r4, r0
 80a0e32:	b128      	cbz	r0, 80a0e40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0e34:	9b03      	ldr	r3, [sp, #12]
 80a0e36:	a904      	add	r1, sp, #16
 80a0e38:	f840 3b04 	str.w	r3, [r0], #4
 80a0e3c:	f7ff fecf 	bl	80a0bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0e40:	9500      	str	r5, [sp, #0]
 80a0e42:	fa5f f38a 	uxtb.w	r3, sl
 80a0e46:	464a      	mov	r2, r9
 80a0e48:	4641      	mov	r1, r8
 80a0e4a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0e4c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0e4e:	f7ff fdcb 	bl	80a09e8 <spark_send_event>
 80a0e52:	b9b8      	cbnz	r0, 80a0e84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0e54:	9b03      	ldr	r3, [sp, #12]
 80a0e56:	785b      	ldrb	r3, [r3, #1]
 80a0e58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0e5c:	b993      	cbnz	r3, 80a0e84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0e5e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0e62:	a905      	add	r1, sp, #20
 80a0e64:	a803      	add	r0, sp, #12
 80a0e66:	9205      	str	r2, [sp, #20]
 80a0e68:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0e6c:	f7ff ff1a 	bl	80a0ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0e70:	9805      	ldr	r0, [sp, #20]
 80a0e72:	f7ff fe21 	bl	80a0ab8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0e76:	a805      	add	r0, sp, #20
 80a0e78:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0e7a:	f7ff feb7 	bl	80a0bec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0e7e:	a806      	add	r0, sp, #24
 80a0e80:	f7ff fe86 	bl	80a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0e84:	9b03      	ldr	r3, [sp, #12]
 80a0e86:	a904      	add	r1, sp, #16
 80a0e88:	a806      	add	r0, sp, #24
 80a0e8a:	9305      	str	r3, [sp, #20]
 80a0e8c:	f7ff fea7 	bl	80a0bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0e90:	a905      	add	r1, sp, #20
 80a0e92:	4630      	mov	r0, r6
 80a0e94:	f7ff fe92 	bl	80a0bbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0e98:	a806      	add	r0, sp, #24
 80a0e9a:	f7ff fe79 	bl	80a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e9e:	a804      	add	r0, sp, #16
 80a0ea0:	f7ff fe76 	bl	80a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0ea4:	4630      	mov	r0, r6
 80a0ea6:	b00b      	add	sp, #44	; 0x2c
 80a0ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0eac:	080a2a14 	.word	0x080a2a14
 80a0eb0:	080a101d 	.word	0x080a101d

080a0eb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0eb4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0eb8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0eba:	d006      	beq.n	80a0eca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0ebc:	2a03      	cmp	r2, #3
 80a0ebe:	d017      	beq.n	80a0ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0ec0:	2a01      	cmp	r2, #1
 80a0ec2:	d120      	bne.n	80a0f06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0ec4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0ec6:	6003      	str	r3, [r0, #0]
	      break;
 80a0ec8:	e01d      	b.n	80a0f06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0eca:	2018      	movs	r0, #24
 80a0ecc:	680e      	ldr	r6, [r1, #0]
 80a0ece:	f7ff f8e4 	bl	80a009a <_Znwj>
 80a0ed2:	4605      	mov	r5, r0
 80a0ed4:	b150      	cbz	r0, 80a0eec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0ed6:	4631      	mov	r1, r6
 80a0ed8:	f7ff fed5 	bl	80a0c86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0edc:	6930      	ldr	r0, [r6, #16]
 80a0ede:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0ee2:	b108      	cbz	r0, 80a0ee8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0ee4:	f001 fd4a 	bl	80a297c <strdup>
 80a0ee8:	6128      	str	r0, [r5, #16]
 80a0eea:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0eec:	6025      	str	r5, [r4, #0]
 80a0eee:	e00a      	b.n	80a0f06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0ef0:	6804      	ldr	r4, [r0, #0]
 80a0ef2:	b144      	cbz	r4, 80a0f06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0ef4:	6920      	ldr	r0, [r4, #16]
 80a0ef6:	f7ff fddf 	bl	80a0ab8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	f7ff fe20 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0f00:	4620      	mov	r0, r4
 80a0f02:	f7ff f8cc 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0f06:	2000      	movs	r0, #0
 80a0f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f0a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0f0a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f0c:	2300      	movs	r3, #0
 80a0f0e:	6083      	str	r3, [r0, #8]
 80a0f10:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0f12:	4604      	mov	r4, r0
 80a0f14:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0f16:	b12b      	cbz	r3, 80a0f24 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0f18:	2202      	movs	r2, #2
 80a0f1a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0f1c:	68eb      	ldr	r3, [r5, #12]
 80a0f1e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0f20:	68ab      	ldr	r3, [r5, #8]
 80a0f22:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	bd38      	pop	{r3, r4, r5, pc}

080a0f28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0f28:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0f2a:	b570      	push	{r4, r5, r6, lr}
 80a0f2c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0f2e:	d006      	beq.n	80a0f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0f30:	2a03      	cmp	r2, #3
 80a0f32:	d011      	beq.n	80a0f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0f34:	2a01      	cmp	r2, #1
 80a0f36:	d117      	bne.n	80a0f68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0f38:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0f3a:	6003      	str	r3, [r0, #0]
	      break;
 80a0f3c:	e014      	b.n	80a0f68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0f3e:	2014      	movs	r0, #20
 80a0f40:	680e      	ldr	r6, [r1, #0]
 80a0f42:	f7ff f8aa 	bl	80a009a <_Znwj>
 80a0f46:	4605      	mov	r5, r0
 80a0f48:	b120      	cbz	r0, 80a0f54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0f4a:	4631      	mov	r1, r6
 80a0f4c:	f7ff ffdd 	bl	80a0f0a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0f50:	7c33      	ldrb	r3, [r6, #16]
 80a0f52:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0f54:	6025      	str	r5, [r4, #0]
 80a0f56:	e007      	b.n	80a0f68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0f58:	6804      	ldr	r4, [r0, #0]
 80a0f5a:	b12c      	cbz	r4, 80a0f68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f5c:	4620      	mov	r0, r4
 80a0f5e:	f7ff fdef 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	f7ff f89b 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0f68:	2000      	movs	r0, #0
 80a0f6a:	bd70      	pop	{r4, r5, r6, pc}

080a0f6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f6e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0f70:	f3bf 8f5f 	dmb	sy
 80a0f74:	b087      	sub	sp, #28
 80a0f76:	2300      	movs	r3, #0
 80a0f78:	e850 6f00 	ldrex	r6, [r0]
 80a0f7c:	e840 3200 	strex	r2, r3, [r0]
 80a0f80:	2a00      	cmp	r2, #0
 80a0f82:	d1f9      	bne.n	80a0f78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0f84:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0f88:	2e00      	cmp	r6, #0
 80a0f8a:	d03e      	beq.n	80a100a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0f8c:	4618      	mov	r0, r3
 80a0f8e:	f7ff fcf7 	bl	80a0980 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0f92:	4607      	mov	r7, r0
 80a0f94:	b120      	cbz	r0, 80a0fa0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f96:	4621      	mov	r1, r4
 80a0f98:	4630      	mov	r0, r6
 80a0f9a:	f7ff fe64 	bl	80a0c66 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0f9e:	e02e      	b.n	80a0ffe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0fa0:	4631      	mov	r1, r6
 80a0fa2:	a801      	add	r0, sp, #4
 80a0fa4:	f7ff ffb1 	bl	80a0f0a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0fa8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0faa:	2010      	movs	r0, #16
 80a0fac:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0fb0:	f7ff f873 	bl	80a009a <_Znwj>
 80a0fb4:	4605      	mov	r5, r0
 80a0fb6:	b1d0      	cbz	r0, 80a0fee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0fb8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0fba:	2014      	movs	r0, #20
 80a0fbc:	f7ff f86d 	bl	80a009a <_Znwj>
 80a0fc0:	4604      	mov	r4, r0
 80a0fc2:	b178      	cbz	r0, 80a0fe4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0fc4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0fc6:	4601      	mov	r1, r0
 80a0fc8:	a801      	add	r0, sp, #4
 80a0fca:	f7ff fe2c 	bl	80a0c26 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0fce:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0fd0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0fd2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0fd4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0fd6:	9203      	str	r2, [sp, #12]
 80a0fd8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0fda:	60e3      	str	r3, [r4, #12]
 80a0fdc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0fe0:	9204      	str	r2, [sp, #16]
 80a0fe2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fe4:	4b0a      	ldr	r3, [pc, #40]	; (80a1010 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0fe6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0fe8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0fea:	4b0a      	ldr	r3, [pc, #40]	; (80a1014 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0fec:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0fee:	a801      	add	r0, sp, #4
 80a0ff0:	f7ff fda6 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0ff4:	2200      	movs	r2, #0
 80a0ff6:	4629      	mov	r1, r5
 80a0ff8:	4807      	ldr	r0, [pc, #28]	; (80a1018 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0ffa:	f7ff fcc9 	bl	80a0990 <application_thread_invoke>
 80a0ffe:	4630      	mov	r0, r6
 80a1000:	f7ff fd9e 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1004:	4630      	mov	r0, r6
 80a1006:	f7ff f84a 	bl	80a009e <_ZdlPv>
        }
    }
 80a100a:	b007      	add	sp, #28
 80a100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a100e:	bf00      	nop
 80a1010:	080a0c79 	.word	0x080a0c79
 80a1014:	080a0f29 	.word	0x080a0f29
 80a1018:	080a0aff 	.word	0x080a0aff

080a101c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a101c:	b530      	push	{r4, r5, lr}
 80a101e:	4604      	mov	r4, r0
 80a1020:	b085      	sub	sp, #20
 80a1022:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1024:	4668      	mov	r0, sp
 80a1026:	4611      	mov	r1, r2
 80a1028:	f7ff fde0 	bl	80a0bec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a102c:	b17c      	cbz	r4, 80a104e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a102e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1030:	4628      	mov	r0, r5
 80a1032:	b10d      	cbz	r5, 80a1038 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1034:	f001 fca2 	bl	80a297c <strdup>
 80a1038:	9002      	str	r0, [sp, #8]
 80a103a:	a902      	add	r1, sp, #8
 80a103c:	4668      	mov	r0, sp
 80a103e:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1042:	f7ff fe2f 	bl	80a0ca4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1046:	9802      	ldr	r0, [sp, #8]
 80a1048:	f7ff fd36 	bl	80a0ab8 <free>
 80a104c:	e01d      	b.n	80a108a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a104e:	f04f 0201 	mov.w	r2, #1
 80a1052:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1054:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1058:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a105c:	42a3      	cmp	r3, r4
 80a105e:	d103      	bne.n	80a1068 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1060:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1064:	2900      	cmp	r1, #0
 80a1066:	d1f7      	bne.n	80a1058 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1068:	d002      	beq.n	80a1070 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a106a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a106e:	e00c      	b.n	80a108a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1070:	f110 010c 	adds.w	r1, r0, #12
 80a1074:	f04f 0301 	mov.w	r3, #1
 80a1078:	bf18      	it	ne
 80a107a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a107c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1080:	3004      	adds	r0, #4
 80a1082:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1086:	f7ff ff71 	bl	80a0f6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a108a:	a801      	add	r0, sp, #4
 80a108c:	f7ff fd80 	bl	80a0b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1090:	b005      	add	sp, #20
 80a1092:	bd30      	pop	{r4, r5, pc}

080a1094 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1094:	4770      	bx	lr

080a1096 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1098:	4606      	mov	r6, r0
 80a109a:	4615      	mov	r5, r2
 80a109c:	460c      	mov	r4, r1
 80a109e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10a0:	42bc      	cmp	r4, r7
 80a10a2:	d006      	beq.n	80a10b2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a10a4:	6833      	ldr	r3, [r6, #0]
 80a10a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a10aa:	689b      	ldr	r3, [r3, #8]
 80a10ac:	4630      	mov	r0, r6
 80a10ae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10b0:	e7f6      	b.n	80a10a0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a10b2:	4628      	mov	r0, r5
 80a10b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10b6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a10b6:	2200      	movs	r2, #0
 80a10b8:	7c00      	ldrb	r0, [r0, #16]
 80a10ba:	f7ff bb8f 	b.w	80a07dc <HAL_I2C_Write_Data>

080a10be <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a10be:	2100      	movs	r1, #0
 80a10c0:	7c00      	ldrb	r0, [r0, #16]
 80a10c2:	f7ff bb93 	b.w	80a07ec <HAL_I2C_Available_Data>

080a10c6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a10c6:	2100      	movs	r1, #0
 80a10c8:	7c00      	ldrb	r0, [r0, #16]
 80a10ca:	f7ff bb97 	b.w	80a07fc <HAL_I2C_Read_Data>

080a10ce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a10ce:	2100      	movs	r1, #0
 80a10d0:	7c00      	ldrb	r0, [r0, #16]
 80a10d2:	f7ff bb9b 	b.w	80a080c <HAL_I2C_Peek_Data>

080a10d6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a10d6:	2100      	movs	r1, #0
 80a10d8:	7c00      	ldrb	r0, [r0, #16]
 80a10da:	f7ff bb9f 	b.w	80a081c <HAL_I2C_Flush_Data>

080a10de <_ZN7TwoWireD0Ev>:
 80a10de:	b510      	push	{r4, lr}
 80a10e0:	4604      	mov	r4, r0
 80a10e2:	f7fe ffdc 	bl	80a009e <_ZdlPv>
 80a10e6:	4620      	mov	r0, r4
 80a10e8:	bd10      	pop	{r4, pc}
	...

080a10ec <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a10ec:	b510      	push	{r4, lr}
 80a10ee:	4604      	mov	r4, r0
 80a10f0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a10f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a10f6:	60a3      	str	r3, [r4, #8]
 80a10f8:	4b04      	ldr	r3, [pc, #16]	; (80a110c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a10fa:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a10fc:	7420      	strb	r0, [r4, #16]
 80a10fe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1100:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1102:	f7ff fb9b 	bl	80a083c <HAL_I2C_Init>

}
 80a1106:	4620      	mov	r0, r4
 80a1108:	bd10      	pop	{r4, pc}
 80a110a:	bf00      	nop
 80a110c:	080a2a30 	.word	0x080a2a30

080a1110 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1110:	2100      	movs	r1, #0
 80a1112:	7c00      	ldrb	r0, [r0, #16]
 80a1114:	f7ff bb8a 	b.w	80a082c <HAL_I2C_Is_Enabled>

080a1118 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a1118:	f7ff bb58 	b.w	80a07cc <HAL_Interrupts_Disable_All>

080a111c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a111c:	f7ff bb4e 	b.w	80a07bc <HAL_Interrupts_Enable_All>

080a1120 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1120:	4770      	bx	lr

080a1122 <_ZN9IPAddressD0Ev>:
 80a1122:	b510      	push	{r4, lr}
 80a1124:	4604      	mov	r4, r0
 80a1126:	f7fe ffba 	bl	80a009e <_ZdlPv>
 80a112a:	4620      	mov	r0, r4
 80a112c:	bd10      	pop	{r4, pc}

080a112e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a112e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1130:	460f      	mov	r7, r1
 80a1132:	f100 0608 	add.w	r6, r0, #8
 80a1136:	1d05      	adds	r5, r0, #4
 80a1138:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a113a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a113e:	220a      	movs	r2, #10
 80a1140:	4638      	mov	r0, r7
 80a1142:	f000 f910 	bl	80a1366 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1146:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1148:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a114a:	d007      	beq.n	80a115c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a114c:	2c00      	cmp	r4, #0
 80a114e:	d0f4      	beq.n	80a113a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1150:	212e      	movs	r1, #46	; 0x2e
 80a1152:	4638      	mov	r0, r7
 80a1154:	f000 f8da 	bl	80a130c <_ZN5Print5printEc>
 80a1158:	4404      	add	r4, r0
 80a115a:	e7ee      	b.n	80a113a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a115c:	4620      	mov	r0, r4
 80a115e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1160 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1160:	b510      	push	{r4, lr}
 80a1162:	4604      	mov	r4, r0
 80a1164:	4b04      	ldr	r3, [pc, #16]	; (80a1178 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1166:	2211      	movs	r2, #17
 80a1168:	f840 3b04 	str.w	r3, [r0], #4
 80a116c:	2100      	movs	r1, #0
 80a116e:	f001 fbd4 	bl	80a291a <memset>
{
    clear();
}
 80a1172:	4620      	mov	r0, r4
 80a1174:	bd10      	pop	{r4, pc}
 80a1176:	bf00      	nop
 80a1178:	080a2a58 	.word	0x080a2a58

080a117c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a117c:	4603      	mov	r3, r0
 80a117e:	4a07      	ldr	r2, [pc, #28]	; (80a119c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1180:	b510      	push	{r4, lr}
 80a1182:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1186:	f101 0210 	add.w	r2, r1, #16
 80a118a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a118e:	4291      	cmp	r1, r2
 80a1190:	f843 4b04 	str.w	r4, [r3], #4
 80a1194:	d1f9      	bne.n	80a118a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1196:	780a      	ldrb	r2, [r1, #0]
 80a1198:	701a      	strb	r2, [r3, #0]
}
 80a119a:	bd10      	pop	{r4, pc}
 80a119c:	080a2a58 	.word	0x080a2a58

080a11a0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a11a0:	4a02      	ldr	r2, [pc, #8]	; (80a11ac <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a11a2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a11a4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a11a6:	2204      	movs	r2, #4
 80a11a8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a11aa:	4770      	bx	lr
 80a11ac:	080a2a58 	.word	0x080a2a58

080a11b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a11b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a11b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a11b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a11ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a11be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a11c2:	2304      	movs	r3, #4
 80a11c4:	6041      	str	r1, [r0, #4]
 80a11c6:	7503      	strb	r3, [r0, #20]
 80a11c8:	bd10      	pop	{r4, pc}
	...

080a11cc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a11cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a11ce:	4d04      	ldr	r5, [pc, #16]	; (80a11e0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a11d0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a11d2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a11d6:	9500      	str	r5, [sp, #0]
 80a11d8:	f7ff ffea 	bl	80a11b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a11dc:	b003      	add	sp, #12
 80a11de:	bd30      	pop	{r4, r5, pc}
 80a11e0:	080a2a58 	.word	0x080a2a58

080a11e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a11e4:	4a01      	ldr	r2, [pc, #4]	; (80a11ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a11e6:	4b02      	ldr	r3, [pc, #8]	; (80a11f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a11e8:	601a      	str	r2, [r3, #0]
 80a11ea:	4770      	bx	lr
 80a11ec:	080a2b1f 	.word	0x080a2b1f
 80a11f0:	200003bc 	.word	0x200003bc

080a11f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a11f4:	2300      	movs	r3, #0
 80a11f6:	461a      	mov	r2, r3
 80a11f8:	6840      	ldr	r0, [r0, #4]
 80a11fa:	f7ff bc05 	b.w	80a0a08 <network_connect>

080a11fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a11fe:	2200      	movs	r2, #0
 80a1200:	2102      	movs	r1, #2
 80a1202:	6840      	ldr	r0, [r0, #4]
 80a1204:	f7ff bc10 	b.w	80a0a28 <network_disconnect>

080a1208 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1208:	2200      	movs	r2, #0
 80a120a:	4611      	mov	r1, r2
 80a120c:	6840      	ldr	r0, [r0, #4]
 80a120e:	f7ff bc03 	b.w	80a0a18 <network_connecting>

080a1212 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1212:	2200      	movs	r2, #0
 80a1214:	4611      	mov	r1, r2
 80a1216:	6840      	ldr	r0, [r0, #4]
 80a1218:	f7ff bc0e 	b.w	80a0a38 <network_ready>

080a121c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a121c:	2300      	movs	r3, #0
 80a121e:	461a      	mov	r2, r3
 80a1220:	4619      	mov	r1, r3
 80a1222:	6840      	ldr	r0, [r0, #4]
 80a1224:	f7ff bc10 	b.w	80a0a48 <network_on>

080a1228 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1228:	2300      	movs	r3, #0
 80a122a:	461a      	mov	r2, r3
 80a122c:	4619      	mov	r1, r3
 80a122e:	6840      	ldr	r0, [r0, #4]
 80a1230:	f7ff bc12 	b.w	80a0a58 <network_off>

080a1234 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1234:	2200      	movs	r2, #0
 80a1236:	f081 0101 	eor.w	r1, r1, #1
 80a123a:	6840      	ldr	r0, [r0, #4]
 80a123c:	f7ff bc14 	b.w	80a0a68 <network_listen>

080a1240 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1240:	2200      	movs	r2, #0
 80a1242:	6840      	ldr	r0, [r0, #4]
 80a1244:	f7ff bc20 	b.w	80a0a88 <network_set_listen_timeout>

080a1248 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1248:	2200      	movs	r2, #0
 80a124a:	4611      	mov	r1, r2
 80a124c:	6840      	ldr	r0, [r0, #4]
 80a124e:	f7ff bc23 	b.w	80a0a98 <network_get_listen_timeout>

080a1252 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1252:	2200      	movs	r2, #0
 80a1254:	4611      	mov	r1, r2
 80a1256:	6840      	ldr	r0, [r0, #4]
 80a1258:	f7ff bc0e 	b.w	80a0a78 <network_listening>

080a125c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a125c:	b570      	push	{r4, r5, r6, lr}
 80a125e:	4616      	mov	r6, r2
 80a1260:	b08e      	sub	sp, #56	; 0x38
 80a1262:	4604      	mov	r4, r0
    IPAddress addr;
 80a1264:	a808      	add	r0, sp, #32
 80a1266:	f7ff ff7b 	bl	80a1160 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a126a:	2211      	movs	r2, #17
 80a126c:	2100      	movs	r1, #0
 80a126e:	a803      	add	r0, sp, #12
 80a1270:	f001 fb53 	bl	80a291a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1274:	4630      	mov	r0, r6
 80a1276:	f001 fb9c 	bl	80a29b2 <strlen>
 80a127a:	2500      	movs	r5, #0
 80a127c:	4b0a      	ldr	r3, [pc, #40]	; (80a12a8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a127e:	9500      	str	r5, [sp, #0]
 80a1280:	b281      	uxth	r1, r0
 80a1282:	685b      	ldr	r3, [r3, #4]
 80a1284:	aa03      	add	r2, sp, #12
 80a1286:	4630      	mov	r0, r6
 80a1288:	f7ff fb62 	bl	80a0950 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a128c:	b120      	cbz	r0, 80a1298 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a128e:	4629      	mov	r1, r5
 80a1290:	4620      	mov	r0, r4
 80a1292:	f7ff ff85 	bl	80a11a0 <_ZN9IPAddressC1Em>
 80a1296:	e003      	b.n	80a12a0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1298:	a903      	add	r1, sp, #12
 80a129a:	4620      	mov	r0, r4
 80a129c:	f7ff ff6e 	bl	80a117c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a12a0:	4620      	mov	r0, r4
 80a12a2:	b00e      	add	sp, #56	; 0x38
 80a12a4:	bd70      	pop	{r4, r5, r6, pc}
 80a12a6:	bf00      	nop
 80a12a8:	20000840 	.word	0x20000840

080a12ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a12ac:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a12ae:	4a03      	ldr	r2, [pc, #12]	; (80a12bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a12b0:	601a      	str	r2, [r3, #0]
 80a12b2:	2200      	movs	r2, #0
 80a12b4:	605a      	str	r2, [r3, #4]
 80a12b6:	4770      	bx	lr
 80a12b8:	200003c0 	.word	0x200003c0
 80a12bc:	080a2b50 	.word	0x080a2b50

080a12c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a12c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12c2:	4606      	mov	r6, r0
 80a12c4:	460d      	mov	r5, r1
 80a12c6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a12c8:	2400      	movs	r4, #0
  while (size--) {
 80a12ca:	42bd      	cmp	r5, r7
 80a12cc:	d00c      	beq.n	80a12e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a12ce:	6833      	ldr	r3, [r6, #0]
 80a12d0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a12d4:	689b      	ldr	r3, [r3, #8]
 80a12d6:	4630      	mov	r0, r6
 80a12d8:	4798      	blx	r3
     if (chunk>=0)
 80a12da:	2800      	cmp	r0, #0
 80a12dc:	db01      	blt.n	80a12e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a12de:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a12e0:	e7f3      	b.n	80a12ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a12e2:	2c00      	cmp	r4, #0
 80a12e4:	bf08      	it	eq
 80a12e6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a12e8:	4620      	mov	r0, r4
 80a12ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a12ec:	b570      	push	{r4, r5, r6, lr}
 80a12ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a12f0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a12f2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a12f4:	b149      	cbz	r1, 80a130a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a12f6:	f001 fb5c 	bl	80a29b2 <strlen>
 80a12fa:	682b      	ldr	r3, [r5, #0]
 80a12fc:	4602      	mov	r2, r0
 80a12fe:	4621      	mov	r1, r4
 80a1300:	4628      	mov	r0, r5
    }
 80a1302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1306:	68db      	ldr	r3, [r3, #12]
 80a1308:	4718      	bx	r3
    }
 80a130a:	bd70      	pop	{r4, r5, r6, pc}

080a130c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a130c:	6803      	ldr	r3, [r0, #0]
 80a130e:	689b      	ldr	r3, [r3, #8]
 80a1310:	4718      	bx	r3

080a1312 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1312:	2a01      	cmp	r2, #1
 80a1314:	bf98      	it	ls
 80a1316:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1318:	b530      	push	{r4, r5, lr}
 80a131a:	460b      	mov	r3, r1
 80a131c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a131e:	2100      	movs	r1, #0
 80a1320:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1324:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1328:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a132c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1330:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1332:	2b09      	cmp	r3, #9
 80a1334:	bf94      	ite	ls
 80a1336:	3330      	addls	r3, #48	; 0x30
 80a1338:	3337      	addhi	r3, #55	; 0x37
 80a133a:	b2db      	uxtb	r3, r3
 80a133c:	4621      	mov	r1, r4
 80a133e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1342:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1344:	2d00      	cmp	r5, #0
 80a1346:	d1ef      	bne.n	80a1328 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1348:	f7ff ffd0 	bl	80a12ec <_ZN5Print5writeEPKc>
}
 80a134c:	b00b      	add	sp, #44	; 0x2c
 80a134e:	bd30      	pop	{r4, r5, pc}

080a1350 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1350:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1352:	b922      	cbnz	r2, 80a135e <_ZN5Print5printEmi+0xe>
 80a1354:	6803      	ldr	r3, [r0, #0]
 80a1356:	b2c9      	uxtb	r1, r1
 80a1358:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a135a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a135c:	4718      	bx	r3
  else return printNumber(n, base);
 80a135e:	b2d2      	uxtb	r2, r2
}
 80a1360:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1362:	f7ff bfd6 	b.w	80a1312 <_ZN5Print11printNumberEmh>

080a1366 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1366:	f7ff bff3 	b.w	80a1350 <_ZN5Print5printEmi>

080a136a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a136a:	b510      	push	{r4, lr}
 80a136c:	4604      	mov	r4, r0
 80a136e:	f7ff fbe7 	bl	80a0b40 <_ZNSt14_Function_baseD1Ev>
 80a1372:	4620      	mov	r0, r4
 80a1374:	bd10      	pop	{r4, pc}
	...

080a1378 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1378:	4803      	ldr	r0, [pc, #12]	; (80a1388 <_GLOBAL__sub_I_RGB+0x10>)
 80a137a:	2300      	movs	r3, #0
 80a137c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a137e:	4a03      	ldr	r2, [pc, #12]	; (80a138c <_GLOBAL__sub_I_RGB+0x14>)
 80a1380:	4903      	ldr	r1, [pc, #12]	; (80a1390 <_GLOBAL__sub_I_RGB+0x18>)
 80a1382:	f000 bae9 	b.w	80a1958 <__aeabi_atexit>
 80a1386:	bf00      	nop
 80a1388:	200003c8 	.word	0x200003c8
 80a138c:	2000036c 	.word	0x2000036c
 80a1390:	080a136b 	.word	0x080a136b

080a1394 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1394:	4770      	bx	lr

080a1396 <_ZN8SPIClassD0Ev>:
 80a1396:	b510      	push	{r4, lr}
 80a1398:	4604      	mov	r4, r0
 80a139a:	f7fe fe80 	bl	80a009e <_ZdlPv>
 80a139e:	4620      	mov	r0, r4
 80a13a0:	bd10      	pop	{r4, pc}
	...

080a13a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a13a4:	b570      	push	{r4, r5, r6, lr}
 80a13a6:	4604      	mov	r4, r0
 80a13a8:	460e      	mov	r6, r1
 80a13aa:	4b07      	ldr	r3, [pc, #28]	; (80a13c8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a13ac:	2500      	movs	r5, #0
 80a13ae:	6003      	str	r3, [r0, #0]
 80a13b0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a13b4:	f7ff f9ca 	bl	80a074c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a13b8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a13ba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a13bc:	f7ff fa48 	bl	80a0850 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a13c0:	60a5      	str	r5, [r4, #8]
}
 80a13c2:	4620      	mov	r0, r4
 80a13c4:	bd70      	pop	{r4, r5, r6, pc}
 80a13c6:	bf00      	nop
 80a13c8:	080a2b84 	.word	0x080a2b84

080a13cc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a13cc:	7900      	ldrb	r0, [r0, #4]
 80a13ce:	f7ff ba47 	b.w	80a0860 <HAL_SPI_Is_Enabled>
	...

080a13d4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a13d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a13d8:	4b03      	ldr	r3, [pc, #12]	; (80a13e8 <_GLOBAL__sub_I_System+0x14>)
 80a13da:	2000      	movs	r0, #0
 80a13dc:	7018      	strb	r0, [r3, #0]
 80a13de:	8058      	strh	r0, [r3, #2]
 80a13e0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a13e2:	f7ff babd 	b.w	80a0960 <set_system_mode>
 80a13e6:	bf00      	nop
 80a13e8:	200003d8 	.word	0x200003d8

080a13ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a13ec:	4b02      	ldr	r3, [pc, #8]	; (80a13f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a13ee:	681a      	ldr	r2, [r3, #0]
 80a13f0:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a13f2:	601a      	str	r2, [r3, #0]
 80a13f4:	4770      	bx	lr
 80a13f6:	bf00      	nop
 80a13f8:	20000304 	.word	0x20000304
 80a13fc:	200003e0 	.word	0x200003e0

080a1400 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1400:	4770      	bx	lr

080a1402 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1402:	7441      	strb	r1, [r0, #17]
 80a1404:	4770      	bx	lr

080a1406 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1406:	7c00      	ldrb	r0, [r0, #16]
 80a1408:	f7ff ba6a 	b.w	80a08e0 <HAL_USART_Available_Data_For_Write>

080a140c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a140c:	7c00      	ldrb	r0, [r0, #16]
 80a140e:	f7ff ba3f 	b.w	80a0890 <HAL_USART_Available_Data>

080a1412 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1412:	7c00      	ldrb	r0, [r0, #16]
 80a1414:	f7ff ba4c 	b.w	80a08b0 <HAL_USART_Peek_Data>

080a1418 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1418:	7c00      	ldrb	r0, [r0, #16]
 80a141a:	f7ff ba41 	b.w	80a08a0 <HAL_USART_Read_Data>

080a141e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a141e:	7c00      	ldrb	r0, [r0, #16]
 80a1420:	f7ff ba4e 	b.w	80a08c0 <HAL_USART_Flush_Data>

080a1424 <_ZN11USARTSerialD0Ev>:
 80a1424:	b510      	push	{r4, lr}
 80a1426:	4604      	mov	r4, r0
 80a1428:	f7fe fe39 	bl	80a009e <_ZdlPv>
 80a142c:	4620      	mov	r0, r4
 80a142e:	bd10      	pop	{r4, pc}

080a1430 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1430:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1432:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1434:	4604      	mov	r4, r0
 80a1436:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1438:	b925      	cbnz	r5, 80a1444 <_ZN11USARTSerial5writeEh+0x14>
 80a143a:	7c00      	ldrb	r0, [r0, #16]
 80a143c:	f7ff fa50 	bl	80a08e0 <HAL_USART_Available_Data_For_Write>
 80a1440:	2800      	cmp	r0, #0
 80a1442:	dd05      	ble.n	80a1450 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1444:	4631      	mov	r1, r6
 80a1446:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a144c:	f7ff ba18 	b.w	80a0880 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1450:	4628      	mov	r0, r5
 80a1452:	bd70      	pop	{r4, r5, r6, pc}

080a1454 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1454:	b510      	push	{r4, lr}
 80a1456:	4604      	mov	r4, r0
 80a1458:	4608      	mov	r0, r1
 80a145a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a145c:	2200      	movs	r2, #0
 80a145e:	6062      	str	r2, [r4, #4]
 80a1460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1464:	60a2      	str	r2, [r4, #8]
 80a1466:	4a05      	ldr	r2, [pc, #20]	; (80a147c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1468:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a146a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a146c:	2201      	movs	r2, #1
 80a146e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1470:	461a      	mov	r2, r3
 80a1472:	f7ff f9fd 	bl	80a0870 <HAL_USART_Init>
}
 80a1476:	4620      	mov	r0, r4
 80a1478:	bd10      	pop	{r4, pc}
 80a147a:	bf00      	nop
 80a147c:	080a2bc0 	.word	0x080a2bc0

080a1480 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1480:	7c00      	ldrb	r0, [r0, #16]
 80a1482:	f7ff ba25 	b.w	80a08d0 <HAL_USART_Is_Enabled>
	...

080a1488 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1488:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a148a:	4d0c      	ldr	r5, [pc, #48]	; (80a14bc <_Z22__fetch_global_Serial1v+0x34>)
 80a148c:	6829      	ldr	r1, [r5, #0]
 80a148e:	f011 0401 	ands.w	r4, r1, #1
 80a1492:	d111      	bne.n	80a14b8 <_Z22__fetch_global_Serial1v+0x30>
 80a1494:	4628      	mov	r0, r5
 80a1496:	f7fe fe04 	bl	80a00a2 <__cxa_guard_acquire>
 80a149a:	b168      	cbz	r0, 80a14b8 <_Z22__fetch_global_Serial1v+0x30>
 80a149c:	4a08      	ldr	r2, [pc, #32]	; (80a14c0 <_Z22__fetch_global_Serial1v+0x38>)
 80a149e:	4621      	mov	r1, r4
 80a14a0:	4b08      	ldr	r3, [pc, #32]	; (80a14c4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a14a2:	4809      	ldr	r0, [pc, #36]	; (80a14c8 <_Z22__fetch_global_Serial1v+0x40>)
 80a14a4:	f7ff ffd6 	bl	80a1454 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a14a8:	4628      	mov	r0, r5
 80a14aa:	f7fe fdff 	bl	80a00ac <__cxa_guard_release>
 80a14ae:	4a07      	ldr	r2, [pc, #28]	; (80a14cc <_Z22__fetch_global_Serial1v+0x44>)
 80a14b0:	4907      	ldr	r1, [pc, #28]	; (80a14d0 <_Z22__fetch_global_Serial1v+0x48>)
 80a14b2:	4805      	ldr	r0, [pc, #20]	; (80a14c8 <_Z22__fetch_global_Serial1v+0x40>)
 80a14b4:	f000 fa50 	bl	80a1958 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a14b8:	4803      	ldr	r0, [pc, #12]	; (80a14c8 <_Z22__fetch_global_Serial1v+0x40>)
 80a14ba:	bd38      	pop	{r3, r4, r5, pc}
 80a14bc:	2000047c 	.word	0x2000047c
 80a14c0:	20000480 	.word	0x20000480
 80a14c4:	200003f8 	.word	0x200003f8
 80a14c8:	200003e4 	.word	0x200003e4
 80a14cc:	2000036c 	.word	0x2000036c
 80a14d0:	080a1401 	.word	0x080a1401

080a14d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a14d4:	7441      	strb	r1, [r0, #17]
 80a14d6:	4770      	bx	lr

080a14d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a14d8:	4770      	bx	lr

080a14da <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a14da:	2100      	movs	r1, #0
 80a14dc:	7c00      	ldrb	r0, [r0, #16]
 80a14de:	f7ff ba1f 	b.w	80a0920 <HAL_USB_USART_Receive_Data>

080a14e2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a14e2:	2101      	movs	r1, #1
 80a14e4:	7c00      	ldrb	r0, [r0, #16]
 80a14e6:	f7ff ba1b 	b.w	80a0920 <HAL_USB_USART_Receive_Data>

080a14ea <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a14ea:	7c00      	ldrb	r0, [r0, #16]
 80a14ec:	f7ff ba10 	b.w	80a0910 <HAL_USB_USART_Available_Data_For_Write>

080a14f0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a14f0:	7c00      	ldrb	r0, [r0, #16]
 80a14f2:	f7ff ba05 	b.w	80a0900 <HAL_USB_USART_Available_Data>

080a14f6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a14f6:	b538      	push	{r3, r4, r5, lr}
 80a14f8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14fa:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a14fc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a14fe:	f7ff fa07 	bl	80a0910 <HAL_USB_USART_Available_Data_For_Write>
 80a1502:	2800      	cmp	r0, #0
 80a1504:	dc01      	bgt.n	80a150a <_ZN9USBSerial5writeEh+0x14>
 80a1506:	7c60      	ldrb	r0, [r4, #17]
 80a1508:	b120      	cbz	r0, 80a1514 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a150a:	4629      	mov	r1, r5
 80a150c:	7c20      	ldrb	r0, [r4, #16]
 80a150e:	f7ff fa0f 	bl	80a0930 <HAL_USB_USART_Send_Data>
    return 1;
 80a1512:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1514:	bd38      	pop	{r3, r4, r5, pc}

080a1516 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1516:	7c00      	ldrb	r0, [r0, #16]
 80a1518:	f7ff ba12 	b.w	80a0940 <HAL_USB_USART_Flush_Data>

080a151c <_ZN9USBSerialD0Ev>:
 80a151c:	b510      	push	{r4, lr}
 80a151e:	4604      	mov	r4, r0
 80a1520:	f7fe fdbd 	bl	80a009e <_ZdlPv>
 80a1524:	4620      	mov	r0, r4
 80a1526:	bd10      	pop	{r4, pc}

080a1528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1528:	b510      	push	{r4, lr}
 80a152a:	4604      	mov	r4, r0
 80a152c:	2300      	movs	r3, #0
 80a152e:	6063      	str	r3, [r4, #4]
 80a1530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1534:	60a3      	str	r3, [r4, #8]
 80a1536:	4b05      	ldr	r3, [pc, #20]	; (80a154c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1538:	4608      	mov	r0, r1
 80a153a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a153c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a153e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1540:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1542:	4611      	mov	r1, r2
 80a1544:	f7ff f9d4 	bl	80a08f0 <HAL_USB_USART_Init>
}
 80a1548:	4620      	mov	r0, r4
 80a154a:	bd10      	pop	{r4, pc}
 80a154c:	080a2bf0 	.word	0x080a2bf0

080a1550 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1550:	b510      	push	{r4, lr}
 80a1552:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1554:	2214      	movs	r2, #20
 80a1556:	2100      	movs	r1, #0
 80a1558:	f001 f9df 	bl	80a291a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a155c:	4b05      	ldr	r3, [pc, #20]	; (80a1574 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a155e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1560:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1562:	4b05      	ldr	r3, [pc, #20]	; (80a1578 <_Z19acquireSerialBufferv+0x28>)
 80a1564:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1566:	f240 1301 	movw	r3, #257	; 0x101
 80a156a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a156c:	2381      	movs	r3, #129	; 0x81
 80a156e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1570:	bd10      	pop	{r4, pc}
 80a1572:	bf00      	nop
 80a1574:	20000589 	.word	0x20000589
 80a1578:	20000508 	.word	0x20000508

080a157c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a157c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a157e:	4d0e      	ldr	r5, [pc, #56]	; (80a15b8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1580:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1582:	a801      	add	r0, sp, #4
 80a1584:	f7ff ffe4 	bl	80a1550 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1588:	6829      	ldr	r1, [r5, #0]
 80a158a:	f011 0401 	ands.w	r4, r1, #1
 80a158e:	d110      	bne.n	80a15b2 <_Z16_fetch_usbserialv+0x36>
 80a1590:	4628      	mov	r0, r5
 80a1592:	f7fe fd86 	bl	80a00a2 <__cxa_guard_acquire>
 80a1596:	b160      	cbz	r0, 80a15b2 <_Z16_fetch_usbserialv+0x36>
 80a1598:	aa01      	add	r2, sp, #4
 80a159a:	4621      	mov	r1, r4
 80a159c:	4807      	ldr	r0, [pc, #28]	; (80a15bc <_Z16_fetch_usbserialv+0x40>)
 80a159e:	f7ff ffc3 	bl	80a1528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a15a2:	4628      	mov	r0, r5
 80a15a4:	f7fe fd82 	bl	80a00ac <__cxa_guard_release>
 80a15a8:	4a05      	ldr	r2, [pc, #20]	; (80a15c0 <_Z16_fetch_usbserialv+0x44>)
 80a15aa:	4906      	ldr	r1, [pc, #24]	; (80a15c4 <_Z16_fetch_usbserialv+0x48>)
 80a15ac:	4803      	ldr	r0, [pc, #12]	; (80a15bc <_Z16_fetch_usbserialv+0x40>)
 80a15ae:	f000 f9d3 	bl	80a1958 <__aeabi_atexit>
	return _usbserial;
}
 80a15b2:	4802      	ldr	r0, [pc, #8]	; (80a15bc <_Z16_fetch_usbserialv+0x40>)
 80a15b4:	b007      	add	sp, #28
 80a15b6:	bd30      	pop	{r4, r5, pc}
 80a15b8:	20000504 	.word	0x20000504
 80a15bc:	2000068c 	.word	0x2000068c
 80a15c0:	2000036c 	.word	0x2000036c
 80a15c4:	080a14d9 	.word	0x080a14d9

080a15c8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a15c8:	b510      	push	{r4, lr}
 80a15ca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a15cc:	2214      	movs	r2, #20
 80a15ce:	2100      	movs	r1, #0
 80a15d0:	f001 f9a3 	bl	80a291a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a15d4:	4b05      	ldr	r3, [pc, #20]	; (80a15ec <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a15d6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a15d8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a15da:	4b05      	ldr	r3, [pc, #20]	; (80a15f0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a15dc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a15de:	f240 1301 	movw	r3, #257	; 0x101
 80a15e2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a15e4:	2381      	movs	r3, #129	; 0x81
 80a15e6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a15e8:	bd10      	pop	{r4, pc}
 80a15ea:	bf00      	nop
 80a15ec:	2000073c 	.word	0x2000073c
 80a15f0:	200006a4 	.word	0x200006a4

080a15f4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a15f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15f6:	4c0e      	ldr	r4, [pc, #56]	; (80a1630 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a15f8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a15fa:	a801      	add	r0, sp, #4
 80a15fc:	f7ff ffe4 	bl	80a15c8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1600:	6823      	ldr	r3, [r4, #0]
 80a1602:	07db      	lsls	r3, r3, #31
 80a1604:	d410      	bmi.n	80a1628 <_Z17_fetch_usbserial1v+0x34>
 80a1606:	4620      	mov	r0, r4
 80a1608:	f7fe fd4b 	bl	80a00a2 <__cxa_guard_acquire>
 80a160c:	b160      	cbz	r0, 80a1628 <_Z17_fetch_usbserial1v+0x34>
 80a160e:	aa01      	add	r2, sp, #4
 80a1610:	2101      	movs	r1, #1
 80a1612:	4808      	ldr	r0, [pc, #32]	; (80a1634 <_Z17_fetch_usbserial1v+0x40>)
 80a1614:	f7ff ff88 	bl	80a1528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1618:	4620      	mov	r0, r4
 80a161a:	f7fe fd47 	bl	80a00ac <__cxa_guard_release>
 80a161e:	4a06      	ldr	r2, [pc, #24]	; (80a1638 <_Z17_fetch_usbserial1v+0x44>)
 80a1620:	4906      	ldr	r1, [pc, #24]	; (80a163c <_Z17_fetch_usbserial1v+0x48>)
 80a1622:	4804      	ldr	r0, [pc, #16]	; (80a1634 <_Z17_fetch_usbserial1v+0x40>)
 80a1624:	f000 f998 	bl	80a1958 <__aeabi_atexit>
  return _usbserial1;
}
 80a1628:	4802      	ldr	r0, [pc, #8]	; (80a1634 <_Z17_fetch_usbserial1v+0x40>)
 80a162a:	b006      	add	sp, #24
 80a162c:	bd10      	pop	{r4, pc}
 80a162e:	bf00      	nop
 80a1630:	200006a0 	.word	0x200006a0
 80a1634:	20000728 	.word	0x20000728
 80a1638:	2000036c 	.word	0x2000036c
 80a163c:	080a14d9 	.word	0x080a14d9

080a1640 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1640:	2200      	movs	r2, #0
 80a1642:	4611      	mov	r1, r2
 80a1644:	6840      	ldr	r0, [r0, #4]
 80a1646:	f7ff b9f7 	b.w	80a0a38 <network_ready>

080a164a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a164a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a164c:	4616      	mov	r6, r2
 80a164e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1650:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1652:	460f      	mov	r7, r1
 80a1654:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1656:	2100      	movs	r1, #0
 80a1658:	a803      	add	r0, sp, #12
 80a165a:	f001 f95e 	bl	80a291a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a165e:	4630      	mov	r0, r6
 80a1660:	f001 f9a7 	bl	80a29b2 <strlen>
 80a1664:	2500      	movs	r5, #0
 80a1666:	9500      	str	r5, [sp, #0]
 80a1668:	b281      	uxth	r1, r0
 80a166a:	687b      	ldr	r3, [r7, #4]
 80a166c:	aa03      	add	r2, sp, #12
 80a166e:	4630      	mov	r0, r6
 80a1670:	f7ff f96e 	bl	80a0950 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1674:	b120      	cbz	r0, 80a1680 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1676:	4629      	mov	r1, r5
 80a1678:	4620      	mov	r0, r4
 80a167a:	f7ff fd91 	bl	80a11a0 <_ZN9IPAddressC1Em>
 80a167e:	e003      	b.n	80a1688 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1680:	a903      	add	r1, sp, #12
 80a1682:	4620      	mov	r0, r4
 80a1684:	f7ff fd7a 	bl	80a117c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1688:	4620      	mov	r0, r4
 80a168a:	b009      	add	sp, #36	; 0x24
 80a168c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a168e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a168e:	2200      	movs	r2, #0
 80a1690:	4611      	mov	r1, r2
 80a1692:	6840      	ldr	r0, [r0, #4]
 80a1694:	f7ff b9f0 	b.w	80a0a78 <network_listening>

080a1698 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1698:	2200      	movs	r2, #0
 80a169a:	4611      	mov	r1, r2
 80a169c:	6840      	ldr	r0, [r0, #4]
 80a169e:	f7ff b9fb 	b.w	80a0a98 <network_get_listen_timeout>

080a16a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a16a2:	2200      	movs	r2, #0
 80a16a4:	6840      	ldr	r0, [r0, #4]
 80a16a6:	f7ff b9ef 	b.w	80a0a88 <network_set_listen_timeout>

080a16aa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a16aa:	2200      	movs	r2, #0
 80a16ac:	f081 0101 	eor.w	r1, r1, #1
 80a16b0:	6840      	ldr	r0, [r0, #4]
 80a16b2:	f7ff b9d9 	b.w	80a0a68 <network_listen>

080a16b6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a16b6:	2300      	movs	r3, #0
 80a16b8:	461a      	mov	r2, r3
 80a16ba:	4619      	mov	r1, r3
 80a16bc:	6840      	ldr	r0, [r0, #4]
 80a16be:	f7ff b9cb 	b.w	80a0a58 <network_off>

080a16c2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a16c2:	2300      	movs	r3, #0
 80a16c4:	461a      	mov	r2, r3
 80a16c6:	4619      	mov	r1, r3
 80a16c8:	6840      	ldr	r0, [r0, #4]
 80a16ca:	f7ff b9bd 	b.w	80a0a48 <network_on>

080a16ce <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a16ce:	2200      	movs	r2, #0
 80a16d0:	4611      	mov	r1, r2
 80a16d2:	6840      	ldr	r0, [r0, #4]
 80a16d4:	f7ff b9a0 	b.w	80a0a18 <network_connecting>

080a16d8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a16d8:	2200      	movs	r2, #0
 80a16da:	2102      	movs	r1, #2
 80a16dc:	6840      	ldr	r0, [r0, #4]
 80a16de:	f7ff b9a3 	b.w	80a0a28 <network_disconnect>

080a16e2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a16e2:	2300      	movs	r3, #0
 80a16e4:	461a      	mov	r2, r3
 80a16e6:	6840      	ldr	r0, [r0, #4]
 80a16e8:	f7ff b98e 	b.w	80a0a08 <network_connect>

080a16ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a16ec:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a16ee:	2204      	movs	r2, #4
 80a16f0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a16f2:	4a02      	ldr	r2, [pc, #8]	; (80a16fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a16f4:	601a      	str	r2, [r3, #0]
 80a16f6:	4770      	bx	lr
 80a16f8:	20000840 	.word	0x20000840
 80a16fc:	080a2c20 	.word	0x080a2c20

080a1700 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1700:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1702:	4b14      	ldr	r3, [pc, #80]	; (80a1754 <serialEventRun+0x54>)
 80a1704:	b133      	cbz	r3, 80a1714 <serialEventRun+0x14>
 80a1706:	f7ff ff39 	bl	80a157c <_Z16_fetch_usbserialv>
 80a170a:	6803      	ldr	r3, [r0, #0]
 80a170c:	691b      	ldr	r3, [r3, #16]
 80a170e:	4798      	blx	r3
 80a1710:	2800      	cmp	r0, #0
 80a1712:	dc16      	bgt.n	80a1742 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1714:	4b10      	ldr	r3, [pc, #64]	; (80a1758 <serialEventRun+0x58>)
 80a1716:	b133      	cbz	r3, 80a1726 <serialEventRun+0x26>
 80a1718:	f7ff feb6 	bl	80a1488 <_Z22__fetch_global_Serial1v>
 80a171c:	6803      	ldr	r3, [r0, #0]
 80a171e:	691b      	ldr	r3, [r3, #16]
 80a1720:	4798      	blx	r3
 80a1722:	2800      	cmp	r0, #0
 80a1724:	dc10      	bgt.n	80a1748 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1726:	4b0d      	ldr	r3, [pc, #52]	; (80a175c <serialEventRun+0x5c>)
 80a1728:	b10b      	cbz	r3, 80a172e <serialEventRun+0x2e>
 80a172a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a172e:	4b0c      	ldr	r3, [pc, #48]	; (80a1760 <serialEventRun+0x60>)
 80a1730:	b17b      	cbz	r3, 80a1752 <serialEventRun+0x52>
 80a1732:	f7ff ff5f 	bl	80a15f4 <_Z17_fetch_usbserial1v>
 80a1736:	6803      	ldr	r3, [r0, #0]
 80a1738:	691b      	ldr	r3, [r3, #16]
 80a173a:	4798      	blx	r3
 80a173c:	2800      	cmp	r0, #0
 80a173e:	dc06      	bgt.n	80a174e <serialEventRun+0x4e>
 80a1740:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1742:	f3af 8000 	nop.w
 80a1746:	e7e5      	b.n	80a1714 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1748:	f3af 8000 	nop.w
 80a174c:	e7eb      	b.n	80a1726 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a174e:	f3af 8000 	nop.w
 80a1752:	bd08      	pop	{r3, pc}
	...

080a1764 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1764:	b508      	push	{r3, lr}
	serialEventRun();
 80a1766:	f7ff ffcb 	bl	80a1700 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a176a:	f7ff f807 	bl	80a077c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a176e:	4b01      	ldr	r3, [pc, #4]	; (80a1774 <_post_loop+0x10>)
 80a1770:	6018      	str	r0, [r3, #0]
 80a1772:	bd08      	pop	{r3, pc}
 80a1774:	20000850 	.word	0x20000850

080a1778 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1778:	4802      	ldr	r0, [pc, #8]	; (80a1784 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a177a:	4a03      	ldr	r2, [pc, #12]	; (80a1788 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a177c:	4903      	ldr	r1, [pc, #12]	; (80a178c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a177e:	1a12      	subs	r2, r2, r0
 80a1780:	f001 b8c0 	b.w	80a2904 <memcpy>
 80a1784:	40024000 	.word	0x40024000
 80a1788:	40024004 	.word	0x40024004
 80a178c:	080a2cf0 	.word	0x080a2cf0

080a1790 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1790:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1792:	2300      	movs	r3, #0
 80a1794:	9300      	str	r3, [sp, #0]
 80a1796:	461a      	mov	r2, r3
 80a1798:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a179c:	f7ff f90a 	bl	80a09b4 <system_ctrl_set_result>
}
 80a17a0:	b003      	add	sp, #12
 80a17a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a17a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a17a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a17aa:	8843      	ldrh	r3, [r0, #2]
 80a17ac:	2b0a      	cmp	r3, #10
 80a17ae:	d008      	beq.n	80a17c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a17b0:	2b50      	cmp	r3, #80	; 0x50
 80a17b2:	d109      	bne.n	80a17c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a17b4:	4b09      	ldr	r3, [pc, #36]	; (80a17dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a17b6:	681b      	ldr	r3, [r3, #0]
 80a17b8:	b13b      	cbz	r3, 80a17ca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a17ba:	b003      	add	sp, #12
 80a17bc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a17c0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a17c2:	f7ff ffe5 	bl	80a1790 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a17c6:	e006      	b.n	80a17d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a17c8:	2300      	movs	r3, #0
 80a17ca:	9300      	str	r3, [sp, #0]
 80a17cc:	461a      	mov	r2, r3
 80a17ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a17d2:	f7ff f8ef 	bl	80a09b4 <system_ctrl_set_result>
        break;
    }
}
 80a17d6:	b003      	add	sp, #12
 80a17d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a17dc:	20000848 	.word	0x20000848

080a17e0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a17e0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a17e2:	4c10      	ldr	r4, [pc, #64]	; (80a1824 <module_user_init_hook+0x44>)
 80a17e4:	4d10      	ldr	r5, [pc, #64]	; (80a1828 <module_user_init_hook+0x48>)
 80a17e6:	6823      	ldr	r3, [r4, #0]
 80a17e8:	42ab      	cmp	r3, r5
 80a17ea:	4b10      	ldr	r3, [pc, #64]	; (80a182c <module_user_init_hook+0x4c>)
 80a17ec:	bf0c      	ite	eq
 80a17ee:	2201      	moveq	r2, #1
 80a17f0:	2200      	movne	r2, #0
 80a17f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a17f4:	d002      	beq.n	80a17fc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a17f6:	f7ff ffbf 	bl	80a1778 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a17fa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a17fc:	f7fe ffae 	bl	80a075c <HAL_RNG_GetRandomNumber>
 80a1800:	4604      	mov	r4, r0
    srand(seed);
 80a1802:	f001 f893 	bl	80a292c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1806:	4b0a      	ldr	r3, [pc, #40]	; (80a1830 <module_user_init_hook+0x50>)
 80a1808:	b113      	cbz	r3, 80a1810 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a180a:	4620      	mov	r0, r4
 80a180c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1810:	2100      	movs	r1, #0
 80a1812:	4807      	ldr	r0, [pc, #28]	; (80a1830 <module_user_init_hook+0x50>)
 80a1814:	f7ff f8f0 	bl	80a09f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a181c:	2100      	movs	r1, #0
 80a181e:	4805      	ldr	r0, [pc, #20]	; (80a1834 <module_user_init_hook+0x54>)
 80a1820:	f7ff b8be 	b.w	80a09a0 <system_ctrl_set_app_request_handler>
 80a1824:	40024000 	.word	0x40024000
 80a1828:	9a271c1e 	.word	0x9a271c1e
 80a182c:	2000084c 	.word	0x2000084c
 80a1830:	00000000 	.word	0x00000000
 80a1834:	080a17a9 	.word	0x080a17a9

080a1838 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1838:	b510      	push	{r4, lr}
 80a183a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a183c:	480f      	ldr	r0, [pc, #60]	; (80a187c <pinAvailable+0x44>)
 80a183e:	f7ff fdc5 	bl	80a13cc <_ZN8SPIClass9isEnabledEv>
 80a1842:	b128      	cbz	r0, 80a1850 <pinAvailable+0x18>
 80a1844:	f1a4 030d 	sub.w	r3, r4, #13
 80a1848:	2b02      	cmp	r3, #2
 80a184a:	d801      	bhi.n	80a1850 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a184c:	2000      	movs	r0, #0
 80a184e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1850:	f000 f828 	bl	80a18a4 <_Z19__fetch_global_Wirev>
 80a1854:	f7ff fc5c 	bl	80a1110 <_ZN7TwoWire9isEnabledEv>
 80a1858:	b108      	cbz	r0, 80a185e <pinAvailable+0x26>
 80a185a:	2c01      	cmp	r4, #1
 80a185c:	d9f6      	bls.n	80a184c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a185e:	f7ff fe13 	bl	80a1488 <_Z22__fetch_global_Serial1v>
 80a1862:	f7ff fe0d 	bl	80a1480 <_ZN11USARTSerial9isEnabledEv>
 80a1866:	b118      	cbz	r0, 80a1870 <pinAvailable+0x38>
 80a1868:	f1a4 0312 	sub.w	r3, r4, #18
 80a186c:	2b01      	cmp	r3, #1
 80a186e:	d9ed      	bls.n	80a184c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1870:	2c17      	cmp	r4, #23
 80a1872:	bf8c      	ite	hi
 80a1874:	2000      	movhi	r0, #0
 80a1876:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1878:	bd10      	pop	{r4, pc}
 80a187a:	bf00      	nop
 80a187c:	20000884 	.word	0x20000884

080a1880 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1880:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1882:	b538      	push	{r3, r4, r5, lr}
 80a1884:	4604      	mov	r4, r0
 80a1886:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1888:	d80a      	bhi.n	80a18a0 <pinMode+0x20>
 80a188a:	29ff      	cmp	r1, #255	; 0xff
 80a188c:	d008      	beq.n	80a18a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a188e:	f7ff ffd3 	bl	80a1838 <pinAvailable>
 80a1892:	b128      	cbz	r0, 80a18a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1894:	4629      	mov	r1, r5
 80a1896:	4620      	mov	r0, r4
}
 80a1898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a189c:	f7fe bf7e 	b.w	80a079c <HAL_Pin_Mode>
 80a18a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a18a4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a18a4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a18a6:	4d0b      	ldr	r5, [pc, #44]	; (80a18d4 <_Z19__fetch_global_Wirev+0x30>)
 80a18a8:	6829      	ldr	r1, [r5, #0]
 80a18aa:	f011 0401 	ands.w	r4, r1, #1
 80a18ae:	d10f      	bne.n	80a18d0 <_Z19__fetch_global_Wirev+0x2c>
 80a18b0:	4628      	mov	r0, r5
 80a18b2:	f7fe fbf6 	bl	80a00a2 <__cxa_guard_acquire>
 80a18b6:	b158      	cbz	r0, 80a18d0 <_Z19__fetch_global_Wirev+0x2c>
 80a18b8:	4621      	mov	r1, r4
 80a18ba:	4807      	ldr	r0, [pc, #28]	; (80a18d8 <_Z19__fetch_global_Wirev+0x34>)
 80a18bc:	f7ff fc16 	bl	80a10ec <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a18c0:	4628      	mov	r0, r5
 80a18c2:	f7fe fbf3 	bl	80a00ac <__cxa_guard_release>
 80a18c6:	4a05      	ldr	r2, [pc, #20]	; (80a18dc <_Z19__fetch_global_Wirev+0x38>)
 80a18c8:	4905      	ldr	r1, [pc, #20]	; (80a18e0 <_Z19__fetch_global_Wirev+0x3c>)
 80a18ca:	4803      	ldr	r0, [pc, #12]	; (80a18d8 <_Z19__fetch_global_Wirev+0x34>)
 80a18cc:	f000 f844 	bl	80a1958 <__aeabi_atexit>
	return wire;
}
 80a18d0:	4801      	ldr	r0, [pc, #4]	; (80a18d8 <_Z19__fetch_global_Wirev+0x34>)
 80a18d2:	bd38      	pop	{r3, r4, r5, pc}
 80a18d4:	20000854 	.word	0x20000854
 80a18d8:	20000858 	.word	0x20000858
 80a18dc:	2000036c 	.word	0x2000036c
 80a18e0:	080a1095 	.word	0x080a1095

080a18e4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a18e4:	b513      	push	{r0, r1, r4, lr}
 80a18e6:	4c08      	ldr	r4, [pc, #32]	; (80a1908 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a18e8:	2300      	movs	r3, #0
 80a18ea:	461a      	mov	r2, r3
 80a18ec:	4619      	mov	r1, r3
 80a18ee:	9300      	str	r3, [sp, #0]
 80a18f0:	4620      	mov	r0, r4
 80a18f2:	f7ff fc6b 	bl	80a11cc <_ZN9IPAddressC1Ehhhh>
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	4a04      	ldr	r2, [pc, #16]	; (80a190c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a18fa:	4905      	ldr	r1, [pc, #20]	; (80a1910 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a18fc:	b002      	add	sp, #8
 80a18fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1902:	f000 b829 	b.w	80a1958 <__aeabi_atexit>
 80a1906:	bf00      	nop
 80a1908:	2000086c 	.word	0x2000086c
 80a190c:	2000036c 	.word	0x2000036c
 80a1910:	080a1121 	.word	0x080a1121

080a1914 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1914:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1916:	4c0c      	ldr	r4, [pc, #48]	; (80a1948 <_GLOBAL__sub_I_SPI+0x34>)
 80a1918:	4e0c      	ldr	r6, [pc, #48]	; (80a194c <_GLOBAL__sub_I_SPI+0x38>)
 80a191a:	4d0d      	ldr	r5, [pc, #52]	; (80a1950 <_GLOBAL__sub_I_SPI+0x3c>)
 80a191c:	2100      	movs	r1, #0
 80a191e:	4620      	mov	r0, r4
 80a1920:	f7ff fd40 	bl	80a13a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1924:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1926:	4c0b      	ldr	r4, [pc, #44]	; (80a1954 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1928:	4632      	mov	r2, r6
 80a192a:	4629      	mov	r1, r5
 80a192c:	f000 f814 	bl	80a1958 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1930:	2101      	movs	r1, #1
 80a1932:	4620      	mov	r0, r4
 80a1934:	f7ff fd36 	bl	80a13a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1938:	4632      	mov	r2, r6
 80a193a:	4629      	mov	r1, r5
 80a193c:	4620      	mov	r0, r4
 80a193e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1942:	f000 b809 	b.w	80a1958 <__aeabi_atexit>
 80a1946:	bf00      	nop
 80a1948:	20000884 	.word	0x20000884
 80a194c:	2000036c 	.word	0x2000036c
 80a1950:	080a1395 	.word	0x080a1395
 80a1954:	20000894 	.word	0x20000894

080a1958 <__aeabi_atexit>:
 80a1958:	460b      	mov	r3, r1
 80a195a:	4601      	mov	r1, r0
 80a195c:	4618      	mov	r0, r3
 80a195e:	f000 bfc3 	b.w	80a28e8 <__cxa_atexit>

080a1962 <_ZSt25__throw_bad_function_callv>:
 80a1962:	b508      	push	{r3, lr}
 80a1964:	f7ff f8b8 	bl	80a0ad8 <abort>

080a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1968:	4b24      	ldr	r3, [pc, #144]	; (80a19fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a196a:	681a      	ldr	r2, [r3, #0]
 80a196c:	07d0      	lsls	r0, r2, #31
 80a196e:	bf5c      	itt	pl
 80a1970:	2201      	movpl	r2, #1
 80a1972:	601a      	strpl	r2, [r3, #0]
 80a1974:	4b22      	ldr	r3, [pc, #136]	; (80a1a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1976:	681a      	ldr	r2, [r3, #0]
 80a1978:	07d1      	lsls	r1, r2, #31
 80a197a:	bf5c      	itt	pl
 80a197c:	2201      	movpl	r2, #1
 80a197e:	601a      	strpl	r2, [r3, #0]
 80a1980:	4b20      	ldr	r3, [pc, #128]	; (80a1a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1982:	681a      	ldr	r2, [r3, #0]
 80a1984:	07d2      	lsls	r2, r2, #31
 80a1986:	bf5c      	itt	pl
 80a1988:	2201      	movpl	r2, #1
 80a198a:	601a      	strpl	r2, [r3, #0]
 80a198c:	4b1e      	ldr	r3, [pc, #120]	; (80a1a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a198e:	681a      	ldr	r2, [r3, #0]
 80a1990:	07d0      	lsls	r0, r2, #31
 80a1992:	bf5c      	itt	pl
 80a1994:	2201      	movpl	r2, #1
 80a1996:	601a      	strpl	r2, [r3, #0]
 80a1998:	4b1c      	ldr	r3, [pc, #112]	; (80a1a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a199a:	681a      	ldr	r2, [r3, #0]
 80a199c:	07d1      	lsls	r1, r2, #31
 80a199e:	bf5c      	itt	pl
 80a19a0:	2201      	movpl	r2, #1
 80a19a2:	601a      	strpl	r2, [r3, #0]
 80a19a4:	4b1a      	ldr	r3, [pc, #104]	; (80a1a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a19a6:	681a      	ldr	r2, [r3, #0]
 80a19a8:	07d2      	lsls	r2, r2, #31
 80a19aa:	bf5c      	itt	pl
 80a19ac:	2201      	movpl	r2, #1
 80a19ae:	601a      	strpl	r2, [r3, #0]
 80a19b0:	4b18      	ldr	r3, [pc, #96]	; (80a1a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a19b2:	681a      	ldr	r2, [r3, #0]
 80a19b4:	07d0      	lsls	r0, r2, #31
 80a19b6:	bf5c      	itt	pl
 80a19b8:	2201      	movpl	r2, #1
 80a19ba:	601a      	strpl	r2, [r3, #0]
 80a19bc:	4b16      	ldr	r3, [pc, #88]	; (80a1a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a19be:	681a      	ldr	r2, [r3, #0]
 80a19c0:	07d1      	lsls	r1, r2, #31
 80a19c2:	bf5c      	itt	pl
 80a19c4:	2201      	movpl	r2, #1
 80a19c6:	601a      	strpl	r2, [r3, #0]
 80a19c8:	4b14      	ldr	r3, [pc, #80]	; (80a1a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a19ca:	681a      	ldr	r2, [r3, #0]
 80a19cc:	07d2      	lsls	r2, r2, #31
 80a19ce:	bf5c      	itt	pl
 80a19d0:	2201      	movpl	r2, #1
 80a19d2:	601a      	strpl	r2, [r3, #0]
 80a19d4:	4b12      	ldr	r3, [pc, #72]	; (80a1a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a19d6:	681a      	ldr	r2, [r3, #0]
 80a19d8:	07d0      	lsls	r0, r2, #31
 80a19da:	bf5c      	itt	pl
 80a19dc:	2201      	movpl	r2, #1
 80a19de:	601a      	strpl	r2, [r3, #0]
 80a19e0:	4b10      	ldr	r3, [pc, #64]	; (80a1a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a19e2:	681a      	ldr	r2, [r3, #0]
 80a19e4:	07d1      	lsls	r1, r2, #31
 80a19e6:	bf5c      	itt	pl
 80a19e8:	2201      	movpl	r2, #1
 80a19ea:	601a      	strpl	r2, [r3, #0]
 80a19ec:	4b0e      	ldr	r3, [pc, #56]	; (80a1a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a19ee:	681a      	ldr	r2, [r3, #0]
 80a19f0:	07d2      	lsls	r2, r2, #31
 80a19f2:	bf5c      	itt	pl
 80a19f4:	2201      	movpl	r2, #1
 80a19f6:	601a      	strpl	r2, [r3, #0]
 80a19f8:	4770      	bx	lr
 80a19fa:	bf00      	nop
 80a19fc:	200008d0 	.word	0x200008d0
 80a1a00:	200008cc 	.word	0x200008cc
 80a1a04:	200008c8 	.word	0x200008c8
 80a1a08:	200008c4 	.word	0x200008c4
 80a1a0c:	200008c0 	.word	0x200008c0
 80a1a10:	200008bc 	.word	0x200008bc
 80a1a14:	200008b8 	.word	0x200008b8
 80a1a18:	200008b4 	.word	0x200008b4
 80a1a1c:	200008b0 	.word	0x200008b0
 80a1a20:	200008ac 	.word	0x200008ac
 80a1a24:	200008a8 	.word	0x200008a8
 80a1a28:	200008a4 	.word	0x200008a4

080a1a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a2c:	4b18      	ldr	r3, [pc, #96]	; (80a1a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a2e:	681a      	ldr	r2, [r3, #0]
 80a1a30:	07d1      	lsls	r1, r2, #31
 80a1a32:	bf5c      	itt	pl
 80a1a34:	2201      	movpl	r2, #1
 80a1a36:	601a      	strpl	r2, [r3, #0]
 80a1a38:	4b16      	ldr	r3, [pc, #88]	; (80a1a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a3a:	681a      	ldr	r2, [r3, #0]
 80a1a3c:	07d2      	lsls	r2, r2, #31
 80a1a3e:	bf5c      	itt	pl
 80a1a40:	2201      	movpl	r2, #1
 80a1a42:	601a      	strpl	r2, [r3, #0]
 80a1a44:	4b14      	ldr	r3, [pc, #80]	; (80a1a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a46:	681a      	ldr	r2, [r3, #0]
 80a1a48:	07d0      	lsls	r0, r2, #31
 80a1a4a:	bf5c      	itt	pl
 80a1a4c:	2201      	movpl	r2, #1
 80a1a4e:	601a      	strpl	r2, [r3, #0]
 80a1a50:	4b12      	ldr	r3, [pc, #72]	; (80a1a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a52:	681a      	ldr	r2, [r3, #0]
 80a1a54:	07d1      	lsls	r1, r2, #31
 80a1a56:	bf5c      	itt	pl
 80a1a58:	2201      	movpl	r2, #1
 80a1a5a:	601a      	strpl	r2, [r3, #0]
 80a1a5c:	4b10      	ldr	r3, [pc, #64]	; (80a1aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a5e:	681a      	ldr	r2, [r3, #0]
 80a1a60:	07d2      	lsls	r2, r2, #31
 80a1a62:	bf5c      	itt	pl
 80a1a64:	2201      	movpl	r2, #1
 80a1a66:	601a      	strpl	r2, [r3, #0]
 80a1a68:	4b0e      	ldr	r3, [pc, #56]	; (80a1aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a6a:	681a      	ldr	r2, [r3, #0]
 80a1a6c:	07d0      	lsls	r0, r2, #31
 80a1a6e:	bf5c      	itt	pl
 80a1a70:	2201      	movpl	r2, #1
 80a1a72:	601a      	strpl	r2, [r3, #0]
 80a1a74:	4b0c      	ldr	r3, [pc, #48]	; (80a1aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a76:	681a      	ldr	r2, [r3, #0]
 80a1a78:	07d1      	lsls	r1, r2, #31
 80a1a7a:	bf5c      	itt	pl
 80a1a7c:	2201      	movpl	r2, #1
 80a1a7e:	601a      	strpl	r2, [r3, #0]
 80a1a80:	4b0a      	ldr	r3, [pc, #40]	; (80a1aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a82:	681a      	ldr	r2, [r3, #0]
 80a1a84:	07d2      	lsls	r2, r2, #31
 80a1a86:	bf5c      	itt	pl
 80a1a88:	2201      	movpl	r2, #1
 80a1a8a:	601a      	strpl	r2, [r3, #0]
 80a1a8c:	4770      	bx	lr
 80a1a8e:	bf00      	nop
 80a1a90:	200008f0 	.word	0x200008f0
 80a1a94:	200008ec 	.word	0x200008ec
 80a1a98:	200008e8 	.word	0x200008e8
 80a1a9c:	200008e4 	.word	0x200008e4
 80a1aa0:	200008e0 	.word	0x200008e0
 80a1aa4:	200008dc 	.word	0x200008dc
 80a1aa8:	200008d8 	.word	0x200008d8
 80a1aac:	200008d4 	.word	0x200008d4

080a1ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1ab0:	4b18      	ldr	r3, [pc, #96]	; (80a1b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1ab2:	681a      	ldr	r2, [r3, #0]
 80a1ab4:	07d1      	lsls	r1, r2, #31
 80a1ab6:	bf5c      	itt	pl
 80a1ab8:	2201      	movpl	r2, #1
 80a1aba:	601a      	strpl	r2, [r3, #0]
 80a1abc:	4b16      	ldr	r3, [pc, #88]	; (80a1b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1abe:	681a      	ldr	r2, [r3, #0]
 80a1ac0:	07d2      	lsls	r2, r2, #31
 80a1ac2:	bf5c      	itt	pl
 80a1ac4:	2201      	movpl	r2, #1
 80a1ac6:	601a      	strpl	r2, [r3, #0]
 80a1ac8:	4b14      	ldr	r3, [pc, #80]	; (80a1b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1aca:	681a      	ldr	r2, [r3, #0]
 80a1acc:	07d0      	lsls	r0, r2, #31
 80a1ace:	bf5c      	itt	pl
 80a1ad0:	2201      	movpl	r2, #1
 80a1ad2:	601a      	strpl	r2, [r3, #0]
 80a1ad4:	4b12      	ldr	r3, [pc, #72]	; (80a1b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1ad6:	681a      	ldr	r2, [r3, #0]
 80a1ad8:	07d1      	lsls	r1, r2, #31
 80a1ada:	bf5c      	itt	pl
 80a1adc:	2201      	movpl	r2, #1
 80a1ade:	601a      	strpl	r2, [r3, #0]
 80a1ae0:	4b10      	ldr	r3, [pc, #64]	; (80a1b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1ae2:	681a      	ldr	r2, [r3, #0]
 80a1ae4:	07d2      	lsls	r2, r2, #31
 80a1ae6:	bf5c      	itt	pl
 80a1ae8:	2201      	movpl	r2, #1
 80a1aea:	601a      	strpl	r2, [r3, #0]
 80a1aec:	4b0e      	ldr	r3, [pc, #56]	; (80a1b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1aee:	681a      	ldr	r2, [r3, #0]
 80a1af0:	07d0      	lsls	r0, r2, #31
 80a1af2:	bf5c      	itt	pl
 80a1af4:	2201      	movpl	r2, #1
 80a1af6:	601a      	strpl	r2, [r3, #0]
 80a1af8:	4b0c      	ldr	r3, [pc, #48]	; (80a1b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1afa:	681a      	ldr	r2, [r3, #0]
 80a1afc:	07d1      	lsls	r1, r2, #31
 80a1afe:	bf5c      	itt	pl
 80a1b00:	2201      	movpl	r2, #1
 80a1b02:	601a      	strpl	r2, [r3, #0]
 80a1b04:	4b0a      	ldr	r3, [pc, #40]	; (80a1b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1b06:	681a      	ldr	r2, [r3, #0]
 80a1b08:	07d2      	lsls	r2, r2, #31
 80a1b0a:	bf5c      	itt	pl
 80a1b0c:	2201      	movpl	r2, #1
 80a1b0e:	601a      	strpl	r2, [r3, #0]
 80a1b10:	4770      	bx	lr
 80a1b12:	bf00      	nop
 80a1b14:	20000910 	.word	0x20000910
 80a1b18:	2000090c 	.word	0x2000090c
 80a1b1c:	20000908 	.word	0x20000908
 80a1b20:	20000904 	.word	0x20000904
 80a1b24:	20000900 	.word	0x20000900
 80a1b28:	200008fc 	.word	0x200008fc
 80a1b2c:	200008f8 	.word	0x200008f8
 80a1b30:	200008f4 	.word	0x200008f4

080a1b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1b34:	4b24      	ldr	r3, [pc, #144]	; (80a1bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1b36:	681a      	ldr	r2, [r3, #0]
 80a1b38:	07d0      	lsls	r0, r2, #31
 80a1b3a:	bf5c      	itt	pl
 80a1b3c:	2201      	movpl	r2, #1
 80a1b3e:	601a      	strpl	r2, [r3, #0]
 80a1b40:	4b22      	ldr	r3, [pc, #136]	; (80a1bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1b42:	681a      	ldr	r2, [r3, #0]
 80a1b44:	07d1      	lsls	r1, r2, #31
 80a1b46:	bf5c      	itt	pl
 80a1b48:	2201      	movpl	r2, #1
 80a1b4a:	601a      	strpl	r2, [r3, #0]
 80a1b4c:	4b20      	ldr	r3, [pc, #128]	; (80a1bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1b4e:	681a      	ldr	r2, [r3, #0]
 80a1b50:	07d2      	lsls	r2, r2, #31
 80a1b52:	bf5c      	itt	pl
 80a1b54:	2201      	movpl	r2, #1
 80a1b56:	601a      	strpl	r2, [r3, #0]
 80a1b58:	4b1e      	ldr	r3, [pc, #120]	; (80a1bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1b5a:	681a      	ldr	r2, [r3, #0]
 80a1b5c:	07d0      	lsls	r0, r2, #31
 80a1b5e:	bf5c      	itt	pl
 80a1b60:	2201      	movpl	r2, #1
 80a1b62:	601a      	strpl	r2, [r3, #0]
 80a1b64:	4b1c      	ldr	r3, [pc, #112]	; (80a1bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1b66:	681a      	ldr	r2, [r3, #0]
 80a1b68:	07d1      	lsls	r1, r2, #31
 80a1b6a:	bf5c      	itt	pl
 80a1b6c:	2201      	movpl	r2, #1
 80a1b6e:	601a      	strpl	r2, [r3, #0]
 80a1b70:	4b1a      	ldr	r3, [pc, #104]	; (80a1bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1b72:	681a      	ldr	r2, [r3, #0]
 80a1b74:	07d2      	lsls	r2, r2, #31
 80a1b76:	bf5c      	itt	pl
 80a1b78:	2201      	movpl	r2, #1
 80a1b7a:	601a      	strpl	r2, [r3, #0]
 80a1b7c:	4b18      	ldr	r3, [pc, #96]	; (80a1be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1b7e:	681a      	ldr	r2, [r3, #0]
 80a1b80:	07d0      	lsls	r0, r2, #31
 80a1b82:	bf5c      	itt	pl
 80a1b84:	2201      	movpl	r2, #1
 80a1b86:	601a      	strpl	r2, [r3, #0]
 80a1b88:	4b16      	ldr	r3, [pc, #88]	; (80a1be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1b8a:	681a      	ldr	r2, [r3, #0]
 80a1b8c:	07d1      	lsls	r1, r2, #31
 80a1b8e:	bf5c      	itt	pl
 80a1b90:	2201      	movpl	r2, #1
 80a1b92:	601a      	strpl	r2, [r3, #0]
 80a1b94:	4b14      	ldr	r3, [pc, #80]	; (80a1be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1b96:	681a      	ldr	r2, [r3, #0]
 80a1b98:	07d2      	lsls	r2, r2, #31
 80a1b9a:	bf5c      	itt	pl
 80a1b9c:	2201      	movpl	r2, #1
 80a1b9e:	601a      	strpl	r2, [r3, #0]
 80a1ba0:	4b12      	ldr	r3, [pc, #72]	; (80a1bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1ba2:	681a      	ldr	r2, [r3, #0]
 80a1ba4:	07d0      	lsls	r0, r2, #31
 80a1ba6:	bf5c      	itt	pl
 80a1ba8:	2201      	movpl	r2, #1
 80a1baa:	601a      	strpl	r2, [r3, #0]
 80a1bac:	4b10      	ldr	r3, [pc, #64]	; (80a1bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1bae:	681a      	ldr	r2, [r3, #0]
 80a1bb0:	07d1      	lsls	r1, r2, #31
 80a1bb2:	bf5c      	itt	pl
 80a1bb4:	2201      	movpl	r2, #1
 80a1bb6:	601a      	strpl	r2, [r3, #0]
 80a1bb8:	4b0e      	ldr	r3, [pc, #56]	; (80a1bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1bba:	681a      	ldr	r2, [r3, #0]
 80a1bbc:	07d2      	lsls	r2, r2, #31
 80a1bbe:	bf5c      	itt	pl
 80a1bc0:	2201      	movpl	r2, #1
 80a1bc2:	601a      	strpl	r2, [r3, #0]
 80a1bc4:	4770      	bx	lr
 80a1bc6:	bf00      	nop
 80a1bc8:	20000940 	.word	0x20000940
 80a1bcc:	2000093c 	.word	0x2000093c
 80a1bd0:	20000938 	.word	0x20000938
 80a1bd4:	20000934 	.word	0x20000934
 80a1bd8:	20000930 	.word	0x20000930
 80a1bdc:	2000092c 	.word	0x2000092c
 80a1be0:	20000928 	.word	0x20000928
 80a1be4:	20000924 	.word	0x20000924
 80a1be8:	20000920 	.word	0x20000920
 80a1bec:	2000091c 	.word	0x2000091c
 80a1bf0:	20000918 	.word	0x20000918
 80a1bf4:	20000914 	.word	0x20000914

080a1bf8 <__aeabi_drsub>:
 80a1bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1bfc:	e002      	b.n	80a1c04 <__adddf3>
 80a1bfe:	bf00      	nop

080a1c00 <__aeabi_dsub>:
 80a1c00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1c04 <__adddf3>:
 80a1c04:	b530      	push	{r4, r5, lr}
 80a1c06:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1c0a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1c0e:	ea94 0f05 	teq	r4, r5
 80a1c12:	bf08      	it	eq
 80a1c14:	ea90 0f02 	teqeq	r0, r2
 80a1c18:	bf1f      	itttt	ne
 80a1c1a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1c1e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1c22:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1c26:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1c2a:	f000 80e2 	beq.w	80a1df2 <__adddf3+0x1ee>
 80a1c2e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1c32:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1c36:	bfb8      	it	lt
 80a1c38:	426d      	neglt	r5, r5
 80a1c3a:	dd0c      	ble.n	80a1c56 <__adddf3+0x52>
 80a1c3c:	442c      	add	r4, r5
 80a1c3e:	ea80 0202 	eor.w	r2, r0, r2
 80a1c42:	ea81 0303 	eor.w	r3, r1, r3
 80a1c46:	ea82 0000 	eor.w	r0, r2, r0
 80a1c4a:	ea83 0101 	eor.w	r1, r3, r1
 80a1c4e:	ea80 0202 	eor.w	r2, r0, r2
 80a1c52:	ea81 0303 	eor.w	r3, r1, r3
 80a1c56:	2d36      	cmp	r5, #54	; 0x36
 80a1c58:	bf88      	it	hi
 80a1c5a:	bd30      	pophi	{r4, r5, pc}
 80a1c5c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1c60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1c64:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1c68:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1c6c:	d002      	beq.n	80a1c74 <__adddf3+0x70>
 80a1c6e:	4240      	negs	r0, r0
 80a1c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1c74:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1c78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1c7c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1c80:	d002      	beq.n	80a1c88 <__adddf3+0x84>
 80a1c82:	4252      	negs	r2, r2
 80a1c84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1c88:	ea94 0f05 	teq	r4, r5
 80a1c8c:	f000 80a7 	beq.w	80a1dde <__adddf3+0x1da>
 80a1c90:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c94:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1c98:	db0d      	blt.n	80a1cb6 <__adddf3+0xb2>
 80a1c9a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1c9e:	fa22 f205 	lsr.w	r2, r2, r5
 80a1ca2:	1880      	adds	r0, r0, r2
 80a1ca4:	f141 0100 	adc.w	r1, r1, #0
 80a1ca8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1cac:	1880      	adds	r0, r0, r2
 80a1cae:	fa43 f305 	asr.w	r3, r3, r5
 80a1cb2:	4159      	adcs	r1, r3
 80a1cb4:	e00e      	b.n	80a1cd4 <__adddf3+0xd0>
 80a1cb6:	f1a5 0520 	sub.w	r5, r5, #32
 80a1cba:	f10e 0e20 	add.w	lr, lr, #32
 80a1cbe:	2a01      	cmp	r2, #1
 80a1cc0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1cc4:	bf28      	it	cs
 80a1cc6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1cca:	fa43 f305 	asr.w	r3, r3, r5
 80a1cce:	18c0      	adds	r0, r0, r3
 80a1cd0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1cd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1cd8:	d507      	bpl.n	80a1cea <__adddf3+0xe6>
 80a1cda:	f04f 0e00 	mov.w	lr, #0
 80a1cde:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1ce2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1ce6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1cea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1cee:	d31b      	bcc.n	80a1d28 <__adddf3+0x124>
 80a1cf0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1cf4:	d30c      	bcc.n	80a1d10 <__adddf3+0x10c>
 80a1cf6:	0849      	lsrs	r1, r1, #1
 80a1cf8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1cfc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1d00:	f104 0401 	add.w	r4, r4, #1
 80a1d04:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1d08:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1d0c:	f080 809a 	bcs.w	80a1e44 <__adddf3+0x240>
 80a1d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1d14:	bf08      	it	eq
 80a1d16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1d1a:	f150 0000 	adcs.w	r0, r0, #0
 80a1d1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1d22:	ea41 0105 	orr.w	r1, r1, r5
 80a1d26:	bd30      	pop	{r4, r5, pc}
 80a1d28:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1d2c:	4140      	adcs	r0, r0
 80a1d2e:	eb41 0101 	adc.w	r1, r1, r1
 80a1d32:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1d36:	f1a4 0401 	sub.w	r4, r4, #1
 80a1d3a:	d1e9      	bne.n	80a1d10 <__adddf3+0x10c>
 80a1d3c:	f091 0f00 	teq	r1, #0
 80a1d40:	bf04      	itt	eq
 80a1d42:	4601      	moveq	r1, r0
 80a1d44:	2000      	moveq	r0, #0
 80a1d46:	fab1 f381 	clz	r3, r1
 80a1d4a:	bf08      	it	eq
 80a1d4c:	3320      	addeq	r3, #32
 80a1d4e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1d52:	f1b3 0220 	subs.w	r2, r3, #32
 80a1d56:	da0c      	bge.n	80a1d72 <__adddf3+0x16e>
 80a1d58:	320c      	adds	r2, #12
 80a1d5a:	dd08      	ble.n	80a1d6e <__adddf3+0x16a>
 80a1d5c:	f102 0c14 	add.w	ip, r2, #20
 80a1d60:	f1c2 020c 	rsb	r2, r2, #12
 80a1d64:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1d68:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d6c:	e00c      	b.n	80a1d88 <__adddf3+0x184>
 80a1d6e:	f102 0214 	add.w	r2, r2, #20
 80a1d72:	bfd8      	it	le
 80a1d74:	f1c2 0c20 	rsble	ip, r2, #32
 80a1d78:	fa01 f102 	lsl.w	r1, r1, r2
 80a1d7c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1d80:	bfdc      	itt	le
 80a1d82:	ea41 010c 	orrle.w	r1, r1, ip
 80a1d86:	4090      	lslle	r0, r2
 80a1d88:	1ae4      	subs	r4, r4, r3
 80a1d8a:	bfa2      	ittt	ge
 80a1d8c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1d90:	4329      	orrge	r1, r5
 80a1d92:	bd30      	popge	{r4, r5, pc}
 80a1d94:	ea6f 0404 	mvn.w	r4, r4
 80a1d98:	3c1f      	subs	r4, #31
 80a1d9a:	da1c      	bge.n	80a1dd6 <__adddf3+0x1d2>
 80a1d9c:	340c      	adds	r4, #12
 80a1d9e:	dc0e      	bgt.n	80a1dbe <__adddf3+0x1ba>
 80a1da0:	f104 0414 	add.w	r4, r4, #20
 80a1da4:	f1c4 0220 	rsb	r2, r4, #32
 80a1da8:	fa20 f004 	lsr.w	r0, r0, r4
 80a1dac:	fa01 f302 	lsl.w	r3, r1, r2
 80a1db0:	ea40 0003 	orr.w	r0, r0, r3
 80a1db4:	fa21 f304 	lsr.w	r3, r1, r4
 80a1db8:	ea45 0103 	orr.w	r1, r5, r3
 80a1dbc:	bd30      	pop	{r4, r5, pc}
 80a1dbe:	f1c4 040c 	rsb	r4, r4, #12
 80a1dc2:	f1c4 0220 	rsb	r2, r4, #32
 80a1dc6:	fa20 f002 	lsr.w	r0, r0, r2
 80a1dca:	fa01 f304 	lsl.w	r3, r1, r4
 80a1dce:	ea40 0003 	orr.w	r0, r0, r3
 80a1dd2:	4629      	mov	r1, r5
 80a1dd4:	bd30      	pop	{r4, r5, pc}
 80a1dd6:	fa21 f004 	lsr.w	r0, r1, r4
 80a1dda:	4629      	mov	r1, r5
 80a1ddc:	bd30      	pop	{r4, r5, pc}
 80a1dde:	f094 0f00 	teq	r4, #0
 80a1de2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1de6:	bf06      	itte	eq
 80a1de8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1dec:	3401      	addeq	r4, #1
 80a1dee:	3d01      	subne	r5, #1
 80a1df0:	e74e      	b.n	80a1c90 <__adddf3+0x8c>
 80a1df2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1df6:	bf18      	it	ne
 80a1df8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1dfc:	d029      	beq.n	80a1e52 <__adddf3+0x24e>
 80a1dfe:	ea94 0f05 	teq	r4, r5
 80a1e02:	bf08      	it	eq
 80a1e04:	ea90 0f02 	teqeq	r0, r2
 80a1e08:	d005      	beq.n	80a1e16 <__adddf3+0x212>
 80a1e0a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1e0e:	bf04      	itt	eq
 80a1e10:	4619      	moveq	r1, r3
 80a1e12:	4610      	moveq	r0, r2
 80a1e14:	bd30      	pop	{r4, r5, pc}
 80a1e16:	ea91 0f03 	teq	r1, r3
 80a1e1a:	bf1e      	ittt	ne
 80a1e1c:	2100      	movne	r1, #0
 80a1e1e:	2000      	movne	r0, #0
 80a1e20:	bd30      	popne	{r4, r5, pc}
 80a1e22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1e26:	d105      	bne.n	80a1e34 <__adddf3+0x230>
 80a1e28:	0040      	lsls	r0, r0, #1
 80a1e2a:	4149      	adcs	r1, r1
 80a1e2c:	bf28      	it	cs
 80a1e2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1e32:	bd30      	pop	{r4, r5, pc}
 80a1e34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1e38:	bf3c      	itt	cc
 80a1e3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1e3e:	bd30      	popcc	{r4, r5, pc}
 80a1e40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1e44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1e48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1e4c:	f04f 0000 	mov.w	r0, #0
 80a1e50:	bd30      	pop	{r4, r5, pc}
 80a1e52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1e56:	bf1a      	itte	ne
 80a1e58:	4619      	movne	r1, r3
 80a1e5a:	4610      	movne	r0, r2
 80a1e5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1e60:	bf1c      	itt	ne
 80a1e62:	460b      	movne	r3, r1
 80a1e64:	4602      	movne	r2, r0
 80a1e66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1e6a:	bf06      	itte	eq
 80a1e6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1e70:	ea91 0f03 	teqeq	r1, r3
 80a1e74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1e78:	bd30      	pop	{r4, r5, pc}
 80a1e7a:	bf00      	nop

080a1e7c <__aeabi_ui2d>:
 80a1e7c:	f090 0f00 	teq	r0, #0
 80a1e80:	bf04      	itt	eq
 80a1e82:	2100      	moveq	r1, #0
 80a1e84:	4770      	bxeq	lr
 80a1e86:	b530      	push	{r4, r5, lr}
 80a1e88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e90:	f04f 0500 	mov.w	r5, #0
 80a1e94:	f04f 0100 	mov.w	r1, #0
 80a1e98:	e750      	b.n	80a1d3c <__adddf3+0x138>
 80a1e9a:	bf00      	nop

080a1e9c <__aeabi_i2d>:
 80a1e9c:	f090 0f00 	teq	r0, #0
 80a1ea0:	bf04      	itt	eq
 80a1ea2:	2100      	moveq	r1, #0
 80a1ea4:	4770      	bxeq	lr
 80a1ea6:	b530      	push	{r4, r5, lr}
 80a1ea8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1eac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1eb0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1eb4:	bf48      	it	mi
 80a1eb6:	4240      	negmi	r0, r0
 80a1eb8:	f04f 0100 	mov.w	r1, #0
 80a1ebc:	e73e      	b.n	80a1d3c <__adddf3+0x138>
 80a1ebe:	bf00      	nop

080a1ec0 <__aeabi_f2d>:
 80a1ec0:	0042      	lsls	r2, r0, #1
 80a1ec2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1ec6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1eca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1ece:	bf1f      	itttt	ne
 80a1ed0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1ed4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ed8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1edc:	4770      	bxne	lr
 80a1ede:	f092 0f00 	teq	r2, #0
 80a1ee2:	bf14      	ite	ne
 80a1ee4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ee8:	4770      	bxeq	lr
 80a1eea:	b530      	push	{r4, r5, lr}
 80a1eec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1ef0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1ef8:	e720      	b.n	80a1d3c <__adddf3+0x138>
 80a1efa:	bf00      	nop

080a1efc <__aeabi_ul2d>:
 80a1efc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f00:	bf08      	it	eq
 80a1f02:	4770      	bxeq	lr
 80a1f04:	b530      	push	{r4, r5, lr}
 80a1f06:	f04f 0500 	mov.w	r5, #0
 80a1f0a:	e00a      	b.n	80a1f22 <__aeabi_l2d+0x16>

080a1f0c <__aeabi_l2d>:
 80a1f0c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f10:	bf08      	it	eq
 80a1f12:	4770      	bxeq	lr
 80a1f14:	b530      	push	{r4, r5, lr}
 80a1f16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1f1a:	d502      	bpl.n	80a1f22 <__aeabi_l2d+0x16>
 80a1f1c:	4240      	negs	r0, r0
 80a1f1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1f22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1f26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1f2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1f2e:	f43f aedc 	beq.w	80a1cea <__adddf3+0xe6>
 80a1f32:	f04f 0203 	mov.w	r2, #3
 80a1f36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f3a:	bf18      	it	ne
 80a1f3c:	3203      	addne	r2, #3
 80a1f3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1f42:	bf18      	it	ne
 80a1f44:	3203      	addne	r2, #3
 80a1f46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1f4a:	f1c2 0320 	rsb	r3, r2, #32
 80a1f4e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1f52:	fa20 f002 	lsr.w	r0, r0, r2
 80a1f56:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1f5a:	ea40 000e 	orr.w	r0, r0, lr
 80a1f5e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1f62:	4414      	add	r4, r2
 80a1f64:	e6c1      	b.n	80a1cea <__adddf3+0xe6>
 80a1f66:	bf00      	nop

080a1f68 <__aeabi_dmul>:
 80a1f68:	b570      	push	{r4, r5, r6, lr}
 80a1f6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1f72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1f76:	bf1d      	ittte	ne
 80a1f78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1f7c:	ea94 0f0c 	teqne	r4, ip
 80a1f80:	ea95 0f0c 	teqne	r5, ip
 80a1f84:	f000 f8de 	bleq	80a2144 <__aeabi_dmul+0x1dc>
 80a1f88:	442c      	add	r4, r5
 80a1f8a:	ea81 0603 	eor.w	r6, r1, r3
 80a1f8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1f92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1f96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1f9a:	bf18      	it	ne
 80a1f9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1fa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1fa8:	d038      	beq.n	80a201c <__aeabi_dmul+0xb4>
 80a1faa:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1fae:	f04f 0500 	mov.w	r5, #0
 80a1fb2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1fb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1fba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1fbe:	f04f 0600 	mov.w	r6, #0
 80a1fc2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1fc6:	f09c 0f00 	teq	ip, #0
 80a1fca:	bf18      	it	ne
 80a1fcc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1fd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1fd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1fd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1fdc:	d204      	bcs.n	80a1fe8 <__aeabi_dmul+0x80>
 80a1fde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1fe2:	416d      	adcs	r5, r5
 80a1fe4:	eb46 0606 	adc.w	r6, r6, r6
 80a1fe8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1fec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1ff0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1ff4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1ff8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1ffc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2000:	bf88      	it	hi
 80a2002:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2006:	d81e      	bhi.n	80a2046 <__aeabi_dmul+0xde>
 80a2008:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a200c:	bf08      	it	eq
 80a200e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2012:	f150 0000 	adcs.w	r0, r0, #0
 80a2016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a201a:	bd70      	pop	{r4, r5, r6, pc}
 80a201c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2020:	ea46 0101 	orr.w	r1, r6, r1
 80a2024:	ea40 0002 	orr.w	r0, r0, r2
 80a2028:	ea81 0103 	eor.w	r1, r1, r3
 80a202c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2030:	bfc2      	ittt	gt
 80a2032:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2036:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a203a:	bd70      	popgt	{r4, r5, r6, pc}
 80a203c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2040:	f04f 0e00 	mov.w	lr, #0
 80a2044:	3c01      	subs	r4, #1
 80a2046:	f300 80ab 	bgt.w	80a21a0 <__aeabi_dmul+0x238>
 80a204a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a204e:	bfde      	ittt	le
 80a2050:	2000      	movle	r0, #0
 80a2052:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2056:	bd70      	pople	{r4, r5, r6, pc}
 80a2058:	f1c4 0400 	rsb	r4, r4, #0
 80a205c:	3c20      	subs	r4, #32
 80a205e:	da35      	bge.n	80a20cc <__aeabi_dmul+0x164>
 80a2060:	340c      	adds	r4, #12
 80a2062:	dc1b      	bgt.n	80a209c <__aeabi_dmul+0x134>
 80a2064:	f104 0414 	add.w	r4, r4, #20
 80a2068:	f1c4 0520 	rsb	r5, r4, #32
 80a206c:	fa00 f305 	lsl.w	r3, r0, r5
 80a2070:	fa20 f004 	lsr.w	r0, r0, r4
 80a2074:	fa01 f205 	lsl.w	r2, r1, r5
 80a2078:	ea40 0002 	orr.w	r0, r0, r2
 80a207c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2088:	fa21 f604 	lsr.w	r6, r1, r4
 80a208c:	eb42 0106 	adc.w	r1, r2, r6
 80a2090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2094:	bf08      	it	eq
 80a2096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a209a:	bd70      	pop	{r4, r5, r6, pc}
 80a209c:	f1c4 040c 	rsb	r4, r4, #12
 80a20a0:	f1c4 0520 	rsb	r5, r4, #32
 80a20a4:	fa00 f304 	lsl.w	r3, r0, r4
 80a20a8:	fa20 f005 	lsr.w	r0, r0, r5
 80a20ac:	fa01 f204 	lsl.w	r2, r1, r4
 80a20b0:	ea40 0002 	orr.w	r0, r0, r2
 80a20b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a20bc:	f141 0100 	adc.w	r1, r1, #0
 80a20c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a20c4:	bf08      	it	eq
 80a20c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a20ca:	bd70      	pop	{r4, r5, r6, pc}
 80a20cc:	f1c4 0520 	rsb	r5, r4, #32
 80a20d0:	fa00 f205 	lsl.w	r2, r0, r5
 80a20d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a20d8:	fa20 f304 	lsr.w	r3, r0, r4
 80a20dc:	fa01 f205 	lsl.w	r2, r1, r5
 80a20e0:	ea43 0302 	orr.w	r3, r3, r2
 80a20e4:	fa21 f004 	lsr.w	r0, r1, r4
 80a20e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20ec:	fa21 f204 	lsr.w	r2, r1, r4
 80a20f0:	ea20 0002 	bic.w	r0, r0, r2
 80a20f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a20f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a20fc:	bf08      	it	eq
 80a20fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2102:	bd70      	pop	{r4, r5, r6, pc}
 80a2104:	f094 0f00 	teq	r4, #0
 80a2108:	d10f      	bne.n	80a212a <__aeabi_dmul+0x1c2>
 80a210a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a210e:	0040      	lsls	r0, r0, #1
 80a2110:	eb41 0101 	adc.w	r1, r1, r1
 80a2114:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2118:	bf08      	it	eq
 80a211a:	3c01      	subeq	r4, #1
 80a211c:	d0f7      	beq.n	80a210e <__aeabi_dmul+0x1a6>
 80a211e:	ea41 0106 	orr.w	r1, r1, r6
 80a2122:	f095 0f00 	teq	r5, #0
 80a2126:	bf18      	it	ne
 80a2128:	4770      	bxne	lr
 80a212a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a212e:	0052      	lsls	r2, r2, #1
 80a2130:	eb43 0303 	adc.w	r3, r3, r3
 80a2134:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2138:	bf08      	it	eq
 80a213a:	3d01      	subeq	r5, #1
 80a213c:	d0f7      	beq.n	80a212e <__aeabi_dmul+0x1c6>
 80a213e:	ea43 0306 	orr.w	r3, r3, r6
 80a2142:	4770      	bx	lr
 80a2144:	ea94 0f0c 	teq	r4, ip
 80a2148:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a214c:	bf18      	it	ne
 80a214e:	ea95 0f0c 	teqne	r5, ip
 80a2152:	d00c      	beq.n	80a216e <__aeabi_dmul+0x206>
 80a2154:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2158:	bf18      	it	ne
 80a215a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a215e:	d1d1      	bne.n	80a2104 <__aeabi_dmul+0x19c>
 80a2160:	ea81 0103 	eor.w	r1, r1, r3
 80a2164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2168:	f04f 0000 	mov.w	r0, #0
 80a216c:	bd70      	pop	{r4, r5, r6, pc}
 80a216e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2172:	bf06      	itte	eq
 80a2174:	4610      	moveq	r0, r2
 80a2176:	4619      	moveq	r1, r3
 80a2178:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a217c:	d019      	beq.n	80a21b2 <__aeabi_dmul+0x24a>
 80a217e:	ea94 0f0c 	teq	r4, ip
 80a2182:	d102      	bne.n	80a218a <__aeabi_dmul+0x222>
 80a2184:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2188:	d113      	bne.n	80a21b2 <__aeabi_dmul+0x24a>
 80a218a:	ea95 0f0c 	teq	r5, ip
 80a218e:	d105      	bne.n	80a219c <__aeabi_dmul+0x234>
 80a2190:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2194:	bf1c      	itt	ne
 80a2196:	4610      	movne	r0, r2
 80a2198:	4619      	movne	r1, r3
 80a219a:	d10a      	bne.n	80a21b2 <__aeabi_dmul+0x24a>
 80a219c:	ea81 0103 	eor.w	r1, r1, r3
 80a21a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a21a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a21a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a21ac:	f04f 0000 	mov.w	r0, #0
 80a21b0:	bd70      	pop	{r4, r5, r6, pc}
 80a21b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a21b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a21ba:	bd70      	pop	{r4, r5, r6, pc}

080a21bc <__aeabi_ddiv>:
 80a21bc:	b570      	push	{r4, r5, r6, lr}
 80a21be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a21c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a21c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a21ca:	bf1d      	ittte	ne
 80a21cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a21d0:	ea94 0f0c 	teqne	r4, ip
 80a21d4:	ea95 0f0c 	teqne	r5, ip
 80a21d8:	f000 f8a7 	bleq	80a232a <__aeabi_ddiv+0x16e>
 80a21dc:	eba4 0405 	sub.w	r4, r4, r5
 80a21e0:	ea81 0e03 	eor.w	lr, r1, r3
 80a21e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a21e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a21ec:	f000 8088 	beq.w	80a2300 <__aeabi_ddiv+0x144>
 80a21f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a21f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a21f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a21fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2200:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2204:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2208:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a220c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2210:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2214:	429d      	cmp	r5, r3
 80a2216:	bf08      	it	eq
 80a2218:	4296      	cmpeq	r6, r2
 80a221a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a221e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2222:	d202      	bcs.n	80a222a <__aeabi_ddiv+0x6e>
 80a2224:	085b      	lsrs	r3, r3, #1
 80a2226:	ea4f 0232 	mov.w	r2, r2, rrx
 80a222a:	1ab6      	subs	r6, r6, r2
 80a222c:	eb65 0503 	sbc.w	r5, r5, r3
 80a2230:	085b      	lsrs	r3, r3, #1
 80a2232:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2236:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a223a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a223e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2242:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2246:	bf22      	ittt	cs
 80a2248:	1ab6      	subcs	r6, r6, r2
 80a224a:	4675      	movcs	r5, lr
 80a224c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2250:	085b      	lsrs	r3, r3, #1
 80a2252:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2256:	ebb6 0e02 	subs.w	lr, r6, r2
 80a225a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a225e:	bf22      	ittt	cs
 80a2260:	1ab6      	subcs	r6, r6, r2
 80a2262:	4675      	movcs	r5, lr
 80a2264:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2268:	085b      	lsrs	r3, r3, #1
 80a226a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a226e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2272:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2276:	bf22      	ittt	cs
 80a2278:	1ab6      	subcs	r6, r6, r2
 80a227a:	4675      	movcs	r5, lr
 80a227c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2280:	085b      	lsrs	r3, r3, #1
 80a2282:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2286:	ebb6 0e02 	subs.w	lr, r6, r2
 80a228a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a228e:	bf22      	ittt	cs
 80a2290:	1ab6      	subcs	r6, r6, r2
 80a2292:	4675      	movcs	r5, lr
 80a2294:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2298:	ea55 0e06 	orrs.w	lr, r5, r6
 80a229c:	d018      	beq.n	80a22d0 <__aeabi_ddiv+0x114>
 80a229e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a22a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a22a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a22aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a22ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a22b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a22b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a22ba:	d1c0      	bne.n	80a223e <__aeabi_ddiv+0x82>
 80a22bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a22c0:	d10b      	bne.n	80a22da <__aeabi_ddiv+0x11e>
 80a22c2:	ea41 0100 	orr.w	r1, r1, r0
 80a22c6:	f04f 0000 	mov.w	r0, #0
 80a22ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a22ce:	e7b6      	b.n	80a223e <__aeabi_ddiv+0x82>
 80a22d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a22d4:	bf04      	itt	eq
 80a22d6:	4301      	orreq	r1, r0
 80a22d8:	2000      	moveq	r0, #0
 80a22da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a22de:	bf88      	it	hi
 80a22e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a22e4:	f63f aeaf 	bhi.w	80a2046 <__aeabi_dmul+0xde>
 80a22e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a22ec:	bf04      	itt	eq
 80a22ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a22f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a22f6:	f150 0000 	adcs.w	r0, r0, #0
 80a22fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a22fe:	bd70      	pop	{r4, r5, r6, pc}
 80a2300:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2304:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2308:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a230c:	bfc2      	ittt	gt
 80a230e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2312:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2316:	bd70      	popgt	{r4, r5, r6, pc}
 80a2318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a231c:	f04f 0e00 	mov.w	lr, #0
 80a2320:	3c01      	subs	r4, #1
 80a2322:	e690      	b.n	80a2046 <__aeabi_dmul+0xde>
 80a2324:	ea45 0e06 	orr.w	lr, r5, r6
 80a2328:	e68d      	b.n	80a2046 <__aeabi_dmul+0xde>
 80a232a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a232e:	ea94 0f0c 	teq	r4, ip
 80a2332:	bf08      	it	eq
 80a2334:	ea95 0f0c 	teqeq	r5, ip
 80a2338:	f43f af3b 	beq.w	80a21b2 <__aeabi_dmul+0x24a>
 80a233c:	ea94 0f0c 	teq	r4, ip
 80a2340:	d10a      	bne.n	80a2358 <__aeabi_ddiv+0x19c>
 80a2342:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2346:	f47f af34 	bne.w	80a21b2 <__aeabi_dmul+0x24a>
 80a234a:	ea95 0f0c 	teq	r5, ip
 80a234e:	f47f af25 	bne.w	80a219c <__aeabi_dmul+0x234>
 80a2352:	4610      	mov	r0, r2
 80a2354:	4619      	mov	r1, r3
 80a2356:	e72c      	b.n	80a21b2 <__aeabi_dmul+0x24a>
 80a2358:	ea95 0f0c 	teq	r5, ip
 80a235c:	d106      	bne.n	80a236c <__aeabi_ddiv+0x1b0>
 80a235e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2362:	f43f aefd 	beq.w	80a2160 <__aeabi_dmul+0x1f8>
 80a2366:	4610      	mov	r0, r2
 80a2368:	4619      	mov	r1, r3
 80a236a:	e722      	b.n	80a21b2 <__aeabi_dmul+0x24a>
 80a236c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2370:	bf18      	it	ne
 80a2372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2376:	f47f aec5 	bne.w	80a2104 <__aeabi_dmul+0x19c>
 80a237a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a237e:	f47f af0d 	bne.w	80a219c <__aeabi_dmul+0x234>
 80a2382:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2386:	f47f aeeb 	bne.w	80a2160 <__aeabi_dmul+0x1f8>
 80a238a:	e712      	b.n	80a21b2 <__aeabi_dmul+0x24a>

080a238c <__aeabi_d2f>:
 80a238c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2390:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2394:	bf24      	itt	cs
 80a2396:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a239a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a239e:	d90d      	bls.n	80a23bc <__aeabi_d2f+0x30>
 80a23a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a23a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a23a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a23ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a23b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a23b4:	bf08      	it	eq
 80a23b6:	f020 0001 	biceq.w	r0, r0, #1
 80a23ba:	4770      	bx	lr
 80a23bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a23c0:	d121      	bne.n	80a2406 <__aeabi_d2f+0x7a>
 80a23c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a23c6:	bfbc      	itt	lt
 80a23c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a23cc:	4770      	bxlt	lr
 80a23ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a23d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a23d6:	f1c2 0218 	rsb	r2, r2, #24
 80a23da:	f1c2 0c20 	rsb	ip, r2, #32
 80a23de:	fa10 f30c 	lsls.w	r3, r0, ip
 80a23e2:	fa20 f002 	lsr.w	r0, r0, r2
 80a23e6:	bf18      	it	ne
 80a23e8:	f040 0001 	orrne.w	r0, r0, #1
 80a23ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a23f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a23f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a23f8:	ea40 000c 	orr.w	r0, r0, ip
 80a23fc:	fa23 f302 	lsr.w	r3, r3, r2
 80a2400:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2404:	e7cc      	b.n	80a23a0 <__aeabi_d2f+0x14>
 80a2406:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a240a:	d107      	bne.n	80a241c <__aeabi_d2f+0x90>
 80a240c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2410:	bf1e      	ittt	ne
 80a2412:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2416:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a241a:	4770      	bxne	lr
 80a241c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2420:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2424:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2428:	4770      	bx	lr
 80a242a:	bf00      	nop

080a242c <__aeabi_frsub>:
 80a242c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2430:	e002      	b.n	80a2438 <__addsf3>
 80a2432:	bf00      	nop

080a2434 <__aeabi_fsub>:
 80a2434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2438 <__addsf3>:
 80a2438:	0042      	lsls	r2, r0, #1
 80a243a:	bf1f      	itttt	ne
 80a243c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2440:	ea92 0f03 	teqne	r2, r3
 80a2444:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2448:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a244c:	d06a      	beq.n	80a2524 <__addsf3+0xec>
 80a244e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2452:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2456:	bfc1      	itttt	gt
 80a2458:	18d2      	addgt	r2, r2, r3
 80a245a:	4041      	eorgt	r1, r0
 80a245c:	4048      	eorgt	r0, r1
 80a245e:	4041      	eorgt	r1, r0
 80a2460:	bfb8      	it	lt
 80a2462:	425b      	neglt	r3, r3
 80a2464:	2b19      	cmp	r3, #25
 80a2466:	bf88      	it	hi
 80a2468:	4770      	bxhi	lr
 80a246a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a246e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2472:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2476:	bf18      	it	ne
 80a2478:	4240      	negne	r0, r0
 80a247a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a247e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2482:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2486:	bf18      	it	ne
 80a2488:	4249      	negne	r1, r1
 80a248a:	ea92 0f03 	teq	r2, r3
 80a248e:	d03f      	beq.n	80a2510 <__addsf3+0xd8>
 80a2490:	f1a2 0201 	sub.w	r2, r2, #1
 80a2494:	fa41 fc03 	asr.w	ip, r1, r3
 80a2498:	eb10 000c 	adds.w	r0, r0, ip
 80a249c:	f1c3 0320 	rsb	r3, r3, #32
 80a24a0:	fa01 f103 	lsl.w	r1, r1, r3
 80a24a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a24a8:	d502      	bpl.n	80a24b0 <__addsf3+0x78>
 80a24aa:	4249      	negs	r1, r1
 80a24ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a24b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a24b4:	d313      	bcc.n	80a24de <__addsf3+0xa6>
 80a24b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a24ba:	d306      	bcc.n	80a24ca <__addsf3+0x92>
 80a24bc:	0840      	lsrs	r0, r0, #1
 80a24be:	ea4f 0131 	mov.w	r1, r1, rrx
 80a24c2:	f102 0201 	add.w	r2, r2, #1
 80a24c6:	2afe      	cmp	r2, #254	; 0xfe
 80a24c8:	d251      	bcs.n	80a256e <__addsf3+0x136>
 80a24ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a24ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a24d2:	bf08      	it	eq
 80a24d4:	f020 0001 	biceq.w	r0, r0, #1
 80a24d8:	ea40 0003 	orr.w	r0, r0, r3
 80a24dc:	4770      	bx	lr
 80a24de:	0049      	lsls	r1, r1, #1
 80a24e0:	eb40 0000 	adc.w	r0, r0, r0
 80a24e4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a24e8:	f1a2 0201 	sub.w	r2, r2, #1
 80a24ec:	d1ed      	bne.n	80a24ca <__addsf3+0x92>
 80a24ee:	fab0 fc80 	clz	ip, r0
 80a24f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a24f6:	ebb2 020c 	subs.w	r2, r2, ip
 80a24fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80a24fe:	bfaa      	itet	ge
 80a2500:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2504:	4252      	neglt	r2, r2
 80a2506:	4318      	orrge	r0, r3
 80a2508:	bfbc      	itt	lt
 80a250a:	40d0      	lsrlt	r0, r2
 80a250c:	4318      	orrlt	r0, r3
 80a250e:	4770      	bx	lr
 80a2510:	f092 0f00 	teq	r2, #0
 80a2514:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2518:	bf06      	itte	eq
 80a251a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a251e:	3201      	addeq	r2, #1
 80a2520:	3b01      	subne	r3, #1
 80a2522:	e7b5      	b.n	80a2490 <__addsf3+0x58>
 80a2524:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2528:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a252c:	bf18      	it	ne
 80a252e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2532:	d021      	beq.n	80a2578 <__addsf3+0x140>
 80a2534:	ea92 0f03 	teq	r2, r3
 80a2538:	d004      	beq.n	80a2544 <__addsf3+0x10c>
 80a253a:	f092 0f00 	teq	r2, #0
 80a253e:	bf08      	it	eq
 80a2540:	4608      	moveq	r0, r1
 80a2542:	4770      	bx	lr
 80a2544:	ea90 0f01 	teq	r0, r1
 80a2548:	bf1c      	itt	ne
 80a254a:	2000      	movne	r0, #0
 80a254c:	4770      	bxne	lr
 80a254e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2552:	d104      	bne.n	80a255e <__addsf3+0x126>
 80a2554:	0040      	lsls	r0, r0, #1
 80a2556:	bf28      	it	cs
 80a2558:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a255c:	4770      	bx	lr
 80a255e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2562:	bf3c      	itt	cc
 80a2564:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2568:	4770      	bxcc	lr
 80a256a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a256e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2572:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2576:	4770      	bx	lr
 80a2578:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a257c:	bf16      	itet	ne
 80a257e:	4608      	movne	r0, r1
 80a2580:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2584:	4601      	movne	r1, r0
 80a2586:	0242      	lsls	r2, r0, #9
 80a2588:	bf06      	itte	eq
 80a258a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a258e:	ea90 0f01 	teqeq	r0, r1
 80a2592:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2596:	4770      	bx	lr

080a2598 <__aeabi_ui2f>:
 80a2598:	f04f 0300 	mov.w	r3, #0
 80a259c:	e004      	b.n	80a25a8 <__aeabi_i2f+0x8>
 80a259e:	bf00      	nop

080a25a0 <__aeabi_i2f>:
 80a25a0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a25a4:	bf48      	it	mi
 80a25a6:	4240      	negmi	r0, r0
 80a25a8:	ea5f 0c00 	movs.w	ip, r0
 80a25ac:	bf08      	it	eq
 80a25ae:	4770      	bxeq	lr
 80a25b0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a25b4:	4601      	mov	r1, r0
 80a25b6:	f04f 0000 	mov.w	r0, #0
 80a25ba:	e01c      	b.n	80a25f6 <__aeabi_l2f+0x2a>

080a25bc <__aeabi_ul2f>:
 80a25bc:	ea50 0201 	orrs.w	r2, r0, r1
 80a25c0:	bf08      	it	eq
 80a25c2:	4770      	bxeq	lr
 80a25c4:	f04f 0300 	mov.w	r3, #0
 80a25c8:	e00a      	b.n	80a25e0 <__aeabi_l2f+0x14>
 80a25ca:	bf00      	nop

080a25cc <__aeabi_l2f>:
 80a25cc:	ea50 0201 	orrs.w	r2, r0, r1
 80a25d0:	bf08      	it	eq
 80a25d2:	4770      	bxeq	lr
 80a25d4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a25d8:	d502      	bpl.n	80a25e0 <__aeabi_l2f+0x14>
 80a25da:	4240      	negs	r0, r0
 80a25dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a25e0:	ea5f 0c01 	movs.w	ip, r1
 80a25e4:	bf02      	ittt	eq
 80a25e6:	4684      	moveq	ip, r0
 80a25e8:	4601      	moveq	r1, r0
 80a25ea:	2000      	moveq	r0, #0
 80a25ec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a25f0:	bf08      	it	eq
 80a25f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a25f6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a25fa:	fabc f28c 	clz	r2, ip
 80a25fe:	3a08      	subs	r2, #8
 80a2600:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2604:	db10      	blt.n	80a2628 <__aeabi_l2f+0x5c>
 80a2606:	fa01 fc02 	lsl.w	ip, r1, r2
 80a260a:	4463      	add	r3, ip
 80a260c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2610:	f1c2 0220 	rsb	r2, r2, #32
 80a2614:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2618:	fa20 f202 	lsr.w	r2, r0, r2
 80a261c:	eb43 0002 	adc.w	r0, r3, r2
 80a2620:	bf08      	it	eq
 80a2622:	f020 0001 	biceq.w	r0, r0, #1
 80a2626:	4770      	bx	lr
 80a2628:	f102 0220 	add.w	r2, r2, #32
 80a262c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2630:	f1c2 0220 	rsb	r2, r2, #32
 80a2634:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2638:	fa21 f202 	lsr.w	r2, r1, r2
 80a263c:	eb43 0002 	adc.w	r0, r3, r2
 80a2640:	bf08      	it	eq
 80a2642:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2646:	4770      	bx	lr

080a2648 <__aeabi_fmul>:
 80a2648:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a264c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2650:	bf1e      	ittt	ne
 80a2652:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2656:	ea92 0f0c 	teqne	r2, ip
 80a265a:	ea93 0f0c 	teqne	r3, ip
 80a265e:	d06f      	beq.n	80a2740 <__aeabi_fmul+0xf8>
 80a2660:	441a      	add	r2, r3
 80a2662:	ea80 0c01 	eor.w	ip, r0, r1
 80a2666:	0240      	lsls	r0, r0, #9
 80a2668:	bf18      	it	ne
 80a266a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a266e:	d01e      	beq.n	80a26ae <__aeabi_fmul+0x66>
 80a2670:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2674:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2678:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a267c:	fba0 3101 	umull	r3, r1, r0, r1
 80a2680:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2684:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2688:	bf3e      	ittt	cc
 80a268a:	0049      	lslcc	r1, r1, #1
 80a268c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2690:	005b      	lslcc	r3, r3, #1
 80a2692:	ea40 0001 	orr.w	r0, r0, r1
 80a2696:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a269a:	2afd      	cmp	r2, #253	; 0xfd
 80a269c:	d81d      	bhi.n	80a26da <__aeabi_fmul+0x92>
 80a269e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a26a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a26a6:	bf08      	it	eq
 80a26a8:	f020 0001 	biceq.w	r0, r0, #1
 80a26ac:	4770      	bx	lr
 80a26ae:	f090 0f00 	teq	r0, #0
 80a26b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a26b6:	bf08      	it	eq
 80a26b8:	0249      	lsleq	r1, r1, #9
 80a26ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a26be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a26c2:	3a7f      	subs	r2, #127	; 0x7f
 80a26c4:	bfc2      	ittt	gt
 80a26c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a26ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a26ce:	4770      	bxgt	lr
 80a26d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a26d4:	f04f 0300 	mov.w	r3, #0
 80a26d8:	3a01      	subs	r2, #1
 80a26da:	dc5d      	bgt.n	80a2798 <__aeabi_fmul+0x150>
 80a26dc:	f112 0f19 	cmn.w	r2, #25
 80a26e0:	bfdc      	itt	le
 80a26e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a26e6:	4770      	bxle	lr
 80a26e8:	f1c2 0200 	rsb	r2, r2, #0
 80a26ec:	0041      	lsls	r1, r0, #1
 80a26ee:	fa21 f102 	lsr.w	r1, r1, r2
 80a26f2:	f1c2 0220 	rsb	r2, r2, #32
 80a26f6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a26fa:	ea5f 0031 	movs.w	r0, r1, rrx
 80a26fe:	f140 0000 	adc.w	r0, r0, #0
 80a2702:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2706:	bf08      	it	eq
 80a2708:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a270c:	4770      	bx	lr
 80a270e:	f092 0f00 	teq	r2, #0
 80a2712:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2716:	bf02      	ittt	eq
 80a2718:	0040      	lsleq	r0, r0, #1
 80a271a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a271e:	3a01      	subeq	r2, #1
 80a2720:	d0f9      	beq.n	80a2716 <__aeabi_fmul+0xce>
 80a2722:	ea40 000c 	orr.w	r0, r0, ip
 80a2726:	f093 0f00 	teq	r3, #0
 80a272a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a272e:	bf02      	ittt	eq
 80a2730:	0049      	lsleq	r1, r1, #1
 80a2732:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2736:	3b01      	subeq	r3, #1
 80a2738:	d0f9      	beq.n	80a272e <__aeabi_fmul+0xe6>
 80a273a:	ea41 010c 	orr.w	r1, r1, ip
 80a273e:	e78f      	b.n	80a2660 <__aeabi_fmul+0x18>
 80a2740:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2744:	ea92 0f0c 	teq	r2, ip
 80a2748:	bf18      	it	ne
 80a274a:	ea93 0f0c 	teqne	r3, ip
 80a274e:	d00a      	beq.n	80a2766 <__aeabi_fmul+0x11e>
 80a2750:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2754:	bf18      	it	ne
 80a2756:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a275a:	d1d8      	bne.n	80a270e <__aeabi_fmul+0xc6>
 80a275c:	ea80 0001 	eor.w	r0, r0, r1
 80a2760:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2764:	4770      	bx	lr
 80a2766:	f090 0f00 	teq	r0, #0
 80a276a:	bf17      	itett	ne
 80a276c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2770:	4608      	moveq	r0, r1
 80a2772:	f091 0f00 	teqne	r1, #0
 80a2776:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a277a:	d014      	beq.n	80a27a6 <__aeabi_fmul+0x15e>
 80a277c:	ea92 0f0c 	teq	r2, ip
 80a2780:	d101      	bne.n	80a2786 <__aeabi_fmul+0x13e>
 80a2782:	0242      	lsls	r2, r0, #9
 80a2784:	d10f      	bne.n	80a27a6 <__aeabi_fmul+0x15e>
 80a2786:	ea93 0f0c 	teq	r3, ip
 80a278a:	d103      	bne.n	80a2794 <__aeabi_fmul+0x14c>
 80a278c:	024b      	lsls	r3, r1, #9
 80a278e:	bf18      	it	ne
 80a2790:	4608      	movne	r0, r1
 80a2792:	d108      	bne.n	80a27a6 <__aeabi_fmul+0x15e>
 80a2794:	ea80 0001 	eor.w	r0, r0, r1
 80a2798:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a279c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a27a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a27a4:	4770      	bx	lr
 80a27a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a27aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a27ae:	4770      	bx	lr

080a27b0 <__aeabi_fdiv>:
 80a27b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a27b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a27b8:	bf1e      	ittt	ne
 80a27ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a27be:	ea92 0f0c 	teqne	r2, ip
 80a27c2:	ea93 0f0c 	teqne	r3, ip
 80a27c6:	d069      	beq.n	80a289c <__aeabi_fdiv+0xec>
 80a27c8:	eba2 0203 	sub.w	r2, r2, r3
 80a27cc:	ea80 0c01 	eor.w	ip, r0, r1
 80a27d0:	0249      	lsls	r1, r1, #9
 80a27d2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a27d6:	d037      	beq.n	80a2848 <__aeabi_fdiv+0x98>
 80a27d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a27dc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a27e0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a27e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a27e8:	428b      	cmp	r3, r1
 80a27ea:	bf38      	it	cc
 80a27ec:	005b      	lslcc	r3, r3, #1
 80a27ee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a27f2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a27f6:	428b      	cmp	r3, r1
 80a27f8:	bf24      	itt	cs
 80a27fa:	1a5b      	subcs	r3, r3, r1
 80a27fc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2800:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2804:	bf24      	itt	cs
 80a2806:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a280a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a280e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2812:	bf24      	itt	cs
 80a2814:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2818:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a281c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2820:	bf24      	itt	cs
 80a2822:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2826:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a282a:	011b      	lsls	r3, r3, #4
 80a282c:	bf18      	it	ne
 80a282e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2832:	d1e0      	bne.n	80a27f6 <__aeabi_fdiv+0x46>
 80a2834:	2afd      	cmp	r2, #253	; 0xfd
 80a2836:	f63f af50 	bhi.w	80a26da <__aeabi_fmul+0x92>
 80a283a:	428b      	cmp	r3, r1
 80a283c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2840:	bf08      	it	eq
 80a2842:	f020 0001 	biceq.w	r0, r0, #1
 80a2846:	4770      	bx	lr
 80a2848:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a284c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2850:	327f      	adds	r2, #127	; 0x7f
 80a2852:	bfc2      	ittt	gt
 80a2854:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2858:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a285c:	4770      	bxgt	lr
 80a285e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2862:	f04f 0300 	mov.w	r3, #0
 80a2866:	3a01      	subs	r2, #1
 80a2868:	e737      	b.n	80a26da <__aeabi_fmul+0x92>
 80a286a:	f092 0f00 	teq	r2, #0
 80a286e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2872:	bf02      	ittt	eq
 80a2874:	0040      	lsleq	r0, r0, #1
 80a2876:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a287a:	3a01      	subeq	r2, #1
 80a287c:	d0f9      	beq.n	80a2872 <__aeabi_fdiv+0xc2>
 80a287e:	ea40 000c 	orr.w	r0, r0, ip
 80a2882:	f093 0f00 	teq	r3, #0
 80a2886:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a288a:	bf02      	ittt	eq
 80a288c:	0049      	lsleq	r1, r1, #1
 80a288e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2892:	3b01      	subeq	r3, #1
 80a2894:	d0f9      	beq.n	80a288a <__aeabi_fdiv+0xda>
 80a2896:	ea41 010c 	orr.w	r1, r1, ip
 80a289a:	e795      	b.n	80a27c8 <__aeabi_fdiv+0x18>
 80a289c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a28a0:	ea92 0f0c 	teq	r2, ip
 80a28a4:	d108      	bne.n	80a28b8 <__aeabi_fdiv+0x108>
 80a28a6:	0242      	lsls	r2, r0, #9
 80a28a8:	f47f af7d 	bne.w	80a27a6 <__aeabi_fmul+0x15e>
 80a28ac:	ea93 0f0c 	teq	r3, ip
 80a28b0:	f47f af70 	bne.w	80a2794 <__aeabi_fmul+0x14c>
 80a28b4:	4608      	mov	r0, r1
 80a28b6:	e776      	b.n	80a27a6 <__aeabi_fmul+0x15e>
 80a28b8:	ea93 0f0c 	teq	r3, ip
 80a28bc:	d104      	bne.n	80a28c8 <__aeabi_fdiv+0x118>
 80a28be:	024b      	lsls	r3, r1, #9
 80a28c0:	f43f af4c 	beq.w	80a275c <__aeabi_fmul+0x114>
 80a28c4:	4608      	mov	r0, r1
 80a28c6:	e76e      	b.n	80a27a6 <__aeabi_fmul+0x15e>
 80a28c8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a28cc:	bf18      	it	ne
 80a28ce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a28d2:	d1ca      	bne.n	80a286a <__aeabi_fdiv+0xba>
 80a28d4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a28d8:	f47f af5c 	bne.w	80a2794 <__aeabi_fmul+0x14c>
 80a28dc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a28e0:	f47f af3c 	bne.w	80a275c <__aeabi_fmul+0x114>
 80a28e4:	e75f      	b.n	80a27a6 <__aeabi_fmul+0x15e>
 80a28e6:	bf00      	nop

080a28e8 <__cxa_atexit>:
 80a28e8:	b510      	push	{r4, lr}
 80a28ea:	4c05      	ldr	r4, [pc, #20]	; (80a2900 <__cxa_atexit+0x18>)
 80a28ec:	4613      	mov	r3, r2
 80a28ee:	b12c      	cbz	r4, 80a28fc <__cxa_atexit+0x14>
 80a28f0:	460a      	mov	r2, r1
 80a28f2:	4601      	mov	r1, r0
 80a28f4:	2002      	movs	r0, #2
 80a28f6:	f3af 8000 	nop.w
 80a28fa:	bd10      	pop	{r4, pc}
 80a28fc:	4620      	mov	r0, r4
 80a28fe:	bd10      	pop	{r4, pc}
 80a2900:	00000000 	.word	0x00000000

080a2904 <memcpy>:
 80a2904:	b510      	push	{r4, lr}
 80a2906:	1e43      	subs	r3, r0, #1
 80a2908:	440a      	add	r2, r1
 80a290a:	4291      	cmp	r1, r2
 80a290c:	d004      	beq.n	80a2918 <memcpy+0x14>
 80a290e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2912:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2916:	e7f8      	b.n	80a290a <memcpy+0x6>
 80a2918:	bd10      	pop	{r4, pc}

080a291a <memset>:
 80a291a:	4603      	mov	r3, r0
 80a291c:	4402      	add	r2, r0
 80a291e:	4293      	cmp	r3, r2
 80a2920:	d002      	beq.n	80a2928 <memset+0xe>
 80a2922:	f803 1b01 	strb.w	r1, [r3], #1
 80a2926:	e7fa      	b.n	80a291e <memset+0x4>
 80a2928:	4770      	bx	lr
	...

080a292c <srand>:
 80a292c:	b538      	push	{r3, r4, r5, lr}
 80a292e:	4b12      	ldr	r3, [pc, #72]	; (80a2978 <srand+0x4c>)
 80a2930:	4605      	mov	r5, r0
 80a2932:	681c      	ldr	r4, [r3, #0]
 80a2934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2936:	b9d3      	cbnz	r3, 80a296e <srand+0x42>
 80a2938:	2018      	movs	r0, #24
 80a293a:	f7fe f8b5 	bl	80a0aa8 <malloc>
 80a293e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2942:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2944:	8003      	strh	r3, [r0, #0]
 80a2946:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a294a:	8043      	strh	r3, [r0, #2]
 80a294c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2950:	8083      	strh	r3, [r0, #4]
 80a2952:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2956:	80c3      	strh	r3, [r0, #6]
 80a2958:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a295c:	8103      	strh	r3, [r0, #8]
 80a295e:	2305      	movs	r3, #5
 80a2960:	8143      	strh	r3, [r0, #10]
 80a2962:	230b      	movs	r3, #11
 80a2964:	8183      	strh	r3, [r0, #12]
 80a2966:	2201      	movs	r2, #1
 80a2968:	2300      	movs	r3, #0
 80a296a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a296e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2970:	2200      	movs	r2, #0
 80a2972:	611d      	str	r5, [r3, #16]
 80a2974:	615a      	str	r2, [r3, #20]
 80a2976:	bd38      	pop	{r3, r4, r5, pc}
 80a2978:	20000368 	.word	0x20000368

080a297c <strdup>:
 80a297c:	4b02      	ldr	r3, [pc, #8]	; (80a2988 <strdup+0xc>)
 80a297e:	4601      	mov	r1, r0
 80a2980:	6818      	ldr	r0, [r3, #0]
 80a2982:	f000 b803 	b.w	80a298c <_strdup_r>
 80a2986:	bf00      	nop
 80a2988:	20000368 	.word	0x20000368

080a298c <_strdup_r>:
 80a298c:	b570      	push	{r4, r5, r6, lr}
 80a298e:	4606      	mov	r6, r0
 80a2990:	4608      	mov	r0, r1
 80a2992:	460c      	mov	r4, r1
 80a2994:	f000 f80d 	bl	80a29b2 <strlen>
 80a2998:	1c45      	adds	r5, r0, #1
 80a299a:	4629      	mov	r1, r5
 80a299c:	4630      	mov	r0, r6
 80a299e:	f7fe f8a3 	bl	80a0ae8 <_malloc_r>
 80a29a2:	4606      	mov	r6, r0
 80a29a4:	b118      	cbz	r0, 80a29ae <_strdup_r+0x22>
 80a29a6:	462a      	mov	r2, r5
 80a29a8:	4621      	mov	r1, r4
 80a29aa:	f7ff ffab 	bl	80a2904 <memcpy>
 80a29ae:	4630      	mov	r0, r6
 80a29b0:	bd70      	pop	{r4, r5, r6, pc}

080a29b2 <strlen>:
 80a29b2:	4603      	mov	r3, r0
 80a29b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a29b8:	2a00      	cmp	r2, #0
 80a29ba:	d1fb      	bne.n	80a29b4 <strlen+0x2>
 80a29bc:	1a18      	subs	r0, r3, r0
 80a29be:	3801      	subs	r0, #1
 80a29c0:	4770      	bx	lr

080a29c2 <link_code_end>:
	...

080a29c4 <dynalib_user>:
 80a29c4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a29d4:	0000 0000                                   ....

080a29d8 <_ZL13releaseNumber>:
 80a29d8:	2e31 3030 0000 6563 736c 7569 0073 6552     1.00..celsius.Re
 80a29e8:	656c 7361 0065 3325 312e 2066 6544 7267     lease.%3.1f Degr
 80a29f8:	6565 2073 0043 6554 706d 7265 7461 7275     ees C.Temperatur
 80a2a08:	0065 0000                                   e...

080a2a0c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2a14:	0b25 080a 0b2b 080a 0b53 080a 0b37 080a     %...+...S...7...
 80a2a24:	0b27 080a                                   '...

080a2a28 <_ZTV7TwoWire>:
	...
 80a2a30:	1095 080a 10df 080a 10b7 080a 1097 080a     ................
 80a2a40:	10bf 080a 10c7 080a 10cf 080a 10d7 080a     ................

080a2a50 <_ZTV9IPAddress>:
	...
 80a2a58:	112f 080a 1121 080a 1123 080a 0066 6e6c     /...!...#...f.ln
 80a2a68:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a2a78:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a2a88:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a2a98:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a2aa8:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a2ab8:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a2ac8:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a2ad8:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a2ae8:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a2af8:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a2b08:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a2b18:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a2b28:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2b38:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2b48 <_ZTVN5spark12NetworkClassE>:
	...
 80a2b50:	11f5 080a 11ff 080a 1209 080a 1213 080a     ................
 80a2b60:	121d 080a 1229 080a 1235 080a 1241 080a     ....)...5...A...
 80a2b70:	1249 080a 1253 080a 125d 080a               I...S...]...

080a2b7c <_ZTV8SPIClass>:
	...
 80a2b84:	1395 080a 1397 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a2b94:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2ba4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2bb4:	0000 0000                                   ....

080a2bb8 <_ZTV11USARTSerial>:
	...
 80a2bc0:	1401 080a 1425 080a 1431 080a 12c1 080a     ....%...1.......
 80a2bd0:	140d 080a 1419 080a 1413 080a 141f 080a     ................
 80a2be0:	1403 080a 1407 080a                         ........

080a2be8 <_ZTV9USBSerial>:
	...
 80a2bf0:	14d9 080a 151d 080a 14f7 080a 12c1 080a     ................
 80a2c00:	14f1 080a 14db 080a 14e3 080a 1517 080a     ................
 80a2c10:	14eb 080a 14d5 080a                         ........

080a2c18 <_ZTVN5spark9WiFiClassE>:
	...
 80a2c20:	16e3 080a 16d9 080a 16cf 080a 1641 080a     ............A...
 80a2c30:	16c3 080a 16b7 080a 16ab 080a 16a3 080a     ................
 80a2c40:	1699 080a 168f 080a 164b 080a               ........K...

080a2c4c <__sf_fake_stdin>:
	...

080a2c6c <__sf_fake_stdout>:
	...

080a2c8c <__sf_fake_stderr>:
	...

080a2cac <link_const_variable_data_end>:
 80a2cac:	080a0195 	.word	0x080a0195
 80a2cb0:	080a041f 	.word	0x080a041f
 80a2cb4:	080a0747 	.word	0x080a0747
 80a2cb8:	080a11e5 	.word	0x080a11e5
 80a2cbc:	080a12ad 	.word	0x080a12ad
 80a2cc0:	080a1379 	.word	0x080a1379
 80a2cc4:	080a13d5 	.word	0x080a13d5
 80a2cc8:	080a13ed 	.word	0x080a13ed
 80a2ccc:	080a16ed 	.word	0x080a16ed
 80a2cd0:	080a18e5 	.word	0x080a18e5
 80a2cd4:	080a1915 	.word	0x080a1915
 80a2cd8:	080a1969 	.word	0x080a1969
 80a2cdc:	080a1a2d 	.word	0x080a1a2d
 80a2ce0:	080a1ab1 	.word	0x080a1ab1
 80a2ce4:	080a1b35 	.word	0x080a1b35

080a2ce8 <link_constructors_end>:
	...
